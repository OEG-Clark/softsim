{"home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.G_from_SE": [[16, 20], ["fpath.split", "name.split", "models.helper.build_generator"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_generator"], ["def", "G_from_SE", "(", "fpath", ")", ":", "\n", "  ", "name", "=", "fpath", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "\n", "model_name", "=", "\"_\"", ".", "join", "(", "name", ".", "split", "(", "\"_\"", ")", "[", ":", "2", "]", ")", "\n", "return", "model_name", ",", "build_generator", "(", "model_name", ")", ".", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.write_results": [[22, 29], ["open", "f.write", "f.write", "float", "str", "str", "float"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["", "def", "write_results", "(", "res_path", ",", "mIoU", ",", "c_ious", ")", ":", "\n", "  ", "\"\"\"Write results to a txt file. Paired with read_results.\"\"\"", "\n", "with", "open", "(", "res_path", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "c_ious", "=", "[", "float", "(", "i", ")", "for", "i", "in", "c_ious", "]", "\n", "s", "=", "[", "str", "(", "c", ")", "for", "c", "in", "c_ious", "]", "\n", "f", ".", "write", "(", "str", "(", "float", "(", "mIoU", ")", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "write", "(", "\" \"", ".", "join", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.read_results": [[31, 42], ["numpy.array", "float", "open", "float", "x[].mean", "abs", "print", "f.readline().strip", "float", "f.readline().strip().split", "f.readline", "f.readline().strip", "f.readline"], "function", ["None"], ["", "", "def", "read_results", "(", "res_path", ")", ":", "\n", "  ", "\"\"\"Read results from a txt file. Paired with write_results.\"\"\"", "\n", "with", "open", "(", "res_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "mIoU", "=", "float", "(", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ")", "\n", "c_iou", "=", "[", "float", "(", "i", ")", "for", "i", "in", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "]", "\n", "", "x", "=", "np", ".", "array", "(", "c_iou", ")", "\n", "mIoU_", "=", "float", "(", "x", "[", "x", ">", "-", "0.1", "]", ".", "mean", "(", ")", ")", "\n", "if", "abs", "(", "mIoU_", "-", "mIoU", ")", ">", "1e-3", ":", "\n", "    ", "print", "(", "f\"!> {mIoU_} does not match original {mIoU}\"", ")", "\n", "return", "mIoU_", ",", "c_iou", "\n", "", "return", "mIoU", ",", "c_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.eval_SE_path": [[44, 62], ["os.path.exists", "evaluate.G_from_SE", "models.helper.load_semantic_extractor", "models.helper.load_semantic_extractor.cuda().eval", "evaluate.evaluate_SE", "evaluate.write_results", "print", "predictors.face_segmenter.FaceSegmenter", "predictors.scene_segmenter.SceneSegmenter", "SE_path.split", "models.helper.load_semantic_extractor.cuda"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.G_from_SE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.load_semantic_extractor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.evaluate_SE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.write_results"], ["", "def", "eval_SE_path", "(", "SE_path", ",", "num", ",", "save_path", ",", "latent_strategy", ")", ":", "\n", "  ", "SE_args", "=", "SE_path", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", "+", "f\"_els{latent_strategy}\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "f\"{save_path}/{SE_args}.txt\"", ")", ":", "\n", "    ", "print", "(", "\"=> evaluation result exists, skip.\"", ")", "\n", "return", "\n", "", "G_name", ",", "G", "=", "G_from_SE", "(", "SE_path", ")", "\n", "is_face", "=", "\"celebahq\"", "in", "SE_path", "or", "\"ffhq\"", "in", "SE_path", "\n", "P", "=", "face_segmenter", ".", "FaceSegmenter", "(", ")", "if", "is_face", "else", "scene_segmenter", ".", "SceneSegmenter", "(", "model_name", "=", "G_name", ")", "\n", "resolution", "=", "512", "if", "is_face", "else", "256", "\n", "\n", "SE", "=", "load_semantic_extractor", "(", "SE_path", ")", "\n", "SE", ".", "cuda", "(", ")", ".", "eval", "(", ")", "\n", "\n", "mIoU", ",", "c_ious", "=", "evaluate_SE", "(", "\n", "SE", ",", "G", ",", "P", ",", "resolution", ",", "num", ",", "latent_strategy", ")", "\n", "res_path", "=", "f\"{save_path}/{SE_args}.txt\"", "\n", "write_results", "(", "res_path", ",", "mIoU", ",", "c_ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.aggregate_iou": [[64, 74], ["torch.stack", "torch.zeros", "range", "c_iou[].mean", "val.mean"], "function", ["None"], ["", "def", "aggregate_iou", "(", "res", ")", ":", "\n", "# r[0] is pixelacc, r[1] is IoU", "\n", "  ", "ic_iou", "=", "torch", ".", "stack", "(", "[", "r", "[", "1", "]", "for", "r", "in", "res", "]", ")", "\n", "c_iou", "=", "torch", ".", "zeros", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", "\n", "for", "c", "in", "range", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "val", "=", "ic_iou", "[", ":", ",", "c", "]", "\n", "val", "=", "val", "[", "val", ">", "-", "0.1", "]", "\n", "c_iou", "[", "c", "]", "=", "-", "1", "if", "val", ".", "shape", "[", "0", "]", "==", "0", "else", "val", ".", "mean", "(", ")", "\n", "", "mIoU", "=", "c_iou", "[", "c_iou", ">", "-", "0.1", "]", ".", "mean", "(", ")", "\n", "return", "mIoU", ",", "c_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.evaluate_SE": [[76, 92], ["models.semantic_extractor.SELearner().cuda", "tqdm.tqdm", "evaluate.aggregate_iou", "range", "seg[].argmax", "pytorch_lightning.metrics.functional.iou", "res.append", "models.semantic_extractor.SELearner", "torch.no_grad", "SELearner().cuda.", "float", "torch.randn().cuda", "seg[].argmax.shape.numel", "torch.randn"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.aggregate_iou"], ["", "def", "evaluate_SE", "(", "SE", ",", "G", ",", "P", ",", "resolution", ",", "num", ",", "ls", "=", "'trunc-wp'", ")", ":", "\n", "  ", "learner", "=", "SELearner", "(", "SE", ",", "G", ",", "P", ",", "\n", "resolution", "=", "resolution", ",", "latent_strategy", "=", "ls", ")", ".", "cuda", "(", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "num", ")", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "seg", ",", "label", "=", "learner", "(", "torch", ".", "randn", "(", "1", ",", "512", ")", ".", "cuda", "(", ")", ")", "\n", "\n", "", "dt", "=", "seg", "[", "-", "1", "]", ".", "argmax", "(", "1", ")", "\n", "gt", "=", "label", "\n", "IoU", "=", "iou", "(", "dt", ",", "gt", ",", "num_classes", "=", "SE", ".", "n_class", ",", "\n", "ignore_index", "=", "0", ",", "absent_score", "=", "-", "1", ",", "reduction", "=", "'none'", ")", "\n", "pixelacc", "=", "(", "dt", "==", "gt", ")", ".", "sum", "(", ")", "/", "float", "(", "dt", ".", "shape", ".", "numel", "(", ")", ")", "\n", "res", ".", "append", "(", "[", "pixelacc", ",", "IoU", "]", ")", "\n", "", "mIoU", ",", "c_ious", "=", "aggregate_iou", "(", "res", ")", "\n", "return", "mIoU", ",", "c_ious", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.evaluate_predictions": [[94, 110], ["range", "sample_labels.max", "target_labels[].cuda", "range", "sample_labels[].cuda", "pytorch_lightning.metrics.functional.iou().cpu", "res.append", "float", "pytorch_lightning.metrics.functional.iou", "sample_labels[].cuda.shape.numel"], "function", ["None"], ["", "def", "evaluate_predictions", "(", "target_labels", ",", "sample_labels", ")", ":", "\n", "  ", "N", ",", "M", "=", "sample_labels", ".", "shape", "[", ":", "2", "]", "\n", "n_class", "=", "sample_labels", ".", "max", "(", ")", "+", "1", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "    ", "gt", "=", "target_labels", "[", "i", "]", ".", "cuda", "(", ")", "\n", "for", "j", "in", "range", "(", "M", ")", ":", "\n", "      ", "dt", "=", "sample_labels", "[", "i", ",", "j", "]", ".", "cuda", "(", ")", "\n", "IoU", "=", "iou", "(", "dt", ",", "gt", ",", "\n", "num_classes", "=", "n_class", ",", "\n", "ignore_index", "=", "0", ",", "# This will cause background to be ignored", "\n", "absent_score", "=", "-", "1", ",", "# resulting in n_class - 1 vectors", "\n", "reduction", "=", "'none'", ")", ".", "cpu", "(", ")", "\n", "pixelacc", "=", "(", "dt", "==", "gt", ")", ".", "sum", "(", ")", "/", "float", "(", "dt", ".", "shape", ".", "numel", "(", ")", ")", "\n", "res", ".", "append", "(", "[", "pixelacc", ",", "IoU", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.train.main": [[18, 87], ["models.helper.build_generator", "print", "models.helper.build_semantic_extractor.cuda().train", "lib.dataset.NoiseDataModule", "torch.randn().cuda", "hasattr", "pytorch_lightning.TensorBoardLogger", "models.semantic_extractor.SELearner", "pytorch_lightning.Trainer", "pl.Trainer.fit", "models.helper.save_semantic_extractor", "FaceSegmenter", "len", "models.helper.load_semantic_extractor", "list", "models.helper.build_semantic_extractor", "lib.callback.SEVisualizerCallback", "lib.callback.TrainingEvaluationCallback", "print", "models.helper.build_semantic_extractor._calc_layer_weight", "print", "callbacks.append", "DIR.replace", "evaluate.evaluate_SE", "evaluate.write_results", "SceneSegmenter", "SceneSegmenter", "models.helper.build_generator.", "range", "models.helper.build_semantic_extractor.cuda", "torch.randn", "lib.callback.WeightVisualizerCallback", "models.helper.build_generator.easy_sample", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_generator", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.train", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.save_semantic_extractor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.load_semantic_extractor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_semantic_extractor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE._calc_layer_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.evaluate_SE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.write_results", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample"], ["def", "main", "(", "args", ")", ":", "\n", "  ", "from", "predictors", ".", "face_segmenter", "import", "FaceSegmenter", "\n", "from", "predictors", ".", "scene_segmenter", "import", "SceneSegmenter", "\n", "\n", "DIR", "=", "f\"{args.expr}/{args.G}_{args.SE}_l{args.loss_type}_ls{args.latent_strategy}_lw{args.layer_weight}_lr{args.lr}\"", "\n", "G", "=", "build_generator", "(", "args", ".", "G", ")", "\n", "is_face", "=", "\"celebahq\"", "in", "args", ".", "G", "or", "\"ffhq\"", "in", "args", ".", "G", "\n", "if", "is_face", ":", "\n", "    ", "P", "=", "FaceSegmenter", "(", ")", "\n", "", "else", ":", "\n", "    ", "if", "args", ".", "full_label", ":", "\n", "      ", "P", "=", "SceneSegmenter", "(", ")", "\n", "", "else", ":", "\n", "      ", "P", "=", "SceneSegmenter", "(", "model_name", "=", "args", ".", "G", ")", "\n", "", "", "print", "(", "f\"=> Segmenter has {P.num_categories} classes\"", ")", "\n", "\n", "if", "len", "(", "args", ".", "reload", ")", ">", "1", ":", "\n", "    ", "SE", "=", "load_semantic_extractor", "(", "args", ".", "reload", ")", "\n", "", "else", ":", "\n", "    ", "features", "=", "G", "(", "G", ".", "easy_sample", "(", "1", ")", ")", "[", "'feature'", "]", "\n", "dims", "=", "[", "s", ".", "shape", "[", "1", "]", "for", "s", "in", "features", "]", "\n", "layers", "=", "list", "(", "range", "(", "len", "(", "dims", ")", ")", ")", "\n", "SE", "=", "build_semantic_extractor", "(", "\n", "lw_type", "=", "args", ".", "layer_weight", ",", "\n", "model_name", "=", "args", ".", "SE", ",", "\n", "n_class", "=", "P", ".", "num_categories", ",", "\n", "dims", "=", "dims", ",", "\n", "layers", "=", "layers", ")", "\n", "", "SE", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "\n", "dm", "=", "NoiseDataModule", "(", "train_size", "=", "1024", ",", "batch_size", "=", "1", ")", "\n", "z", "=", "torch", ".", "randn", "(", "6", ",", "512", ")", ".", "cuda", "(", ")", "\n", "resolution", "=", "512", "if", "is_face", "else", "256", "\n", "callbacks", "=", "[", "\n", "SEVisualizerCallback", "(", "z", ",", "interval", "=", "5", "*", "1024", ")", ",", "\n", "TrainingEvaluationCallback", "(", ")", "]", "\n", "\n", "if", "hasattr", "(", "SE", ",", "\"layer_weight\"", ")", ":", "\n", "    ", "print", "(", "\"=> Layer weight\"", ")", "\n", "weight", "=", "SE", ".", "_calc_layer_weight", "(", ")", "\n", "s", "=", "\" \"", ".", "join", "(", "[", "f\"{w:.2f}\"", "for", "w", "in", "weight", "]", ")", "\n", "print", "(", "f\"=> Layer weight: {s}\"", ")", "\n", "callbacks", ".", "append", "(", "WeightVisualizerCallback", "(", ")", ")", "\n", "\n", "", "logger", "=", "pl_logger", ".", "TensorBoardLogger", "(", "DIR", ")", "\n", "learner", "=", "SELearner", "(", "model", "=", "SE", ",", "G", "=", "G", ".", "net", ",", "P", "=", "P", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "loss_type", "=", "args", ".", "loss_type", ",", "\n", "latent_strategy", "=", "args", ".", "latent_strategy", ",", "\n", "resolution", "=", "resolution", ",", "\n", "save_dir", "=", "DIR", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "logger", "=", "logger", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", "accumulate_grad_batches", "=", "{", "0", ":", "1", ",", "2", ":", "4", ",", "18", ":", "64", "}", ",", "\n", "max_epochs", "=", "50", ",", "\n", "progress_bar_refresh_rate", "=", "0", "if", "args", ".", "slurm", "else", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "gpus", "=", "1", ",", "\n", "distributed_backend", "=", "'dp'", ")", "\n", "trainer", ".", "fit", "(", "learner", ",", "dm", ")", "\n", "save_semantic_extractor", "(", "SE", ",", "f\"{DIR}/{args.G}_{args.SE}.pth\"", ")", "\n", "\n", "if", "args", ".", "eval", "==", "1", ":", "\n", "    ", "res_dir", "=", "DIR", ".", "replace", "(", "args", ".", "expr", ",", "\"results/semantics/\"", ")", "\n", "num", "=", "10000", "\n", "mIoU", ",", "c_ious", "=", "evaluate_SE", "(", "SE", ",", "G", ".", "net", ",", "P", ",", "\n", "resolution", ",", "num", ",", "args", ".", "latent_strategy", ")", "\n", "write_results", "(", "f\"{res_dir}_els{args.latent_strategy}.txt\"", ",", "mIoU", ",", "c_ious", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.train_fewshot.UpdateDataCallback.__init__": [[35, 39], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "wp", "=", "None", ",", "is_large_mem", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_large_mem", "=", "is_large_mem", "\n", "self", ".", "wp", "=", "wp", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.train_fewshot.UpdateDataCallback.on_epoch_end": [[40, 45], ["train_fewshot.get_features"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.train_fewshot.get_features"], ["", "def", "on_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "del", "pl_module", ".", "feature", "\n", "features", "=", "get_features", "(", "G", ".", "net", ".", "synthesis", ",", "self", ".", "wp", ",", "\n", "is_large_mem", "=", "self", ".", "is_large_mem", ")", "\n", "pl_module", ".", "feature", "=", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.train_fewshot.get_features": [[13, 32], ["torch.no_grad", "range", "torch.cat", "torch.cat", "synthesis", "features.append", "range", "torch.cat.append", "len", "P().long", "f.cpu", "P"], "function", ["None"], ["def", "get_features", "(", "synthesis", ",", "wp", ",", "P", "=", "None", ",", "is_large_mem", "=", "False", ")", ":", "\n", "#images = []", "\n", "  ", "features", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "wp", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "image", ",", "feature", "=", "synthesis", "(", "wp", "[", "i", ":", "i", "+", "1", "]", ",", "generate_feature", "=", "True", ")", "\n", "if", "P", ":", "\n", "        ", "labels", ".", "append", "(", "P", "(", "image", ",", "size", "=", "resolution", ")", ".", "long", "(", ")", ")", "\n", "", "if", "is_large_mem", ":", "\n", "        ", "feature", "=", "[", "f", ".", "cpu", "(", ")", "for", "f", "in", "feature", "]", "\n", "", "features", ".", "append", "(", "feature", ")", "\n", "#images.append(image)", "\n", "", "", "features", "=", "[", "torch", ".", "cat", "(", "[", "feats", "[", "i", "]", "for", "feats", "in", "features", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "features", "[", "0", "]", ")", ")", "]", "\n", "if", "P", ":", "\n", "    ", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "return", "features", ",", "labels", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.layerwise_LSE": [[11, 19], ["srcmd.format", "cmds.append"], "function", ["None"], ["def", "layerwise_LSE", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE {SE} --eval 0 --expr expr/semantics_layerwise --loss-type normallayer\"", "\n", "Gs", "=", "\"stylegan2_bedroom,stylegan_bedroom,pggan_bedroom,stylegan2_church,stylegan_church,pggan_church,pggan_celebahq,stylegan_celebahq,stylegan2_ffhq\"", ".", "split", "(", "\",\"", ")", "\n", "for", "G", "in", "Gs", ":", "\n", "    ", "cmd", "=", "srcmd", ".", "format", "(", "G", "=", "G", ",", "SE", "=", "\"LSE\"", ")", "\n", "cmds", ".", "append", "(", "cmd", ")", "\n", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.sr_LSE_arch": [[21, 31], ["cmds.append", "srcmd.format"], "function", ["None"], ["", "def", "sr_LSE_arch", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE LSE --lr 0.001 --loss-type {loss_type} --layer-weight {layer_weight} --latent-strategy trunc-wp\"", "\n", "Gs", "=", "[", "\"stylegan2_bedroom\"", ",", "\"stylegan_bedroom\"", ",", "\"pggan_bedroom\"", ",", "\"stylegan2_church\"", ",", "\"stylegan_church\"", ",", "\"pggan_church\"", "]", "\n", "for", "G", "in", "Gs", ":", "\n", "    ", "for", "layer_weight", "in", "[", "\"softplus\"", ",", "\"none\"", "]", ":", "\n", "      ", "for", "loss_type", "in", "[", "'focal'", ",", "'normal'", "]", ":", "\n", "        ", "cmds", ".", "append", "(", "srcmd", ".", "format", "(", "G", "=", "G", ",", "layer_weight", "=", "layer_weight", ",", "\n", "loss_type", "=", "loss_type", ")", ")", "\n", "", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.sr_NSE_arch": [[33, 43], ["cmds.append", "srcmd.format"], "function", ["None"], ["", "def", "sr_NSE_arch", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE NSE-1 --lr 0.001 --loss-type {loss_type} --layer-weight {layer_weight} --latent-strategy trunc-wp\"", "\n", "Gs", "=", "[", "\"stylegan2_bedroom\"", ",", "\"stylegan_bedroom\"", ",", "\"pggan_bedroom\"", ",", "\"stylegan2_church\"", ",", "\"stylegan_church\"", ",", "\"pggan_church\"", "]", "\n", "for", "G", "in", "Gs", ":", "\n", "    ", "for", "layer_weight", "in", "[", "\"softplus\"", ",", "\"none\"", "]", ":", "\n", "      ", "for", "loss_type", "in", "[", "'focal'", ",", "'normal'", "]", ":", "\n", "        ", "cmds", ".", "append", "(", "srcmd", ".", "format", "(", "G", "=", "G", ",", "layer_weight", "=", "layer_weight", ",", "\n", "loss_type", "=", "loss_type", ")", ")", "\n", "", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.sr_all_method": [[45, 54], ["srcmd.format", "cmds.append"], "function", ["None"], ["", "def", "sr_all_method", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE {SE}\"", "\n", "Gs", "=", "\"stylegan2_bedroom,stylegan_bedroom,pggan_bedroom,stylegan2_church,stylegan_church,pggan_church,pggan_celebahq,stylegan_celebahq,stylegan2_ffhq\"", ".", "split", "(", "\",\"", ")", "\n", "for", "G", "in", "Gs", ":", "\n", "    ", "for", "SE", "in", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", ":", "\n", "      ", "cmd", "=", "srcmd", ".", "format", "(", "G", "=", "G", ",", "SE", "=", "SE", ")", "\n", "cmds", ".", "append", "(", "cmd", ")", "\n", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.sr_all_method_face": [[56, 65], ["srcmd.format", "cmds.append"], "function", ["None"], ["", "def", "sr_all_method_face", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE {SE}\"", "\n", "Gs", "=", "\"stylegan2_ffhq,stylegan_celebahq,pggan_celebahq\"", ".", "split", "(", "\",\"", ")", "\n", "for", "SE", "in", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", ":", "\n", "    ", "for", "G", "in", "Gs", ":", "\n", "      ", "cmd", "=", "srcmd", ".", "format", "(", "G", "=", "G", ",", "SE", "=", "SE", ")", "\n", "cmds", ".", "append", "(", "cmd", ")", "\n", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.sr_all_method_other": [[67, 76], ["srcmd.format", "cmds.append"], "function", ["None"], ["", "def", "sr_all_method_other", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE {SE}\"", "\n", "Gs", "=", "\"stylegan2_bedroom,stylegan2_church,stylegan_bedroom,stylegan_church,pggan_bedroom,pggan_church\"", ".", "split", "(", "\",\"", ")", "\n", "for", "SE", "in", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", ":", "\n", "    ", "for", "G", "in", "Gs", ":", "\n", "      ", "cmd", "=", "srcmd", ".", "format", "(", "G", "=", "G", ",", "SE", "=", "SE", ")", "\n", "cmds", ".", "append", "(", "cmd", ")", "\n", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.train_fewshot": [[78, 87], ["range", "cmds.append", "evalcmd.format"], "function", ["None"], ["", "def", "train_fewshot", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "evalcmd", "=", "\"python3 train_fewshot.py --G {G} --num-sample {num_sample} --repeat-ind {repeat_ind}\"", "\n", "for", "repeat_ind", "in", "range", "(", "5", ")", ":", "\n", "    ", "for", "G", "in", "[", "\"stylegan2_ffhq\"", "]", ":", "#[\"stylegan2_church\", \"stylegan2_bedroom\"]:", "\n", "      ", "for", "num_sample", "in", "[", "8", ",", "1", ",", "4", ",", "16", "]", ":", "\n", "        ", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "G", "=", "G", ",", "\n", "num_sample", "=", "num_sample", ",", "repeat_ind", "=", "repeat_ind", ")", ")", "\n", "", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.scs": [[89, 105], ["range", "zip", "SE_format.format", "cmds.append", "evalcmd.format", "cmds.append", "evalcmd.format"], "function", ["None"], ["", "def", "scs", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "Gs", "=", "[", "\"stylegan2_bedroom\"", ",", "\"stylegan2_church\"", ",", "\"stylegan2_ffhq\"", "]", "\n", "n_inits", "=", "[", "10", ",", "100", ",", "100", "]", "\n", "SE_format", "=", "\"expr/fewshot/{G}_LSE_fewshot/r{rind}_n{num_sample}.pth\"", "\n", "evalcmd", "=", "\"python manipulation/scs.py --SE {SE} --n-init {n_init}\"", "\n", "for", "rind", "in", "range", "(", "5", ")", ":", "\n", "    ", "for", "num_sample", "in", "[", "1", ",", "4", ",", "8", ",", "16", "]", ":", "\n", "      ", "for", "G", ",", "n_init", "in", "zip", "(", "Gs", ",", "n_inits", ")", ":", "\n", "        ", "SE", "=", "SE_format", ".", "format", "(", "G", "=", "G", ",", "rind", "=", "rind", ",", "num_sample", "=", "num_sample", ")", "\n", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "SE", "=", "SE", ",", "rind", "=", "rind", ",", "n_init", "=", "n_init", ")", ")", "\n", "if", "num_sample", "==", "1", "and", "rind", "==", "0", ":", "\n", "          ", "SE", "=", "f\"{G}_baseline\"", "\n", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "SE", "=", "SE", ",", "n_init", "=", "n_init", ")", ")", "\n", "\n", "", "", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.qualitative_figures": [[107, 121], ["cmds.append", "evalcmd.format"], "function", ["None"], ["", "def", "qualitative_figures", "(", ")", ":", "\n", "  ", "evalcmd", "=", "\"python figure/qualitative_paper.py --op {op} --place {place} --repeat {repeat} --row-set-num {row_set_num}\"", "\n", "cmds", "=", "[", "]", "\n", "for", "place", "in", "[", "\"paper\"", ",", "\"appendix\"", "]", ":", "\n", "    ", "for", "op", "in", "[", "\"face\"", ",", "\"bedroom\"", ",", "\"church\"", "]", ":", "\n", "      ", "for", "row_set_num", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "if", "place", "==", "\"paper\"", ":", "\n", "          ", "repeat", "=", "row_set_num", "\n", "", "else", ":", "\n", "          ", "repeat", "=", "row_set_num", "*", "5", "\n", "", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "\n", "op", "=", "op", ",", "place", "=", "place", ",", "\n", "repeat", "=", "repeat", ",", "row_set_num", "=", "row_set_num", ")", ")", "\n", "", "", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.submit.generator_semantics": [[123, 130], ["ALL_GANs.split", "cmds.append", "basecmd.format"], "function", ["None"], ["", "def", "generator_semantics", "(", ")", ":", "\n", "  ", "ALL_GANs", "=", "\"stylegan2_bedroom,stylegan2_church,stylegan_bedroom,stylegan_church,pggan_bedroom,pggan_church,pggan_celebahq,stylegan_celebahq,stylegan2_ffhq,stylegan2_car,stylegan_ffhq\"", "\n", "cmds", "=", "[", "]", "\n", "basecmd", "=", "\"python script/semantics/generator_semantics.py --G {G}\"", "\n", "for", "G", "in", "ALL_GANs", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "cmds", ".", "append", "(", "basecmd", ".", "format", "(", "G", "=", "G", ")", ")", "\n", "", "return", "cmds", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.lerp": [[9, 15], ["None"], "function", ["None"], ["def", "lerp", "(", "a", ",", "b", ",", "x", ",", "y", ",", "i", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    input from [a, b], output to [x, y], current position i\n  \"\"\"", "\n", "return", "(", "i", "-", "a", ")", "/", "(", "b", "-", "a", ")", "*", "(", "y", "-", "x", ")", "+", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.int2onehot": [[17, 20], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to.scatter_", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "int2onehot", "(", "x", ",", "n", ")", ":", "\n", "    ", "z", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "n", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "return", "z", ".", "scatter_", "(", "1", ",", "x", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.gaussian_func": [[22, 26], ["numpy.exp", "math.sqrt"], "function", ["None"], ["", "def", "gaussian_func", "(", "x", ",", "mean", ",", "std", ")", ":", "\n", "  ", "coef", "=", "1", "/", "math", ".", "sqrt", "(", "2", "*", "math", ".", "pi", ")", "/", "std", "\n", "vals", "=", "np", ".", "exp", "(", "-", "(", "x", "-", "mean", ")", "**", "2", "/", "2", "/", "std", "/", "std", ")", "\n", "return", "coef", "*", "vals", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.get_mixwp": [[28, 33], ["torch.randn().cuda", "torch.randn().cuda", "G.mapping().view", "torch.randn", "torch.randn", "G.mapping"], "function", ["None"], ["", "def", "get_mixwp", "(", "G", ",", "N", "=", "1", ")", ":", "\n", "  ", "\"\"\"Sample a mixed W+ latent vector. Available for StyleGANs.\"\"\"", "\n", "L", "=", "G", ".", "num_layers", "\n", "zs", "=", "torch", ".", "randn", "(", "N", "*", "L", ",", "512", ")", ".", "cuda", "(", ")", "\n", "return", "G", ".", "mapping", "(", "zs", ")", ".", "view", "(", "N", ",", "L", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.mixwp_sample": [[35, 48], ["hasattr", "torch.randn().cuda", "torch.randn().cuda", "op.get_mixwp", "torch.randn", "torch.randn"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.get_mixwp"], ["", "def", "mixwp_sample", "(", "G", ",", "N", ")", ":", "\n", "  ", "\"\"\"If G is a StyleGAN, return a mixed wp. \n  If G is PGGAN, return a normal latent vector.\n  \n  Args:\n    G : The generator.\n    N : The number of samples.\n  Returns:\n    N sampled mixed wp or normal latent code.\n  \"\"\"", "\n", "if", "hasattr", "(", "G", ",", "\"mapping\"", ")", ":", "\n", "    ", "return", "get_mixwp", "(", "G", ",", "N", ")", "\n", "", "return", "torch", ".", "randn", "(", "N", ",", "512", ")", ".", "cuda", "(", ")", "# hardcode", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op._generate_image": [[50, 54], ["hasattr", "G", "G.synthesis"], "function", ["None"], ["", "def", "_generate_image", "(", "G", ",", "wp", ",", "generate_feature", "=", "False", ")", ":", "\n", "  ", "if", "hasattr", "(", "G", ",", "\"synthesis\"", ")", ":", "\n", "    ", "return", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "generate_feature", ")", "\n", "", "return", "G", "(", "wp", ",", "generate_feature", "=", "generate_feature", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.sample_image_feature": [[56, 59], ["op.mixwp_sample", "op._generate_image"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.mixwp_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op._generate_image"], ["", "def", "sample_image_feature", "(", "G", ",", "N", "=", "1", ")", ":", "\n", "  ", "wp", "=", "mixwp_sample", "(", "G", ",", "N", ")", "\n", "return", "_generate_image", "(", "G", ",", "wp", ",", "generate_feature", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.generate_images": [[61, 85], ["range", "torch.cat", "torch.cat", "op._generate_image", "op._generate_image", "bu.append", "bu.size", "op.bu", "bu.size", "op.bu", "bu.detach().cpu", "bu.detach"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op._generate_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op._generate_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "generate_images", "(", "G", ",", "wp", ",", "size", "=", "256", ",", "split", "=", "True", ")", ":", "\n", "  ", "\"\"\"Divide the input to have batch size 1 and resize the output.\n\n  Args:\n    G : The generator.\n    wp : The mixed latent for StyleGAN, or normal latent code for PGGAN.\n    size : The final output size.\n    split : When set to True, the output is cpu. When set to False, the output is gpu. Usually, set to False if the wp is small.\n  Returns:\n    The generated image resized.\n  \"\"\"", "\n", "if", "split", ":", "\n", "    ", "images", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "wp", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "img", "=", "_generate_image", "(", "G", ",", "wp", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "if", "img", ".", "size", "(", "3", ")", "!=", "size", ":", "\n", "        ", "img", "=", "bu", "(", "img", ",", "size", ")", "\n", "", "images", ".", "append", "(", "img", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "images", ",", "0", ")", "\n", "", "else", ":", "\n", "    ", "img", "=", "_generate_image", "(", "G", ",", "wp", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "if", "images", ".", "size", "(", "3", ")", "!=", "size", ":", "\n", "      ", "images", "=", "bu", "(", "images", ",", "size", ")", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu_numpy": [[87, 98], ["torch.from_numpy().permute", "torch.from_numpy().permute", "bu().numpy().transpose", "torch.from_numpy", "torch.from_numpy", "bu().numpy", "op.bu"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "", "def", "bu_numpy", "(", "img", ",", "size", ")", ":", "\n", "  ", "\"\"\"Bilinearly resize a numpy array, using Pytorch backend.\n\n  Args:\n    img: A (N, H, W, C) numpy array\n  Returns:\n    An image with size (N, size[0], size[1], C) numpy array,\n    scaled using bilinear interpolation with PyTorch\n  \"\"\"", "\n", "t", "=", "torch", ".", "from_numpy", "(", "img", ")", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "return", "bu", "(", "t", ",", "size", ")", ".", "numpy", "(", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu": [[100, 112], ["torch.interpolate", "type", "torch.interpolate"], "function", ["None"], ["", "def", "bu", "(", "img", ",", "size", ",", "align_corners", "=", "True", ")", ":", "\n", "  ", "\"\"\"Bilinear interpolation with Pytorch.\n\n  Args:\n    img : a list of tensors or a tensor.\n  \"\"\"", "\n", "if", "type", "(", "img", ")", "is", "list", ":", "\n", "    ", "return", "[", "F", ".", "interpolate", "(", "i", ",", "\n", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "align_corners", ")", "\n", "for", "i", "in", "img", "]", "\n", "", "return", "F", ".", "interpolate", "(", "img", ",", "\n", "size", "=", "size", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "align_corners", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2numpy": [[114, 116], ["x.detach().cpu().numpy", "x.detach().cpu", "x.detach"], "function", ["None"], ["", "def", "torch2numpy", "(", "x", ")", ":", "\n", "  ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image": [[118, 124], ["x.transpose().astype", "x.transpose", "x.detach().clamp", "x.detach"], "function", ["None"], ["", "def", "torch2image", "(", "x", ")", ":", "\n", "  ", "\"\"\"Convert torch tensor to be numpy array format\n     image in (N, H, W, C) in [0, 255] scale\n  \"\"\"", "\n", "x", "=", "(", "(", "x", ".", "detach", "(", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", "+", "1", ")", "*", "127.5", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "x", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.image2torch": [[126, 135], ["torch.from_numpy().float", "torch.from_numpy().float", "y.permute().unsqueeze", "len", "y.permute", "len", "torch.from_numpy", "torch.from_numpy", "y.permute"], "function", ["None"], ["", "def", "image2torch", "(", "x", ")", ":", "\n", "  ", "\"\"\"Process [0, 255] (N, H, W, C) numpy array format \n     image into [0, 1] scale (N, C, H, W) torch tensor.\n  \"\"\"", "\n", "y", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", "/", "255.", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "3", "and", "x", ".", "shape", "[", "2", "]", "==", "3", ":", "\n", "    ", "return", "y", ".", "permute", "(", "2", ",", "0", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "len", "(", "x", ".", "shape", ")", "==", "4", ":", "\n", "    ", "return", "y", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.__init__": [[659, 679], ["visualizer.parse_image_size", "visualizer.get_grid_shape", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.parse_image_size", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_grid_shape"], ["def", "__init__", "(", "self", ",", "\n", "num_rows", "=", "0", ",", "\n", "num_cols", "=", "0", ",", "\n", "grid_size", "=", "0", ",", "\n", "is_portrait", "=", "False", ",", "\n", "viz_size", "=", "None", ")", ":", "\n", "    ", "if", "grid_size", ">", "0", ":", "\n", "      ", "num_rows", ",", "num_cols", "=", "get_grid_shape", "(", "\n", "grid_size", ",", "row", "=", "num_rows", ",", "col", "=", "num_cols", ",", "is_portrait", "=", "is_portrait", ")", "\n", "", "assert", "num_rows", ">", "0", "and", "num_cols", ">", "0", "\n", "\n", "self", ".", "num_rows", "=", "num_rows", "\n", "self", ".", "num_cols", "=", "num_cols", "\n", "self", ".", "viz_size", "=", "parse_image_size", "(", "viz_size", ")", "\n", "self", ".", "headers", "=", "[", "''", "for", "_", "in", "range", "(", "self", ".", "num_cols", ")", "]", "\n", "self", ".", "cells", "=", "[", "[", "{", "\n", "'text'", ":", "''", ",", "\n", "'image'", ":", "''", ",", "\n", "'highlight'", ":", "False", ",", "\n", "}", "for", "_", "in", "range", "(", "self", ".", "num_cols", ")", "]", "for", "_", "in", "range", "(", "self", ".", "num_rows", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_header": [[680, 683], ["None"], "methods", ["None"], ["", "def", "set_header", "(", "self", ",", "col_idx", ",", "content", ")", ":", "\n", "    ", "\"\"\"Sets the content of a particular header by column index.\"\"\"", "\n", "self", ".", "headers", "[", "col_idx", "]", "=", "content", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_headers": [[684, 692], ["isinstance", "isinstance", "enumerate", "len", "visualizer.HtmlPageVisualizer.set_header"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_header"], ["", "def", "set_headers", "(", "self", ",", "contents", ")", ":", "\n", "    ", "\"\"\"Sets the contents of all headers.\"\"\"", "\n", "if", "isinstance", "(", "contents", ",", "str", ")", ":", "\n", "      ", "contents", "=", "[", "contents", "]", "\n", "", "assert", "isinstance", "(", "contents", ",", "(", "list", ",", "tuple", ")", ")", "\n", "assert", "len", "(", "contents", ")", "==", "self", ".", "num_cols", "\n", "for", "col_idx", ",", "content", "in", "enumerate", "(", "contents", ")", ":", "\n", "      ", "self", ".", "set_header", "(", "col_idx", ",", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_cell": [[693, 711], ["visualizer.encode_image_to_html_str", "bool"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.encode_image_to_html_str"], ["", "", "def", "set_cell", "(", "self", ",", "row_idx", ",", "col_idx", ",", "text", "=", "''", ",", "image", "=", "None", ",", "highlight", "=", "False", ")", ":", "\n", "    ", "\"\"\"Sets the content of a particular cell.\n\n    Basically, a cell contains some text as well as an image. Both text and\n    image can be empty.\n\n    Args:\n      row_idx: Row index of the cell to edit.\n      col_idx: Column index of the cell to edit.\n      text: Text to add into the target cell. (default: None)\n      image: Image to show in the target cell. Should be with `RGB` channel\n        order. (default: None)\n      highlight: Whether to highlight this cell in the html. (default: False)\n    \"\"\"", "\n", "self", ".", "cells", "[", "row_idx", "]", "[", "col_idx", "]", "[", "'text'", "]", "=", "text", "\n", "self", ".", "cells", "[", "row_idx", "]", "[", "col_idx", "]", "[", "'image'", "]", "=", "encode_image_to_html_str", "(", "\n", "image", ",", "self", ".", "viz_size", ")", "\n", "self", ".", "cells", "[", "row_idx", "]", "[", "col_idx", "]", "[", "'highlight'", "]", "=", "bool", "(", "highlight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.sequential_set_cell": [[712, 719], ["range", "len", "visualizer.HtmlPageVisualizer.set_cell"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_cell"], ["", "def", "sequential_set_cell", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"\n    Sequentially assign the image to the cell\n    \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "images", ")", ")", ":", "\n", "      ", "x", ",", "y", "=", "i", "//", "self", ".", "num_cols", ",", "i", "%", "self", ".", "num_cols", "\n", "self", ".", "set_cell", "(", "x", ",", "y", ",", "image", "=", "images", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.save": [[720, 740], ["range", "visualizer.get_sortable_html_header", "visualizer.get_sortable_html_footer", "range", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_sortable_html_header", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_sortable_html_footer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["", "", "def", "save", "(", "self", ",", "save_path", ")", ":", "\n", "    ", "\"\"\"Saves the html page.\"\"\"", "\n", "html", "=", "''", "\n", "for", "i", "in", "range", "(", "self", ".", "num_rows", ")", ":", "\n", "      ", "html", "+=", "f'<tr>\\n'", "\n", "for", "j", "in", "range", "(", "self", ".", "num_cols", ")", ":", "\n", "        ", "text", "=", "self", ".", "cells", "[", "i", "]", "[", "j", "]", "[", "'text'", "]", "\n", "image", "=", "self", ".", "cells", "[", "i", "]", "[", "j", "]", "[", "'image'", "]", "\n", "color", "=", "' bgcolor=\"#FF8888\"'", "if", "self", ".", "cells", "[", "i", "]", "[", "j", "]", "[", "'highlight'", "]", "else", "''", "\n", "if", "text", ":", "\n", "          ", "html", "+=", "f'  <td{color}>{text}<br><br>{image}</td>\\n'", "\n", "", "else", ":", "\n", "          ", "html", "+=", "f'  <td{color}>{image}</td>\\n'", "\n", "", "", "html", "+=", "f'</tr>\\n'", "\n", "\n", "", "header", "=", "get_sortable_html_header", "(", "self", ".", "headers", ")", "\n", "footer", "=", "get_sortable_html_footer", "(", ")", "\n", "\n", "with", "open", "(", "save_path", ",", "'w'", ")", "as", "f", ":", "\n", "      ", "f", ".", "write", "(", "header", "+", "html", "+", "footer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageReader.__init__": [[758, 790], ["visualizer.HtmlPageReader.html.find", "visualizer.HtmlPageReader.findAll", "len", "visualizer.HtmlPageReader.html.find", "visualizer.HtmlPageReader.findAll", "len", "os.path.isfile", "ValueError", "open", "bs4.BeautifulSoup", "visualizer.HtmlPageReader.headers.append", "row.findAll", "visualizer.HtmlPageReader.cells.append", "visualizer.HtmlPageReader.cells[].append", "len", "cell.find"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "html_path", ")", ":", "\n", "    ", "\"\"\"Initializes by loading the content from file.\"\"\"", "\n", "self", ".", "html_path", "=", "html_path", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "html_path", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'File `{html_path}` does not exist!'", ")", "\n", "\n", "# Load content.", "\n", "", "with", "open", "(", "html_path", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "html", "=", "BeautifulSoup", "(", "f", ",", "'html.parser'", ")", "\n", "\n", "# Parse headers.", "\n", "", "thead", "=", "self", ".", "html", ".", "find", "(", "'thead'", ")", "\n", "headers", "=", "thead", ".", "findAll", "(", "'th'", ")", "\n", "self", ".", "headers", "=", "[", "]", "\n", "for", "header", "in", "headers", ":", "\n", "      ", "self", ".", "headers", ".", "append", "(", "header", ".", "text", ")", "\n", "", "self", ".", "num_cols", "=", "len", "(", "self", ".", "headers", ")", "\n", "\n", "# Parse cells.", "\n", "tbody", "=", "self", ".", "html", ".", "find", "(", "'tbody'", ")", "\n", "rows", "=", "tbody", ".", "findAll", "(", "'tr'", ")", "\n", "self", ".", "cells", "=", "[", "]", "\n", "for", "row", "in", "rows", ":", "\n", "      ", "cells", "=", "row", ".", "findAll", "(", "'td'", ")", "\n", "self", ".", "cells", ".", "append", "(", "[", "]", ")", "\n", "for", "cell", "in", "cells", ":", "\n", "        ", "self", ".", "cells", "[", "-", "1", "]", ".", "append", "(", "{", "\n", "'text'", ":", "cell", ".", "text", ",", "\n", "'image'", ":", "cell", ".", "find", "(", "'img'", ")", "[", "'src'", "]", ",", "\n", "}", ")", "\n", "", "assert", "len", "(", "self", ".", "cells", "[", "-", "1", "]", ")", "==", "self", ".", "num_cols", "\n", "", "self", ".", "num_rows", "=", "len", "(", "self", ".", "cells", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageReader.get_header": [[791, 794], ["None"], "methods", ["None"], ["", "def", "get_header", "(", "self", ",", "j", ")", ":", "\n", "    ", "\"\"\"Gets header for a particular column.\"\"\"", "\n", "return", "self", ".", "headers", "[", "j", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageReader.get_text": [[795, 798], ["None"], "methods", ["None"], ["", "def", "get_text", "(", "self", ",", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"Gets text from a particular cell.\"\"\"", "\n", "return", "self", ".", "cells", "[", "i", "]", "[", "j", "]", "[", "'text'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageReader.get_image": [[799, 802], ["visualizer.decode_html_str_to_image"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.decode_html_str_to_image"], ["", "def", "get_image", "(", "self", ",", "i", ",", "j", ",", "image_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets image from a particular cell.\"\"\"", "\n", "return", "decode_html_str_to_image", "(", "self", ".", "cells", "[", "i", "]", "[", "j", "]", "[", "'image'", "]", ",", "image_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.__init__": [[810, 824], ["cv2.VideoCapture", "visualizer.VideoReader.video.isOpened", "int", "int", "int", "visualizer.VideoReader.video.get", "os.path.isfile", "ValueError", "visualizer.VideoReader.video.get", "visualizer.VideoReader.video.get", "visualizer.VideoReader.video.get"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "    ", "\"\"\"Initializes the video reader by loading the video from disk.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Video `{path}` does not exist!'", ")", "\n", "\n", "", "self", ".", "path", "=", "path", "\n", "self", ".", "video", "=", "cv2", ".", "VideoCapture", "(", "path", ")", "\n", "assert", "self", ".", "video", ".", "isOpened", "(", ")", "\n", "self", ".", "position", "=", "0", "\n", "\n", "self", ".", "length", "=", "int", "(", "self", ".", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_COUNT", ")", ")", "\n", "self", ".", "frame_height", "=", "int", "(", "self", ".", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_HEIGHT", ")", ")", "\n", "self", ".", "frame_width", "=", "int", "(", "self", ".", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FRAME_WIDTH", ")", ")", "\n", "self", ".", "fps", "=", "self", ".", "video", ".", "get", "(", "cv2", ".", "CAP_PROP_FPS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.__del__": [[825, 828], ["visualizer.VideoReader.video.release"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "    ", "\"\"\"Releases the opened video.\"\"\"", "\n", "self", ".", "video", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read": [[829, 846], ["visualizer.VideoReader.video.read", "visualizer.VideoReader.video.set"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read"], ["", "def", "read", "(", "self", ",", "position", "=", "None", ")", ":", "\n", "    ", "\"\"\"Reads a certain frame.\n\n    NOTE: The returned frame is assumed to be with `RGB` channel order.\n\n    Args:\n      position: Optional. If set, the reader will read frames from the exact\n        position. Otherwise, the reader will read next frames. (default: None)\n    \"\"\"", "\n", "if", "position", "is", "not", "None", "and", "position", "<", "self", ".", "length", ":", "\n", "      ", "self", ".", "video", ".", "set", "(", "cv2", ".", "CAP_PROP_POS_FRAMES", ",", "position", ")", "\n", "self", ".", "position", "=", "position", "\n", "\n", "", "success", ",", "frame", "=", "self", ".", "video", ".", "read", "(", ")", "\n", "self", ".", "position", "=", "self", ".", "position", "+", "1", "\n", "\n", "return", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "if", "success", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoWriter.__init__": [[857, 869], ["cv2.VideoWriter", "cv2.VideoWriter_fourcc"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "path", ",", "frame_height", ",", "frame_width", ",", "fps", "=", "24", ",", "codec", "=", "'DIVX'", ")", ":", "\n", "    ", "\"\"\"Creates the video writer.\"\"\"", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "frame_height", "=", "frame_height", "\n", "self", ".", "frame_width", "=", "frame_width", "\n", "self", ".", "fps", "=", "fps", "\n", "self", ".", "codec", "=", "codec", "\n", "\n", "self", ".", "video", "=", "cv2", ".", "VideoWriter", "(", "filename", "=", "path", ",", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "codec", ")", ",", "\n", "fps", "=", "fps", ",", "\n", "frameSize", "=", "(", "frame_width", ",", "frame_height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoWriter.__del__": [[870, 873], ["visualizer.VideoWriter.video.release"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "    ", "\"\"\"Releases the opened video.\"\"\"", "\n", "self", ".", "video", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoWriter.write": [[874, 880], ["visualizer.VideoWriter.video.write"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["", "def", "write", "(", "self", ",", "frame", ")", ":", "\n", "    ", "\"\"\"Writes a target frame.\n\n    NOTE: The input frame is assumed to be with `RGB` channel order.\n    \"\"\"", "\n", "self", ".", "video", ".", "write", "(", "frame", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.plot_dict": [[29, 50], ["matplotlib.figure", "enumerate", "matplotlib.tight_layout", "len", "math.ceil", "math.ceil", "dic.items", "matplotlib.subplot", "plt.subplot.set_title", "matplotlib.savefig", "matplotlib.close", "dic.keys", "math.sqrt", "type", "v.values", "plt.subplot.legend", "plt.subplot.plot", "plt.subplot.plot", "list", "v.keys"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["def", "plot_dict", "(", "dic", ",", "fpath", "=", "None", ",", "N_row", "=", "None", ",", "N_col", "=", "None", ")", ":", "\n", "  ", "if", "N_row", "is", "None", ":", "\n", "    ", "N", "=", "len", "(", "dic", ".", "keys", "(", ")", ")", "\n", "N_row", "=", "math", ".", "ceil", "(", "math", ".", "sqrt", "(", "N", ")", ")", "\n", "N_col", "=", "math", ".", "ceil", "(", "N", "/", "N_row", ")", "\n", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "6", "*", "N_col", ",", "4", "*", "N_row", ")", ")", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "dic", ".", "items", "(", ")", ")", ":", "\n", "    ", "ax", "=", "plt", ".", "subplot", "(", "N_row", ",", "N_col", ",", "i", "+", "1", ")", "\n", "if", "type", "(", "v", ")", "is", "dict", ":", "# multiple lines with legend", "\n", "      ", "for", "iv", "in", "v", ".", "values", "(", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "iv", ")", "\n", "", "ax", ".", "legend", "(", "list", "(", "v", ".", "keys", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "ax", ".", "plot", "(", "v", ")", "\n", "", "ax", ".", "set_title", "(", "k", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "\n", "if", "fpath", ":", "\n", "    ", "plt", ".", "savefig", "(", "fpath", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_images_SE": [[52, 63], ["P.eval", "SE", "torch.no_grad", "hasattr", "P().long", "lib.op.bu", "G.truncation", "G.synthesis", "G", "G.mapping", "P"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "", "def", "get_images_SE", "(", "G", ",", "SE", ",", "P", ",", "z", ",", "size", "=", "256", ")", ":", "\n", "  ", "P", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "G", ",", "\"mapping\"", ")", ":", "\n", "      ", "wp", "=", "G", ".", "truncation", "(", "G", ".", "mapping", "(", "z", ")", ")", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "image", ",", "feature", "=", "G", "(", "z", ",", "generate_feature", "=", "True", ")", "\n", "", "label", "=", "P", "(", "image", ",", "size", "=", "size", ")", ".", "long", "(", ")", "\n", "", "seg", "=", "SE", "(", "feature", ")", "\n", "return", "bu", "(", "image", ",", "size", ")", ",", "seg", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.viz_SE": [[65, 86], ["range", "torch.stack().cpu", "torch.stack().cpu", "torch.stack().cpu", "visualizer.get_images_SE", "images.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "torch.stack().cpu.append", "[].argmax", "imgs.append", "torch.stack", "visualizer.segviz_torch", "torch.cat().clamp().cpu", "torch.stack", "torch.stack", "torch.stack", "visualizer.segviz_torch", "torch.cat().clamp", "lib.op.bu", "torch.cat"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_images_SE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_torch", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_torch", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "viz_SE", "(", "G", ",", "SE", ",", "P", ",", "z", ",", "size", "=", "256", ")", ":", "\n", "  ", "\"\"\"Get the images, segmentations, and layer semantics for visualization.\"\"\"", "\n", "images", "=", "[", "]", "\n", "layer_vizs", "=", "[", "]", "\n", "seg_vizs", "=", "[", "]", "\n", "label_vizs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "z", ".", "shape", "[", "0", "]", ")", ":", "# batch", "\n", "    ", "image", ",", "segs", ",", "label", "=", "get_images_SE", "(", "G", ",", "SE", ",", "P", ",", "z", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "seg", "in", "segs", ":", "\n", "      ", "seg_label", "=", "bu", "(", "seg", ",", "size", ")", "[", "0", "]", ".", "argmax", "(", "0", ")", "\n", "imgs", ".", "append", "(", "segviz_torch", "(", "seg_label", ")", ")", "\n", "", "seg_vizs", ".", "append", "(", "imgs", "[", "-", "1", "]", ")", "\n", "layer_vizs", ".", "append", "(", "torch", ".", "stack", "(", "imgs", ")", ")", "\n", "label_vizs", ".", "append", "(", "segviz_torch", "(", "label", "[", "0", "]", ")", ")", "\n", "", "images", "=", "(", "torch", ".", "cat", "(", "images", ")", ".", "clamp", "(", "-", "1", ",", "1", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", "\n", "layer_vizs", "=", "torch", ".", "stack", "(", "layer_vizs", ")", ".", "cpu", "(", ")", "\n", "seg_vizs", "=", "torch", ".", "stack", "(", "seg_vizs", ")", ".", "cpu", "(", ")", "\n", "label_vizs", "=", "torch", ".", "stack", "(", "label_vizs", ")", ".", "cpu", "(", ")", "\n", "return", "images", ",", "seg_vizs", ",", "label_vizs", ",", "layer_vizs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_label_color": [[88, 90], ["None"], "function", ["None"], ["", "def", "get_label_color", "(", "label_idx", ")", ":", "\n", "  ", "return", "high_contrast_arr", "[", "label_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.heatmap_numpy": [[94, 119], ["image.copy", "numpy.ones_like", "image.copy", "POSITIVE_COLOR", "NEGATIVE_COLOR"], "function", ["None"], ["def", "heatmap_numpy", "(", "image", ")", ":", "\n", "  ", "\"\"\"Get the heatmap of the image\n\n  Args:\n    image : A numpy array of shape (N, H, W) and scale in [-1, 1]\n\n  Returns:\n    A image of shape (N, H, W, 3) in [0, 1] scale\n  \"\"\"", "\n", "image1", "=", "image", ".", "copy", "(", ")", "\n", "mask1", "=", "image1", ">", "0", "\n", "image1", "[", "~", "mask1", "]", "=", "0", "\n", "\n", "image2", "=", "-", "image", ".", "copy", "(", ")", "\n", "mask2", "=", "image2", ">", "0", "\n", "image2", "[", "~", "mask2", "]", "=", "0", "\n", "\n", "pos_img", "=", "POSITIVE_COLOR", "(", "image1", ")", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "neg_img", "=", "NEGATIVE_COLOR", "(", "image2", ")", "[", ":", ",", ":", ",", ":", ",", ":", "3", "]", "\n", "\n", "x", "=", "np", ".", "ones_like", "(", "pos_img", ")", "\n", "x", "[", "mask1", "]", "=", "pos_img", "[", "mask1", "]", "\n", "x", "[", "mask2", "]", "=", "neg_img", "[", "mask2", "]", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.make_grid_numpy": [[121, 142], ["len", "math.ceil", "numpy.zeros", "np.zeros.fill", "range", "int", "numpy.sqrt", "float"], "function", ["None"], ["", "def", "make_grid_numpy", "(", "image", ",", "num_cols", "=", "-", "1", ",", "padding", "=", "5", ",", "padding_value", "=", "0", ")", ":", "\n", "  ", "\"\"\"\n  Making a grid out of a batch of images.\n  Args:\n    image: (N, H, W, C)\n    num_cols: specify the column number. -1 for a square.\n  Returns:\n    An image of size (H * a, W * b, C)\n  \"\"\"", "\n", "N", "=", "len", "(", "image", ")", "\n", "H", ",", "W", ",", "C", "=", "image", "[", "0", "]", ".", "shape", "\n", "nH", ",", "nW", "=", "H", "+", "padding", ",", "W", "+", "padding", "\n", "if", "num_cols", "<", "0", ":", "\n", "    ", "num_cols", "=", "int", "(", "np", ".", "sqrt", "(", "N", ")", ")", "\n", "", "num_rows", "=", "math", ".", "ceil", "(", "N", "/", "float", "(", "num_cols", ")", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "nH", "*", "num_rows", "-", "padding", ",", "nW", "*", "num_cols", "-", "padding", ",", "3", ")", ")", "\n", "img", ".", "fill", "(", "padding_value", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "    ", "x", ",", "y", "=", "i", "//", "num_cols", ",", "i", "%", "num_cols", "\n", "img", "[", "x", "*", "nH", ":", "x", "*", "nH", "+", "H", ",", "y", "*", "nW", ":", "y", "*", "nW", "+", "W", "]", "=", "image", "[", "i", "]", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy": [[144, 162], ["numpy.zeros", "numpy.unique", "seg.squeeze.squeeze", "len"], "function", ["None"], ["", "def", "segviz_numpy", "(", "seg", ")", ":", "\n", "  ", "\"\"\"Visualize the segmentation mask\n\n  Args:\n    seg : The segmentation map in (H, W), (1, H, W) or (1, 1, H, W)\n  Returns:\n    A image of (H, W, 3) in scale [0, 255]\n  \"\"\"", "\n", "while", "seg", ".", "shape", "[", "0", "]", "==", "1", ":", "\n", "    ", "seg", "=", "seg", ".", "squeeze", "(", "0", ")", "\n", "", "result", "=", "np", ".", "zeros", "(", "(", "seg", ".", "shape", "[", "0", "]", ",", "seg", ".", "shape", "[", "1", "]", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "labels", "=", "np", ".", "unique", "(", "seg", ")", "\n", "for", "label", "in", "labels", ":", "\n", "    ", "if", "label", "==", "0", ":", "\n", "      ", "continue", "\n", "", "bitmap", "=", "(", "seg", "==", "label", ")", "\n", "result", "[", "bitmap", "]", "=", "high_contrast_arr", "[", "label", "%", "len", "(", "high_contrast_arr", ")", "]", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_torch": [[164, 168], ["torch.from_numpy", "visualizer.segviz_numpy", "torch.from_numpy.float().permute", "seg.detach().cpu().numpy", "torch.from_numpy.float", "seg.detach().cpu", "seg.detach"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy"], ["", "def", "segviz_torch", "(", "seg", ")", ":", "\n", "  ", "\"\"\"Pytorch tensor version of segviz_numpy\"\"\"", "\n", "x", "=", "torch", ".", "from_numpy", "(", "segviz_numpy", "(", "seg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "return", "x", ".", "float", "(", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "/", "255.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.maskviz": [[170, 182], ["torch.stack", "v.cpu().numpy().astype.cpu().numpy().astype", "mask.squeeze.squeeze", "v.cpu().numpy().astype.cpu().numpy", "v.cpu().numpy().astype.cpu"], "function", ["None"], ["", "def", "maskviz", "(", "mask", ")", ":", "\n", "  ", "\"\"\"Visualize a binary mask\n  Args:\n    mask: (N, H, W) or (N, 1, H, W) of torch.Tensor in [0, 1]\n  Returns:\n    RGB format mask in a list of numpy array\n  \"\"\"", "\n", "if", "mask", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "    ", "mask", "=", "mask", ".", "squeeze", "(", "1", ")", "\n", "", "v", "=", "torch", ".", "stack", "(", "[", "mask", "*", "255", "]", "*", "3", ",", "3", ")", "\n", "v", "=", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"uint8\"", ")", "\n", "return", "[", "i", "for", "i", "in", "v", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_grid_shape": [[184, 225], ["isinstance", "isinstance", "isinstance", "int", "numpy.sqrt"], "function", ["None"], ["", "def", "get_grid_shape", "(", "size", ",", "row", "=", "0", ",", "col", "=", "0", ",", "is_portrait", "=", "False", ")", ":", "\n", "  ", "\"\"\"Gets the shape of a grid based on the size.\n\n  This function makes greatest effort on making the output grid square if\n  neither `row` nor `col` is set. If `is_portrait` is set as `False`, the height\n  will always be equal to or smaller than the width. For example, if input\n  `size = 16`, output shape will be `(4, 4)`; if input `size = 15`, output shape\n  will be (3, 5). Otherwise, the height will always be equal to or larger than\n  the width.\n\n  Args:\n    size: Size (height * width) of the target grid.\n    is_portrait: Whether to return a portrait size of a landscape size.\n      (default: False)\n\n  Returns:\n    A two-element tuple, representing height and width respectively.\n  \"\"\"", "\n", "assert", "isinstance", "(", "size", ",", "int", ")", "\n", "assert", "isinstance", "(", "row", ",", "int", ")", "\n", "assert", "isinstance", "(", "col", ",", "int", ")", "\n", "if", "size", "==", "0", ":", "\n", "    ", "return", "(", "0", ",", "0", ")", "\n", "\n", "", "if", "row", ">", "0", "and", "col", ">", "0", "and", "row", "*", "col", "!=", "size", ":", "\n", "    ", "row", "=", "0", "\n", "col", "=", "0", "\n", "\n", "", "if", "row", ">", "0", "and", "size", "%", "row", "==", "0", ":", "\n", "    ", "return", "(", "row", ",", "size", "//", "row", ")", "\n", "", "if", "col", ">", "0", "and", "size", "%", "col", "==", "0", ":", "\n", "    ", "return", "(", "size", "//", "col", ",", "col", ")", "\n", "\n", "", "row", "=", "int", "(", "np", ".", "sqrt", "(", "size", ")", ")", "\n", "while", "row", ">", "0", ":", "\n", "    ", "if", "size", "%", "row", "==", "0", ":", "\n", "      ", "col", "=", "size", "//", "row", "\n", "break", "\n", "", "row", "=", "row", "-", "1", "\n", "\n", "", "return", "(", "col", ",", "row", ")", "if", "is_portrait", "else", "(", "row", ",", "col", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_blank_image": [[227, 243], ["numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "get_blank_image", "(", "height", ",", "width", ",", "channels", "=", "3", ",", "is_black", "=", "True", ")", ":", "\n", "  ", "\"\"\"Gets a blank image, either white of black.\n\n  NOTE: This function will always return an image with `RGB` channel order for\n  color image and pixel range [0, 255].\n\n  Args:\n    height: Height of the returned image.\n    width: Width of the returned image.\n    channels: Number of channels. (default: 3)\n    is_black: Whether to return a black image or white image. (default: True)\n  \"\"\"", "\n", "shape", "=", "(", "height", ",", "width", ",", "channels", ")", "\n", "if", "is_black", ":", "\n", "    ", "return", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "return", "np", ".", "ones", "(", "shape", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.load_image": [[245, 270], ["cv2.imread", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread"], ["", "def", "load_image", "(", "path", ",", "image_channels", "=", "3", ")", ":", "\n", "  ", "\"\"\"Loads an image from disk.\n\n  NOTE: This function will always return an image with `RGB` channel order for\n  color image and pixel range [0, 255].\n\n  Args:\n    path: Path to load the image from.\n    image_channels: Number of image channels of returned image. This field is\n      employed since `cv2.imread()` will always return a 3-channel image, even\n      for grayscale image.\n\n  Returns:\n    An image with dtype `np.ndarray` or `None` if input `path` does not exist.\n  \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "    ", "return", "None", "\n", "\n", "", "assert", "image_channels", "in", "[", "1", ",", "3", "]", "\n", "\n", "image", "=", "cv2", ".", "imread", "(", "path", ")", "\n", "assert", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "==", "3", "\n", "if", "image_channels", "==", "1", ":", "\n", "    ", "return", "image", "[", ":", ",", ":", ",", "0", ":", "1", "]", "\n", "", "return", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.save_image": [[272, 287], ["cv2.imwrite"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite"], ["", "def", "save_image", "(", "path", ",", "image", ")", ":", "\n", "  ", "\"\"\"Saves an image to disk.\n\n  NOTE: The input image (if colorful) is assumed to be with `RGB` channel order\n  and pixel range [0, 255].\n\n  Args:\n    path: Path to save the image to.\n    image: Image to save.\n  \"\"\"", "\n", "if", "image", "is", "None", ":", "\n", "    ", "return", "\n", "\n", "", "assert", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", "\n", "cv2", ".", "imwrite", "(", "path", ",", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.resize_image": [[289, 307], ["cv2.resize"], "function", ["None"], ["", "def", "resize_image", "(", "image", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "  ", "\"\"\"Resizes image.\n\n  This is a wrap of `cv2.resize()`.\n\n  NOTE: THe channel order of the input image will not be changed.\n\n  Args:\n    image: Image to resize.\n  \"\"\"", "\n", "if", "image", "is", "None", ":", "\n", "    ", "return", "None", "\n", "\n", "", "assert", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "if", "image", ".", "ndim", "==", "2", ":", "\n", "    ", "return", "image", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.add_text_to_image": [[309, 350], ["cv2.putText"], "function", ["None"], ["", "def", "add_text_to_image", "(", "image", ",", "\n", "text", "=", "''", ",", "\n", "position", "=", "None", ",", "\n", "font", "=", "cv2", ".", "FONT_HERSHEY_TRIPLEX", ",", "\n", "font_size", "=", "1.0", ",", "\n", "line_type", "=", "cv2", ".", "LINE_8", ",", "\n", "line_width", "=", "1", ",", "\n", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "  ", "\"\"\"Overlays text on given image.\n\n  NOTE: The input image is assumed to be with `RGB` channel order.\n\n  Args:\n    image: The image to overlay text on.\n    text: Text content to overlay on the image. (default: '')\n    position: Target position (bottom-left corner) to add text. If not set,\n      center of the image will be used by default. (default: None)\n    font: Font of the text added. (default: cv2.FONT_HERSHEY_TRIPLEX)\n    font_size: Font size of the text added. (default: 1.0)\n    line_type: Line type used to depict the text. (default: cv2.LINE_8)\n    line_width: Line width used to depict the text. (default: 1)\n    color: Color of the text added in `RGB` channel order. (default:\n      (255, 255, 255))\n\n  Returns:\n    An image with target text overlayed on.\n  \"\"\"", "\n", "if", "image", "is", "None", "or", "not", "text", ":", "\n", "    ", "return", "image", "\n", "\n", "", "cv2", ".", "putText", "(", "img", "=", "image", ",", "\n", "text", "=", "text", ",", "\n", "org", "=", "position", ",", "\n", "fontFace", "=", "font", ",", "\n", "fontScale", "=", "font_size", ",", "\n", "color", "=", "color", ",", "\n", "thickness", "=", "line_width", ",", "\n", "lineType", "=", "line_type", ",", "\n", "bottomLeftOrigin", "=", "False", ")", "\n", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.parse_image_size": [[352, 395], ["isinstance", "max", "max", "isinstance", "tuple", "isinstance", "len", "obj.replace().split", "tuple", "ValueError", "len", "map", "len", "len", "ValueError", "obj.replace", "len", "len", "ValueError", "type"], "function", ["None"], ["", "def", "parse_image_size", "(", "obj", ")", ":", "\n", "  ", "\"\"\"Parses object to a pair of image size, i.e., (width, height).\n\n  Args:\n    obj: The input object to parse image size from.\n\n  Returns:\n    A two-element tuple, indicating image width and height respectively.\n\n  Raises:\n    If the input is invalid, i.e., neither a list or tuple, nor a string.\n  \"\"\"", "\n", "if", "obj", "is", "None", "or", "obj", "==", "''", ":", "\n", "    ", "width", "=", "height", "=", "0", "\n", "", "elif", "isinstance", "(", "obj", ",", "int", ")", ":", "\n", "    ", "width", "=", "height", "=", "obj", "\n", "", "elif", "isinstance", "(", "obj", ",", "(", "list", ",", "tuple", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "    ", "numbers", "=", "tuple", "(", "obj", ")", "\n", "if", "len", "(", "numbers", ")", "==", "0", ":", "\n", "      ", "width", "=", "height", "=", "0", "\n", "", "elif", "len", "(", "numbers", ")", "==", "1", ":", "\n", "      ", "width", "=", "height", "=", "numbers", "[", "0", "]", "\n", "", "elif", "len", "(", "numbers", ")", "==", "2", ":", "\n", "      ", "width", "=", "numbers", "[", "0", "]", "\n", "height", "=", "numbers", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'At most two elements for image size.'", ")", "\n", "", "", "elif", "isinstance", "(", "obj", ",", "str", ")", ":", "\n", "    ", "splits", "=", "obj", ".", "replace", "(", "' '", ",", "''", ")", ".", "split", "(", "','", ")", "\n", "numbers", "=", "tuple", "(", "map", "(", "int", ",", "splits", ")", ")", "\n", "if", "len", "(", "numbers", ")", "==", "0", ":", "\n", "      ", "width", "=", "height", "=", "0", "\n", "", "elif", "len", "(", "numbers", ")", "==", "1", ":", "\n", "      ", "width", "=", "height", "=", "numbers", "[", "0", "]", "\n", "", "elif", "len", "(", "numbers", ")", "==", "2", ":", "\n", "      ", "width", "=", "numbers", "[", "0", "]", "\n", "height", "=", "numbers", "[", "1", "]", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'At most two elements for image size.'", ")", "\n", "", "", "else", ":", "\n", "    ", "raise", "ValueError", "(", "f'Invalid type of input: {type(obj)}!'", ")", "\n", "\n", "", "return", "(", "max", "(", "0", ",", "width", ")", ",", "max", "(", "0", ",", "height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.fuse_images": [[397, 474], ["visualizer.parse_image_size", "visualizer.get_grid_shape", "visualizer.get_blank_image", "images.transpose.reshape", "range", "ValueError", "images.transpose.transpose", "range", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.parse_image_size", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_grid_shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_blank_image"], ["", "def", "fuse_images", "(", "images", ",", "\n", "image_size", "=", "None", ",", "\n", "row", "=", "0", ",", "\n", "col", "=", "0", ",", "\n", "is_row_major", "=", "True", ",", "\n", "is_portrait", "=", "False", ",", "\n", "row_spacing", "=", "0", ",", "\n", "col_spacing", "=", "0", ",", "\n", "border_left", "=", "0", ",", "\n", "border_right", "=", "0", ",", "\n", "border_top", "=", "0", ",", "\n", "border_bottom", "=", "0", ",", "\n", "black_background", "=", "True", ")", ":", "\n", "  ", "\"\"\"Fuses a collection of images into an entire image.\n\n  Args:\n    images: A collection of images to fuse. Should be with shape [num, height,\n      width, channels].\n    image_size: This field is used to resize the image before fusion. `0`\n      disables resizing. (default: None)\n    row: Number of rows used for image fusion. If not set, this field will be\n      automatically assigned based on `col` and total number of images.\n      (default: None)\n    col: Number of columns used for image fusion. If not set, this field will be\n      automatically assigned based on `row` and total number of images.\n      (default: None)\n    is_row_major: Whether the input images should be arranged row-major or\n      column-major. (default: True)\n    is_portrait: Only active when both `row` and `col` should be assigned\n      automatically. (default: False)\n    row_spacing: Space between rows. (default: 0)\n    col_spacing: Space between columns. (default: 0)\n    border_left: Width of left border. (default: 0)\n    border_right: Width of right border. (default: 0)\n    border_top: Width of top border. (default: 0)\n    border_bottom: Width of bottom border. (default: 0)\n\n  Returns:\n    The fused image.\n\n  Raises:\n    ValueError: If the input `images` is not with shape [num, height, width,\n      width].\n  \"\"\"", "\n", "if", "images", "is", "None", ":", "\n", "    ", "return", "images", "\n", "\n", "", "if", "images", ".", "ndim", "!=", "4", ":", "\n", "    ", "raise", "ValueError", "(", "f'Input `images` should be with shape [num, height, '", "\n", "f'width, channels], but {images.shape} is received!'", ")", "\n", "\n", "", "num", ",", "image_height", ",", "image_width", ",", "channels", "=", "images", ".", "shape", "\n", "width", ",", "height", "=", "parse_image_size", "(", "image_size", ")", "\n", "height", "=", "height", "or", "image_height", "\n", "width", "=", "width", "or", "image_width", "\n", "row", ",", "col", "=", "get_grid_shape", "(", "num", ",", "row", "=", "row", ",", "col", "=", "col", ",", "is_portrait", "=", "is_portrait", ")", "\n", "fused_height", "=", "(", "\n", "height", "*", "row", "+", "row_spacing", "*", "(", "row", "-", "1", ")", "+", "border_top", "+", "border_bottom", ")", "\n", "fused_width", "=", "(", "\n", "width", "*", "col", "+", "col_spacing", "*", "(", "col", "-", "1", ")", "+", "border_left", "+", "border_right", ")", "\n", "fused_image", "=", "get_blank_image", "(", "\n", "fused_height", ",", "fused_width", ",", "channels", "=", "channels", ",", "is_black", "=", "black_background", ")", "\n", "images", "=", "images", ".", "reshape", "(", "row", ",", "col", ",", "image_height", ",", "image_width", ",", "channels", ")", "\n", "if", "not", "is_row_major", ":", "\n", "    ", "images", "=", "images", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "row", ")", ":", "\n", "    ", "y", "=", "border_top", "+", "i", "*", "(", "height", "+", "row_spacing", ")", "\n", "for", "j", "in", "range", "(", "col", ")", ":", "\n", "      ", "x", "=", "border_left", "+", "j", "*", "(", "width", "+", "col_spacing", ")", "\n", "if", "height", "!=", "image_height", "or", "width", "!=", "image_width", ":", "\n", "        ", "image", "=", "cv2", ".", "resize", "(", "images", "[", "i", ",", "j", "]", ",", "(", "width", ",", "height", ")", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "images", "[", "i", ",", "j", "]", "\n", "", "fused_image", "[", "y", ":", "y", "+", "height", ",", "x", ":", "x", "+", "width", "]", "=", "image", "\n", "\n", "", "", "return", "fused_image", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_sortable_html_header": [[476, 557], ["enumerate", "str().lower", "str"], "function", ["None"], ["", "def", "get_sortable_html_header", "(", "column_name_list", ",", "sort_by_ascending", "=", "False", ")", ":", "\n", "  ", "\"\"\"Gets header for sortable html page.\n\n  Basically, the html page contains a sortable table, where user can sort the\n  rows by a particular column by clicking the column head.\n\n  Example:\n\n  column_name_list = [name_1, name_2, name_3]\n  header = get_sortable_html_header(column_name_list)\n  footer = get_sortable_html_footer()\n  sortable_table = ...\n  html_page = header + sortable_table + footer\n\n  Args:\n    column_name_list: List of column header names.\n    sort_by_ascending: Default sorting order. If set as `True`, the html page\n      will be sorted by ascending order when the header is clicked for the first\n      time.\n\n  Returns:\n    A string, which represents for the header for a sortable html page.\n  \"\"\"", "\n", "header", "=", "'\\n'", ".", "join", "(", "[", "\n", "'<script type=\"text/javascript\">'", ",", "\n", "'var column_idx;'", ",", "\n", "'var sort_by_ascending = '", "+", "str", "(", "sort_by_ascending", ")", ".", "lower", "(", ")", "+", "';'", ",", "\n", "''", ",", "\n", "'function sorting(tbody, column_idx){'", ",", "\n", "'  this.column_idx = column_idx;'", ",", "\n", "'  Array.from(tbody.rows)'", ",", "\n", "'       .sort(compareCells)'", ",", "\n", "'       .forEach(function(row) { tbody.appendChild(row); })'", ",", "\n", "'  sort_by_ascending = !sort_by_ascending;'", ",", "\n", "'}'", ",", "\n", "''", ",", "\n", "'function compareCells(row_a, row_b) {'", ",", "\n", "'  var val_a = row_a.cells[column_idx].innerText;'", ",", "\n", "'  var val_b = row_b.cells[column_idx].innerText;'", ",", "\n", "'  var flag = sort_by_ascending ? 1 : -1;'", ",", "\n", "'  return flag * (val_a > val_b ? 1 : -1);'", ",", "\n", "'}'", ",", "\n", "'</script>'", ",", "\n", "''", ",", "\n", "'<html>'", ",", "\n", "''", ",", "\n", "'<head>'", ",", "\n", "'<style>'", ",", "\n", "'  table {'", ",", "\n", "'    border-spacing: 0;'", ",", "\n", "'    border: 1px solid black;'", ",", "\n", "'  }'", ",", "\n", "'  th {'", ",", "\n", "'    cursor: pointer;'", ",", "\n", "'  }'", ",", "\n", "'  th, td {'", ",", "\n", "'    text-align: left;'", ",", "\n", "'    vertical-align: middle;'", ",", "\n", "'    border-collapse: collapse;'", ",", "\n", "'    border: 0.5px solid black;'", ",", "\n", "'    padding: 8px;'", ",", "\n", "'  }'", ",", "\n", "'  tr:nth-child(even) {'", ",", "\n", "'    background-color: #d2d2d2;'", ",", "\n", "'  }'", ",", "\n", "'</style>'", ",", "\n", "'</head>'", ",", "\n", "''", ",", "\n", "'<body>'", ",", "\n", "''", ",", "\n", "'<table>'", ",", "\n", "'<thead>'", ",", "\n", "'<tr>'", ",", "\n", "''", "]", ")", "\n", "for", "idx", ",", "column_name", "in", "enumerate", "(", "column_name_list", ")", ":", "\n", "    ", "header", "+=", "f'  <th onclick=\"sorting(tbody, {idx})\">{column_name}</th>\\n'", "\n", "", "header", "+=", "'</tr>\\n'", "\n", "header", "+=", "'</thead>\\n'", "\n", "header", "+=", "'<tbody id=\"tbody\">\\n'", "\n", "\n", "return", "header", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_sortable_html_footer": [[559, 565], ["None"], "function", ["None"], ["", "def", "get_sortable_html_footer", "(", ")", ":", "\n", "  ", "\"\"\"Gets footer for sortable html page.\n\n  Check function `get_sortable_html_header()` for more details.\n  \"\"\"", "\n", "return", "'</tbody>\\n</table>\\n\\n</body>\\n</html>\\n'", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.encode_image_to_html_str": [[567, 601], ["visualizer.parse_image_size", "[].tostring", "base64.b64encode().decode", "cv2.resize", "base64.b64encode", "cv2.imencode"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.parse_image_size"], ["", "def", "encode_image_to_html_str", "(", "image", ",", "image_size", "=", "None", ")", ":", "\n", "  ", "\"\"\"Encodes an image to html language.\n\n  NOTE: Input image is always assumed to be with `RGB` channel order.\n\n  Args:\n    image: The input image to encode. Should be with `RGB` channel order.\n    image_size: This field is used to resize the image before encoding. `0`\n      disables resizing. (default: None)\n\n  Returns:\n    A string which represents the encoded image.\n  \"\"\"", "\n", "if", "image", "is", "None", ":", "\n", "    ", "return", "''", "\n", "\n", "", "assert", "image", ".", "ndim", "==", "3", "and", "image", ".", "shape", "[", "2", "]", "in", "[", "1", ",", "3", "]", "\n", "\n", "# Change channel order to `BGR`, which is opencv-friendly.", "\n", "image", "=", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "# Resize the image if needed.", "\n", "width", ",", "height", "=", "parse_image_size", "(", "image_size", ")", "\n", "if", "height", "or", "width", ":", "\n", "    ", "height", "=", "height", "or", "image", ".", "shape", "[", "0", "]", "\n", "width", "=", "width", "or", "image", ".", "shape", "[", "1", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "width", ",", "height", ")", ")", "\n", "\n", "# Encode the image to html-format string.", "\n", "", "encoded_image", "=", "cv2", ".", "imencode", "(", "'.jpg'", ",", "image", ")", "[", "1", "]", ".", "tostring", "(", ")", "\n", "encoded_image_base64", "=", "base64", ".", "b64encode", "(", "encoded_image", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "html_str", "=", "f'<img src=\"data:image/jpeg;base64, {encoded_image_base64}\"/>'", "\n", "\n", "return", "html_str", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.decode_html_str_to_image": [[603, 631], ["isinstance", "base64.b64decode", "numpy.frombuffer", "cv2.imdecode", "visualizer.parse_image_size", "html_str.split", "cv2.resize"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.parse_image_size"], ["", "def", "decode_html_str_to_image", "(", "html_str", ",", "image_size", "=", "None", ")", ":", "\n", "  ", "\"\"\"Decodes image from html.\n\n  Args:\n    html_str: Image string parsed from html.\n    image_size: This field is used to resize the image after decoding. `0`\n      disables resizing. (default: None)\n\n  Returns:\n    An image with `RGB` channel order.\n  \"\"\"", "\n", "if", "not", "html_str", ":", "\n", "    ", "return", "None", "\n", "\n", "", "assert", "isinstance", "(", "html_str", ",", "str", ")", "\n", "image_str", "=", "html_str", ".", "split", "(", "','", ")", "[", "-", "1", "]", "\n", "encoded_image", "=", "base64", ".", "b64decode", "(", "image_str", ")", "\n", "encoded_image_numpy", "=", "np", ".", "frombuffer", "(", "encoded_image", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "image", "=", "cv2", ".", "imdecode", "(", "encoded_image_numpy", ",", "flags", "=", "cv2", ".", "IMREAD_COLOR", ")", "\n", "\n", "# Resize the image if needed.", "\n", "width", ",", "height", "=", "parse_image_size", "(", "image_size", ")", "\n", "if", "height", "or", "width", ":", "\n", "    ", "height", "=", "height", "or", "image", ".", "shape", "[", "0", "]", "\n", "width", "=", "width", "or", "image", ".", "shape", "[", "1", "]", "\n", "image", "=", "cv2", ".", "resize", "(", "image", ",", "(", "width", ",", "height", ")", ")", "\n", "\n", "", "return", "image", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataset.__init__": [[7, 14], ["torch.utils.data.Dataset.__init__", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "epoch_size", "=", "1024", ",", "latent_size", "=", "512", ",", "fixed", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "self", ".", "epoch_size", "=", "epoch_size", "\n", "self", ".", "fixed", "=", "fixed", "\n", "if", "fixed", ":", "\n", "      ", "self", ".", "z", "=", "torch", ".", "randn", "(", "epoch_size", ",", "latent_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataset.__getitem__": [[15, 20], ["torch.randn"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "    ", "if", "self", ".", "fixed", ":", "\n", "      ", "return", "self", ".", "z", "[", "idx", "]", "\n", "", "else", ":", "\n", "      ", "return", "torch", ".", "randn", "(", "self", ".", "latent_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataset.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataModule.__init__": [[26, 31], ["pytorch_lightning.LightningDataModule.__init__", "dataset.NoiseDataset", "dataset.NoiseDataset"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "train_size", "=", "1024", ",", "val_size", "=", "1024", ",", "latent_size", "=", "512", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_ds", "=", "NoiseDataset", "(", "train_size", ",", "latent_size", ")", "\n", "self", ".", "val_ds", "=", "NoiseDataset", "(", "val_size", ",", "latent_size", ",", "fixed", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataModule.train_dataloader": [[32, 34], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "train_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.dataset.NoiseDataModule.val_dataloader": [[35, 37], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "val_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.FocalLoss.__init__": [[19, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "binary", "=", "False", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "# \u6307\u6570", "\n", "if", "binary", ":", "\n", "      ", "self", ".", "func", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "", "else", ":", "\n", "      ", "self", ".", "func", "=", "F", ".", "cross_entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.FocalLoss.forward": [[28, 36], ["loss.FocalLoss.FocalLoss.func", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "focal_loss.mean"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "loss", "=", "self", ".", "func", "(", "inputs", ",", "targets", ",", "reduction", "=", "'none'", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "-", "loss", ")", "\n", "focal_loss", "=", "self", ".", "alpha", "*", "(", "(", "1", "-", "pt", ")", ".", "pow", "(", "self", ".", "gamma", ")", "*", "loss", ")", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "      ", "return", "focal_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "      ", "return", "focal_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.mask_cross_entropy_loss": [[8, 11], ["torch.cross_entropy", "mask.sum"], "function", ["None"], ["def", "mask_cross_entropy_loss", "(", "mask", ",", "x", ",", "y", ")", ":", "# requires more than editing need", "\n", "    ", "ce", "=", "F", ".", "cross_entropy", "(", "x", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "return", "(", "mask", "*", "ce", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.mask_focal_loss": [[13, 16], ["loss.FocalLoss", "mask.sum"], "function", ["None"], ["", "def", "mask_focal_loss", "(", "mask", ",", "x", ",", "y", ")", ":", "# requires more than editing need", "\n", "    ", "ce", "=", "FocalLoss", "(", ")", "(", "x", ",", "y", ",", "reduction", "=", "\"none\"", ")", "\n", "return", "(", "mask", "*", "ce", ")", ".", "sum", "(", ")", "/", "mask", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.segloss": [[38, 46], ["label.size", "segloss.append", "lib.op.bu", "loss_fn", "seg.size"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "", "", "def", "segloss", "(", "segs", ",", "label", ",", "loss_fn", ")", ":", "\n", "  ", "\"\"\"The final version of loss.\"\"\"", "\n", "segloss", "=", "[", "]", "\n", "size", "=", "label", ".", "size", "(", "2", ")", "\n", "for", "seg", "in", "segs", ":", "\n", "    ", "seg", "=", "op", ".", "bu", "(", "seg", ",", "size", ")", "if", "seg", ".", "size", "(", "2", ")", "!=", "size", "else", "seg", "\n", "segloss", ".", "append", "(", "loss_fn", "(", "seg", ",", "label", ")", ")", "\n", "", "return", "segloss", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.segloss_bce": [[48, 66], ["len", "range", "int2onehot", "range", "segloss.append", "seglosses.append", "label[].unsqueeze", "segloss.append", "loss_fn_final", "loss_fn_layer", "lib.op.bu", "lib.op.bu", "final.size", "label.size", "label.size", "seg.size", "label.size", "label.size"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.int2onehot", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "segloss_bce", "(", "segs", ",", "label", ",", "loss_fn_layer", ",", "loss_fn_final", ")", ":", "\n", "  ", "\"\"\"Use BCE for each layer. It is slow and CPU intensive.\"\"\"", "\n", "N", "=", "len", "(", "segs", "[", "0", "]", ")", "\n", "seglosses", "=", "[", "]", "\n", "for", "cat_id", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "segloss", "=", "[", "]", "\n", "onehot", "=", "int2onehot", "(", "label", "[", "cat_id", "]", ".", "unsqueeze", "(", "1", ")", ",", "segs", "[", "cat_id", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "# BCE loss", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "      ", "seg", "=", "segs", "[", "cat_id", "]", "[", "i", "]", "\n", "segloss", ".", "append", "(", "loss_fn_layer", "(", "seg", "if", "seg", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "seg", ",", "label", ".", "size", "(", "3", ")", ")", ",", "onehot", ")", ")", "\n", "# CE loss", "\n", "", "final", "=", "segs", "[", "cat_id", "]", "[", "-", "1", "]", "\n", "segloss", ".", "append", "(", "loss_fn_final", "(", "final", "if", "final", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "final", ",", "label", ".", "size", "(", "3", ")", ")", ",", "label", "[", "cat_id", "]", ")", ")", "\n", "seglosses", ".", "append", "(", "segloss", ")", "\n", "", "return", "seglosses", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.set_cuda_devices": [[11, 38], ["isinstance", "device_ids.replace", "len", "device_ids.lower", "device_ids.split"], "function", ["None"], ["def", "set_cuda_devices", "(", "device_ids", ",", "use_cuda", "=", "True", ")", ":", "\n", "  ", "\"\"\"Sets visible CUDA devices.\n\n  Example:\n\n  set_cuda_devices('0,1', True)  # Enable device 0 and 1.\n  set_cuda_devices('3', True)  # Enable device 3 only.\n  set_cuda_devices('all', True)  # Enable all devices.\n  set_cuda_devices('-1', True)  # Disable all devices.\n  set_cuda_devices('0', False)  # Disable all devices.\n\n  Args:\n    devices_ids: A string, indicating all visible devices. Separated with comma.\n      To enable all devices, set this field as `all`.\n    use_cuda: Whether to use cuda. If set as False, all devices will be\n      disabled. (default: True)\n  \"\"\"", "\n", "if", "not", "use_cuda", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "\n", "return", "0", "\n", "", "assert", "isinstance", "(", "device_ids", ",", "str", ")", "\n", "if", "device_ids", ".", "lower", "(", ")", "==", "'all'", ":", "\n", "    ", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "      ", "del", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "\n", "", "return", "8", "\n", "", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "device_ids", ".", "replace", "(", "' '", ",", "''", ")", "\n", "return", "len", "(", "device_ids", ".", "split", "(", "\",\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.read_ade20k_labels": [[43, 54], ["open().readlines", "[].strip", "open", "[].split", "l.split"], "function", ["None"], ["", "def", "read_ade20k_labels", "(", "fpath", "=", "\"figure/ade20k_labels.csv\"", ")", ":", "\n", "  ", "\"\"\"Read label file for ADE20K dataset\n  \n  Args:\n    fpath : The store location of the label file.\n  Returns:\n    A label list. Note that the default label has one more background category comparing to the official label.\n  \"\"\"", "\n", "lines", "=", "open", "(", "fpath", ",", "\"r\"", ")", ".", "readlines", "(", ")", "\n", "label_list", "=", "[", "l", ".", "split", "(", "\",\"", ")", "[", "-", "1", "]", ".", "split", "(", "\";\"", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "l", "in", "lines", "[", "1", ":", "]", "]", "\n", "return", "label_list", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.read_selected_labels": [[56, 71], ["open", "f.readlines", "line.split", "i.strip"], "function", ["None"], ["", "def", "read_selected_labels", "(", "fpath", "=", "\"figure/selected_labels.csv\"", ")", ":", "\n", "  ", "\"\"\"Read the labels for models.\n  \n  Args:\n    fpath : The path to label file. Stardard format is one line for each model, with the first column being the model name.\n\n  Returns:\n    A dict object specifying the mapping from model names to category names.\n  \"\"\"", "\n", "dic", "=", "{", "}", "\n", "with", "open", "(", "fpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "      ", "items", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "dic", "[", "items", "[", "0", "]", "]", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "items", "[", "1", ":", "]", "]", "\n", "", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread": [[73, 77], ["open", "numpy.asarray", "os.path.join", "PIL.Image.open"], "function", ["None"], ["", "def", "imread", "(", "fpath", ")", ":", "\n", "  ", "\"\"\"Read image and returns a numpy array in [0, 255] scale.\"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "    ", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite": [[79, 94], ["open", "PIL.Image.fromarray().convert().save", "print", "os.path.join", "PIL.Image.fromarray().convert", "PIL.Image.fromarray", "image.astype"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.convert"], ["", "", "def", "imwrite", "(", "fpath", ",", "image", ",", "format", "=", "\"RGB\"", ")", ":", "\n", "\n", "  ", "\"\"\"Write an numpy image to file.\n\n  Args:\n    image : an array of shape [H, W, 3] and scale in [0, 255].\n  \"\"\"", "\n", "if", "\".jpg\"", "in", "fpath", "or", "\".jpeg\"", "in", "fpath", ":", "\n", "    ", "ext", "=", "\"JPEG\"", "\n", "", "elif", "\".png\"", "in", "fpath", ":", "\n", "    ", "ext", "=", "\"PNG\"", "\n", "", "else", ":", "\n", "    ", "print", "(", "f\"!> Extension not found!\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "    ", "Image", ".", "fromarray", "(", "image", ".", "astype", "(", "\"uint8\"", ")", ")", ".", "convert", "(", "format", ")", ".", "save", "(", "f", ",", "format", "=", "ext", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.invert_dic": [[99, 107], ["dic.keys", "dic[].keys"], "function", ["None"], ["", "", "def", "invert_dic", "(", "dic", ")", ":", "\n", "  ", "idic", "=", "{", "}", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "if", "k2", "not", "in", "idic", ":", "\n", "        ", "idic", "[", "k2", "]", "=", "{", "}", "\n", "", "idic", "[", "k2", "]", "[", "k1", "]", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n", "", "", "return", "idic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.max_key": [[109, 113], ["list", "numpy.argmax", "dic.keys"], "function", ["None"], ["", "def", "max_key", "(", "dic", ")", ":", "\n", "  ", "keys", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "ind", "=", "np", ".", "argmax", "(", "[", "dic", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "return", "ind", ",", "keys", "[", "ind", "]", ",", "dic", "[", "keys", "[", "ind", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.print_table": [[115, 129], ["range", "len", "range", "print", "len"], "function", ["None"], ["", "def", "print_table", "(", "t", ")", ":", "\n", "  ", "\"\"\"Print a table\n  \n  Args:\n    t : A 2D numpy array or a 2D list.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "len", "(", "t", "[", "0", "]", ")", ")", ":", "\n", "      ", "try", ":", "\n", "        ", "s", "+=", "f\"{t[i, j]:.3f}\\t\"", "\n", "", "except", ":", "\n", "        ", "s", "+=", "f\"{t[i][j]:.3f}\\t\"", "\n", "", "", "print", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.listkey_convert": [[131, 150], ["enumerate"], "function", ["None"], ["", "", "def", "listkey_convert", "(", "name", ",", "listkey", ",", "output", "=", "None", ")", ":", "\n", "  ", "\"\"\"Check which key in listkey is a substring of name and return a value.\n  \n  Args:\n    name : The raw string. It may contain one or more keys from listkey.\n    listkey : A list of keys.\n    output : When output is None, the matched key will be returned directly. \n             When output is a list, the function will return the element of \n             output at index of the matched key.\n  Returns:\n    A matched key, or the output word corresponding to the index of the \n    matched key, or an empty string if matching fails\n  \"\"\"", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "listkey", ")", ":", "\n", "    ", "if", "key", "in", "name", ":", "\n", "      ", "if", "output", "is", "not", "None", ":", "\n", "        ", "return", "output", "[", "i", "]", "\n", "", "return", "key", "\n", "", "", "return", "\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.aggregate_iou": [[152, 169], ["torch.stack", "torch.zeros", "range", "c_iou[].mean", "val.mean"], "function", ["None"], ["", "def", "aggregate_iou", "(", "res", ")", ":", "\n", "  ", "\"\"\"Aggregate IoU of each instance into a global mIoU and IoU.\n  \n  Args:\n    res : The result. Assumed to be a list. Item 1 is pixel accuracy, item 2\n          is IoU. -1 means the category is missing in both detection and GT.\n  Returns:\n    mIoU, class-wise IoU\n  \"\"\"", "\n", "ic_iou", "=", "torch", ".", "stack", "(", "[", "r", "[", "1", "]", "for", "r", "in", "res", "]", ")", "\n", "c_iou", "=", "torch", ".", "zeros", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", "\n", "for", "c", "in", "range", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "val", "=", "ic_iou", "[", ":", ",", "c", "]", "\n", "val", "=", "val", "[", "val", ">", "-", "0.1", "]", "\n", "c_iou", "[", "c", "]", "=", "-", "1", "if", "val", ".", "shape", "[", "0", "]", "==", "0", "else", "val", ".", "mean", "(", ")", "\n", "", "mIoU", "=", "c_iou", "[", "c_iou", ">", "-", "1", "]", ".", "mean", "(", ")", "\n", "return", "mIoU", ",", "c_iou", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.formal_name": [[171, 180], ["zip", "type", "name.replace.replace", "misc.formal_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["", "def", "formal_name", "(", "name", ")", ":", "\n", "  ", "\"\"\"Convert the naming in code to naming in paper.\"\"\"", "\n", "if", "type", "(", "name", ")", "is", "list", ":", "\n", "    ", "return", "[", "formal_name", "(", "n", ")", "for", "n", "in", "name", "]", "\n", "", "finds", "=", "[", "\"stylegan\"", ",", "\"pggan\"", ",", "\"bedroom\"", ",", "\"church\"", ",", "\"celebahq\"", ",", "\"ffhq\"", "]", "\n", "subs", "=", "[", "\"StyleGAN\"", ",", "\"PGGAN\"", ",", "\"Bedroom\"", ",", "\"Church\"", ",", "\"CelebAHQ\"", ",", "\"FFHQ\"", "]", "\n", "for", "find", ",", "sub", "in", "zip", "(", "finds", ",", "subs", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "find", ",", "sub", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names": [[182, 196], ["len", "misc.enumerate_names", "res.extend", "res.append", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names"], ["", "def", "enumerate_names", "(", "prev", "=", "[", "]", ",", "i", "=", "0", ",", "groups", "=", "[", "]", ")", ":", "\n", "  ", "res", "=", "[", "]", "\n", "for", "key", "in", "groups", "[", "i", "]", ":", "\n", "    ", "if", "len", "(", "groups", "[", "i", "]", ")", ">", "1", ":", "\n", "      ", "cur", "=", "prev", "+", "[", "key", "]", "\n", "", "else", ":", "\n", "      ", "cur", "=", "prev", "\n", "\n", "", "if", "i", "<", "len", "(", "groups", ")", "-", "1", ":", "\n", "      ", "t", "=", "enumerate_names", "(", "cur", ",", "i", "+", "1", ",", "groups", ")", "\n", "res", ".", "extend", "(", "t", ")", "\n", "", "else", ":", "\n", "      ", "res", ".", "append", "(", "cur", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args": [[198, 207], ["misc.enumerate_args", "res.extend", "res.append", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args"], ["", "def", "enumerate_args", "(", "prev", "=", "[", "]", ",", "i", "=", "0", ",", "groups", "=", "[", "]", ")", ":", "\n", "  ", "res", "=", "[", "]", "\n", "for", "key", "in", "groups", "[", "i", "]", ":", "\n", "    ", "if", "i", "<", "len", "(", "groups", ")", "-", "1", ":", "\n", "      ", "t", "=", "enumerate_args", "(", "prev", "+", "[", "key", "]", ",", "i", "+", "1", ",", "groups", ")", "\n", "res", ".", "extend", "(", "t", ")", "\n", "", "else", ":", "\n", "      ", "res", ".", "append", "(", "prev", "+", "[", "key", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.get_args_name": [[209, 217], ["None"], "function", ["None"], ["", "def", "get_args_name", "(", "methods", "=", "[", "\"LSE\"", "]", ",", "loss_types", "=", "[", "\"normal\"", "]", ",", "ls", "=", "\"\"", ",", "\n", "layer_weights", "=", "[", "\"softplus\"", "]", ",", "lrs", "=", "\"\"", ",", "els", "=", "\"\"", ")", ":", "\n", "  ", "\"\"\"Format the arguments of SE into its name.\"\"\"", "\n", "for", "m", "in", "methods", ":", "\n", "    ", "for", "layer_weight", "in", "layer_weights", ":", "\n", "      ", "for", "loss_type", "in", "loss_types", ":", "\n", "        ", "for", "lr", "in", "lrs", ":", "\n", "          ", "yield", "f\"{m}_l{loss_type}_{ls}_{layer_weight}_{lr}_{els}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_num": [[219, 222], ["None"], "function", ["None"], ["", "", "", "", "", "def", "str_num", "(", "n", ",", "F", "=", "\"%.3f\"", ")", ":", "\n", "  ", "\"\"\"Formatting numerical values.\"\"\"", "\n", "return", "(", "F", "%", "n", ")", ".", "replace", "(", "\".000\"", ",", "\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.get_dic_depth": [[224, 232], ["next", "iter", "type", "next", "dic.values", "iter", "next.values"], "function", ["None"], ["", "def", "get_dic_depth", "(", "dic", ")", ":", "\n", "  ", "\"\"\"Get the depth of a dict.\"\"\"", "\n", "v", "=", "next", "(", "iter", "(", "dic", ".", "values", "(", ")", ")", ")", "\n", "count", "=", "1", "\n", "while", "type", "(", "v", ")", "is", "dict", ":", "\n", "    ", "count", "+=", "1", "\n", "v", "=", "next", "(", "iter", "(", "v", ".", "values", "(", ")", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.trim_dic": [[234, 242], ["list", "dic.keys", "type", "len", "misc.trim_dic"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.trim_dic"], ["", "def", "trim_dic", "(", "dic", ")", ":", "\n", "  ", "\"\"\"Remove empty key-value pairs.\"\"\"", "\n", "for", "k", "in", "list", "(", "dic", ".", "keys", "(", ")", ")", ":", "\n", "    ", "if", "type", "(", "dic", "[", "k", "]", ")", "is", "dict", ":", "\n", "      ", "if", "len", "(", "dic", "[", "k", "]", ")", "==", "0", ":", "\n", "        ", "del", "dic", "[", "k", "]", "\n", "", "else", ":", "\n", "        ", "trim_dic", "(", "dic", "[", "k", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.dic2table": [[244, 265], ["list", "strs.append", "dic.items", "next().keys", "len", "strs.append", "range", "len", "range", "next", "range", "len", "nstrs[].append", "iter", "len", "dic.values"], "function", ["None"], ["", "", "", "", "def", "dic2table", "(", "dic", ",", "transpose", "=", "True", ")", ":", "\n", "  ", "\"\"\"Convert dict of depth 2 to latex table.\n\n  Args:\n    dic : In the form of dic[row_key][col_key].\n    transpose : When True, the row_key of dic corresponds to the \n                col_key of the output table.\n  \"\"\"", "\n", "strs", "=", "[", "]", "\n", "col_names", "=", "list", "(", "next", "(", "iter", "(", "dic", ".", "values", "(", ")", ")", ")", ".", "keys", "(", ")", ")", "\n", "ncols", "=", "len", "(", "col_names", ")", "+", "1", "\n", "strs", ".", "append", "(", "[", "\"\"", "]", "+", "col_names", ")", "\n", "for", "row_name", ",", "row_vals", "in", "dic", ".", "items", "(", ")", ":", "\n", "    ", "strs", ".", "append", "(", "[", "row_name", "]", "+", "[", "row_vals", "[", "k", "]", "for", "k", "in", "col_names", "]", ")", "\n", "", "if", "transpose", ":", "\n", "    ", "nstrs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "strs", "[", "0", "]", ")", ")", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "0", "]", ")", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "        ", "nstrs", "[", "j", "]", ".", "append", "(", "strs", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "return", "nstrs", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_table_single": [[267, 277], ["dic.keys", "dic[].keys", "strs.append", "len", "strs.append", "s.append", "list", "dic[].keys"], "function", ["None"], ["", "def", "str_table_single", "(", "dic", ")", ":", "\n", "  ", "strs", "=", "[", "]", "\n", "for", "row_name", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "if", "len", "(", "strs", ")", "==", "0", ":", "# table header", "\n", "      ", "strs", ".", "append", "(", "[", "]", "+", "list", "(", "dic", "[", "row_name", "]", ".", "keys", "(", ")", ")", ")", "\n", "", "s", "=", "[", "row_name", "]", "\n", "for", "col_name", "in", "dic", "[", "row_name", "]", ".", "keys", "(", ")", ":", "\n", "      ", "s", ".", "append", "(", "f\"{dic[row_name][col_name]*100:.2f}\"", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_table_multiple": [[279, 308], ["list", "strs.append", "dic.keys", "strs.extend", "dic.keys", "list", "s.extend", "dic[].keys", "dic[].keys", "misc.formal_name", "print", "misc.max_key", "enumerate", "[].keys", "s_[].append", "str", "len", "s_.append", "misc.formal_name", "misc.str_table_multiple.latex_header"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.max_key", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["", "def", "str_table_multiple", "(", "dic", ",", "T", "=", "0", ")", ":", "# group, G, method", "\n", "  ", "groups", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "# 1st column name", "\n", "def", "latex_header", "(", "n", ")", ":", "\n", "    ", "return", "f\"\\\\multicolumn\"", "+", "\"{\"", "+", "str", "(", "n", ")", "+", "\"}\"", "+", "\"{c|}\"", "\n", "", "strs", "=", "[", "[", "\"Generator\"", "]", "+", "[", "f\"{latex_header(len(dic[g].keys()))}\"", "+", "\"{\"", "+", "formal_name", "(", "g", ")", "+", "\"}\"", "for", "g", "in", "groups", "]", "]", "\n", "s", "=", "[", "\"Dataset\"", "]", "\n", "for", "g", "in", "groups", ":", "\n", "    ", "Gs", "=", "list", "(", "dic", "[", "groups", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "# 2nd column name", "\n", "s", ".", "extend", "(", "formal_name", "(", "Gs", ")", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "\n", "s_", "=", "[", "]", "\n", "for", "group", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "ds", "in", "dic", "[", "group", "]", ".", "keys", "(", ")", ":", "\n", "      ", "print", "(", "group", ",", "ds", ",", "dic", "[", "group", "]", "[", "ds", "]", ")", "\n", "best_ind", ",", "best_method", ",", "best_val", "=", "max_key", "(", "dic", "[", "group", "]", "[", "ds", "]", ")", "\n", "for", "i", ",", "method", "in", "enumerate", "(", "dic", "[", "group", "]", "[", "ds", "]", ".", "keys", "(", ")", ")", ":", "\n", "        ", "acc", "=", "f\"{dic[group][ds][method] * 100:.1f}\"", "\n", "comp", "=", "(", "dic", "[", "group", "]", "[", "ds", "]", "[", "method", "]", "-", "best_val", ")", "/", "best_val", "*", "100", "\n", "if", "best_method", "==", "method", ":", "\n", "          ", "item_str", "=", "\"\\\\textbf{\"", "+", "acc", "+", "\"}\"", "\n", "", "else", ":", "\n", "          ", "item_str", "=", "f\"{acc} ({comp:.1f})\"", "\n", "", "if", "len", "(", "s_", ")", "<=", "i", ":", "\n", "          ", "s_", ".", "append", "(", "[", "method", "]", ")", "\n", "", "s_", "[", "i", "]", ".", "append", "(", "item_str", ")", "\n", "", "", "", "strs", ".", "extend", "(", "s_", ")", "\n", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_latex_table": [[310, 341], ["range", "len", "range", "len", "s.append", "s.append", "s.append", "s.append", "s.append", "s.append", "range", "len", "s.append", "len", "range", "[].replace", "len", "range", "[].replace"], "function", ["None"], ["", "def", "str_latex_table", "(", "strs", ")", ":", "\n", "  ", "\"\"\"Format a string table to a latex table.\n  \n  Args:\n    strs : A 2D string table. Each item is a cell.\n  Returns:\n    A single string for the latex table.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "i", "]", ")", ")", ":", "\n", "      ", "if", "\"_\"", "in", "strs", "[", "i", "]", "[", "j", "]", ":", "\n", "        ", "strs", "[", "i", "]", "[", "j", "]", "=", "strs", "[", "i", "]", "[", "j", "]", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", "\n", "\n", "", "", "ncols", "=", "len", "(", "strs", "[", "0", "]", ")", "\n", "seps", "=", "\"\"", ".", "join", "(", "[", "\"c\"", "for", "i", "in", "range", "(", "ncols", ")", "]", ")", "\n", "s", "=", "[", "]", "\n", "s", ".", "append", "(", "\"\\\\begin{table}\"", ")", "\n", "s", ".", "append", "(", "\"\\\\centering\"", ")", "\n", "s", ".", "append", "(", "\"\\\\begin{tabular}{%s}\"", "%", "seps", ")", "\n", "s", ".", "append", "(", "\" & \"", ".", "join", "(", "strs", "[", "0", "]", ")", "+", "\" \\\\\\\\\\\\hline\"", ")", "\n", "for", "line", "in", "strs", "[", "1", ":", "]", ":", "\n", "      ", "s", ".", "append", "(", "\" & \"", ".", "join", "(", "line", ")", "+", "\" \\\\\\\\\"", ")", "\n", "", "s", ".", "append", "(", "\"\\\\end{tabular}\"", ")", "\n", "s", ".", "append", "(", "\"\\\\end{table}\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "i", "]", ")", ")", ":", "\n", "        ", "if", "\"_\"", "in", "strs", "[", "i", "]", "[", "j", "]", ":", "\n", "          ", "strs", "[", "i", "]", "[", "j", "]", "=", "strs", "[", "i", "]", "[", "j", "]", ".", "replace", "(", "\"\\\\_\"", ",", "\"_\"", ")", "\n", "\n", "", "", "", "", "return", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_csv_table": [[343, 349], ["range", "len", "s.append"], "function", ["None"], ["", "def", "str_csv_table", "(", "strs", ")", ":", "\n", "  ", "\"\"\"Format a string table to a csv table.\"\"\"", "\n", "s", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "    ", "s", ".", "append", "(", "\",\"", ".", "join", "(", "strs", "[", "i", "]", ")", ")", "\n", "", "return", "\"\\n\"", ".", "join", "(", "s", ")", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.CheckpointCallback.__init__": [[13, 16], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "ckpt_func", ",", "interval", ")", ":", "\n", "    ", "self", ".", "func", "=", "ckpt_func", "\n", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.CheckpointCallback.on_batch_end": [[17, 21], ["print", "callback.CheckpointCallback.func"], "methods", ["None"], ["", "def", "on_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "if", "trainer", ".", "global_step", "%", "self", ".", "interval", "==", "0", ":", "\n", "      ", "print", "(", "f\"=> Saving model on {trainer.global_step}\"", ")", "\n", "self", ".", "func", "(", "pl_module", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.WeightVisualizerCallback.__init__": [[24, 29], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "size", "=", "200", ",", "interval", "=", "100", ")", ":", "\n", "    ", "self", ".", "history", "=", "[", "]", "\n", "self", ".", "size", "=", "size", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "interval", "=", "interval", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.WeightVisualizerCallback.on_batch_end": [[30, 50], ["pl_module.model._calc_layer_weight().detach().cpu().numpy", "callback.WeightVisualizerCallback.history.append", "numpy.stack", "numpy.cumsum", "matplotlib.figure", "range", "trainer.logger.experiment.add_figure", "matplotlib.close", "len", "len", "matplotlib.bar", "matplotlib.legend", "pl_module.model._calc_layer_weight().detach().cpu", "range", "pl_module.model._calc_layer_weight().detach", "range", "pl_module.model._calc_layer_weight"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE._calc_layer_weight"], ["", "def", "on_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "%", "self", ".", "interval", "!=", "0", ":", "\n", "      ", "return", "\n", "", "weight", "=", "pl_module", ".", "model", ".", "_calc_layer_weight", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "self", ".", "history", ".", "append", "(", "weight", ")", "\n", "if", "len", "(", "self", ".", "history", ")", ">", "self", ".", "size", ":", "\n", "      ", "del", "self", ".", "history", "[", "0", "]", "\n", "\n", "", "N", ",", "M", "=", "len", "(", "self", ".", "history", ")", ",", "weight", ".", "shape", "[", "0", "]", "\n", "data", "=", "np", ".", "stack", "(", "self", ".", "history", ")", "\n", "cdata", "=", "np", ".", "cumsum", "(", "data", ",", "1", ")", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "10", ",", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "M", ")", ":", "\n", "      ", "plt", ".", "bar", "(", "range", "(", "N", ")", ",", "data", "[", ":", ",", "i", "]", ",", "\n", "bottom", "=", "None", "if", "i", "==", "0", "else", "cdata", "[", ":", ",", "i", "-", "1", "]", ")", "\n", "plt", ".", "legend", "(", "[", "f\"layer {i}\"", "for", "i", "in", "range", "(", "M", ")", "]", ")", "\n", "", "trainer", ".", "logger", ".", "experiment", ".", "add_figure", "(", "f\"Layer Weight\"", ",", "\n", "fig", ",", "self", ".", "count", "//", "self", ".", "interval", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.ImageVisualizerCallback.__init__": [[53, 58], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "z", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z", "=", "z", "\n", "self", ".", "shape", "=", "self", ".", "z", ".", "shape", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.ImageVisualizerCallback.on_batch_end": [[59, 71], ["torchvision.make_grid", "tensorboard.add_image", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pl_module", "r.repeat.repeat.repeat", "torchvision.make_grid.clamp", "callback.ImageVisualizerCallback.z.view"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "def", "on_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "%", "1000", "!=", "0", ":", "\n", "      ", "return", "\n", "", "tensorboard", "=", "trainer", ".", "logger", ".", "experiment", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "r", ",", "_", "=", "pl_module", "(", "self", ".", "z", ".", "view", "(", "*", "self", ".", "shape", ")", ",", "reverse", "=", "True", ")", "\n", "", "if", "r", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "      ", "r", "=", "r", ".", "repeat", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "", "disp_images", "=", "vutils", ".", "make_grid", "(", "r", ",", "nrow", "=", "4", ")", "\n", "tensorboard", ".", "add_image", "(", "'generated samples'", ",", "\n", "disp_images", ".", "clamp", "(", "0", ",", "1", ")", ",", "global_step", "=", "self", ".", "count", "//", "1000", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.TrainingEvaluationCallback.__init__": [[74, 78], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "vals", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.TrainingEvaluationCallback.on_epoch_end": [[79, 101], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "pixelacc.mean.mean.mean", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "c_IoU[].mean", "tensorboard.add_scalar", "tensorboard.add_scalar", "callback.TrainingEvaluationCallback.vals.append", "torch.save", "torch.save", "torch.save", "torch.save", "hasattr", "v.mean", "tensorboard.add_scalar", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "on_epoch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "self", ".", "count", "+=", "1", "\n", "tensorboard", "=", "trainer", ".", "logger", ".", "experiment", "\n", "table", "=", "pl_module", ".", "train_evaluation", "\n", "pixelacc", "=", "torch", ".", "Tensor", "(", "[", "entry", "[", "0", "]", "for", "entry", "in", "table", "]", ")", "\n", "pixelacc", "=", "pixelacc", ".", "mean", "(", ")", "\n", "IoU", "=", "torch", ".", "stack", "(", "[", "entry", "[", "1", "]", "for", "entry", "in", "table", "]", ",", "1", ")", "# IoU: (C, N)", "\n", "c_IoU", "=", "torch", ".", "zeros", "(", "(", "IoU", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "IoU", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "v", "=", "IoU", "[", "IoU", ">", "-", "0.1", "]", "\n", "c_IoU", "[", "i", "]", "=", "-", "1", "if", "len", "(", "v", ")", "==", "0", "else", "v", ".", "mean", "(", ")", "\n", "if", "hasattr", "(", "pl_module", ".", "P", ",", "\"labels\"", ")", ":", "\n", "        ", "labels", "=", "pl_module", ".", "P", ".", "labels", "\n", "tensorboard", ".", "add_scalar", "(", "f'val/{labels[i]}_IoU'", ",", "\n", "c_IoU", "[", "i", "]", ",", "self", ".", "count", ")", "\n", "", "", "mIoU", "=", "c_IoU", "[", "c_IoU", ">", "-", "1", "]", ".", "mean", "(", ")", "\n", "tensorboard", ".", "add_scalar", "(", "'val/mIoU'", ",", "mIoU", ",", "self", ".", "count", ")", "\n", "tensorboard", ".", "add_scalar", "(", "'val/pixelacc'", ",", "pixelacc", ",", "self", ".", "count", ")", "\n", "self", ".", "vals", ".", "append", "(", "[", "mIoU", ",", "pixelacc", ",", "c_IoU", "]", ")", "\n", "torch", ".", "save", "(", "self", ".", "vals", ",", "pl_module", ".", "save_dir", "+", "\"/train_evaluation.pth\"", ")", "\n", "pl_module", ".", "train_evaluation", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.SEVisualizerCallback.__init__": [[104, 109], ["pytorch_lightning.Callback.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "z", ",", "interval", "=", "1000", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "z", "=", "z", "\n", "self", ".", "interval", "=", "interval", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.callback.SEVisualizerCallback.on_batch_end": [[110, 126], ["visualizer.viz_SE", "torchvision.make_grid", "tensorboard.add_image", "torchvision.make_grid", "tensorboard.add_image", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.viz_SE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "def", "on_batch_end", "(", "self", ",", "trainer", ",", "pl_module", ")", ":", "\n", "    ", "self", ".", "count", "+=", "1", "\n", "if", "self", ".", "count", "%", "self", ".", "interval", "!=", "0", ":", "\n", "      ", "return", "\n", "\n", "", "tensorboard", "=", "trainer", ".", "logger", ".", "experiment", "\n", "images", ",", "seg_vizs", ",", "label_vizs", ",", "layer_vizs", "=", "viz_SE", "(", "\n", "pl_module", ".", "G", ",", "pl_module", ".", "model", ",", "pl_module", ".", "P", ",", "self", ".", "z", ",", "size", "=", "256", ")", "\n", "disp", "=", "vutils", ".", "make_grid", "(", "torch", ".", "cat", "(", "[", "images", ",", "seg_vizs", ",", "label_vizs", "]", ")", ",", "\n", "nrow", "=", "images", ".", "shape", "[", "0", "]", ")", "\n", "tensorboard", ".", "add_image", "(", "'Image / Output / Label'", ",", "\n", "disp", ",", "global_step", "=", "self", ".", "count", "//", "self", ".", "interval", ")", "\n", "disp_layer", "=", "vutils", ".", "make_grid", "(", "torch", ".", "cat", "(", "[", "\n", "layer_vizs", "[", "0", "]", ",", "images", "[", "0", ":", "1", "]", ",", "label_vizs", "[", "0", ":", "1", "]", "]", ")", ",", "nrow", "=", "4", ")", "\n", "tensorboard", ".", "add_image", "(", "'Layer-wise Semantics'", ",", "\n", "disp_layer", ",", "global_step", "=", "self", ".", "count", "//", "self", ".", "interval", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes": [[28, 32], ["io.BytesIO", "PIL.Image.fromarray().save", "base64.b64encode().decode", "PIL.Image.fromarray", "base64.b64encode", "io.BytesIO.getvalue"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["def", "image2bytes", "(", "image", ")", ":", "\n", "  ", "buffered", "=", "BytesIO", "(", ")", "\n", "Image", ".", "fromarray", "(", "image", ")", ".", "save", "(", "buffered", ",", "format", "=", "\"PNG\"", ")", "\n", "return", "b64encode", "(", "buffered", ".", "getvalue", "(", ")", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.response_image_label": [[34, 39], ["views.image2bytes", "views.image2bytes", "django.http.HttpResponse"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes"], ["", "def", "response_image_label", "(", "image", ",", "label", ")", ":", "\n", "  ", "imageString", "=", "image2bytes", "(", "image", ")", "\n", "segString", "=", "image2bytes", "(", "label", ")", "\n", "json", "=", "'{\"ok\":\"true\",\"img\":\"data:image/png;base64,%s\",\"label\":\"data:image/png;base64,%s\"}'", "%", "(", "imageString", ",", "segString", ")", "\n", "return", "HttpResponse", "(", "json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.response_image": [[41, 45], ["views.image2bytes", "django.http.HttpResponse"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes"], ["", "def", "response_image", "(", "image", ")", ":", "\n", "  ", "imageString", "=", "image2bytes", "(", "image", ")", "\n", "json", "=", "'{\"ok\":\"true\",\"img\":\"data:image/png;base64,%s\"}'", "%", "imageString", "\n", "return", "HttpResponse", "(", "json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.save_to_session": [[47, 49], ["None"], "function", ["None"], ["", "def", "save_to_session", "(", "session", ",", "zs", ")", ":", "\n", "  ", "session", "[", "\"zs\"", "]", "=", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.restore_from_session": [[51, 54], ["None"], "function", ["None"], ["", "def", "restore_from_session", "(", "session", ")", ":", "\n", "  ", "zs", "=", "session", "[", "\"zs\"", "]", "\n", "return", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.index": [[56, 60], ["django.shortcuts.render", "django.shortcuts.render.set_cookie", "datetime.datetime.now"], "function", ["None"], ["", "def", "index", "(", "request", ")", ":", "\n", "  ", "res", "=", "render", "(", "request", ",", "EDIT_INDEX", ",", "base_dic", ")", "\n", "res", ".", "set_cookie", "(", "'last_visit'", ",", "datetime", ".", "now", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.train": [[61, 65], ["django.shortcuts.render", "django.shortcuts.render.set_cookie", "datetime.datetime.now"], "function", ["None"], ["", "def", "train", "(", "request", ")", ":", "\n", "  ", "res", "=", "render", "(", "request", ",", "TRAIN_INDEX", ",", "base_dic", ")", "\n", "res", ".", "set_cookie", "(", "'last_visit'", ",", "datetime", ".", "now", "(", ")", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.add_annotation": [[66, 94], ["print", "print", "django.http.HttpResponse", "base64.b64decode", "views.restore_from_session", "PIL.Image.open", "home.stroke2array", "trainer.add_annotation", "django.http.HttpResponse", "editor.has_model", "print", "django.http.HttpResponse", "io.BytesIO", "print", "traceback.print_exc", "django.http.HttpResponse", "str", "form_data[].split", "form_data.keys"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.restore_from_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.stroke2array", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.add_annotation", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model"], ["", "@", "csrf_exempt", "\n", "def", "add_annotation", "(", "request", ")", ":", "\n", "  ", "print", "(", "\"Add annotation\"", ")", "\n", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'ann'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "f\"!> Model not exist {model}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n", "", "ann", "=", "b64decode", "(", "form_data", "[", "'ann'", "]", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "zs", "=", "restore_from_session", "(", "sess", ")", "\n", "\n", "ann", "=", "Image", ".", "open", "(", "BytesIO", "(", "ann", ")", ")", "\n", "ann", ",", "ann_mask", "=", "api", ".", "stroke2array", "(", "ann", ")", "\n", "\n", "trainer", ".", "add_annotation", "(", "\n", "model", ",", "zs", ",", "\n", "ann", ",", "ann_mask", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "# no need to return any information", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "print", "(", "f\"!> Invalid request: {str(form_data.keys())}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.ctrl_training": [[95, 116], ["print", "django.http.HttpResponse", "trainer.ctrl_training", "django.http.HttpResponse", "editor.has_model", "print", "django.http.HttpResponse", "print", "traceback.print_exc", "django.http.HttpResponse", "str", "form_data.keys"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.ctrl_training", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model"], ["", "@", "csrf_exempt", "\n", "def", "ctrl_training", "(", "request", ")", ":", "\n", "  ", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'model'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "f\"!> Model not exist {model}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "cmd", "=", "form_data", "[", "'action'", "]", "\n", "flag", "=", "trainer", ".", "ctrl_training", "(", "model", ",", "cmd", ")", "\n", "flag", "=", "'\"true\"'", "if", "flag", "else", "'\"false\"'", "\n", "json", "=", "'{\"action\": \"%s\", \"status\" : %s}'", "\n", "return", "HttpResponse", "(", "json", "%", "(", "cmd", ",", "flag", ")", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "print", "(", "f\"!> Invalid request: {str(form_data.keys())}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.get_validation": [[117, 142], ["print", "django.http.HttpResponse", "trainer.get_validation", "django.http.HttpResponse", "editor.has_model", "print", "django.http.HttpResponse", "print", "traceback.print_exc", "django.http.HttpResponse", "str", "img_format.format", "img_format.format", "form_data.keys", "views.image2bytes", "views.image2bytes"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.get_validation", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.image2bytes"], ["", "@", "csrf_exempt", "\n", "def", "get_validation", "(", "request", ")", ":", "\n", "  ", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'model'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "f\"!> Model not exist {model}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n", "", "image", ",", "segviz", "=", "trainer", ".", "get_validation", "(", "model", ")", "\n", "img_format", "=", "'\"data:image/png;base64,{img}\"'", "\n", "image_str", "=", "\",\"", ".", "join", "(", "[", "img_format", ".", "format", "(", "img", "=", "image2bytes", "(", "img", ")", ")", "\n", "for", "img", "in", "image", "]", ")", "\n", "label_str", "=", "\",\"", ".", "join", "(", "[", "img_format", ".", "format", "(", "img", "=", "image2bytes", "(", "img", ")", ")", "\n", "for", "img", "in", "segviz", "]", ")", "\n", "json", "=", "'{\"ok\":\"true\", \"images\": [%s], \"labels\": [%s]}'", "\n", "return", "HttpResponse", "(", "json", "%", "(", "image_str", ",", "label_str", ")", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "print", "(", "f\"!> Invalid request: {str(form_data.keys())}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.clear_annotation": [[144, 147], ["None"], "function", ["None"], ["", "@", "csrf_exempt", "\n", "def", "clear_annotation", "(", "request", ")", ":", "\n", "  ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.generate_image_given_stroke": [[148, 180], ["print", "django.http.HttpResponse", "base64.b64decode", "base64.b64decode", "views.restore_from_session", "PIL.Image.open", "PIL.Image.open", "home.stroke2array", "home.stroke2array", "editor.generate_image_given_stroke", "views.save_to_session", "views.response_image_label", "editor.has_model", "print", "django.http.HttpResponse", "io.BytesIO", "io.BytesIO", "print", "traceback.print_exc", "django.http.HttpResponse", "str", "form_data[].split", "form_data[].split", "form_data.keys"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.restore_from_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.stroke2array", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.stroke2array", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.generate_image_given_stroke", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.save_to_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.response_image_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model"], ["", "@", "csrf_exempt", "\n", "def", "generate_image_given_stroke", "(", "request", ")", ":", "\n", "  ", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'image_stroke'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "f\"!> Model not exist {model}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n", "", "image_stroke", "=", "b64decode", "(", "form_data", "[", "'image_stroke'", "]", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "label_stroke", "=", "b64decode", "(", "form_data", "[", "'label_stroke'", "]", ".", "split", "(", "','", ")", "[", "1", "]", ")", "\n", "zs", "=", "restore_from_session", "(", "sess", ")", "\n", "\n", "image_stroke", "=", "Image", ".", "open", "(", "BytesIO", "(", "image_stroke", ")", ")", "\n", "label_stroke", "=", "Image", ".", "open", "(", "BytesIO", "(", "label_stroke", ")", ")", "\n", "image_stroke", ",", "image_mask", "=", "api", ".", "stroke2array", "(", "image_stroke", ")", "\n", "label_stroke", ",", "label_mask", "=", "api", ".", "stroke2array", "(", "label_stroke", ")", "\n", "\n", "image", ",", "label", ",", "zs", "=", "editor", ".", "generate_image_given_stroke", "(", "\n", "model", ",", "zs", ",", "\n", "image_stroke", ",", "image_mask", ",", "\n", "label_stroke", ",", "label_mask", ")", "\n", "save_to_session", "(", "sess", ",", "zs", ")", "\n", "return", "response_image_label", "(", "image", ",", "label", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "print", "(", "f\"!> Invalid request: {str(form_data.keys())}\"", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.generate_new_image": [[181, 200], ["django.http.HttpResponse", "editor.generate_new_image", "views.save_to_session", "views.response_image_label", "editor.has_model", "print", "django.http.HttpResponse", "print", "traceback.print_exc", "django.http.HttpResponse"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.generate_new_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.save_to_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.response_image_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model"], ["", "@", "csrf_exempt", "\n", "def", "generate_new_image", "(", "request", ")", ":", "\n", "  ", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'model'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "\"=> No model name %s\"", "%", "model", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n", "", "image", ",", "label", ",", "zs", "=", "editor", ".", "generate_new_image", "(", "model", ")", "\n", "save_to_session", "(", "sess", ",", "zs", ")", "\n", "return", "response_image_label", "(", "image", ",", "label", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.train_get_new_image": [[201, 221], ["sess.flush", "django.http.HttpResponse", "trainer.generate_new_image", "views.save_to_session", "views.response_image", "editor.has_model", "print", "django.http.HttpResponse", "print", "traceback.print_exc", "django.http.HttpResponse"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.generate_new_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.save_to_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.response_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model"], ["", "@", "csrf_exempt", "\n", "def", "train_get_new_image", "(", "request", ")", ":", "\n", "  ", "form_data", "=", "request", ".", "POST", "\n", "sess", "=", "request", ".", "session", "\n", "sess", ".", "flush", "(", ")", "\n", "if", "request", ".", "method", "==", "'POST'", "and", "'model'", "in", "form_data", ":", "\n", "    ", "try", ":", "\n", "      ", "model", "=", "form_data", "[", "'model'", "]", "\n", "if", "not", "editor", ".", "has_model", "(", "model", ")", ":", "\n", "        ", "print", "(", "\"=> No model name %s\"", "%", "model", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "\n", "", "image", ",", "z_s", "=", "trainer", ".", "generate_new_image", "(", "model_name", ")", "\n", "save_to_session", "(", "sess", ",", "z_s", ")", "\n", "return", "response_image", "(", "image", ")", "\n", "", "except", "Exception", ":", "\n", "      ", "print", "(", "\"!> Exception:\"", ")", "\n", "traceback", ".", "print_exc", "(", ")", "\n", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", "", "return", "HttpResponse", "(", "'{}'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.AddDataThread.__init__": [[20, 26], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "training_thread", ",", "f", ",", "l", ",", "lm", ")", ":", "\n", "    ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "training_thread", "=", "training_thread", "\n", "self", ".", "f", "=", "f", "\n", "self", ".", "l", "=", "l", "\n", "self", ".", "lm", "=", "lm", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.AddDataThread.run": [[27, 29], ["api.AddDataThread.training_thread.add_annotation"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.add_annotation"], ["", "def", "run", "(", "self", ")", ":", "\n", "    ", "self", ".", "training_thread", ".", "add_annotation", "(", "self", ".", "f", ",", "self", ".", "l", ",", "self", ".", "lm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.__init__": [[32, 38], ["threading.Thread.__init__", "threading.Lock", "api.TrainingThread.reset"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.reset"], ["  ", "def", "__init__", "(", "self", ",", "learner", ",", "max_iter", "=", "1000", ")", ":", "\n", "    ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "learner", "=", "learner", "\n", "self", ".", "lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.add_annotation": [[39, 47], ["api.TrainingThread.lock.acquire", "api.TrainingThread.features.append", "api.TrainingThread.labels.append", "api.TrainingThread.labels_mask.append", "torch.cat().long", "api.TrainingThread.lock.release", "torch.cat", "range", "torch.cat", "len"], "methods", ["None"], ["", "def", "add_annotation", "(", "self", ",", "feature", ",", "label", ",", "label_mask", ")", ":", "\n", "    ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "features", ".", "append", "(", "feature", ")", "\n", "self", ".", "labels", ".", "append", "(", "label", ")", "\n", "self", ".", "labels_mask", ".", "append", "(", "label_mask", ")", "\n", "self", ".", "learner", ".", "feature", "=", "[", "torch", ".", "cat", "(", "[", "feats", "[", "i", "]", "for", "feats", "in", "self", ".", "features", "]", ")", "for", "i", "in", "range", "(", "len", "(", "feature", ")", ")", "]", "\n", "self", ".", "learner", ".", "label", "=", "torch", ".", "cat", "(", "self", ".", "labels", ")", ".", "long", "(", ")", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.reset": [[48, 59], ["api.TrainingThread.lock.acquire", "api.TrainingThread.lock.release"], "methods", ["None"], ["", "def", "reset", "(", "self", ",", "features", "=", "[", "]", ",", "labels", "=", "[", "]", ",", "labels_mask", "=", "[", "]", ")", ":", "\n", "    ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "exit", "=", "False", "\n", "self", ".", "running", "=", "False", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "labels_mask", "=", "labels_mask", "\n", "self", ".", "learner", ".", "features", "=", "features", "\n", "self", ".", "learner", ".", "labels", "=", "labels", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread._check_has_data": [[60, 68], ["time.sleep", "api.TrainingThread.lock.acquire", "api.TrainingThread.lock.release", "len", "api.TrainingThread.lock.release"], "methods", ["None"], ["", "def", "_check_has_data", "(", "self", ")", ":", "\n", "    ", "while", "True", ":", "\n", "      ", "time", ".", "sleep", "(", "1", ")", "\n", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "if", "len", "(", "self", ".", "features", ")", ">", "0", ":", "\n", "        ", "self", ".", "lock", ".", "release", "(", ")", "\n", "break", "\n", "", "self", ".", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.send_command": [[69, 103], ["api.TrainingThread.lock.acquire", "api.TrainingThread.lock.release", "api.TrainingThread.start", "api.TrainingThread.lock.acquire", "api.TrainingThread.lock.release", "api.TrainingThread.lock.acquire", "api.TrainingThread.lock.release", "api.TrainingThread.lock.acquire", "range", "api.TrainingThread.lock.release", "torch.randn().cuda", "lib.op.bu().argmax", "segvizs.append", "images.append", "numpy.concatenate", "numpy.stack", "torch.no_grad", "api.TrainingThread.learner", "lib.visualizer.segviz_numpy", "lib.op.torch2image().astype", "torch.randn", "lib.op.bu", "lib.op.bu().argmax.detach().cpu().numpy", "lib.op.torch2image", "lib.op.bu().argmax.detach().cpu", "lib.op.bu", "lib.op.bu().argmax.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "", "def", "send_command", "(", "self", ",", "cmd", ")", ":", "\n", "    ", "if", "cmd", "==", "\"start\"", ":", "\n", "      ", "if", "self", ".", "running", ":", "\n", "        ", "return", "False", "\n", "", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "running", "=", "True", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "self", ".", "start", "(", ")", "\n", "return", "True", "\n", "", "elif", "cmd", "==", "\"pause\"", ":", "\n", "      ", "if", "not", "self", ".", "running", ":", "\n", "        ", "return", "False", "\n", "", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "running", "=", "False", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "return", "True", "\n", "", "elif", "cmd", "==", "\"stop\"", ":", "\n", "      ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "self", ".", "exit", "=", "True", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "return", "True", "\n", "", "elif", "cmd", "==", "\"val\"", ":", "\n", "      ", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "images", "=", "[", "]", "\n", "segvizs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "6", ")", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "1", ",", "512", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "          ", "image", ",", "segs", "=", "self", ".", "learner", "(", "z", ")", "\n", "", "seg", "=", "bu", "(", "segs", "[", "-", "1", "]", ",", "128", ")", ".", "argmax", "(", "1", ")", "\n", "segvizs", ".", "append", "(", "segviz_numpy", "(", "seg", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", "\n", "images", ".", "append", "(", "torch2image", "(", "bu", "(", "image", ",", "128", ")", ")", ".", "astype", "(", "\"uint8\"", ")", ")", "\n", "", "self", ".", "lock", ".", "release", "(", ")", "\n", "return", "np", ".", "concatenate", "(", "images", ")", ",", "np", ".", "stack", "(", "segvizs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.run": [[104, 121], ["api.TrainingThread._check_has_data", "print", "print", "api.TrainingThread.lock.acquire", "optim.zero_grad", "api.TrainingThread.learner.training_step().backward", "optim.step", "api.TrainingThread.lock.release", "time.sleep", "api.TrainingThread.learner.configure_optimizers", "time.sleep", "api.TrainingThread.learner.training_step"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread._check_has_data", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.configure_optimizers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.training_step"], ["", "", "def", "run", "(", "self", ")", ":", "\n", "    ", "self", ".", "_check_has_data", "(", ")", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "exit", "=", "False", "\n", "optim", "=", "self", ".", "learner", ".", "configure_optimizers", "(", ")", "[", "0", "]", "[", "0", "]", "\n", "print", "(", "\"=> Training thread started\"", ")", "\n", "while", "not", "self", ".", "exit", ":", "\n", "      ", "while", "not", "self", ".", "running", ":", "# wait for running", "\n", "        ", "time", ".", "sleep", "(", "1", ")", "\n", "", "self", ".", "lock", ".", "acquire", "(", ")", "\n", "optim", ".", "zero_grad", "(", ")", "\n", "self", ".", "learner", ".", "training_step", "(", "None", ",", "self", ".", "count", ")", ".", "backward", "(", ")", "\n", "optim", ".", "step", "(", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "lock", ".", "release", "(", ")", "\n", "time", ".", "sleep", "(", "1e-3", ")", "\n", "", "print", "(", "\"=> Training thread ended\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.__init__": [[134, 141], ["api.TrainingThread", "api.TrainAPI.SELeaner.items"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "MA", ")", ":", "\n", "    ", "self", ".", "MA", "=", "MA", "\n", "self", ".", "Gs", "=", "MA", ".", "Gs", "# G", "\n", "self", ".", "SE", "=", "MA", ".", "SE_new", "# LSE", "\n", "self", ".", "SELeaner", "=", "MA", ".", "SELearner", "# LSE Learner", "\n", "self", ".", "training_thread", "=", "{", "k", ":", "TrainingThread", "(", "v", ")", "for", "k", ",", "v", "in", "self", ".", "SELeaner", ".", "items", "(", ")", "}", "\n", "self", ".", "data_dir", "=", "MA", ".", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.reset_train_model": [[142, 148], ["print", "api.TrainAPI.SE[].arch_info", "models.semantic_extractor.LSE().cuda", "print", "models.semantic_extractor.LSE"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info"], ["", "def", "reset_train_model", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "print", "(", "\"=> [TrainerAPI] reset LSE model\"", ")", "\n", "sdict", "=", "self", ".", "SE", "[", "model_name", "]", ".", "arch_info", "(", ")", "\n", "del", "self", ".", "SE", "[", "model_name", "]", "\n", "self", ".", "SE", "[", "model_name", "]", "=", "LSE", "(", "**", "sdict", ")", ".", "cuda", "(", ")", "\n", "print", "(", "\"=> [TrainerAPI] done\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.generate_new_image": [[149, 160], ["print", "torch.randn().cuda", "torch.randn().cuda.repeat", "G.mapping().unsqueeze().repeat", "G.synthesis", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist", "print", "lib.op.torch2image().astype", "torch.randn", "G.mapping().unsqueeze", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy", "lib.op.torch2image", "G.mapping", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image"], ["", "def", "generate_new_image", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "print", "(", "\"=> [TrainerAPI] generate new image\"", ")", "\n", "G", "=", "self", ".", "Gs", "[", "model_name", "]", "\n", "z", "=", "torch", ".", "randn", "(", "1", ",", "512", ")", ".", "cuda", "(", ")", "\n", "zs", "=", "z", ".", "repeat", "(", "G", ".", "num_layers", ",", "1", ")", "# use mixwp", "\n", "wp", "=", "G", ".", "mapping", "(", "z", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "G", ".", "num_layers", ",", "1", ")", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "zs", "=", "zs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "image", "=", "torch2image", "(", "image", ")", ".", "astype", "(", "\"uint8\"", ")", "[", "0", "]", "\n", "print", "(", "\"=> [TrainerAPI] done\"", ")", "\n", "return", "image", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.get_validation": [[161, 171], ["print", "train_thread.send_command", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.send_command"], ["", "def", "get_validation", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "\"\"\"Return validation images. \"\"\"", "\n", "train_thread", "=", "self", ".", "training_thread", "[", "model_name", "]", "\n", "n_iter", "=", "train_thread", ".", "count", "\n", "print", "(", "f\"=> [TrainerAPI] validate on iteration {n_iter}\"", ")", "\n", "G", "=", "self", ".", "Gs", "[", "model_name", "]", "\n", "SE", "=", "self", ".", "SE", "[", "model_name", "]", "\n", "image", ",", "segviz", "=", "train_thread", ".", "send_command", "(", "\"val\"", ")", "\n", "print", "(", "\"=> [TrainerAPI] done\"", ")", "\n", "return", "image", ",", "segviz", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.ctrl_training": [[172, 179], ["api.TrainAPI.training_thread[].send_command"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainingThread.send_command"], ["", "def", "ctrl_training", "(", "self", ",", "model_name", ",", "command", ")", ":", "\n", "    ", "\"\"\"Control the training using commands.\n      Args:\n        model_name : The G name.\n        command : [start] -> start training; [stop] -> stop training;\n    \"\"\"", "\n", "return", "self", ".", "training_thread", "[", "model_name", "]", ".", "send_command", "(", "command", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.TrainAPI.add_annotation": [[180, 206], ["numpy.array().reshape", "get_time_str", "numpy.save", "lib.misc.imwrite", "lib.misc.imwrite", "torch.from_numpy().float().cuda", "manipulation.strategy.EditStrategy.z_to_wp", "preprocess_label().cuda", "AddDataThread().start", "torch.no_grad", "G.synthesis", "preprocess_mask().squeeze().cuda", "numpy.array", "torch.from_numpy().float", "preprocess_label", "api.AddDataThread", "preprocess_mask().squeeze", "torch.from_numpy", "preprocess_mask"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.get_time_str", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.z_to_wp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask"], ["", "def", "add_annotation", "(", "self", ",", "model_name", ",", "zs", ",", "ann", ",", "ann_mask", ")", ":", "\n", "    ", "\"\"\"Add annotations.\"\"\"", "\n", "# select model-specific data", "\n", "G", "=", "self", ".", "Gs", "[", "model_name", "]", "\n", "SE", "=", "self", ".", "SE", "[", "model_name", "]", "\n", "train_thread", "=", "self", ".", "training_thread", "[", "model_name", "]", "\n", "\n", "# parse and store data", "\n", "zs", "=", "np", ".", "array", "(", "zs", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "G", ".", "num_layers", ",", "-", "1", ")", ")", "\n", "time_str", "=", "get_time_str", "(", ")", "\n", "p", "=", "f\"{self.data_dir}/{time_str}\"", "\n", "np", ".", "save", "(", "f\"{p}_origin-zs.npy\"", ",", "zs", ")", "\n", "imwrite", "(", "f\"{p}_ann.png\"", ",", "ann", ")", "\n", "imwrite", "(", "f\"{p}_ann-mask.png\"", ",", "ann_mask", ")", "\n", "\n", "# preprocess data", "\n", "zs", "=", "torch", ".", "from_numpy", "(", "zs", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "size", "=", "self", ".", "MA", ".", "models_config", "[", "model_name", "]", "[", "\"output_size\"", "]", "\n", "wp", "=", "EditStrategy", ".", "z_to_wp", "(", "G", ",", "zs", ",", "in_type", "=", "\"zs\"", ",", "out_type", "=", "\"notrunc-wp\"", ")", "\n", "label_stroke", "=", "preprocess_label", "(", "ann", ",", "SE", ".", "n_class", ",", "size", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "label_mask", "=", "preprocess_mask", "(", "ann_mask", ",", "size", ")", ".", "squeeze", "(", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "# add data into training thread", "\n", "", "AddDataThread", "(", "train_thread", ",", "feature", ",", "label_stroke", ",", "label_mask", ")", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.ModelAPI.update_config": [[209, 214], ["open", "json.load"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["  ", "def", "update_config", "(", "self", ")", ":", "\n", "    ", "with", "open", "(", "self", ".", "config_file", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "self", ".", "config", "=", "json", ".", "load", "(", "f", ")", "\n", "", "self", ".", "models_config", "=", "self", ".", "config", "[", "'models'", "]", "\n", "self", ".", "data_dir", "=", "self", ".", "config", "[", "'collect_data_dir'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.ModelAPI.init_model": [[215, 230], ["api.ModelAPI.models_config.items", "api.create_fewshot_LSE", "create_fewshot_LSE.cuda().train", "models.semantic_extractor.SEFewShotLearner", "build_generator", "load_semantic_extractor().cuda", "len", "create_fewshot_LSE.cuda", "load_semantic_extractor"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.create_fewshot_LSE", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.train", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_generator", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.load_semantic_extractor"], ["", "def", "init_model", "(", "self", ")", ":", "\n", "    ", "self", ".", "Gs", "=", "{", "}", "\n", "self", ".", "SE", "=", "{", "}", "\n", "self", ".", "SE_new", "=", "{", "}", "\n", "self", ".", "SELearner", "=", "{", "}", "\n", "for", "name", ",", "mc", "in", "self", ".", "models_config", ".", "items", "(", ")", ":", "\n", "      ", "G", "=", "build_generator", "(", "mc", "[", "\"model_name\"", "]", ")", ".", "net", "\n", "self", ".", "Gs", "[", "name", "]", "=", "G", "# [TODO]: MultiGPU", "\n", "SE", "=", "None", "if", "len", "(", "mc", "[", "\"SE\"", "]", ")", "==", "0", "else", "load_semantic_extractor", "(", "mc", "[", "\"SE\"", "]", ")", ".", "cuda", "(", ")", "\n", "self", ".", "SE", "[", "name", "]", "=", "SE", "\n", "SE", "=", "create_fewshot_LSE", "(", "G", ")", "\n", "SE", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "self", ".", "SE_new", "[", "name", "]", "=", "SE", "\n", "self", ".", "SELearner", "[", "name", "]", "=", "SEFewShotLearner", "(", "SE", ",", "G", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.ModelAPI.__init__": [[231, 235], ["api.ModelAPI.update_config", "api.ModelAPI.init_model"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.ModelAPI.update_config", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.ModelAPI.init_model"], ["", "", "def", "__init__", "(", "self", ",", "config_file", ")", ":", "\n", "    ", "self", ".", "config_file", "=", "config_file", "\n", "self", ".", "update_config", "(", ")", "\n", "self", ".", "init_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.__init__": [[238, 243], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "MA", ")", ":", "\n", "    ", "self", ".", "ma", "=", "MA", "\n", "self", ".", "Gs", "=", "MA", ".", "Gs", "\n", "self", ".", "SE", "=", "MA", ".", "SE", "\n", "self", ".", "data_dir", "=", "MA", ".", "data_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.has_model": [[244, 246], ["list", "api.EditAPI.Gs.keys"], "methods", ["None"], ["", "def", "has_model", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "return", "model_name", "in", "list", "(", "self", ".", "Gs", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.generate_image_given_stroke": [[247, 287], ["numpy.array().reshape", "get_time_str", "numpy.save", "lib.misc.imwrite", "lib.misc.imwrite", "lib.misc.imwrite", "lib.misc.imwrite", "torch.from_numpy().float().cuda().unsqueeze", "manipulation.strategy.EditStrategy.z_to_wp", "preprocess_image().cuda", "preprocess_mask().cuda", "preprocess_label", "preprocess_mask().squeeze().cuda", "manipulation.sie.ImageEditing.sseg_edit", "G.synthesis", "[].argmax", "lib.visualizer.segviz_numpy", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist", "lib.misc.imwrite", "lib.misc.imwrite", "manipulation.sie.ImageEditing.fuse_stroke", "manipulation.strategy.EditStrategy.z_to_wp.cuda", "lib.op.torch2image", "lib.op.torch2numpy", "numpy.array", "torch.from_numpy().float().cuda", "preprocess_image", "preprocess_mask", "preprocess_mask().squeeze", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy", "SE", "torch.from_numpy().float", "preprocess_mask", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view", "torch.from_numpy", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.get_time_str", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.z_to_wp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.sseg_edit", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imwrite", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.fuse_stroke", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask"], ["", "def", "generate_image_given_stroke", "(", "self", ",", "model_name", ",", "zs", ",", "\n", "image_stroke", ",", "image_mask", ",", "label_stroke", ",", "label_mask", ")", ":", "\n", "    ", "G", ",", "SE", "=", "self", ".", "Gs", "[", "model_name", "]", ",", "self", ".", "SE", "[", "model_name", "]", "\n", "zs", "=", "np", ".", "array", "(", "zs", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "(", "G", ".", "num_layers", ",", "-", "1", ")", ")", "\n", "time_str", "=", "get_time_str", "(", ")", "\n", "p", "=", "f\"{self.data_dir}/{time_str}\"", "\n", "np", ".", "save", "(", "f\"{p}_origin-zs.npy\"", ",", "zs", ")", "\n", "imwrite", "(", "f\"{p}_image-stroke.png\"", ",", "image_stroke", ")", "\n", "imwrite", "(", "f\"{p}_label-stroke.png\"", ",", "label_stroke", ")", "\n", "imwrite", "(", "f\"{p}_image-mask.png\"", ",", "image_mask", ")", "\n", "imwrite", "(", "f\"{p}_label-mask.png\"", ",", "label_mask", ")", "\n", "\n", "size", "=", "self", ".", "ma", ".", "models_config", "[", "model_name", "]", "[", "\"output_size\"", "]", "\n", "zs", "=", "torch", ".", "from_numpy", "(", "zs", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", ".", "unsqueeze", "(", "0", ")", "# (1, 18, 512)", "\n", "wp", "=", "EditStrategy", ".", "z_to_wp", "(", "G", ",", "zs", ",", "\n", "in_type", "=", "\"zs\"", ",", "out_type", "=", "\"notrunc-wp\"", ")", "\n", "image_stroke", "=", "preprocess_image", "(", "image_stroke", ",", "size", ")", ".", "cuda", "(", ")", "\n", "image_mask", "=", "preprocess_mask", "(", "image_mask", ",", "size", ")", ".", "cuda", "(", ")", "\n", "label_stroke", "=", "preprocess_label", "(", "label_stroke", ",", "SE", ".", "n_class", ",", "size", ")", "\n", "label_mask", "=", "preprocess_mask", "(", "label_mask", ",", "size", ")", ".", "squeeze", "(", "1", ")", ".", "cuda", "(", ")", "\n", "fused_int_label", "=", "ImageEditing", ".", "fuse_stroke", "(", "\n", "G", ",", "SE", ",", "None", ",", "wp", ",", "\n", "image_stroke", "[", "0", "]", ",", "image_mask", "[", "0", "]", ",", "\n", "label_stroke", "[", "0", "]", ",", "label_mask", "[", "0", "]", ")", "[", "\"fused_int_label\"", "]", "\n", "zs", ",", "wp", "=", "ImageEditing", ".", "sseg_edit", "(", "\n", "G", ",", "zs", ",", "fused_int_label", ",", "label_mask", ",", "SE", ",", "\n", "op", "=", "\"internal\"", ",", "\n", "latent_strategy", "=", "\"mixwp\"", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "n_iter", "=", "50", ",", "\n", "base_lr", "=", "0.01", ")", "\n", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ".", "cuda", "(", ")", ",", "generate_feature", "=", "True", ")", "\n", "label", "=", "SE", "(", "feature", ")", "[", "-", "1", "]", ".", "argmax", "(", "1", ")", "\n", "image", "=", "torch2image", "(", "image", ")", "[", "0", "]", "\n", "label_viz", "=", "segviz_numpy", "(", "torch2numpy", "(", "label", ")", ")", "\n", "zs", "=", "zs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "imwrite", "(", "f\"{p}_new-image.png\"", ",", "image", ")", "# generated", "\n", "imwrite", "(", "f\"{p}_new-label.png\"", ",", "label_viz", ")", "\n", "return", "image", ",", "label_viz", ",", "zs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.EditAPI.generate_new_image": [[288, 300], ["torch.randn().cuda", "torch.randn().cuda.repeat", "G.mapping().repeat().unsqueeze", "G.synthesis", "seg[].argmax", "lib.visualizer.segviz_numpy", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist", "lib.op.torch2image().astype", "lib.op.torch2numpy", "torch.randn", "G.mapping().repeat", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy", "lib.op.torch2image", "G.mapping", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu().view", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach().cpu", "zs.detach().cpu().view().numpy().tolist.detach().cpu().view().numpy().tolist.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image"], ["", "def", "generate_new_image", "(", "self", ",", "model_name", ")", ":", "\n", "    ", "G", "=", "self", ".", "Gs", "[", "model_name", "]", "\n", "z", "=", "torch", ".", "randn", "(", "1", ",", "512", ")", ".", "cuda", "(", ")", "\n", "zs", "=", "z", ".", "repeat", "(", "G", ".", "num_layers", ",", "1", ")", "# use mixwp", "\n", "wp", "=", "G", ".", "mapping", "(", "z", ")", ".", "repeat", "(", "G", ".", "num_layers", ",", "1", ")", ".", "unsqueeze", "(", "0", ")", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "seg", "=", "self", ".", "SE", "[", "model_name", "]", "(", "feature", ")", "[", "-", "1", "]", "\n", "label", "=", "seg", "[", "0", "]", ".", "argmax", "(", "0", ")", "\n", "image", "=", "torch2image", "(", "image", ")", ".", "astype", "(", "\"uint8\"", ")", "[", "0", "]", "\n", "label_viz", "=", "segviz_numpy", "(", "torch2numpy", "(", "label", ")", ")", "\n", "zs", "=", "zs", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "view", "(", "-", "1", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "return", "image", ",", "label_viz", ",", "zs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.api.create_fewshot_LSE": [[123, 131], ["models.semantic_extractor.LSE", "torch.no_grad", "lib.op.sample_image_feature", "features[].size", "range", "len", "features[].size"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.sample_image_feature"], ["", "", "def", "create_fewshot_LSE", "(", "G", ",", "n_class", "=", "36", ")", ":", "\n", "  ", "\"\"\"Create a LSE model for fewshot learning purpose.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "_", ",", "features", "=", "sample_image_feature", "(", "G", ")", "\n", "", "layers", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "features", ")", ")", "if", "i", "%", "2", "==", "1", "and", "features", "[", "i", "]", ".", "size", "(", "3", ")", ">=", "32", "]", "\n", "dims", "=", "[", "features", "[", "i", "]", ".", "size", "(", "1", ")", "for", "i", "in", "layers", "]", "\n", "return", "LSE", "(", "n_class", "=", "n_class", ",", "dims", "=", "dims", ",", "layers", "=", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.wrapper.WrapedStyledGenerator.__init__": [[10, 70], ["super().__init__", "print", "model.load_model", "print", "torch.load", "wrapper.WrapedStyledGenerator.model.load_state_dict", "print", "print", "wrapper.WrapedStyledGenerator.model.eval", "print", "wrapper.WrapedStyledGenerator.model.set_noise", "print", "torch.randn", "list", "model.semantic_extractor.load_extractor", "wrapper.WrapedStyledGenerator.sep_model.to().eval", "wrapper.WrapedStyledGenerator.model.to", "torch.no_grad", "wrapper.WrapedStyledGenerator.model.get_stage", "range", "hasattr", "print", "str", "len", "sep_model_path.rfind", "len", "sep_model_path[].split", "int", "wrapper.WrapedStyledGenerator.sep_model.to", "s.split", "s.rfind"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["    ", "def", "__init__", "(", "self", ",", "resolution", "=", "1024", ",", "method", "=", "\"\"", ",", "model_path", "=", "\"\"", ",", "n_class", "=", "15", ",", "category_groups", "=", "None", ",", "sep_model_path", "=", "\"\"", ",", "gpu", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "WrapedStyledGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "device", "=", "'cuda'", "if", "gpu", ">=", "0", "else", "'cpu'", "\n", "self", ".", "model_path", "=", "model_path", "\n", "self", ".", "method", "=", "method", "\n", "self", ".", "sep_model_path", "=", "sep_model_path", "\n", "self", ".", "external_model", "=", "None", "\n", "self", ".", "category_groups", "=", "None", "\n", "self", ".", "n_class", "=", "n_class", "\n", "\n", "print", "(", "\"=> Constructing network architecture\"", ")", "\n", "self", ".", "model", "=", "model", ".", "load_model", "(", "self", ".", "model_path", ")", "\n", "print", "(", "\"=> Loading parameter from %s\"", "%", "self", ".", "model_path", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "model_path", ",", "map_location", "=", "'cpu'", ")", "\n", "missed", "=", "self", ".", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "missed", ")", "\n", "\n", "t", "=", "\"identity\"", "\n", "if", "\"stylegan\"", "in", "model_path", ":", "\n", "            ", "if", "not", "hasattr", "(", "self", ".", "model", ",", "\"g_mapping\"", ")", ":", "\n", "                ", "self", ".", "mapping_network", "=", "self", ".", "model", ".", "style", "\n", "t", "=", "\"style\"", "\n", "", "else", ":", "\n", "                ", "self", ".", "mapping_network", "=", "self", ".", "model", ".", "g_mapping", ".", "simple_forward", "\n", "t", "=", "\"g_mapping\"", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "mapping_network", "=", "lambda", "x", ":", "x", "\n", "", "print", "(", "f\"=> Resolve mapping function: {t}\"", ")", "\n", "\n", "try", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"=> Fall back to CPU\"", ")", "\n", "self", ".", "device", "=", "'cpu'", "\n", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"=> Check running\"", ")", "\n", "self", ".", "noise_length", "=", "self", ".", "model", ".", "set_noise", "(", "None", ")", "\n", "\n", "print", "(", "\"=> Optimization method %s\"", "%", "str", "(", "self", ".", "method", ")", ")", "\n", "\n", "self", ".", "latent_param", "=", "torch", ".", "randn", "(", "1", ",", "512", ",", "\n", "requires_grad", "=", "True", ",", "device", "=", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "image", ",", "stage", "=", "self", ".", "model", ".", "get_stage", "(", "self", ".", "latent_param", ")", "\n", "dims", "=", "[", "s", ".", "shape", "[", "1", "]", "for", "s", "in", "stage", "]", "\n", "\n", "", "self", ".", "layers", "=", "list", "(", "range", "(", "len", "(", "dims", ")", ")", ")", "\n", "if", "\"layer\"", "in", "sep_model_path", ":", "\n", "            ", "ind", "=", "sep_model_path", ".", "rfind", "(", "\"layer\"", ")", "+", "len", "(", "\"layer\"", ")", "\n", "s", "=", "sep_model_path", "[", "ind", ":", "]", ".", "split", "(", "\"_\"", ")", "[", "0", "]", "\n", "if", "\".model\"", "in", "s", ":", "\n", "                ", "s", "=", "s", "[", ":", "s", ".", "rfind", "(", "\".\"", ")", "]", "\n", "", "self", ".", "layers", "=", "[", "int", "(", "i", ")", "for", "i", "in", "s", ".", "split", "(", "\",\"", ")", "]", "\n", "dims", "=", "[", "dims", "[", "i", "]", "for", "i", "in", "self", ".", "layers", "]", "\n", "\n", "", "self", ".", "sep_model", "=", "load_extractor", "(", "sep_model_path", ",", "category_groups", ",", "dims", ")", "\n", "self", ".", "sep_model", ".", "to", "(", "self", ".", "device", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.wrapper.WrapedStyledGenerator.generate_noise": [[71, 78], ["print", "sum", "torch.randn", "torch.randn", "range"], "methods", ["None"], ["", "def", "generate_noise", "(", "self", ")", ":", "\n", "        ", "print", "(", "self", ".", "noise_length", ")", "\n", "sizes", "=", "[", "4", "*", "2", "**", "(", "i", "//", "2", ")", "for", "i", "in", "range", "(", "self", ".", "noise_length", ")", "]", "\n", "length", "=", "sum", "(", "[", "size", "**", "2", "for", "size", "in", "sizes", "]", ")", "\n", "latent", "=", "torch", ".", "randn", "(", "1", ",", "512", ",", "device", "=", "self", ".", "device", ")", "\n", "noise_vec", "=", "torch", ".", "randn", "(", "(", "length", ",", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "return", "latent", ",", "noise_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.wrapper.WrapedStyledGenerator.generate_given_image_stroke": [[79, 104], ["home.utils.copy_tensor", "wrapper.WrapedStyledGenerator.latent_param.expand().detach", "wrapper.WrapedStyledGenerator.model.parse_noise", "edit_image_stroke", "home.utils.torch2numpy().transpose", "home.utils.torch2numpy", "home.utils.torch2numpy", "home.utils.torch2numpy", "home.utils.torch2numpy().transpose.astype", "wrapper.WrapedStyledGenerator.latent_param.expand", "home.utils.torch2numpy"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.copy_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy"], ["", "def", "generate_given_image_stroke", "(", "self", ",", "latent", ",", "noise", ",", "image_stroke", ",", "image_mask", ")", ":", "\n", "        ", "utils", ".", "copy_tensor", "(", "self", ".", "latent_param", ",", "latent", ")", "\n", "self", ".", "mix_latent_param", "=", "self", ".", "latent_param", ".", "expand", "(", "self", ".", "noise_length", ",", "-", "1", ")", ".", "detach", "(", ")", "\n", "noises", "=", "self", ".", "model", ".", "parse_noise", "(", "noise", ")", "\n", "\n", "if", "\"ML\"", "in", "self", ".", "method", ":", "\n", "            ", "self", ".", "param", "=", "self", ".", "mix_latent_param", "\n", "", "else", ":", "\n", "            ", "self", ".", "param", "=", "self", ".", "latent_param", "\n", "\n", "", "image", ",", "label", ",", "latent", ",", "noises", ",", "record", "=", "edit_image_stroke", "(", "\n", "model", "=", "self", ".", "model", ",", "latent", "=", "self", ".", "latent_param", ",", "noises", "=", "noises", ",", "\n", "image_stroke", "=", "image_stroke", ",", "image_mask", "=", "image_mask", ",", "\n", "method", "=", "self", ".", "method", ",", "\n", "sep_model", "=", "self", ".", "sep_model", ",", "mapping_network", "=", "self", ".", "mapping_network", ")", "\n", "\n", "# Currently no modification to noise", "\n", "# noise = torch.cat([n.view(-1) for n in noise])", "\n", "\n", "image", "=", "utils", ".", "torch2numpy", "(", "image", "*", "255", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "label", "=", "utils", ".", "torch2numpy", "(", "label", ")", "\n", "latent", "=", "utils", ".", "torch2numpy", "(", "latent", ")", "\n", "noise", "=", "utils", ".", "torch2numpy", "(", "noise", ")", "\n", "\n", "return", "image", ".", "astype", "(", "\"uint8\"", ")", ",", "label", ",", "latent", ",", "noise", ",", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.wrapper.WrapedStyledGenerator.generate_given_label_stroke": [[105, 128], ["home.utils.copy_tensor", "wrapper.WrapedStyledGenerator.latent_param.expand().detach", "wrapper.WrapedStyledGenerator.model.parse_noise", "edit_label_stroke", "home.utils.torch2numpy().transpose", "home.utils.torch2numpy", "home.utils.torch2numpy", "home.utils.torch2numpy", "home.utils.torch2numpy().transpose.astype", "wrapper.WrapedStyledGenerator.latent_param.expand", "wrapper.WrapedStyledGenerator.method.replace", "home.utils.torch2numpy"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.copy_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy"], ["", "def", "generate_given_label_stroke", "(", "self", ",", "latent", ",", "noise", ",", "label_stroke", ",", "label_mask", ")", ":", "\n", "        ", "utils", ".", "copy_tensor", "(", "self", ".", "latent_param", ",", "latent", ")", "\n", "self", ".", "mix_latent_param", "=", "self", ".", "latent_param", ".", "expand", "(", "self", ".", "noise_length", ",", "-", "1", ")", ".", "detach", "(", ")", "\n", "if", "\"ML\"", "in", "self", ".", "method", ":", "\n", "            ", "self", ".", "param", "=", "self", ".", "mix_latent_param", "\n", "", "else", ":", "\n", "            ", "self", ".", "param", "=", "self", ".", "latent_param", "\n", "", "noises", "=", "self", ".", "model", ".", "parse_noise", "(", "noise", ")", "\n", "\n", "image", ",", "label", ",", "latent", ",", "noises", ",", "record", "=", "edit_label_stroke", "(", "\n", "model", "=", "self", ".", "model", ",", "latent", "=", "self", ".", "param", ",", "noises", "=", "noises", ",", "label_stroke", "=", "label_stroke", ",", "label_mask", "=", "label_mask", ",", "\n", "method", "=", "self", ".", "method", ".", "replace", "(", "\"image\"", ",", "\"label\"", ")", ",", "\n", "sep_model", "=", "self", ".", "sep_model", ",", "mapping_network", "=", "self", ".", "mapping_network", ")", "\n", "\n", "# Currently no modification to noise", "\n", "# noise = torch.cat([n.view(-1) for n in noise])", "\n", "\n", "image", "=", "utils", ".", "torch2numpy", "(", "image", "*", "255", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "label", "=", "utils", ".", "torch2numpy", "(", "label", ")", "\n", "latent", "=", "utils", ".", "torch2numpy", "(", "latent", ")", "\n", "noise", "=", "utils", ".", "torch2numpy", "(", "noise", ")", "\n", "\n", "return", "image", ".", "astype", "(", "\"uint8\"", ")", ",", "label", ",", "latent", ",", "noise", ",", "record", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.wrapper.WrapedStyledGenerator.forward": [[130, 139], ["wrapper.WrapedStyledGenerator.model.set_noise", "wrapper.WrapedStyledGenerator.model.get_stage", "home.utils.torch2numpy().transpose", "home.utils.torch2numpy", "wrapper.WrapedStyledGenerator.model.parse_noise", "wrapper.WrapedStyledGenerator.sep_model", "seg.argmax", "home.utils.torch2numpy().transpose.astype", "home.utils.torch2numpy", "home.utils.torch2numpy().transpose.clamp"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy"], ["", "def", "forward", "(", "self", ",", "latent", ",", "noise", ")", ":", "# [0, 1] in torch", "\n", "        ", "self", ".", "model", ".", "set_noise", "(", "self", ".", "model", ".", "parse_noise", "(", "noise", ")", ")", "\n", "image", ",", "stage", "=", "self", ".", "model", ".", "get_stage", "(", "latent", ")", "\n", "seg", "=", "self", ".", "sep_model", "(", "stage", ")", "[", "0", "]", "\n", "\n", "image", "=", "(", "1", "+", "image", ".", "clamp", "(", "-", "1", ",", "1", ")", ")", "*", "255", "/", "2", "\n", "image", "=", "utils", ".", "torch2numpy", "(", "image", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "label", "=", "utils", ".", "torch2numpy", "(", "seg", ".", "argmax", "(", "1", ")", ")", "\n", "return", "image", ".", "astype", "(", "\"uint8\"", ")", ",", "label", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.Timer.__enter__": [[171, 174], ["time.clock"], "methods", ["None"], ["  ", "def", "__enter__", "(", "self", ")", ":", "\n", "    ", "self", ".", "start", "=", "time", ".", "clock", "(", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.Timer.__exit__": [[175, 178], ["time.clock"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "    ", "self", ".", "end", "=", "time", ".", "clock", "(", ")", "\n", "self", ".", "interval", "=", "self", ".", "end", "-", "self", ".", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.to_serialized_tensor": [[18, 22], ["x.detach().cpu().numpy().astype", "base64.b64encode().decode", "x.detach().cpu().numpy", "base64.b64encode", "x.detach().cpu().numpy().astype.tobytes", "x.detach().cpu", "x.detach"], "function", ["None"], ["def", "to_serialized_tensor", "(", "x", ",", "dtype", "=", "\"float32\"", ")", ":", "\n", "  ", "\"\"\"Deprecated.\"\"\"", "\n", "np_arr", "=", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "dtype", ")", "\n", "return", "b64encode", "(", "np_arr", ".", "tobytes", "(", ")", ")", ".", "decode", "(", "'utf-8'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.from_serialized_tensor": [[24, 28], ["numpy.fromstring", "torch.from_numpy", "torch.from_numpy", "base64.b64decode"], "function", ["None"], ["", "def", "from_serialized_tensor", "(", "s", ",", "dtype", "=", "\"float32\"", ")", ":", "\n", "  ", "\"\"\"Deprecated.\"\"\"", "\n", "np_arr", "=", "np", ".", "fromstring", "(", "b64decode", "(", "s", ")", ",", "dtype", "=", "dtype", ")", "\n", "return", "torch", ".", "from_numpy", "(", "np_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.to_compact_LSE": [[30, 39], ["torch.cat", "torch.cat", "utils.to_serialized_tensor", "utils.to_serialized_tensor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.to_serialized_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.to_serialized_tensor"], ["", "def", "to_compact_LSE", "(", "LSE", ")", ":", "\n", "  ", "\"\"\"Deprecated.\"\"\"", "\n", "weight", "=", "torch", ".", "cat", "(", "[", "l", "[", "0", "]", ".", "weight", "[", ":", ",", ":", ",", "0", ",", "0", "]", "for", "l", "in", "LSE", ".", "extractor", "]", ",", "1", ")", "\n", "return", "{", "\n", "\"n_class\"", ":", "LSE", ".", "n_class", ",", "\n", "\"layers\"", ":", "LSE", ".", "layers", ",", "\n", "\"dims\"", ":", "LSE", ".", "dims", ",", "\n", "\"layer_weight\"", ":", "to_serialized_tensor", "(", "LSE", ".", "layer_weight", ")", ",", "\n", "\"weight\"", ":", "to_serialized_tensor", "(", "weight", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.from_compact_LSE": [[41, 51], ["LSE.requires_grad_", "LSE.layer_weight.copy_", "utils.from_serialized_tensor", "enumerate", "LSE.requires_grad_", "utils.from_serialized_tensor", "e[].copy_"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.from_serialized_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.from_serialized_tensor"], ["", "def", "from_compact_LSE", "(", "LSE", ",", "cdict", ")", ":", "\n", "  ", "\"\"\"Deprecated.\"\"\"", "\n", "LSE", ".", "requires_grad_", "(", "False", ")", "\n", "LSE", ".", "layer_weight", ".", "copy_", "(", "from_serialized_tensor", "(", "cdict", "[", "\"layer_weight\"", "]", ")", ")", "\n", "weight", "=", "from_serialized_tensor", "(", "cdict", "[", "\"weight\"", "]", ")", "\n", "count", "=", "0", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "LSE", ".", "extractor", ")", ":", "\n", "    ", "e", "[", ":", ",", ":", ",", "0", ",", "0", "]", ".", "copy_", "(", "weight", "[", ":", ",", "count", ":", "count", "+", "LSE", ".", "dims", "[", "i", "]", "]", ")", "\n", "count", "+=", "LSE", ".", "dims", "[", "i", "]", "\n", "", "LSE", ".", "requires_grad_", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.requires_grad": [[53, 56], ["model.parameters"], "function", ["None"], ["", "def", "requires_grad", "(", "model", ",", "flag", "=", "True", ")", ":", "\n", "  ", "for", "p", "in", "model", ".", "parameters", "(", ")", ":", "\n", "    ", "p", ".", "requires_grad", "=", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.color_mask": [[58, 63], ["None"], "function", ["None"], ["", "", "def", "color_mask", "(", "image", ",", "color", ")", ":", "\n", "  ", "r", "=", "image", "[", ":", ",", ":", ",", "0", "]", "==", "color", "[", "0", "]", "#np.abs(image[:, :, 0] - color[0]) < threshold", "\n", "g", "=", "image", "[", ":", ",", ":", ",", "1", "]", "==", "color", "[", "1", "]", "#np.abs(image[:, :, 1] - color[1]) < threshold", "\n", "b", "=", "image", "[", ":", ",", ":", ",", "2", "]", "==", "color", "[", "2", "]", "#np.abs(image[:, :, 2] - color[2]) < threshold", "\n", "return", "r", "&", "g", "&", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_label": [[65, 76], ["torch.from_numpy", "torch.from_numpy", "torch.zeros", "torch.zeros", "range", "torch.zeros.unsqueeze", "utils.imresize", "lib.visualizer.get_label_color", "utils.color_mask"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.imresize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.get_label_color", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.color_mask"], ["", "def", "preprocess_label", "(", "arr", ",", "n_class", ",", "size", "=", "None", ")", ":", "\n", "  ", "if", "size", "is", "not", "None", ":", "\n", "    ", "arr", "=", "imresize", "(", "arr", ",", "(", "size", ",", "size", ")", ")", "\n", "", "else", ":", "\n", "    ", "size", "=", "arr", ".", "shape", "[", "1", "]", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "arr", ")", "\n", "t", "=", "torch", ".", "zeros", "(", "size", ",", "size", ")", "\n", "for", "i", "in", "range", "(", "n_class", ")", ":", "\n", "    ", "c", "=", "get_label_color", "(", "i", ")", "\n", "t", "[", "color_mask", "(", "x", ",", "c", ")", "]", "=", "i", "\n", "", "return", "t", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_image": [[78, 87], ["torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.interpolate", "torch.from_numpy", "torch.from_numpy", "arr.transpose"], "function", ["None"], ["", "def", "preprocess_image", "(", "arr", ",", "size", "=", "None", ")", ":", "\n", "  ", "\"\"\"arr in [0, 255], shape (H, W, C)\n  \"\"\"", "\n", "t", "=", "torch", ".", "from_numpy", "(", "arr", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", ")", ".", "unsqueeze", "(", "0", ")", "\n", "t", "=", "(", "t", "-", "127.5", ")", "/", "127.5", "\n", "if", "size", "is", "not", "None", ":", "\n", "    ", "t", "=", "F", ".", "interpolate", "(", "t", ",", "\n", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask": [[89, 99], ["torch.from_numpy().unsqueeze().unsqueeze", "torch.from_numpy().unsqueeze().unsqueeze", "torch.interpolate", "torch.from_numpy().unsqueeze", "torch.from_numpy().unsqueeze", "torch.from_numpy", "torch.from_numpy"], "function", ["None"], ["", "def", "preprocess_mask", "(", "mask", ",", "size", "=", "None", ")", ":", "\n", "  ", "\"\"\"\n  mask in [0, 255], shape (H, W)\n  \"\"\"", "\n", "t", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "t", "=", "t", "/", "255.", "\n", "if", "size", "is", "not", "None", ":", "\n", "    ", "t", "=", "F", ".", "interpolate", "(", "t", ",", "\n", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.imresize": [[101, 103], ["numpy.array", "PIL.Image.fromarray().resize", "PIL.Image.fromarray"], "function", ["None"], ["", "def", "imresize", "(", "image", ",", "size", ")", ":", "\n", "  ", "return", "np", ".", "array", "(", "Image", ".", "fromarray", "(", "image", ")", ".", "resize", "(", "size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.stroke2array": [[105, 128], ["image.resize.convert", "numpy.zeros", "numpy.zeros", "PIL.Image.new", "PIL.Image.alpha_composite", "range", "image.resize.resize", "PIL.Image.new", "range", "Image.alpha_composite.getpixel", "Image.new.putpixel", "Image.alpha_composite.putpixel", "int", "image.resize.getpixel", "int", "int"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.convert"], ["", "def", "stroke2array", "(", "image", ",", "target_size", "=", "None", ")", ":", "\n", "  ", "image", "=", "image", ".", "convert", "(", "'RGBA'", ")", "\n", "if", "target_size", "is", "not", "None", ":", "\n", "    ", "image", "=", "image", ".", "resize", "(", "target_size", ")", "\n", "", "w", ",", "h", "=", "image", ".", "size", "\n", "origin", "=", "np", ".", "zeros", "(", "[", "w", ",", "h", ",", "3", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "[", "w", ",", "h", "]", ",", "dtype", "=", "\"uint8\"", ")", "\n", "mask_image", "=", "Image", ".", "new", "(", "'L'", ",", "(", "w", ",", "h", ")", ")", "\n", "new_image", "=", "Image", ".", "alpha_composite", "(", "\n", "Image", ".", "new", "(", "'RGBA'", ",", "(", "w", ",", "h", ")", ",", "'white'", ")", ",", "image", ")", "\n", "\n", "for", "i", "in", "range", "(", "w", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "h", ")", ":", "\n", "      ", "masked", "=", "image", ".", "getpixel", "(", "(", "i", ",", "j", ")", ")", "[", "3", "]", ">", "0", "\n", "color", "=", "new_image", ".", "getpixel", "(", "(", "i", ",", "j", ")", ")", "\n", "origin", "[", "j", ",", "i", "]", "=", "color", "[", ":", "3", "]", "\n", "mask", "[", "j", ",", "i", "]", "=", "int", "(", "masked", ")", "*", "255", "\n", "mask_image", ".", "putpixel", "(", "\n", "(", "i", ",", "j", ")", ",", "int", "(", "masked", ")", "*", "255", ")", "\n", "new_image", ".", "putpixel", "(", "\n", "(", "i", ",", "j", ")", ",", "(", "color", "[", "0", "]", ",", "color", "[", "1", "]", ",", "color", "[", "2", "]", ",", "int", "(", "masked", "*", "255", ")", ")", ")", "\n", "\n", "", "", "return", "origin", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.get_time_str": [[130, 132], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "get_time_str", "(", ")", ":", "\n", "  ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d_%H%M%S_%f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.save_plot_with_time": [[134, 141], ["datetime.datetime.now().strftime", "os.path.join", "matplotlib.savefig", "matplotlib.close", "os.path.exists", "os.makedirs", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "save_plot_with_time", "(", "dirname", ",", "name", ")", ":", "\n", "  ", "if", "not", "os", ".", "path", ".", "exists", "(", "dirname", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "dirname", ")", "\n", "", "time_str", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y%m%d_%H%M%S_%f'", ")", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "dirname", ",", "'%s_%s.png'", "%", "(", "time_str", ",", "name", ")", ")", "\n", "plt", ".", "savefig", "(", "fpath", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.copy_tensor": [[143, 147], ["dst.copy_"], "function", ["None"], ["", "def", "copy_tensor", "(", "dst", ",", "src", ")", ":", "\n", "  ", "dst", ".", "requires_grad", "=", "False", "\n", "dst", ".", "copy_", "(", "src", ")", "\n", "dst", ".", "requires_grad", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.color_mask_tensor": [[149, 154], ["None"], "function", ["None"], ["", "def", "color_mask_tensor", "(", "image", ",", "color", ")", ":", "\n", "  ", "r", "=", "image", "[", "0", ",", ":", ",", ":", "]", "==", "color", "[", "0", "]", "\n", "g", "=", "image", "[", "1", ",", ":", ",", ":", "]", "==", "color", "[", "1", "]", "\n", "b", "=", "image", "[", "2", ",", ":", ",", ":", "]", "==", "color", "[", "2", "]", "\n", "return", "r", "&", "g", "&", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.celeba_rgb2label": [[156, 161], ["torch.zeros().float", "torch.zeros().float", "enumerate", "torch.zeros", "torch.zeros", "utils.color_mask_tensor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.color_mask_tensor"], ["", "def", "celeba_rgb2label", "(", "image", ")", ":", "\n", "  ", "t", "=", "torch", ".", "zeros", "(", "image", ".", "shape", "[", "1", ":", "]", ")", ".", "float", "(", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "CELEBA_COLORS", ")", ":", "\n", "    ", "t", "[", "color_mask_tensor", "(", "image", ",", "c", ")", "]", "=", "i", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.rgb2label": [[163, 168], ["torch.zeros().float", "torch.zeros().float", "enumerate", "torch.zeros", "torch.zeros", "utils.color_mask_tensor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.color_mask_tensor"], ["", "def", "rgb2label", "(", "image", ",", "color_list", ")", ":", "\n", "  ", "t", "=", "torch", ".", "zeros", "(", "image", ".", "shape", "[", "1", ":", "]", ")", ".", "float", "(", ")", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "color_list", ")", ":", "\n", "    ", "t", "[", "color_mask_tensor", "(", "image", ",", "c", ")", "]", "=", "i", "\n", "", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.list_collect_data": [[180, 187], ["glob.glob", "glob.glob.sort"], "function", ["None"], ["", "", "def", "list_collect_data", "(", "data_dir", ",", "keys", "=", "[", "\"origin_latent\"", ",", "\"origin_noise\"", ",", "\"image_stroke\"", ",", "\"image_mask\"", ",", "\"label_stroke\"", ",", "\"label_mask\"", "]", ")", ":", "\n", "  ", "dic", "=", "{", "}", "\n", "for", "key", "in", "keys", ":", "\n", "    ", "keyfiles", "=", "glob", ".", "glob", "(", "f\"{data_dir}/*{key}*\"", ")", "\n", "keyfiles", ".", "sort", "(", ")", "\n", "dic", "[", "key", "]", "=", "keyfiles", "\n", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.plot_dic": [[189, 205], ["len", "int", "matplotlib.figure", "enumerate", "matplotlib.tight_layout", "dic.items", "math.sqrt", "dic.items", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.set_title", "len", "matplotlib.suptitle", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "plot_dic", "(", "dic", ",", "title", "=", "\"\"", ",", "file", "=", "None", ")", ":", "\n", "  ", "n", "=", "len", "(", "dic", ".", "items", "(", ")", ")", "\n", "edge", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", "\n", "if", "edge", "**", "2", "<", "n", ":", "\n", "    ", "edge", "+=", "1", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "4", "*", "edge", ",", "3", "*", "edge", ")", ")", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "dic", ".", "items", "(", ")", ")", ":", "\n", "    ", "ax", "=", "fig", ".", "add_subplot", "(", "edge", ",", "edge", ",", "i", "+", "1", ")", "\n", "ax", ".", "plot", "(", "v", ")", "\n", "ax", ".", "set_title", "(", "k", ")", "\n", "", "if", "len", "(", "title", ")", ">", "0", ":", "\n", "    ", "plt", ".", "suptitle", "(", "title", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "file", "is", "not", "None", ":", "\n", "    ", "plt", ".", "savefig", "(", "file", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.plot_heatmap": [[207, 222], ["len", "int", "matplotlib.figure", "enumerate", "dic.items", "math.sqrt", "dic.items", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.set_title", "len", "matplotlib.suptitle", "matplotlib.savefig", "matplotlib.close"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "", "def", "plot_heatmap", "(", "dic", ",", "title", "=", "\"\"", ",", "file", "=", "None", ")", ":", "\n", "  ", "n", "=", "len", "(", "dic", ".", "items", "(", ")", ")", "\n", "edge", "=", "int", "(", "math", ".", "sqrt", "(", "n", ")", ")", "\n", "if", "edge", "**", "2", "<", "n", ":", "\n", "    ", "edge", "+=", "1", "\n", "", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "3", "*", "edge", ",", "3", "*", "edge", ")", ")", "\n", "for", "i", ",", "(", "k", ",", "v", ")", "in", "enumerate", "(", "dic", ".", "items", "(", ")", ")", ":", "\n", "    ", "ax", "=", "fig", ".", "add_subplot", "(", "edge", ",", "edge", ",", "i", "+", "1", ")", "\n", "ax", ".", "imshow", "(", "v", ")", "\n", "ax", ".", "set_title", "(", "k", ")", "\n", "", "if", "len", "(", "title", ")", ">", "0", ":", "\n", "    ", "plt", ".", "suptitle", "(", "title", ")", "\n", "", "if", "file", "is", "not", "None", ":", "\n", "    ", "plt", ".", "savefig", "(", "file", ",", "bbox_inches", "=", "'tight'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.window_sum": [[224, 234], ["numpy.cumsum", "numpy.zeros_like"], "function", ["None"], ["", "", "def", "window_sum", "(", "arr", ",", "size", "=", "10", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    arr : 1D numpy array\n  \"\"\"", "\n", "cumsum", "=", "np", ".", "cumsum", "(", "arr", ")", "\n", "windowsum", "=", "np", ".", "zeros_like", "(", "cumsum", ")", "\n", "windowsum", "[", ":", "size", "]", "=", "cumsum", "[", ":", "size", "]", "\n", "windowsum", "[", "size", ":", "]", "=", "cumsum", "[", "size", ":", "]", "-", "cumsum", "[", ":", "-", "size", "]", "\n", "return", "windowsum", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor.__init__": [[20, 37], ["base_predictor.BasePredictor.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "architecture", ",", "\n", "spatial_feature", "=", "False", ",", "\n", "imagenet_logits", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initializes with basic settings.\n\n    architecture: Name of the architecture, such as `resnet18`.\n    spatial_feature: Whether to extract spatial feature (feature map). If set\n                     as `False`, a feature vector will be returned. (default:\n                     False)\n    imagenet_logits: Whether to return the final 1000-class logits corresponding\n                     to ImageNet. (default: False)\n    \"\"\"", "\n", "self", ".", "spatial_feature", "=", "spatial_feature", "\n", "self", ".", "imagenet_logits", "=", "imagenet_logits", "\n", "self", ".", "feature_dim", "=", "None", "\n", "super", "(", ")", ".", "__init__", "(", "architecture", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor.build": [[38, 182], ["torchvision.Compose", "torchvision.Compose", "torchvision.densenet161.eval", "torch.Sequential", "torch.Sequential", "torchvision.alexnet", "torchvision.alexnet", "list", "torchvision.ToPILImage", "torchvision.ToPILImage", "torchvision.Resize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.vgg11", "torchvision.vgg11", "torchvision.densenet161.features.children", "list.append", "list", "torchvision.vgg13", "torchvision.vgg13", "torch.Flatten", "torch.Flatten", "torchvision.densenet161.features.children", "list.append", "torchvision.vgg16", "torchvision.vgg16", "torch.Flatten", "torch.Flatten", "list.append", "list.append", "torchvision.vgg19", "torchvision.vgg19", "list", "list.insert", "list.insert", "NotImplementedError", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "list.append", "list", "NotImplementedError", "torchvision.vgg11_bn", "torchvision.vgg11_bn", "torchvision.densenet161.children", "list", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "NotImplementedError", "list", "torch.Flatten", "torch.Flatten", "list", "torchvision.densenet161.features.children", "list.append", "list.append", "list.append", "torchvision.vgg13_bn", "torchvision.vgg13_bn", "torchvision.densenet161.children", "torchvision.densenet161.children", "torchvision.densenet161.children", "torch.ReLU", "torch.ReLU", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Flatten", "torch.Flatten", "torchvision.vgg16_bn", "torchvision.vgg16_bn", "torchvision.vgg19_bn", "torchvision.vgg19_bn", "NotImplementedError", "torchvision.googlenet", "torchvision.googlenet", "torchvision.inception_v3", "torchvision.inception_v3", "torchvision.resnet18", "torchvision.resnet18", "torchvision.resnet34", "torchvision.resnet34", "torchvision.resnet50", "torchvision.resnet50", "torchvision.resnet101", "torchvision.resnet101", "torchvision.resnet152", "torchvision.resnet152", "torchvision.resnext50_32x4d", "torchvision.resnext50_32x4d", "torchvision.resnext101_32x8d", "torchvision.resnext101_32x8d", "torchvision.wide_resnet50_2", "torchvision.wide_resnet50_2", "torchvision.wide_resnet101_2", "torchvision.wide_resnet101_2", "torchvision.densenet121", "torchvision.densenet121", "torchvision.densenet169", "torchvision.densenet169", "torchvision.densenet201", "torchvision.densenet201", "torchvision.densenet161", "torchvision.densenet161", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet18", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet18", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet34", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet34", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet50", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet50", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet101", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet101", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet152", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet152"], ["", "def", "build", "(", "self", ")", ":", "\n", "# Transform for input images.", "\n", "    ", "input_size", "=", "299", "if", "self", ".", "predictor_name", "==", "'inception_v3'", "else", "224", "\n", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Resize", "(", "(", "input_size", ",", "input_size", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "if", "self", ".", "predictor_name", "==", "'alexnet'", ":", "\n", "      ", "model", "=", "M", ".", "alexnet", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg11'", ":", "\n", "      ", "model", "=", "M", ".", "vgg11", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg13'", ":", "\n", "      ", "model", "=", "M", ".", "vgg13", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg16'", ":", "\n", "      ", "model", "=", "M", ".", "vgg16", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg19'", ":", "\n", "      ", "model", "=", "M", ".", "vgg19", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg11_bn'", ":", "\n", "      ", "model", "=", "M", ".", "vgg11_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg13_bn'", ":", "\n", "      ", "model", "=", "M", ".", "vgg13_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg16_bn'", ":", "\n", "      ", "model", "=", "M", ".", "vgg16_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'vgg19_bn'", ":", "\n", "      ", "model", "=", "M", ".", "vgg19_bn", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'googlenet'", ":", "\n", "      ", "model", "=", "M", ".", "googlenet", "(", "pretrained", "=", "True", ",", "aux_logits", "=", "False", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'inception_v3'", ":", "\n", "      ", "model", "=", "M", ".", "inception_v3", "(", "pretrained", "=", "True", ",", "aux_logits", "=", "False", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnet18'", ":", "\n", "      ", "model", "=", "M", ".", "resnet18", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnet34'", ":", "\n", "      ", "model", "=", "M", ".", "resnet34", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnet50'", ":", "\n", "      ", "model", "=", "M", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnet101'", ":", "\n", "      ", "model", "=", "M", ".", "resnet101", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnet152'", ":", "\n", "      ", "model", "=", "M", ".", "resnet152", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnext50'", ":", "\n", "      ", "model", "=", "M", ".", "resnext50_32x4d", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'resnext101'", ":", "\n", "      ", "model", "=", "M", ".", "resnext101_32x8d", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'wideresnet50'", ":", "\n", "      ", "model", "=", "M", ".", "wide_resnet50_2", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'wideresnet101'", ":", "\n", "      ", "model", "=", "M", ".", "wide_resnet101_2", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet121'", ":", "\n", "      ", "model", "=", "M", ".", "densenet121", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet169'", ":", "\n", "      ", "model", "=", "M", ".", "densenet169", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet201'", ":", "\n", "      ", "model", "=", "M", ".", "densenet201", "(", "pretrained", "=", "True", ")", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet161'", ":", "\n", "      ", "model", "=", "M", ".", "densenet161", "(", "pretrained", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Unsupported architecture '", "\n", "f'`{self.predictor_name}`!'", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "self", ".", "imagenet_logits", ":", "\n", "      ", "self", ".", "net", "=", "model", "\n", "self", ".", "feature_dim", "=", "(", "1000", ",", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "architecture_type", "==", "'AlexNet'", ":", "\n", "      ", "layers", "=", "list", "(", "model", ".", "features", ".", "children", "(", ")", ")", "\n", "if", "not", "self", ".", "spatial_feature", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "feature_dim", "=", "(", "256", "*", "6", "*", "6", ",", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "feature_dim", "=", "(", "256", ",", "6", ",", "6", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'VGG'", ":", "\n", "      ", "layers", "=", "list", "(", "model", ".", "features", ".", "children", "(", ")", ")", "\n", "if", "not", "self", ".", "spatial_feature", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "feature_dim", "=", "(", "512", "*", "7", "*", "7", ",", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "feature_dim", "=", "(", "512", ",", "7", ",", "7", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'Inception'", ":", "\n", "      ", "if", "self", ".", "predictor_name", "==", "'googlenet'", ":", "\n", "        ", "final_res", "=", "7", "\n", "num_channels", "=", "1024", "\n", "layers", "=", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "3", "]", "\n", "", "elif", "self", ".", "predictor_name", "==", "'inception_v3'", ":", "\n", "        ", "final_res", "=", "8", "\n", "num_channels", "=", "2048", "\n", "layers", "=", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "layers", ".", "insert", "(", "3", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "layers", ".", "insert", "(", "6", ",", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unsupported Inception architecture '", "\n", "f'`{self.predictor_name}`!'", ")", "\n", "", "if", "not", "self", ".", "spatial_feature", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "feature_dim", "=", "(", "num_channels", ",", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "feature_dim", "=", "(", "num_channels", ",", "final_res", ",", "final_res", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'ResNet'", ":", "\n", "      ", "if", "self", ".", "predictor_name", "in", "[", "'resnet18'", ",", "'resnet34'", "]", ":", "\n", "        ", "num_channels", "=", "512", "\n", "", "elif", "self", ".", "predictor_name", "in", "[", "'resnet50'", ",", "'resnet101'", ",", "'resnet152'", ",", "\n", "'resnext50'", ",", "'resnext101'", ",", "'wideresnet50'", ",", "\n", "'wideresnet101'", "]", ":", "\n", "        ", "num_channels", "=", "2048", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unsupported ResNet architecture '", "\n", "f'`{self.predictor_name}`!'", ")", "\n", "", "if", "not", "self", ".", "spatial_feature", ":", "\n", "        ", "layers", "=", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "\n", "layers", ".", "append", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "feature_dim", "=", "(", "num_channels", ",", ")", "\n", "", "else", ":", "\n", "        ", "layers", "=", "list", "(", "model", ".", "children", "(", ")", ")", "[", ":", "-", "2", "]", "\n", "self", ".", "feature_dim", "=", "(", "num_channels", ",", "7", ",", "7", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'DenseNet'", ":", "\n", "      ", "if", "self", ".", "predictor_name", "==", "'densenet121'", ":", "\n", "        ", "num_channels", "=", "1024", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet169'", ":", "\n", "        ", "num_channels", "=", "1664", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet201'", ":", "\n", "        ", "num_channels", "=", "1920", "\n", "", "elif", "self", ".", "predictor_name", "==", "'densenet161'", ":", "\n", "        ", "num_channels", "=", "2208", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "f'Unsupported DenseNet architecture '", "\n", "f'`{self.predictor_name}`!'", ")", "\n", "", "layers", "=", "list", "(", "model", ".", "features", ".", "children", "(", ")", ")", "\n", "if", "not", "self", ".", "spatial_feature", ":", "\n", "        ", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ")", "\n", "layers", ".", "append", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "self", ".", "feature_dim", "=", "(", "num_channels", ",", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "feature_dim", "=", "(", "num_channels", ",", "7", ",", "7", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Unsupported architecture type '", "\n", "f'`{self.architecture_type}`!'", ")", "\n", "", "self", ".", "net", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor.load": [[183, 189], ["isinstance", "numpy.prod", "len", "len"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "    ", "assert", "isinstance", "(", "self", ".", "feature_dim", ",", "tuple", ")", "and", "np", ".", "prod", "(", "self", ".", "feature_dim", ")", ">", "0", "\n", "if", "not", "self", ".", "spatial_feature", ":", "\n", "      ", "assert", "len", "(", "self", ".", "feature_dim", ")", "==", "1", "\n", "", "else", ":", "\n", "      ", "assert", "len", "(", "self", ".", "feature_dim", ")", "==", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor._predict": [[190, 215], ["torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "feature_extractor.FeatureExtractor.net", "isinstance", "ValueError", "ValueError", "ValueError", "feature_extractor.FeatureExtractor.transform().unsqueeze", "feature_extractor.FeatureExtractor.get_value", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feature_extractor.FeatureExtractor.transform"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "", "def", "_predict", "(", "self", ",", "images", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "\n", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with shape [batch_size, height '", "\n", "f'width, channel], where `batch_size` no larger than '", "\n", "f'{self.batch_size}, and `channel` equals to '", "\n", "f'{self.image_channels}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "[", "self", ".", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "for", "image", "in", "images", "]", "\n", "xs", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "\n", "features", "=", "self", ".", "net", "(", "xs", ")", "\n", "assert", "features", ".", "shape", "[", "1", ":", "]", "==", "self", ".", "feature_dim", "\n", "results", "=", "{", "'feature'", ":", "self", ".", "get_value", "(", "features", ")", "}", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor.predict": [[216, 218], ["feature_extractor.FeatureExtractor.batch_run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run"], ["", "def", "predict", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "self", ".", "_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.feature_extractor.FeatureExtractor.save": [[219, 226], ["numpy.save", "os.path.isdir", "os.makedirs", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "save", "(", "self", ",", "predictions", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "assert", "'feature'", "in", "predictions", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f'{self.predictor_name}_feature.npy'", ")", ",", "\n", "predictions", "[", "'feature'", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter.FaceSegmenter.__init__": [[22, 26], ["base_predictor.BasePredictor.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model_name", "=", "'stylegan2_ffhq'", ")", ":", "\n", "    ", "self", ".", "num_categories", "=", "CELEBAMASK_NUMCLASS", "\n", "self", ".", "labels", "=", "CELEBA_CATEGORY", "\n", "super", "(", ")", ".", "__init__", "(", "'face_seg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter.FaceSegmenter.build": [[27, 29], ["face_segmenter_network.UNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "net", "=", "UNet", "(", "resolution", "=", "self", ".", "resolution", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter.FaceSegmenter.load": [[30, 34], ["os.path.isfile", "face_segmenter.FaceSegmenter.net.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "# Load pre-trained weights.", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "weight_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "weight_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter.FaceSegmenter.raw_prediction": [[35, 44], ["lib.op.bu", "face_segmenter.FaceSegmenter.net", "lib.op.bu.clamp", "lib.op.bu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "raw_prediction", "(", "self", ",", "images", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Expecting torch.Tensor as input\n    \"\"\"", "\n", "images", "=", "op", ".", "bu", "(", "images", ",", "self", ".", "resolution", ")", "\n", "x", "=", "self", ".", "net", "(", "images", ".", "clamp", "(", "-", "1", ",", "1", ")", ")", "# (N, M, H, W)", "\n", "if", "size", ":", "\n", "      ", "x", "=", "op", ".", "bu", "(", "x", ",", "size", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter.FaceSegmenter.__call__": [[45, 54], ["lib.op.bu", "face_segmenter.FaceSegmenter.net", "lib.op.bu.argmax", "lib.op.bu.clamp", "lib.op.bu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "__call__", "(", "self", ",", "images", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Expecting torch.Tensor as input\n    \"\"\"", "\n", "images", "=", "op", ".", "bu", "(", "images", ",", "self", ".", "resolution", ")", "\n", "x", "=", "self", ".", "net", "(", "images", ".", "clamp", "(", "-", "1", ",", "1", ")", ")", "# (N, M, H, W)", "\n", "if", "size", ":", "\n", "      ", "x", "=", "op", ".", "bu", "(", "x", ",", "size", ")", "\n", "", "return", "x", ".", "argmax", "(", "1", ")", "# (N, H, W)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "scene_wideresnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "scene_wideresnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.conv3x3", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.BasicBlock.forward": [[38, 55], ["scene_wideresnet.BasicBlock.conv1", "scene_wideresnet.BasicBlock.bn1", "scene_wideresnet.BasicBlock.relu", "scene_wideresnet.BasicBlock.conv2", "scene_wideresnet.BasicBlock.bn2", "scene_wideresnet.BasicBlock.relu", "scene_wideresnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.Bottleneck.__init__": [[60, 72], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.Bottleneck.forward": [[73, 94], ["scene_wideresnet.Bottleneck.conv1", "scene_wideresnet.Bottleneck.bn1", "scene_wideresnet.Bottleneck.relu", "scene_wideresnet.Bottleneck.conv2", "scene_wideresnet.Bottleneck.bn2", "scene_wideresnet.Bottleneck.relu", "scene_wideresnet.Bottleneck.conv3", "scene_wideresnet.Bottleneck.bn3", "scene_wideresnet.Bottleneck.relu", "scene_wideresnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet.__init__": [[98, 122], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "scene_wideresnet.ResNet._make_layer", "scene_wideresnet.ResNet._make_layer", "scene_wideresnet.ResNet._make_layer", "scene_wideresnet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "scene_wideresnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet._make_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet._make_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet._make_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "#self.maxpool = nn.MaxPool2d(kernel_size=3, stride=1, padding=1) # previous stride is 2", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "14", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "#m.weight.data.fill_(1)", "\n", "#m.bias.data.zero_()", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet._make_layer": [[123, 139], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.ResNet.forward": [[140, 157], ["scene_wideresnet.ResNet.conv1", "scene_wideresnet.ResNet.bn1", "scene_wideresnet.ResNet.relu", "scene_wideresnet.ResNet.layer1", "scene_wideresnet.ResNet.layer2", "scene_wideresnet.ResNet.layer3", "scene_wideresnet.ResNet.layer4", "scene_wideresnet.ResNet.avgpool", "scene_wideresnet.ResNet.view", "scene_wideresnet.ResNet.fc", "scene_wideresnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#x = self.maxpool(x)", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "y", "=", "x", "# Used for scene attribute prediction ONLY.", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet18": [[159, 169], ["scene_wideresnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "resnet18", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet34": [[171, 181], ["scene_wideresnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet50": [[183, 193], ["scene_wideresnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet101": [[195, 205], ["scene_wideresnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet152": [[207, 217], ["scene_wideresnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.helper.build_predictor": [[14, 29], ["NotImplementedError", "ValueError", "face_segmenter.FaceSegmenter", "scene_segmenter.SceneSegmenter", "scene_predictor.ScenePredictor", "face_predictor.FacePredictor", "len"], "function", ["None"], ["def", "build_predictor", "(", "predictor_name", ")", ":", "\n", "  ", "\"\"\"Builds predictor by predictor name.\"\"\"", "\n", "if", "predictor_name", "not", "in", "PREDICTOR_POOL", ":", "\n", "    ", "raise", "ValueError", "(", "f'Model `{predictor_name}` is not registered in '", "\n", "f'`PREDICTOR_POOL` in `predictor_settings.py`!'", ")", "\n", "\n", "", "if", "predictor_name", "==", "'face_seg'", ":", "\n", "    ", "return", "FaceSegmenter", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "==", "'scene_seg'", ":", "\n", "    ", "return", "SceneSegmenter", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "==", "'scene'", ":", "\n", "    ", "return", "ScenePredictor", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "[", ":", "len", "(", "'celebahq_'", ")", "]", "==", "'celebahq_'", ":", "\n", "    ", "return", "FacePredictor", "(", "predictor_name", ")", "\n", "", "raise", "NotImplementedError", "(", "f'Unsupported predictor `{predictor_name}`!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.helper.build_extractor": [[31, 40], ["feature_extractor.FeatureExtractor", "ValueError"], "function", ["None"], ["", "def", "build_extractor", "(", "architecture", ",", "spatial_feature", "=", "False", ",", "imagenet_logits", "=", "False", ")", ":", "\n", "  ", "\"\"\"Builds feature extractor by architecture name.\"\"\"", "\n", "if", "architecture", "not", "in", "PREDICTOR_POOL", ":", "\n", "    ", "raise", "ValueError", "(", "f'Feature extractor with architecture `{architecture}` is '", "\n", "f'not registered in `PREDICTOR_POOL` in '", "\n", "f'`predictor_settings.py`!'", ")", "\n", "", "return", "FeatureExtractor", "(", "architecture", ",", "\n", "spatial_feature", "=", "spatial_feature", ",", "\n", "imagenet_logits", "=", "imagenet_logits", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_landmark_detector.FaceLandmarkDetector.__init__": [[24, 44], ["dlib.get_frontal_face_detector", "dlib.shape_predictor", "os.path.exists", "requests.get", "bz2.decompress", "open", "f.write"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["def", "__init__", "(", "self", ",", "align_size", "=", "1024", ",", "enable_padding", "=", "True", ")", ":", "\n", "    ", "\"\"\"Initializes face detector and landmark detector.\n\n    Args:\n      align_size: Size of the aligned face if performing face alignment.\n        (default: 1024)\n      enable_padding: Whether to enable padding for face alignment (default:\n        True)\n    \"\"\"", "\n", "# Download models if needed.", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "LANDMARK_MODEL_PATH", ")", ":", "\n", "      ", "data", "=", "requests", ".", "get", "(", "LANDMARK_MODEL_URL", ")", "\n", "data_decompressed", "=", "bz2", ".", "decompress", "(", "data", ".", "content", ")", "\n", "with", "open", "(", "LANDMARK_MODEL_PATH", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "data_decompressed", ")", "\n", "\n", "", "", "self", ".", "face_detector", "=", "dlib", ".", "get_frontal_face_detector", "(", ")", "\n", "self", ".", "landmark_detector", "=", "dlib", ".", "shape_predictor", "(", "LANDMARK_MODEL_PATH", ")", "\n", "self", ".", "align_size", "=", "align_size", "\n", "self", ".", "enable_padding", "=", "enable_padding", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_landmark_detector.FaceLandmarkDetector.detect": [[45, 79], ["dlib.load_rgb_image", "face_landmark_detector.FaceLandmarkDetector.face_detector", "face_landmark_detector.FaceLandmarkDetector.landmark_detector().parts", "results.append", "landmarks.append", "face_landmark_detector.FaceLandmarkDetector.landmark_detector", "bbox.left", "bbox.top", "bbox.right", "bbox.bottom"], "methods", ["None"], ["", "def", "detect", "(", "self", ",", "image_path", ")", ":", "\n", "    ", "\"\"\"Detects landmarks from the given image.\n\n    This function will first perform face detection on the input image. All\n    detected results will be grouped into a list. If no face is detected, an\n    empty list will be returned.\n\n    For each element in the list, it is a dictionary consisting of `image_path`,\n    `bbox` and `landmarks`. `image_path` is the path to the input image. `bbox`\n    is the 4-element bounding box with order (left, top, right, bottom), and\n    `landmarks` is a list of 68 (x, y) points.\n\n    Args:\n      image_path: Path to the image to detect landmarks from.\n\n    Returns:\n      A list of dictionaries, each of which is the detection results of a\n        particular face.\n    \"\"\"", "\n", "results", "=", "[", "]", "\n", "image", "=", "dlib", ".", "load_rgb_image", "(", "image_path", ")", "\n", "# Face detection (1 means to upsample the image for 1 time.)", "\n", "bboxes", "=", "self", ".", "face_detector", "(", "image", ",", "1", ")", "\n", "# Landmark detection", "\n", "for", "bbox", "in", "bboxes", ":", "\n", "      ", "landmarks", "=", "[", "]", "\n", "for", "point", "in", "self", ".", "landmark_detector", "(", "image", ",", "bbox", ")", ".", "parts", "(", ")", ":", "\n", "        ", "landmarks", ".", "append", "(", "(", "point", ".", "x", ",", "point", ".", "y", ")", ")", "\n", "", "results", ".", "append", "(", "{", "\n", "'image_path'", ":", "image_path", ",", "\n", "'bbox'", ":", "(", "bbox", ".", "left", "(", ")", ",", "bbox", ".", "top", "(", ")", ",", "bbox", ".", "right", "(", ")", ",", "bbox", ".", "bottom", "(", ")", ")", ",", "\n", "'landmarks'", ":", "landmarks", ",", "\n", "}", ")", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_landmark_detector.FaceLandmarkDetector.align": [[80, 183], ["PIL.Image.open", "numpy.array", "numpy.mean", "numpy.mean", "numpy.hypot", "max", "numpy.stack", "int", "max", "PIL.Image.fromarray.transform", "PIL.Image.fromarray.resize", "numpy.asarray", "PIL.Image.fromarray.copy", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw.rectangle", "Image.fromarray.copy.save", "numpy.flipud", "numpy.hypot", "numpy.floor", "PIL.Image.fromarray.resize", "int", "int", "int", "int", "int", "max", "max", "min", "min", "PIL.Image.fromarray.crop", "int", "int", "int", "int", "max", "max", "max", "max", "numpy.maximum", "numpy.pad", "numpy.maximum", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "PIL.ImageDraw.Draw.ellipse", "numpy.flipud", "numpy.hypot", "numpy.hypot", "int", "int", "numpy.rint", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "max", "int", "numpy.float32", "scipy.ndimage.gaussian_filter", "numpy.clip", "numpy.clip", "numpy.uint8", "numpy.rint", "numpy.rint", "min", "min", "max", "max", "min", "min", "max", "max", "numpy.rint", "numpy.minimum", "numpy.minimum", "numpy.median", "numpy.clip", "numpy.rint", "float", "float", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "align", "(", "self", ",", "face_info", ",", "save_path", "=", "''", ",", "viz_path", "=", "''", ")", ":", "\n", "    ", "\"\"\"Aligns face based on landmark detection.\n\n    The face alignment process is borrowed from\n    https://github.com/NVlabs/ffhq-dataset/blob/master/download_ffhq.py,\n    which only supports aligning faces to square size.\n\n    Args:\n      face_info: Face information, which is the element of the list returned by\n        `self.detect()`.\n      save_path: Path to save the aligned result. If not specified, the aligned\n        result will not be save to disk.\n      viz_path: Path to save the visualization result, which will draw bounding\n        box and the landmarks on the raw image. If not specified, visualization\n        will be skipped.\n\n    Returns:\n      A `np.ndarray`, containing the aligned result. It is with `RGB` channel\n        order.\n    \"\"\"", "\n", "img", "=", "Image", ".", "open", "(", "face_info", "[", "'image_path'", "]", ")", "\n", "if", "viz_path", ":", "\n", "      ", "viz_img", "=", "img", ".", "copy", "(", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "viz_img", ")", "\n", "draw", ".", "rectangle", "(", "face_info", "[", "'bbox'", "]", ",", "outline", "=", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "for", "point", "in", "face_info", "[", "'landmarks'", "]", ":", "\n", "        ", "x", "=", "point", "[", "0", "]", "\n", "y", "=", "point", "[", "1", "]", "\n", "draw", ".", "ellipse", "(", "(", "x", "-", "2", ",", "y", "-", "2", ",", "x", "+", "2", ",", "y", "+", "2", ")", ",", "outline", "=", "(", "0", ",", "0", ",", "255", ")", ")", "\n", "", "viz_img", ".", "save", "(", "viz_path", ")", "\n", "\n", "", "landmarks", "=", "np", ".", "array", "(", "face_info", "[", "'landmarks'", "]", ")", "\n", "eye_left", "=", "np", ".", "mean", "(", "landmarks", "[", "36", ":", "42", "]", ",", "axis", "=", "0", ")", "\n", "eye_right", "=", "np", ".", "mean", "(", "landmarks", "[", "42", ":", "48", "]", ",", "axis", "=", "0", ")", "\n", "eye_middle", "=", "(", "eye_left", "+", "eye_right", ")", "/", "2", "\n", "eye_to_eye", "=", "eye_right", "-", "eye_left", "\n", "mouth_middle", "=", "(", "landmarks", "[", "48", "]", "+", "landmarks", "[", "54", "]", ")", "/", "2", "\n", "eye_to_mouth", "=", "mouth_middle", "-", "eye_middle", "\n", "\n", "# Choose oriented crop rectangle.", "\n", "x", "=", "eye_to_eye", "-", "np", ".", "flipud", "(", "eye_to_mouth", ")", "*", "[", "-", "1", ",", "1", "]", "\n", "x", "/=", "np", ".", "hypot", "(", "*", "x", ")", "\n", "x", "*=", "max", "(", "np", ".", "hypot", "(", "*", "eye_to_eye", ")", "*", "2.0", ",", "np", ".", "hypot", "(", "*", "eye_to_mouth", ")", "*", "1.8", ")", "\n", "y", "=", "np", ".", "flipud", "(", "x", ")", "*", "[", "-", "1", ",", "1", "]", "\n", "c", "=", "eye_middle", "+", "eye_to_mouth", "*", "0.1", "\n", "quad", "=", "np", ".", "stack", "(", "[", "c", "-", "x", "-", "y", ",", "c", "-", "x", "+", "y", ",", "c", "+", "x", "+", "y", ",", "c", "+", "x", "-", "y", "]", ")", "\n", "qsize", "=", "np", ".", "hypot", "(", "*", "x", ")", "*", "2", "\n", "\n", "# Shrink.", "\n", "shrink", "=", "int", "(", "np", ".", "floor", "(", "qsize", "/", "self", ".", "align_size", "*", "0.5", ")", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "      ", "rsize", "=", "(", "int", "(", "np", ".", "rint", "(", "float", "(", "img", ".", "size", "[", "0", "]", ")", "/", "shrink", ")", ")", ",", "\n", "int", "(", "np", ".", "rint", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "/", "shrink", ")", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "rsize", ",", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "/=", "shrink", "\n", "qsize", "/=", "shrink", "\n", "\n", "# Crop.", "\n", "", "border", "=", "max", "(", "int", "(", "np", ".", "rint", "(", "qsize", "*", "0.1", ")", ")", ",", "3", ")", "\n", "crop", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "crop", "=", "(", "max", "(", "crop", "[", "0", "]", "-", "border", ",", "0", ")", ",", "\n", "max", "(", "crop", "[", "1", "]", "-", "border", ",", "0", ")", ",", "\n", "min", "(", "crop", "[", "2", "]", "+", "border", ",", "img", ".", "size", "[", "0", "]", ")", ",", "\n", "min", "(", "crop", "[", "3", "]", "+", "border", ",", "img", ".", "size", "[", "1", "]", ")", ")", "\n", "if", "crop", "[", "2", "]", "-", "crop", "[", "0", "]", "<", "img", ".", "size", "[", "0", "]", "or", "crop", "[", "3", "]", "-", "crop", "[", "1", "]", "<", "img", ".", "size", "[", "1", "]", ":", "\n", "      ", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "quad", "-=", "crop", "[", "0", ":", "2", "]", "\n", "\n", "# Pad.", "\n", "", "pad", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "\n", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "pad", "=", "(", "max", "(", "-", "pad", "[", "0", "]", "+", "border", ",", "0", ")", ",", "\n", "max", "(", "-", "pad", "[", "1", "]", "+", "border", ",", "0", ")", ",", "\n", "max", "(", "pad", "[", "2", "]", "-", "img", ".", "size", "[", "0", "]", "+", "border", ",", "0", ")", ",", "\n", "max", "(", "pad", "[", "3", "]", "-", "img", ".", "size", "[", "1", "]", "+", "border", ",", "0", ")", ")", "\n", "if", "self", ".", "enable_padding", "and", "max", "(", "pad", ")", ">", "border", "-", "4", ":", "\n", "      ", "pad", "=", "np", ".", "maximum", "(", "pad", ",", "int", "(", "np", ".", "rint", "(", "qsize", "*", "0.3", ")", ")", ")", "\n", "img", "=", "np", ".", "pad", "(", "np", ".", "float32", "(", "img", ")", ",", "\n", "(", "(", "pad", "[", "1", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "\n", "'reflect'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "y", ",", "x", ",", "_", "=", "np", ".", "ogrid", "[", ":", "h", ",", ":", "w", ",", ":", "1", "]", "\n", "mask", "=", "np", ".", "maximum", "(", "\n", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "float32", "(", "x", ")", "/", "pad", "[", "0", "]", ",", "np", ".", "float32", "(", "w", "-", "1", "-", "x", ")", "/", "pad", "[", "2", "]", ")", ",", "\n", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "float32", "(", "y", ")", "/", "pad", "[", "1", "]", ",", "np", ".", "float32", "(", "h", "-", "1", "-", "y", ")", "/", "pad", "[", "3", "]", ")", ")", "\n", "blur", "=", "qsize", "*", "0.02", "\n", "blurred_image", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "img", ",", "[", "blur", ",", "blur", ",", "0", "]", ")", "-", "img", "\n", "img", "+=", "blurred_image", "*", "np", ".", "clip", "(", "mask", "*", "3.0", "+", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "img", "+=", "(", "np", ".", "median", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np", ".", "rint", "(", "img", ")", ",", "0", ",", "255", ")", ")", ",", "'RGB'", ")", "\n", "quad", "+=", "pad", "[", ":", "2", "]", "\n", "\n", "# Transform.", "\n", "", "img", "=", "img", ".", "transform", "(", "(", "self", ".", "align_size", "*", "4", ",", "self", ".", "align_size", "*", "4", ")", ",", "Image", ".", "QUAD", ",", "\n", "(", "quad", "+", "0.5", ")", ".", "flatten", "(", ")", ",", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "self", ".", "align_size", ",", "self", ".", "align_size", ")", ",", "Image", ".", "ANTIALIAS", ")", "\n", "\n", "# Save results", "\n", "if", "save_path", ":", "\n", "      ", "img", ".", "save", "(", "save_path", ")", "\n", "\n", "", "return", "np", ".", "asarray", "(", "img", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.SubsetScenePredictor.__init__": [[24, 30], ["super().__init__", "scene_predictor.ScenePredictor", "l.strip", "label_list.index", "open().readlines", "open"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.index"], ["  ", "def", "__init__", "(", "self", ",", "attr_names", "=", "MAN_ATTRS", ",", "label_list", "=", "\"data/scene_predictor_labels.list\"", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "label_list", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "open", "(", "label_list", ",", "\"r\"", ")", ".", "readlines", "(", ")", "]", "\n", "indice", "=", "[", "label_list", ".", "index", "(", "n", ")", "for", "n", "in", "attr_names", "]", "\n", "self", ".", "attr_indice", "=", "indice", "\n", "self", ".", "P", "=", "ScenePredictor", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.SubsetScenePredictor.forward": [[31, 36], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_predictor.SubsetScenePredictor.P", "scene_predictor.SubsetScenePredictor.P", "range", "x[].cuda"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "split", "=", "True", ")", ":", "\n", "    ", "if", "split", ":", "\n", "      ", "return", "torch", ".", "cat", "(", "[", "self", ".", "P", "(", "x", "[", "i", ":", "i", "+", "1", "]", ".", "cuda", "(", ")", ")", "[", ":", ",", "self", ".", "attr_indice", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "", "return", "self", ".", "P", "(", "x", ")", "[", ":", ",", "self", ".", "attr_indice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.__init__": [[41, 48], ["base_predictor.BasePredictor.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "predictor_name", "=", "'scene'", ")", ":", "\n", "    ", "assert", "predictor_name", "==", "'scene'", "\n", "self", ".", "num_categories", "=", "NUM_CATEGORIES", "\n", "self", ".", "num_attributes", "=", "NUM_ATTRIBUTES", "\n", "self", ".", "feature_dim", "=", "FEATURE_DIM", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "predictor_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.build": [[49, 60], ["scene_wideresnet.resnet18", "torchvision.Compose", "torchvision.Normalize", "torchvision.ToPILImage", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_wideresnet.resnet18"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "net", "=", "resnet18", "(", "num_classes", "=", "self", ".", "num_categories", ")", "\n", "\n", "# Transform for input images.", "\n", "self", ".", "transform", "=", "T", ".", "Compose", "(", "[", "\n", "T", ".", "ToPILImage", "(", ")", ",", "\n", "T", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "T", ".", "ToTensor", "(", ")", ",", "\n", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "self", ".", "norm_transform", "=", "T", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.load": [[61, 105], ["scene_predictor.ScenePredictor.check_attr", "scene_predictor.ScenePredictor.check_attr", "os.path.isfile", "torch.load", "torch.load", "torch.load", "torch.load", "scene_predictor.ScenePredictor.net.load_state_dict", "[].data.numpy", "scene_predictor.ScenePredictor.check_attr", "os.path.isfile", "numpy.load", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "open", "len", "len", "open", "enumerate", "len", "len", "k.replace", "line.strip().split", "name[].replace", "int", "line.strip().replace", "checkpoint[].items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "line.strip", "line.strip", "list", "scene_predictor.ScenePredictor.net.parameters"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "# Load category labels.", "\n", "    ", "self", ".", "check_attr", "(", "'category_anno_path'", ")", "\n", "self", ".", "category_name_to_idx", "=", "{", "}", "\n", "self", ".", "category_idx_to_name", "=", "{", "}", "\n", "with", "open", "(", "self", ".", "category_anno_path", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "for", "line", "in", "f", ":", "\n", "        ", "name", ",", "idx", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "name", "=", "name", "[", "3", ":", "]", ".", "replace", "(", "'/'", ",", "'__'", ")", "\n", "idx", "=", "int", "(", "idx", ")", "\n", "self", ".", "category_name_to_idx", "[", "name", "]", "=", "idx", "\n", "self", ".", "category_idx_to_name", "[", "idx", "]", "=", "name", "\n", "", "", "assert", "len", "(", "self", ".", "category_name_to_idx", ")", "==", "self", ".", "num_categories", "\n", "assert", "len", "(", "self", ".", "category_idx_to_name", ")", "==", "self", ".", "num_categories", "\n", "\n", "# Load attribute labels.", "\n", "self", ".", "check_attr", "(", "'attribute_anno_path'", ")", "\n", "self", ".", "attribute_name_to_idx", "=", "{", "}", "\n", "self", ".", "attribute_idx_to_name", "=", "{", "}", "\n", "with", "open", "(", "self", ".", "attribute_anno_path", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "        ", "name", "=", "line", ".", "strip", "(", ")", ".", "replace", "(", "' '", ",", "'_'", ")", "\n", "self", ".", "attribute_name_to_idx", "[", "name", "]", "=", "idx", "\n", "self", ".", "attribute_idx_to_name", "[", "idx", "]", "=", "name", "\n", "", "", "assert", "len", "(", "self", ".", "attribute_name_to_idx", ")", "==", "self", ".", "num_attributes", "\n", "assert", "len", "(", "self", ".", "attribute_idx_to_name", ")", "==", "self", ".", "num_attributes", "\n", "\n", "# Load pre-trained weights for category prediction.", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "weight_path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "self", ".", "weight_path", ",", "\n", "map_location", "=", "lambda", "storage", ",", "loc", ":", "storage", ")", "\n", "state_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "\n", "for", "k", ",", "v", "in", "checkpoint", "[", "'state_dict'", "]", ".", "items", "(", ")", "}", "\n", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "fc_weight", "=", "list", "(", "self", ".", "net", ".", "parameters", "(", ")", ")", "[", "-", "2", "]", ".", "data", ".", "numpy", "(", ")", "\n", "fc_weight", "[", "fc_weight", "<", "0", "]", "=", "0", "\n", "\n", "# Load additional weights for attribute prediction.", "\n", "self", ".", "check_attr", "(", "'attribute_additional_weight_path'", ")", "\n", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "attribute_additional_weight_path", ")", "\n", "self", ".", "attribute_weight", "=", "np", ".", "load", "(", "self", ".", "attribute_additional_weight_path", ")", "\n", "assert", "self", ".", "attribute_weight", ".", "shape", "==", "(", "\n", "self", ".", "num_attributes", ",", "self", ".", "feature_dim", ")", "\n", "self", ".", "aw", "=", "torch", ".", "from_numpy", "(", "self", ".", "attribute_weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.__call__": [[106, 123], ["scene_predictor.ScenePredictor.aw.to", "torch.interpolate", "torch.interpolate", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_predictor.ScenePredictor.net", "torch.softmax", "torch.softmax", "features.squeeze().squeeze.squeeze().squeeze.squeeze().squeeze", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "res.append", "scene_predictor.ScenePredictor.norm_transform", "scene_predictor.ScenePredictor.aw.permute", "features.squeeze().squeeze.squeeze().squeeze.squeeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"\n    Expect (-1, 1) input\n    \"\"\"", "\n", "self", ".", "aw", "=", "self", ".", "aw", ".", "to", "(", "self", ".", "run_device", ")", "\n", "images", "=", "F", ".", "interpolate", "(", "images", ",", "size", "=", "(", "224", ",", "224", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "images", "=", "(", "images", "+", "1", ")", "/", "2", "\n", "x", "=", "torch", ".", "stack", "(", "[", "self", ".", "norm_transform", "(", "x", ")", "for", "x", "in", "images", "]", ")", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "logits", ",", "features", "=", "self", ".", "net", "(", "x", "[", "i", ":", "i", "+", "1", "]", ")", "\n", "category_scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "features", "=", "features", ".", "squeeze", "(", "2", ")", ".", "squeeze", "(", "2", ")", "\n", "attribute_scores", "=", "torch", ".", "matmul", "(", "features", ",", "self", ".", "aw", ".", "permute", "(", "1", ",", "0", ")", ")", "\n", "res", ".", "append", "(", "attribute_scores", ")", "\n", "", "return", "torch", ".", "cat", "(", "res", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor._predict": [[124, 158], ["torch.cat().to", "torch.cat().to", "torch.cat().to", "torch.cat().to", "scene_predictor.ScenePredictor.net", "scene_predictor.ScenePredictor.get_value", "scene_predictor.ScenePredictor.get_value().squeeze", "scene_predictor.ScenePredictor.dot", "isinstance", "ValueError", "ValueError", "ValueError", "scene_predictor.ScenePredictor.transform().unsqueeze", "torch.softmax", "torch.softmax", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_predictor.ScenePredictor.get_value", "scene_predictor.ScenePredictor.transform"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_predict", "(", "self", ",", "images", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "\n", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with shape [batch_size, height '", "\n", "f'width, channel], where `batch_size` no larger than '", "\n", "f'{self.batch_size}, and `channel` equals to '", "\n", "f'{self.image_channels}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "[", "self", ".", "transform", "(", "image", ")", ".", "unsqueeze", "(", "0", ")", "for", "image", "in", "images", "]", "\n", "xs", "=", "torch", ".", "cat", "(", "xs", ",", "dim", "=", "0", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "\n", "logits", ",", "features", "=", "self", ".", "net", "(", "xs", ")", "\n", "category_scores", "=", "self", ".", "get_value", "(", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", ")", "\n", "features", "=", "self", ".", "get_value", "(", "features", ")", ".", "squeeze", "(", "axis", "=", "(", "2", ",", "3", ")", ")", "\n", "attribute_scores", "=", "features", ".", "dot", "(", "self", ".", "attribute_weight", ".", "T", ")", "\n", "\n", "assert", "category_scores", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "self", ".", "num_categories", ")", "\n", "assert", "attribute_scores", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "self", ".", "num_attributes", ")", "\n", "\n", "results", "=", "{", "\n", "'category'", ":", "category_scores", ",", "\n", "'attribute'", ":", "attribute_scores", ",", "\n", "}", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.predict": [[159, 161], ["scene_predictor.ScenePredictor.batch_run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run"], ["", "def", "predict", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "self", ".", "_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_predictor.ScenePredictor.save": [[162, 186], ["numpy.concatenate", "numpy.save", "numpy.concatenate", "numpy.save", "os.path.isdir", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "save", "(", "self", ",", "predictions", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "# Categories", "\n", "", "assert", "'category'", "in", "predictions", "\n", "categories", "=", "np", ".", "concatenate", "(", "predictions", "[", "'category'", "]", ",", "axis", "=", "0", ")", "\n", "assert", "categories", ".", "ndim", "==", "2", "and", "categories", ".", "shape", "[", "1", "]", "==", "self", ".", "num_categories", "\n", "detailed_categories", "=", "{", "\n", "'score'", ":", "categories", ",", "\n", "'name_to_idx'", ":", "self", ".", "category_name_to_idx", ",", "\n", "'idx_to_name'", ":", "self", ".", "category_idx_to_name", ",", "\n", "}", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'category.npy'", ")", ",", "detailed_categories", ")", "\n", "# Attributes", "\n", "assert", "'attribute'", "in", "predictions", "\n", "attributes", "=", "np", ".", "concatenate", "(", "predictions", "[", "'attribute'", "]", ",", "axis", "=", "0", ")", "\n", "assert", "attributes", ".", "shape", "==", "(", "categories", ".", "shape", "[", "0", "]", ",", "self", ".", "num_attributes", ")", "\n", "detailed_attributes", "=", "{", "\n", "'score'", ":", "attributes", ",", "\n", "'name_to_idx'", ":", "self", ".", "attribute_name_to_idx", ",", "\n", "'idx_to_name'", ":", "self", ".", "attribute_idx_to_name", ",", "\n", "}", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'attribute.npy'", ")", ",", "detailed_attributes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.__init__": [[18, 28], ["base_predictor.BasePredictor.__init__", "torchvision.transforms.Normalize", "print", "ADE20K_LABELS.index"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.index"], ["  ", "def", "__init__", "(", "self", ",", "\n", "predictor_name", "=", "'scene_seg'", ",", "\n", "model_name", "=", "\"\"", ")", ":", "\n", "    ", "if", "model_name", "in", "SELECTED_LABELS", ":", "\n", "      ", "self", ".", "labels", "=", "SELECTED_LABELS", "[", "model_name", "]", "\n", "self", ".", "label_indice", "=", "[", "ADE20K_LABELS", ".", "index", "(", "l", ")", "-", "1", "for", "l", "in", "self", ".", "labels", "]", "\n", "", "else", ":", "\n", "      ", "print", "(", "f\"!> {model_name} not seen. Use default ADE labels\"", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "predictor_name", ")", "\n", "self", ".", "input_transform", "=", "Normalize", "(", "[", ".485", ",", ".456", ",", ".406", "]", ",", "[", ".229", ",", ".224", ",", ".225", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.build": [[29, 37], ["get_model().eval", "hasattr", "print", "get_model", "len"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "from", "encoding", ".", "models", "import", "get_model", "\n", "self", ".", "net", "=", "get_model", "(", "\"DeepLab_ResNeSt200_ADE\"", ",", "pretrained", "=", "True", ")", ".", "eval", "(", ")", "\n", "self", ".", "net", ".", "aux", "=", "False", "\n", "self", ".", "num_categories", "=", "self", ".", "net", ".", "nclass", "+", "1", "# add background class", "\n", "if", "hasattr", "(", "self", ",", "\"label_indice\"", ")", ":", "\n", "      ", "self", ".", "num_categories", "=", "len", "(", "self", ".", "labels", ")", "+", "1", "\n", "print", "(", "f\"=> Using partial label {','.join(self.labels)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.load": [[38, 40], ["None"], "methods", ["None"], ["", "", "def", "load", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.raw_prediction": [[41, 55], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scene_segmenter.SceneSegmenter.net", "lib.op.bu.size", "lib.op.bu", "scene_segmenter.SceneSegmenter.input_transform", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "raw_prediction", "(", "self", ",", "images", ",", "size", "=", "256", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      images : torch.Tensor in [-1, 1]\n      size : The target resolution\n    \"\"\"", "\n", "x", "=", "torch", ".", "stack", "(", "[", "self", ".", "input_transform", "(", "(", "1", "+", "i", ")", "/", "2", ")", "\n", "for", "i", "in", "images", "]", ")", "\n", "y", "=", "self", ".", "net", "(", "x", ")", "[", "0", "]", "\n", "if", "hasattr", "(", "self", ",", "\"label_indice\"", ")", ":", "\n", "      ", "y", "=", "y", "[", ":", ",", "self", ".", "label_indice", "]", "\n", "", "if", "y", ".", "size", "(", "2", ")", "!=", "size", ":", "\n", "      ", "y", "=", "bu", "(", "x", ",", "size", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "y", "[", ":", ",", ":", "1", "]", ")", ",", "y", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.__call__": [[56, 71], ["torch.stack", "torch.stack", "torch.stack", "torch.stack", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "lib.op.bu.argmax", "scene_segmenter.SceneSegmenter.net", "lib.op.bu.size", "lib.op.bu", "scene_segmenter.SceneSegmenter.input_transform", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "__call__", "(", "self", ",", "images", ",", "size", "=", "256", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      images : torch.Tensor in [-1, 1]\n      size : The target resolution\n    \"\"\"", "\n", "x", "=", "torch", ".", "stack", "(", "[", "self", ".", "input_transform", "(", "(", "1", "+", "i", ")", "/", "2", ")", "\n", "for", "i", "in", "images", "]", ")", "\n", "y", "=", "self", ".", "net", "(", "x", ")", "[", "0", "]", "\n", "if", "hasattr", "(", "self", ",", "\"label_indice\"", ")", ":", "\n", "      ", "y", "=", "y", "[", ":", ",", "self", ".", "label_indice", "]", "\n", "", "if", "y", ".", "size", "(", "2", ")", "!=", "size", ":", "\n", "      ", "y", "=", "bu", "(", "x", ",", "size", ")", "\n", "", "y", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "y", "[", ":", ",", ":", "1", "]", ")", ",", "y", "]", ",", "1", ")", "\n", "return", "y", ".", "argmax", "(", "1", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.FaceAttributeNet.__init__": [[42, 127], ["torch.Module.__init__", "int", "int", "face_predictor_network.FaceAttributeNet.add_module", "range", "ValueError", "ValueError", "numpy.log2", "numpy.log2", "face_predictor_network.ConvBlock", "face_predictor_network.FaceAttributeNet.add_module", "face_predictor_network.FaceAttributeNet.add_module", "face_predictor_network.FaceAttributeNet.add_module", "face_predictor_network.FaceAttributeNet.add_module", "face_predictor_network.FaceAttributeNet.add_module", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.ConvBlock", "face_predictor_network.ConvBlock", "face_predictor_network.ConvBlock", "face_predictor_network.DenseBlock", "face_predictor_network.DenseBlock", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf", "face_predictor_network.FaceAttributeNet.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "resolution", "=", "256", ",", "\n", "image_channels", "=", "3", ",", "\n", "fused_scale", "=", "'auto'", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the classifier with basic settings.\n\n    Args:\n      resolution: The resolution of the input image. (default: 256)\n      image_channels: Number of channels of the input image. (default: 3)\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides. (default: False)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 16 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported, or `fused_scale`\n        is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "", "if", "fused_scale", "not", "in", "_FUSED_SCALE_OPTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid fused-scale option: {fused_scale}!\\n'", "\n", "f'Options allowed: {_FUSED_SCALE_OPTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "# Input convolution layer.", "\n", "self", ".", "add_module", "(", "\n", "f'input'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "image_channels", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "self", ".", "resolution", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", ")", "\n", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "\n", "# Convolution block for each resolution (except the last one).", "\n", "if", "res", "!=", "self", ".", "init_res", ":", "\n", "        ", "if", "self", ".", "fused_scale", "==", "'auto'", ":", "\n", "          ", "fused_scale", "=", "(", "res", ">=", "_AUTO_FUSED_SCALE_MIN_RES", ")", "\n", "", "else", ":", "\n", "          ", "fused_scale", "=", "self", ".", "fused_scale", "\n", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "downsample", "=", "True", ",", "\n", "fused_scale", "=", "fused_scale", ")", ")", "\n", "\n", "# Convolution block for last resolution.", "\n", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", "*", "res", "*", "res", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 2}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "1", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.FaceAttributeNet.get_nf": [[128, 131], ["min"], "methods", ["None"], ["", "", "", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.FaceAttributeNet.forward": [[132, 148], ["face_predictor_network.FaceAttributeNet.input", "range", "ValueError", "face_predictor_network.FaceAttributeNet.__getattr__", "face_predictor_network.FaceAttributeNet.__getattr__", "face_predictor_network.FaceAttributeNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "    ", "if", "image", ".", "ndim", "!=", "4", "or", "image", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input image should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {image.shape} is received!'", ")", "\n", "\n", "", "x", "=", "self", ".", "input", "(", "image", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.AveragePoolingLayer.__init__": [[157, 160], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.AveragePoolingLayer.forward": [[161, 165], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "ksize", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "strides", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "strides", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.BlurLayer.__init__": [[170, 187], ["torch.Module.__init__", "numpy.array().reshape", "numpy.transpose.T.dot", "numpy.tile", "numpy.transpose", "face_predictor_network.BlurLayer.register_buffer", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "kernel", "=", "(", "1", ",", "2", ",", "1", ")", ",", "\n", "normalize", "=", "True", ",", "\n", "flip", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "kernel", "=", "kernel", ".", "T", ".", "dot", "(", "kernel", ")", "\n", "if", "normalize", ":", "\n", "      ", "kernel", "/=", "np", ".", "sum", "(", "kernel", ")", "\n", "", "if", "flip", ":", "\n", "      ", "kernel", "=", "kernel", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "kernel", "=", "np", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "channels", ",", "1", "]", ")", "\n", "kernel", "=", "np", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "torch", ".", "from_numpy", "(", "kernel", ")", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.BlurLayer.forward": [[188, 190], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.WScaleLayer.__init__": [[200, 211], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "lr_multiplier", "=", "1.0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "*", "lr_multiplier", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.WScaleLayer.forward": [[212, 218], ["ValueError", "face_predictor_network.WScaleLayer.bias.view", "face_predictor_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "4", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "if", "x", ".", "ndim", "==", "2", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], or [batch_size, channel]!\\n'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.ConvBlock.__init__": [[229, 303], ["numpy.sqrt", "torch.Module.__init__", "face_predictor_network.WScaleLayer", "face_predictor_network.BlurLayer", "torch.Identity", "torch.Identity", "torch.Identity", "face_predictor_network.AveragePoolingLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.sqrt", "torch.Identity", "torch.Identity", "torch.Identity", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Hardtanh", "torch.Hardtanh", "torch.Hardtanh", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "fused_scale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      downsample: Whether to downsample the input tensor after convolution.\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation function. Support `linear`, `lrelu`\n        and `tanh`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "downsample", ":", "\n", "      ", "self", ".", "preact", "=", "BlurLayer", "(", "channels", "=", "in_channels", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preact", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "not", "fused_scale", ":", "\n", "      ", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "fused_scale", ":", "\n", "      ", "self", ".", "use_stride", "=", "True", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_stride", "=", "False", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "\n", "", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "elif", "activation_type", "==", "'tanh'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Hardtanh", "(", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.ConvBlock.forward": [[305, 321], ["face_predictor_network.ConvBlock.preact", "face_predictor_network.ConvBlock.wscale", "face_predictor_network.ConvBlock.activate", "torch.pad", "torch.pad", "torch.pad", "kernel.permute.permute.permute", "torch.conv2d", "torch.conv2d", "torch.conv2d", "face_predictor_network.ConvBlock.downsample", "face_predictor_network.ConvBlock.conv"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "preact", "(", "x", ")", "\n", "if", "self", ".", "use_stride", ":", "\n", "      ", "kernel", "=", "self", ".", "weight", "*", "self", ".", "scale", "\n", "kernel", "=", "F", ".", "pad", "(", "kernel", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0.0", ")", "\n", "kernel", "=", "(", "kernel", "[", "1", ":", ",", "1", ":", "]", "+", "kernel", "[", ":", "-", "1", ",", "1", ":", "]", "+", "\n", "kernel", "[", "1", ":", ",", ":", "-", "1", "]", "+", "kernel", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "*", "0.25", "\n", "kernel", "=", "kernel", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", "\n", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "x", "=", "x", "/", "self", ".", "scale", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.DenseBlock.__init__": [[330, 363], ["numpy.sqrt", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "face_predictor_network.WScaleLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "add_bias", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      add_bias: Whether to add bias onto the fully-connected result.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation function. Support `linear` and\n        `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "add_bias", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor_network.DenseBlock.forward": [[365, 372], ["face_predictor_network.DenseBlock.fc", "face_predictor_network.DenseBlock.wscale", "face_predictor_network.DenseBlock.activate", "x.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DBatchNorm.__init__": [[11, 36], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "n_filters", ",", "\n", "k_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "is_batchnorm", "=", "True", ",", "\n", ")", ":", "\n", "    ", "super", "(", "conv2DBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_mod", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", ")", "\n", "\n", "if", "is_batchnorm", ":", "\n", "      ", "self", ".", "cb_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ",", "nn", ".", "BatchNorm2d", "(", "int", "(", "n_filters", ")", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cb_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DBatchNorm.forward": [[37, 40], ["face_segmenter_network.conv2DBatchNorm.cb_unit"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "cb_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DGroupNorm.__init__": [[43, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "n_filters", ",", "\n", "k_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "n_groups", "=", "16", ",", "\n", ")", ":", "\n", "    ", "super", "(", "conv2DGroupNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_mod", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", ")", "\n", "\n", "self", ".", "cg_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ",", "\n", "nn", ".", "GroupNorm", "(", "n_groups", ",", "int", "(", "n_filters", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DGroupNorm.forward": [[67, 70], ["face_segmenter_network.conv2DGroupNorm.cg_unit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "cg_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.deconv2DBatchNorm.__init__": [[73, 86], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ",", "k_size", ",", "stride", ",", "padding", ",", "bias", "=", "True", ")", ":", "\n", "    ", "super", "(", "deconv2DBatchNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dcb_unit", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "n_filters", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.deconv2DBatchNorm.forward": [[88, 91], ["face_segmenter_network.deconv2DBatchNorm.dcb_unit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "dcb_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DBatchNormRelu.__init__": [[94, 121], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "n_filters", ",", "\n", "k_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "is_batchnorm", "=", "True", ",", "\n", ")", ":", "\n", "    ", "super", "(", "conv2DBatchNormRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_mod", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", ")", "\n", "\n", "if", "is_batchnorm", ":", "\n", "      ", "self", ".", "cbr_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "n_filters", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cbr_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DBatchNormRelu.forward": [[122, 125], ["face_segmenter_network.conv2DBatchNormRelu.cbr_unit"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "cbr_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DGroupNormRelu.__init__": [[128, 152], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "int", "int", "torch.GroupNorm", "torch.GroupNorm", "torch.GroupNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "n_filters", ",", "\n", "k_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", "n_groups", "=", "16", ",", "\n", ")", ":", "\n", "    ", "super", "(", "conv2DGroupNormRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "conv_mod", "=", "nn", ".", "Conv2d", "(", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", ")", "\n", "\n", "self", ".", "cgr_unit", "=", "nn", ".", "Sequential", "(", "conv_mod", ",", "\n", "nn", ".", "GroupNorm", "(", "n_groups", ",", "int", "(", "n_filters", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.conv2DGroupNormRelu.forward": [[153, 156], ["face_segmenter_network.conv2DGroupNormRelu.cgr_unit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "cgr_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.deconv2DBatchNormRelu.__init__": [[159, 173], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "int", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ",", "k_size", ",", "stride", ",", "padding", ",", "bias", "=", "True", ")", ":", "\n", "    ", "super", "(", "deconv2DBatchNormRelu", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dcbr_unit", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "\n", "int", "(", "in_channels", ")", ",", "\n", "int", "(", "n_filters", ")", ",", "\n", "kernel_size", "=", "k_size", ",", "\n", "padding", "=", "padding", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "bias", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "int", "(", "n_filters", ")", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.deconv2DBatchNormRelu.forward": [[175, 178], ["face_segmenter_network.deconv2DBatchNormRelu.dcbr_unit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "dcbr_unit", "(", "inputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.unetConv2.__init__": [[181, 199], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "is_batchnorm", ")", ":", "\n", "    ", "super", "(", "unetConv2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "is_batchnorm", ":", "\n", "      ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_size", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.unetConv2.forward": [[201, 207], ["face_segmenter_network.unetConv2.conv1", "face_segmenter_network.unetConv2.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "#print (outputs.shape)", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "#print (outputs.shape)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.unetUp.__init__": [[210, 217], ["torch.Module.__init__", "face_segmenter_network.unetConv2", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d", "torch.UpsamplingBilinear2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ",", "is_deconv", ",", "is_batchnorm", ")", ":", "\n", "    ", "super", "(", "unetUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "unetConv2", "(", "in_size", ",", "out_size", ",", "is_batchnorm", ")", "\n", "if", "is_deconv", ":", "\n", "      ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_size", ",", "out_size", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "up", "=", "nn", ".", "UpsamplingBilinear2d", "(", "scale_factor", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.unetUp.forward": [[218, 225], ["face_segmenter_network.unetUp.up", "torch.pad", "torch.pad", "torch.pad", "face_segmenter_network.unetUp.conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "face_segmenter_network.unetUp.size", "inputs1.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inputs1", ",", "inputs2", ")", ":", "\n", "    ", "outputs2", "=", "self", ".", "up", "(", "inputs2", ")", "\n", "offset", "=", "outputs2", ".", "size", "(", ")", "[", "2", "]", "-", "inputs1", ".", "size", "(", ")", "[", "2", "]", "\n", "padding", "=", "2", "*", "[", "offset", "//", "2", ",", "offset", "//", "2", "]", "\n", "outputs1", "=", "F", ".", "pad", "(", "inputs1", ",", "padding", ")", "\n", "\n", "return", "self", ".", "conv", "(", "torch", ".", "cat", "(", "[", "outputs1", ",", "outputs2", "]", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetDown2.__init__": [[228, 233], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "    ", "super", "(", "segnetDown2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv2DBatchNormRelu", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool_with_argmax", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ",", "return_indices", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetDown2.forward": [[234, 240], ["face_segmenter_network.segnetDown2.conv1", "face_segmenter_network.segnetDown2.conv2", "face_segmenter_network.segnetDown2.size", "face_segmenter_network.segnetDown2.maxpool_with_argmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "unpooled_shape", "=", "outputs", ".", "size", "(", ")", "\n", "outputs", ",", "indices", "=", "self", ".", "maxpool_with_argmax", "(", "outputs", ")", "\n", "return", "outputs", ",", "indices", ",", "unpooled_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetDown3.__init__": [[243, 249], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "    ", "super", "(", "segnetDown3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv2DBatchNormRelu", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv2DBatchNormRelu", "(", "out_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "maxpool_with_argmax", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ",", "return_indices", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetDown3.forward": [[250, 257], ["face_segmenter_network.segnetDown3.conv1", "face_segmenter_network.segnetDown3.conv2", "face_segmenter_network.segnetDown3.conv3", "face_segmenter_network.segnetDown3.size", "face_segmenter_network.segnetDown3.maxpool_with_argmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "conv3", "(", "outputs", ")", "\n", "unpooled_shape", "=", "outputs", ".", "size", "(", ")", "\n", "outputs", ",", "indices", "=", "self", ".", "maxpool_with_argmax", "(", "outputs", ")", "\n", "return", "outputs", ",", "indices", ",", "unpooled_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetUp2.__init__": [[260, 265], ["torch.Module.__init__", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "    ", "super", "(", "segnetUp2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unpool", "=", "nn", ".", "MaxUnpool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv1", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "in_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetUp2.forward": [[266, 271], ["face_segmenter_network.segnetUp2.unpool", "face_segmenter_network.segnetUp2.conv1", "face_segmenter_network.segnetUp2.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "indices", ",", "output_shape", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "unpool", "(", "input", "=", "inputs", ",", "indices", "=", "indices", ",", "output_size", "=", "output_shape", ")", "\n", "outputs", "=", "self", ".", "conv1", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetUp3.__init__": [[274, 280], ["torch.Module.__init__", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_size", ",", "out_size", ")", ":", "\n", "    ", "super", "(", "segnetUp3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "unpool", "=", "nn", ".", "MaxUnpool2d", "(", "2", ",", "2", ")", "\n", "self", ".", "conv1", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "in_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv2", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "in_size", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "conv3", "=", "conv2DBatchNormRelu", "(", "in_size", ",", "out_size", ",", "3", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.segnetUp3.forward": [[281, 287], ["face_segmenter_network.segnetUp3.unpool", "face_segmenter_network.segnetUp3.conv1", "face_segmenter_network.segnetUp3.conv2", "face_segmenter_network.segnetUp3.conv3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "indices", ",", "output_shape", ")", ":", "\n", "    ", "outputs", "=", "self", ".", "unpool", "(", "input", "=", "inputs", ",", "indices", "=", "indices", ",", "output_size", "=", "output_shape", ")", "\n", "outputs", "=", "self", ".", "conv1", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "conv2", "(", "outputs", ")", "\n", "outputs", "=", "self", ".", "conv3", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBlock.__init__": [[292, 302], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "residualBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convbnrelu1", "=", "conv2DBatchNormRelu", "(", "\n", "in_channels", ",", "n_filters", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "convbn2", "=", "conv2DBatchNorm", "(", "n_filters", ",", "n_filters", ",", "3", ",", "1", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBlock.forward": [[303, 315], ["face_segmenter_network.residualBlock.convbnrelu1", "face_segmenter_network.residualBlock.convbn2", "face_segmenter_network.residualBlock.relu", "face_segmenter_network.residualBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "convbnrelu1", "(", "x", ")", "\n", "out", "=", "self", ".", "convbn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBottleneck.__init__": [[320, 332], ["torch.Module.__init__", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.Conv2DBatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "    ", "super", "(", "residualBottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "convbn1", "=", "nn", ".", "Conv2DBatchNorm", "(", "in_channels", ",", "n_filters", ",", "k_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "convbn2", "=", "nn", ".", "Conv2DBatchNorm", "(", "\n", "n_filters", ",", "n_filters", ",", "k_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "convbn3", "=", "nn", ".", "Conv2DBatchNorm", "(", "\n", "n_filters", ",", "n_filters", "*", "4", ",", "k_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBottleneck.forward": [[333, 347], ["face_segmenter_network.residualBottleneck.convbn1", "face_segmenter_network.residualBottleneck.convbn2", "face_segmenter_network.residualBottleneck.convbn3", "face_segmenter_network.residualBottleneck.relu", "face_segmenter_network.residualBottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "convbn1", "(", "x", ")", "\n", "out", "=", "self", ".", "convbn2", "(", "out", ")", "\n", "out", "=", "self", ".", "convbn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.linknetUp.__init__": [[350, 366], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "torch.deconv2DBatchNormRelu", "torch.deconv2DBatchNormRelu", "torch.deconv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "n_filters", ")", ":", "\n", "    ", "super", "(", "linknetUp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# B, 2C, H, W -> B, C/2, H, W", "\n", "self", ".", "convbnrelu1", "=", "conv2DBatchNormRelu", "(", "\n", "in_channels", ",", "n_filters", "/", "2", ",", "k_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n", "\n", "# B, C/2, H, W -> B, C/2, H, W", "\n", "self", ".", "deconvbnrelu2", "=", "nn", ".", "deconv2DBatchNormRelu", "(", "\n", "n_filters", "/", "2", ",", "n_filters", "/", "2", ",", "k_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "0", "\n", ")", "\n", "\n", "# B, C/2, H, W -> B, C, H, W", "\n", "self", ".", "convbnrelu3", "=", "conv2DBatchNormRelu", "(", "\n", "n_filters", "/", "2", ",", "n_filters", ",", "k_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.linknetUp.forward": [[368, 373], ["face_segmenter_network.linknetUp.convbnrelu1", "face_segmenter_network.linknetUp.deconvbnrelu2", "face_segmenter_network.linknetUp.convbnrelu3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "convbnrelu1", "(", "x", ")", "\n", "x", "=", "self", ".", "deconvbnrelu2", "(", "x", ")", "\n", "x", "=", "self", ".", "convbnrelu3", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.FRRU.__init__": [[380, 413], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "conv_unit", "conv_unit", "conv_unit", "conv_unit"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "prev_channels", ",", "\n", "out_channels", ",", "\n", "scale", ",", "\n", "group_norm", "=", "False", ",", "\n", "n_groups", "=", "None", ")", ":", "\n", "    ", "super", "(", "FRRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale", "=", "scale", "\n", "self", ".", "prev_channels", "=", "prev_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "group_norm", "=", "group_norm", "\n", "self", ".", "n_groups", "=", "n_groups", "\n", "\n", "\n", "if", "self", ".", "group_norm", ":", "\n", "      ", "conv_unit", "=", "conv2DGroupNormRelu", "\n", "self", ".", "conv1", "=", "conv_unit", "(", "\n", "prev_channels", "+", "32", ",", "out_channels", ",", "k_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "n_groups", "=", "self", ".", "n_groups", "\n", ")", "\n", "self", ".", "conv2", "=", "conv_unit", "(", "\n", "out_channels", ",", "out_channels", ",", "k_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "n_groups", "=", "self", ".", "n_groups", "\n", ")", "\n", "\n", "", "else", ":", "\n", "      ", "conv_unit", "=", "conv2DBatchNormRelu", "\n", "self", ".", "conv1", "=", "conv_unit", "(", "prev_channels", "+", "32", ",", "out_channels", ",", "k_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", ")", "\n", "self", ".", "conv2", "=", "conv_unit", "(", "out_channels", ",", "out_channels", ",", "k_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", ")", "\n", "\n", "", "self", ".", "conv_res", "=", "nn", ".", "Conv2d", "(", "out_channels", ",", "32", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.FRRU.forward": [[414, 425], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "face_segmenter_network.FRRU.conv1", "face_segmenter_network.FRRU.conv2", "face_segmenter_network.FRRU.conv_res", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.upsample", "torch.upsample", "torch.upsample", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y", ",", "z", ")", ":", "\n", "    ", "x", "=", "torch", ".", "cat", "(", "[", "y", ",", "nn", ".", "MaxPool2d", "(", "self", ".", "scale", ",", "self", ".", "scale", ")", "(", "z", ")", "]", ",", "dim", "=", "1", ")", "\n", "y_prime", "=", "self", ".", "conv1", "(", "x", ")", "\n", "y_prime", "=", "self", ".", "conv2", "(", "y_prime", ")", "\n", "\n", "x", "=", "self", ".", "conv_res", "(", "y_prime", ")", "\n", "upsample_size", "=", "torch", ".", "Size", "(", "[", "_s", "*", "self", ".", "scale", "for", "_s", "in", "y_prime", ".", "shape", "[", "-", "2", ":", "]", "]", ")", "\n", "x", "=", "F", ".", "upsample", "(", "x", ",", "size", "=", "upsample_size", ",", "mode", "=", "\"nearest\"", ")", "\n", "z_prime", "=", "z", "+", "x", "\n", "\n", "return", "y_prime", ",", "z_prime", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.RU.__init__": [[432, 455], ["torch.Module.__init__", "face_segmenter_network.conv2DGroupNormRelu", "face_segmenter_network.conv2DGroupNorm", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNorm"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "strides", "=", "1", ",", "\n", "group_norm", "=", "False", ",", "\n", "n_groups", "=", "None", ")", ":", "\n", "    ", "super", "(", "RU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_norm", "=", "group_norm", "\n", "self", ".", "n_groups", "=", "n_groups", "\n", "\n", "if", "self", ".", "group_norm", ":", "\n", "      ", "self", ".", "conv1", "=", "conv2DGroupNormRelu", "(", "\n", "channels", ",", "channels", ",", "k_size", "=", "kernel_size", ",", "\n", "stride", "=", "strides", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "n_groups", "=", "self", ".", "n_groups", ")", "\n", "self", ".", "conv2", "=", "conv2DGroupNorm", "(", "\n", "channels", ",", "channels", ",", "k_size", "=", "kernel_size", ",", "\n", "stride", "=", "strides", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", "n_groups", "=", "self", ".", "n_groups", ")", "\n", "\n", "", "else", ":", "\n", "      ", "self", ".", "conv1", "=", "conv2DBatchNormRelu", "(", "\n", "channels", ",", "channels", ",", "k_size", "=", "kernel_size", ",", "stride", "=", "strides", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", ")", "\n", "self", ".", "conv2", "=", "conv2DBatchNorm", "(", "\n", "channels", ",", "channels", ",", "k_size", "=", "kernel_size", ",", "stride", "=", "strides", ",", "padding", "=", "1", ",", "bias", "=", "False", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.RU.forward": [[456, 461], ["face_segmenter_network.RU.conv1", "face_segmenter_network.RU.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "incoming", "=", "x", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "return", "x", "+", "incoming", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualConvUnit.__init__": [[464, 472], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ",", "kernel_size", "=", "3", ")", ":", "\n", "    ", "super", "(", "residualConvUnit", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "residual_conv_unit", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "kernel_size", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "channels", ",", "channels", ",", "kernel_size", "=", "kernel_size", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualConvUnit.forward": [[474, 478], ["face_segmenter_network.residualConvUnit.residual_conv_unit"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "input", "=", "x", "\n", "x", "=", "self", ".", "residual_conv_unit", "(", "x", ")", "\n", "return", "x", "+", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.multiResolutionFusion.__init__": [[481, 491], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ",", "up_scale_high", ",", "up_scale_low", ",", "high_shape", ",", "low_shape", ")", ":", "\n", "    ", "super", "(", "multiResolutionFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "up_scale_high", "=", "up_scale_high", "\n", "self", ".", "up_scale_low", "=", "up_scale_low", "\n", "\n", "self", ".", "conv_high", "=", "nn", ".", "Conv2d", "(", "high_shape", "[", "1", "]", ",", "channels", ",", "kernel_size", "=", "3", ")", "\n", "\n", "if", "low_shape", "is", "not", "None", ":", "\n", "      ", "self", ".", "conv_low", "=", "nn", ".", "Conv2d", "(", "low_shape", "[", "1", "]", ",", "channels", ",", "kernel_size", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.multiResolutionFusion.forward": [[492, 505], ["torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "torch.upsample", "face_segmenter_network.multiResolutionFusion.conv_high", "face_segmenter_network.multiResolutionFusion.conv_low"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_high", ",", "x_low", ")", ":", "\n", "    ", "high_upsampled", "=", "F", ".", "upsample", "(", "\n", "self", ".", "conv_high", "(", "x_high", ")", ",", "scale_factor", "=", "self", ".", "up_scale_high", ",", "mode", "=", "\"bilinear\"", "\n", ")", "\n", "\n", "if", "x_low", "is", "None", ":", "\n", "      ", "return", "high_upsampled", "\n", "\n", "", "low_upsampled", "=", "F", ".", "upsample", "(", "\n", "self", ".", "conv_low", "(", "x_low", ")", ",", "scale_factor", "=", "self", ".", "up_scale_low", ",", "mode", "=", "\"bilinear\"", "\n", ")", "\n", "\n", "return", "low_upsampled", "+", "high_upsampled", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.chainedResidualPooling.__init__": [[508, 515], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "channels", ",", "input_shape", ")", ":", "\n", "    ", "super", "(", "chainedResidualPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "chained_residual_pooling", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "5", ",", "1", ",", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_shape", "[", "1", "]", ",", "channels", ",", "kernel_size", "=", "3", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.chainedResidualPooling.forward": [[517, 521], ["face_segmenter_network.chainedResidualPooling.chained_residual_pooling"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "input", "=", "x", "\n", "x", "=", "self", ".", "chained_residual_pooling", "(", "x", ")", "\n", "return", "x", "+", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.pyramidPooling.__init__": [[524, 554], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "len", "face_segmenter_network.pyramidPooling.paths.append", "face_segmenter_network.conv2DBatchNormRelu", "int", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "pool_sizes", ",", "\n", "model_name", "=", "\"pspnet\"", ",", "\n", "fusion_mode", "=", "\"cat\"", ",", "\n", "is_batchnorm", "=", "True", ",", "\n", ")", ":", "\n", "    ", "super", "(", "pyramidPooling", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "not", "is_batchnorm", "\n", "\n", "self", ".", "paths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pool_sizes", ")", ")", ":", "\n", "      ", "self", ".", "paths", ".", "append", "(", "\n", "conv2DBatchNormRelu", "(", "\n", "in_channels", ",", "\n", "int", "(", "in_channels", "/", "len", "(", "pool_sizes", ")", ")", ",", "\n", "1", ",", "\n", "1", ",", "\n", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "path_module_list", "=", "nn", ".", "ModuleList", "(", "self", ".", "paths", ")", "\n", "self", ".", "pool_sizes", "=", "pool_sizes", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "fusion_mode", "=", "fusion_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.pyramidPooling.forward": [[555, 596], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "k_sizes.append", "strides.append", "zip", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "output_slices.append", "zip", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.interpolate", "torch.interpolate", "torch.interpolate", "module", "module", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "h", ",", "w", "=", "x", ".", "shape", "[", "2", ":", "]", "\n", "\n", "if", "self", ".", "training", "or", "self", ".", "model_name", "!=", "\"icnet\"", ":", "# general settings or pspnet", "\n", "      ", "k_sizes", "=", "[", "]", "\n", "strides", "=", "[", "]", "\n", "for", "pool_size", "in", "self", ".", "pool_sizes", ":", "\n", "        ", "k_sizes", ".", "append", "(", "(", "int", "(", "h", "/", "pool_size", ")", ",", "int", "(", "w", "/", "pool_size", ")", ")", ")", "\n", "strides", ".", "append", "(", "(", "int", "(", "h", "/", "pool_size", ")", ",", "int", "(", "w", "/", "pool_size", ")", ")", ")", "\n", "", "", "else", ":", "# eval mode and icnet: pre-trained for 1025 x 2049", "\n", "      ", "k_sizes", "=", "[", "(", "8", ",", "15", ")", ",", "(", "13", ",", "25", ")", ",", "(", "17", ",", "33", ")", ",", "(", "33", ",", "65", ")", "]", "\n", "strides", "=", "[", "(", "5", ",", "10", ")", ",", "(", "10", ",", "20", ")", ",", "(", "16", ",", "32", ")", ",", "(", "33", ",", "65", ")", "]", "\n", "\n", "", "if", "self", ".", "fusion_mode", "==", "\"cat\"", ":", "# pspnet: concat (including x)", "\n", "      ", "output_slices", "=", "[", "x", "]", "\n", "\n", "for", "i", ",", "(", "module", ",", "pool_size", ")", "in", "enumerate", "(", "\n", "zip", "(", "self", ".", "path_module_list", ",", "self", ".", "pool_sizes", ")", "\n", ")", ":", "\n", "        ", "out", "=", "F", ".", "avg_pool2d", "(", "x", ",", "k_sizes", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", ",", "padding", "=", "0", ")", "\n", "# out = F.adaptive_avg_pool2d(x, output_size=(pool_size, pool_size))", "\n", "if", "self", ".", "model_name", "!=", "\"icnet\"", ":", "\n", "          ", "out", "=", "module", "(", "out", ")", "\n", "", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "output_slices", ".", "append", "(", "out", ")", "\n", "\n", "", "return", "torch", ".", "cat", "(", "output_slices", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "# icnet: element-wise sum (including x)", "\n", "      ", "pp_sum", "=", "x", "\n", "\n", "for", "i", ",", "(", "module", ",", "pool_size", ")", "in", "enumerate", "(", "\n", "zip", "(", "self", ".", "path_module_list", ",", "self", ".", "pool_sizes", ")", "\n", ")", ":", "\n", "        ", "out", "=", "F", ".", "avg_pool2d", "(", "x", ",", "k_sizes", "[", "i", "]", ",", "stride", "=", "strides", "[", "i", "]", ",", "padding", "=", "0", ")", "\n", "# out = F.adaptive_avg_pool2d(x, output_size=(pool_size, pool_size))", "\n", "if", "self", ".", "model_name", "!=", "\"icnet\"", ":", "\n", "          ", "out", "=", "module", "(", "out", ")", "\n", "", "out", "=", "F", ".", "interpolate", "(", "out", ",", "size", "=", "(", "h", ",", "w", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "pp_sum", "=", "pp_sum", "+", "out", "\n", "\n", "", "return", "pp_sum", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.bottleNeckPSP.__init__": [[599, 654], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNorm", "face_segmenter_network.conv2DBatchNorm", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "in_channels", ",", "mid_channels", ",", "out_channels", ",", "stride", ",", "dilation", "=", "1", ",", "is_batchnorm", "=", "True", "\n", ")", ":", "\n", "    ", "super", "(", "bottleNeckPSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "not", "is_batchnorm", "\n", "\n", "self", ".", "cbr1", "=", "conv2DBatchNormRelu", "(", "\n", "in_channels", ",", "\n", "mid_channels", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "if", "dilation", ">", "1", ":", "\n", "      ", "self", ".", "cbr2", "=", "conv2DBatchNormRelu", "(", "\n", "mid_channels", ",", "\n", "mid_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cbr2", "=", "conv2DBatchNormRelu", "(", "\n", "mid_channels", ",", "\n", "mid_channels", ",", "\n", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "1", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "", "self", ".", "cb3", "=", "conv2DBatchNorm", "(", "\n", "mid_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "self", ".", "cb4", "=", "conv2DBatchNorm", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.bottleNeckPSP.forward": [[656, 660], ["face_segmenter_network.bottleNeckPSP.cb3", "face_segmenter_network.bottleNeckPSP.cb4", "torch.relu", "torch.relu", "torch.relu", "face_segmenter_network.bottleNeckPSP.cbr2", "face_segmenter_network.bottleNeckPSP.cbr1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "conv", "=", "self", ".", "cb3", "(", "self", ".", "cbr2", "(", "self", ".", "cbr1", "(", "x", ")", ")", ")", "\n", "residual", "=", "self", ".", "cb4", "(", "x", ")", "\n", "return", "F", ".", "relu", "(", "conv", "+", "residual", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.bottleNeckIdentifyPSP.__init__": [[663, 707], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNorm", "face_segmenter_network.conv2DBatchNormRelu", "face_segmenter_network.conv2DBatchNormRelu"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "mid_channels", ",", "stride", ",", "dilation", "=", "1", ",", "is_batchnorm", "=", "True", ")", ":", "\n", "    ", "super", "(", "bottleNeckIdentifyPSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "not", "is_batchnorm", "\n", "\n", "self", ".", "cbr1", "=", "conv2DBatchNormRelu", "(", "\n", "in_channels", ",", "\n", "mid_channels", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "if", "dilation", ">", "1", ":", "\n", "      ", "self", ".", "cbr2", "=", "conv2DBatchNormRelu", "(", "\n", "mid_channels", ",", "\n", "mid_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "dilation", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "dilation", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "cbr2", "=", "conv2DBatchNormRelu", "(", "\n", "mid_channels", ",", "\n", "mid_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "1", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "", "self", ".", "cb3", "=", "conv2DBatchNorm", "(", "\n", "mid_channels", ",", "\n", "in_channels", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.bottleNeckIdentifyPSP.forward": [[709, 713], ["face_segmenter_network.bottleNeckIdentifyPSP.cb3", "torch.relu", "torch.relu", "torch.relu", "face_segmenter_network.bottleNeckIdentifyPSP.cbr2", "face_segmenter_network.bottleNeckIdentifyPSP.cbr1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "x", "=", "self", ".", "cb3", "(", "self", ".", "cbr2", "(", "self", ".", "cbr1", "(", "x", ")", ")", ")", "\n", "return", "F", ".", "relu", "(", "x", "+", "residual", ",", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBlockPSP.__init__": [[716, 754], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "range", "face_segmenter_network.bottleNeckPSP", "layers.append", "face_segmenter_network.bottleNeckIdentifyPSP"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "n_blocks", ",", "\n", "in_channels", ",", "\n", "mid_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "dilation", "=", "1", ",", "\n", "include_range", "=", "\"all\"", ",", "\n", "is_batchnorm", "=", "True", ",", "\n", ")", ":", "\n", "    ", "super", "(", "residualBlockPSP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "dilation", ">", "1", ":", "\n", "      ", "stride", "=", "1", "\n", "\n", "# residualBlockPSP = convBlockPSP + identityBlockPSPs", "\n", "", "layers", "=", "[", "]", "\n", "if", "include_range", "in", "[", "\"all\"", ",", "\"conv\"", "]", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "bottleNeckPSP", "(", "\n", "in_channels", ",", "\n", "mid_channels", ",", "\n", "out_channels", ",", "\n", "stride", ",", "\n", "dilation", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", ")", "\n", "", "if", "include_range", "in", "[", "\"all\"", ",", "\"identity\"", "]", ":", "\n", "      ", "for", "i", "in", "range", "(", "n_blocks", "-", "1", ")", ":", "\n", "        ", "layers", ".", "append", "(", "\n", "bottleNeckIdentifyPSP", "(", "\n", "out_channels", ",", "mid_channels", ",", "stride", ",", "dilation", ",", "is_batchnorm", "=", "is_batchnorm", "\n", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "layers", "=", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.residualBlockPSP.forward": [[755, 757], ["face_segmenter_network.residualBlockPSP.layers"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "layers", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.cascadeFeatureFusion.__init__": [[760, 794], ["torch.Module.__init__", "face_segmenter_network.conv2DBatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "face_segmenter_network.conv2DBatchNorm", "int", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "n_classes", ",", "low_in_channels", ",", "high_in_channels", ",", "out_channels", ",", "is_batchnorm", "=", "True", "\n", ")", ":", "\n", "    ", "super", "(", "cascadeFeatureFusion", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "bias", "=", "not", "is_batchnorm", "\n", "\n", "self", ".", "low_dilated_conv_bn", "=", "conv2DBatchNorm", "(", "\n", "low_in_channels", ",", "\n", "out_channels", ",", "\n", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "2", ",", "\n", "bias", "=", "bias", ",", "\n", "dilation", "=", "2", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n", "self", ".", "low_classifier_conv", "=", "nn", ".", "Conv2d", "(", "\n", "int", "(", "low_in_channels", ")", ",", "\n", "int", "(", "n_classes", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "stride", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "dilation", "=", "1", ",", "\n", ")", "# Train only", "\n", "self", ".", "high_proj_conv_bn", "=", "conv2DBatchNorm", "(", "\n", "high_in_channels", ",", "\n", "out_channels", ",", "\n", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "bias", ",", "\n", "is_batchnorm", "=", "is_batchnorm", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.cascadeFeatureFusion.forward": [[796, 808], ["torch.interpolate", "torch.interpolate", "torch.interpolate", "face_segmenter_network.cascadeFeatureFusion.low_classifier_conv", "face_segmenter_network.cascadeFeatureFusion.low_dilated_conv_bn", "face_segmenter_network.cascadeFeatureFusion.high_proj_conv_bn", "torch.relu", "torch.relu", "torch.relu", "face_segmenter_network.get_interp_size"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.get_interp_size"], ["", "def", "forward", "(", "self", ",", "x_low", ",", "x_high", ")", ":", "\n", "    ", "x_low_upsampled", "=", "F", ".", "interpolate", "(", "\n", "x_low", ",", "size", "=", "get_interp_size", "(", "x_low", ",", "z_factor", "=", "2", ")", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", "\n", ")", "\n", "\n", "low_cls", "=", "self", ".", "low_classifier_conv", "(", "x_low_upsampled", ")", "\n", "\n", "low_fm", "=", "self", ".", "low_dilated_conv_bn", "(", "x_low_upsampled", ")", "\n", "high_fm", "=", "self", ".", "high_proj_conv_bn", "(", "x_high", ")", "\n", "high_fused_fm", "=", "F", ".", "relu", "(", "low_fm", "+", "high_fm", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "high_fused_fm", ",", "low_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.UNet.__init__": [[858, 900], ["torch.Module.__init__", "face_segmenter_network.unetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "face_segmenter_network.unetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "face_segmenter_network.unetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "face_segmenter_network.unetConv2", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "face_segmenter_network.unetConv2", "face_segmenter_network.unetUp", "face_segmenter_network.unetUp", "face_segmenter_network.unetUp", "face_segmenter_network.unetUp", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "\n", "self", ",", "\n", "resolution", "=", "512", ",", "\n", "feature_scale", "=", "4", ",", "\n", "n_classes", "=", "15", ",", "\n", "is_deconv", "=", "True", ",", "\n", "in_channels", "=", "3", ",", "\n", "is_batchnorm", "=", "True", "\n", ")", ":", "\n", "    ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "is_deconv", "=", "is_deconv", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "is_batchnorm", "=", "is_batchnorm", "\n", "self", ".", "feature_scale", "=", "feature_scale", "\n", "\n", "filters", "=", "[", "64", ",", "128", ",", "256", ",", "512", ",", "1024", "]", "\n", "filters", "=", "[", "int", "(", "x", "/", "self", ".", "feature_scale", ")", "for", "x", "in", "filters", "]", "\n", "\n", "# downsampling", "\n", "self", ".", "conv1", "=", "unetConv2", "(", "self", ".", "in_channels", ",", "filters", "[", "0", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv2", "=", "unetConv2", "(", "filters", "[", "0", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv3", "=", "unetConv2", "(", "filters", "[", "1", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool3", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "conv4", "=", "unetConv2", "(", "filters", "[", "2", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "maxpool4", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ")", "\n", "\n", "self", ".", "center", "=", "unetConv2", "(", "filters", "[", "3", "]", ",", "filters", "[", "4", "]", ",", "self", ".", "is_batchnorm", ")", "\n", "\n", "# upsampling", "\n", "self", ".", "up_concat4", "=", "unetUp", "(", "filters", "[", "4", "]", ",", "filters", "[", "3", "]", ",", "self", ".", "is_deconv", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "up_concat3", "=", "unetUp", "(", "filters", "[", "3", "]", ",", "filters", "[", "2", "]", ",", "self", ".", "is_deconv", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "up_concat2", "=", "unetUp", "(", "filters", "[", "2", "]", ",", "filters", "[", "1", "]", ",", "self", ".", "is_deconv", ",", "self", ".", "is_batchnorm", ")", "\n", "self", ".", "up_concat1", "=", "unetUp", "(", "filters", "[", "1", "]", ",", "filters", "[", "0", "]", ",", "self", ".", "is_deconv", ",", "self", ".", "is_batchnorm", ")", "\n", "\n", "# final conv (without any concat)", "\n", "self", ".", "final", "=", "nn", ".", "Conv2d", "(", "filters", "[", "0", "]", ",", "n_classes", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.UNet.forward": [[901, 923], ["face_segmenter_network.UNet.conv1", "face_segmenter_network.UNet.maxpool1", "face_segmenter_network.UNet.conv2", "face_segmenter_network.UNet.maxpool2", "face_segmenter_network.UNet.conv3", "face_segmenter_network.UNet.maxpool3", "face_segmenter_network.UNet.conv4", "face_segmenter_network.UNet.maxpool4", "face_segmenter_network.UNet.center", "face_segmenter_network.UNet.up_concat4", "face_segmenter_network.UNet.up_concat3", "face_segmenter_network.UNet.up_concat2", "face_segmenter_network.UNet.up_concat1", "face_segmenter_network.UNet.final"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ")", ":", "\n", "    ", "conv1", "=", "self", ".", "conv1", "(", "inputs", ")", "\n", "maxpool1", "=", "self", ".", "maxpool1", "(", "conv1", ")", "\n", "\n", "conv2", "=", "self", ".", "conv2", "(", "maxpool1", ")", "\n", "maxpool2", "=", "self", ".", "maxpool2", "(", "conv2", ")", "\n", "\n", "conv3", "=", "self", ".", "conv3", "(", "maxpool2", ")", "\n", "maxpool3", "=", "self", ".", "maxpool3", "(", "conv3", ")", "\n", "\n", "conv4", "=", "self", ".", "conv4", "(", "maxpool3", ")", "\n", "maxpool4", "=", "self", ".", "maxpool4", "(", "conv4", ")", "\n", "\n", "center", "=", "self", ".", "center", "(", "maxpool4", ")", "\n", "up4", "=", "self", ".", "up_concat4", "(", "conv4", ",", "center", ")", "\n", "up3", "=", "self", ".", "up_concat3", "(", "conv3", ",", "up4", ")", "\n", "up2", "=", "self", ".", "up_concat2", "(", "conv2", ",", "up3", ")", "\n", "up1", "=", "self", ".", "up_concat1", "(", "conv1", ",", "up2", ")", "\n", "\n", "final", "=", "self", ".", "final", "(", "up1", ")", "\n", "\n", "return", "final", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.get_interp_size": [[810, 823], ["int", "int"], "function", ["None"], ["", "", "def", "get_interp_size", "(", "input", ",", "s_factor", "=", "1", ",", "z_factor", "=", "1", ")", ":", "# for caffe", "\n", "  ", "ori_h", ",", "ori_w", "=", "input", ".", "shape", "[", "2", ":", "]", "\n", "\n", "# shrink (s_factor >= 1)", "\n", "ori_h", "=", "(", "ori_h", "-", "1", ")", "/", "s_factor", "+", "1", "\n", "ori_w", "=", "(", "ori_w", "-", "1", ")", "/", "s_factor", "+", "1", "\n", "\n", "# zoom (z_factor >= 1)", "\n", "ori_h", "=", "ori_h", "+", "(", "ori_h", "-", "1", ")", "*", "(", "z_factor", "-", "1", ")", "\n", "ori_w", "=", "ori_w", "+", "(", "ori_w", "-", "1", ")", "*", "(", "z_factor", "-", "1", ")", "\n", "\n", "resize_shape", "=", "(", "int", "(", "ori_h", ")", ",", "int", "(", "ori_w", ")", ")", "\n", "return", "resize_shape", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.interp": [[825, 839], ["torch.zeros", "torch.zeros", "torch.zeros", "w.unsqueeze().repeat", "h.unsqueeze().repeat().transpose", "grid.unsqueeze().repeat.unsqueeze().repeat", "torch.grid_sample", "w.unsqueeze", "h.unsqueeze().repeat", "grid.unsqueeze().repeat.unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "h.unsqueeze"], "function", ["None"], ["", "def", "interp", "(", "input", ",", "output_size", ",", "mode", "=", "\"bilinear\"", ")", ":", "\n", "  ", "n", ",", "c", ",", "ih", ",", "iw", "=", "input", ".", "shape", "\n", "oh", ",", "ow", "=", "output_size", "\n", "\n", "# normalize to [-1, 1]", "\n", "h", "=", "torch", ".", "arange", "(", "0", ",", "oh", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", "if", "input", ".", "is_cuda", "else", "'cpu'", ")", "/", "(", "oh", "-", "1", ")", "*", "2", "-", "1", "\n", "w", "=", "torch", ".", "arange", "(", "0", ",", "ow", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", "if", "input", ".", "is_cuda", "else", "'cpu'", ")", "/", "(", "ow", "-", "1", ")", "*", "2", "-", "1", "\n", "\n", "grid", "=", "torch", ".", "zeros", "(", "oh", ",", "ow", ",", "2", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "'cuda'", "if", "input", ".", "is_cuda", "else", "'cpu'", ")", "\n", "grid", "[", ":", ",", ":", ",", "0", "]", "=", "w", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "oh", ",", "1", ")", "\n", "grid", "[", ":", ",", ":", ",", "1", "]", "=", "h", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "ow", ",", "1", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "grid", "=", "grid", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "n", ",", "1", ",", "1", ",", "1", ")", "# grid.shape: [n, oh, ow, 2]", "\n", "\n", "return", "F", ".", "grid_sample", "(", "input", ",", "grid", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_segmenter_network.get_upsampling_weight": [[841, 855], ["numpy.zeros", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "abs", "abs", "range", "range"], "function", ["None"], ["", "def", "get_upsampling_weight", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ")", ":", "\n", "  ", "\"\"\"Make a 2D bilinear kernel suitable for upsampling\"\"\"", "\n", "factor", "=", "(", "kernel_size", "+", "1", ")", "//", "2", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "    ", "center", "=", "factor", "-", "1", "\n", "", "else", ":", "\n", "    ", "center", "=", "factor", "-", "0.5", "\n", "", "og", "=", "np", ".", "ogrid", "[", ":", "kernel_size", ",", ":", "kernel_size", "]", "\n", "filt", "=", "(", "1", "-", "abs", "(", "og", "[", "0", "]", "-", "center", ")", "/", "factor", ")", "*", "(", "1", "-", "abs", "(", "og", "[", "1", "]", "-", "center", ")", "/", "factor", ")", "\n", "weight", "=", "np", ".", "zeros", "(", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "kernel_size", ")", ",", "\n", "dtype", "=", "np", ".", "float64", ")", "\n", "weight", "[", "range", "(", "in_channels", ")", ",", "range", "(", "out_channels", ")", ",", ":", ",", ":", "]", "=", "filt", "\n", "return", "torch", ".", "from_numpy", "(", "weight", ")", ".", "float", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.__init__": [[28, 76], ["super().__init__", "predictor_settings.PREDICTOR_POOL[].items", "getattr", "getattr", "getattr", "getattr().upper", "base_predictor.BasePredictor.build", "base_predictor.BasePredictor.load", "base_predictor.BasePredictor.net.eval().to", "setattr", "torch.cuda.is_available", "getattr", "base_predictor.BasePredictor.net.eval"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["def", "__init__", "(", "self", ",", "predictor_name", ")", ":", "\n", "    ", "\"\"\"Initializes with specific settings.\n\n    The predictor should be first registered in `predictor_settings.py` with\n    proper settings. Among them, `some attributes are necessary, including:\n\n    (1) weight_path: Path to the pre-trained weight. `None` means not specified\n                     and the model will download or locate the pre-trained\n                     weight automatically. (default: None)\n    (2) resolution: Resolution of the input image required by the predictor.\n                    `None` means not specified and the model will resize the\n                    input image automatically before inference. (default: None)\n    (3) image_channels: Number of channels of the input image required by the\n                        predictor. (default: 3)\n    (4) channel_order: Channel order of the input image required by the\n                       predictor. (default: `RGB`)\n\n    Args:\n      predictor_name: Name with which the predictor is registered.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictor_name", "=", "predictor_name", "\n", "\n", "# Parse settings.", "\n", "for", "key", ",", "val", "in", "predictor_settings", ".", "PREDICTOR_POOL", "[", "predictor_name", "]", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "", "self", ".", "use_cuda", "=", "predictor_settings", ".", "USE_CUDA", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "batch_size", "=", "predictor_settings", ".", "MAX_IMAGES_ON_DEVICE", "\n", "self", ".", "ram_size", "=", "predictor_settings", ".", "MAX_IMAGES_ON_RAM", "\n", "self", ".", "net", "=", "None", "\n", "self", ".", "run_device", "=", "'cuda'", "if", "self", ".", "use_cuda", "else", "'cpu'", "\n", "self", ".", "cpu_device", "=", "'cpu'", "\n", "\n", "# Check necessary settings.", "\n", "self", ".", "weight_path", "=", "getattr", "(", "self", ",", "'weight_path'", ",", "''", ")", "\n", "self", ".", "resolution", "=", "getattr", "(", "self", ",", "'resolution'", ",", "None", ")", "\n", "self", ".", "image_channels", "=", "getattr", "(", "self", ",", "'image_channels'", ",", "3", ")", "\n", "assert", "self", ".", "image_channels", "in", "[", "1", ",", "3", "]", "\n", "self", ".", "channel_order", "=", "getattr", "(", "self", ",", "'channel_order'", ",", "'RGB'", ")", ".", "upper", "(", ")", "\n", "assert", "self", ".", "channel_order", "in", "[", "'RGB'", ",", "'BGR'", "]", "\n", "\n", "# Build graph and load pre-trained weights.", "\n", "self", ".", "build", "(", ")", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Change to inference mode and GPU mode if needed.", "\n", "assert", "self", ".", "net", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.check_attr": [[77, 88], ["hasattr", "AttributeError"], "methods", ["None"], ["", "def", "check_attr", "(", "self", ",", "attr_name", ")", ":", "\n", "    ", "\"\"\"Checks the existence of a particular attribute.\n\n    Args:\n      attr_name: Name of the attribute to check.\n\n    Raises:\n      AttributeError: If the target attribute is missing.\n    \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "attr_name", ")", ":", "\n", "      ", "raise", "AttributeError", "(", "f'Field `{attr_name}` is missing for '", "\n", "f'generator in model `{self.model_name}`!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.build": [[90, 93], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "    ", "\"\"\"Builds the graph.\"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.load": [[94, 97], ["NotImplementedError"], "methods", ["None"], ["", "def", "load", "(", "self", ")", ":", "\n", "    ", "\"\"\"Loads pre-trained weights.\"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.to_tensor": [[98, 121], ["type", "isinstance", "torch.from_numpy().type.to", "isinstance", "torch.from_numpy().type", "ValueError", "torch.from_numpy"], "methods", ["None"], ["", "def", "to_tensor", "(", "self", ",", "array", ")", ":", "\n", "    ", "\"\"\"Converts a `numpy.ndarray` to `torch.Tensor` on running device.\n\n    Args:\n      array: The input array to convert.\n\n    Returns:\n      A `torch.Tensor` whose dtype is determined by that of the input array.\n\n    Raises:\n      ValueError: If the array is with neither `torch.Tensor` type nor\n        `numpy.ndarray` type.\n    \"\"\"", "\n", "dtype", "=", "type", "(", "array", ")", "\n", "if", "isinstance", "(", "array", ",", "torch", ".", "Tensor", ")", ":", "\n", "      ", "tensor", "=", "array", "\n", "", "elif", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "tensor_type", "=", "DTYPE_NAME_TO_TORCH_TENSOR_TYPE", "[", "array", ".", "dtype", ".", "name", "]", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", ".", "type", "(", "tensor_type", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Unsupported input type `{dtype}`!'", ")", "\n", "", "tensor", "=", "tensor", ".", "to", "(", "self", ".", "run_device", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.get_value": [[122, 141], ["type", "isinstance", "isinstance", "ValueError", "tensor.to().detach().numpy", "tensor.to().detach", "tensor.to"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "\"\"\"Gets value of a `torch.Tensor`.\n\n    Args:\n      tensor: The input tensor to get value from.\n\n    Returns:\n      A `numpy.ndarray`.\n\n    Raises:\n      ValueError: If the tensor is with neither `torch.Tensor` type or\n        `numpy.ndarray` type.\n    \"\"\"", "\n", "dtype", "=", "type", "(", "tensor", ")", "\n", "if", "isinstance", "(", "tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "      ", "return", "tensor", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "raise", "ValueError", "(", "f'Unsupported input type `{dtype}`!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.get_batch_inputs": [[142, 156], ["range"], "methods", ["None"], ["", "def", "get_batch_inputs", "(", "self", ",", "inputs", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets inputs within mini-batch.\n\n    This function yields at most `self.batch_size` inputs at a time.\n\n    Args:\n      inputs: Input data to form mini-batch.\n      batch_size: Batch size. If not specified, `self.batch_size` will be used.\n        (default: None)\n    \"\"\"", "\n", "total_num", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size", "or", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "0", ",", "total_num", ",", "batch_size", ")", ":", "\n", "      ", "yield", "inputs", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.batch_run": [[157, 210], ["base_predictor.BasePredictor.get_batch_inputs", "results.items", "base_predictor.BasePredictor.logger.warning", "run_fn", "isinstance", "numpy.concatenate", "run_fn.items", "isinstance", "ValueError", "isinstance", "ValueError", "results[].append", "results[].append", "type", "type"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs"], ["", "", "def", "batch_run", "(", "self", ",", "inputs", ",", "run_fn", ")", ":", "\n", "    ", "\"\"\"Runs model with mini-batch.\n\n    This function splits the inputs into mini-batches, run the model with each\n    mini-batch, and then concatenate the outputs from all mini-batches together.\n\n    NOTE: The output of `run_fn` can only be `numpy.ndarray` or a dictionary\n    whose values are all `numpy.ndarray`.\n\n    Args:\n      inputs: The input samples to run with.\n      run_fn: A callable function.\n\n    Returns:\n      Same type as the output of `run_fn`.\n\n    Raises:\n      ValueError: If the output type of `run_fn` is not supported.\n    \"\"\"", "\n", "if", "inputs", ".", "shape", "[", "0", "]", ">", "self", ".", "ram_size", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Number of inputs on RAM is larger than '", "\n", "f'{self.ram_size}. Please use '", "\n", "f'`self.get_batch_inputs()` to split the inputs! '", "\n", "f'Otherwise, it may encounter OOM problem!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "temp_key", "=", "'__temp_key__'", "\n", "for", "batch_inputs", "in", "self", ".", "get_batch_inputs", "(", "inputs", ")", ":", "\n", "      ", "batch_outputs", "=", "run_fn", "(", "batch_inputs", ")", "\n", "if", "isinstance", "(", "batch_outputs", ",", "dict", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "batch_outputs", ".", "items", "(", ")", ":", "\n", "          ", "if", "not", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Each item of the model output should be with '", "\n", "f'type `numpy.ndarray`, but type `{type(val)}` is '", "\n", "f'received for key `{key}`!'", ")", "\n", "", "if", "key", "not", "in", "results", ":", "\n", "            ", "results", "[", "key", "]", "=", "[", "val", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "", "elif", "isinstance", "(", "batch_outputs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "temp_key", "not", "in", "results", ":", "\n", "          ", "results", "[", "temp_key", "]", "=", "[", "batch_outputs", "]", "\n", "", "else", ":", "\n", "          ", "results", "[", "temp_key", "]", ".", "append", "(", "batch_outputs", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'The model output can only be with type '", "\n", "f'`numpy.ndarray`, or a dictionary of '", "\n", "f'`numpy.ndarray`, but type `{type(batch_outputs)}` '", "\n", "f'is received!'", ")", "\n", "\n", "", "", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "      ", "results", "[", "key", "]", "=", "np", ".", "concatenate", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "results", "if", "temp_key", "not", "in", "results", "else", "results", "[", "temp_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.preprocess": [[211, 267], ["isinstance", "ValueError", "ValueError", "ValueError", "numpy.tile", "ValueError", "isinstance", "isinstance", "ValueError", "len"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input images if needed.\n\n    This function assumes the input numpy array is with shape [batch_size,\n    height, width, channel]. Here, `channel = 3` for color image and\n    `channel = 1` for grayscale image. Then, the function will check the shape\n    of input images and adjust channel order.\n\n    NOTE: The input images are always assumed to be with type `np.uint8`, range\n    [0, 255], and channel order `RGB`.\n\n    Args:\n      images: The raw inputs with dtype `numpy.uint8`, range [0, 255], and\n        channel order `RGB`.\n\n    Returns:\n      The preprocessed images with dtype `numpy.uint8`, range [0, 255], and\n        channel order `self.channel_order`.\n\n    Raises:\n      ValueError: If the input `images` are not with type `numpy.ndarray` or not\n        with dtype `numpy.uint8` or not with shape [batch_size, height, width,\n        channel].\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "\n", "", "if", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "3", "]", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input should be with shape [batch_size, height, '", "\n", "f'width, channel], where channel equals to 1 or 3!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "==", "1", "and", "self", ".", "image_channels", "==", "3", ":", "\n", "      ", "images", "=", "np", ".", "tile", "(", "images", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ":", "\n", "      ", "raise", "ValueError", "(", "f'Number of channels of input image, which is '", "\n", "f'{images.shape[3]}, is not supported by the current '", "\n", "f'predictor, which requires {self.image_channels} '", "\n", "f'channels!'", ")", "\n", "", "if", "self", ".", "image_channels", "==", "3", "and", "self", ".", "channel_order", "==", "'BGR'", ":", "\n", "      ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "if", "self", ".", "resolution", "is", "not", "None", ":", "\n", "      ", "if", "isinstance", "(", "self", ".", "resolution", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "resolution", ")", "==", "2", "\n", "height", "=", "self", ".", "resolution", "[", "0", "]", "\n", "width", "=", "self", ".", "resolution", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "self", ".", "resolution", ",", "int", ")", "\n", "height", "=", "self", ".", "resolution", "\n", "width", "=", "self", ".", "resolution", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "!=", "height", "or", "images", ".", "shape", "[", "2", "]", "!=", "width", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input images should be with resolution [{height}, '", "\n", "f'{width}], but {images.shape[1:3]} is received!'", ")", "\n", "\n", "", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.predict": [[268, 281], ["NotImplementedError"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Predicts semantic scores from the input images.\n\n    NOTE: The images are assumed to have already been preprocessed.\n\n    Args:\n      images: Input images to predict semantics on.\n\n    Returns:\n      A dictionary whose values are raw outputs from the predictor. Keys of\n        the dictionary are usually the name of semantics.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.easy_predict": [[282, 285], ["base_predictor.BasePredictor.predict", "base_predictor.BasePredictor.preprocess"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.predict", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess"], ["", "def", "easy_predict", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps functions `preprocess()` and `predict()` together.\"\"\"", "\n", "return", "self", ".", "predict", "(", "self", ".", "preprocess", "(", "images", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.save": [[286, 296], ["NotImplementedError"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "predictions", ",", "save_dir", ")", ":", "\n", "    ", "\"\"\"Saves predictions to disk.\n\n    Each derived predictor should have its own saving format.\n\n    Args:\n      predictions: A dictionary of predictions.\n      save_dir: Directory to save the predictions.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.MulticlassFacePredictor.__init__": [[18, 22], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "face_predictor.FacePredictor"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "attr_names", "=", "CELEBA_ATTRS", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Ps", "=", "torch", ".", "nn", ".", "ModuleList", "(", "\n", "[", "FacePredictor", "(", "\"celebahq_\"", "+", "name", ")", "for", "name", "in", "attr_names", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.MulticlassFacePredictor.forward": [[23, 27], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "P", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "P", "x[].cuda", "range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "split", "=", "True", ")", ":", "\n", "    ", "return", "torch", ".", "cat", "(", "[", "P", "(", "x", ")", "if", "not", "split", "else", "torch", ".", "cat", "(", "[", "P", "(", "x", "[", "i", ":", "i", "+", "1", "]", ".", "cuda", "(", ")", ")", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "for", "P", "in", "self", ".", "Ps", "]", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.__init__": [[37, 41], ["base_predictor.BasePredictor.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "predictor_name", ")", ":", "\n", "    ", "self", ".", "attribute_name", "=", "predictor_name", "[", "len", "(", "'celebahq_'", ")", ":", "]", "\n", "self", ".", "input_size", "=", "256", "\n", "super", "(", ")", ".", "__init__", "(", "predictor_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.build": [[42, 44], ["face_predictor_network.FaceAttributeNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "net", "=", "FaceAttributeNet", "(", "resolution", "=", "self", ".", "input_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.load": [[45, 49], ["os.path.isfile", "face_predictor.FacePredictor.net.load_state_dict", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "# Load pre-trained weights.", "\n", "    ", "assert", "os", ".", "path", ".", "isfile", "(", "self", ".", "weight_path", ")", "\n", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "weight_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor._predict": [[50, 83], ["face_predictor.FacePredictor.to_tensor", "torch.interpolate.permute", "torch.interpolate", "torch.interpolate", "face_predictor.FacePredictor.net", "isinstance", "ValueError", "ValueError", "ValueError", "images.astype", "face_predictor.FacePredictor.get_value", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_predict", "(", "self", ",", "images", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "\n", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with shape [batch_size, height '", "\n", "f'width, channel], where `batch_size` no larger than '", "\n", "f'{self.batch_size}, and `channel` equals to '", "\n", "f'{self.image_channels}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "self", ".", "to_tensor", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "xs", "=", "xs", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "xs", "=", "F", ".", "interpolate", "(", "xs", ",", "\n", "size", "=", "(", "self", ".", "input_size", ",", "self", ".", "input_size", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "xs", "=", "xs", "/", "127.5", "-", "1.0", "\n", "\n", "attribute_scores", "=", "self", ".", "net", "(", "xs", ")", "\n", "assert", "attribute_scores", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "\n", "results", "=", "{", "\n", "'score'", ":", "self", ".", "get_value", "(", "attribute_scores", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.__call__": [[84, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.interpolate.size", "torch.interpolate", "torch.interpolate", "face_predictor.FacePredictor.net", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "    ", "\"\"\"\n    Expect input in (-1, 1)\n    \"\"\"", "\n", "if", "x", ".", "size", "(", "3", ")", "!=", "self", ".", "input_size", ":", "\n", "      ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "self", ".", "input_size", ",", "self", ".", "input_size", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "", "return", "torch", ".", "cat", "(", "[", "self", ".", "net", "(", "x", "[", "i", ":", "i", "+", "1", "]", ")", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.predict": [[95, 97], ["face_predictor.FacePredictor.batch_run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run"], ["", "def", "predict", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "self", ".", "_predict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save": [[98, 106], ["numpy.concatenate", "numpy.save", "os.path.isdir", "os.makedirs", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "save", "(", "self", ",", "predictions", ",", "save_dir", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_dir", ")", ":", "\n", "      ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "\n", "", "assert", "'score'", "in", "predictions", "\n", "scores", "=", "np", ".", "concatenate", "(", "predictions", "[", "'score'", "]", ",", "axis", "=", "0", ")", "\n", "assert", "scores", ".", "ndim", "==", "2", "and", "scores", ".", "shape", "[", "1", "]", "==", "1", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "f'{self.attribute_name}.npy'", ")", ",", "scores", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.formal_name": [[16, 24], ["zip", "type", "name.replace.replace", "layer_plot.formal_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["def", "formal_name", "(", "name", ")", ":", "\n", "  ", "if", "type", "(", "name", ")", "is", "list", ":", "\n", "    ", "return", "[", "formal_name", "(", "n", ")", "for", "n", "in", "name", "]", "\n", "", "finds", "=", "[", "\"stylegan\"", ",", "\"pggan\"", ",", "\"bedroom\"", ",", "\"church\"", ",", "\"celebahq\"", ",", "\"ffhq\"", ",", "\"_\"", "]", "\n", "subs", "=", "[", "\"StyleGAN\"", ",", "\"PGGAN\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", ",", "\"\"", "]", "\n", "for", "find", ",", "sub", "in", "zip", "(", "finds", ",", "subs", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "find", ",", "sub", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.put_text": [[25, 34], ["len", "cv2.putText", "cv2.getTextSize", "int", "int"], "function", ["None"], ["", "def", "put_text", "(", "img", ",", "text", ",", "pos", ")", ":", "\n", "  ", "N_text", "=", "len", "(", "text", ")", "\n", "textsize", "=", "cv2", ".", "getTextSize", "(", "text", ",", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "1.2", ",", "1", ")", "[", "0", "]", "\n", "pos", "=", "(", "\n", "pos", "[", "0", "]", "-", "int", "(", "textsize", "[", "0", "]", "//", "2", ")", ",", "\n", "pos", "[", "1", "]", "+", "int", "(", "textsize", "[", "1", "]", "//", "2", ")", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "text", ",", "pos", ",", "\n", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "1.2", ",", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.get_classes": [[35, 45], ["numpy.array", "np.array.argsort", "names.tolist"], "function", ["None"], ["", "def", "get_classes", "(", "l", ",", "start", "=", "0", ")", ":", "\n", "    ", "x", "=", "np", ".", "array", "(", "l", ")", "\n", "y", "=", "x", ".", "argsort", "(", ")", "\n", "k", "=", "0", "\n", "while", "x", "[", "y", "[", "k", "]", "]", "<", "1e-3", ":", "\n", "        ", "k", "+=", "1", "\n", "", "y", "=", "y", "[", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "# all classes are the same", "\n", "names", "=", "label_list", "[", "y", "-", "1", "+", "start", "]", "\n", "return", "x", "[", "y", "]", ",", "names", ".", "tolist", "(", ")", ",", "y", "+", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.get_text": [[46, 54], ["layer_plot.get_classes", "s.append", "s.extend", "zip"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.get_classes"], ["", "def", "get_text", "(", "gt", ",", "ct", ")", ":", "\n", "    ", "s", "=", "[", "]", "\n", "vals", ",", "names", ",", "cats", "=", "get_classes", "(", "ct", "[", "\"IoU\"", "]", ")", "\n", "iou", "=", "gt", "[", "\"mIoU\"", "]", "\n", "s", ".", "append", "(", "[", "f\"mIoU {iou:.3f}\"", ",", "high_contrast", "[", "0", "]", "]", ")", "\n", "s", ".", "extend", "(", "[", "[", "f\"{name} {val:.3f}\"", ",", "high_contrast", "[", "cat", "]", "]", "\n", "for", "cat", ",", "name", ",", "val", "in", "zip", "(", "cats", ",", "names", ",", "vals", ")", "]", ")", "\n", "return", "s", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.process": [[55, 60], ["torch.cat", "torch.cat", "torch.interpolate", "torchvision.utils.torch2numpy().transpose", "torchvision.utils.torch2numpy"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy"], ["", "def", "process", "(", "res", ")", ":", "\n", "    ", "res", "=", "torch", ".", "cat", "(", "res", ")", "\n", "res", "=", "F", ".", "interpolate", "(", "res", ",", "256", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "return", "utils", ".", "torch2numpy", "(", "res", "*", "255", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.layer_plot.get_result_G": [[62, 88], ["hasattr", "P", "lib.visualizer.segviz_numpy", "SE", "enumerate", "text_set.append", "text_set.append", "image_set.append", "image_set.append", "G.truncation", "G.synthesis", "G", "P.cpu", "lib.op.bu().argmax", "lib.visualizer.segviz_numpy", "image_set.append", "text_set.append", "layer_plot.formal_name", "G.mapping", "est_label[].cpu", "lib.op.torch2image", "lib.op.bu", "lib.op.bu"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "get_result_G", "(", "G_name", ",", "z", ")", ":", "\n", "  ", "G", "=", "Gs", "[", "G_name", "]", "\n", "P", "=", "Ps", "[", "G_name", "]", "\n", "if", "hasattr", "(", "G", ",", "\"truncation\"", ")", ":", "\n", "    ", "wp", "=", "G", ".", "truncation", "(", "G", ".", "mapping", "(", "z", ")", ")", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "image", ",", "feature", "=", "G", "(", "z", ",", "generate_feature", "=", "True", ")", "\n", "", "label", "=", "P", "(", "image", ",", "size", "=", "256", ")", "\n", "label_viz", "=", "segviz_numpy", "(", "label", ".", "cpu", "(", ")", ")", "\n", "image_set", "=", "[", "]", "\n", "text_set", "=", "[", "]", "\n", "SE", "=", "viz_models", "[", "G_name", "]", "\n", "segs", "=", "SE", "(", "feature", ",", "size", "=", "label", ".", "shape", "[", "2", "]", ")", "\n", "for", "i", ",", "seg", "in", "enumerate", "(", "segs", ")", ":", "\n", "    ", "est_label", "=", "bu", "(", "seg", ",", "256", ")", ".", "argmax", "(", "1", ")", "\n", "est_label_viz", "=", "segviz_numpy", "(", "est_label", "[", "0", "]", ".", "cpu", "(", ")", ")", "\n", "image_set", ".", "append", "(", "est_label_viz", ")", "\n", "text_set", ".", "append", "(", "f\"{i}\"", ")", "\n", "", "text_set", "[", "-", "1", "]", "=", "\"LSE\"", "\n", "text_set", ".", "append", "(", "formal_name", "(", "G_name", ")", ")", "\n", "is_face", "=", "\"ffhq\"", "in", "G_name", "or", "\"celebahq\"", "in", "G_name", "\n", "text_set", ".", "append", "(", "\"UNet\"", "if", "is_face", "else", "\"DeeplabV3\"", ")", "\n", "image_set", ".", "append", "(", "torch2image", "(", "bu", "(", "image", ",", "256", ")", ")", "[", "0", "]", ")", "\n", "image_set", ".", "append", "(", "label_viz", ")", "\n", "return", "image_set", ",", "text_set", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name": [[13, 21], ["zip", "type", "name.replace.replace", "SE_eval.formal_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["def", "formal_name", "(", "name", ")", ":", "\n", "  ", "if", "type", "(", "name", ")", "is", "list", ":", "\n", "    ", "return", "[", "formal_name", "(", "n", ")", "for", "n", "in", "name", "]", "\n", "", "finds", "=", "[", "\"stylegan\"", ",", "\"pggan\"", ",", "\"bedroom\"", ",", "\"Church\"", ",", "\"celebahq\"", ",", "\"ffhq\"", "]", "\n", "subs", "=", "[", "\"StyleGAN\"", ",", "\"PGGAN\"", ",", "\"LSUN-Bedroom\"", ",", "\"LSUN-Church\"", ",", "\"CelebAHQ\"", ",", "\"FFHQ\"", "]", "\n", "for", "find", ",", "sub", "in", "zip", "(", "finds", ",", "subs", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "find", ",", "sub", ")", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.compare_archs.all_methods": [[12, 47], ["enumerate_names", "enumerate_names", "enumerate_args", "enumerate_args", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args"], ["def", "all_methods", "(", ")", ":", "\n", "  ", "FGs", "=", "[", "\n", "\"CelebAHQ\"", ",", "\"CelebAHQ\"", ",", "\"FFHQ\"", ",", "\n", "\"Bedroom\"", ",", "\"Bedroom\"", ",", "\"Bedroom\"", ",", "\n", "\"Church\"", ",", "\"Church\"", ",", "\"Church\"", "]", "\n", "methods", "=", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", "\n", "loss_types", "=", "[", "\"F\"", "]", "\n", "lrs", "=", "[", "\"0.001\"", "]", "\n", "lw_types", "=", "[", "\"SP\"", "]", "\n", "ls", "=", "[", "\"Trunc\"", "]", "#[\"Tmixed\", \"Ttrunc\"]", "\n", "els", "=", "[", "\"Etrunc\"", "]", "#[\"Emixed\", \"Etrunc\"]", "\n", "row_groups", "=", "[", "FGs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_names", "=", "enumerate_names", "(", "groups", "=", "row_groups", ")", "\n", "col_names", "=", "enumerate_names", "(", "groups", "=", "col_groups", ")", "\n", "\n", "Gs", "=", "[", "\n", "\"pggan_celebahq\"", ",", "\"stylegan_celebahq\"", ",", "\"stylegan2_ffhq\"", ",", "\n", "\"pggan_bedroom\"", ",", "\"stylegan_bedroom\"", ",", "\"stylegan2_bedroom\"", ",", "\n", "\"pggan_church\"", ",", "\"stylegan_church\"", ",", "\"stylegan2_church\"", "]", "\n", "loss_types", "=", "[", "\"lfocal\"", "]", "\n", "lrs", "=", "[", "\"lr0.001\"", "]", "\n", "lw_types", "=", "[", "\"lwsoftplus\"", "]", "#, \"lwnone\"]", "\n", "ls", "=", "[", "\"lstrunc-wp\"", "]", "#[\"lsnotrunc-mixwp\", \"lstrunc-wp\"]", "\n", "els", "=", "[", "\"elstrunc-wp\"", "]", "#[\"elsnotrunc-mixwp\", \"elstrunc-wp\"]", "\n", "row_groups", "=", "[", "Gs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_args", "=", "enumerate_args", "(", "groups", "=", "row_groups", ")", "\n", "col_args", "=", "enumerate_args", "(", "groups", "=", "col_groups", ")", "\n", "for", "row_name", ",", "row_arg", "in", "zip", "(", "row_names", ",", "row_args", ")", ":", "\n", "    ", "for", "col_name", ",", "col_arg", "in", "zip", "(", "col_names", ",", "col_args", ")", ":", "\n", "      ", "row", "=", "\"-\"", ".", "join", "(", "row_name", ")", "\n", "col", "=", "\"-\"", ".", "join", "(", "col_name", ")", "\n", "arg", "=", "\"_\"", ".", "join", "(", "row_arg", "+", "col_arg", ")", "\n", "yield", "row", ",", "col", ",", "arg", "#row_arg, col_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.compare_archs.LSE_table": [[49, 78], ["enumerate_names", "enumerate_names", "enumerate_args", "enumerate_args", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args"], ["", "", "", "def", "LSE_table", "(", ")", ":", "\n", "  ", "Gs", "=", "[", "\"SB\"", ",", "\"S2B\"", "]", "\n", "methods", "=", "[", "\"NSE-1\"", "]", "\n", "loss_types", "=", "[", "\"N\"", ",", "\"F\"", "]", "\n", "lrs", "=", "[", "\"0.001\"", "]", "#[\"0.01\", \"0.001\"]", "\n", "lw_types", "=", "[", "\"SP\"", ",", "\"None\"", "]", "\n", "ls", "=", "[", "\"Trunc\"", "]", "#[\"Tmixed\", \"Ttrunc\"]", "\n", "els", "=", "[", "\"Etrunc\"", "]", "#[\"Emixed\", \"Etrunc\"]", "\n", "row_groups", "=", "[", "Gs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_names", "=", "enumerate_names", "(", "groups", "=", "row_groups", ")", "\n", "col_names", "=", "enumerate_names", "(", "groups", "=", "col_groups", ")", "\n", "\n", "Gs", "=", "[", "\"stylegan_bedroom\"", ",", "\"stylegan2_bedroom\"", "]", "\n", "loss_types", "=", "[", "\"lnormal\"", ",", "\"lfocal\"", "]", "\n", "lrs", "=", "[", "\"lr0.001\"", "]", "#[\"0.01\", \"0.001\"]", "\n", "lw_types", "=", "[", "\"lwsoftplus\"", ",", "\"lwnone\"", "]", "\n", "ls", "=", "[", "\"lstrunc-wp\"", "]", "#[\"lsnotrunc-mixwp\", \"lstrunc-wp\"]", "\n", "els", "=", "[", "\"elstrunc-wp\"", "]", "#[\"elsnotrunc-mixwp\", \"elstrunc-wp\"]", "\n", "row_groups", "=", "[", "Gs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_args", "=", "enumerate_args", "(", "groups", "=", "row_groups", ")", "\n", "col_args", "=", "enumerate_args", "(", "groups", "=", "col_groups", ")", "\n", "for", "row_name", ",", "row_arg", "in", "zip", "(", "row_names", ",", "row_args", ")", ":", "\n", "    ", "for", "col_name", ",", "col_arg", "in", "zip", "(", "col_names", ",", "col_args", ")", ":", "\n", "      ", "row", "=", "\"-\"", ".", "join", "(", "row_name", ")", "\n", "col", "=", "\"-\"", ".", "join", "(", "col_name", ")", "\n", "arg", "=", "\"_\"", ".", "join", "(", "row_arg", "+", "col_arg", ")", "\n", "yield", "row", ",", "col", ",", "arg", "#row_arg, col_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.compare_archs.get_table": [[80, 96], ["compare_archs.all_methods", "str_table_single", "open", "f.write", "os.path.exists", "print", "evaluate.read_results", "str_latex_table"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.compare_archs.all_methods", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.fewshot_compare.str_table_single", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.read_results", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.str_latex_table"], ["", "", "", "def", "get_table", "(", "args", ")", ":", "\n", "  ", "dic", "=", "{", "}", "\n", "for", "row_name", ",", "col_name", ",", "arg", "in", "all_methods", "(", ")", ":", "\n", "    ", "if", "row_name", "not", "in", "dic", ":", "\n", "      ", "dic", "[", "row_name", "]", "=", "{", "}", "\n", "", "fpath", "=", "f\"{args.dir}/{arg}.txt\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fpath", ")", ":", "\n", "      ", "print", "(", "f\"=> {fpath} not found\"", ")", "\n", "dic", "[", "row_name", "]", "[", "col_name", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "mIoU", ",", "cIoUs", "=", "read_results", "(", "fpath", ")", "\n", "dic", "[", "row_name", "]", "[", "col_name", "]", "=", "mIoU", "\n", "\n", "", "", "strs", "=", "str_table_single", "(", "dic", ")", "\n", "with", "open", "(", "f\"results/tex/{args.name}.tex\"", ",", "\"w\"", ")", "as", "f", ":", "\n", "    ", "f", ".", "write", "(", "str_latex_table", "(", "strs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.scs_compare.get_table_suit": [[9, 16], ["range", "params.append"], "function", ["None"], ["def", "get_table_suit", "(", ")", ":", "\n", "  ", "params", "=", "[", "]", "\n", "for", "G", "in", "[", "\"stylegan2_church\"", ",", "\"stylegan2_bedroom\"", ",", "\"stylegan2_ffhq\"", "]", ":", "\n", "    ", "for", "n", "in", "[", "1", ",", "8", "]", ":", "#[1, 4, 8, 16]:", "\n", "      ", "for", "r", "in", "range", "(", "5", ")", ":", "\n", "        ", "params", ".", "append", "(", "(", "G", ",", "n", ",", "r", ")", ")", "\n", "", "", "", "return", "params", "# G, n, r", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.scs_compare.str_table_single": [[18, 30], ["list", "dic[].keys", "dic.keys", "strs.append", "lib.misc.formal_name", "max", "s.append"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["", "def", "str_table_single", "(", "dic", ",", "indicate_best", "=", "True", ",", "T", "=", "0", ")", ":", "\n", "  ", "Gs", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "strs", "=", "[", "[", "\"\"", "]", "+", "formal_name", "(", "Gs", ")", "]", "\n", "for", "n", "in", "dic", "[", "Gs", "[", "0", "]", "]", ".", "keys", "(", ")", ":", "\n", "    ", "s", "=", "[", "f\"{n}\"", "]", "\n", "for", "G", "in", "Gs", ":", "\n", "      ", "mini", ",", "mean", ",", "maxi", "=", "dic", "[", "G", "]", "[", "n", "]", "\n", "delta", "=", "max", "(", "mean", "-", "mini", ",", "maxi", "-", "mean", ")", "\n", "item_str", "=", "f\"{mean*100:.1f} $\\\\pm$ {delta*100:.1f}\"", "\n", "s", ".", "append", "(", "item_str", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.train_evaluation.get_SE_names": [[9, 19], ["None"], "function", ["None"], ["def", "get_SE_names", "(", "name", ")", ":", "\n", "  ", "Gs", "=", "[", "\"pggan\"", ",", "\"stylegan\"", ",", "\"stylegan2\"", "]", "\n", "Ds", "=", "[", "name", "]", "#[\"face\", \"bedroom\", \"church\"]", "\n", "SEs", "=", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", "\n", "for", "G", "in", "Gs", ":", "\n", "    ", "for", "D", "in", "Ds", ":", "\n", "      ", "for", "SE", "in", "SEs", ":", "\n", "        ", "if", "D", "==", "\"face\"", ":", "\n", "          ", "D", "=", "\"ffhq\"", "if", "G", "==", "\"stylegan2\"", "else", "\"celebahq\"", "\n", "", "yield", "f\"{G}_{D}_{SE}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.fewshot_scs.eval_single": [[22, 75], ["lib.misc.listkey_convert", "manipulation.scs.read_labels", "print", "torch.load", "print", "eval_file.replace", "os.path.exists", "tqdm.tqdm", "torch.cat", "torch.cat", "sample_labels.view.view", "lib.op.bu", "read_results", "range", "torch.stack", "lib.op.bu().unsqueeze", "lib.op.bu().view().cpu", "torch.cat", "torchvision.make_grid", "eval_file.replace", "torchvision.save_image", "aggregate_iou", "write_results", "torch.no_grad", "G.synthesis", "sample_labels.view.append", "torch.cat.append", "torch.cat.view", "vutils.make_grid.unsqueeze", "evaluate_predictions", "wp[].cuda", "P().cpu", "lib.visualizer.segviz_torch", "lib.op.bu", "lib.op.bu().view", "lib.op.bu.cpu", "P", "lib.op.bu().cpu", "lib.op.bu", "lib.op.bu"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.listkey_convert", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.scs.read_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.read_results", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.aggregate_iou", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.write_results", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.evaluate_predictions", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_torch", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["def", "eval_single", "(", "Gs", ",", "Ps", ",", "eval_file", ")", ":", "\n", "  ", "G_name", "=", "listkey_convert", "(", "eval_file", ",", "\n", "[", "\"stylegan2_ffhq\"", ",", "\"stylegan2_bedroom\"", ",", "\"stylegan2_church\"", "]", ")", "\n", "\n", "G", "=", "Gs", "[", "G_name", "]", "\n", "P", "=", "Ps", "[", "G_name", "]", "\n", "\n", "target_labels", "=", "read_labels", "(", "G_name", ",", "G", ",", "P", ")", "\n", "size", "=", "target_labels", ".", "shape", "[", "2", "]", "\n", "\n", "print", "(", "f\"=> Loading from {eval_file}\"", ")", "\n", "z", ",", "wp", "=", "torch", ".", "load", "(", "eval_file", ",", "map_location", "=", "'cpu'", ")", "\n", "print", "(", "z", ".", "shape", ",", "wp", ".", "shape", ",", "target_labels", ".", "shape", ")", "\n", "N", ",", "M", "=", "z", ".", "shape", "[", "0", "]", "//", "10", ",", "10", "# 10 repeats", "\n", "N_show", "=", "4", "\n", "\n", "res_file", "=", "eval_file", ".", "replace", "(", "\".pth\"", ",", "\".txt\"", ")", "\n", "is_gen", "=", "True", "#args.generate_image == \"1\" ", "\n", "is_eval", "=", "not", "os", ".", "path", ".", "exists", "(", "res_file", ")", "\n", "\n", "if", "is_gen", "or", "is_eval", ":", "\n", "    ", "images", "=", "[", "]", "\n", "sample_labels", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "wp", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "      ", "if", "not", "is_eval", "and", "i", ">=", "N_show", "*", "M", ":", "\n", "        ", "break", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "image", "=", "G", ".", "synthesis", "(", "wp", "[", "i", ":", "i", "+", "1", "]", ".", "cuda", "(", ")", ")", "\n", "sample_labels", ".", "append", "(", "P", "(", "image", ",", "size", "=", "size", ")", ".", "cpu", "(", ")", ")", "\n", "", "if", "i", "<", "N_show", "*", "M", ":", "\n", "        ", "images", ".", "append", "(", "(", "bu", "(", "image", ",", "size", ")", ".", "cpu", "(", ")", "+", "1", ")", "/", "2", ")", "\n", "", "", "images", "=", "torch", ".", "cat", "(", "images", ")", "\n", "sample_labels", "=", "torch", ".", "cat", "(", "sample_labels", ")", "\n", "sample_labels", "=", "sample_labels", ".", "view", "(", "\n", "-", "1", ",", "M", ",", "*", "sample_labels", ".", "shape", "[", "1", ":", "]", ")", "\n", "target_label_viz", "=", "bu", "(", "torch", ".", "stack", "(", "[", "\n", "segviz_torch", "(", "x", ")", "for", "x", "in", "target_labels", "[", ":", "N_show", "]", "]", ")", ",", "size", ")", "\n", "if", "is_gen", ":", "\n", "      ", "show_labels", "=", "bu", "(", "target_label_viz", ".", "cpu", "(", ")", ",", "256", ")", ".", "unsqueeze", "(", "1", ")", "\n", "show_images", "=", "bu", "(", "images", ",", "256", ")", ".", "view", "(", "N_show", ",", "M", ",", "3", ",", "256", ",", "256", ")", ".", "cpu", "(", ")", "\n", "all_images", "=", "torch", ".", "cat", "(", "[", "show_labels", ",", "show_images", "]", ",", "1", ")", "\n", "disp_image", "=", "vutils", ".", "make_grid", "(", "all_images", ".", "view", "(", "\n", "-", "1", ",", "*", "all_images", ".", "shape", "[", "2", ":", "]", ")", ",", "\n", "nrow", "=", "M", "+", "1", ",", "padding", "=", "10", ",", "pad_value", "=", "1", ")", "\n", "fpath", "=", "eval_file", ".", "replace", "(", "\".pth\"", ",", "\".pdf\"", ")", "\n", "vutils", ".", "save_image", "(", "disp_image", ".", "unsqueeze", "(", "0", ")", ",", "fpath", ")", "\n", "\n", "", "if", "is_eval", ":", "\n", "      ", "mIoU", ",", "c_ious", "=", "aggregate_iou", "(", "evaluate_predictions", "(", "\n", "target_labels", ",", "sample_labels", ")", ")", "\n", "write_results", "(", "res_file", ",", "mIoU", ",", "c_ious", ")", "\n", "", "", "else", ":", "\n", "    ", "mIoU", ",", "c_iou", "=", "read_results", "(", "res_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.category_selection.get_table_suit": [[14, 44], ["enumerate_names", "enumerate_names", "enumerate_args", "enumerate_args", "zip", "zip", "formal_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.enumerate_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["def", "get_table_suit", "(", "G_name", ",", "ds", ")", ":", "\n", "  ", "ds_name", "=", "\"Bedroom\"", "if", "ds", "==", "\"bedroom\"", "else", "\"Church\"", "\n", "FGs", "=", "[", "formal_name", "(", "G_name", ")", "+", "\"-\"", "+", "ds_name", "]", "\n", "methods", "=", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", "\n", "loss_types", "=", "[", "\"N\"", "]", "\n", "lrs", "=", "[", "\"0.001\"", "]", "\n", "lw_types", "=", "[", "\"SP\"", "]", "\n", "ls", "=", "[", "\"Trunc\"", "]", "#[\"Tmixed\", \"Ttrunc\"]", "\n", "els", "=", "[", "\"Etrunc\"", "]", "#[\"Emixed\", \"Etrunc\"]", "\n", "row_groups", "=", "[", "FGs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_names", "=", "enumerate_names", "(", "groups", "=", "row_groups", ")", "\n", "col_names", "=", "enumerate_names", "(", "groups", "=", "col_groups", ")", "\n", "\n", "Gs", "=", "[", "G_name", "+", "\"_\"", "+", "ds", "]", "\n", "loss_types", "=", "[", "\"lnormal\"", "]", "\n", "lrs", "=", "[", "\"lr0.001\"", "]", "\n", "lw_types", "=", "[", "\"lwsoftplus\"", "]", "#, \"lwnone\"]", "\n", "ls", "=", "[", "\"lstrunc-wp\"", "]", "#[\"lsnotrunc-mixwp\", \"lstrunc-wp\"]", "\n", "els", "=", "[", "\"elstrunc-wp\"", "]", "#[\"elsnotrunc-mixwp\", \"elstrunc-wp\"]", "\n", "row_groups", "=", "[", "Gs", ",", "methods", ",", "loss_types", ",", "ls", "]", "\n", "col_groups", "=", "[", "lw_types", ",", "lrs", ",", "els", "]", "\n", "row_args", "=", "enumerate_args", "(", "groups", "=", "row_groups", ")", "\n", "col_args", "=", "enumerate_args", "(", "groups", "=", "col_groups", ")", "\n", "for", "row_name", ",", "row_arg", "in", "zip", "(", "row_names", ",", "row_args", ")", ":", "\n", "    ", "for", "col_name", ",", "col_arg", "in", "zip", "(", "col_names", ",", "col_args", ")", ":", "\n", "      ", "row", "=", "\"-\"", ".", "join", "(", "row_name", ")", "\n", "col", "=", "\"-\"", ".", "join", "(", "col_name", ")", "\n", "arg", "=", "\"_\"", ".", "join", "(", "row_arg", "+", "col_arg", ")", "\n", "yield", "row", ",", "col", ",", "arg", "#row_arg, col_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.category_selection.get_class_table": [[46, 65], ["collections.OrderedDict", "category_selection.get_table_suit", "collections.OrderedDict", "os.path.exists", "print", "evaluate.read_results", "range", "len", "float", "cious.append", "clabels.append", "float"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.category_selection.get_table_suit", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.None.evaluate.read_results"], ["", "", "", "def", "get_class_table", "(", "data_dir", ",", "G_name", ",", "ds", ")", ":", "\n", "  ", "dic", "=", "OrderedDict", "(", ")", "\n", "for", "row_name", ",", "col_name", ",", "arg", "in", "get_table_suit", "(", "G_name", ",", "ds", ")", ":", "\n", "    ", "if", "row_name", "not", "in", "dic", ":", "\n", "      ", "dic", "[", "row_name", "]", "=", "OrderedDict", "(", ")", "\n", "", "fpath", "=", "f\"{data_dir}/{arg}.txt\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "fpath", ")", ":", "\n", "      ", "print", "(", "f\"=> {fpath} not found\"", ")", "\n", "dic", "[", "row_name", "]", "[", "col_name", "]", "=", "-", "1", "\n", "", "else", ":", "\n", "      ", "mIoU", ",", "cIoUs", "=", "read_results", "(", "fpath", ")", "\n", "clabels", "=", "[", "]", "\n", "cious", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cIoUs", ")", ")", ":", "\n", "        ", "if", "float", "(", "cIoUs", "[", "i", "]", ")", ">", "0.1", ":", "\n", "          ", "cious", ".", "append", "(", "float", "(", "cIoUs", "[", "i", "]", ")", ")", "\n", "clabels", ".", "append", "(", "labels", "[", "i", "]", ")", "\n", "", "", "dic", "[", "row_name", "]", "[", "col_name", "]", "=", "cIoUs", "\n", "", "", "return", "dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.category_selection.get_common_labels": [[67, 79], ["set", "dic.keys", "list", "common_label_indice.sort", "dic[].keys", "labels.index", "range", "len", "list.add"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.views.index"], ["", "def", "get_common_labels", "(", "dic", ")", ":", "\n", "  ", "common_labels", "=", "set", "(", ")", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "cious", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "cious", ")", ")", ":", "\n", "        ", "if", "cious", "[", "i", "]", ">", "0.1", ":", "\n", "          ", "common_labels", ".", "add", "(", "labels", "[", "i", "]", ")", "\n", "", "", "", "", "common_labels", "=", "list", "(", "common_labels", ")", "\n", "common_label_indice", "=", "[", "labels", ".", "index", "(", "n", ")", "for", "n", "in", "common_labels", "]", "\n", "common_label_indice", ".", "sort", "(", ")", "\n", "return", "common_label_indice", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.fewshot_compare.invert_dic": [[10, 18], ["dic.keys", "dic[].keys"], "function", ["None"], ["def", "invert_dic", "(", "dic", ")", ":", "\n", "  ", "idic", "=", "{", "}", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "if", "k2", "not", "in", "idic", ":", "\n", "        ", "idic", "[", "k2", "]", "=", "{", "}", "\n", "", "idic", "[", "k2", "]", "[", "k1", "]", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n", "", "", "return", "idic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.fewshot_compare.str_table_single_multicol": [[20, 41], ["list", "list", "dic.keys", "dic[].keys", "strs.append", "s.append", "s.append"], "function", ["None"], ["", "def", "str_table_single_multicol", "(", "dic", ",", "indicate_best", "=", "True", ")", ":", "\n", "  ", "row_names", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "col_names", "=", "list", "(", "dic", "[", "row_names", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "\n", "show_names", "=", "[", "\"\\\\multicolumn{2}{c|}{\"", "+", "c", "+", "\"}\"", "\n", "for", "c", "in", "col_names", "]", "\n", "strs", "=", "[", "show_names", "]", "\n", "for", "row_name", "in", "row_names", ":", "\n", "    ", "s", "=", "[", "row_name", "]", "\n", "for", "col_name", "in", "col_names", ":", "\n", "      ", "midv", ",", "delta", ",", "full", "=", "dic", "[", "row_name", "]", "[", "col_name", "]", "\n", "midv", "*=", "100", "\n", "delta", "*=", "100", "\n", "item_str", "=", "f\"{midv:.1f} $\\\\pm$ {delta:.1f}\"", "\n", "s", ".", "append", "(", "item_str", ")", "\n", "\n", "p", "=", "midv", "/", "full", "*", "100", "\n", "dp", "=", "delta", "/", "full", "*", "100", "\n", "item_str", "=", "f\"({p:.1f} $\\\\pm$ {dp:.1f})\"", "\n", "s", ".", "append", "(", "item_str", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.fewshot_compare.str_table_single": [[43, 58], ["list", "list", "dic.keys", "dic[].keys", "strs.append", "s.append"], "function", ["None"], ["", "def", "str_table_single", "(", "dic", ",", "indicate_best", "=", "True", ")", ":", "\n", "  ", "row_names", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "col_names", "=", "list", "(", "dic", "[", "row_names", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "\n", "strs", "=", "[", "col_names", "]", "\n", "for", "row_name", "in", "row_names", ":", "\n", "    ", "s", "=", "[", "row_name", "]", "\n", "for", "col_name", "in", "col_names", ":", "\n", "      ", "midv", ",", "delta", ",", "full", "=", "dic", "[", "row_name", "]", "[", "col_name", "]", "\n", "midv", "*=", "100", "\n", "delta", "*=", "100", "\n", "p", "=", "midv", "/", "full", "*", "100", "\n", "item_str", "=", "f\"{midv:.1f} ({p:.1f}) $\\\\pm$ {delta:.1f}\"", "\n", "s", ".", "append", "(", "item_str", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "", "return", "strs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.get_classes": [[19, 29], ["numpy.array", "np.array.argsort", "names.tolist"], "function", ["None"], ["def", "get_classes", "(", "l", ",", "start", "=", "0", ")", ":", "\n", "  ", "x", "=", "np", ".", "array", "(", "l", ")", "\n", "y", "=", "x", ".", "argsort", "(", ")", "\n", "k", "=", "0", "\n", "while", "x", "[", "y", "[", "k", "]", "]", "<", "1e-3", ":", "\n", "    ", "k", "+=", "1", "\n", "", "y", "=", "y", "[", "k", ":", "]", "[", ":", ":", "-", "1", "]", "\n", "# all classes are the same", "\n", "names", "=", "label_list", "[", "y", "-", "1", "+", "start", "]", "\n", "return", "x", "[", "y", "]", ",", "names", ".", "tolist", "(", ")", ",", "y", "+", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.get_text": [[30, 38], ["qualitative_paper.get_classes", "s.append", "s.extend", "zip"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.get_classes"], ["", "def", "get_text", "(", "gt", ",", "ct", ")", ":", "\n", "  ", "s", "=", "[", "]", "\n", "vals", ",", "names", ",", "cats", "=", "get_classes", "(", "ct", "[", "\"IoU\"", "]", ")", "\n", "iou", "=", "gt", "[", "\"mIoU\"", "]", "\n", "s", ".", "append", "(", "[", "f\"mIoU {iou:.3f}\"", ",", "high_contrast", "[", "0", "]", "]", ")", "\n", "s", ".", "extend", "(", "[", "[", "f\"{name} {val:.3f}\"", ",", "high_contrast", "[", "cat", "]", "]", "\n", "for", "cat", ",", "name", ",", "val", "in", "zip", "(", "cats", ",", "names", ",", "vals", ")", "]", ")", "\n", "return", "s", "[", ":", "7", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.process": [[39, 44], ["torch.cat", "torch.cat", "torch.interpolate", "torchvision.utils.torch2numpy().transpose", "torchvision.utils.torch2numpy"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy"], ["", "def", "process", "(", "res", ")", ":", "\n", "  ", "res", "=", "torch", ".", "cat", "(", "res", ")", "\n", "res", "=", "F", ".", "interpolate", "(", "res", ",", "256", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "return", "utils", ".", "torch2numpy", "(", "res", "*", "255", ")", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.get_result_G": [[46, 67], ["hasattr", "P", "lib.visualizer.segviz_numpy", "enumerate", "G.truncation", "G.synthesis", "G", "P.cpu", "SE_models[].items", "seg.argmax", "lib.visualizer.segviz_numpy", "image_set.append", "text_set.append", "G.mapping", "lib.op.torch2image", "lib.misc.formal_name().split", "SE", "est_label[].cpu", "lib.op.bu", "lib.misc.formal_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.segviz_numpy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.torch2image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.SE_eval.formal_name"], ["", "def", "get_result_G", "(", "G_name", ",", "z", ")", ":", "\n", "  ", "G", "=", "Gs", "[", "G_name", "]", "\n", "P", "=", "Ps", "[", "G_name", "]", "\n", "if", "hasattr", "(", "G", ",", "\"truncation\"", ")", ":", "\n", "    ", "wp", "=", "G", ".", "truncation", "(", "G", ".", "mapping", "(", "z", ")", ")", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "    ", "image", ",", "feature", "=", "G", "(", "z", ",", "generate_feature", "=", "True", ")", "\n", "", "label", "=", "P", "(", "image", ",", "size", "=", "256", ")", "\n", "label_viz", "=", "segviz_numpy", "(", "label", ".", "cpu", "(", ")", ")", "\n", "image_set", "=", "[", "torch2image", "(", "bu", "(", "image", ",", "256", ")", ")", "[", "0", "]", ",", "label_viz", "]", "\n", "text_set", "=", "[", "\n", "formal_name", "(", "G_name", ")", ".", "split", "(", "\"_\"", ")", "[", "0", "]", ",", "\n", "\"UNet\"", "if", "is_face", "else", "\"DeeplabV3\"", "]", "\n", "for", "i", ",", "(", "SE_name", ",", "SE", ")", "in", "enumerate", "(", "SE_models", "[", "G_name", "]", ".", "items", "(", ")", ")", ":", "\n", "    ", "seg", "=", "SE", "(", "feature", ",", "size", "=", "label", ".", "shape", "[", "2", "]", ")", "[", "-", "1", "]", "\n", "est_label", "=", "seg", ".", "argmax", "(", "1", ")", "\n", "est_label_viz", "=", "segviz_numpy", "(", "est_label", "[", "0", "]", ".", "cpu", "(", ")", ")", "\n", "image_set", ".", "append", "(", "est_label_viz", ")", "\n", "text_set", ".", "append", "(", "SE_name", ")", "\n", "", "return", "image_set", ",", "text_set", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.SE_from_dir": [[69, 87], ["glob.glob", "model_files.sort", "glob.glob", "os.path.isdir", "G_names.split", "G_names.split", "lib.misc.listkey_convert", "models.helper.load_semantic_extractor().cuda", "len", "models.helper.load_semantic_extractor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.listkey_convert", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.load_semantic_extractor"], ["", "def", "SE_from_dir", "(", "data_dir", ",", "G_names", ")", ":", "\n", "  ", "model_dirs", "=", "glob", ".", "glob", "(", "f\"{data_dir}/*\"", ")", "\n", "model_files", "=", "[", "d", "for", "d", "in", "model_dirs", "if", "os", ".", "path", ".", "isdir", "(", "d", ")", "]", "\n", "model_files", "=", "[", "glob", ".", "glob", "(", "f\"{f}/*.pth\"", ")", "for", "f", "in", "model_files", "]", "\n", "model_files", "=", "[", "[", "m", "for", "m", "in", "ms", "if", "\"eval\"", "not", "in", "m", "]", "for", "ms", "in", "model_files", "]", "\n", "model_files", "=", "[", "m", "[", "0", "]", "for", "m", "in", "model_files", "if", "len", "(", "m", ")", "==", "1", "]", "\n", "model_files", ".", "sort", "(", ")", "\n", "SE_model_paths", "=", "{", "\n", "G_name", ":", "[", "p", "for", "p", "in", "model_files", "if", "G_name", "in", "p", "]", "\n", "for", "G_name", "in", "G_names", ".", "split", "(", "\",\"", ")", "}", "\n", "SE_models", "=", "{", "G_name", ":", "{", "}", "for", "G_name", "in", "G_names", ".", "split", "(", "\",\"", ")", "}", "\n", "for", "G_name", "in", "SE_model_paths", ":", "\n", "    ", "model_paths", "=", "SE_model_paths", "[", "G_name", "]", "\n", "for", "fpath", "in", "model_paths", ":", "\n", "      ", "SE_name", "=", "listkey_convert", "(", "fpath", ",", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", ")", "\n", "SE_models", "[", "G_name", "]", "[", "SE_name", "]", "=", "load_semantic_extractor", "(", "fpath", ")", ".", "cuda", "(", ")", "\n", "", "", "return", "SE_models", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.figure.qualitative_paper.put_text": [[88, 96], ["len", "cv2.putText", "cv2.getTextSize", "int", "int"], "function", ["None"], ["", "def", "put_text", "(", "img", ",", "text", ",", "pos", ")", ":", "\n", "  ", "N_text", "=", "len", "(", "text", ")", "\n", "textsize", "=", "cv2", ".", "getTextSize", "(", "text", ",", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "1.2", ",", "1", ")", "[", "0", "]", "\n", "pos", "=", "(", "pos", "[", "0", "]", "-", "int", "(", "textsize", "[", "0", "]", "//", "2", ")", ",", "\n", "pos", "[", "1", "]", "+", "int", "(", "textsize", "[", "1", "]", "//", "2", ")", ")", "\n", "cv2", ".", "putText", "(", "img", ",", "text", ",", "pos", ",", "\n", "cv2", ".", "FONT_HERSHEY_DUPLEX", ",", "1.2", ",", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "1", ",", "cv2", ".", "LINE_AA", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.__sseg_se_z": [[24, 46], ["edit_strategy.setup", "range", "edit_strategy.to_std_form", "edit_strategy.to_std_form", "G.synthesis", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "edit_strategy.step", "P"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.setup", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step"], ["@", "staticmethod", "\n", "def", "__sseg_se_z", "(", "P", ",", "G", ",", "z", ",", "tar", ",", "tar_mask", ",", "edit_strategy", ")", ":", "\n", "    ", "\"\"\"\n    Precise semantic editing using semantic extractor.\n    Args:\n      P : The semantic extractor.\n      G : The generator supporting the edit.\n      z : The initial z to be edited.\n      tar : The target semantic mask.\n      tar_mask : Denoting user changed region. But not used currently.\n    \"\"\"", "\n", "edit_strategy", ".", "setup", "(", "z", ")", "\n", "z0", "=", "edit_strategy", ".", "z0", "# (14, 512)", "\n", "for", "i", "in", "(", "range", "(", "edit_strategy", ".", "n_iter", ")", ")", ":", "\n", "      ", "z", ",", "wps", "=", "edit_strategy", ".", "to_std_form", "(", ")", "# (14, 512)", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wps", ",", "generate_feature", "=", "True", ")", "\n", "seg", "=", "P", "(", "feature", ",", "size", "=", "tar", ".", "shape", "[", "2", "]", ")", "[", "-", "1", "]", "\n", "celoss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "seg", ",", "tar", ")", "\n", "regloss", "=", "1e-3", "*", "(", "(", "z", "-", "z0", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "priorloss", "=", "1e-3", "*", "(", "z", "**", "2", ")", ".", "sum", "(", ")", "/", "z", ".", "shape", "[", "0", "]", "\n", "edit_strategy", ".", "step", "(", "celoss", "+", "regloss", "+", "priorloss", ")", "\n", "", "return", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.__sseg_pred_z": [[47, 63], ["edit_strategy.setup", "range", "edit_strategy.to_std_form", "edit_strategy.to_std_form", "G.synthesis", "P.raw_prediction", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "edit_strategy.step"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.setup", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.scene_segmenter.SceneSegmenter.raw_prediction", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step"], ["", "@", "staticmethod", "\n", "def", "__sseg_pred_z", "(", "P", ",", "G", ",", "z", ",", "tar", ",", "tar_mask", ",", "edit_strategy", ")", ":", "\n", "    ", "\"\"\"\n    Do editing on z (1, 512)\n    \"\"\"", "\n", "edit_strategy", ".", "setup", "(", "z", ")", "\n", "z0", "=", "edit_strategy", ".", "z0", "\n", "for", "i", "in", "(", "range", "(", "edit_strategy", ".", "n_iter", ")", ")", ":", "\n", "      ", "z", ",", "wps", "=", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "image", "=", "G", ".", "synthesis", "(", "wps", ")", "\n", "seg", "=", "P", ".", "raw_prediction", "(", "image", ",", "size", "=", "tar", ".", "shape", "[", "2", "]", ")", "\n", "celoss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "seg", ",", "tar", ")", "\n", "regloss", "=", "1e-3", "*", "(", "(", "z", "-", "z0", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "priorloss", "=", "1e-3", "*", "(", "z", "**", "2", ")", ".", "sum", "(", ")", "/", "z", ".", "shape", "[", "0", "]", "\n", "edit_strategy", ".", "step", "(", "celoss", "+", "regloss", "+", "priorloss", ")", "\n", "", "return", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.__sseg_image_z": [[64, 87], ["edit_strategy.setup", "range", "edit_strategy.to_std_form", "edit_strategy.to_std_form", "lib.op.bu", "edit_strategy.step", "G.synthesis", "tar_mask.sum"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.setup", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step"], ["", "@", "staticmethod", "\n", "def", "__sseg_image_z", "(", "G", ",", "z", ",", "tar", ",", "tar_mask", ",", "edit_strategy", ",", "P", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Precise semantic editing using semantic extractor.\n    Args:\n      P : The semantic extractor.\n      G : The generator supporting the edit.\n      z : The initial z to be edited.\n      tar : The target semantic mask.\n      tar_mask : Denoting user changed region. But not used currently.\n    \"\"\"", "\n", "edit_strategy", ".", "setup", "(", "z", ")", "\n", "z0", "=", "edit_strategy", ".", "z0", "\n", "for", "i", "in", "(", "range", "(", "edit_strategy", ".", "n_iter", ")", ")", ":", "\n", "      ", "z", ",", "wps", "=", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "image", "=", "bu", "(", "G", ".", "synthesis", "(", "wps", ")", ",", "tar", ".", "shape", "[", "2", "]", ")", "\n", "diff", "=", "(", "tar", "-", "image", ")", "**", "2", "\n", "mseregloss", "=", "(", "(", "1", "-", "tar_mask", ")", "*", "diff", ")", ".", "sum", "(", ")", "/", "(", "1", "-", "tar_mask", ")", ".", "sum", "(", ")", "\n", "mseeditloss", "=", "(", "tar_mask", "*", "diff", ")", ".", "sum", "(", ")", "/", "tar_mask", ".", "sum", "(", ")", "\n", "regloss", "=", "1e-3", "*", "(", "(", "z", "-", "z0", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "priorloss", "=", "1e-3", "*", "(", "z", "**", "2", ")", ".", "sum", "(", ")", "/", "z", ".", "shape", "[", "0", "]", "\n", "edit_strategy", ".", "step", "(", "mseregloss", "+", "mseeditloss", "+", "regloss", "+", "priorloss", ")", "\n", "", "return", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.sseg_edit": [[88, 122], ["manipulation.strategy.EditStrategy", "range", "range", "res.append", "len", "agg.append", "func", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "z[].float", "tar[].long().cuda", "tar_mask[].float().cuda", "tar[].long", "tar_mask[].float"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "sseg_edit", "(", "G", ",", "z", ",", "tar", ",", "tar_mask", ",", "\n", "SE", "=", "None", ",", "\n", "op", "=", "\"internal\"", ",", "\n", "latent_strategy", "=", "'mixwp'", ",", "\n", "optimizer", "=", "\"adam\"", ",", "\n", "n_iter", "=", "100", ",", "\n", "base_lr", "=", "0.01", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      G : The generator\n      z : The latent z (N, 512), or mixed latent z (N, layers, 512)\n      op : ``internal'' means to use LSE, ``external'' means to use predictor, ``image'' means to use color space editing loss\n    \"\"\"", "\n", "res", "=", "[", "]", "\n", "edit_strategy", "=", "EditStrategy", "(", "G", "=", "G", ",", "\n", "latent_strategy", "=", "latent_strategy", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "base_lr", "=", "base_lr", ")", "\n", "func", "=", "{", "\n", "\"internal\"", ":", "ImageEditing", ".", "__sseg_se_z", ",", "\n", "\"external\"", ":", "ImageEditing", ".", "__sseg_pred_z", ",", "\n", "\"image\"", ":", "ImageEditing", ".", "__sseg_image_z", "}", "[", "op", "]", "\n", "for", "i", "in", "range", "(", "tar", ".", "shape", "[", "0", "]", ")", ":", "\n", "      ", "res", ".", "append", "(", "func", "(", "\n", "P", "=", "SE", ",", "G", "=", "G", ",", "z", "=", "z", "[", "i", ":", "i", "+", "1", "]", ".", "float", "(", ")", ",", "\n", "tar", "=", "tar", "[", "i", ":", "i", "+", "1", "]", ".", "long", "(", ")", ".", "cuda", "(", ")", ",", "\n", "tar_mask", "=", "tar_mask", "[", "i", ":", "i", "+", "1", "]", ".", "float", "(", ")", ".", "cuda", "(", ")", ",", "\n", "edit_strategy", "=", "edit_strategy", ")", ")", "\n", "", "agg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "res", "[", "0", "]", ")", ")", ":", "\n", "      ", "agg", ".", "append", "(", "torch", ".", "cat", "(", "[", "r", "[", "i", "]", "for", "r", "in", "res", "]", ")", ")", "\n", "", "return", "agg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.ImageEditing.fuse_stroke": [[123, 156], ["G.synthesis", "lib.op.bu().cpu", "label_mask.cpu", "image_mask.cpu", "[].argmax().cpu", "P().cpu", "lib.op.bu", "[].argmax", "P", "image_stroke.cpu", "label_stroke.cpu", "label_stroke.cpu", "SE"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "@", "staticmethod", "\n", "def", "fuse_stroke", "(", "G", ",", "SE", ",", "P", ",", "wp", ",", "\n", "image_stroke", ",", "image_mask", ",", "label_stroke", ",", "label_mask", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      image_stroke : [3, H, W]\n      image_mask : [1, H, W]\n      label_stroke : [H, W]\n      label_mask : [H, W]\n    \"\"\"", "\n", "size", "=", "label_mask", ".", "shape", "[", "1", "]", "\n", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "origin_image", "=", "bu", "(", "image", ",", "size", "=", "size", ")", ".", "cpu", "(", ")", "\n", "int_label", "=", "SE", "(", "feature", ",", "size", "=", "size", ")", "[", "-", "1", "]", ".", "argmax", "(", "1", ")", ".", "cpu", "(", ")", "if", "SE", "else", "None", "\n", "ext_label", "=", "P", "(", "image", ",", "size", "=", "size", ")", ".", "cpu", "(", ")", "if", "P", "else", "None", "\n", "\n", "m", "=", "label_mask", ".", "cpu", "(", ")", "\n", "fused_int_label", "=", "None", "if", "label_stroke", "is", "None", "or", "int_label", "is", "None", "else", "(", "(", "1", "-", "m", ")", "*", "int_label", "+", "m", "*", "label_stroke", ".", "cpu", "(", ")", ")", ".", "long", "(", ")", "\n", "fused_ext_label", "=", "None", "if", "label_stroke", "is", "None", "or", "ext_label", "is", "None", "else", "(", "(", "1", "-", "m", ")", "*", "ext_label", "+", "m", "*", "label_stroke", ".", "cpu", "(", ")", ")", ".", "long", "(", ")", "\n", "\n", "m", "=", "image_mask", ".", "cpu", "(", ")", "\n", "fused_image", "=", "None", "if", "image_stroke", "is", "None", "else", "(", "1", "-", "m", ")", "*", "origin_image", "+", "m", "*", "image_stroke", ".", "cpu", "(", ")", "\n", "\n", "return", "{", "\n", "\"fused_image\"", ":", "fused_image", ",", "\n", "\"fused_int_label\"", ":", "fused_int_label", ",", "\n", "\"fused_ext_label\"", ":", "fused_ext_label", ",", "\n", "\"origin_image\"", ":", "origin_image", ",", "\n", "\"int_label\"", ":", "int_label", ",", "\n", "\"ext_label\"", ":", "ext_label", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.sie.read_data": [[158, 173], ["glob.glob", "glob.glob.sort", "image_mask.append", "image_stroke.append", "label_mask.append", "label_stroke.append", "torch.from_numpy", "torch.from_numpy", "z.append", "torch.cat", "torch.cat", "home.utils.preprocess_mask", "home.utils.preprocess_image", "home.utils.preprocess_mask", "home.utils.preprocess_label", "numpy.load", "torch.from_numpy.float().unsqueeze", "name.rfind", "lib.misc.imread", "lib.misc.imread", "lib.misc.imread", "lib.misc.imread", "torch.from_numpy.float"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_mask", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.home.utils.preprocess_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread"], ["", "", "def", "read_data", "(", "data_dir", ",", "name_list", ",", "n_class", "=", "15", ")", ":", "\n", "  ", "z", ",", "image_stroke", ",", "label_stroke", ",", "image_mask", ",", "label_mask", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "name", "in", "name_list", ":", "\n", "    ", "name", "=", "name", "[", ":", "name", ".", "rfind", "(", "\"_\"", ")", "]", "\n", "files", "=", "glob", ".", "glob", "(", "f\"{data_dir}/{name}*\"", ")", "\n", "files", ".", "sort", "(", ")", "# img_m, img_s, lbl_m, lbl_s", "\n", "\n", "image_mask", ".", "append", "(", "preprocess_mask", "(", "imread", "(", "files", "[", "0", "]", ")", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "image_stroke", ".", "append", "(", "preprocess_image", "(", "imread", "(", "files", "[", "1", "]", ")", ")", ")", "\n", "label_mask", ".", "append", "(", "preprocess_mask", "(", "imread", "(", "files", "[", "2", "]", ")", "[", ":", ",", ":", ",", "0", "]", ")", ")", "\n", "label_stroke", ".", "append", "(", "preprocess_label", "(", "imread", "(", "files", "[", "3", "]", ")", ",", "n_class", ")", ")", "\n", "zs", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "files", "[", "-", "1", "]", ")", ")", "\n", "z", ".", "append", "(", "zs", ".", "float", "(", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "res", "=", "[", "z", ",", "image_stroke", ",", "image_mask", ",", "label_stroke", ",", "label_mask", "]", "\n", "return", "[", "torch", ".", "cat", "(", "r", ")", "for", "r", "in", "res", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.scs.SCS.__sseg_se": [[19, 69], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "range", "numpy.argsort", "z[].clone", "torch.randn.clone().detach().cuda", "torch.randn.clone().detach().cuda", "edit_strategy.setup", "range", "G.synthesis", "edit_strategy.to_std_form", "scs.SCS.__sseg_se.get_seg"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.setup", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form"], ["@", "staticmethod", "\n", "def", "__sseg_se", "(", "SE", ",", "G", ",", "tar", ",", "n_init", ",", "edit_strategy", ",", "pred", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Conditional sampling with semantic extractor\n    using random initialization.\n    Args:\n      SE : The semantic extractor, can be linear or nonlinear.\n      G : The generator to be edited.\n      tar : The target segmentation mask.\n      n_init : The number of initialized z.\n      n_iter : The total optimization number.\n      ls : currently fixed to mixwp, which is to use a different z for each layer.\n    \"\"\"", "\n", "\n", "def", "get_seg", "(", "wp", ",", "size", ")", ":", "\n", "      ", "if", "pred", ":", "\n", "        ", "image", "=", "G", ".", "synthesis", "(", "wp", ")", "\n", "seg", "=", "SE", ".", "raw_prediction", "(", "image", ",", "size", "=", "size", ")", "\n", "return", "seg", "\n", "", "image", ",", "feature", "=", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "seg", "=", "SE", "(", "feature", ",", "size", "=", "size", ")", "[", "-", "1", "]", "\n", "return", "seg", "\n", "\n", "", "BS", "=", "4", "\n", "interval", "=", "10", "\n", "z", "=", "torch", ".", "randn", "(", "n_init", ",", "1", ",", "512", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n_init", ")", ":", "\n", "      ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "w", "=", "G", ".", "mapping", "(", "z", "[", "i", "]", ".", "cuda", "(", ")", ")", "# (1, 512)", "\n", "wp", "=", "w", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "G", ".", "num_layers", ",", "1", ")", "# (1, 14, 512)", "\n", "seg", "=", "get_seg", "(", "wp", ",", "tar", ".", "shape", "[", "2", "]", ")", "\n", "label", "=", "seg", ".", "argmax", "(", "1", ")", "\n", "scores", ".", "append", "(", "(", "label", "==", "tar", ")", ".", "sum", "(", ")", ")", "\n", "", "", "indice", "=", "np", ".", "argsort", "(", "scores", ")", "\n", "z_", "=", "z", "[", "indice", "[", ":", "n_init", "]", "]", ".", "clone", "(", ")", "\n", "best_ind", "=", "indice", "[", "-", "1", "]", "\n", "\n", "z", "=", "z", "[", "best_ind", "]", "# (1, 512)", "\n", "z0", "=", "z", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cuda", "(", ")", "\n", "edit_strategy", ".", "setup", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "edit_strategy", ".", "n_iter", ")", ":", "\n", "      ", "z", ",", "wp", "=", "edit_strategy", ".", "to_std_form", "(", ")", "\n", "seg", "=", "get_seg", "(", "wp", ",", "tar", ".", "shape", "[", "2", "]", ")", "\n", "celoss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "seg", ",", "tar", ")", "\n", "regloss", "=", "1e-3", "*", "(", "(", "z", "-", "z0", ")", "**", "2", ")", ".", "sum", "(", ")", "\n", "priorloss", "=", "1e-3", "*", "(", "z", "**", "2", ")", ".", "sum", "(", ")", "/", "z", ".", "shape", "[", "0", "]", "\n", "edit_strategy", ".", "step", "(", "celoss", "+", "priorloss", "+", "regloss", ")", "\n", "#print(f\"=> Final loss: {celoss + regloss:.3f}\")", "\n", "", "return", "z", ",", "wp", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.scs.SCS.sseg_se": [[71, 92], ["manipulation.strategy.EditStrategy", "tqdm.tqdm.tqdm", "range", "range", "range", "len", "agg.append", "res.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "scs.SCS.__sseg_se", "tar[].cuda"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.scs.SCS.__sseg_se"], ["", "@", "staticmethod", "\n", "def", "sseg_se", "(", "SE", ",", "G", ",", "tar", ",", "pred", "=", "False", ",", "n_init", "=", "10", ",", "repeat", "=", "1", ",", "\n", "latent_strategy", "=", "'mixwp'", ",", "\n", "optimizer", "=", "\"adam\"", ",", "\n", "n_iter", "=", "100", ",", "\n", "base_lr", "=", "0.01", ")", ":", "\n", "    ", "edit_strategy", "=", "EditStrategy", "(", "G", "=", "G", ",", "\n", "latent_strategy", "=", "latent_strategy", ",", "\n", "optimizer", "=", "optimizer", ",", "\n", "n_iter", "=", "n_iter", ",", "\n", "base_lr", "=", "base_lr", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "tar", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "repeat", ")", ":", "\n", "        ", "res", ".", "append", "(", "SCS", ".", "__sseg_se", "(", "SE", ",", "G", ",", "\n", "tar", "[", "i", ":", "i", "+", "1", "]", ".", "cuda", "(", ")", ",", "n_init", ",", "edit_strategy", ",", "pred", ")", ")", "\n", "", "", "agg", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "res", "[", "0", "]", ")", ")", ":", "\n", "      ", "agg", ".", "append", "(", "torch", ".", "cat", "(", "[", "r", "[", "i", "]", "for", "r", "in", "res", "]", ")", ")", "\n", "", "return", "agg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.scs.read_labels": [[94, 108], ["numpy.random.RandomState().choice", "numpy.stack", "torch.from_numpy().long", "torch.from_numpy().long", "numpy.load", "torch.from_numpy().float().cuda", "torch.from_numpy().float().cuda", "list", "torch.no_grad", "torch.no_grad", "lib.op.generate_images", "torch.cat", "torch.cat", "numpy.random.RandomState", "range", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "lib.misc.imread", "P", "torch.from_numpy", "torch.from_numpy", "img.unsqueeze().cuda", "img.unsqueeze"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_generator.generate_images", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread"], ["", "", "def", "read_labels", "(", "G_name", ",", "G", ",", "P", ",", "\n", "FACE_DIR", "=", "\"../datasets/CelebAMask-HQ/CelebAMask-HQ-mask-15/\"", ")", ":", "\n", "  ", "if", "\"ffhq\"", "in", "G_name", ":", "\n", "    ", "image_ids", "=", "np", ".", "random", ".", "RandomState", "(", "1116", ")", ".", "choice", "(", "list", "(", "range", "(", "2000", ")", ")", ",", "(", "100", ",", ")", ")", "\n", "labels", "=", "np", ".", "stack", "(", "[", "imread", "(", "f\"{FACE_DIR}/{i}.png\"", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "for", "i", "in", "image_ids", "]", ")", "# (N, H, W, 3)", "\n", "labels", "=", "torch", ".", "from_numpy", "(", "labels", ")", ".", "long", "(", ")", "\n", "", "else", ":", "\n", "    ", "wp", "=", "np", ".", "load", "(", "f\"data/trunc_{G_name}/wp.npy\"", ")", "\n", "wp", "=", "torch", ".", "from_numpy", "(", "wp", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "images", "=", "generate_images", "(", "G", ",", "wp", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "P", "(", "img", ".", "unsqueeze", "(", "0", ")", ".", "cuda", "(", ")", ")", "for", "img", "in", "images", "]", ",", "0", ")", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.__init__": [[8, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "G", ",", "\n", "latent_strategy", "=", "'mixwp'", ",", "\n", "optimizer", "=", "'adam'", ",", "\n", "n_iter", "=", "100", ",", "\n", "base_lr", "=", "0.01", ")", ":", "\n", "    ", "self", ".", "G", "=", "G", "\n", "self", ".", "num_layers", "=", "G", ".", "num_layers", "\n", "self", ".", "n_iter", "=", "n_iter", "\n", "self", ".", "latent_strategy", "=", "latent_strategy", "\n", "self", ".", "optimizer_type", "=", "{", "\"adam\"", ":", "torch", ".", "optim", ".", "Adam", "}", "[", "optimizer", "]", "\n", "self", ".", "base_lr", "=", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.to_std_form": [[21, 28], ["torch.stack", "strategy.EditStrategy.G.mapping().unsqueeze", "strategy.EditStrategy.G.mapping().unsqueeze", "strategy.EditStrategy.repeat", "strategy.EditStrategy.G.mapping", "strategy.EditStrategy.G.mapping"], "methods", ["None"], ["", "def", "to_std_form", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "latent_strategy", "==", "\"mixwp\"", ":", "\n", "      ", "z", "=", "torch", ".", "stack", "(", "self", ".", "zs", ")", "\n", "return", "z", ",", "self", ".", "G", ".", "mapping", "(", "z", ")", ".", "unsqueeze", "(", "0", ")", "# (1, L, 512)", "\n", "", "if", "self", ".", "latent_strategy", "==", "\"z\"", ":", "\n", "      ", "wp", "=", "self", ".", "G", ".", "mapping", "(", "self", ".", "z", ")", ".", "unsqueeze", "(", "1", ")", "\n", "return", "self", ".", "z", ",", "wp", ".", "repeat", "(", "1", ",", "self", ".", "num_layers", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.z_to_wp": [[29, 48], ["G.mapping", "torch.stack.view", "z.repeat", "torch.stack", "len", "z.view", "G.truncation"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "z_to_wp", "(", "G", ",", "z", ",", "in_type", "=", "\"z\"", ",", "out_type", "=", "\"trunc-wp\"", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      z : (N, 512) or (N, L, 512)\n      in_type : z, or zs\n      out_type : zs, trunc-wp, notrunc-wp\n    \"\"\"", "\n", "if", "in_type", "==", "\"z\"", ":", "\n", "      ", "assert", "len", "(", "z", ".", "shape", ")", "==", "2", "\n", "zs", "=", "z", ".", "repeat", "(", "G", ".", "num_layers", ",", "1", ")", "\n", "", "elif", "in_type", "==", "\"zs\"", ":", "\n", "      ", "zs", "=", "z", ".", "view", "(", "-", "1", ",", "z", ".", "shape", "[", "-", "1", "]", ")", "# flatten", "\n", "", "if", "out_type", "==", "\"zs\"", ":", "\n", "      ", "return", "zs", "\n", "", "wp", "=", "G", ".", "mapping", "(", "zs", ")", "\n", "if", "out_type", "==", "\"trunc-wp\"", ":", "\n", "      ", "wp", "=", "torch", ".", "stack", "(", "[", "G", ".", "truncation", "(", "w", ")", "[", "0", "]", "for", "w", "in", "wp", "]", ")", "\n", "", "return", "wp", ".", "view", "(", "-", "1", ",", "G", ".", "num_layers", ",", "wp", ".", "shape", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.setup": [[50, 75], ["z_init.clone().cuda().detach().requires_grad_", "strategy.EditStrategy.optimizer_type", "strategy.EditStrategy.get_layer_lr_func", "hasattr", "list", "z_init.repeat().cuda", "strategy.EditStrategy.z0[].clone().detach().requires_grad_", "strategy.EditStrategy.optimizer_type", "z_init.clone().cuda().detach", "len", "z_init[].cuda", "range", "range", "z_init.repeat", "strategy.EditStrategy.z0[].clone().detach", "strategy.EditStrategy.", "z_init.clone().cuda", "strategy.EditStrategy.z0[].clone", "z_init.clone"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.get_layer_lr_func", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone"], ["", "def", "setup", "(", "self", ",", "z_init", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "if", "self", ".", "latent_strategy", "==", "\"z\"", ":", "\n", "      ", "self", ".", "z", "=", "z_init", ".", "clone", "(", ")", ".", "cuda", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "self", ".", "optim", "=", "self", ".", "optimizer_type", "(", "[", "self", ".", "z", "]", ",", "lr", "=", "self", ".", "base_lr", ")", "\n", "\n", "", "if", "self", ".", "latent_strategy", "==", "\"mixwp\"", ":", "\n", "      ", "get_lr", "=", "self", ".", "get_layer_lr_func", "(", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"zs\"", ")", ":", "# clear previous results", "\n", "        ", "del", "self", ".", "z0", "\n", "del", "self", ".", "zs", "\n", "del", "self", ".", "optims", "\n", "\n", "", "if", "list", "(", "z_init", ".", "shape", ")", "==", "[", "1", ",", "512", "]", ":", "\n", "        ", "self", ".", "z0", "=", "z_init", ".", "repeat", "(", "self", ".", "num_layers", ",", "1", ")", ".", "cuda", "(", ")", "\n", "", "elif", "len", "(", "z_init", ".", "shape", ")", "==", "3", ":", "\n", "        ", "self", ".", "z0", "=", "z_init", "[", "0", "]", ".", "cuda", "(", ")", "\n", "# each item in self.zs is of shape (512,)", "\n", "", "self", ".", "zs", "=", "[", "self", ".", "z0", "[", "i", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "True", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "z0", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n", "self", ".", "optims", "=", "[", "self", ".", "optimizer_type", "(", "[", "self", ".", "zs", "[", "i", "]", "]", ",", "lr", "=", "get_lr", "(", "i", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "z0", ".", "shape", "[", "0", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.step": [[76, 86], ["loss.backward", "strategy.EditStrategy.optim.step", "strategy.EditStrategy.optim.zero_grad", "range", "len", "strategy.EditStrategy.optims[].step", "strategy.EditStrategy.optims[].zero_grad"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step"], ["", "", "def", "step", "(", "self", ",", "loss", ")", ":", "\n", "    ", "loss", ".", "backward", "(", ")", "\n", "if", "self", ".", "latent_strategy", "==", "\"z\"", ":", "\n", "      ", "self", ".", "optim", ".", "step", "(", ")", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "", "if", "self", ".", "latent_strategy", "==", "\"mixwp\"", ":", "\n", "      ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "zs", ")", ")", ":", "\n", "        ", "self", ".", "optims", "[", "i", "]", ".", "step", "(", ")", "\n", "self", ".", "optims", "[", "i", "]", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.get_lr_ffhq": [[87, 97], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "get_lr_ffhq", "(", "layer_idx", ",", "base_lr", "=", "0.01", ")", ":", "\n", "    ", "if", "layer_idx", "<=", "7", ":", "\n", "      ", "return", "base_lr", "\n", "", "elif", "layer_idx", "<=", "11", ":", "\n", "      ", "return", "base_lr", "\n", "", "elif", "layer_idx", "<=", "15", ":", "\n", "      ", "return", "base_lr", "\n", "", "else", ":", "\n", "      ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.get_lr_bedroom": [[98, 106], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "get_lr_bedroom", "(", "layer_idx", ",", "base_lr", "=", "0.01", ")", ":", "\n", "    ", "if", "layer_idx", "<=", "5", ":", "\n", "      ", "return", "base_lr", "\n", "", "elif", "layer_idx", "<=", "11", ":", "# [6-12]", "\n", "      ", "return", "base_lr", "\n", "", "else", ":", "\n", "      ", "return", "base_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.manipulation.strategy.EditStrategy.get_layer_lr_func": [[107, 115], ["None"], "methods", ["None"], ["", "", "def", "get_layer_lr_func", "(", "self", ")", ":", "\n", "    ", "\"\"\"\n    Returns a function get_lr(layer_idx).\n    \"\"\"", "\n", "funcs", "=", "{", "\n", "18", ":", "EditStrategy", ".", "get_lr_ffhq", ",", "\n", "14", ":", "EditStrategy", ".", "get_lr_bedroom", "}", "\n", "return", "lambda", "i", ":", "funcs", "[", "self", ".", "G", ".", "num_layers", "]", "(", "i", ",", "self", ".", "base_lr", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.__init__": [[21, 26], ["base_generator.BaseGenerator.__init__", "pggan_generator.PGGANGenerator.net.lod.to().tolist", "pggan_generator.PGGANGenerator.logger.info", "pggan_generator.PGGANGenerator.net.lod.to"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'pggan'", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "self", ".", "lod", "=", "self", ".", "net", ".", "lod", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "tolist", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Current `lod` is {self.lod}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.build": [[27, 43], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "pggan_generator_network.PGGANGeneratorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "z_space_dim", "=", "getattr", "(", "self", ",", "'z_space_dim'", ",", "512", ")", "\n", "self", ".", "final_tanh", "=", "getattr", "(", "self", ",", "'final_tanh'", ",", "False", ")", "\n", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "fused_scale", "=", "getattr", "(", "self", ",", "'fused_scale'", ",", "False", ")", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "16", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "self", ".", "net", "=", "PGGANGeneratorNet", "(", "resolution", "=", "self", ".", "resolution", ",", "\n", "z_space_dim", "=", "self", ".", "z_space_dim", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "final_tanh", "=", "self", ".", "final_tanh", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "self", ".", "num_layers", "=", "self", ".", "net", ".", "num_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.convert_tf_weights": [[44, 117], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "pggan_generator.PGGANGenerator.logger.info", "sys.path.insert", "sys.path.pop", "pggan_generator.PGGANGenerator.logger.info", "pggan_generator.PGGANGenerator.logger.info", "dict", "pggan_generator.PGGANGenerator.net.state_dict", "pggan_generator.PGGANGenerator.net.pth_to_tf_var_mapping.items", "pggan_generator.PGGANGenerator.logger.info", "pggan_generator.PGGANGenerator.logger.info", "torch.save", "pggan_generator.PGGANGenerator.logger.info", "pggan_generator.PGGANGenerator.load", "pggan_generator.PGGANGenerator.logger.info", "pggan_generator.PGGANGenerator.net.eval().to", "range", "pggan_generator.PGGANGenerator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "pggan_generator.PGGANGenerator.logger.debug", "torch.from_numpy", "pggan_generator.PGGANGenerator.logger.warning", "tf.compat.v1.InteractiveSession.close", "pggan_generator.PGGANGenerator.easy_sample", "numpy.zeros", "tf_net.run", "numpy.average", "pggan_generator.PGGANGenerator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "pggan_generator.PGGANGenerator.net.eval", "numpy.random.randint", "pggan_generator.PGGANGenerator.synthesize", "numpy.abs", "var.permute.permute.view", "var.permute.permute.permute().flip", "var.permute.permute.permute", "var.permute.permute.permute", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.synthesize"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'layer0.conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "view", "(", "var", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "self", ".", "net", ".", "init_res", ",", "self", ".", "net", ".", "init_res", ")", "\n", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "flip", "(", "2", ",", "3", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "elif", "'conv'", "not", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "latent_code", "=", "self", ".", "easy_sample", "(", "1", ")", "\n", "tf_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "label_size", ")", ",", "np", ".", "float32", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "label_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "label_size", ")", "\n", "tf_label", "[", "0", ",", "label_id", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "label_id", "=", "None", "\n", "", "tf_output", "=", "tf_net", ".", "run", "(", "latent_code", ",", "tf_label", ")", "\n", "pth_output", "=", "self", ".", "synthesize", "(", "latent_code", ",", "labels", "=", "label_id", ")", "[", "'image'", "]", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.sample": [[118, 121], ["numpy.random.randn().astype", "numpy.random.randn"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "num", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "num", ">", "0", "\n", "return", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "z_space_dim", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.preprocess": [[122, 130], ["latent_codes.reshape.reshape.reshape", "numpy.linalg.norm", "latent_codes.reshape.reshape.astype", "isinstance", "ValueError", "numpy.sqrt"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "latent_codes", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "z_space_dim", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "latent_codes", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "latent_codes", "=", "latent_codes", "/", "norm", "*", "np", ".", "sqrt", "(", "self", ".", "z_space_dim", ")", "\n", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator._synthesize": [[131, 158], ["pggan_generator.PGGANGenerator.to_tensor", "pggan_generator.PGGANGenerator.get_ont_hot_labels", "pggan_generator.PGGANGenerator.net", "isinstance", "ValueError", "ValueError", "latent_codes.astype", "pggan_generator.PGGANGenerator.to_tensor", "pggan_generator.PGGANGenerator.get_value", "torch.cuda.empty_cache", "pggan_generator.PGGANGenerator.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_synthesize", "(", "self", ",", "latent_codes", ",", "labels", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "\n", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `batch_size` no larger than '", "\n", "f'{self.batch_size}, and `latent_space_dim` equals to '", "\n", "f'{self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "images", "=", "self", ".", "net", "(", "zs", ",", "ls", ")", "\n", "results", "=", "{", "\n", "'z'", ":", "latent_codes", ",", "\n", "'image'", ":", "self", ".", "get_value", "(", "images", ")", ",", "\n", "}", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.synthesize": [[159, 162], ["pggan_generator.PGGANGenerator.batch_run", "pggan_generator.PGGANGenerator._synthesize"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator._synthesize"], ["", "def", "synthesize", "(", "self", ",", "latent_codes", ",", "labels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "latent_codes", ",", "\n", "lambda", "x", ":", "self", ".", "_synthesize", "(", "x", ",", "labels", "=", "labels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator.PGGANGenerator.__call__": [[163, 192], ["pggan_generator.PGGANGenerator.to_tensor", "pggan_generator.PGGANGenerator.get_ont_hot_labels", "pggan_generator.PGGANGenerator.net", "isinstance", "ValueError", "ValueError", "latent_codes.astype", "pggan_generator.PGGANGenerator.to_tensor", "torch.cuda.empty_cache", "pggan_generator.PGGANGenerator.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor"], ["", "def", "__call__", "(", "self", ",", "latent_codes", ",", "labels", "=", "None", ",", "generate_feature", "=", "True", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "\n", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `batch_size` no larger than '", "\n", "f'{self.batch_size}, and `latent_space_dim` equals to '", "\n", "f'{self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "images", ",", "feats", "=", "self", ".", "net", "(", "zs", ",", "ls", ",", "generate_feature", "=", "True", ")", "\n", "results", "=", "{", "\n", "'z'", ":", "latent_codes", ",", "\n", "'image'", ":", "images", ",", "\n", "}", "\n", "if", "generate_feature", ":", "\n", "      ", "results", "[", "'feature'", "]", "=", "feats", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.__init__": [[67, 137], ["model_settings.MODEL_POOL[].items", "base_module.BaseModule.check_attr", "base_module.BaseModule.check_attr", "getattr", "getattr().upper", "getattr", "getattr", "model_settings.get_pth_weight_path", "model_settings.get_tf_weight_path", "model_settings.get_code_path", "base_module.BaseModule.logger.info", "base_module.BaseModule.build", "os.path.isfile", "base_module.BaseModule.net.eval().to", "base_module.get_temp_logger", "setattr", "torch.cuda.is_available", "getattr", "base_module.BaseModule.load", "os.path.isfile", "getattr", "base_module.BaseModule.convert_tf_weights", "base_module.BaseModule.logger.warning", "base_module.BaseModule.net.eval", "base_module.BaseModule.model_name.split"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_pth_weight_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_tf_weight_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_code_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.get_temp_logger", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.convert_tf_weights"], ["def", "__init__", "(", "self", ",", "model_name", ",", "module_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes with specific settings.\n\n    The GAN model should be first registered in `model_settings.py` with proper\n    settings. Among them, some attributes are necessary, including:\n\n    (1) resolution: Resolution of the synthesis.\n    (2) image_channels: Number of channels of the synthesis. (default: 3)\n    (3) channel_order: Channel order of the raw synthesis. (default: `RGB`)\n    (4) min_val: Minimum value of the raw synthesis. (default -1.0)\n    (5) max_val: Maximum value of the raw synthesis. (default 1.0)\n\n    Args:\n      model_name: Name with which the GAN model is registered.\n      module_name: Name of the module, like `generator` or `discriminator`.\n      logger: Logger for recording log messages. If set as `None`, a default\n        logger, which prints messages from all levels onto the screen, will be\n        created. (default: None)\n\n    Raises:\n      AttributeError: If some necessary attributes are missing.\n    \"\"\"", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "module_name", "=", "module_name", "\n", "self", ".", "logger", "=", "logger", "or", "get_temp_logger", "(", "model_name", ")", "\n", "\n", "# Parse settings.", "\n", "for", "key", ",", "val", "in", "model_settings", ".", "MODEL_POOL", "[", "model_name", "]", ".", "items", "(", ")", ":", "\n", "      ", "setattr", "(", "self", ",", "key", ",", "val", ")", "\n", "", "self", ".", "use_cuda", "=", "model_settings", ".", "USE_CUDA", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "batch_size", "=", "model_settings", ".", "MAX_IMAGES_ON_DEVICE", "\n", "self", ".", "ram_size", "=", "model_settings", ".", "MAX_IMAGES_ON_RAM", "\n", "self", ".", "net", "=", "None", "\n", "self", ".", "run_device", "=", "'cuda'", "if", "self", ".", "use_cuda", "else", "'cpu'", "\n", "self", ".", "cpu_device", "=", "'cpu'", "\n", "\n", "# Check necessary settings.", "\n", "self", ".", "check_attr", "(", "'gan_type'", ")", "# Should be specified in derived classes.", "\n", "self", ".", "check_attr", "(", "'resolution'", ")", "\n", "self", ".", "image_channels", "=", "getattr", "(", "self", ",", "'image_channels'", ",", "3", ")", "\n", "assert", "self", ".", "image_channels", "in", "[", "1", ",", "3", "]", "\n", "self", ".", "channel_order", "=", "getattr", "(", "self", ",", "'channel_order'", ",", "'RGB'", ")", ".", "upper", "(", ")", "\n", "assert", "self", ".", "channel_order", "in", "[", "'RGB'", ",", "'BGR'", "]", "\n", "self", ".", "min_val", "=", "getattr", "(", "self", ",", "'min_val'", ",", "-", "1.0", ")", "\n", "self", ".", "max_val", "=", "getattr", "(", "self", ",", "'max_val'", ",", "1.0", ")", "\n", "\n", "# Get paths.", "\n", "self", ".", "weight_path", "=", "model_settings", ".", "get_pth_weight_path", "(", "\n", "f'{model_name}_{module_name}'", ")", "\n", "self", ".", "tf_weight_path", "=", "model_settings", ".", "get_tf_weight_path", "(", "\n", "getattr", "(", "self", ",", "'tf_weight_name'", ",", "''", ")", ")", "\n", "self", ".", "official_code_path", "=", "model_settings", ".", "get_code_path", "(", "\n", "f'{self.gan_type}_official'", ")", "\n", "self", ".", "has_encoder", "=", "(", "self", ".", "model_name", ".", "split", "(", "'_'", ")", "[", "0", "]", "[", "-", "3", ":", "]", "==", "'inv'", ")", "\n", "\n", "# Build graph and load pre-trained weights.", "\n", "self", ".", "logger", ".", "info", "(", "f'Build network for module `{self.module_name}` in '", "\n", "f'model `{self.model_name}`.'", ")", "\n", "self", ".", "model_specific_vars", "=", "[", "]", "\n", "self", ".", "build", "(", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "weight_path", ")", ":", "\n", "      ", "self", ".", "load", "(", ")", "\n", "", "elif", "os", ".", "path", ".", "isfile", "(", "self", ".", "tf_weight_path", ")", ":", "\n", "      ", "self", ".", "convert_tf_weights", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'No pre-trained weights will be loaded!'", ")", "\n", "\n", "# Change to inference mode and GPU mode if needed.", "\n", "", "assert", "self", ".", "net", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr": [[138, 149], ["hasattr", "AttributeError"], "methods", ["None"], ["", "def", "check_attr", "(", "self", ",", "attr_name", ")", ":", "\n", "    ", "\"\"\"Checks the existence of a particular attribute.\n\n    Args:\n      attr_name: Name of the attribute to check.\n\n    Raises:\n      AttributeError: If the target attribute is missing.\n    \"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "attr_name", ")", ":", "\n", "      ", "raise", "AttributeError", "(", "f'Field `{attr_name}` is missing for '", "\n", "f'module `{self.module_name}` in '", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.build": [[152, 155], ["NotImplementedError"], "methods", ["None"], ["", "", "def", "build", "(", "self", ")", ":", "\n", "    ", "\"\"\"Builds the graph.\"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load": [[156, 164], ["base_module.BaseModule.logger.info", "torch.load", "base_module.BaseModule.net.load_state_dict", "base_module.BaseModule.logger.info", "base_module.BaseModule.net.state_dict"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "    ", "\"\"\"Loads pre-trained weights.\"\"\"", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading pytorch weights from `{self.weight_path}`.'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "self", ".", "weight_path", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "state_dict", "[", "var_name", "]", "=", "self", ".", "net", ".", "state_dict", "(", ")", "[", "var_name", "]", "\n", "", "self", ".", "net", ".", "load_state_dict", "(", "state_dict", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.convert_tf_weights": [[165, 173], ["NotImplementedError"], "methods", ["None"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "    ", "\"\"\"Converts weights from tensorflow version.\n\n    Args:\n      test_num: Number of samples used for testing whether the conversion is\n        done correctly. `0` disables the test. (default: 10)\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor": [[174, 197], ["type", "isinstance", "torch.from_numpy().type.to", "isinstance", "torch.from_numpy().type", "ValueError", "torch.from_numpy"], "methods", ["None"], ["", "def", "to_tensor", "(", "self", ",", "array", ")", ":", "\n", "    ", "\"\"\"Converts a `numpy.ndarray` to `torch.Tensor` on running device.\n\n    Args:\n      array: The input array to convert.\n\n    Returns:\n      A `torch.Tensor` whose dtype is determined by that of the input array.\n\n    Raises:\n      ValueError: If the array is with neither `torch.Tensor` type nor\n        `numpy.ndarray` type.\n    \"\"\"", "\n", "dtype", "=", "type", "(", "array", ")", "\n", "if", "isinstance", "(", "array", ",", "torch", ".", "Tensor", ")", ":", "\n", "      ", "tensor", "=", "array", "\n", "", "elif", "isinstance", "(", "array", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "tensor_type", "=", "DTYPE_NAME_TO_TORCH_TENSOR_TYPE", "[", "array", ".", "dtype", ".", "name", "]", "\n", "tensor", "=", "torch", ".", "from_numpy", "(", "array", ")", ".", "type", "(", "tensor_type", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Unsupported input type `{dtype}`!'", ")", "\n", "", "tensor", "=", "tensor", ".", "to", "(", "self", ".", "run_device", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value": [[198, 217], ["type", "isinstance", "isinstance", "ValueError", "tensor.to().detach().numpy", "tensor.to().detach", "tensor.to"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "tensor", ")", ":", "\n", "    ", "\"\"\"Gets value of a `torch.Tensor`.\n\n    Args:\n      tensor: The input tensor to get value from.\n\n    Returns:\n      A `numpy.ndarray`.\n\n    Raises:\n      ValueError: If the tensor is with neither `torch.Tensor` type nor\n        `numpy.ndarray` type.\n    \"\"\"", "\n", "dtype", "=", "type", "(", "tensor", ")", "\n", "if", "isinstance", "(", "tensor", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "return", "tensor", "\n", "", "if", "isinstance", "(", "tensor", ",", "torch", ".", "Tensor", ")", ":", "\n", "      ", "return", "tensor", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "", "raise", "ValueError", "(", "f'Unsupported input type `{dtype}`!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels": [[218, 248], ["base_module.BaseModule.check_attr", "numpy.array().reshape", "numpy.zeros", "numpy.tile", "numpy.array", "ValueError", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.check_attr"], ["", "def", "get_ont_hot_labels", "(", "self", ",", "num", ",", "labels", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets ont-hot labels for conditional generation.\n\n    Args:\n      num: Number of labels to generate.\n      labels: Input labels as reference to generate one-hot labels. If set as\n        `None`, label `0` will be used by default. (default: None)\n\n    Returns:\n      Returns `None` if `self.label_size` is 0, otherwise, a `numpy.ndarray`\n        with shape [num, self.label_size] and dtype `np.float32`.\n    \"\"\"", "\n", "self", ".", "check_attr", "(", "'label_size'", ")", "\n", "if", "self", ".", "label_size", "==", "0", ":", "\n", "      ", "return", "None", "\n", "\n", "", "if", "labels", "is", "None", ":", "\n", "      ", "labels", "=", "0", "\n", "", "labels", "=", "np", ".", "array", "(", "labels", ")", ".", "reshape", "(", "-", "1", ")", "\n", "if", "labels", ".", "size", "==", "1", ":", "\n", "      ", "labels", "=", "np", ".", "tile", "(", "labels", ",", "(", "num", ",", ")", ")", "\n", "", "assert", "labels", ".", "shape", "==", "(", "num", ",", ")", "\n", "for", "label", "in", "labels", ":", "\n", "      ", "if", "label", ">=", "self", ".", "label_size", "or", "label", "<", "0", ":", "\n", "        ", "raise", "ValueError", "(", "f'Label should be smaller than {self.label_size}, '", "\n", "f'but {label} is received!'", ")", "\n", "\n", "", "", "one_hot", "=", "np", ".", "zeros", "(", "(", "num", ",", "self", ".", "label_size", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "one_hot", "[", "np", ".", "arange", "(", "num", ")", ",", "labels", "]", "=", "1", "\n", "return", "one_hot", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_batch_inputs": [[249, 263], ["range"], "methods", ["None"], ["", "def", "get_batch_inputs", "(", "self", ",", "inputs", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets inputs within mini-batch.\n\n    This function yields at most `self.batch_size` inputs at a time.\n\n    Args:\n      inputs: Input data to form mini-batch.\n      batch_size: Batch size. If not specified, `self.batch_size` will be used.\n        (default: None)\n    \"\"\"", "\n", "total_num", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size", "or", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "0", ",", "total_num", ",", "batch_size", ")", ":", "\n", "      ", "yield", "inputs", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run": [[264, 317], ["base_module.BaseModule.get_batch_inputs", "results.items", "base_module.BaseModule.logger.warning", "run_fn", "isinstance", "numpy.concatenate", "run_fn.items", "isinstance", "ValueError", "isinstance", "ValueError", "results[].append", "results[].append", "type", "type"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs"], ["", "", "def", "batch_run", "(", "self", ",", "inputs", ",", "run_fn", ")", ":", "\n", "    ", "\"\"\"Runs model with mini-batch.\n\n    This function splits the inputs into mini-batches, run the model with each\n    mini-batch, and then concatenate the outputs from all mini-batches together.\n\n    NOTE: The output of `run_fn` can only be `numpy.ndarray` or a dictionary\n    whose values are all `numpy.ndarray`.\n\n    Args:\n      inputs: The input samples to run with.\n      run_fn: A callable function.\n\n    Returns:\n      Same type as the output of `run_fn`.\n\n    Raises:\n      ValueError: If the output type of `run_fn` is not supported.\n    \"\"\"", "\n", "if", "inputs", ".", "shape", "[", "0", "]", ">", "self", ".", "ram_size", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Number of inputs on RAM is larger than '", "\n", "f'{self.ram_size}. Please use '", "\n", "f'`self.get_batch_inputs()` to split the inputs! '", "\n", "f'Otherwise, it may encounter OOM problem!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "temp_key", "=", "'__temp_key__'", "\n", "for", "batch_inputs", "in", "self", ".", "get_batch_inputs", "(", "inputs", ")", ":", "\n", "      ", "batch_outputs", "=", "run_fn", "(", "batch_inputs", ")", "\n", "if", "isinstance", "(", "batch_outputs", ",", "dict", ")", ":", "\n", "        ", "for", "key", ",", "val", "in", "batch_outputs", ".", "items", "(", ")", ":", "\n", "          ", "if", "not", "isinstance", "(", "val", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Each item of the model output should be with '", "\n", "f'type `numpy.ndarray`, but type `{type(val)}` is '", "\n", "f'received for key `{key}`!'", ")", "\n", "", "if", "key", "not", "in", "results", ":", "\n", "            ", "results", "[", "key", "]", "=", "[", "val", "]", "\n", "", "else", ":", "\n", "            ", "results", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "", "elif", "isinstance", "(", "batch_outputs", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "temp_key", "not", "in", "results", ":", "\n", "          ", "results", "[", "temp_key", "]", "=", "[", "batch_outputs", "]", "\n", "", "else", ":", "\n", "          ", "results", "[", "temp_key", "]", ".", "append", "(", "batch_outputs", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f'The model output can only be with type '", "\n", "f'`numpy.ndarray`, or a dictionary of '", "\n", "f'`numpy.ndarray`, but type `{type(batch_outputs)}` '", "\n", "f'is received!'", ")", "\n", "\n", "", "", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "      ", "results", "[", "key", "]", "=", "np", ".", "concatenate", "(", "val", ",", "axis", "=", "0", ")", "\n", "", "return", "results", "if", "temp_key", "not", "in", "results", "else", "results", "[", "temp_key", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.get_temp_logger": [[32, 59], ["logging.getLogger", "ValueError", "logging.getLogger.hasHandlers", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler"], "function", ["None"], ["def", "get_temp_logger", "(", "logger_name", "=", "'logger'", ")", ":", "\n", "  ", "\"\"\"Gets a temporary logger.\n\n  This logger will print all levels of messages onto the screen.\n\n  Args:\n    logger_name: Name of the logger.\n\n  Returns:\n    A `logging.Logger`.\n\n  Raises:\n    ValueError: If the input `logger_name` is empty.\n  \"\"\"", "\n", "if", "not", "logger_name", ":", "\n", "    ", "raise", "ValueError", "(", "f'Input `logger_name` should not be empty!'", ")", "\n", "\n", "", "logger", "=", "logging", ".", "getLogger", "(", "logger_name", ")", "\n", "if", "not", "logger", ".", "hasHandlers", "(", ")", ":", "\n", "    ", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s][%(levelname)s] %(message)s'", ")", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "sh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "sh", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__init__": [[41, 173], ["torch.Module.__init__", "int", "int", "range", "stylegan2_discriminator_network.MiniBatchSTDLayer", "ValueError", "ValueError", "numpy.log2", "numpy.log2", "stylegan2_discriminator_network.DownsamplingLayer", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.ConvBlock", "stylegan2_discriminator_network.ConvBlock", "stylegan2_discriminator_network.ConvBlock", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.add_module", "stylegan2_discriminator_network.ConvBlock", "stylegan2_discriminator_network.DenseBlock", "stylegan2_discriminator_network.DenseBlock", "stylegan2_discriminator_network.ConvBlock", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "max", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "image_channels", "=", "3", ",", "\n", "label_size", "=", "0", ",", "\n", "architecture_type", "=", "'resnet'", ",", "\n", "minibatch_std_group_size", "=", "4", ",", "\n", "minibatch_std_num_channels", "=", "1", ",", "\n", "fmaps_base", "=", "32", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the discriminator with basic settings.\n\n    Args:\n      resolution: The resolution of the input image.\n      image_channels: Number of channels of the input image. (default: 3)\n      label_size: Size of additional labels. (default: 0)\n      architecture_type: Defines the architecture type. (default: `resnet`)\n      minibatch_std_group_size: Group size for the minibatch standard deviation\n        layer. 0 means disable. (default: 4)\n      minibatch_std_num_channels: Number of new channels after the minibatch\n        standard deviation layer. (default: 1)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        This field doubles that of StyleGAN. (default: 32 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported, or\n        `architecture_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "", "if", "architecture_type", "not", "in", "_ARCHITECTURES_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid fused-scale option: {architecture_type}!\\n'", "\n", "f'Architectures allowed: {_ARCHITECTURES_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "architecture_type", "=", "architecture_type", "\n", "self", ".", "minibatch_std_group_size", "=", "minibatch_std_group_size", "\n", "self", ".", "minibatch_std_num_channels", "=", "minibatch_std_num_channels", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "\n", "# Input convolution layer for each resolution (if needed).", "\n", "if", "res_log2", "==", "self", ".", "final_res_log2", "or", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'input{block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "image_channels", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/FromRGB/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/FromRGB/bias'", ")", "\n", "\n", "# Convolution block for each resolution (except the last one).", "\n", "", "if", "res", "!=", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "scale_factor", "=", "2", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/bias'", ")", "\n", "\n", "if", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "          ", "self", ".", "add_module", "(", "\n", "f'skip_layer{block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "scale_factor", "=", "2", ",", "\n", "add_bias", "=", "False", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'skip_layer{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Skip/weight'", ")", "\n", "\n", "# Convolution block for last resolution.", "\n", "", "", "else", ":", "\n", "        ", "extra_channels", "=", "self", ".", "minibatch_std_num_channels", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", "+", "extra_channels", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", "*", "res", "*", "res", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 2}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "max", "(", "self", ".", "label_size", ",", "1", ")", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.fc.weight'", "]", "=", "(", "\n", "f'Output/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.bias'", "]", "=", "(", "\n", "f'Output/bias'", ")", "\n", "\n", "", "", "if", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "self", ".", "downsample", "=", "DownsamplingLayer", "(", ")", "\n", "", "self", ".", "minibatch_std_layer", "=", "MiniBatchSTDLayer", "(", "\n", "group_size", "=", "self", ".", "minibatch_std_group_size", ",", "\n", "num_channels", "=", "self", ".", "minibatch_std_num_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.get_nf": [[174, 177], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.forward": [[178, 240], ["ValueError", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.input0", "range", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ValueError", "ValueError", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "range", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.minibatch_std_layer", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.input0", "range", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.downsample", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.minibatch_std_layer", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.minibatch_std_layer", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "numpy.sqrt", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "image", ",", "label", "=", "None", ")", ":", "\n", "    ", "if", "image", ".", "ndim", "!=", "4", "or", "image", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input image should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {image.shape} is received!'", ")", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "if", "label", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model requires an additional label (with size '", "\n", "f'{self.label_size}) as inputs, but no label is '", "\n", "f'received!'", ")", "\n", "", "if", "label", ".", "ndim", "!=", "2", "or", "label", ".", "shape", "!=", "(", "image", ".", "shape", "[", "0", "]", ",", "self", ".", "label_size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input labels should be with shape [batch_size, '", "\n", "f'label_size], where `batch_size` equals to that of '", "\n", "f'images ({image.shape[0]}) and `label_size` equals '", "\n", "f'to {self.label_size}!\\n'", "\n", "f'But {label.shape} is received!'", ")", "\n", "\n", "", "", "if", "self", ".", "architecture_type", "==", "'origin'", ":", "\n", "      ", "x", "=", "self", ".", "input0", "(", "image", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "if", "res_log2", "==", "self", ".", "init_res_log2", ":", "\n", "          ", "x", "=", "self", ".", "minibatch_std_layer", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "if", "block_idx", "==", "0", ":", "\n", "          ", "x", "=", "self", ".", "__getattr__", "(", "f'input{block_idx}'", ")", "(", "image", ")", "\n", "", "else", ":", "\n", "          ", "image", "=", "self", ".", "downsample", "(", "image", ")", "\n", "x", "=", "x", "+", "self", ".", "__getattr__", "(", "f'input{block_idx}'", ")", "(", "image", ")", "\n", "", "if", "res_log2", "==", "self", ".", "init_res_log2", ":", "\n", "          ", "x", "=", "self", ".", "minibatch_std_layer", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "      ", "x", "=", "self", ".", "input0", "(", "image", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "if", "res_log2", "!=", "self", ".", "init_res_log2", ":", "\n", "          ", "residual", "=", "self", ".", "__getattr__", "(", "f'skip_layer{block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "x", "=", "(", "x", "+", "residual", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "self", ".", "minibatch_std_layer", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "x", "=", "torch", ".", "sum", "(", "x", "*", "label", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.MiniBatchSTDLayer.__init__": [[245, 250], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "group_size", "=", "16", ",", "num_channels", "=", "1", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.MiniBatchSTDLayer.forward": [[251, 264], ["min", "x.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "y.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "group_size", "<=", "1", ":", "\n", "      ", "return", "x", "\n", "", "ng", "=", "min", "(", "self", ".", "group_size", ",", "x", ".", "shape", "[", "0", "]", ")", "# [NCHW]", "\n", "nc", "=", "self", ".", "num_channels", "\n", "y", "=", "x", ".", "view", "(", "ng", ",", "-", "1", ",", "nc", ",", "x", ".", "shape", "[", "1", "]", "//", "nc", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [GMncHW]", "\n", "y", "=", "y", "-", "torch", ".", "mean", "(", "y", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "# [GMncHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", "**", "2", ",", "dim", "=", "0", ")", "# [MncHW]", "\n", "y", "=", "torch", ".", "sqrt", "(", "y", "+", "self", ".", "epsilon", ")", "# [MncHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdim", "=", "True", ")", "# [Mn111]", "\n", "y", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "2", ")", "# [Mn11]", "\n", "y", "=", "y", ".", "repeat", "(", "ng", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [NnHW]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.DownsamplingLayer.__init__": [[272, 296], ["torch.Module.__init__", "numpy.outer", "numpy.transpose", "stylegan2_discriminator_network.DownsamplingLayer.register_buffer", "stylegan2_discriminator_network.DownsamplingLayer.kernel.flip", "numpy.ones", "numpy.array", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ",", "kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "extra_padding", "=", "0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "scale_factor", ">=", "1", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "if", "extra_padding", "!=", "0", ":", "\n", "      ", "assert", "scale_factor", "==", "1", "\n", "\n", "", "if", "kernel", "is", "None", ":", "\n", "      ", "kernel", "=", "np", ".", "ones", "(", "(", "scale_factor", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "      ", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "assert", "kernel", ".", "ndim", "==", "1", "\n", "kernel", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ")", "\n", "kernel", "=", "kernel", "/", "np", ".", "sum", "(", "kernel", ")", "\n", "assert", "kernel", ".", "ndim", "==", "2", "\n", "assert", "kernel", ".", "shape", "[", "0", "]", "==", "kernel", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "kernel", "=", "np", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "torch", ".", "from_numpy", "(", "kernel", ")", ")", "\n", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "flip", "(", "0", ",", "1", ")", "\n", "padding", "=", "kernel", ".", "shape", "[", "2", "]", "-", "scale_factor", "+", "extra_padding", "\n", "self", ".", "padding", "=", "(", "(", "padding", "+", "1", ")", "//", "2", ",", "padding", "//", "2", ",", "\n", "(", "padding", "+", "1", ")", "//", "2", ",", "padding", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.DownsamplingLayer.forward": [[297, 305], ["x.view.view.view", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.view.view.view"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "4", "\n", "channels", "=", "x", ".", "shape", "[", "1", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "self", ".", "padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "stride", "=", "self", ".", "scale_factor", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "channels", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.ConvBlock.__init__": [[310, 377], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "stylegan2_discriminator_network.DownsamplingLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "scale_factor", "=", "1", ",", "\n", "filtering_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "weight_gain", "=", "1.0", ",", "\n", "lr_multiplier", "=", "1.0", ",", "\n", "add_bias", "=", "True", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    NOTE: Wscale is used as default.\n\n    Args:\n      in_channels: Number of channels of the input tensor.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      scale_factor: Scale factor for downsampling. `1` means skip downsampling.\n      filtering_kernel: Kernel used for filtering before downsampling.\n      weight_gain: Gain factor for weight parameter in convolutional layer.\n      lr_multiplier: Learning rate multiplier.\n      add_bias: Whether to add bias after convolution.\n      activation_type: Type of activation. Support `linear`, `relu`, `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "scale_factor", ">", "1", ":", "\n", "      ", "self", ".", "filter", "=", "DownsamplingLayer", "(", "scale_factor", "=", "1", ",", "\n", "kernel", "=", "filtering_kernel", ",", "\n", "extra_padding", "=", "kernel_size", "-", "scale_factor", ")", "\n", "padding", "=", "0", "# Padding is done in `DownsamplingLayer`.", "\n", "", "else", ":", "\n", "      ", "self", ".", "filter", "=", "nn", ".", "Identity", "(", ")", "\n", "assert", "kernel_size", "%", "2", "==", "1", "\n", "padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "scale_factor", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_bias", "=", "add_bias", "\n", "if", "add_bias", ":", "\n", "      ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n", "", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "weight_scale", "=", "weight_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activate_scale", "=", "1.0", "*", "lr_multiplier", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "*", "lr_multiplier", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "*", "lr_multiplier", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.ConvBlock.forward": [[379, 386], ["stylegan2_discriminator_network.ConvBlock.filter", "stylegan2_discriminator_network.ConvBlock.conv", "stylegan2_discriminator_network.ConvBlock.activate", "stylegan2_discriminator_network.ConvBlock.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "weight_scale", "\n", "if", "self", ".", "add_bias", ":", "\n", "      ", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "*", "self", ".", "activate_scale", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.DenseBlock.__init__": [[391, 436], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "weight_gain", "=", "1.0", ",", "\n", "lr_multiplier", "=", "1.0", ",", "\n", "add_bias", "=", "True", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    NOTE: Wscale is used as default.\n\n    Args:\n      in_channels: Number of channels of the input tensor.\n      out_channels: Number of channels of the output tensor.\n      weight_gain: Gain factor for weight parameter in dense layer.\n      lr_multiplier: Learning rate multiplier.\n      add_bias: Whether to add bias after fully-connected operation.\n      activation_type: Type of activation. Support `linear`, `relu`, `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_bias", "=", "add_bias", "\n", "if", "add_bias", ":", "\n", "      ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n", "", "self", ".", "weight_scale", "=", "weight_gain", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activate_scale", "=", "1.0", "*", "lr_multiplier", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "*", "lr_multiplier", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "*", "lr_multiplier", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator_network.DenseBlock.forward": [[438, 446], ["x.view.view.view", "stylegan2_discriminator_network.DenseBlock.fc", "stylegan2_discriminator_network.DenseBlock.activate", "stylegan2_discriminator_network.DenseBlock.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "*", "self", ".", "weight_scale", "\n", "if", "self", ".", "add_bias", ":", "\n", "      ", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "*", "self", ".", "activate_scale", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.__init__": [[25, 31], ["base_generator.BaseGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ",", "truncation_psi", "=", "None", ",", "randomize_noise", "=", "False", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'stylegan2'", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "self", ".", "truncation_psi", "=", "truncation_psi", "if", "truncation_psi", "is", "not", "None", "else", "model_settings", ".", "STYLEGAN2_TRUNCATION_PSI", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.build": [[33, 64], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "stylegan2_generator_network.StyleGAN2GeneratorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "z_space_dim", "=", "getattr", "(", "self", ",", "'z_space_dim'", ",", "512", ")", "\n", "self", ".", "w_space_dim", "=", "getattr", "(", "self", ",", "'w_space_dim'", ",", "512", ")", "\n", "self", ".", "num_mapping_layers", "=", "getattr", "(", "self", ",", "'num_mapping_layers'", ",", "8", ")", "\n", "self", ".", "repeat_w", "=", "getattr", "(", "self", ",", "'repeat_w'", ",", "True", ")", "\n", "self", ".", "final_tanh", "=", "getattr", "(", "self", ",", "'final_tanh'", ",", "False", ")", "\n", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "g_architecture_type", "=", "getattr", "(", "self", ",", "'g_architecture_type'", ",", "'skip'", ")", "\n", "self", ".", "fused_modulate", "=", "getattr", "(", "self", ",", "'fused_modulate'", ",", "True", ")", "\n", "#self.truncation_psi = model_settings.STYLEGAN2_TRUNCATION_PSI", "\n", "self", ".", "truncation_layers", "=", "model_settings", ".", "STYLEGAN2_TRUNCATION_LAYERS", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "32", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "self", ".", "net", "=", "StyleGAN2GeneratorNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "z_space_dim", "=", "self", ".", "z_space_dim", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "num_mapping_layers", "=", "self", ".", "num_mapping_layers", ",", "\n", "repeat_w", "=", "self", ".", "repeat_w", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "final_tanh", "=", "self", ".", "final_tanh", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "architecture_type", "=", "self", ".", "g_architecture_type", ",", "\n", "fused_modulate", "=", "self", ".", "fused_modulate", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_layers", "=", "self", ".", "truncation_layers", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "self", ".", "num_layers", "=", "self", ".", "net", ".", "num_layers", "\n", "self", ".", "model_specific_vars", "=", "[", "'truncation.truncation'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.convert_tf_weights": [[65, 144], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "stylegan2_generator.StyleGAN2Generator.logger.info", "sys.path.insert", "sys.path.pop", "stylegan2_generator.StyleGAN2Generator.logger.info", "stylegan2_generator.StyleGAN2Generator.logger.info", "dict", "dict.update", "dict.update", "stylegan2_generator.StyleGAN2Generator.net.state_dict", "stylegan2_generator.StyleGAN2Generator.net.pth_to_tf_var_mapping.items", "stylegan2_generator.StyleGAN2Generator.logger.info", "stylegan2_generator.StyleGAN2Generator.logger.info", "torch.save", "stylegan2_generator.StyleGAN2Generator.logger.info", "stylegan2_generator.StyleGAN2Generator.load", "stylegan2_generator.StyleGAN2Generator.logger.info", "stylegan2_generator.StyleGAN2Generator.net.eval().to", "range", "stylegan2_generator.StyleGAN2Generator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "dict", "dict", "stylegan2_generator.StyleGAN2Generator.logger.debug", "torch.from_numpy", "stylegan2_generator.StyleGAN2Generator.logger.warning", "tf.compat.v1.InteractiveSession.close", "stylegan2_generator.StyleGAN2Generator.easy_sample", "tf_net.run", "numpy.average", "stylegan2_generator.StyleGAN2Generator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "stylegan2_generator.StyleGAN2Generator.net.eval", "numpy.random.randint", "numpy.zeros", "stylegan2_generator.StyleGAN2Generator.synthesize", "numpy.abs", "tf_net.components.mapping.__getstate__", "tf_net.components.synthesis.__getstate__", "var.permute.permute.permute", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.synthesize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "tf_vars", ".", "update", "(", "\n", "dict", "(", "tf_net", ".", "components", ".", "mapping", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", ")", "\n", "tf_vars", ".", "update", "(", "\n", "dict", "(", "tf_net", ".", "components", ".", "synthesis", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "latent_code", "=", "self", ".", "easy_sample", "(", "1", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "label_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "label_size", ")", "\n", "tf_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "label_size", ")", ",", "np", ".", "float32", ")", "\n", "tf_label", "[", "0", ",", "label_id", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "label_id", "=", "None", "\n", "tf_label", "=", "None", "\n", "", "tf_output", "=", "tf_net", ".", "run", "(", "latent_code", ",", "\n", "tf_label", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_cutoff", "=", "self", ".", "truncation_layers", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ")", "\n", "pth_output", "=", "self", ".", "synthesize", "(", "latent_code", ",", "labels", "=", "label_id", ")", "[", "'image'", "]", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.sample": [[145, 180], ["latent_space_type.lower.lower.lower", "numpy.concatenate.astype", "numpy.random.randn", "stylegan2_generator.StyleGAN2Generator.easy_sample", "stylegan2_generator.StyleGAN2Generator.get_batch_inputs", "numpy.concatenate", "ValueError", "stylegan2_generator.StyleGAN2Generator.easy_synthesize", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_synthesize"], ["", "def", "sample", "(", "self", ",", "num", ",", "latent_space_type", "=", "'z'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Samples latent codes randomly.\n\n    Args:\n      num: Number of latent codes to sample. Should be positive.\n      latent_space_type: Type of latent space from which to sample latent code.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n\n    Returns:\n      A `numpy.ndarray` as sampled latend codes.\n\n    Raises:\n      ValueError: If the given `latent_space_type` is not supported.\n    \"\"\"", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "latent_codes", "=", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "z_space_dim", ")", "\n", "", "elif", "latent_space_type", "in", "[", "'w'", ",", "'wp'", "]", ":", "\n", "      ", "z", "=", "self", ".", "easy_sample", "(", "num", ",", "latent_space_type", "=", "'z'", ")", "\n", "latent_codes", "=", "[", "]", "\n", "for", "inputs", "in", "self", ".", "get_batch_inputs", "(", "z", ",", "self", ".", "ram_size", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "easy_synthesize", "(", "latent_codes", "=", "inputs", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "False", ")", "\n", "latent_codes", ".", "append", "(", "outputs", "[", "latent_space_type", "]", ")", "\n", "", "latent_codes", "=", "np", ".", "concatenate", "(", "latent_codes", ",", "axis", "=", "0", ")", "\n", "if", "latent_space_type", "==", "'w'", ":", "\n", "        ", "assert", "latent_codes", ".", "shape", "==", "(", "num", ",", "self", ".", "w_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "        ", "assert", "latent_codes", ".", "shape", "==", "(", "num", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.preprocess": [[181, 212], ["latent_space_type.lower.lower.lower", "latent_codes.reshape.reshape.astype", "isinstance", "ValueError", "latent_codes.reshape.reshape.reshape", "numpy.linalg.norm", "numpy.sqrt", "latent_codes.reshape.reshape.reshape", "latent_codes.reshape.reshape.reshape", "ValueError"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "latent_codes", ",", "latent_space_type", "=", "'z'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input latent code if needed.\n\n    Args:\n      latent_codes: The input latent codes for preprocessing.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n\n    Returns:\n      The preprocessed latent codes which can be used as final input for the\n        generator.\n\n    Raises:\n      ValueError: If the given `latent_space_type` is not supported.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "z_space_dim", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "latent_codes", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "latent_codes", "=", "latent_codes", "/", "norm", "*", "np", ".", "sqrt", "(", "self", ".", "z_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "w_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator._synthesize": [[213, 304], ["stylegan2_generator.StyleGAN2Generator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "isinstance", "ValueError", "ValueError", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.mapping", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.get_value", "range", "stylegan2_generator.StyleGAN2Generator.net.synthesis.__getattr__().style", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.net.synthesis", "stylegan2_generator.StyleGAN2Generator.get_value", "torch.cuda.empty_cache", "stylegan2_generator.StyleGAN2Generator.astype", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.net.synthesis.__getattr__().style", "stylegan2_generator.StyleGAN2Generator.get_value", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "ValueError", "stylegan2_generator.StyleGAN2Generator.net.synthesis.__getattr__", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.net.synthesis.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "_synthesize", "(", "self", ",", "\n", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "True", ")", ":", "\n", "    ", "\"\"\"Synthesizes images with given latent codes.\n\n    One can choose whether to generate the layer-wise style codes.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n      labels: Additional labels for conditional generation.\n      generate_style: Whether to generate the layer-wise style codes. (default:\n        False)\n      generate_image: Whether to generate the final image synthesis. (default:\n        True)\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "if", "generate_style", ":", "\n", "      ", "for", "i", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "style", "=", "self", ".", "net", ".", "synthesis", ".", "__getattr__", "(", "f'layer{i}'", ")", ".", "style", "(", "wps", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "results", "[", "f'style{i:02d}'", "]", "=", "self", ".", "get_value", "(", "style", ")", "\n", "", "style", "=", "self", ".", "net", ".", "synthesis", ".", "__getattr__", "(", "\n", "f'output{i // 2}'", ")", ".", "style", "(", "wps", "[", ":", ",", "i", "+", "1", ",", ":", "]", ")", "\n", "results", "[", "f'style{i + 1:02d}'", "]", "=", "self", ".", "get_value", "(", "style", ")", "\n", "\n", "", "if", "generate_image", ":", "\n", "      ", "images", "=", "self", ".", "net", ".", "synthesis", "(", "wps", ")", "\n", "results", "[", "'image'", "]", "=", "self", ".", "get_value", "(", "images", ")", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.synthesize": [[305, 319], ["stylegan2_generator.StyleGAN2Generator.batch_run", "stylegan2_generator.StyleGAN2Generator._synthesize"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator._synthesize"], ["", "def", "synthesize", "(", "self", ",", "\n", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "latent_codes", ",", "\n", "lambda", "x", ":", "self", ".", "_synthesize", "(", "\n", "x", ",", "\n", "latent_space_type", "=", "latent_space_type", ",", "\n", "labels", "=", "labels", ",", "\n", "generate_style", "=", "generate_style", ",", "\n", "generate_image", "=", "generate_image", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.__call__": [[320, 404], ["stylegan2_generator.StyleGAN2Generator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "stylegan2_generator.StyleGAN2Generator.net.synthesis", "isinstance", "ValueError", "ValueError", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.mapping", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.get_value", "torch.cuda.empty_cache", "stylegan2_generator.StyleGAN2Generator.astype", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "ValueError", "ValueError", "latent_codes.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor"], ["", "def", "__call__", "(", "self", ",", "\n", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ")", ":", "\n", "    ", "\"\"\"Synthesizes images with given latent codes.\n\n    One can choose whether to generate the layer-wise style codes.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n      labels: Additional labels for conditional generation.\n      generate_style: Whether to generate the layer-wise style codes. (default:\n        False)\n      generate_image: Whether to generate the final image synthesis. (default:\n        True)\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "image", ",", "feats", ",", "images", "=", "self", ".", "net", ".", "synthesis", "(", "wps", ",", "\n", "generate_feature", "=", "True", ",", "\n", "generate_imgsery", "=", "True", ")", "\n", "results", "[", "'feature'", "]", "=", "feats", "\n", "results", "[", "'image'", "]", "=", "image", "\n", "results", "[", "'image_sery'", "]", "=", "images", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.forward_middle": [[405, 487], ["stylegan2_generator.StyleGAN2Generator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "stylegan2_generator.StyleGAN2Generator.net.synthesis.forward_middle", "isinstance", "ValueError", "ValueError", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.mapping", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.get_value", "torch.cuda.empty_cache", "stylegan2_generator.StyleGAN2Generator.astype", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "ValueError", "ValueError", "latent_codes.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.forward_middle", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor"], ["", "def", "forward_middle", "(", "self", ",", "\n", "latent_codes", ",", "\n", "x", ",", "\n", "img", ",", "\n", "index", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Forward through generator starting from a featuremap x and intermediate image img.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n      x: The featuremap as the starting point of forwarding.\n      img: The intermediate image. Needed for StyleGAN2 skip architecture.\n      index: The starting layer index.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n      labels: Additional labels for conditional generation.\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "images", ",", "feats", "=", "self", ".", "net", ".", "synthesis", ".", "forward_middle", "(", "wps", ",", "x", ",", "img", ",", "index", ")", "\n", "results", "[", "'feature'", "]", "=", "feats", "\n", "results", "[", "'image'", "]", "=", "images", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator.StyleGAN2Generator.forward_multiple": [[488, 573], ["stylegan2_generator.StyleGAN2Generator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "stylegan2_generator.StyleGAN2Generator.net.synthesis.forward_multiple", "isinstance", "ValueError", "ValueError", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.mapping", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "stylegan2_generator.StyleGAN2Generator.get_value", "torch.cuda.empty_cache", "stylegan2_generator.StyleGAN2Generator.astype", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "stylegan2_generator.StyleGAN2Generator.net.truncation", "stylegan2_generator.StyleGAN2Generator.get_value", "ValueError", "latent_codes.astype", "stylegan2_generator.StyleGAN2Generator.to_tensor", "ValueError", "ValueError", "latent_codes.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.forward_multiple", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor"], ["", "def", "forward_multiple", "(", "self", ",", "\n", "latent_codes", ",", "\n", "x", ",", "\n", "img", ",", "\n", "xs", ",", "\n", "mask", ",", "\n", "index", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Forward through generator starting from a featuremap x and intermediate image img.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n      x: The featuremap as the starting point of forwarding.\n      img: The intermediate image. Needed for StyleGAN2 skip architecture.\n      index: The starting layer index.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n      labels: Additional labels for conditional generation.\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "images", ",", "feats", "=", "self", ".", "net", ".", "synthesis", ".", "forward_multiple", "(", "\n", "wps", ",", "x", ",", "mask", ",", "xs", ",", "img", ",", "index", ")", "\n", "results", "[", "'feature'", "]", "=", "feats", "\n", "results", "[", "'image'", "]", "=", "images", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleGANGeneratorNet.__init__": [[39, 139], ["torch.Module.__init__", "stylegan_generator_network.MappingModule", "stylegan_generator_network.TruncationModule", "stylegan_generator_network.SynthesisModule", "stylegan_generator_network.StyleGANGeneratorNet.mapping.pth_to_tf_var_mapping.items", "stylegan_generator_network.StyleGANGeneratorNet.truncation.pth_to_tf_var_mapping.items", "stylegan_generator_network.StyleGANGeneratorNet.synthesis.pth_to_tf_var_mapping.items", "ValueError", "ValueError", "int", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "z_space_dim", "=", "512", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "num_mapping_layers", "=", "8", ",", "\n", "repeat_w", "=", "True", ",", "\n", "image_channels", "=", "3", ",", "\n", "final_tanh", "=", "False", ",", "\n", "label_size", "=", "0", ",", "\n", "fused_scale", "=", "'auto'", ",", "\n", "truncation_psi", "=", "0.7", ",", "\n", "truncation_layers", "=", "8", ",", "\n", "randomize_noise", "=", "False", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the generator with basic settings.\n\n    Args:\n      resolution: The resolution of the output image.\n      z_space_dim: Dimension of the initial latent space. (default: 512)\n      w_space_dim: Dimension of the disentangled latent space. (default: 512)\n      num_mapping_layers: Number of fully-connected layers to map Z space to W\n        space. (default: 8)\n      repeat_w: Whether to use same w for different layers. (default: True)\n      image_channels: Number of channels of output image. (default: 3)\n      final_tanh: Whether to use tanh to control pixel range. (default: False)\n      label_size: Size of additional labels. (default: 0)\n      fused_scale: If set as `True`, `conv2d_transpose` is used for upscaling.\n        If set as `False`, `upsample + conv2d` is used for upscaling. If set as\n        `auto`, `upsample + conv2d` is used for bottom layers until resolution\n        reaches `_AUTO_FUSED_SCALE_MIN_RES`. (default: `auto`)\n      truncation_psi: Style strength multiplier for the truncation trick.\n        `None` or `1.0` indicates no truncation. (default: 0.7)\n      truncation_layers: Number of layers for which to apply the truncation\n        trick. `None` or `0` indicates no truncation. (default: 8)\n      randomize_noise: Whether to add random noise for each convolutional layer.\n        (default: False)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 16 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported, or `fused_scale`\n        is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "", "if", "fused_scale", "not", "in", "_FUSED_SCALE_OPTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid fused-scale option: {fused_scale}!\\n'", "\n", "f'Options allowed: {_FUSED_SCALE_OPTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "z_space_dim", "=", "z_space_dim", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "num_mapping_layers", "=", "num_mapping_layers", "\n", "self", ".", "repeat_w", "=", "repeat_w", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "final_tanh", "=", "final_tanh", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "truncation_psi", "=", "truncation_psi", "\n", "self", ".", "truncation_layers", "=", "truncation_layers", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "num_layers", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", "//", "self", ".", "init_res", "*", "2", ")", ")", "*", "2", "\n", "\n", "mapping_space_dim", "=", "self", ".", "w_space_dim", "*", "(", "1", "if", "repeat_w", "else", "self", ".", "num_layers", ")", "\n", "self", ".", "mapping", "=", "MappingModule", "(", "input_space_dim", "=", "self", ".", "z_space_dim", ",", "\n", "hidden_space_dim", "=", "self", ".", "fmaps_max", ",", "\n", "final_space_dim", "=", "mapping_space_dim", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "num_layers", "=", "self", ".", "num_mapping_layers", ")", "\n", "self", ".", "truncation", "=", "TruncationModule", "(", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "repeat_w", "=", "self", ".", "repeat_w", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_layers", "=", "self", ".", "truncation_layers", ")", "\n", "self", ".", "synthesis", "=", "SynthesisModule", "(", "init_resolution", "=", "self", ".", "init_res", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "final_tanh", "=", "self", ".", "final_tanh", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "self", ".", "mapping", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'mapping.{key}'", "]", "=", "val", "\n", "", "for", "key", ",", "val", "in", "self", ".", "truncation", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'truncation.{key}'", "]", "=", "val", "\n", "", "for", "key", ",", "val", "in", "self", ".", "synthesis", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'synthesis.{key}'", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleGANGeneratorNet.parallelize": [[140, 144], ["torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel"], "methods", ["None"], ["", "", "def", "parallelize", "(", "self", ",", "gpus", ")", ":", "\n", "    ", "self", ".", "mapping", "=", "nn", ".", "DataParallel", "(", "self", ".", "mapping", ",", "gpus", ")", "\n", "self", ".", "truncation", "=", "nn", ".", "DataParallel", "(", "self", ".", "truncation", ",", "gpus", ")", "\n", "self", ".", "synthesis", "=", "nn", ".", "DataParallel", "(", "self", ".", "synthesis", ",", "gpus", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleGANGeneratorNet.forward": [[145, 150], ["stylegan_generator_network.StyleGANGeneratorNet.mapping", "stylegan_generator_network.StyleGANGeneratorNet.truncation", "stylegan_generator_network.StyleGANGeneratorNet.synthesis"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z", ",", "l", "=", "None", ")", ":", "\n", "    ", "w", "=", "self", ".", "mapping", "(", "z", ",", "l", ")", "\n", "w", "=", "self", ".", "truncation", "(", "w", ")", "\n", "x", "=", "self", ".", "synthesis", "(", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.MappingModule.__init__": [[158, 184], ["torch.Module.__init__", "range", "stylegan_generator_network.PixelNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_generator_network.MappingModule.add_module", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan_generator_network.DenseBlock", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_space_dim", "=", "512", ",", "\n", "hidden_space_dim", "=", "512", ",", "\n", "final_space_dim", "=", "512", ",", "\n", "label_size", "=", "0", ",", "\n", "num_layers", "=", "8", ",", "\n", "normalize_input", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_space_dim", "=", "input_space_dim", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "norm", "=", "PixelNormLayer", "(", ")", "if", "normalize_input", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "dim_mul", "=", "2", "if", "label_size", "else", "1", "\n", "in_dim", "=", "input_space_dim", "*", "dim_mul", "if", "i", "==", "0", "else", "hidden_space_dim", "\n", "out_dim", "=", "final_space_dim", "if", "i", "==", "(", "num_layers", "-", "1", ")", "else", "hidden_space_dim", "\n", "self", ".", "add_module", "(", "f'dense{i}'", ",", "DenseBlock", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'dense{i}.fc.weight'", "]", "=", "f'Dense{i}/weight'", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'dense{i}.wscale.bias'", "]", "=", "f'Dense{i}/bias'", "\n", "", "if", "label_size", ":", "\n", "      ", "self", ".", "label_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "label_size", ",", "input_space_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'label_weight'", "]", "=", "f'LabelConcat/weight'", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.MappingModule.forward": [[185, 209], ["stylegan_generator_network.MappingModule.norm", "range", "ValueError", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ValueError", "ValueError", "stylegan_generator_network.MappingModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "l", "=", "None", ")", ":", "\n", "    ", "if", "z", ".", "ndim", "!=", "2", "or", "z", ".", "shape", "[", "1", "]", "!=", "self", ".", "input_space_dim", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input latent code should be with shape [batch_size, '", "\n", "f'input_dim], where `input_dim` equals to '", "\n", "f'{self.input_space_dim}!\\n'", "\n", "f'But {z.shape} is received!'", ")", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "if", "l", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model requires an additional label (with size '", "\n", "f'{self.label_size}) as inputs, but no label is '", "\n", "f'received!'", ")", "\n", "", "if", "l", ".", "ndim", "!=", "2", "or", "l", ".", "shape", "!=", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "label_size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input label should be with shape [batch_size, '", "\n", "f'label_size], where `batch_size` equals to that of '", "\n", "f'latent codes ({z.shape[0]}) and `label_size` equals '", "\n", "f'to {self.label_size}!\\n'", "\n", "f'But {l.shape} is received!'", ")", "\n", "", "embedding", "=", "torch", ".", "matmul", "(", "l", ",", "self", ".", "label_weight", ")", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z", ",", "embedding", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "w", "=", "self", ".", "norm", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "w", "=", "self", ".", "__getattr__", "(", "f'dense{i}'", ")", "(", "w", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.TruncationModule.__init__": [[214, 239], ["torch.Module.__init__", "stylegan_generator_network.TruncationModule.register_buffer", "numpy.arange().reshape", "numpy.ones_like", "stylegan_generator_network.TruncationModule.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "repeat_w", "=", "True", ",", "\n", "truncation_psi", "=", "0.7", ",", "\n", "truncation_layers", "=", "8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "repeat_w", "=", "repeat_w", "\n", "if", "truncation_psi", "is", "not", "None", "and", "truncation_layers", "is", "not", "None", ":", "\n", "      ", "self", ".", "use_truncation", "=", "True", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_truncation", "=", "False", "\n", "truncation_psi", "=", "1.0", "\n", "truncation_layers", "=", "0", "\n", "\n", "", "self", ".", "register_buffer", "(", "'w_avg'", ",", "torch", ".", "zeros", "(", "w_space_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'w_avg'", ":", "'dlatent_avg'", "}", "\n", "\n", "layer_idx", "=", "np", ".", "arange", "(", "self", ".", "num_layers", ")", ".", "reshape", "(", "1", ",", "self", ".", "num_layers", ",", "1", ")", "\n", "coefs", "=", "np", ".", "ones_like", "(", "layer_idx", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "coefs", "[", "layer_idx", "<", "truncation_layers", "]", "*=", "truncation_psi", "\n", "self", ".", "register_buffer", "(", "'truncation'", ",", "torch", ".", "from_numpy", "(", "coefs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.TruncationModule.forward": [[240, 253], ["stylegan_generator_network.TruncationModule.w_avg.view", "w.view.view.view().repeat", "w.view.view.view", "w.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "==", "2", ":", "\n", "      ", "if", "self", ".", "repeat_w", ":", "\n", "        ", "assert", "w", ".", "shape", "[", "1", "]", "==", "self", ".", "w_space_dim", "\n", "w", "=", "w", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "w_space_dim", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_layers", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "w", ".", "shape", "[", "1", "]", "==", "self", ".", "w_space_dim", "*", "self", ".", "num_layers", "\n", "w", "=", "w", ".", "view", "(", "-", "1", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "", "assert", "w", ".", "ndim", "==", "3", "and", "w", ".", "shape", "[", "1", ":", "]", "==", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "if", "self", ".", "use_truncation", ":", "\n", "      ", "w_avg", "=", "self", ".", "w_avg", ".", "view", "(", "1", ",", "1", ",", "self", ".", "w_space_dim", ")", "\n", "w", "=", "w_avg", "+", "(", "w", "-", "w_avg", ")", "*", "self", ".", "truncation", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.SynthesisModule.__init__": [[261, 389], ["torch.Module.__init__", "int", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "stylegan_generator_network.ResolutionScalingLayer", "numpy.log2", "numpy.log2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "stylegan_generator_network.SynthesisModule.add_module", "stylegan_generator_network.SynthesisModule.add_module", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_generator_network.SynthesisModule.add_module", "stylegan_generator_network.SynthesisModule.add_module", "stylegan_generator_network.ConvBlock", "stylegan_generator_network.LastConvBlock", "stylegan_generator_network.FirstConvBlock", "stylegan_generator_network.UpConvBlock", "stylegan_generator_network.SynthesisModule.get_nf", "stylegan_generator_network.SynthesisModule.get_nf", "stylegan_generator_network.SynthesisModule.get_nf", "stylegan_generator_network.SynthesisModule.get_nf", "stylegan_generator_network.SynthesisModule.get_nf", "stylegan_generator_network.SynthesisModule.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "init_resolution", "=", "4", ",", "\n", "resolution", "=", "1024", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "image_channels", "=", "3", ",", "\n", "final_tanh", "=", "False", ",", "\n", "fused_scale", "=", "'auto'", ",", "\n", "randomize_noise", "=", "False", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_res", "=", "init_resolution", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "final_res_log2", "-", "self", ".", "init_res_log2", "+", "1", ")", "*", "2", "\n", "\n", "# Level of detail (used for progressive training).", "\n", "self", ".", "lod", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'lod'", ":", "'lod'", "}", "\n", "\n", "# pylint: disable=line-too-long", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "\n", "# First convolution layer for each resolution.", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "FirstConvBlock", "(", "init_resolution", "=", "self", ".", "init_res", ",", "\n", "channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.const'", "]", "=", "(", "\n", "f'{res}x{res}/Const/const'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Const/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.style_mod.dense.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Const/StyleMod/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.style_mod.dense.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Const/StyleMod/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.apply_noise.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Const/Noise/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.apply_noise.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx}'", ")", "\n", "", "else", ":", "\n", "        ", "if", "self", ".", "fused_scale", "==", "'auto'", ":", "\n", "          ", "fused_scale", "=", "(", "res", ">=", "_AUTO_FUSED_SCALE_MIN_RES", ")", "\n", "", "else", ":", "\n", "          ", "fused_scale", "=", "self", ".", "fused_scale", "\n", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "UpConvBlock", "(", "resolution", "=", "res", ",", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ",", "\n", "fused_scale", "=", "fused_scale", ")", ")", "\n", "if", "fused_scale", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/weight'", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/weight'", ")", "\n", "", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.style_mod.dense.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/StyleMod/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.style_mod.dense.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/StyleMod/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.apply_noise.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/Noise/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.epilogue.apply_noise.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx}'", ")", "\n", "\n", "# Second convolution layer for each resolution.", "\n", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "resolution", "=", "res", ",", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", ")", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.style_mod.dense.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/StyleMod/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.style_mod.dense.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/StyleMod/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.apply_noise.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/Noise/weight'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.style_mod.dense.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/StyleMod/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.style_mod.dense.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/StyleMod/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.apply_noise.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/Noise/weight'", ")", "\n", "", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.epilogue.apply_noise.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx + 1}'", ")", "\n", "\n", "# Output convolution layer for each resolution.", "\n", "self", ".", "add_module", "(", "\n", "f'output{block_idx}'", ",", "\n", "LastConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "image_channels", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'ToRGB_lod{self.final_res_log2 - res_log2}/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.bias'", "]", "=", "(", "\n", "f'ToRGB_lod{self.final_res_log2 - res_log2}/bias'", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "", "self", ".", "upsample", "=", "ResolutionScalingLayer", "(", ")", "\n", "self", ".", "final_activate", "=", "nn", ".", "Tanh", "(", ")", "if", "final_tanh", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.SynthesisModule.get_nf": [[390, 393], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.SynthesisModule.forward": [[394, 435], ["stylegan_generator_network.SynthesisModule.lod.cpu().tolist", "range", "stylegan_generator_network.SynthesisModule.final_activate", "ValueError", "stylegan_generator_network.SynthesisModule.lod.cpu", "stylegan_generator_network.SynthesisModule.upsample", "feats.append", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__", "stylemod_weights.append", "unmod_features.append", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__", "dense.fc.weight.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "w", ",", "generate_feature", "=", "False", ",", "generate_sw", "=", "False", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "!=", "3", "or", "w", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where '", "\n", "f'`num_layers` equals to {self.num_layers}, and '", "\n", "f'`w_space_dim` equals to {self.w_space_dim}!\\n'", "\n", "f'But {w.shape} is received!'", ")", "\n", "\n", "", "feats", "=", "[", "]", "\n", "unmod_features", "=", "[", "]", "\n", "stylemod_weights", "=", "[", "]", "\n", "\n", "lod", "=", "self", ".", "lod", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "if", "res_log2", "+", "lod", "<=", "self", ".", "final_res_log2", ":", "\n", "        ", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "if", "block_idx", "==", "0", ":", "\n", "          ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "w", "[", ":", ",", "2", "*", "block_idx", "]", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "2", "*", "block_idx", "]", ")", "\n", "", "res", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "2", "*", "block_idx", "+", "1", "]", ",", "generate_sw", ")", "\n", "if", "generate_sw", ":", "\n", "          ", "x", "=", "res", "[", "0", "]", "\n", "layer", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "\n", "dense", "=", "layer", ".", "epilogue", ".", "style_mod", ".", "dense", "\n", "stylemod_weights", ".", "append", "(", "dense", ".", "fc", ".", "weight", ".", "detach", "(", ")", ")", "\n", "unmod_features", ".", "append", "(", "res", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "res", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{block_idx}'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "self", ".", "upsample", "(", "image", ")", "\n", "", "if", "generate_feature", ":", "\n", "        ", "feats", ".", "append", "(", "x", ")", "\n", "", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "if", "generate_feature", ":", "\n", "      ", "return", "image", ",", "feats", "\n", "", "if", "generate_sw", ":", "\n", "      ", "return", "unmod_features", ",", "stylemod_weights", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.SynthesisModule.mask_latent": [[436, 461], ["stylegan_generator_network.SynthesisModule.lod.cpu().tolist", "range", "stylegan_generator_network.SynthesisModule.final_activate", "feats.append", "stylegan_generator_network.SynthesisModule.lod.cpu", "stylegan_generator_network.SynthesisModule.__getattr__().mask_latent", "stylegan_generator_network.SynthesisModule.upsample", "stylegan_generator_network.SynthesisModule.__getattr__().mask_latent", "stylegan_generator_network.SynthesisModule.__getattr__().mask_latent", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__", "stylegan_generator_network.SynthesisModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "mask_latent", "(", "self", ",", "ws", ",", "masks", ")", ":", "\n", "    ", "feats", "=", "[", "]", "\n", "lod", "=", "self", ".", "lod", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "if", "res_log2", "+", "lod", "<=", "self", ".", "final_res_log2", ":", "\n", "        ", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "if", "block_idx", "==", "0", ":", "\n", "          ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", ".", "mask_latent", "(", "\n", "[", "w", "[", ":", ",", "2", "*", "block_idx", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "", "else", ":", "\n", "          ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "2", "*", "block_idx", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "2", "*", "block_idx", "+", "1", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "image", "=", "self", ".", "__getattr__", "(", "f'output{block_idx}'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "self", ".", "upsample", "(", "image", ")", "\n", "", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "return", "image", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.PixelNormLayer.__init__": [[466, 469], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.PixelNormLayer.forward": [[470, 472], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.InstanceNormLayer.__init__": [[477, 480], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.InstanceNormLayer.forward": [[481, 488], ["ValueError", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "4", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], but {x.shape} is received!'", ")", "\n", "", "x", "=", "x", "-", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "[", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.ResolutionScalingLayer.__init__": [[497, 500], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.ResolutionScalingLayer.forward": [[501, 503], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.BlurLayer.__init__": [[508, 525], ["torch.Module.__init__", "numpy.array().reshape", "numpy.transpose.T.dot", "numpy.tile", "numpy.transpose", "stylegan_generator_network.BlurLayer.register_buffer", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "kernel", "=", "(", "1", ",", "2", ",", "1", ")", ",", "\n", "normalize", "=", "True", ",", "\n", "flip", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "kernel", "=", "kernel", ".", "T", ".", "dot", "(", "kernel", ")", "\n", "if", "normalize", ":", "\n", "      ", "kernel", "/=", "np", ".", "sum", "(", "kernel", ")", "\n", "", "if", "flip", ":", "\n", "      ", "kernel", "=", "kernel", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "kernel", "=", "np", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "channels", ",", "1", "]", ")", "\n", "kernel", "=", "np", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "torch", ".", "from_numpy", "(", "kernel", ")", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.BlurLayer.forward": [[526, 528], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.NoiseApplyingLayer.__init__": [[533, 539], ["torch.Module.__init__", "stylegan_generator_network.NoiseApplyingLayer.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "resolution", ",", "channels", ",", "randomize_noise", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "self", ".", "res", "=", "resolution", "\n", "self", ".", "register_buffer", "(", "'noise'", ",", "torch", ".", "randn", "(", "1", ",", "1", ",", "self", ".", "res", ",", "self", ".", "res", ")", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.NoiseApplyingLayer.forward": [[540, 549], ["ValueError", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "stylegan_generator_network.NoiseApplyingLayer.weight.view", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "4", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], but {x.shape} is received!'", ")", "\n", "", "if", "self", ".", "randomize_noise", ":", "\n", "      ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "res", ",", "self", ".", "res", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "noise", "=", "self", ".", "noise", "\n", "", "return", "x", "+", "noise", "*", "self", ".", "weight", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleModulationLayer.__init__": [[554, 563], ["torch.Module.__init__", "stylegan_generator_network.DenseBlock"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "w_space_dim", "=", "512", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "dense", "=", "DenseBlock", "(", "in_channels", "=", "w_space_dim", ",", "\n", "out_channels", "=", "channels", "*", "2", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "wscale_lr_multiplier", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleModulationLayer.forward": [[564, 573], ["stylegan_generator_network.StyleModulationLayer.dense", "style.view.view.view", "ValueError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "!=", "2", "or", "w", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {x.shape} is received!'", ")", "\n", "", "style", "=", "self", ".", "dense", "(", "w", ")", "\n", "style", "=", "style", ".", "view", "(", "-", "1", ",", "2", ",", "self", ".", "channels", ",", "1", ",", "1", ")", "\n", "return", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1", ")", "+", "style", "[", ":", ",", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.StyleModulationLayer.mask_latent": [[574, 581], ["zip", "stylegan_generator_network.StyleModulationLayer.dense", "style.view.view.view"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense"], ["", "def", "mask_latent", "(", "self", ",", "x", ",", "ws", ",", "masks", ")", ":", "\n", "    ", "s", "=", "0", "\n", "for", "mask", ",", "w", "in", "zip", "(", "ws", ",", "masks", ")", ":", "\n", "      ", "style", "=", "self", ".", "dense", "(", "w", ")", "\n", "style", "=", "style", ".", "view", "(", "-", "1", ",", "2", ",", "self", ".", "channels", ",", "1", ",", "1", ")", "\n", "s", "=", "s", "+", "mask", "*", "(", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1", ")", "+", "style", "[", ":", ",", "1", "]", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.WScaleLayer.__init__": [[591, 602], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "lr_multiplier", "=", "1.0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "*", "lr_multiplier", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.WScaleLayer.forward": [[603, 609], ["ValueError", "stylegan_generator_network.WScaleLayer.bias.view", "stylegan_generator_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "4", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "if", "x", ".", "ndim", "==", "2", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], or [batch_size, channel]!\\n'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.EpilogueBlock.__init__": [[616, 634], ["torch.Module.__init__", "stylegan_generator_network.NoiseApplyingLayer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "stylegan_generator_network.StyleModulationLayer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "stylegan_generator_network.PixelNormLayer", "stylegan_generator_network.InstanceNormLayer", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "channels", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "randomize_noise", "=", "False", ",", "\n", "normalization_fn", "=", "'instance'", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "apply_noise", "=", "NoiseApplyingLayer", "(", "resolution", ",", "channels", ",", "randomize_noise", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "channels", ")", ")", "\n", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "if", "normalization_fn", "==", "'pixel'", ":", "\n", "      ", "self", ".", "norm", "=", "PixelNormLayer", "(", ")", "\n", "", "elif", "normalization_fn", "==", "'instance'", ":", "\n", "      ", "self", ".", "norm", "=", "InstanceNormLayer", "(", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented normalization function: '", "\n", "f'{normalization_fn}!'", ")", "\n", "", "self", ".", "style_mod", "=", "StyleModulationLayer", "(", "channels", ",", "w_space_dim", "=", "w_space_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.EpilogueBlock.forward": [[635, 644], ["stylegan_generator_network.EpilogueBlock.apply_noise", "stylegan_generator_network.EpilogueBlock.activate", "stylegan_generator_network.EpilogueBlock.norm", "stylegan_generator_network.EpilogueBlock.style_mod", "stylegan_generator_network.EpilogueBlock.bias.view"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.apply_noise", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.style_mod"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "get_unmod", "=", "False", ")", ":", "\n", "    ", "x", "=", "self", ".", "apply_noise", "(", "x", ")", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "unmod", "=", "self", ".", "norm", "(", "x", ")", "\n", "x", "=", "self", ".", "style_mod", "(", "unmod", ",", "w", ")", "\n", "if", "get_unmod", ":", "\n", "      ", "return", "x", ",", "unmod", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.FirstConvBlock.__init__": [[653, 665], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan_generator_network.EpilogueBlock", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "init_resolution", ",", "\n", "channels", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "randomize_noise", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "const", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "ones", "(", "1", ",", "channels", ",", "init_resolution", ",", "init_resolution", ")", ")", "\n", "self", ".", "epilogue", "=", "EpilogueBlock", "(", "resolution", "=", "init_resolution", ",", "\n", "channels", "=", "channels", ",", "\n", "w_space_dim", "=", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.FirstConvBlock.forward": [[666, 670], ["stylegan_generator_network.FirstConvBlock.const.repeat", "stylegan_generator_network.FirstConvBlock.epilogue"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ")", ":", "\n", "    ", "x", "=", "self", ".", "const", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "x", "=", "self", ".", "epilogue", "(", "x", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.UpConvBlock.__init__": [[679, 739], ["numpy.sqrt", "torch.Module.__init__", "stylegan_generator_network.BlurLayer", "stylegan_generator_network.EpilogueBlock", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan_generator_network.ResolutionScalingLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "fused_scale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "wscale_lr_multiplier", "=", "1.0", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "randomize_noise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      resolution: Spatial resolution of current layer.\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      fused_scale: Whether to fuse `upsample` and `conv2d` together, resulting\n        in `conv2d_transpose`.\n      wscale_gain: The gain factor for `wscale` layer.\n      wscale_lr_multiplier: The learning rate multiplier factor for `wscale`\n        layer.\n      w_space_dim: The dimension of disentangled latent space, w. This is used\n        for style modulation.\n      randomize_noise: Whether to add random noise.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "\n", "if", "self", ".", "fused_scale", ":", "\n", "      ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "", "else", ":", "\n", "      ", "self", ".", "upsample", "=", "ResolutionScalingLayer", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "\n", "", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "*", "wscale_lr_multiplier", "\n", "self", ".", "blur", "=", "BlurLayer", "(", "channels", "=", "out_channels", ")", "\n", "self", ".", "epilogue", "=", "EpilogueBlock", "(", "resolution", "=", "resolution", ",", "\n", "channels", "=", "out_channels", ",", "\n", "w_space_dim", "=", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.UpConvBlock.forward": [[740, 754], ["stylegan_generator_network.UpConvBlock.blur", "stylegan_generator_network.UpConvBlock.epilogue", "torch.pad", "torch.pad", "torch.pad", "kernel.permute.permute.permute", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "stylegan_generator_network.UpConvBlock.upsample", "stylegan_generator_network.UpConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "    ", "if", "self", ".", "fused_scale", ":", "\n", "      ", "kernel", "=", "self", ".", "weight", "*", "self", ".", "scale", "\n", "kernel", "=", "F", ".", "pad", "(", "kernel", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0.0", ")", "\n", "kernel", "=", "(", "kernel", "[", "1", ":", ",", "1", ":", "]", "+", "kernel", "[", ":", "-", "1", ",", "1", ":", "]", "+", "\n", "kernel", "[", "1", ":", ",", ":", "-", "1", "]", "+", "kernel", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "\n", "kernel", "=", "kernel", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", "\n", "", "x", "=", "self", ".", "blur", "(", "x", ")", "\n", "x", "=", "self", ".", "epilogue", "(", "x", ",", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.ConvBlock.__init__": [[763, 810], ["numpy.sqrt", "torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "stylegan_generator_network.EpilogueBlock", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "wscale_lr_multiplier", "=", "1.0", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "randomize_noise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      resolution: Spatial resolution of current layer.\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      wscale_gain: The gain factor for `wscale` layer.\n      wscale_lr_multiplier: The learning rate multiplier factor for `wscale`\n        layer.\n      w_space_dim: The dimension of disentangled latent space, w. This is used\n        for style modulation.\n      randomize_noise: Whether to add random noise.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "*", "wscale_lr_multiplier", "\n", "self", ".", "epilogue", "=", "EpilogueBlock", "(", "resolution", "=", "resolution", ",", "\n", "channels", "=", "out_channels", ",", "\n", "w_space_dim", "=", "w_space_dim", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.ConvBlock.forward": [[811, 815], ["stylegan_generator_network.ConvBlock.epilogue", "stylegan_generator_network.ConvBlock.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "w", ",", "get_unmod", "=", "False", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", "\n", "res", "=", "self", ".", "epilogue", "(", "x", ",", "w", ",", "get_unmod", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.LastConvBlock.__init__": [[823, 831], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", "=", "3", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale", "=", "1", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.LastConvBlock.forward": [[832, 836], ["stylegan_generator_network.LastConvBlock.conv", "stylegan_generator_network.LastConvBlock.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", "\n", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.DenseBlock.__init__": [[845, 881], ["numpy.sqrt", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "stylegan_generator_network.WScaleLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "add_bias", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "wscale_lr_multiplier", "=", "0.01", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      add_bias: Whether to add bias onto the fully-connected result.\n      wscale_gain: The gain factor for `wscale` layer.\n      wscale_lr_multiplier: The learning rate multiplier factor for `wscale`\n        layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "add_bias", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "gain", "=", "wscale_gain", ",", "\n", "lr_multiplier", "=", "wscale_lr_multiplier", ")", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator_network.DenseBlock.forward": [[883, 890], ["stylegan_generator_network.DenseBlock.fc", "stylegan_generator_network.DenseBlock.wscale", "stylegan_generator_network.DenseBlock.activate", "x.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.__init__": [[17, 20], ["base_module.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes the generator with model name.\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "'generator'", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.sample": [[21, 31], ["NotImplementedError"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "num", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Samples latent codes randomly.\n\n    Args:\n      num: Number of latent codes to sample. Should be positive.\n\n    Returns:\n      A `numpy.ndarray` as sampled latend codes.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.preprocess": [[32, 43], ["NotImplementedError"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "latent_codes", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input latent codes if needed.\n\n    Args:\n      latent_codes: The input latent codes for preprocessing.\n\n    Returns:\n      The preprocessed latent codes which can be used as final inputs to the\n        generator.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample": [[44, 47], ["base_generator.BaseGenerator.preprocess", "base_generator.BaseGenerator.sample"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.sample"], ["", "def", "easy_sample", "(", "self", ",", "num", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps functions `sample()` and `preprocess()` together.\"\"\"", "\n", "return", "self", ".", "preprocess", "(", "self", ".", "sample", "(", "num", ",", "**", "kwargs", ")", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.synthesize": [[48, 61], ["NotImplementedError"], "methods", ["None"], ["", "def", "synthesize", "(", "self", ",", "latent_codes", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Synthesizes images with given latent codes.\n\n    NOTE: The latent codes are assumed to have already been preprocessed.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator. Keys of the\n        dictionary usually include `z` and `image`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.torch2numpy": [[62, 64], ["base_generator.BaseGenerator.postprocess", "base_generator.BaseGenerator.get_value"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.postprocess", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "torch2numpy", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "postprocess", "(", "self", ".", "get_value", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.postprocess": [[65, 100], ["numpy.clip().astype", "images.transpose.transpose.transpose", "isinstance", "ValueError", "ValueError", "numpy.clip"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Postprocesses the output images if needed.\n\n    This function assumes the input numpy array is with shape [batch_size,\n    channel, height, width]. Here, `channel = 3` for color image and\n    `channel = 1` for grayscale image. The returned images are with shape\n    [batch_size, height, width, channel].\n\n    NOTE: The channel order of output images will always be `RGB`.\n\n    Args:\n      images: The raw outputs from the generator.\n\n    Returns:\n      The postprocessed images with dtype `numpy.uint8` and range [0, 255].\n\n    Raises:\n      ValueError: If the input `images` are not with type `numpy.ndarray` or not\n        with shape [batch_size, channel, height, width].\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "if", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "1", "]", "!=", "self", ".", "image_channels", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input should be with shape [batch_size, channel, '", "\n", "f'height, width], where channel equals to '", "\n", "f'{self.image_channels}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "", "images", "=", "(", "images", "-", "self", ".", "min_val", ")", "*", "255", "/", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "\n", "images", "=", "np", ".", "clip", "(", "images", "+", "0.5", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "images", "=", "images", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "if", "self", ".", "image_channels", "==", "3", "and", "self", ".", "channel_order", "==", "'BGR'", ":", "\n", "      ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_synthesize": [[101, 107], ["base_generator.BaseGenerator.synthesize", "base_generator.BaseGenerator.postprocess"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.synthesize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.postprocess"], ["", "def", "easy_synthesize", "(", "self", ",", "latent_codes", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps functions `synthesize()` and `postprocess()` together.\"\"\"", "\n", "outputs", "=", "self", ".", "synthesize", "(", "latent_codes", ",", "**", "kwargs", ")", "\n", "if", "'image'", "in", "outputs", ":", "\n", "      ", "outputs", "[", "'image'", "]", "=", "self", ".", "postprocess", "(", "outputs", "[", "'image'", "]", ")", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator.StyleGAN2Discriminator.__init__": [[21, 24], ["base_discriminator.BaseDiscriminator.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'stylegan2'", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator.StyleGAN2Discriminator.build": [[25, 42], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "stylegan2_discriminator_network.StyleGAN2DiscriminatorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "d_architecture_type", "=", "getattr", "(", "self", ",", "'d_architecture_type'", ",", "'resnet'", ")", "\n", "self", ".", "minibatch_std_group_size", "=", "getattr", "(", "self", ",", "'minibatch_std_group_size'", ",", "4", ")", "\n", "self", ".", "minibatch_std_num_channels", "=", "getattr", "(", "\n", "self", ",", "'minibatch_std_num_channels'", ",", "1", ")", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "32", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "self", ".", "net", "=", "StyleGAN2DiscriminatorNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "architecture_type", "=", "self", ".", "d_architecture_type", ",", "\n", "minibatch_std_group_size", "=", "self", ".", "minibatch_std_group_size", ",", "\n", "minibatch_std_num_channels", "=", "self", ".", "minibatch_std_num_channels", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator.StyleGAN2Discriminator.convert_tf_weights": [[43, 115], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "sys.path.insert", "sys.path.pop", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "dict", "stylegan2_discriminator.StyleGAN2Discriminator.net.state_dict", "stylegan2_discriminator.StyleGAN2Discriminator.net.pth_to_tf_var_mapping.items", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "torch.save", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "stylegan2_discriminator.StyleGAN2Discriminator.load", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "stylegan2_discriminator.StyleGAN2Discriminator.net.eval().to", "range", "stylegan2_discriminator.StyleGAN2Discriminator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "stylegan2_discriminator.StyleGAN2Discriminator.logger.debug", "torch.from_numpy", "stylegan2_discriminator.StyleGAN2Discriminator.logger.warning", "tf.compat.v1.InteractiveSession.close", "tf_net.run", "numpy.average", "stylegan2_discriminator.StyleGAN2Discriminator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "stylegan2_discriminator.StyleGAN2Discriminator.net.eval", "numpy.random.randint", "numpy.zeros", "stylegan2_discriminator.StyleGAN2Discriminator.rate", "numpy.abs", "var.permute.permute.permute", "numpy.random.rand", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.rate"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "input_shape", "=", "[", "1", ",", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", "\n", "image", "=", "np", ".", "random", ".", "rand", "(", "*", "input_shape", ")", "*", "2", "-", "1", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "label_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "label_size", ")", "\n", "tf_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "label_size", ")", ",", "np", ".", "float32", ")", "\n", "tf_label", "[", "0", ",", "label_id", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "label_id", "=", "None", "\n", "tf_label", "=", "None", "\n", "", "tf_output", "=", "tf_net", ".", "run", "(", "image", ",", "tf_label", ")", "\n", "pth_output", "=", "self", ".", "rate", "(", "image", ",", "labels", "=", "label_id", ")", "[", "'score'", "]", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator.StyleGAN2Discriminator._rate": [[116, 145], ["stylegan2_discriminator.StyleGAN2Discriminator.to_tensor", "stylegan2_discriminator.StyleGAN2Discriminator.get_ont_hot_labels", "stylegan2_discriminator.StyleGAN2Discriminator.net", "isinstance", "ValueError", "ValueError", "images.astype", "stylegan2_discriminator.StyleGAN2Discriminator.to_tensor", "stylegan2_discriminator.StyleGAN2Discriminator.get_value", "torch.cuda.empty_cache", "stylegan2_discriminator.StyleGAN2Discriminator.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_rate", "(", "self", ",", "images", ",", "labels", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "images", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input images should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`batch_size` no larger than {self.batch_size}, '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "self", ".", "to_tensor", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "images", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "scores", "=", "self", ".", "net", "(", "xs", ",", "ls", ")", "\n", "assert", "scores", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "results", "=", "{", "\n", "'image'", ":", "images", ",", "\n", "'score'", ":", "self", ".", "get_value", "(", "scores", ")", ",", "\n", "}", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_discriminator.StyleGAN2Discriminator.rate": [[146, 148], ["stylegan2_discriminator.StyleGAN2Discriminator.batch_run", "stylegan2_discriminator.StyleGAN2Discriminator._rate"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator._rate"], ["", "def", "rate", "(", "self", ",", "images", ",", "labels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "lambda", "x", ":", "self", ".", "_rate", "(", "x", ",", "labels", "=", "labels", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.StyleGAN2GeneratorNet.__init__": [[42, 145], ["torch.Module.__init__", "stylegan2_generator_network.MappingModule", "stylegan2_generator_network.TruncationModule", "stylegan2_generator_network.SynthesisModule", "stylegan2_generator_network.StyleGAN2GeneratorNet.mapping.pth_to_tf_var_mapping.items", "stylegan2_generator_network.StyleGAN2GeneratorNet.truncation.pth_to_tf_var_mapping.items", "stylegan2_generator_network.StyleGAN2GeneratorNet.synthesis.pth_to_tf_var_mapping.items", "ValueError", "ValueError", "int", "numpy.log2"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "z_space_dim", "=", "512", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "num_mapping_layers", "=", "8", ",", "\n", "repeat_w", "=", "True", ",", "\n", "image_channels", "=", "3", ",", "\n", "final_tanh", "=", "False", ",", "\n", "label_size", "=", "0", ",", "\n", "architecture_type", "=", "'skip'", ",", "\n", "fused_modulate", "=", "True", ",", "\n", "truncation_psi", "=", "0.5", ",", "\n", "truncation_layers", "=", "18", ",", "\n", "randomize_noise", "=", "False", ",", "\n", "fmaps_base", "=", "32", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the generator with basic settings.\n\n    Args:\n      resolution: The resolution of the output image.\n      z_space_dim: The dimension of the initial latent space. (default: 512)\n      w_space_dim: The dimension of the disentangled latent vectors, w.\n        (default: 512)\n      num_mapping_layers: Number of fully-connected layers to map Z space to W\n        space. (default: 8)\n      repeat_w: Whether to use same w for different layers. (default: True)\n      image_channels: Number of channels of output image. (default: 3)\n      final_tanh: Whether to use tanh to control pixel range. (default: False)\n      label_size: Size of additional labels. (default: 0)\n      architecture_type: Defines the architecture type. (default: `resnet`)\n      fused_modulate: Whether to fuse `style_modulate` and `conv2d` together.\n        (default: True)\n      truncation_psi: Style strength multiplier for the truncation trick.\n        `None` or `1.0` indicates no truncation. (default: 0.5)\n      truncation_layers: Number of layers for which to apply the truncation\n        trick. `None` or `0` indicates no truncation. (default: 18)\n      randomize_noise: Whether to add random noise for each convolutional layer.\n        (default: False)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 32 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported, or\n        `architecture_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "", "if", "architecture_type", "not", "in", "_ARCHITECTURES_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid fused-scale option: {architecture_type}!\\n'", "\n", "f'Architectures allowed: {_ARCHITECTURES_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "z_space_dim", "=", "z_space_dim", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "num_mapping_layers", "=", "num_mapping_layers", "\n", "self", ".", "repeat_w", "=", "repeat_w", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "final_tanh", "=", "final_tanh", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "architecture_type", "=", "architecture_type", "\n", "self", ".", "fused_modulate", "=", "fused_modulate", "\n", "self", ".", "truncation_psi", "=", "truncation_psi", "\n", "self", ".", "truncation_layers", "=", "truncation_layers", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "num_layers", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", "//", "self", ".", "init_res", "*", "2", ")", ")", "*", "2", "\n", "\n", "mapping_space_dim", "=", "self", ".", "w_space_dim", "*", "(", "1", "if", "repeat_w", "else", "self", ".", "num_layers", ")", "\n", "self", ".", "mapping", "=", "MappingModule", "(", "input_space_dim", "=", "self", ".", "z_space_dim", ",", "\n", "hidden_space_dim", "=", "self", ".", "fmaps_max", ",", "\n", "final_space_dim", "=", "mapping_space_dim", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "num_layers", "=", "self", ".", "num_mapping_layers", ")", "\n", "self", ".", "truncation", "=", "TruncationModule", "(", "num_layers", "=", "self", ".", "num_layers", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "repeat_w", "=", "self", ".", "repeat_w", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_layers", "=", "self", ".", "truncation_layers", ")", "\n", "self", ".", "synthesis", "=", "SynthesisModule", "(", "init_resolution", "=", "self", ".", "init_res", ",", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "final_tanh", "=", "self", ".", "final_tanh", ",", "\n", "architecture_type", "=", "self", ".", "architecture_type", ",", "\n", "fused_modulate", "=", "self", ".", "fused_modulate", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "self", ".", "mapping", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'mapping.{key}'", "]", "=", "val", "\n", "", "for", "key", ",", "val", "in", "self", ".", "truncation", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'truncation.{key}'", "]", "=", "val", "\n", "", "for", "key", ",", "val", "in", "self", ".", "synthesis", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "self", ".", "pth_to_tf_var_mapping", "[", "f'synthesis.{key}'", "]", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.StyleGAN2GeneratorNet.forward": [[146, 151], ["stylegan2_generator_network.StyleGAN2GeneratorNet.mapping", "stylegan2_generator_network.StyleGAN2GeneratorNet.truncation", "stylegan2_generator_network.StyleGAN2GeneratorNet.synthesis"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "l", "=", "None", ")", ":", "\n", "    ", "w", "=", "self", ".", "mapping", "(", "z", ",", "l", ")", "\n", "w", "=", "self", ".", "truncation", "(", "w", ")", "\n", "x", "=", "self", ".", "synthesis", "(", "w", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.MappingModule.__init__": [[159, 185], ["torch.Module.__init__", "range", "stylegan2_generator_network.PixelNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan2_generator_network.MappingModule.add_module", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan2_generator_network.DenseBlock", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "input_space_dim", "=", "512", ",", "\n", "hidden_space_dim", "=", "512", ",", "\n", "final_space_dim", "=", "512", ",", "\n", "label_size", "=", "0", ",", "\n", "num_layers", "=", "8", ",", "\n", "normalize_input", "=", "True", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_space_dim", "=", "input_space_dim", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "\n", "self", ".", "norm", "=", "PixelNormLayer", "(", "dim", "=", "1", ")", "if", "normalize_input", "else", "nn", ".", "Identity", "(", ")", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "      ", "dim_mul", "=", "2", "if", "label_size", "else", "1", "\n", "in_dim", "=", "input_space_dim", "*", "dim_mul", "if", "i", "==", "0", "else", "hidden_space_dim", "\n", "out_dim", "=", "final_space_dim", "if", "i", "==", "(", "num_layers", "-", "1", ")", "else", "hidden_space_dim", "\n", "self", ".", "add_module", "(", "f'dense{i}'", ",", "DenseBlock", "(", "in_dim", ",", "out_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'dense{i}.fc.weight'", "]", "=", "f'Dense{i}/weight'", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'dense{i}.bias'", "]", "=", "f'Dense{i}/bias'", "\n", "", "if", "label_size", ":", "\n", "      ", "self", ".", "label_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "label_size", ",", "input_space_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'label_weight'", "]", "=", "f'LabelConcat/weight'", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.MappingModule.forward": [[186, 210], ["stylegan2_generator_network.MappingModule.norm", "range", "ValueError", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ValueError", "ValueError", "stylegan2_generator_network.MappingModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "", "def", "forward", "(", "self", ",", "z", ",", "l", "=", "None", ")", ":", "\n", "    ", "if", "z", ".", "ndim", "!=", "2", "or", "z", ".", "shape", "[", "1", "]", "!=", "self", ".", "input_space_dim", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input latent code should be with shape [batch_size, '", "\n", "f'input_dim], where `input_dim` equals to '", "\n", "f'{self.input_space_dim}!\\n'", "\n", "f'But {z.shape} is received!'", ")", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "if", "l", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model requires an additional label (with size '", "\n", "f'{self.label_size}) as inputs, but no label is '", "\n", "f'received!'", ")", "\n", "", "if", "l", ".", "ndim", "!=", "2", "or", "l", ".", "shape", "!=", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "label_size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input label should be with shape [batch_size, '", "\n", "f'label_size], where `batch_size` equals to that of '", "\n", "f'latent codes ({z.shape[0]}) and `label_size` equals '", "\n", "f'to {self.label_size}!\\n'", "\n", "f'But {l.shape} is received!'", ")", "\n", "", "embedding", "=", "torch", ".", "matmul", "(", "l", ",", "self", ".", "label_weight", ")", "\n", "z", "=", "torch", ".", "cat", "(", "(", "z", ",", "embedding", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "w", "=", "self", ".", "norm", "(", "z", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "      ", "w", "=", "self", ".", "__getattr__", "(", "f'dense{i}'", ")", "(", "w", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.TruncationModule.__init__": [[215, 240], ["torch.Module.__init__", "stylegan2_generator_network.TruncationModule.register_buffer", "numpy.arange().reshape", "numpy.ones_like", "stylegan2_generator_network.TruncationModule.register_buffer", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "num_layers", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "repeat_w", "=", "True", ",", "\n", "truncation_psi", "=", "0.7", ",", "\n", "truncation_layers", "=", "8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "repeat_w", "=", "repeat_w", "\n", "if", "truncation_psi", "is", "not", "None", "and", "truncation_layers", "is", "not", "None", ":", "\n", "      ", "self", ".", "use_truncation", "=", "True", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_truncation", "=", "False", "\n", "truncation_psi", "=", "1.0", "\n", "truncation_layers", "=", "0", "\n", "\n", "", "self", ".", "register_buffer", "(", "'w_avg'", ",", "torch", ".", "zeros", "(", "w_space_dim", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'w_avg'", ":", "'dlatent_avg'", "}", "\n", "\n", "layer_idx", "=", "np", ".", "arange", "(", "self", ".", "num_layers", ")", ".", "reshape", "(", "1", ",", "self", ".", "num_layers", ",", "1", ")", "\n", "coefs", "=", "np", ".", "ones_like", "(", "layer_idx", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "coefs", "[", "layer_idx", "<", "truncation_layers", "]", "*=", "truncation_psi", "\n", "self", ".", "register_buffer", "(", "'truncation'", ",", "torch", ".", "from_numpy", "(", "coefs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.TruncationModule.forward": [[241, 254], ["stylegan2_generator_network.TruncationModule.w_avg.view", "w.view.view.view().repeat", "w.view.view.view", "w.view.view.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "==", "2", ":", "\n", "      ", "if", "self", ".", "repeat_w", ":", "\n", "        ", "assert", "w", ".", "shape", "[", "1", "]", "==", "self", ".", "w_space_dim", "\n", "w", "=", "w", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "w_space_dim", ")", ".", "repeat", "(", "1", ",", "self", ".", "num_layers", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "assert", "w", ".", "shape", "[", "1", "]", "==", "self", ".", "w_space_dim", "*", "self", ".", "num_layers", "\n", "w", "=", "w", ".", "view", "(", "-", "1", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "", "assert", "w", ".", "ndim", "==", "3", "and", "w", ".", "shape", "[", "1", ":", "]", "==", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "if", "self", ".", "use_truncation", ":", "\n", "      ", "w_avg", "=", "self", ".", "w_avg", ".", "view", "(", "1", ",", "1", ",", "self", ".", "w_space_dim", ")", "\n", "w", "=", "w_avg", "+", "(", "w", "-", "w_avg", ")", "*", "self", ".", "truncation", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.__init__": [[262, 401], ["torch.Module.__init__", "int", "int", "range", "numpy.log2", "numpy.log2", "stylegan2_generator_network.SynthesisModule.add_module", "stylegan2_generator_network.UpsamplingLayer", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan2_generator_network.SynthesisModule.add_module", "stylegan2_generator_network.SynthesisModule.add_module", "stylegan2_generator_network.ModulateConvBlock", "stylegan2_generator_network.SynthesisModule.add_module", "stylegan2_generator_network.InputBlock", "stylegan2_generator_network.ModulateConvBlock", "stylegan2_generator_network.SynthesisModule.add_module", "stylegan2_generator_network.ModulateConvBlock", "stylegan2_generator_network.ConvBlock", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf", "stylegan2_generator_network.SynthesisModule.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "init_resolution", "=", "4", ",", "\n", "resolution", "=", "1024", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "image_channels", "=", "3", ",", "\n", "final_tanh", "=", "False", ",", "\n", "architecture_type", "=", "'skip'", ",", "\n", "fused_modulate", "=", "True", ",", "\n", "randomize_noise", "=", "False", ",", "\n", "fmaps_base", "=", "32", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "init_res", "=", "init_resolution", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "architecture_type", "=", "architecture_type", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "final_res_log2", "-", "self", ".", "init_res_log2", "+", "1", ")", "*", "2", "\n", "\n", "# pylint: disable=line-too-long", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "\n", "# First convolution layer for each resolution.", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'early_layer'", ",", "\n", "InputBlock", "(", "init_resolution", "=", "self", ".", "init_res", ",", "\n", "channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'early_layer.const'", "]", "=", "(", "\n", "f'{res}x{res}/Const/const'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx - 1}'", ",", "\n", "ModulateConvBlock", "(", "resolution", "=", "res", ",", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "scale_factor", "=", "2", ",", "\n", "fused_modulate", "=", "fused_modulate", ",", "\n", "demodulate", "=", "True", ",", "\n", "add_noise", "=", "True", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.style.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/mod_weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.style.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/mod_bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.noise_strength'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/noise_strength'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx - 1}.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx - 1}'", ")", "\n", "\n", "if", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "          ", "self", ".", "add_module", "(", "\n", "f'skip_layer{block_idx - 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "scale_factor", "=", "2", ",", "\n", "add_bias", "=", "False", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'skip_layer{block_idx - 1}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Skip/weight'", ")", "\n", "\n", "# Second convolution layer for each resolution.", "\n", "", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ModulateConvBlock", "(", "resolution", "=", "res", ",", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "fused_modulate", "=", "fused_modulate", ",", "\n", "demodulate", "=", "True", ",", "\n", "add_noise", "=", "True", ",", "\n", "randomize_noise", "=", "randomize_noise", ")", ")", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.style.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/mod_weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.style.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/mod_bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.noise_strength'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/noise_strength'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx}'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.style.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/mod_weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.style.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/mod_bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.noise_strength'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/noise_strength'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.noise'", "]", "=", "(", "\n", "f'noise{2 * block_idx}'", ")", "\n", "\n", "# Output convolution layer for each resolution (if needed).", "\n", "", "if", "res_log2", "==", "self", ".", "final_res_log2", "or", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'output{block_idx}'", ",", "\n", "ModulateConvBlock", "(", "resolution", "=", "res", ",", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "image_channels", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "kernel_size", "=", "1", ",", "\n", "fused_modulate", "=", "fused_modulate", ",", "\n", "demodulate", "=", "False", ",", "\n", "add_noise", "=", "False", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/ToRGB/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.bias'", "]", "=", "(", "\n", "f'{res}x{res}/ToRGB/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.style.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/ToRGB/mod_weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.style.bias'", "]", "=", "(", "\n", "f'{res}x{res}/ToRGB/mod_bias'", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "", "", "if", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "self", ".", "upsample", "=", "UpsamplingLayer", "(", ")", "\n", "", "self", ".", "final_activate", "=", "nn", ".", "Tanh", "(", ")", "if", "final_tanh", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.get_nf": [[402, 405], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.forward": [[406, 458], ["stylegan2_generator_network.SynthesisModule.early_layer", "stylegan2_generator_network.SynthesisModule.final_activate", "ValueError", "range", "images.append", "res.append", "res.append", "len", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "range", "stylegan2_generator_network.SynthesisModule.__getattr__", "feats.append", "stylegan2_generator_network.SynthesisModule.layer0", "range", "images.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "images.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "numpy.sqrt", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.upsample", "stylegan2_generator_network.SynthesisModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "w", ",", "generate_feature", "=", "False", ",", "generate_imgsery", "=", "False", ")", ":", "\n", "    ", "if", "w", ".", "ndim", "!=", "3", "or", "w", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where '", "\n", "f'`num_layers` equals to {self.num_layers}, and '", "\n", "f'`w_space_dim` equals to {self.w_space_dim}!\\n'", "\n", "f'But {w.shape} is received!'", ")", "\n", "\n", "", "x", "=", "self", ".", "early_layer", "(", "w", ")", "\n", "feats", "=", "[", "]", "\n", "images", "=", "[", "]", "\n", "if", "self", ".", "architecture_type", "==", "'origin'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "", "elif", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "if", "layer_idx", "%", "2", "==", "0", ":", "\n", "          ", "if", "layer_idx", "==", "0", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "+", "self", ".", "upsample", "(", "image", ")", "\n", "", "images", ".", "append", "(", "image", ")", "\n", "", "feats", ".", "append", "(", "x", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "      ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "self", ".", "num_layers", "-", "1", ",", "2", ")", ":", "\n", "        ", "residual", "=", "self", ".", "__getattr__", "(", "f'skip_layer{layer_idx // 2}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx + 1}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "x", "=", "(", "x", "+", "residual", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "if", "generate_feature", ":", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2 + 1}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "2", "]", ")", "\n", "images", ".", "append", "(", "image", ")", "\n", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "\n", "res", "=", "[", "image", "]", "\n", "if", "generate_feature", ":", "\n", "      ", "res", ".", "append", "(", "feats", ")", "\n", "", "if", "generate_imgsery", ":", "\n", "      ", "res", ".", "append", "(", "images", ")", "\n", "", "if", "len", "(", "res", ")", "==", "1", ":", "\n", "      ", "return", "res", "[", "0", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.forward_middle": [[459, 503], ["stylegan2_generator_network.SynthesisModule.final_activate", "ValueError", "range", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "range", "stylegan2_generator_network.SynthesisModule.__getattr__", "feats.append", "range", "stylegan2_generator_network.SynthesisModule.__getattr__", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "numpy.sqrt", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.upsample", "stylegan2_generator_network.SynthesisModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward_middle", "(", "self", ",", "w", ",", "x", ",", "image", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Forward starting from an arbitrary featuremap.\n    \"\"\"", "\n", "if", "w", ".", "ndim", "!=", "3", "or", "w", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where '", "\n", "f'`num_layers` equals to {self.num_layers}, and '", "\n", "f'`w_space_dim` equals to {self.w_space_dim}!\\n'", "\n", "f'But {w.shape} is received!'", ")", "\n", "\n", "#x = self.early_layer(w)", "\n", "", "feats", "=", "[", "]", "\n", "if", "self", ".", "architecture_type", "==", "'origin'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "elif", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "if", "layer_idx", "%", "2", "==", "0", ":", "\n", "          ", "if", "layer_idx", "==", "0", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "+", "self", ".", "upsample", "(", "image", ")", "\n", "", "", "feats", ".", "append", "(", "x", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "# x = self.layer0(x)", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ",", "2", ")", ":", "\n", "        ", "residual", "=", "self", ".", "__getattr__", "(", "f'skip_layer{layer_idx // 2}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx + 1}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "x", "=", "(", "x", "+", "residual", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2 + 1}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "2", "]", ")", "\n", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "\n", "return", "image", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.forward_multiple": [[504, 553], ["stylegan2_generator_network.SynthesisModule.final_activate", "lib.op.bu", "sum", "range", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "range", "stylegan2_generator_network.SynthesisModule.__getattr__", "len", "stylegan2_generator_network.SynthesisModule.forward_multiple.fusion"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward_multiple", "(", "self", ",", "w", ",", "x", ",", "mask", ",", "xs", ",", "image", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    Forward starting from an arbitrary featuremap.\n    \"\"\"", "\n", "def", "fusion", "(", "feats", ",", "masks", ")", ":", "\n", "      ", "masks", "=", "bu", "(", "masks", ",", "feats", "[", "0", "]", ".", "shape", "[", "2", "]", ")", "\n", "return", "sum", "(", "[", "f", "*", "m", "for", "f", ",", "m", "in", "zip", "(", "feats", ",", "masks", ")", "]", ")", "\n", "", "feats", "=", "[", "]", "\n", "count", "=", "0", "\n", "if", "self", ".", "architecture_type", "==", "'origin'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "if", "count", "<", "len", "(", "xs", ")", ":", "\n", "          ", "x", "=", "fusion", "(", "[", "x", ",", "xs", "[", "count", "]", "]", ",", "[", "1", "-", "mask", ",", "mask", "]", ")", "\n", "count", "+=", "1", "\n", "", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "elif", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "if", "count", "<", "len", "(", "xs", ")", ":", "\n", "          ", "x", "=", "fusion", "(", "[", "x", ",", "xs", "[", "count", "]", "]", ",", "[", "1", "-", "mask", ",", "mask", "]", ")", "\n", "count", "+=", "1", "\n", "", "if", "layer_idx", "%", "2", "==", "0", ":", "\n", "          ", "if", "layer_idx", "==", "0", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "+", "self", ".", "upsample", "(", "image", ")", "\n", "", "", "feats", ".", "append", "(", "x", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "# x = self.layer0(x)", "\n", "      ", "for", "layer_idx", "in", "range", "(", "index", ",", "self", ".", "num_layers", "-", "1", ",", "2", ")", ":", "\n", "        ", "residual", "=", "self", ".", "__getattr__", "(", "f'skip_layer{layer_idx // 2}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "]", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx + 1}'", ")", "(", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "x", "=", "(", "x", "+", "residual", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "if", "count", "<", "len", "(", "xs", ")", ":", "\n", "          ", "x", "=", "fusion", "(", "[", "x", ",", "xs", "[", "count", "]", "]", ",", "[", "1", "-", "mask", ",", "mask", "]", ")", "\n", "count", "+=", "1", "\n", "", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2 + 1}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "2", "]", ")", "\n", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "\n", "return", "image", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.SynthesisModule.mask_latent": [[554, 600], ["stylegan2_generator_network.SynthesisModule.early_layer.mask_latent", "stylegan2_generator_network.SynthesisModule.final_activate", "range", "stylegan2_generator_network.SynthesisModule.__getattr__().mask_latent", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "range", "stylegan2_generator_network.SynthesisModule.__getattr__().mask_latent", "feats.append", "stylegan2_generator_network.SynthesisModule.layer0", "range", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__().mask_latent", "stylegan2_generator_network.SynthesisModule.__getattr__().mask_latent", "feats.append", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "numpy.sqrt", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.upsample", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__", "stylegan2_generator_network.SynthesisModule.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "mask_latent", "(", "self", ",", "ws", ",", "masks", ")", ":", "\n", "    ", "x", "=", "self", ".", "early_layer", ".", "mask_latent", "(", "w", ")", "\n", "feats", "=", "[", "]", "\n", "if", "self", ".", "architecture_type", "==", "'origin'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "layer_idx", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "elif", "self", ".", "architecture_type", "==", "'skip'", ":", "\n", "      ", "for", "layer_idx", "in", "range", "(", "self", ".", "num_layers", "-", "1", ")", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "layer_idx", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "if", "layer_idx", "%", "2", "==", "0", ":", "\n", "          ", "if", "layer_idx", "==", "0", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "1", "]", ")", "+", "self", ".", "upsample", "(", "image", ")", "\n", "", "", "feats", ".", "append", "(", "x", ")", "\n", "", "", "elif", "self", ".", "architecture_type", "==", "'resnet'", ":", "\n", "      ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "for", "layer_idx", "in", "range", "(", "1", ",", "self", ".", "num_layers", "-", "1", ",", "2", ")", ":", "\n", "        ", "residual", "=", "self", ".", "__getattr__", "(", "f'skip_layer{layer_idx // 2}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "layer_idx", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{layer_idx + 1}'", ")", ".", "mask_latent", "(", "\n", "x", ",", "\n", "[", "w", "[", ":", ",", "layer_idx", "+", "1", "]", "for", "w", "in", "ws", "]", ",", "\n", "masks", ")", "\n", "x", "=", "(", "x", "+", "residual", ")", "/", "np", ".", "sqrt", "(", "2.0", ")", "\n", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "__getattr__", "(", "f'output{layer_idx // 2 + 1}'", ")", "(", "\n", "x", ",", "w", "[", ":", ",", "layer_idx", "+", "2", "]", ")", "\n", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "\n", "return", "image", ",", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.PixelNormLayer.__init__": [[605, 609], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "dim", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.PixelNormLayer.forward": [[610, 613], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "norm", "=", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "return", "x", "/", "norm", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.UpsamplingLayer.__init__": [[621, 663], ["torch.Module.__init__", "numpy.outer", "numpy.transpose", "stylegan2_generator_network.UpsamplingLayer.register_buffer", "stylegan2_generator_network.UpsamplingLayer.kernel.flip", "numpy.ones", "numpy.array", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "scale_factor", "=", "2", ",", "\n", "kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "extra_padding", "=", "0", ",", "\n", "kernel_gain", "=", "None", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "scale_factor", ">=", "1", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "if", "extra_padding", "!=", "0", ":", "\n", "      ", "assert", "scale_factor", "==", "1", "\n", "\n", "", "if", "kernel", "is", "None", ":", "\n", "      ", "kernel", "=", "np", ".", "ones", "(", "(", "scale_factor", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "      ", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "assert", "kernel", ".", "ndim", "==", "1", "\n", "kernel", "=", "np", ".", "outer", "(", "kernel", ",", "kernel", ")", "\n", "kernel", "=", "kernel", "/", "np", ".", "sum", "(", "kernel", ")", "\n", "if", "kernel_gain", "is", "None", ":", "\n", "      ", "kernel", "=", "kernel", "*", "(", "scale_factor", "**", "2", ")", "\n", "", "else", ":", "\n", "      ", "assert", "kernel_gain", ">", "0", "\n", "kernel", "=", "kernel", "*", "(", "kernel_gain", "**", "2", ")", "\n", "", "assert", "kernel", ".", "ndim", "==", "2", "\n", "assert", "kernel", ".", "shape", "[", "0", "]", "==", "kernel", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "kernel", "=", "np", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "torch", ".", "from_numpy", "(", "kernel", ")", ")", "\n", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "flip", "(", "0", ",", "1", ")", "\n", "\n", "self", ".", "upsample_padding", "=", "(", "0", ",", "scale_factor", "-", "1", ",", "# Width padding.", "\n", "0", ",", "0", ",", "# Width.", "\n", "0", ",", "scale_factor", "-", "1", ",", "# Height padding.", "\n", "0", ",", "0", ",", "# Height.", "\n", "0", ",", "0", ",", "# Channel.", "\n", "0", ",", "0", ")", "# Batch size.", "\n", "\n", "\n", "padding", "=", "kernel", ".", "shape", "[", "2", "]", "-", "scale_factor", "+", "extra_padding", "\n", "self", ".", "padding", "=", "(", "(", "padding", "+", "1", ")", "//", "2", "+", "scale_factor", "-", "1", ",", "padding", "//", "2", ",", "\n", "(", "padding", "+", "1", ")", "//", "2", "+", "scale_factor", "-", "1", ",", "padding", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.UpsamplingLayer.forward": [[664, 677], ["x.view.view.view", "torch.pad", "torch.pad", "torch.pad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.view.view.view", "x.view.view.view", "torch.pad", "torch.pad", "torch.pad", "x.view.view.view"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "4", "\n", "channels", "=", "x", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "scale_factor", ">", "1", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "channels", ",", "x", ".", "shape", "[", "2", "]", ",", "1", ",", "x", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "self", ".", "upsample_padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "channels", ",", "x", ".", "shape", "[", "2", "]", "*", "self", ".", "scale_factor", ",", "\n", "x", ".", "shape", "[", "4", "]", "*", "self", ".", "scale_factor", ")", "\n", "", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "self", ".", "padding", ",", "mode", "=", "'constant'", ",", "value", "=", "0", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "stride", "=", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "channels", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.__init__": [[686, 690], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "init_resolution", ",", "channels", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "const", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "1", ",", "channels", ",", "init_resolution", ",", "init_resolution", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.forward": [[691, 694], ["stylegan2_generator_network.InputBlock.const.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ")", ":", "\n", "    ", "x", "=", "self", ".", "const", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.InputBlock.mask_latent": [[695, 699], ["sum", "stylegan2_generator_network.InputBlock.const.repeat", "zip"], "methods", ["None"], ["", "def", "mask_latent", "(", "self", ",", "ws", ",", "masks", ")", ":", "\n", "    ", "x", "=", "sum", "(", "[", "mask", "*", "self", ".", "const", ".", "repeat", "(", "w", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ",", "1", ")", "\n", "for", "mask", ",", "w", "in", "zip", "(", "masks", ",", "ws", ")", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.ConvBlock.__init__": [[704, 766], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "numpy.sqrt", "stylegan2_generator_network.UpsamplingLayer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "scale_factor", "=", "1", ",", "\n", "filtering_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "weight_gain", "=", "1.0", ",", "\n", "lr_multiplier", "=", "1.0", ",", "\n", "add_bias", "=", "True", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    NOTE: Wscale is used as default.\n\n    Args:\n      in_channels: Number of channels of the input tensor.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      scale_factor: Scale factor for upsampling. `1` means skip upsampling.\n      filtering_kernel: Kernel used for filtering after upsampling.\n      weight_gain: Gain factor for weight parameter in convolutional layer.\n      lr_multiplier: Learning rate multiplier.\n      add_bias: Whether to add bias after convolution.\n      activation_type: Type of activation. Support `linear`, `relu`, `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "scale_factor", ">=", "1", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "weight_scale", "=", "weight_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n", "if", "scale_factor", ">", "1", ":", "\n", "      ", "self", ".", "filter", "=", "UpsamplingLayer", "(", "scale_factor", "=", "1", ",", "\n", "kernel", "=", "filtering_kernel", ",", "\n", "extra_padding", "=", "scale_factor", "-", "kernel_size", ",", "\n", "kernel_gain", "=", "scale_factor", ")", "\n", "", "else", ":", "\n", "      ", "assert", "kernel_size", "%", "2", "==", "1", "\n", "self", ".", "conv_padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "self", ".", "add_bias", "=", "add_bias", "\n", "if", "add_bias", ":", "\n", "      ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n", "", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activate_scale", "=", "1.0", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.ConvBlock.forward": [[768, 783], ["weight.permute.permute.flip().permute", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "stylegan2_generator_network.ConvBlock.filter", "weight.permute.permute.permute", "torch.conv2d", "torch.conv2d", "torch.conv2d", "stylegan2_generator_network.ConvBlock.activate", "bias.view", "weight.permute.permute.flip"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_scale", "*", "self", ".", "lr_multiplier", "\n", "if", "self", ".", "scale_factor", ">", "1", ":", "\n", "      ", "weight", "=", "weight", ".", "flip", "(", "0", ",", "1", ")", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "weight", ",", "stride", "=", "self", ".", "scale_factor", ",", "padding", "=", "0", ")", "\n", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "weight", "=", "weight", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "conv_padding", ")", "\n", "\n", "", "if", "self", ".", "add_bias", ":", "\n", "      ", "bias", "=", "self", ".", "bias", "*", "self", ".", "lr_multiplier", "\n", "x", "=", "x", "+", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "*", "self", ".", "activate_scale", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.ModulateConvBlock.__init__": [[788, 887], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "stylegan2_generator_network.DenseBlock", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "numpy.sqrt", "stylegan2_generator_network.UpsamplingLayer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan2_generator_network.ModulateConvBlock.register_buffer", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.sqrt", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "scale_factor", "=", "1", ",", "\n", "filtering_kernel", "=", "(", "1", ",", "3", ",", "3", ",", "1", ")", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "fused_modulate", "=", "True", ",", "\n", "demodulate", "=", "True", ",", "\n", "weight_gain", "=", "1.0", ",", "\n", "lr_multiplier", "=", "1.0", ",", "\n", "add_bias", "=", "True", ",", "\n", "activation_type", "=", "'lrelu'", ",", "\n", "add_noise", "=", "True", ",", "\n", "randomize_noise", "=", "True", ",", "\n", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    NOTE: Wscale is used as default.\n\n    Args:\n      resolution: Spatial resolution of current convolution block.\n      in_channels: Number of channels of the input tensor.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      scale_factor: Scale factor for upsampling. `1` means skip upsampling.\n      filtering_kernel: Kernel used for filtering after upsampling.\n      w_space_dim: Dimension of disentangled latent space. This is used for\n        style modulation.\n      fused_modulate: Whether to fuse `style_modulate` and `conv2d` together.\n      demodulate: Whether to perform style demodulation.\n      weight_gain: Gain factor for weight parameter in convolutional layer.\n      lr_multiplier: Learning rate multiplier.\n      add_bias: Whether to add bias after convolution.\n      activation_type: Type of activation. Support `linear`, `relu`, `lrelu`.\n      add_noise: Whether to add noise to spatial feature map.\n      randomize_noise: Whether to randomize new noises at runtime.\n      epsilon: Small number to avoid `divide by zero`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "res", "=", "resolution", "\n", "self", ".", "in_c", "=", "in_channels", "\n", "self", ".", "out_c", "=", "out_channels", "\n", "self", ".", "ksize", "=", "kernel_size", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "weight_scale", "=", "weight_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "if", "scale_factor", ">", "1", ":", "\n", "      ", "self", ".", "filter", "=", "UpsamplingLayer", "(", "scale_factor", "=", "1", ",", "\n", "kernel", "=", "filtering_kernel", ",", "\n", "extra_padding", "=", "scale_factor", "-", "kernel_size", ",", "\n", "kernel_gain", "=", "scale_factor", ")", "\n", "", "else", ":", "\n", "      ", "assert", "kernel_size", "%", "2", "==", "1", "\n", "self", ".", "conv_padding", "=", "kernel_size", "//", "2", "\n", "\n", "", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "style", "=", "DenseBlock", "(", "in_channels", "=", "w_space_dim", ",", "\n", "out_channels", "=", "in_channels", ",", "\n", "lr_multiplier", "=", "1.0", ",", "\n", "init_bias", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", "\n", "\n", "self", ".", "fused_modulate", "=", "fused_modulate", "\n", "self", ".", "demodulate", "=", "demodulate", "\n", "\n", "self", ".", "add_bias", "=", "add_bias", "\n", "if", "add_bias", ":", "\n", "      ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n", "", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activate_scale", "=", "1.0", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n", "\n", "", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "randomize_noise", "=", "randomize_noise", "\n", "if", "add_noise", ":", "\n", "      ", "self", ".", "register_buffer", "(", "'noise'", ",", "torch", ".", "randn", "(", "1", ",", "1", ",", "self", ".", "res", ",", "self", ".", "res", ")", ")", "\n", "self", ".", "noise_strength", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.ModulateConvBlock.forward": [[888, 950], ["stylegan2_generator_network.ModulateConvBlock.style", "weight.permute.permute.view", "stylegan2_generator_network.ModulateConvBlock.view", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "x.view.view.view", "weight.permute.view.permute().reshape", "weight.permute.permute.flip", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "stylegan2_generator_network.ModulateConvBlock.filter", "weight.permute.permute.permute", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x.view.view.view", "stylegan2_generator_network.ModulateConvBlock.activate", "torch.sqrt.view", "torch.sqrt.view", "torch.sqrt.view", "stylegan2_generator_network.ModulateConvBlock.view", "weight.permute.permute.view", "weight.permute.permute.permute", "weight.permute.permute.reshape", "weight.permute.permute.permute", "weight.permute.permute.permute", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "torch.randn().to", "bias.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "weight.permute.view.permute", "torch.sqrt.view", "torch.sqrt.view", "torch.sqrt.view", "stylegan2_generator_network.ModulateConvBlock.noise_strength.view", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "w", ")", ":", "\n", "    ", "assert", "x", ".", "ndim", "==", "4", "and", "w", ".", "ndim", "==", "2", "\n", "batch", "=", "x", ".", "shape", "[", "0", "]", "\n", "assert", "w", ".", "shape", "==", "(", "batch", ",", "self", ".", "w_space_dim", ")", "\n", "\n", "weight", "=", "self", ".", "weight", "*", "self", ".", "weight_scale", "*", "self", ".", "lr_multiplier", "\n", "\n", "# Style modulation.", "\n", "style", "=", "self", ".", "style", "(", "w", ")", "\n", "_weight", "=", "weight", ".", "view", "(", "1", ",", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "self", ".", "in_c", ",", "self", ".", "out_c", ")", "\n", "_weight", "=", "_weight", "*", "style", ".", "view", "(", "batch", ",", "1", ",", "1", ",", "self", ".", "in_c", ",", "1", ")", "\n", "\n", "# Style demodulation.", "\n", "if", "self", ".", "demodulate", ":", "\n", "      ", "_weight_norm", "=", "torch", ".", "sqrt", "(", "\n", "torch", ".", "sum", "(", "_weight", "**", "2", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "self", ".", "eps", ")", "\n", "_weight", "=", "_weight", "/", "_weight_norm", ".", "view", "(", "batch", ",", "1", ",", "1", ",", "1", ",", "self", ".", "out_c", ")", "\n", "\n", "", "if", "self", ".", "fused_modulate", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "1", ",", "batch", "*", "self", ".", "in_c", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "\n", "weight", "=", "_weight", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ",", "4", ")", ".", "reshape", "(", "\n", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "self", ".", "in_c", ",", "batch", "*", "self", ".", "out_c", ")", "\n", "", "else", ":", "\n", "      ", "x", "=", "x", "*", "style", ".", "view", "(", "batch", ",", "self", ".", "in_c", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "scale_factor", ">", "1", ":", "\n", "      ", "weight", "=", "weight", ".", "flip", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "fused_modulate", ":", "\n", "        ", "weight", "=", "weight", ".", "view", "(", "\n", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "self", ".", "in_c", ",", "batch", ",", "self", ".", "out_c", ")", "\n", "weight", "=", "weight", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "3", ",", "2", ")", "\n", "weight", "=", "weight", ".", "reshape", "(", "\n", "self", ".", "ksize", ",", "self", ".", "ksize", ",", "self", ".", "out_c", ",", "batch", "*", "self", ".", "in_c", ")", "\n", "weight", "=", "weight", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "else", ":", "\n", "        ", "weight", "=", "weight", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "weight", ",", "stride", "=", "self", ".", "scale_factor", ",", "padding", "=", "0", ",", "\n", "groups", "=", "(", "batch", "if", "self", ".", "fused_modulate", "else", "1", ")", ")", "\n", "x", "=", "self", ".", "filter", "(", "x", ")", "\n", "", "else", ":", "\n", "      ", "weight", "=", "weight", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "weight", ",", "stride", "=", "1", ",", "padding", "=", "self", ".", "conv_padding", ",", "\n", "groups", "=", "(", "batch", "if", "self", ".", "fused_modulate", "else", "1", ")", ")", "\n", "\n", "", "if", "self", ".", "fused_modulate", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "batch", ",", "self", ".", "out_c", ",", "self", ".", "res", ",", "self", ".", "res", ")", "\n", "", "elif", "self", ".", "demodulate", ":", "\n", "      ", "x", "=", "x", "/", "_weight_norm", ".", "view", "(", "batch", ",", "self", ".", "out_c", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "add_noise", ":", "\n", "      ", "if", "self", ".", "randomize_noise", ":", "\n", "        ", "noise", "=", "torch", ".", "randn", "(", "x", ".", "shape", "[", "0", "]", ",", "1", ",", "self", ".", "res", ",", "self", ".", "res", ")", ".", "to", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "noise", "=", "self", ".", "noise", "\n", "", "x", "=", "x", "+", "noise", "*", "self", ".", "noise_strength", ".", "view", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "\n", "", "if", "self", ".", "add_bias", ":", "\n", "      ", "bias", "=", "self", ".", "bias", "*", "self", ".", "lr_multiplier", "\n", "x", "=", "x", "+", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "*", "self", ".", "activate_scale", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.DenseBlock.__init__": [[955, 1004], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.Identity", "torch.Identity", "torch.Identity", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ReLU", "torch.ReLU", "torch.ReLU", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "numpy.sqrt", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "weight_gain", "=", "1.0", ",", "\n", "lr_multiplier", "=", "0.01", ",", "\n", "add_bias", "=", "True", ",", "\n", "init_bias", "=", "0", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    NOTE: Wscale is used as default.\n\n    Args:\n      in_channels: Number of channels of the input tensor.\n      out_channels: Number of channels of the output tensor.\n      weight_gain: Gain factor for weight parameter in dense layer.\n      lr_multiplier: Learning rate multiplier.\n      add_bias: Whether to add bias after fully-connected operation.\n      init_bias: Initialized bias.\n      activation_type: Type of activation. Support `linear`, `relu`, `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "add_bias", "=", "add_bias", "\n", "if", "add_bias", ":", "\n", "      ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "", "self", ".", "init_bias", "=", "init_bias", "\n", "\n", "self", ".", "weight_scale", "=", "weight_gain", "/", "np", ".", "sqrt", "(", "in_channels", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "self", ".", "activate_scale", "=", "1.0", "\n", "", "elif", "activation_type", "==", "'relu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "self", ".", "activate_scale", "=", "np", ".", "sqrt", "(", "2.0", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan2_generator_network.DenseBlock.forward": [[1006, 1014], ["x.view.view.view", "stylegan2_generator_network.DenseBlock.activate", "stylegan2_generator_network.DenseBlock.fc", "stylegan2_generator_network.DenseBlock.bias.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "*", "self", ".", "weight_scale", "*", "self", ".", "lr_multiplier", "\n", "if", "self", ".", "add_bias", ":", "\n", "      ", "x", "=", "x", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "*", "self", ".", "lr_multiplier", "+", "self", ".", "init_bias", "\n", "", "x", "=", "self", ".", "activate", "(", "x", ")", "*", "self", ".", "activate_scale", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.VGG16.__init__": [[79, 128], ["collections.OrderedDict", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "perceptual_model.VGG16.mean.type", "torch.Sequential.__init__", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "output_layer_idx", "=", "23", ",", "min_val", "=", "-", "1.0", ",", "max_val", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Defines the network structure.\n\n    Args:\n      output_layer_idx: Index of layer whose output will be used as perceptual\n        feature. (default: 23, which is the `block4_conv3` layer activated by\n        `ReLU` function)\n      min_val: Minimum value of the raw input. (default: -1.0)\n      max_val: Maximum value of the raw input. (default: 1.0)\n    \"\"\"", "\n", "sequence", "=", "OrderedDict", "(", "{", "\n", "'layer0'", ":", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer1'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer2'", ":", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer3'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer4'", ":", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "'layer5'", ":", "nn", ".", "Conv2d", "(", "64", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer6'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer7'", ":", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer8'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer9'", ":", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "'layer10'", ":", "nn", ".", "Conv2d", "(", "128", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer11'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer12'", ":", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer13'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer14'", ":", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer15'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer16'", ":", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "'layer17'", ":", "nn", ".", "Conv2d", "(", "256", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer18'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer19'", ":", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer20'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer21'", ":", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer22'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer23'", ":", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "'layer24'", ":", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer25'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer26'", ":", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer27'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer28'", ":", "nn", ".", "Conv2d", "(", "512", ",", "512", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "'layer29'", ":", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "'layer30'", ":", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "}", ")", "\n", "self", ".", "output_layer_idx", "=", "output_layer_idx", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "max_val", "=", "max_val", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "_MEAN_STATS", ")", ")", ".", "view", "(", "1", ",", "3", ",", "1", ",", "1", ")", "\n", "self", ".", "mean", "=", "self", ".", "mean", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "super", "(", ")", ".", "__init__", "(", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.VGG16.forward": [[129, 136], ["range", "perceptual_model.VGG16.mean.to", "perceptual_model.VGG16.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "(", "x", "-", "self", ".", "min_val", ")", "*", "255.0", "/", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "\n", "x", "=", "x", "[", ":", ",", "[", "2", ",", "1", ",", "0", "]", ",", ":", ",", ":", "]", "\n", "x", "=", "x", "-", "self", ".", "mean", ".", "to", "(", "x", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "output_layer_idx", ")", ":", "\n", "      ", "x", "=", "self", ".", "__getattr__", "(", "f'layer{i}'", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.__init__": [[141, 167], ["perceptual_model.VGG16", "perceptual_model.PerceptualModel.net.load_state_dict", "perceptual_model.PerceptualModel.net.eval().to", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "os.path.isfile", "perceptual_model.PerceptualModel.convert_tf_weights", "torch.load", "torch.load", "torch.load", "torch.load", "os.path.isfile", "ValueError", "perceptual_model.PerceptualModel.net.eval"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.convert_tf_weights", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["def", "__init__", "(", "self", ",", "output_layer_idx", "=", "23", ",", "min_val", "=", "-", "1.0", ",", "max_val", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"Initializes.\"\"\"", "\n", "self", ".", "use_cuda", "=", "model_settings", ".", "USE_CUDA", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "self", ".", "batch_size", "=", "model_settings", ".", "MAX_IMAGES_ON_DEVICE", "\n", "self", ".", "ram_size", "=", "model_settings", ".", "MAX_IMAGES_ON_RAM", "\n", "self", ".", "run_device", "=", "'cuda'", "if", "self", ".", "use_cuda", "else", "'cpu'", "\n", "self", ".", "cpu_device", "=", "'cpu'", "\n", "\n", "self", ".", "output_layer_idx", "=", "output_layer_idx", "\n", "self", ".", "image_channels", "=", "3", "\n", "self", ".", "min_val", "=", "min_val", "\n", "self", ".", "max_val", "=", "max_val", "\n", "self", ".", "net", "=", "VGG16", "(", "output_layer_idx", "=", "self", ".", "output_layer_idx", ",", "\n", "min_val", "=", "self", ".", "min_val", ",", "\n", "max_val", "=", "self", ".", "max_val", ")", "\n", "\n", "self", ".", "weight_path", "=", "_PTH_WEIGHT_PATH", "\n", "self", ".", "tf_weight_path", "=", "_TF_WEIGHT_PATH", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "weight_path", ")", ":", "\n", "      ", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "tf_weight_path", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'No pre-trained weights found for perceptual model!'", ")", "\n", "", "self", ".", "convert_tf_weights", "(", ")", "\n", "\n", "", "self", ".", "net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "self", ".", "weight_path", ")", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.convert_tf_weights": [[168, 179], ["torch.save", "torch.save", "torch.save", "torch.save", "h5py.File", "_PTH_VARS_TO_TF_VARS.items", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "var.permute.permute.permute", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "convert_tf_weights", "(", "self", ")", ":", "\n", "    ", "\"\"\"Converts pre-trained weights from tensorflow version.\"\"\"", "\n", "state_dict", "=", "{", "}", "\n", "with", "h5py", ".", "File", "(", "self", ".", "tf_weight_path", ",", "'r'", ")", "as", "f", ":", "\n", "      ", "for", "pth_var_name", ",", "tf_var_name", "in", "_PTH_VARS_TO_TF_VARS", ".", "items", "(", ")", ":", "\n", "        ", "tf_layer_name", "=", "tf_var_name", "[", ":", "len", "(", "'block0_conv0'", ")", "]", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "f", "[", "tf_layer_name", "]", "[", "tf_var_name", "]", "[", "(", ")", "]", ")", ")", "\n", "if", "var", ".", "ndim", "==", "4", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs": [[180, 194], ["range"], "methods", ["None"], ["", "def", "get_batch_inputs", "(", "self", ",", "inputs", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Gets inputs within mini-batch.\n\n    This function yields at most `self.batch_size` inputs at a time.\n\n    Args:\n      inputs: Input data to form mini-batch.\n      batch_size: Batch size. If not specified, `self.batch_size` will be used.\n        (default: None)\n    \"\"\"", "\n", "total_num", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "batch_size", "=", "batch_size", "or", "self", ".", "batch_size", "\n", "for", "i", "in", "range", "(", "0", ",", "total_num", ",", "batch_size", ")", ":", "\n", "      ", "yield", "inputs", "[", "i", ":", "i", "+", "batch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel._extract": [[195, 214], ["torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "torch.from_numpy().type().to", "perceptual_model.PerceptualModel.net", "perceptual_model.PerceptualModel.to().detach().numpy", "ValueError", "numpy.tile", "ValueError", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "torch.from_numpy().type", "perceptual_model.PerceptualModel.to().detach", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "perceptual_model.PerceptualModel.to"], "methods", ["None"], ["", "", "def", "_extract", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Extracts perceptual feature within mini-batch.\"\"\"", "\n", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "images", ".", "shape", "[", "1", "]", "not", "in", "[", "1", ",", "3", "]", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input images should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`batch_size` no larger than {self.batch_size}, '", "\n", "f'`channel` equals to 1 or 3!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "      ", "images", "=", "np", ".", "tile", "(", "images", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "!=", "self", ".", "image_channels", ":", "\n", "      ", "raise", "ValueError", "(", "f'Number of channels of input image, which is '", "\n", "f'{images.shape[1]}, is not supported by the current '", "\n", "f'perceptual model, which requires '", "\n", "f'{self.image_channels} channels!'", ")", "\n", "", "x", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "f", "=", "self", ".", "net", "(", "x", ")", "\n", "return", "f", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.extract": [[215, 228], ["perceptual_model.PerceptualModel.get_batch_inputs", "numpy.concatenate", "perceptual_model.PerceptualModel.logger.warning", "results.append", "perceptual_model.PerceptualModel._extract"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel._extract"], ["", "def", "extract", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Extracts perceptual feature from input images.\"\"\"", "\n", "if", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "ram_size", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Number of inputs on RAM is larger than '", "\n", "f'{self.ram_size}. Please use '", "\n", "f'`self.get_batch_inputs()` to split the inputs! '", "\n", "f'Otherwise, it may encounter OOM problem!'", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "batch_images", "in", "self", ".", "get_batch_inputs", "(", "images", ")", ":", "\n", "      ", "results", ".", "append", "(", "self", ".", "_extract", "(", "batch_images", ")", ")", "\n", "\n", "", "return", "np", ".", "concatenate", "(", "results", ",", "axis", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_pth_weight_path": [[464, 472], ["isinstance", "os.path.join"], "function", ["None"], ["def", "get_pth_weight_path", "(", "weight_name", ")", ":", "\n", "  ", "\"\"\"Gets weight path from `MODEL_DIR/PTH_MODEL_DIR`.\"\"\"", "\n", "assert", "isinstance", "(", "weight_name", ",", "str", ")", "\n", "if", "weight_name", "==", "''", ":", "\n", "    ", "return", "''", "\n", "", "if", "weight_name", "[", "-", "4", ":", "]", "!=", "'.pth'", ":", "\n", "    ", "weight_name", "+=", "'.pth'", "\n", "", "return", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "PTH_MODEL_DIR", ",", "weight_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_tf_weight_path": [[474, 480], ["isinstance", "os.path.join"], "function", ["None"], ["", "def", "get_tf_weight_path", "(", "weight_name", ")", ":", "\n", "  ", "\"\"\"Gets weight path from `MODEL_DIR/TF_MODEL_DIR`.\"\"\"", "\n", "assert", "isinstance", "(", "weight_name", ",", "str", ")", "\n", "if", "weight_name", "==", "''", ":", "\n", "    ", "return", "''", "\n", "", "return", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "TF_MODEL_DIR", ",", "weight_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.model_settings.get_code_path": [[482, 488], ["isinstance", "os.path.join"], "function", ["None"], ["", "def", "get_code_path", "(", "code_name", ")", ":", "\n", "  ", "\"\"\"Gets code path from `BASE_DIR`.\"\"\"", "\n", "assert", "isinstance", "(", "code_name", ",", "str", ")", "\n", "if", "code_name", "==", "''", ":", "\n", "    ", "return", "''", "\n", "", "return", "os", ".", "path", ".", "join", "(", "BASE_DIR", ",", "code_name", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator.PGGANDiscriminator.__init__": [[21, 26], ["base_discriminator.BaseDiscriminator.__init__", "pggan_discriminator.PGGANDiscriminator.net.lod.to().tolist", "pggan_discriminator.PGGANDiscriminator.logger.info", "pggan_discriminator.PGGANDiscriminator.net.lod.to"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'pggan'", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "self", ".", "lod", "=", "self", ".", "net", ".", "lod", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "tolist", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Current `lod` is {self.lod}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator.PGGANDiscriminator.build": [[27, 43], ["getattr", "getattr", "getattr", "getattr", "getattr", "pggan_discriminator_network.PGGANDiscriminatorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "fused_scale", "=", "getattr", "(", "self", ",", "'fused_scale'", ",", "False", ")", "\n", "self", ".", "minibatch_std_group_size", "=", "getattr", "(", "\n", "self", ",", "'minibatch_std_group_size'", ",", "16", ")", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "16", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "assert", "self", ".", "label_size", ">=", "0", "\n", "self", ".", "net", "=", "PGGANDiscriminatorNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ",", "\n", "minibatch_std_group_size", "=", "self", ".", "minibatch_std_group_size", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator.PGGANDiscriminator.convert_tf_weights": [[44, 111], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "pggan_discriminator.PGGANDiscriminator.logger.info", "sys.path.insert", "sys.path.pop", "pggan_discriminator.PGGANDiscriminator.logger.info", "pggan_discriminator.PGGANDiscriminator.logger.info", "dict", "pggan_discriminator.PGGANDiscriminator.net.state_dict", "pggan_discriminator.PGGANDiscriminator.net.pth_to_tf_var_mapping.items", "pggan_discriminator.PGGANDiscriminator.logger.info", "pggan_discriminator.PGGANDiscriminator.logger.info", "torch.save", "pggan_discriminator.PGGANDiscriminator.logger.info", "pggan_discriminator.PGGANDiscriminator.load", "pggan_discriminator.PGGANDiscriminator.logger.info", "pggan_discriminator.PGGANDiscriminator.net.eval().to", "range", "pggan_discriminator.PGGANDiscriminator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "pggan_discriminator.PGGANDiscriminator.logger.debug", "torch.from_numpy", "pggan_discriminator.PGGANDiscriminator.logger.warning", "tf.compat.v1.InteractiveSession.close", "tf_net.run", "pggan_discriminator.PGGANDiscriminator.rate", "numpy.average", "pggan_discriminator.PGGANDiscriminator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "pggan_discriminator.PGGANDiscriminator.net.eval", "numpy.abs", "numpy.average", "var.permute.permute.permute", "numpy.random.rand", "numpy.abs", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.rate", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "input_shape", "=", "[", "1", ",", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", "\n", "image", "=", "np", ".", "random", ".", "rand", "(", "*", "input_shape", ")", "*", "2", "-", "1", "\n", "tf_output", "=", "tf_net", ".", "run", "(", "image", ")", "\n", "pth_output", "=", "self", ".", "rate", "(", "image", ")", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "[", "0", "]", "-", "pth_output", "[", "'score'", "]", ")", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "distance", "+=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "[", "1", "]", "-", "pth_output", "[", "'label_score'", "]", ")", ")", "\n", "", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator.PGGANDiscriminator._rate": [[112, 140], ["pggan_discriminator.PGGANDiscriminator.to_tensor", "pggan_discriminator.PGGANDiscriminator.net", "pggan_discriminator.PGGANDiscriminator.get_value", "isinstance", "ValueError", "ValueError", "images.astype", "torch.cuda.empty_cache"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_rate", "(", "self", ",", "images", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "images", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input images should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`batch_size` no larger than {self.batch_size}, '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "self", ".", "to_tensor", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "scores", "=", "self", ".", "net", "(", "xs", ")", "\n", "scores", "=", "self", ".", "get_value", "(", "scores", ")", "\n", "assert", "scores", ".", "ndim", "==", "2", "and", "scores", ".", "shape", "[", "1", "]", "==", "1", "+", "self", ".", "label_size", "\n", "results", "=", "{", "\n", "'image'", ":", "images", ",", "\n", "'score'", ":", "scores", "[", ":", ",", ":", "1", "]", ",", "\n", "}", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label_score'", "]", "=", "scores", "[", ":", ",", "1", ":", "]", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator.PGGANDiscriminator.rate": [[141, 143], ["pggan_discriminator.PGGANDiscriminator.batch_run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run"], ["", "def", "rate", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "self", ".", "_rate", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.StyleGANDiscriminatorNet.__init__": [[40, 175], ["torch.Module.__init__", "int", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "stylegan_discriminator_network.AveragePoolingLayer", "ValueError", "ValueError", "numpy.log2", "numpy.log2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.ConvBlock", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.StyleGANDiscriminatorNet.add_module", "stylegan_discriminator_network.ConvBlock", "stylegan_discriminator_network.ConvBlock", "stylegan_discriminator_network.ConvBlock", "stylegan_discriminator_network.DenseBlock", "stylegan_discriminator_network.DenseBlock", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf", "max", "stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "image_channels", "=", "3", ",", "\n", "label_size", "=", "0", ",", "\n", "fused_scale", "=", "'auto'", ",", "\n", "minibatch_std_group_size", "=", "4", ",", "\n", "minibatch_std_num_channels", "=", "1", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the discriminator with basic settings.\n\n    Args:\n      resolution: The resolution of the input image.\n      image_channels: Number of channels of the input image. (default: 3)\n      label_size: Size of additional labels. (default: 0)\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides. (default: False)\n      minibatch_std_group_size: Group size for the minibatch standard deviation\n        layer. 0 means disable. (default: 4)\n      minibatch_std_num_channels: Number of new channels after the minibatch\n        standard deviation layer. (default: 1)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 16 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported, or `fused_scale`\n        is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "", "if", "fused_scale", "not", "in", "_FUSED_SCALE_OPTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid fused-scale option: {fused_scale}!\\n'", "\n", "f'Options allowed: {_FUSED_SCALE_OPTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "minibatch_std_group_size", "=", "minibatch_std_group_size", "\n", "self", ".", "minibatch_std_num_channels", "=", "minibatch_std_num_channels", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "# Level of detail (used for progressive training).", "\n", "self", ".", "lod", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'lod'", ":", "'lod'", "}", "\n", "\n", "# pylint: disable=line-too-long", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "\n", "# Input convolution layer for each resolution.", "\n", "self", ".", "add_module", "(", "\n", "f'input{block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "image_channels", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'FromRGB_lod{block_idx}/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'FromRGB_lod{block_idx}/bias'", ")", "\n", "\n", "# Convolution block for each resolution (except the last one).", "\n", "if", "res", "!=", "self", ".", "init_res", ":", "\n", "        ", "if", "self", ".", "fused_scale", "==", "'auto'", ":", "\n", "          ", "fused_scale", "=", "(", "res", ">=", "_AUTO_FUSED_SCALE_MIN_RES", ")", "\n", "", "else", ":", "\n", "          ", "fused_scale", "=", "self", ".", "fused_scale", "\n", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "downsample", "=", "True", ",", "\n", "fused_scale", "=", "fused_scale", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/bias'", ")", "\n", "if", "fused_scale", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/weight'", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/weight'", ")", "\n", "", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/bias'", ")", "\n", "\n", "# Convolution block for last resolution.", "\n", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "\n", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "minibatch_std", "=", "True", ",", "\n", "minibatch_std_group_size", "=", "self", ".", "minibatch_std_group_size", ",", "\n", "minibatch_std_num_channels", "=", "self", ".", "minibatch_std_num_channels", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", "*", "res", "*", "res", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 2}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "max", "(", "self", ".", "label_size", ",", "1", ")", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense1/bias'", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "", "", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.StyleGANDiscriminatorNet.get_nf": [[176, 179], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.StyleGANDiscriminatorNet.forward": [[180, 215], ["stylegan_discriminator_network.StyleGANDiscriminatorNet.lod.cpu().tolist", "range", "ValueError", "stylegan_discriminator_network.StyleGANDiscriminatorNet.__getattr__", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "ValueError", "ValueError", "stylegan_discriminator_network.StyleGANDiscriminatorNet.lod.cpu", "stylegan_discriminator_network.StyleGANDiscriminatorNet.downsample", "stylegan_discriminator_network.StyleGANDiscriminatorNet.__getattr__", "stylegan_discriminator_network.StyleGANDiscriminatorNet.__getattr__", "stylegan_discriminator_network.StyleGANDiscriminatorNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "image", ",", "label", "=", "None", ")", ":", "\n", "    ", "if", "image", ".", "ndim", "!=", "4", "or", "image", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input image should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {image.shape} is received!'", ")", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "if", "label", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model requires an additional label (with size '", "\n", "f'{self.label_size}) as inputs, but no label is '", "\n", "f'received!'", ")", "\n", "", "if", "label", ".", "ndim", "!=", "2", "or", "label", ".", "shape", "!=", "(", "image", ".", "shape", "[", "0", "]", ",", "self", ".", "label_size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input labels should be with shape [batch_size, '", "\n", "f'label_size], where `batch_size` equals to that of '", "\n", "f'images ({image.shape[0]}) and `label_size` equals '", "\n", "f'to {self.label_size}!\\n'", "\n", "f'But {label.shape} is received!'", ")", "\n", "\n", "", "", "lod", "=", "self", ".", "lod", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "if", "block_idx", "<", "lod", ":", "\n", "        ", "image", "=", "self", ".", "downsample", "(", "image", ")", "\n", "continue", "\n", "", "if", "block_idx", "==", "lod", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'input{block_idx}'", ")", "(", "image", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "x", "=", "torch", ".", "sum", "(", "x", "*", "label", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.MiniBatchSTDLayer.__init__": [[220, 225], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "group_size", "=", "16", ",", "num_channels", "=", "1", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.MiniBatchSTDLayer.forward": [[226, 239], ["min", "x.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "y.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "group_size", "<=", "1", ":", "\n", "      ", "return", "x", "\n", "", "ng", "=", "min", "(", "self", ".", "group_size", ",", "x", ".", "shape", "[", "0", "]", ")", "# [NCHW]", "\n", "nc", "=", "self", ".", "num_channels", "\n", "y", "=", "x", ".", "view", "(", "ng", ",", "-", "1", ",", "nc", ",", "x", ".", "shape", "[", "1", "]", "//", "nc", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [GMncHW]", "\n", "y", "=", "y", "-", "torch", ".", "mean", "(", "y", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "# [GMncHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", "**", "2", ",", "dim", "=", "0", ")", "# [MncHW]", "\n", "y", "=", "torch", ".", "sqrt", "(", "y", "+", "self", ".", "epsilon", ")", "# [MncHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdim", "=", "True", ")", "# [Mn111]", "\n", "y", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "2", ")", "# [Mn11]", "\n", "y", "=", "y", ".", "repeat", "(", "ng", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [NnHW]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.AveragePoolingLayer.__init__": [[248, 251], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.AveragePoolingLayer.forward": [[252, 256], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "ksize", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "strides", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "strides", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.BlurLayer.__init__": [[261, 278], ["torch.Module.__init__", "numpy.array().reshape", "numpy.transpose.T.dot", "numpy.tile", "numpy.transpose", "stylegan_discriminator_network.BlurLayer.register_buffer", "numpy.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "channels", ",", "\n", "kernel", "=", "(", "1", ",", "2", ",", "1", ")", ",", "\n", "normalize", "=", "True", ",", "\n", "flip", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "kernel", "=", "np", ".", "array", "(", "kernel", ",", "dtype", "=", "np", ".", "float32", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "kernel", "=", "kernel", ".", "T", ".", "dot", "(", "kernel", ")", "\n", "if", "normalize", ":", "\n", "      ", "kernel", "/=", "np", ".", "sum", "(", "kernel", ")", "\n", "", "if", "flip", ":", "\n", "      ", "kernel", "=", "kernel", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "kernel", "=", "kernel", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "kernel", "=", "np", ".", "tile", "(", "kernel", ",", "[", "1", ",", "1", ",", "channels", ",", "1", "]", ")", "\n", "kernel", "=", "np", ".", "transpose", "(", "kernel", ",", "[", "2", ",", "3", ",", "0", ",", "1", "]", ")", "\n", "self", ".", "register_buffer", "(", "'kernel'", ",", "torch", ".", "from_numpy", "(", "kernel", ")", ")", "\n", "self", ".", "channels", "=", "channels", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.BlurLayer.forward": [[279, 281], ["torch.conv2d", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "conv2d", "(", "x", ",", "self", ".", "kernel", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.WScaleLayer.__init__": [[291, 302], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "lr_multiplier", "=", "1.0", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "*", "lr_multiplier", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "self", ".", "lr_multiplier", "=", "lr_multiplier", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.WScaleLayer.forward": [[303, 309], ["ValueError", "stylegan_discriminator_network.WScaleLayer.bias.view", "stylegan_discriminator_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "4", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "if", "x", ".", "ndim", "==", "2", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "*", "self", ".", "lr_multiplier", "\n", "", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], or [batch_size, channel]!\\n'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.ConvBlock.__init__": [[321, 404], ["numpy.sqrt", "torch.Module.__init__", "stylegan_discriminator_network.WScaleLayer", "stylegan_discriminator_network.MiniBatchSTDLayer", "stylegan_discriminator_network.AveragePoolingLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "numpy.sqrt", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_discriminator_network.BlurLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "fused_scale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ",", "\n", "minibatch_std", "=", "False", ",", "\n", "minibatch_std_group_size", "=", "16", ",", "\n", "minibatch_std_num_channels", "=", "1", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      downsample: Whether to downsample the input tensor after convolution.\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n      minibatch_std: Whether to perform minibatch standard deviation.\n      minibatch_std_group_size: Group size for the minibatch standard deviation\n        layer.\n      minibatch_std_num_channels: Number of new channels after the minibatch\n        standard deviation layer.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "minibatch_std", ":", "\n", "      ", "in_channels", "=", "in_channels", "+", "minibatch_std_num_channels", "\n", "self", ".", "preact", "=", "MiniBatchSTDLayer", "(", "group_size", "=", "minibatch_std_group_size", ",", "\n", "num_channels", "=", "minibatch_std_num_channels", ")", "\n", "", "elif", "downsample", ":", "\n", "      ", "self", ".", "preact", "=", "BlurLayer", "(", "channels", "=", "in_channels", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preact", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "not", "fused_scale", ":", "\n", "      ", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "fused_scale", ":", "\n", "      ", "self", ".", "use_stride", "=", "True", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_stride", "=", "False", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "\n", "", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.ConvBlock.forward": [[406, 422], ["stylegan_discriminator_network.ConvBlock.preact", "stylegan_discriminator_network.ConvBlock.wscale", "stylegan_discriminator_network.ConvBlock.activate", "torch.pad", "torch.pad", "torch.pad", "kernel.permute.permute.permute", "torch.conv2d", "torch.conv2d", "torch.conv2d", "stylegan_discriminator_network.ConvBlock.downsample", "stylegan_discriminator_network.ConvBlock.conv"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "preact", "(", "x", ")", "\n", "if", "self", ".", "use_stride", ":", "\n", "      ", "kernel", "=", "self", ".", "weight", "*", "self", ".", "scale", "\n", "kernel", "=", "F", ".", "pad", "(", "kernel", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0.0", ")", "\n", "kernel", "=", "(", "kernel", "[", "1", ":", ",", "1", ":", "]", "+", "kernel", "[", ":", "-", "1", ",", "1", ":", "]", "+", "\n", "kernel", "[", "1", ":", ",", ":", "-", "1", "]", "+", "kernel", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "*", "0.25", "\n", "kernel", "=", "kernel", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", "\n", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "x", "=", "x", "/", "self", ".", "scale", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.DenseBlock.__init__": [[431, 463], ["numpy.sqrt", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "stylegan_discriminator_network.WScaleLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "add_bias", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      add_bias: Whether to add bias onto the fully-connected result.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "add_bias", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator_network.DenseBlock.forward": [[465, 472], ["stylegan_discriminator_network.DenseBlock.fc", "stylegan_discriminator_network.DenseBlock.wscale", "stylegan_discriminator_network.DenseBlock.activate", "x.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.layers.Sine.__init__": [[20, 23], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "omega0", "=", "30", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "omega0", "=", "omega0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.layers.Sine.forward": [[24, 26], ["torch.sin"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "return", "torch", ".", "sin", "(", "self", ".", "omega0", "*", "input", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.layers.sine_init": [[4, 10], ["torch.no_grad", "hasattr", "m.weight.size", "m.weight.uniform_", "math.sqrt"], "function", ["None"], ["def", "sine_init", "(", "m", ",", "omega0", "=", "30", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "      ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "T", "=", "math", ".", "sqrt", "(", "6", "/", "num_input", ")", "/", "omega0", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "T", ",", "T", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.layers.first_layer_sine_init": [[12, 17], ["torch.no_grad", "hasattr", "m.weight.size", "m.weight.uniform_"], "function", ["None"], ["", "", "", "def", "first_layer_sine_init", "(", "m", ")", ":", "\n", "  ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "    ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "      ", "num_input", "=", "m", ".", "weight", ".", "size", "(", "-", "1", ")", "\n", "m", ".", "weight", ".", "uniform_", "(", "-", "1", "/", "num_input", ",", "1", "/", "num_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.load_semantic_extractor": [[20, 39], ["torch.load", "SE.load_state_dict", "print", "torch.load", "torch.save", "fpath.replace"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "if", "predictor_name", "==", "'face_seg'", ":", "\n", "    ", "return", "FaceSegmenter", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "==", "'scene_seg'", ":", "\n", "    ", "return", "SceneSegmenter", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "==", "'scene'", ":", "\n", "    ", "return", "ScenePredictor", "(", "predictor_name", ")", "\n", "", "if", "predictor_name", "[", ":", "len", "(", "'celebahq_'", ")", "]", "==", "'celebahq_'", ":", "\n", "    ", "return", "FacePredictor", "(", "predictor_name", ")", "\n", "", "raise", "NotImplementedError", "(", "f'Unsupported predictor `{predictor_name}`!'", ")", "\n", "\n", "\n", "", "def", "build_extractor", "(", "architecture", ",", "spatial_feature", "=", "False", ",", "imagenet_logits", "=", "False", ")", ":", "\n", "  ", "\"\"\"Builds feature extractor by architecture name.\"\"\"", "\n", "if", "architecture", "not", "in", "PREDICTOR_POOL", ":", "\n", "    ", "raise", "ValueError", "(", "f'Feature extractor with architecture `{architecture}` is '", "\n", "f'not registered in `PREDICTOR_POOL` in '", "\n", "f'`predictor_settings.py`!'", ")", "\n", "", "return", "FeatureExtractor", "(", "architecture", ",", "\n", "spatial_feature", "=", "spatial_feature", ",", "\n", "imagenet_logits", "=", "imagenet_logits", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.save_semantic_extractor": [[40, 45], ["torch.save", "SE.arch_info", "SE.state_dict"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info"], ["", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_semantic_extractor": [[47, 57], ["ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_generator": [[59, 73], ["NotImplementedError", "ValueError", "model_name.split", "pggan_generator.PGGANGenerator", "stylegan_generator.StyleGANGenerator", "stylegan2_generator.StyleGAN2Generator"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_discriminator": [[75, 89], ["NotImplementedError", "ValueError", "model_name.split", "pggan_discriminator.PGGANDiscriminator", "stylegan_discriminator.StyleGANDiscriminator", "stylegan2_discriminator.StyleGAN2Discriminator"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_encoder": [[91, 101], ["NotImplementedError", "ValueError", "model_name.split", "stylegan_encoder.StyleGANEncoder"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_encoder.BaseEncoder.__init__": [[23, 30], ["base_module.BaseModule.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes the encoder with model name.\"\"\"", "\n", "self", ".", "encode_dim", "=", "None", "# Target shape of the encoded code.", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "'encoder'", ",", "logger", ")", "\n", "assert", "self", ".", "has_encoder", "\n", "assert", "self", ".", "encode_dim", "is", "not", "None", "\n", "assert", "isinstance", "(", "self", ".", "encode_dim", ",", "(", "list", ",", "tuple", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_encoder.BaseEncoder.preprocess": [[31, 76], ["numpy.tile.astype", "numpy.tile.astype().transpose", "isinstance", "ValueError", "ValueError", "ValueError", "numpy.tile", "ValueError", "numpy.tile.astype"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input images if needed.\n\n    This function assumes the input numpy array is with shape [batch_size,\n    height, width, channel]. Here, `channel = 3` for color image and\n    `channel = 1` for grayscale image. The returned images are with shape\n    [batch_size, channel, height, width].\n\n    NOTE: The channel order of input images is always assumed as `RGB`.\n\n    Args:\n      images: The raw inputs with dtype `numpy.uint8` and range [0, 255].\n\n    Returns:\n      The preprocessed images with dtype `numpy.float32` and range\n        [self.min_val, self.max_val].\n\n    Raises:\n      ValueError: If the input `images` are not with type `numpy.ndarray` or not\n        with dtype `numpy.uint8` or not with shape [batch_size, height, width,\n        channel].\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "\n", "", "if", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "3", "]", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input should be with shape [batch_size, height, width '", "\n", "f'channel], where channel equals to 1 or 3!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "==", "1", "and", "self", ".", "image_channels", "==", "3", ":", "\n", "      ", "images", "=", "np", ".", "tile", "(", "images", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ":", "\n", "      ", "raise", "ValueError", "(", "f'Number of channels of input image, which is '", "\n", "f'{images.shape[3]}, is not supported by the current '", "\n", "f'encoder, which requires {self.image_channels} '", "\n", "f'channels!'", ")", "\n", "", "if", "self", ".", "image_channels", "==", "3", "and", "self", ".", "channel_order", "==", "'BGR'", ":", "\n", "      ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images", "=", "images", "/", "255.0", "*", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "+", "self", ".", "min_val", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_encoder.BaseEncoder.encode": [[77, 90], ["NotImplementedError"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Encodes the input images to latent codes.\n\n    NOTE: The images are assumed to have already been preprocessed.\n\n    Args:\n      images: Input images to encode.\n\n    Returns:\n      A dictionary whose values are raw outputs from the encoder. Keys of the\n        dictionary usually include `image` and `code`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_encoder.BaseEncoder.easy_encode": [[91, 94], ["base_encoder.BaseEncoder.encode", "base_encoder.BaseEncoder.preprocess"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.encode", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess"], ["", "def", "easy_encode", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps functions `preprocess()` and `encode()` together.\"\"\"", "\n", "return", "self", ".", "encode", "(", "self", ".", "preprocess", "(", "images", ")", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SEFewShotLearner.__init__": [[13, 34], ["pytorch_lightning.LightningModule.__init__", "optim.split", "float", "lib.loss.FocalLoss", "lib.loss.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "G", ",", "\n", "optim", "=", "'adam-0.001'", ",", "# optimizer type and initial learning rate", "\n", "loss_type", "=", "'focal'", ",", "# focal / normal", "\n", "latent_strategy", "=", "'notrunc-mixwp'", ",", "\n", "resolution", "=", "512", ",", "# (pseudo)training label resolution", "\n", "save_dir", "=", "'expr'", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "latent_strategy", "=", "latent_strategy", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "if", "loss_type", "==", "'focal'", ":", "\n", "      ", "self", ".", "loss_fn_layer", "=", "loss", ".", "FocalLoss", "(", "True", ")", "\n", "self", ".", "loss_fn_final", "=", "loss", ".", "FocalLoss", "(", "False", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "loss_fn_layer", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "self", ".", "loss_fn_final", "=", "F", ".", "cross_entropy", "\n", "", "self", ".", "G", "=", "G", "\n", "self", ".", "best_val", "=", "0", "\n", "self", ".", "optim_type", ",", "self", ".", "lr", "=", "optim", ".", "split", "(", "\"-\"", ")", "\n", "self", ".", "lr", "=", "float", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SEFewShotLearner.get_wp": [[35, 45], ["semantic_extractor.SEFewShotLearner.G.truncation", "semantic_extractor.SEFewShotLearner.G.mapping", "semantic_extractor.SEFewShotLearner.G.mapping().unsqueeze().repeat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "zs.to.to.to", "semantic_extractor.SEFewShotLearner.G.mapping().view", "semantic_extractor.SEFewShotLearner.G.mapping().unsqueeze", "semantic_extractor.SEFewShotLearner.G.mapping", "semantic_extractor.SEFewShotLearner.G.mapping"], "methods", ["None"], ["", "def", "get_wp", "(", "self", ",", "z", ")", ":", "\n", "    ", "if", "self", ".", "latent_strategy", "==", "'trunc-wp'", ":", "\n", "      ", "wp", "=", "self", ".", "G", ".", "truncation", "(", "self", ".", "G", ".", "mapping", "(", "z", ")", ")", "\n", "", "elif", "self", ".", "latent_strategy", "==", "'notrunc-wp'", ":", "\n", "      ", "wp", "=", "self", ".", "G", ".", "mapping", "(", "z", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "G", ".", "num_layers", ",", "1", ")", "\n", "", "elif", "self", ".", "latent_strategy", "==", "'notrunc-mixwp'", ":", "\n", "      ", "zs", "=", "torch", ".", "randn", "(", "z", ".", "shape", "[", "0", "]", "*", "self", ".", "G", ".", "num_layers", ",", "z", ".", "shape", "[", "1", "]", ")", "\n", "zs", "=", "zs", ".", "to", "(", "z", ".", "device", ")", "\n", "wp", "=", "self", ".", "G", ".", "mapping", "(", "zs", ")", ".", "view", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "G", ".", "num_layers", ",", "-", "1", ")", "\n", "", "return", "wp", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SEFewShotLearner.forward": [[46, 57], ["semantic_extractor.SEFewShotLearner.G.eval", "semantic_extractor.SEFewShotLearner.model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "semantic_extractor.SEFewShotLearner.get_wp", "semantic_extractor.SEFewShotLearner.G.synthesis", "semantic_extractor.SEFewShotLearner.G"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.get_wp"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "    ", "self", ".", "G", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "if", "hasattr", "(", "self", ".", "G", ",", "\"mapping\"", ")", ":", "\n", "        ", "wp", "=", "self", ".", "get_wp", "(", "z", ")", "\n", "image", ",", "feature", "=", "self", ".", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "image", ",", "feature", "=", "self", ".", "G", "(", "z", ",", "generate_feature", "=", "True", ")", "\n", "# [[], [], []] (category groups, sery)", "\n", "", "", "seg", "=", "self", ".", "model", "(", "feature", ",", "size", "=", "self", ".", "resolution", ")", "\n", "return", "image", ",", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SEFewShotLearner.training_step": [[58, 68], ["semantic_extractor.SEFewShotLearner.model", "lib.op.bu", "semantic_extractor.SEFewShotLearner.loss_fn_final", "len", "f[].cuda", "semantic_extractor.SEFewShotLearner.label.size"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "    ", "\"\"\"\n    batch is dummy, batch_idx is used for gradient accumulation\n    \"\"\"", "\n", "idx", "=", "batch_idx", "%", "len", "(", "self", ".", "label", ")", "\n", "feature", "=", "[", "f", "[", "idx", ":", "idx", "+", "1", "]", ".", "cuda", "(", ")", "for", "f", "in", "self", ".", "feature", "]", "\n", "segs", "=", "self", ".", "model", "(", "feature", ",", "size", "=", "self", ".", "resolution", ")", "\n", "seg", "=", "op", ".", "bu", "(", "segs", "[", "-", "1", "]", ",", "self", ".", "label", ".", "size", "(", "2", ")", ")", "\n", "segloss", "=", "self", ".", "loss_fn_final", "(", "seg", ",", "self", ".", "label", "[", "idx", ":", "idx", "+", "1", "]", ")", "\n", "return", "segloss", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SEFewShotLearner.configure_optimizers": [[69, 74], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "semantic_extractor.SEFewShotLearner.model.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "    ", "self", ".", "adam_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "adam_optim", ",", "\n", "[", "20", "]", ",", "gamma", "=", "0.1", ")", "\n", "return", "[", "self", ".", "adam_optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.__init__": [[77, 104], ["pytorch_lightning.LightningModule.__init__", "semantic_extractor.SELearner.reset", "lib.loss.FocalLoss", "lib.loss.FocalLoss"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.reset"], ["  ", "def", "__init__", "(", "self", ",", "model", ",", "G", ",", "P", ",", "\n", "lr", "=", "0.001", ",", "# optimizer type and initial learning rate", "\n", "loss_type", "=", "'focal'", ",", "# focal / normal", "\n", "latent_strategy", "=", "'notrunc-mixwp'", ",", "\n", "resolution", "=", "512", ",", "# (pseudo)training label resolution", "\n", "save_dir", "=", "'expr'", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "G", "=", "G", "\n", "self", ".", "P", "=", "P", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "latent_strategy", "=", "latent_strategy", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "\n", "if", "loss_type", "==", "'focal'", ":", "\n", "      ", "if", "\"layer\"", "in", "loss_type", ":", "\n", "        ", "self", ".", "loss_layer_weight", "=", "0.1", "\n", "self", ".", "loss_fn_layer", "=", "loss", ".", "FocalLoss", "(", "True", ")", "\n", "", "self", ".", "loss_fn_final", "=", "loss", ".", "FocalLoss", "(", "False", ")", "\n", "", "else", ":", "\n", "      ", "if", "\"layer\"", "in", "loss_type", ":", "\n", "        ", "self", ".", "loss_layer_weight", "=", "0.1", "\n", "self", ".", "loss_fn_layer", "=", "F", ".", "cross_entropy", "\n", "", "self", ".", "loss_fn_final", "=", "F", ".", "cross_entropy", "\n", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.reset": [[105, 108], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "train_evaluation", "=", "[", "]", "\n", "self", ".", "best_val", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.get_wp": [[109, 119], ["semantic_extractor.SELearner.G.truncation", "semantic_extractor.SELearner.G.mapping", "semantic_extractor.SELearner.G.mapping().unsqueeze().repeat", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "zs.to.to.to", "semantic_extractor.SELearner.G.mapping().view", "semantic_extractor.SELearner.G.mapping().unsqueeze", "semantic_extractor.SELearner.G.mapping", "semantic_extractor.SELearner.G.mapping"], "methods", ["None"], ["", "def", "get_wp", "(", "self", ",", "z", ")", ":", "\n", "    ", "if", "self", ".", "latent_strategy", "==", "'trunc-wp'", ":", "\n", "      ", "wp", "=", "self", ".", "G", ".", "truncation", "(", "self", ".", "G", ".", "mapping", "(", "z", ")", ")", "\n", "", "elif", "self", ".", "latent_strategy", "==", "'notrunc-wp'", ":", "\n", "      ", "wp", "=", "self", ".", "G", ".", "mapping", "(", "z", ")", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "self", ".", "G", ".", "num_layers", ",", "1", ")", "\n", "", "elif", "self", ".", "latent_strategy", "==", "'notrunc-mixwp'", ":", "\n", "      ", "zs", "=", "torch", ".", "randn", "(", "z", ".", "shape", "[", "0", "]", "*", "self", ".", "G", ".", "num_layers", ",", "z", ".", "shape", "[", "1", "]", ")", "\n", "zs", "=", "zs", ".", "to", "(", "z", ".", "device", ")", "\n", "wp", "=", "self", ".", "G", ".", "mapping", "(", "zs", ")", ".", "view", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "G", ".", "num_layers", ",", "-", "1", ")", "\n", "", "return", "wp", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.forward": [[120, 132], ["semantic_extractor.SELearner.G.eval", "semantic_extractor.SELearner.P.eval", "semantic_extractor.SELearner.model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "semantic_extractor.SELearner.P().long", "semantic_extractor.SELearner.get_wp", "semantic_extractor.SELearner.G.synthesis", "semantic_extractor.SELearner.G", "semantic_extractor.SELearner.P"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.get_wp"], ["", "def", "forward", "(", "self", ",", "z", ")", ":", "\n", "    ", "self", ".", "G", ".", "eval", "(", ")", "\n", "self", ".", "P", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "if", "hasattr", "(", "self", ".", "G", ",", "\"mapping\"", ")", ":", "\n", "        ", "wp", "=", "self", ".", "get_wp", "(", "z", ")", "\n", "image", ",", "feature", "=", "self", ".", "G", ".", "synthesis", "(", "wp", ",", "generate_feature", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "image", ",", "feature", "=", "self", ".", "G", "(", "z", ",", "generate_feature", "=", "True", ")", "\n", "", "label", "=", "self", ".", "P", "(", "image", ",", "size", "=", "self", ".", "resolution", ")", ".", "long", "(", ")", "\n", "", "segs", "=", "self", ".", "model", "(", "feature", ",", "size", "=", "self", ".", "resolution", ")", "\n", "return", "segs", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.training_step": [[133, 159], ["semantic_extractor.SELearner.", "lib.op.bu", "hasattr", "semantic_extractor.SELearner.log", "lib.op.bu.argmax().detach", "label.detach", "pytorch_lightning.metrics.functional.iou", "semantic_extractor.SELearner.train_evaluation.append", "label.size", "lib.loss.segloss", "range", "semantic_extractor.SELearner.loss_fn_final", "float", "len", "len", "semantic_extractor.SELearner.log", "lib.op.bu.argmax", "op.bu.argmax().detach.shape.numel"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.loss.segloss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "    ", "segs", ",", "label", "=", "self", "(", "batch", ")", "\n", "seg", "=", "op", ".", "bu", "(", "segs", "[", "-", "1", "]", ",", "label", ".", "size", "(", "2", ")", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"loss_fn_layer\"", ")", ":", "\n", "      ", "segloss", "=", "loss", ".", "segloss", "(", "segs", ",", "label", ",", "self", ".", "loss_fn_layer", ")", "\n", "n_layers", "=", "len", "(", "segloss", ")", "-", "1", "# The last one is final segmentation", "\n", "total_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "segloss", ")", ")", ":", "# 0 ~ len(segloss) - 1", "\n", "        ", "layer", "=", "'final'", "if", "i", "==", "n_layers", "else", "f'{i}'", "\n", "layer_loss", "=", "segloss", "[", "i", "]", "*", "self", ".", "loss_layer_weight", "if", "i", "<", "n_layers", "else", "segloss", "[", "i", "]", "\n", "self", ".", "log", "(", "f'layer/{layer}'", ",", "layer_loss", ")", "\n", "total_loss", "=", "total_loss", "+", "layer_loss", "\n", "", "", "else", ":", "\n", "      ", "total_loss", "=", "self", ".", "loss_fn_final", "(", "seg", ",", "label", ")", "\n", "", "self", ".", "log", "(", "\"main/total\"", ",", "total_loss", ")", "\n", "\n", "dt", "=", "seg", ".", "argmax", "(", "1", ")", ".", "detach", "(", ")", "\n", "gt", "=", "label", ".", "detach", "(", ")", "\n", "IoU", "=", "iou", "(", "dt", ",", "gt", ",", "num_classes", "=", "self", ".", "model", ".", "n_class", ",", "\n", "ignore_index", "=", "0", ",", "absent_score", "=", "-", "1", ",", "reduction", "=", "'none'", ")", "\n", "pixelacc", "=", "(", "dt", "==", "gt", ")", ".", "sum", "(", ")", "/", "float", "(", "dt", ".", "shape", ".", "numel", "(", ")", ")", "\n", "# pixelacc, mIoU, IoU", "\n", "self", ".", "train_evaluation", ".", "append", "(", "[", "pixelacc", ",", "IoU", "]", ")", "\n", "return", "total_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SELearner.configure_optimizers": [[160, 170], ["hasattr", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "semantic_extractor.SELearner.model.extractor.parameters", "semantic_extractor.SELearner.model.parameters"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "    ", "if", "hasattr", "(", "self", ".", "model", ",", "\"layer_weight\"", ")", ":", "\n", "      ", "pg", "=", "[", "{", "'params'", ":", "self", ".", "model", ".", "extractor", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "[", "self", ".", "model", ".", "layer_weight", "]", ",", "'lr'", ":", "10", "*", "self", ".", "lr", "}", "]", "\n", "self", ".", "adam_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "pg", ")", "\n", "", "else", ":", "\n", "      ", "pg", "=", "[", "{", "'params'", ":", "self", ".", "model", ".", "parameters", "(", ")", ",", "'lr'", ":", "self", ".", "lr", "}", "]", "\n", "", "self", ".", "adam_optim", "=", "torch", ".", "optim", ".", "Adam", "(", "pg", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "self", ".", "adam_optim", ",", "[", "20", "]", ")", "\n", "return", "[", "self", ".", "adam_optim", "]", ",", "[", "scheduler", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.__init__": [[177, 192], ["torch.Module.__init__", "semantic_extractor.SemanticExtractor.build", "list", "numpy.cumsum"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build"], ["def", "__init__", "(", "self", ",", "n_class", ",", "dims", ",", "layers", ",", "type", "=", "\"\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      n_class : The number of semantic categories.\n      dims : The dimension (depth) of each feature map.\n      layers : The layer indice of the generator.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "type", "=", "type", "\n", "self", ".", "n_class", "=", "n_class", "\n", "self", ".", "dims", "=", "dims", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "segments", "=", "[", "0", "]", "+", "list", "(", "np", ".", "cumsum", "(", "self", ".", "dims", ")", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor._index_feature": [[193, 203], ["len", "len", "print"], "methods", ["None"], ["", "def", "_index_feature", "(", "self", ",", "features", ",", "i", ")", ":", "\n", "    ", "\"\"\"\"\"\"", "\n", "l1", "=", "len", "(", "self", ".", "layers", ")", "\n", "l2", "=", "len", "(", "features", ")", "\n", "if", "l1", "<", "l2", ":", "\n", "      ", "return", "features", "[", "self", ".", "layers", "[", "i", "]", "]", "\n", "", "elif", "l1", "==", "l2", ":", "\n", "      ", "return", "features", "[", "i", "]", "\n", "", "else", ":", "\n", "      ", "print", "(", "f\"!> Error: The length of layers ({l1}) != features ({l2})\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.predict": [[204, 208], ["[].argmax", "[].argmax.detach().cpu().numpy().astype", "[].argmax.detach().cpu().numpy", "semantic_extractor.SemanticExtractor.forward", "[].argmax.detach().cpu", "[].argmax.detach"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ConvBlock.forward"], ["", "", "def", "predict", "(", "self", ",", "stage", ")", ":", "\n", "    ", "\"\"\"Return a numpy array.\"\"\"", "\n", "res", "=", "self", ".", "forward", "(", "stage", ",", "True", ")", "[", "0", "]", ".", "argmax", "(", "1", ")", "\n", "return", "res", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "\"int32\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.arch_info": [[209, 215], ["dict"], "methods", ["None"], ["", "def", "arch_info", "(", "self", ")", ":", "\n", "    ", "\"\"\"Return the architecture information dict.\"\"\"", "\n", "return", "dict", "(", "\n", "n_class", "=", "self", ".", "n_class", ",", "\n", "dims", "=", "self", ".", "dims", ",", "\n", "layers", "=", "self", ".", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.build": [[216, 218], ["None"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE.__init__": [[224, 234], ["semantic_extractor.SemanticExtractor.__init__", "semantic_extractor.LSE.build"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build"], ["def", "__init__", "(", "self", ",", "lw_type", "=", "\"softplus\"", ",", "use_bias", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      lw_type : The layer weight type. Candidates are softplus, sigmoid, none.\n      use_bias : default is not to use bias.\n    \"\"\"", "\n", "self", ".", "lw_type", "=", "lw_type", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE.build": [[235, 244], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "semantic_extractor.LSE.build.conv_block"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "\"\"\"Build the architecture of LSE.\"\"\"", "\n", "def", "conv_block", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "      ", "return", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "1", ",", "bias", "=", "self", ".", "use_bias", ")", "\n", "\n", "", "self", ".", "extractor", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv_block", "(", "dim", ",", "self", ".", "n_class", ")", "for", "dim", "in", "self", ".", "dims", "]", ")", "\n", "\n", "self", ".", "layer_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "len", "(", "self", ".", "layers", ")", ",", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE.arch_info": [[245, 251], ["semantic_extractor.SemanticExtractor.arch_info"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info"], ["", "def", "arch_info", "(", "self", ")", ":", "\n", "    ", "base_dic", "=", "SemanticExtractor", ".", "arch_info", "(", "self", ")", "\n", "base_dic", "[", "\"lw_type\"", "]", "=", "self", ".", "lw_type", "\n", "base_dic", "[", "\"use_bias\"", "]", "=", "self", ".", "use_bias", "\n", "base_dic", "[", "\"type\"", "]", "=", "\"LSE\"", "\n", "return", "base_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE._calc_layer_weight": [[252, 260], ["torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.sigmoid.sum", "torch.sigmoid.sum", "torch.sigmoid.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "_calc_layer_weight", "(", "self", ")", ":", "\n", "    ", "if", "self", ".", "lw_type", "==", "\"none\"", "or", "self", ".", "lw_type", "==", "\"direct\"", ":", "\n", "      ", "return", "self", ".", "layer_weight", "\n", "", "if", "self", ".", "lw_type", "==", "\"softplus\"", ":", "\n", "      ", "weight", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "layer_weight", ")", "\n", "", "elif", "self", ".", "lw_type", "==", "\"sigmoid\"", ":", "\n", "      ", "weight", "=", "torch", ".", "sigmoid", "(", "self", ".", "layer_weight", ")", "\n", "", "return", "weight", "/", "weight", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE.forward": [[261, 293], ["range", "lib.op.bu", "semantic_extractor.LSE._calc_layer_weight", "outputs.append", "len", "semantic_extractor.LSE._index_feature", "outputs.append", "sum", "sum", "zip"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.LSE._calc_layer_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor._index_feature"], ["", "def", "forward", "(", "self", ",", "features", ",", "size", "=", "None", ")", ":", "\n", "    ", "\"\"\"Given a set of features, return the segmentation.\n\n    Args:\n      features : A list of feature maps. When len(features) > len(self.layers)\n                 , it is assumed that the features if taken from all the layers\n                 from the generator and will be selected here. Otherwise, it is\n                 assumed that the features correspond to self.layers.\n      size : The target output size. Bilinear resize will be used if this\n             argument is specified.\n    Returns:\n      A list of segmentations corresponding to each layer, with the last one \n      being the final segmentation integrating all layers.\n    \"\"\"", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "      ", "feat", "=", "self", ".", "_index_feature", "(", "features", ",", "i", ")", "\n", "x", "=", "self", ".", "extractor", "[", "i", "]", "(", "feat", ")", "\n", "outputs", ".", "append", "(", "x", ")", "\n", "\n", "# detect final output size, if not specified", "\n", "", "size", "=", "size", "if", "size", "else", "outputs", "[", "-", "1", "]", ".", "shape", "[", "2", ":", "]", "\n", "layers", "=", "op", ".", "bu", "(", "outputs", ",", "size", ")", "\n", "\n", "weight", "=", "self", ".", "_calc_layer_weight", "(", ")", "\n", "if", "self", ".", "lw_type", "==", "\"none\"", ":", "\n", "      ", "final", "=", "sum", "(", "layers", ")", "\n", "", "else", ":", "\n", "      ", "final", "=", "sum", "(", "[", "r", "*", "w", "for", "r", ",", "w", "in", "zip", "(", "layers", ",", "weight", ")", "]", ")", "\n", "", "outputs", ".", "append", "(", "final", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE1.__init__": [[299, 311], ["semantic_extractor.SemanticExtractor.__init__", "semantic_extractor.NSE1.build"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build"], ["def", "__init__", "(", "self", ",", "lw_type", "=", "\"softplus\"", ",", "use_bias", "=", "True", ",", "\n", "ksize", "=", "1", ",", "n_layers", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n      ksize : The convolution kernel size.\n    \"\"\"", "\n", "self", ".", "lw_type", "=", "lw_type", "\n", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "ksize", "=", "ksize", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "SemanticExtractor", ".", "__init__", "(", "self", ",", "**", "kwargs", ")", "\n", "self", ".", "build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE1.arch_info": [[312, 320], ["semantic_extractor.SemanticExtractor.arch_info"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info"], ["", "def", "arch_info", "(", "self", ")", ":", "\n", "    ", "base_dic", "=", "SemanticExtractor", ".", "arch_info", "(", "self", ")", "\n", "base_dic", "[", "\"ksize\"", "]", "=", "self", ".", "ksize", "\n", "base_dic", "[", "\"n_layers\"", "]", "=", "self", ".", "n_layers", "\n", "base_dic", "[", "\"lw_type\"", "]", "=", "self", ".", "lw_type", "\n", "base_dic", "[", "\"use_bias\"", "]", "=", "self", ".", "use_bias", "\n", "base_dic", "[", "\"type\"", "]", "=", "\"NSE-1\"", "\n", "return", "base_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE1.build": [[321, 342], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Parameter", "torch.Parameter", "torch.Parameter", "_m.append", "_m.append", "range", "_m.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "_m.append", "_m.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "semantic_extractor.NSE1.build.conv_block"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "def", "conv_block", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "      ", "midim", "=", "(", "in_dim", "+", "out_dim", ")", "//", "2", "\n", "padding", "=", "{", "1", ":", "0", ",", "3", ":", "1", "}", "[", "self", ".", "ksize", "]", "\n", "_m", "=", "[", "]", "\n", "_m", ".", "append", "(", "nn", ".", "Conv2d", "(", "in_dim", ",", "midim", ",", "self", ".", "ksize", ",", "padding", "=", "padding", ")", ")", "\n", "_m", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "n_layers", "-", "2", ")", ":", "\n", "        ", "_m", ".", "append", "(", "nn", ".", "Conv2d", "(", "midim", ",", "midim", ",", "self", ".", "ksize", ",", "padding", "=", "padding", ")", ")", "\n", "_m", ".", "append", "(", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "_m", ".", "append", "(", "nn", ".", "Conv2d", "(", "midim", ",", "out_dim", ",", "self", ".", "ksize", ",", "padding", "=", "padding", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "_m", ")", "\n", "\n", "", "self", ".", "extractor", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv_block", "(", "dim", ",", "self", ".", "n_class", ")", "\n", "for", "dim", "in", "self", ".", "dims", "]", ")", "\n", "\n", "# combining result from each layer", "\n", "self", ".", "layer_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "len", "(", "self", ".", "dims", ")", ",", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE1.forward": [[343, 345], ["semantic_extractor.LSE.forward"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ConvBlock.forward"], ["", "def", "forward", "(", "self", ",", "features", ",", "size", "=", "None", ")", ":", "\n", "    ", "return", "super", "(", ")", ".", "forward", "(", "features", ",", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.__init__": [[350, 358], ["semantic_extractor.SemanticExtractor.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "ksize", "=", "3", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n      Args:\n        ksize: kernel size of convolution\n    \"\"\"", "\n", "self", ".", "type", "=", "\"NSE-2\"", "\n", "self", ".", "ksize", "=", "ksize", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info": [[359, 364], ["semantic_extractor.SemanticExtractor.arch_info"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.arch_info"], ["", "def", "arch_info", "(", "self", ")", ":", "\n", "    ", "base_dic", "=", "SemanticExtractor", ".", "arch_info", "(", "self", ")", "\n", "base_dic", "[", "\"ksize\"", "]", "=", "self", ".", "ksize", "\n", "base_dic", "[", "\"type\"", "]", "=", "\"NSE-2\"", "\n", "return", "base_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.build": [[365, 381], ["torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "semantic_extractor.NSE2.build.conv_block"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "def", "conv_block", "(", "in_dim", ",", "out_dim", ")", ":", "\n", "      ", "_m", "=", "[", "\n", "nn", ".", "Conv2d", "(", "in_dim", ",", "out_dim", ",", "self", ".", "ksize", ",", "1", ",", "self", ".", "ksize", "//", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "return", "nn", ".", "Sequential", "(", "*", "_m", ")", "\n", "\n", "# transform generative representation to semantic embedding", "\n", "", "self", ".", "extractor", "=", "nn", ".", "ModuleList", "(", "[", "\n", "conv_block", "(", "dim", ",", "dim", ")", "for", "dim", "in", "self", ".", "dims", "]", ")", "\n", "# learning residue between different layers", "\n", "self", ".", "reviser", "=", "nn", ".", "ModuleList", "(", "[", "conv_block", "(", "prev", ",", "cur", ")", "for", "prev", ",", "cur", "in", "zip", "(", "self", ".", "dims", "[", ":", "-", "1", "]", ",", "self", ".", "dims", "[", "1", ":", "]", ")", "]", ")", "\n", "# transform semantic embedding to label", "\n", "self", ".", "visualizer", "=", "nn", ".", "Conv2d", "(", "self", ".", "dims", "[", "-", "1", "]", ",", "self", ".", "n_class", ",", "self", ".", "ksize", ",", "\n", "padding", "=", "self", ".", "ksize", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.NSE2.forward": [[382, 396], ["range", "semantic_extractor.NSE2.visualizer", "len", "semantic_extractor.NSE2._index_feature", "lib.op.bu", "lib.op.bu.size", "semantic_extractor.NSE2.size", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.interpolate.size"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor._index_feature", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.op.bu"], ["", "def", "forward", "(", "self", ",", "features", ",", "size", "=", "None", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "layers", ")", ")", ":", "\n", "      ", "feat", "=", "self", ".", "_index_feature", "(", "features", ",", "i", ")", "\n", "if", "i", "==", "0", ":", "\n", "        ", "hidden", "=", "self", ".", "extractor", "[", "i", "]", "(", "feat", ")", "\n", "", "else", ":", "\n", "        ", "if", "hidden", ".", "size", "(", "2", ")", "*", "2", "==", "feat", ".", "size", "(", "2", ")", ":", "\n", "          ", "hidden", "=", "F", ".", "interpolate", "(", "hidden", ",", "scale_factor", "=", "2", ",", "mode", "=", "\"nearest\"", ")", "\n", "", "hidden", "=", "self", ".", "reviser", "[", "i", "-", "1", "]", "(", "hidden", ")", "\n", "hidden", "=", "hidden", "+", "self", ".", "extractor", "[", "i", "]", "(", "feat", ")", "\n", "", "", "x", "=", "self", ".", "visualizer", "(", "hidden", ")", "\n", "if", "size", "is", "not", "None", "and", "size", "!=", "x", ".", "size", "(", "3", ")", ":", "\n", "      ", "x", "=", "op", ".", "bu", "(", "x", ",", "size", ")", "\n", "", "return", "[", "x", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator.__init__": [[21, 26], ["base_discriminator.BaseDiscriminator.__init__", "stylegan_discriminator.StyleGANDiscriminator.net.lod.to().tolist", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "stylegan_discriminator.StyleGANDiscriminator.net.lod.to"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'stylegan'", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "self", ".", "lod", "=", "self", ".", "net", ".", "lod", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "tolist", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Current `lod` is {self.lod}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator.build": [[27, 44], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "stylegan_discriminator_network.StyleGANDiscriminatorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "fused_scale", "=", "getattr", "(", "self", ",", "'fused_scale'", ",", "'auto'", ")", "\n", "self", ".", "minibatch_std_group_size", "=", "getattr", "(", "self", ",", "'minibatch_std_group_size'", ",", "4", ")", "\n", "self", ".", "minibatch_std_num_channels", "=", "getattr", "(", "\n", "self", ",", "'minibatch_std_num_channels'", ",", "1", ")", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "16", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "self", ".", "net", "=", "StyleGANDiscriminatorNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ",", "\n", "minibatch_std_group_size", "=", "self", ".", "minibatch_std_group_size", ",", "\n", "minibatch_std_num_channels", "=", "self", ".", "minibatch_std_num_channels", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator.convert_tf_weights": [[45, 117], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "sys.path.insert", "sys.path.pop", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "dict", "stylegan_discriminator.StyleGANDiscriminator.net.state_dict", "stylegan_discriminator.StyleGANDiscriminator.net.pth_to_tf_var_mapping.items", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "torch.save", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "stylegan_discriminator.StyleGANDiscriminator.load", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "stylegan_discriminator.StyleGANDiscriminator.net.eval().to", "range", "stylegan_discriminator.StyleGANDiscriminator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "stylegan_discriminator.StyleGANDiscriminator.logger.debug", "torch.from_numpy", "stylegan_discriminator.StyleGANDiscriminator.logger.warning", "tf.compat.v1.InteractiveSession.close", "tf_net.run", "numpy.average", "stylegan_discriminator.StyleGANDiscriminator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "stylegan_discriminator.StyleGANDiscriminator.net.eval", "numpy.random.randint", "numpy.zeros", "stylegan_discriminator.StyleGANDiscriminator.rate", "numpy.abs", "var.permute.permute.permute", "numpy.random.rand", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.rate"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "tf_net", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "input_shape", "=", "[", "1", ",", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", "\n", "image", "=", "np", ".", "random", ".", "rand", "(", "*", "input_shape", ")", "*", "2", "-", "1", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "label_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "label_size", ")", "\n", "tf_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "label_size", ")", ",", "np", ".", "float32", ")", "\n", "tf_label", "[", "0", ",", "label_id", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "label_id", "=", "None", "\n", "tf_label", "=", "None", "\n", "", "tf_output", "=", "tf_net", ".", "run", "(", "image", ",", "tf_label", ")", "\n", "pth_output", "=", "self", ".", "rate", "(", "image", ",", "labels", "=", "label_id", ")", "[", "'score'", "]", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator._rate": [[118, 147], ["stylegan_discriminator.StyleGANDiscriminator.to_tensor", "stylegan_discriminator.StyleGANDiscriminator.get_ont_hot_labels", "stylegan_discriminator.StyleGANDiscriminator.net", "isinstance", "ValueError", "ValueError", "images.astype", "stylegan_discriminator.StyleGANDiscriminator.to_tensor", "stylegan_discriminator.StyleGANDiscriminator.get_value", "torch.cuda.empty_cache", "stylegan_discriminator.StyleGANDiscriminator.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_rate", "(", "self", ",", "images", ",", "labels", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "images", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input images should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`batch_size` no larger than {self.batch_size}, '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "self", ".", "to_tensor", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "images", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "scores", "=", "self", ".", "net", "(", "xs", ",", "ls", ")", "\n", "assert", "scores", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "results", "=", "{", "\n", "'image'", ":", "images", ",", "\n", "'score'", ":", "self", ".", "get_value", "(", "scores", ")", ",", "\n", "}", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "\n", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator.rate": [[148, 150], ["stylegan_discriminator.StyleGANDiscriminator.batch_run", "stylegan_discriminator.StyleGANDiscriminator._rate"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_discriminator.StyleGANDiscriminator._rate"], ["", "def", "rate", "(", "self", ",", "images", ",", "labels", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "lambda", "x", ":", "self", ".", "_rate", "(", "x", ",", "labels", "=", "labels", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.PGGANDiscriminatorNet.__init__": [[34, 158], ["torch.Module.__init__", "int", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "pggan_discriminator_network.AveragePoolingLayer", "ValueError", "numpy.log2", "numpy.log2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.ConvBlock", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.PGGANDiscriminatorNet.add_module", "pggan_discriminator_network.ConvBlock", "pggan_discriminator_network.ConvBlock", "pggan_discriminator_network.ConvBlock", "pggan_discriminator_network.DenseBlock", "pggan_discriminator_network.DenseBlock", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf", "pggan_discriminator_network.PGGANDiscriminatorNet.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "image_channels", "=", "3", ",", "\n", "label_size", "=", "0", ",", "\n", "fused_scale", "=", "False", ",", "\n", "minibatch_std_group_size", "=", "16", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the discriminator with basic settings.\n\n    Args:\n      resolution: The resolution of the input image.\n      image_channels: Number of channels of the input image. (default: 3)\n      label_size: Size of additional labels. (default: 0)\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides. (default: False)\n      minibatch_std_group_size: Group size for the minibatch standard deviation\n        layer. 0 means disable. (default: 16)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 16 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "minibatch_std_group_size", "=", "minibatch_std_group_size", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "# Level of detail (used for progressive training).", "\n", "self", ".", "lod", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'lod'", ":", "'lod'", "}", "\n", "\n", "# pylint: disable=line-too-long", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "\n", "# Input convolution layer for each resolution.", "\n", "self", ".", "add_module", "(", "\n", "f'input{block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "image_channels", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "activation_type", "=", "'lrelu'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'FromRGB_lod{block_idx}/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'input{block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'FromRGB_lod{block_idx}/bias'", ")", "\n", "\n", "# Convolution block for each resolution (except the last one).", "\n", "if", "res", "!=", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "downsample", "=", "True", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/bias'", ")", "\n", "if", "self", ".", "fused_scale", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1_down/bias'", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/bias'", ")", "\n", "\n", "# Convolution block for last resolution.", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "minibatch_std", "=", "True", ",", "\n", "minibatch_std_group_size", "=", "self", ".", "minibatch_std_group_size", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", "*", "res", "*", "res", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ")", ")", "\n", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 2}'", ",", "\n", "DenseBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "1", "+", "self", ".", "label_size", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense0/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.fc.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 2}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense1/bias'", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "", "", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.PGGANDiscriminatorNet.get_nf": [[159, 162], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.PGGANDiscriminatorNet.forward": [[163, 184], ["pggan_discriminator_network.PGGANDiscriminatorNet.lod.cpu().tolist", "range", "ValueError", "pggan_discriminator_network.PGGANDiscriminatorNet.__getattr__", "pggan_discriminator_network.PGGANDiscriminatorNet.lod.cpu", "pggan_discriminator_network.PGGANDiscriminatorNet.downsample", "pggan_discriminator_network.PGGANDiscriminatorNet.__getattr__", "pggan_discriminator_network.PGGANDiscriminatorNet.__getattr__", "pggan_discriminator_network.PGGANDiscriminatorNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "image", ")", ":", "\n", "    ", "if", "image", ".", "ndim", "!=", "4", "or", "image", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {image.shape} is received!'", ")", "\n", "\n", "", "lod", "=", "self", ".", "lod", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "final_res_log2", ",", "self", ".", "init_res_log2", "-", "1", ",", "-", "1", ")", ":", "\n", "      ", "block_idx", "=", "self", ".", "final_res_log2", "-", "res_log2", "\n", "if", "block_idx", "<", "lod", ":", "\n", "        ", "image", "=", "self", ".", "downsample", "(", "image", ")", "\n", "continue", "\n", "", "if", "block_idx", "==", "lod", ":", "\n", "        ", "x", "=", "self", ".", "__getattr__", "(", "f'input{block_idx}'", ")", "(", "image", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 2}'", ")", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.MiniBatchSTDLayer.__init__": [[189, 193], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "group_size", "=", "16", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "group_size", "=", "group_size", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.MiniBatchSTDLayer.forward": [[194, 205], ["min", "x.view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "y.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "group_size", "<=", "1", ":", "\n", "      ", "return", "x", "\n", "", "group_size", "=", "min", "(", "self", ".", "group_size", ",", "x", ".", "shape", "[", "0", "]", ")", "# [NCHW]", "\n", "y", "=", "x", ".", "view", "(", "group_size", ",", "-", "1", ",", "x", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [GMCHW]", "\n", "y", "=", "y", "-", "torch", ".", "mean", "(", "y", ",", "dim", "=", "0", ",", "keepdim", "=", "True", ")", "# [GMCHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", "**", "2", ",", "dim", "=", "0", ")", "# [MCHW]", "\n", "y", "=", "torch", ".", "sqrt", "(", "y", "+", "self", ".", "epsilon", ")", "# [MCHW]", "\n", "y", "=", "torch", ".", "mean", "(", "y", ",", "dim", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdim", "=", "True", ")", "# [M111]", "\n", "y", "=", "y", ".", "repeat", "(", "group_size", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", ")", "# [N1HW]", "\n", "return", "torch", ".", "cat", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.AveragePoolingLayer.__init__": [[214, 217], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.AveragePoolingLayer.forward": [[218, 222], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "ksize", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "strides", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "strides", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.WScaleLayer.__init__": [[232, 237], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.WScaleLayer.forward": [[238, 244], ["ValueError", "pggan_discriminator_network.WScaleLayer.bias.view", "pggan_discriminator_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "4", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "x", ".", "ndim", "==", "2", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], or [batch_size, channel]!\\n'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.ConvBlock.__init__": [[256, 333], ["numpy.sqrt", "torch.Module.__init__", "pggan_discriminator_network.WScaleLayer", "pggan_discriminator_network.MiniBatchSTDLayer", "torch.Identity", "torch.Identity", "torch.Identity", "pggan_discriminator_network.AveragePoolingLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "downsample", "=", "False", ",", "\n", "fused_scale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ",", "\n", "minibatch_std", "=", "False", ",", "\n", "minibatch_std_group_size", "=", "16", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels (kernels) of the output tensor.\n      kernel_size: Size of the convolutional kernel.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      downsample: Whether to downsample the input tensor after convolution.\n      fused_scale: Whether to fused `conv2d` and `downsample` together,\n        resulting in `conv2d` with strides.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n      minibatch_std: Whether to perform minibatch standard deviation.\n      minibatch_std_group_size: Group size for the minibatch standard deviation\n        layer.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "minibatch_std", ":", "\n", "      ", "in_channels", "=", "in_channels", "+", "1", "\n", "self", ".", "preact", "=", "MiniBatchSTDLayer", "(", "group_size", "=", "minibatch_std_group_size", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "preact", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "not", "fused_scale", ":", "\n", "      ", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "downsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "downsample", "and", "fused_scale", ":", "\n", "      ", "self", ".", "use_stride", "=", "True", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_stride", "=", "False", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "\n", "", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.ConvBlock.forward": [[335, 351], ["pggan_discriminator_network.ConvBlock.preact", "pggan_discriminator_network.ConvBlock.wscale", "pggan_discriminator_network.ConvBlock.activate", "pggan_discriminator_network.ConvBlock.downsample", "torch.pad", "torch.pad", "torch.pad", "kernel.permute.permute.permute", "torch.conv2d", "torch.conv2d", "torch.conv2d", "pggan_discriminator_network.ConvBlock.conv"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "preact", "(", "x", ")", "\n", "if", "self", ".", "use_stride", ":", "\n", "      ", "kernel", "=", "self", ".", "weight", "*", "self", ".", "scale", "\n", "kernel", "=", "F", ".", "pad", "(", "kernel", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0.0", ")", "\n", "kernel", "=", "(", "kernel", "[", "1", ":", ",", "1", ":", "]", "+", "kernel", "[", ":", "-", "1", ",", "1", ":", "]", "+", "\n", "kernel", "[", "1", ":", ",", ":", "-", "1", "]", "+", "kernel", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "*", "0.25", "\n", "kernel", "=", "kernel", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv2d", "(", "x", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "x", "=", "x", "/", "self", ".", "scale", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.DenseBlock.__init__": [[360, 392], ["numpy.sqrt", "torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "pggan_discriminator_network.WScaleLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "add_bias", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      add_bias: Whether to add bias onto the fully-connected result.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "add_bias", ")", "\n", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_discriminator_network.DenseBlock.forward": [[394, 401], ["pggan_discriminator_network.DenseBlock.fc", "pggan_discriminator_network.DenseBlock.wscale", "pggan_discriminator_network.DenseBlock.activate", "x.view.view.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "2", ":", "\n", "      ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.__init__": [[17, 20], ["base_module.BaseModule.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "\"\"\"Initializes the discriminator with model name.\"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "'discriminator'", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.preprocess": [[21, 66], ["numpy.tile.astype", "numpy.tile.astype().transpose", "isinstance", "ValueError", "ValueError", "ValueError", "numpy.tile", "ValueError", "numpy.tile.astype"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "images", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input images if needed.\n\n    This function assumes the input numpy array is with shape [batch_size,\n    height, width, channel]. Here, `channel = 3` for color image and\n    `channel = 1` for grayscale image. The returned images are with shape\n    [batch_size, channel, height, width].\n\n    NOTE: The channel order of input images is always assumed as `RGB`.\n\n    Args:\n      images: The raw inputs with dtype `numpy.uint8` and range [0, 255].\n\n    Returns:\n      The preprocessed images with dtype `numpy.float32` and range\n        [self.min_val, self.max_val].\n\n    Raises:\n      ValueError: If the input `images` are not with type `numpy.ndarray` or not\n        with dtype `numpy.uint8` or not with shape [batch_size, height, width,\n        channel].\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "images", ".", "dtype", "!=", "np", ".", "uint8", ":", "\n", "      ", "raise", "ValueError", "(", "f'Images should be with dtype `numpy.uint8`!'", ")", "\n", "\n", "", "if", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "3", "]", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input should be with shape [batch_size, height, '", "\n", "f'width, channel], where channel equals to 1 or 3!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "==", "1", "and", "self", ".", "image_channels", "==", "3", ":", "\n", "      ", "images", "=", "np", ".", "tile", "(", "images", ",", "(", "1", ",", "1", ",", "1", ",", "3", ")", ")", "\n", "", "if", "images", ".", "shape", "[", "3", "]", "!=", "self", ".", "image_channels", ":", "\n", "      ", "raise", "ValueError", "(", "f'Number of channels of input image, which is '", "\n", "f'{images.shape[3]}, is not supported by the current '", "\n", "f'discriminator, which requires {self.image_channels} '", "\n", "f'channels!'", ")", "\n", "", "if", "self", ".", "image_channels", "==", "3", "and", "self", ".", "channel_order", "==", "'BGR'", ":", "\n", "      ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images", "=", "images", "/", "255.0", "*", "(", "self", ".", "max_val", "-", "self", ".", "min_val", ")", "+", "self", ".", "min_val", "\n", "images", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "\n", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.rate": [[67, 80], ["NotImplementedError"], "methods", ["None"], ["", "def", "rate", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Rates the input images with adversarial score.\n\n    NOTE: The images are assumed to have already been preprocessed.\n\n    Args:\n      images: Input images to rate.\n\n    Returns:\n      A dictionary whose values are raw outputs from the discriminator. Keys of\n        the dictionary usually include `image` and `score`.\n    \"\"\"", "\n", "raise", "NotImplementedError", "(", "f'Should be implemented in derived class!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.easy_rate": [[81, 84], ["base_discriminator.BaseDiscriminator.rate", "base_discriminator.BaseDiscriminator.preprocess"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_discriminator.BaseDiscriminator.rate", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess"], ["", "def", "easy_rate", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Wraps functions `preprocess()` and `rate()` together.\"\"\"", "\n", "return", "self", ".", "rate", "(", "self", ".", "preprocess", "(", "images", ")", ",", "**", "kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.StyleGANEncoderNet.__init__": [[34, 163], ["torch.Module.__init__", "int", "range", "stylegan_encoder_network.AveragePoolingLayer", "ValueError", "numpy.log2", "int", "min", "numpy.log2", "stylegan_encoder_network.StyleGANEncoderNet.add_module", "stylegan_encoder_network.FirstBlock", "stylegan_encoder_network.StyleGANEncoderNet.add_module", "stylegan_encoder_network.StyleGANEncoderNet.add_module", "stylegan_encoder_network.LastBlock", "stylegan_encoder_network.ResBlock"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "w_space_dim", "=", "512", ",", "\n", "image_channels", "=", "3", ",", "\n", "encoder_channels_base", "=", "64", ",", "\n", "encoder_channels_max", "=", "1024", ",", "\n", "use_wscale", "=", "False", ",", "\n", "use_bn", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initializes the encoder with basic settings.\n\n    Args:\n      resolution: The resolution of the input image.\n      w_space_dim: The dimension of the disentangled latent vectors, w.\n        (default: 512)\n      image_channels: Number of channels of the input image. (default: 3)\n      encoder_channels_base: Base factor of the number of channels used in\n        residual blocks of encoder. (default: 64)\n      encoder_channels_max: Maximum number of channels used in residual blocks\n        of encoder. (default: 1024)\n      use_wscale: Whether to use `wscale` layer. (default: False)\n      use_bn: Whether to use batch normalization layer. (default: False)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "w_space_dim", "=", "w_space_dim", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "encoder_channels_base", "=", "encoder_channels_base", "\n", "self", ".", "encoder_channels_max", "=", "encoder_channels_max", "\n", "self", ".", "use_wscale", "=", "use_wscale", "\n", "self", ".", "use_bn", "=", "use_bn", "\n", "# Blocks used in encoder.", "\n", "self", ".", "num_blocks", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "# Layers used in generator.", "\n", "self", ".", "num_layers", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", "//", "self", ".", "init_res", "*", "2", ")", ")", "*", "2", "\n", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "}", "\n", "\n", "# pylint: disable=line-too-long", "\n", "in_channels", "=", "self", ".", "image_channels", "\n", "out_channels", "=", "self", ".", "encoder_channels_base", "\n", "for", "block_idx", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "      ", "if", "block_idx", "==", "0", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'block{block_idx}'", ",", "\n", "FirstBlock", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "use_wscale", "=", "self", ".", "use_wscale", ",", "\n", "use_bn", "=", "self", ".", "use_bn", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.conv.weight'", "]", "=", "(", "\n", "'encoder/input_image_stage/weight'", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.bias'", "]", "=", "(", "\n", "'encoder/input_image_stage/bn_input_stage/BatchNorm/beta'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_mean'", "]", "=", "(", "\n", "'encoder/input_image_stage/bn_input_stage/BatchNorm/moving_mean'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_var'", "]", "=", "(", "\n", "'encoder/input_image_stage/bn_input_stage/BatchNorm/moving_variance'", ")", "\n", "\n", "", "", "elif", "block_idx", "==", "self", ".", "num_blocks", "-", "1", ":", "\n", "        ", "in_channels", "=", "in_channels", "*", "self", ".", "init_res", "*", "self", ".", "init_res", "\n", "out_channels", "=", "self", ".", "w_space_dim", "*", "2", "*", "block_idx", "\n", "self", ".", "add_module", "(", "\n", "f'block{block_idx}'", ",", "\n", "LastBlock", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "use_wscale", "=", "self", ".", "use_wscale", ",", "\n", "use_bn", "=", "self", ".", "use_bn", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.fc.weight'", "]", "=", "(", "\n", "'encoder/encoder_fc/weight'", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.bias'", "]", "=", "(", "\n", "'encoder/encoder_fc/fc_1/BatchNorm/beta'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_mean'", "]", "=", "(", "\n", "'encoder/encoder_fc/fc_1/BatchNorm/moving_mean'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_var'", "]", "=", "(", "\n", "'encoder/encoder_fc/fc_1/BatchNorm/moving_variance'", ")", "\n", "\n", "", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'block{block_idx}'", ",", "\n", "ResBlock", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "use_wscale", "=", "self", ".", "use_wscale", ",", "\n", "use_bn", "=", "self", ".", "use_bn", ")", ")", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/shortcut/weight'", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "            ", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.bias'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/shortcut/shortcut_bn/BatchNorm/beta'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_mean'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/shortcut/shortcut_bn/BatchNorm/moving_mean'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn.bn.running_var'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/shortcut/shortcut_bn/BatchNorm/moving_variance'", ")", "\n", "", "", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.conv1.weight'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.wscale1.bias'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv1/bias'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.conv2.weight'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv2/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.wscale2.bias'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv2/bias'", ")", "\n", "if", "self", ".", "use_bn", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn1.bn.bias'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv1/bn_1/BatchNorm/beta'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn1.bn.running_mean'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv1/bn_1/BatchNorm/moving_mean'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn1.bn.running_var'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv1/bn_1/BatchNorm/moving_variance'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn2.bn.bias'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv2/bn_2/BatchNorm/beta'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn2.bn.running_mean'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv2/bn_2/BatchNorm/moving_mean'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'block{block_idx}.bn2.bn.running_var'", "]", "=", "(", "\n", "f'encoder/encoder_res_block_{block_idx - 1}/conv2/bn_2/BatchNorm/moving_variance'", ")", "\n", "", "", "in_channels", "=", "out_channels", "\n", "out_channels", "=", "min", "(", "out_channels", "*", "2", ",", "self", ".", "encoder_channels_max", ")", "\n", "# pylint: enable=line-too-long", "\n", "\n", "", "self", ".", "downsample", "=", "AveragePoolingLayer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.StyleGANEncoderNet.forward": [[164, 178], ["range", "ValueError", "stylegan_encoder_network.StyleGANEncoderNet.downsample", "stylegan_encoder_network.StyleGANEncoderNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "!=", "4", "or", "x", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'The input image should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {x.shape} is received!'", ")", "\n", "\n", "", "for", "block_idx", "in", "range", "(", "self", ".", "num_blocks", ")", ":", "\n", "      ", "if", "0", "<", "block_idx", "<", "self", ".", "num_blocks", "-", "1", ":", "\n", "        ", "x", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "x", "=", "self", ".", "__getattr__", "(", "f'block{block_idx}'", ")", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.AveragePoolingLayer.__init__": [[187, 190], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.AveragePoolingLayer.forward": [[191, 195], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "ksize", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "strides", "=", "[", "self", ".", "scale_factor", ",", "self", ".", "scale_factor", "]", "\n", "return", "F", ".", "avg_pool2d", "(", "x", ",", "kernel_size", "=", "ksize", ",", "stride", "=", "strides", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.BatchNormLayer.__init__": [[200, 218], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "channels", ",", "gamma", "=", "False", ",", "beta", "=", "True", ",", "decay", "=", "0.9", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "    ", "\"\"\"Initializes with basic settings.\n\n    Args:\n      channels: Number of channels of the input tensor.\n      gamma: Whether the scale (weight) of the affine mapping is learnable.\n      beta: Whether the center (bias) of the affine mapping is learnable.\n      decay: Decay factor for moving average operations in this layer.\n      epsilon: A value added to the denominator for numerical stability.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "num_features", "=", "channels", ",", "\n", "affine", "=", "True", ",", "\n", "track_running_stats", "=", "True", ",", "\n", "momentum", "=", "1", "-", "decay", ",", "\n", "eps", "=", "epsilon", ")", "\n", "self", ".", "bn", ".", "weight", ".", "requires_grad", "=", "gamma", "\n", "self", ".", "bn", ".", "bias", ".", "requires_grad", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.BatchNormLayer.forward": [[219, 221], ["stylegan_encoder_network.BatchNormLayer.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "bn", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.WScaleLayer.__init__": [[231, 240], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.WScaleLayer.forward": [[241, 247], ["ValueError", "stylegan_encoder_network.WScaleLayer.bias.view", "stylegan_encoder_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "x", ".", "ndim", "==", "4", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "", "if", "x", ".", "ndim", "==", "2", ":", "\n", "      ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "raise", "ValueError", "(", "f'The input tensor should be with shape [batch_size, '", "\n", "f'channel, height, width], or [batch_size, channel]!\\n'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.FirstBlock.__init__": [[254, 280], ["numpy.sqrt", "torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "stylegan_encoder_network.BatchNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_wscale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "use_bn", "=", "False", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale", "=", "(", "wscale_gain", "/", "np", ".", "sqrt", "(", "in_channels", "*", "3", "*", "3", ")", "if", "use_wscale", "else", "\n", "1.0", ")", "\n", "self", ".", "bn", "=", "(", "BatchNormLayer", "(", "channels", "=", "out_channels", ")", "if", "use_bn", "else", "\n", "nn", ".", "Identity", "(", ")", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.FirstBlock.forward": [[282, 284], ["stylegan_encoder_network.FirstBlock.activate", "stylegan_encoder_network.FirstBlock.bn", "stylegan_encoder_network.FirstBlock.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "self", ".", "activate", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.ResBlock.__init__": [[293, 375], ["numpy.sqrt", "torch.Module.__init__", "min", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "stylegan_encoder_network.WScaleLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "stylegan_encoder_network.WScaleLayer", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_encoder_network.BatchNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_encoder_network.BatchNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Identity", "stylegan_encoder_network.BatchNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_wscale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "use_bn", "=", "False", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      kernel_size: Size of the convolutional kernels.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      use_wscale: Whether to use `wscale` layer.\n      wscale_gain: The gain factor for `wscale` layer.\n      use_bn: Whether to use batch normalization layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Add shortcut if needed.", "\n", "if", "in_channels", "!=", "out_channels", ":", "\n", "      ", "self", ".", "add_shortcut", "=", "True", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "in_channels", ")", "if", "use_wscale", "else", "1.0", "\n", "self", ".", "bn", "=", "(", "BatchNormLayer", "(", "channels", "=", "out_channels", ")", "if", "use_bn", "else", "\n", "nn", ".", "Identity", "(", ")", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "add_shortcut", "=", "False", "\n", "self", ".", "identity", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "hidden_channels", "=", "min", "(", "in_channels", ",", "out_channels", ")", "\n", "\n", "# First convolutional block.", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale1", "=", "(", "1.0", "if", "use_wscale", "else", "\n", "wscale_gain", "/", "np", ".", "sqrt", "(", "in_channels", "*", "3", "*", "3", ")", ")", "\n", "# NOTE: WScaleLayer is employed to add bias.", "\n", "self", ".", "wscale1", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "hidden_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "self", ".", "bn1", "=", "(", "BatchNormLayer", "(", "channels", "=", "hidden_channels", ")", "if", "use_bn", "else", "\n", "nn", ".", "Identity", "(", ")", ")", "\n", "\n", "# Second convolutional block.", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale2", "=", "(", "1.0", "if", "use_wscale", "else", "\n", "wscale_gain", "/", "np", ".", "sqrt", "(", "hidden_channels", "*", "3", "*", "3", ")", ")", "\n", "self", ".", "wscale2", "=", "WScaleLayer", "(", "in_channels", "=", "hidden_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "self", ".", "bn2", "=", "(", "BatchNormLayer", "(", "channels", "=", "out_channels", ")", "if", "use_bn", "else", "\n", "nn", ".", "Identity", "(", ")", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.ResBlock.forward": [[377, 385], ["stylegan_encoder_network.ResBlock.activate", "stylegan_encoder_network.ResBlock.activate", "stylegan_encoder_network.ResBlock.activate", "stylegan_encoder_network.ResBlock.identity", "stylegan_encoder_network.ResBlock.bn1", "stylegan_encoder_network.ResBlock.bn2", "stylegan_encoder_network.ResBlock.bn", "stylegan_encoder_network.ResBlock.wscale1", "stylegan_encoder_network.ResBlock.wscale2", "stylegan_encoder_network.ResBlock.conv", "stylegan_encoder_network.ResBlock.conv1", "stylegan_encoder_network.ResBlock.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "if", "self", ".", "add_shortcut", ":", "\n", "      ", "y", "=", "self", ".", "activate", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", "*", "self", ".", "scale", ")", ")", "\n", "", "else", ":", "\n", "      ", "y", "=", "self", ".", "identity", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activate", "(", "self", ".", "bn1", "(", "self", ".", "wscale1", "(", "self", ".", "conv1", "(", "x", ")", "/", "self", ".", "scale1", ")", ")", ")", "\n", "x", "=", "self", ".", "activate", "(", "self", ".", "bn2", "(", "self", ".", "wscale2", "(", "self", ".", "conv2", "(", "x", ")", "/", "self", ".", "scale2", ")", ")", ")", "\n", "return", "x", "+", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.LastBlock.__init__": [[390, 404], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "stylegan_encoder_network.BatchNormLayer", "torch.Identity", "torch.Identity", "torch.Identity", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "use_wscale", "=", "False", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "use_bn", "=", "False", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_features", "=", "in_channels", ",", "\n", "out_features", "=", "out_channels", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "in_channels", ")", "if", "use_wscale", "else", "1.0", "\n", "self", ".", "bn", "=", "(", "BatchNormLayer", "(", "channels", "=", "out_channels", ")", "if", "use_bn", "else", "\n", "nn", ".", "Identity", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder_network.LastBlock.forward": [[405, 410], ["x.view.view.view", "x.view.view.view", "stylegan_encoder_network.LastBlock.bn().view", "stylegan_encoder_network.LastBlock.fc", "stylegan_encoder_network.LastBlock.bn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "*", "self", ".", "scale", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "return", "self", ".", "bn", "(", "x", ")", ".", "view", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.__init__": [[36, 43], ["base_generator.BaseGenerator.__init__", "stylegan_generator.StyleGANGenerator.net.synthesis.lod.to().tolist", "stylegan_generator.StyleGANGenerator.logger.info", "stylegan_generator.StyleGANGenerator.net.synthesis.lod.to"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ",", "truncation_psi", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'stylegan'", "\n", "self", ".", "truncation_psi", "=", "truncation_psi", "if", "truncation_psi", "is", "not", "None", "else", "model_settings", ".", "STYLEGAN_TRUNCATION_PSI", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "self", ".", "lod", "=", "self", ".", "net", ".", "synthesis", ".", "lod", ".", "to", "(", "self", ".", "cpu_device", ")", ".", "tolist", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Current `lod` is {self.lod}.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.build": [[44, 74], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "stylegan_generator_network.StyleGANGeneratorNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "z_space_dim", "=", "getattr", "(", "self", ",", "'z_space_dim'", ",", "512", ")", "\n", "self", ".", "w_space_dim", "=", "getattr", "(", "self", ",", "'w_space_dim'", ",", "512", ")", "\n", "self", ".", "num_mapping_layers", "=", "getattr", "(", "self", ",", "'num_mapping_layers'", ",", "8", ")", "\n", "self", ".", "repeat_w", "=", "getattr", "(", "self", ",", "'repeat_w'", ",", "True", ")", "\n", "self", ".", "final_tanh", "=", "getattr", "(", "self", ",", "'final_tanh'", ",", "False", ")", "\n", "self", ".", "label_size", "=", "getattr", "(", "self", ",", "'label_size'", ",", "0", ")", "\n", "self", ".", "fused_scale", "=", "getattr", "(", "self", ",", "'fused_scale'", ",", "'auto'", ")", "\n", "#self.truncation_psi = model_settings.STYLEGAN_TRUNCATION_PSI", "\n", "self", ".", "truncation_layers", "=", "model_settings", ".", "STYLEGAN_TRUNCATION_LAYERS", "\n", "self", ".", "randomize_noise", "=", "model_settings", ".", "STYLEGAN_RANDOMIZE_NOISE", "\n", "self", ".", "fmaps_base", "=", "getattr", "(", "self", ",", "'fmaps_base'", ",", "16", "<<", "10", ")", "\n", "self", ".", "fmaps_max", "=", "getattr", "(", "self", ",", "'fmaps_max'", ",", "512", ")", "\n", "self", ".", "net", "=", "StyleGANGeneratorNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "z_space_dim", "=", "self", ".", "z_space_dim", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "num_mapping_layers", "=", "self", ".", "num_mapping_layers", ",", "\n", "repeat_w", "=", "self", ".", "repeat_w", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "final_tanh", "=", "self", ".", "final_tanh", ",", "\n", "label_size", "=", "self", ".", "label_size", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_layers", "=", "self", ".", "truncation_layers", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ",", "\n", "fmaps_base", "=", "self", ".", "fmaps_base", ",", "\n", "fmaps_max", "=", "self", ".", "fmaps_max", ")", "\n", "self", ".", "num_layers", "=", "self", ".", "net", ".", "num_layers", "\n", "self", ".", "model_specific_vars", "=", "[", "'truncation.truncation'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.convert_tf_weights": [[75, 154], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "stylegan_generator.StyleGANGenerator.logger.info", "sys.path.insert", "sys.path.pop", "stylegan_generator.StyleGANGenerator.logger.info", "stylegan_generator.StyleGANGenerator.logger.info", "dict", "dict.update", "dict.update", "stylegan_generator.StyleGANGenerator.net.state_dict", "stylegan_generator.StyleGANGenerator.net.pth_to_tf_var_mapping.items", "stylegan_generator.StyleGANGenerator.logger.info", "stylegan_generator.StyleGANGenerator.logger.info", "torch.save", "stylegan_generator.StyleGANGenerator.logger.info", "stylegan_generator.StyleGANGenerator.load", "stylegan_generator.StyleGANGenerator.logger.info", "stylegan_generator.StyleGANGenerator.net.eval().to", "range", "stylegan_generator.StyleGANGenerator.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "dict", "dict", "stylegan_generator.StyleGANGenerator.logger.debug", "torch.from_numpy", "stylegan_generator.StyleGANGenerator.logger.warning", "tf.compat.v1.InteractiveSession.close", "stylegan_generator.StyleGANGenerator.easy_sample", "tf_net.run", "numpy.average", "stylegan_generator.StyleGANGenerator.logger.debug", "pickle.load", "pickle.load", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "stylegan_generator.StyleGANGenerator.net.eval", "numpy.random.randint", "numpy.zeros", "stylegan_generator.StyleGANGenerator.synthesize", "numpy.abs", "tf_net.components.mapping.__getstate__", "tf_net.components.synthesis.__getstate__", "var.permute.permute.permute", "var.permute.permute.permute"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.synthesize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "if", "self", ".", "has_encoder", ":", "\n", "        ", "_", ",", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "else", ":", "\n", "        ", "_", ",", "_", ",", "tf_net", "=", "pickle", ".", "load", "(", "f", ")", "# G, D, Gs", "\n", "", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "tf_vars", ".", "update", "(", "\n", "dict", "(", "tf_net", ".", "components", ".", "mapping", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", ")", "\n", "tf_vars", ".", "update", "(", "\n", "dict", "(", "tf_net", ".", "components", ".", "synthesis", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "latent_code", "=", "self", ".", "easy_sample", "(", "1", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "        ", "label_id", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "label_size", ")", "\n", "tf_label", "=", "np", ".", "zeros", "(", "(", "1", ",", "self", ".", "label_size", ")", ",", "np", ".", "float32", ")", "\n", "tf_label", "[", "0", ",", "label_id", "]", "=", "1.0", "\n", "", "else", ":", "\n", "        ", "label_id", "=", "0", "\n", "tf_label", "=", "None", "\n", "", "tf_output", "=", "tf_net", ".", "run", "(", "latent_code", ",", "\n", "tf_label", ",", "\n", "truncation_psi", "=", "self", ".", "truncation_psi", ",", "\n", "truncation_cutoff", "=", "self", ".", "truncation_layers", ",", "\n", "randomize_noise", "=", "self", ".", "randomize_noise", ")", "\n", "pth_output", "=", "self", ".", "synthesize", "(", "latent_code", ",", "labels", "=", "label_id", ")", "[", "'image'", "]", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.sample": [[155, 190], ["latent_space_type.lower.lower.lower", "numpy.concatenate.astype", "numpy.random.randn", "stylegan_generator.StyleGANGenerator.easy_sample", "stylegan_generator.StyleGANGenerator.get_batch_inputs", "numpy.concatenate", "ValueError", "stylegan_generator.StyleGANGenerator.easy_synthesize", "numpy.concatenate.append"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_synthesize"], ["", "def", "sample", "(", "self", ",", "num", ",", "latent_space_type", "=", "'z'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Samples latent codes randomly.\n\n    Args:\n      num: Number of latent codes to sample. Should be positive.\n      latent_space_type: Type of latent space from which to sample latent code.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n\n    Returns:\n      A `numpy.ndarray` as sampled latend codes.\n\n    Raises:\n      ValueError: If the given `latent_space_type` is not supported.\n    \"\"\"", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "latent_codes", "=", "np", ".", "random", ".", "randn", "(", "num", ",", "self", ".", "z_space_dim", ")", "\n", "", "elif", "latent_space_type", "in", "[", "'w'", ",", "'wp'", "]", ":", "\n", "      ", "z", "=", "self", ".", "easy_sample", "(", "num", ",", "latent_space_type", "=", "'z'", ")", "\n", "latent_codes", "=", "[", "]", "\n", "for", "inputs", "in", "self", ".", "get_batch_inputs", "(", "z", ",", "self", ".", "ram_size", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "easy_synthesize", "(", "latent_codes", "=", "inputs", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "False", ")", "\n", "latent_codes", ".", "append", "(", "outputs", "[", "latent_space_type", "]", ")", "\n", "", "latent_codes", "=", "np", ".", "concatenate", "(", "latent_codes", ",", "axis", "=", "0", ")", "\n", "if", "latent_space_type", "==", "'w'", ":", "\n", "        ", "assert", "latent_codes", ".", "shape", "==", "(", "num", ",", "self", ".", "w_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "        ", "assert", "latent_codes", ".", "shape", "==", "(", "num", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess": [[191, 222], ["latent_space_type.lower.lower.lower", "latent_codes.reshape.reshape.astype", "isinstance", "ValueError", "latent_codes.reshape.reshape.reshape", "numpy.linalg.norm", "numpy.sqrt", "latent_codes.reshape.reshape.reshape", "latent_codes.reshape.reshape.reshape", "ValueError"], "methods", ["None"], ["", "def", "preprocess", "(", "self", ",", "latent_codes", ",", "latent_space_type", "=", "'z'", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Preprocesses the input latent code if needed.\n\n    Args:\n      latent_codes: The input latent codes for preprocessing.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n\n    Returns:\n      The preprocessed latent codes which can be used as final input for the\n        generator.\n\n    Raises:\n      ValueError: If the given `latent_space_type` is not supported.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "z_space_dim", ")", "\n", "norm", "=", "np", ".", "linalg", ".", "norm", "(", "latent_codes", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "latent_codes", "=", "latent_codes", "/", "norm", "*", "np", ".", "sqrt", "(", "self", ".", "z_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "w_space_dim", ")", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "latent_codes", "=", "latent_codes", ".", "reshape", "(", "-", "1", ",", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "return", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator._synthesize": [[223, 315], ["stylegan_generator.StyleGANGenerator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "isinstance", "ValueError", "ValueError", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.net.mapping", "stylegan_generator.StyleGANGenerator.net.truncation", "stylegan_generator.StyleGANGenerator.get_value", "stylegan_generator.StyleGANGenerator.get_value", "range", "stylegan_generator.StyleGANGenerator.net.synthesis", "stylegan_generator.StyleGANGenerator.get_value", "torch.cuda.empty_cache", "stylegan_generator.StyleGANGenerator.astype", "ValueError", "latent_codes.astype", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.net.truncation", "stylegan_generator.StyleGANGenerator.get_value", "stylegan_generator.StyleGANGenerator.net.synthesis.__getattr__().epilogue.style_mod.dense", "stylegan_generator.StyleGANGenerator.get_value", "ValueError", "latent_codes.astype", "stylegan_generator.StyleGANGenerator.to_tensor", "ValueError", "ValueError", "latent_codes.astype", "stylegan_generator.StyleGANGenerator.net.synthesis.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "_synthesize", "(", "self", ",", "\n", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "True", ",", "\n", "generate_feature", "=", "False", ")", ":", "\n", "    ", "\"\"\"Synthesizes images with given latent codes.\n\n    One can choose whether to generate the layer-wise style codes.\n\n    Args:\n      latent_codes: Input latent codes for image synthesis.\n      latent_space_type: Type of latent space to which the latent codes belong.\n        Only [`z`, `w`, `wp`] are supported. Case insensitive. (default: `z`)\n      labels: Additional labels for conditional generation.\n      generate_style: Whether to generate the layer-wise style codes. (default:\n        False)\n      generate_image: Whether to generate the final image synthesis. (default:\n        True)\n\n    Returns:\n      A dictionary whose values are raw outputs from the generator.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "", "if", "generate_style", ":", "\n", "      ", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "        ", "style", "=", "self", ".", "net", ".", "synthesis", ".", "__getattr__", "(", "\n", "f'layer{i}'", ")", ".", "epilogue", ".", "style_mod", ".", "dense", "(", "wps", "[", ":", ",", "i", ",", ":", "]", ")", "\n", "results", "[", "f'style{i:02d}'", "]", "=", "self", ".", "get_value", "(", "style", ")", "\n", "\n", "", "", "if", "generate_image", ":", "\n", "      ", "images", ",", "feats", "=", "self", ".", "net", ".", "synthesis", "(", "wps", ",", "generate_feature", "=", "True", ")", "\n", "results", "[", "'image'", "]", "=", "self", ".", "get_value", "(", "images", ")", "\n", "if", "generate_feature", ":", "\n", "        ", "results", "[", "'feature'", "]", "=", "feats", "\n", "\n", "", "", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.synthesize": [[316, 332], ["stylegan_generator.StyleGANGenerator.batch_run", "stylegan_generator.StyleGANGenerator._synthesize"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator._synthesize"], ["", "def", "synthesize", "(", "self", ",", "\n", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ",", "\n", "generate_style", "=", "False", ",", "\n", "generate_image", "=", "True", ",", "\n", "generate_feature", "=", "False", ",", "\n", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "latent_codes", ",", "\n", "lambda", "x", ":", "self", ".", "_synthesize", "(", "\n", "x", ",", "\n", "latent_space_type", "=", "latent_space_type", ",", "\n", "labels", "=", "labels", ",", "\n", "generate_style", "=", "generate_style", ",", "\n", "generate_image", "=", "generate_image", ",", "\n", "generate_feature", "=", "generate_feature", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.__call__": [[333, 397], ["stylegan_generator.StyleGANGenerator.get_ont_hot_labels", "latent_space_type.lower.lower.lower", "stylegan_generator.StyleGANGenerator.net.synthesis", "isinstance", "ValueError", "ValueError", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.net.mapping", "stylegan_generator.StyleGANGenerator.net.truncation", "stylegan_generator.StyleGANGenerator.get_value", "stylegan_generator.StyleGANGenerator.get_value", "torch.cuda.empty_cache", "stylegan_generator.StyleGANGenerator.astype", "ValueError", "latent_codes.astype", "stylegan_generator.StyleGANGenerator.to_tensor", "stylegan_generator.StyleGANGenerator.net.truncation", "stylegan_generator.StyleGANGenerator.get_value", "ValueError", "latent_codes.astype", "stylegan_generator.StyleGANGenerator.to_tensor", "ValueError", "ValueError", "latent_codes.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_ont_hot_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor"], ["", "def", "__call__", "(", "self", ",", "latent_codes", ",", "\n", "latent_space_type", "=", "'z'", ",", "\n", "labels", "=", "None", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "latent_codes", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "\n", "", "results", "=", "{", "}", "\n", "if", "latent_codes", ".", "shape", "[", "0", "]", "<=", "0", "or", "latent_codes", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", ":", "\n", "      ", "raise", "ValueError", "(", "f'Batch size should be no larger than '", "\n", "f'{self.batch_size}, but {latent_codes.shape[0]} is '", "\n", "f'received!'", ")", "\n", "", "labels", "=", "self", ".", "get_ont_hot_labels", "(", "latent_codes", ".", "shape", "[", "0", "]", ",", "labels", ")", "\n", "if", "self", ".", "label_size", ":", "\n", "      ", "results", "[", "'label'", "]", "=", "labels", "\n", "", "ls", "=", "None", "if", "labels", "is", "None", "else", "self", ".", "to_tensor", "(", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "latent_space_type", "=", "latent_space_type", ".", "lower", "(", ")", "\n", "# Generate from Z space.", "\n", "if", "latent_space_type", "==", "'z'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals '", "\n", "f'to {self.z_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "zs", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "ws", "=", "self", ".", "net", ".", "mapping", "(", "zs", ",", "ls", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'z'", "]", "=", "latent_codes", "\n", "results", "[", "'w'", "]", "=", "self", ".", "get_value", "(", "ws", ")", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W space.", "\n", "", "elif", "latent_space_type", "==", "'w'", ":", "\n", "      ", "if", "latent_codes", ".", "ndim", "!=", "2", "or", "latent_codes", ".", "shape", "[", "1", "]", "!=", "self", ".", "w_space_dim", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'w_space_dim], where `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "ws", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "wps", "=", "self", ".", "net", ".", "truncation", "(", "ws", ")", "\n", "results", "[", "'w'", "]", "=", "latent_codes", "\n", "results", "[", "'wp'", "]", "=", "self", ".", "get_value", "(", "wps", ")", "\n", "# Generate from W+ space.", "\n", "", "elif", "latent_space_type", "==", "'wp'", ":", "\n", "      ", "if", "(", "latent_codes", ".", "ndim", "!=", "3", "or", "\n", "latent_codes", ".", "shape", "[", "1", ":", "]", "!=", "(", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", ")", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Latent codes should be with shape [batch_size, '", "\n", "f'num_layers, w_space_dim], where `num_layers` equals '", "\n", "f'to {self.num_layers}, and `w_space_dim` equals to '", "\n", "f'{self.w_space_dim}!\\n'", "\n", "f'But {latent_codes.shape} is received!'", ")", "\n", "", "wps", "=", "self", ".", "to_tensor", "(", "latent_codes", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "results", "[", "'wp'", "]", "=", "latent_codes", "\n", "", "else", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent space type `{latent_space_type}` is invalid!'", ")", "\n", "\n", "\n", "", "images", ",", "feats", "=", "self", ".", "net", ".", "synthesis", "(", "wps", ",", "generate_feature", "=", "True", ")", "\n", "results", "[", "'image'", "]", "=", "images", "\n", "results", "[", "'feature'", "]", "=", "feats", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.__init__": [[33, 149], ["torch.Module.__init__", "int", "int", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "pggan_generator_network.ResolutionScalingLayer", "ValueError", "numpy.log2", "numpy.log2", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "pggan_generator_network.PGGANGeneratorNet.add_module", "pggan_generator_network.PGGANGeneratorNet.add_module", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Identity", "torch.Identity", "torch.Identity", "pggan_generator_network.PGGANGeneratorNet.add_module", "pggan_generator_network.PGGANGeneratorNet.add_module", "pggan_generator_network.ConvBlock", "pggan_generator_network.ConvBlock", "pggan_generator_network.ConvBlock", "pggan_generator_network.ConvBlock", "pggan_generator_network.PGGANGeneratorNet.get_nf", "pggan_generator_network.PGGANGeneratorNet.get_nf", "pggan_generator_network.PGGANGeneratorNet.get_nf", "pggan_generator_network.PGGANGeneratorNet.get_nf", "pggan_generator_network.PGGANGeneratorNet.get_nf", "pggan_generator_network.PGGANGeneratorNet.get_nf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf"], ["def", "__init__", "(", "self", ",", "\n", "resolution", ",", "\n", "z_space_dim", "=", "512", ",", "\n", "image_channels", "=", "3", ",", "\n", "final_tanh", "=", "False", ",", "\n", "label_size", "=", "0", ",", "\n", "fused_scale", "=", "False", ",", "\n", "fmaps_base", "=", "16", "<<", "10", ",", "\n", "fmaps_max", "=", "512", ")", ":", "\n", "    ", "\"\"\"Initializes the generator with basic settings.\n\n    Args:\n      resolution: The resolution of the output image.\n      z_space_dim: The dimension of the initial latent space. (default: 512)\n      image_channels: Number of channels of the output image. (default: 3)\n      final_tanh: Whether to use tanh to control pixel range. (default: False)\n      label_size: Size of additional labels. (default: 0)\n      fused_scale: Whether to fused `upsample` and `conv2d` together, resulting\n        in `conv2d_transpose`. (default: False)\n      fmaps_base: Base factor to compute number of feature maps for each layer.\n        (default: 16 << 10)\n      fmaps_max: Maximum number of feature maps in each layer. (default: 512)\n\n    Raises:\n      ValueError: If the input `resolution` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "resolution", "not", "in", "_RESOLUTIONS_ALLOWED", ":", "\n", "      ", "raise", "ValueError", "(", "f'Invalid resolution: {resolution}!\\n'", "\n", "f'Resolutions allowed: {_RESOLUTIONS_ALLOWED}.'", ")", "\n", "\n", "", "self", ".", "init_res", "=", "_INIT_RES", "\n", "self", ".", "init_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "init_res", ")", ")", "\n", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "final_res_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "resolution", ")", ")", "\n", "self", ".", "z_space_dim", "=", "z_space_dim", "\n", "self", ".", "image_channels", "=", "image_channels", "\n", "self", ".", "final_tanh", "=", "final_tanh", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "fused_scale", "=", "fused_scale", "\n", "self", ".", "fmaps_base", "=", "fmaps_base", "\n", "self", ".", "fmaps_max", "=", "fmaps_max", "\n", "\n", "self", ".", "num_layers", "=", "(", "self", ".", "final_res_log2", "-", "self", ".", "init_res_log2", "+", "1", ")", "*", "2", "\n", "\n", "# Level of detail (used for progressive training).", "\n", "self", ".", "lod", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", ")", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "=", "{", "'lod'", ":", "'lod'", "}", "\n", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "res", "=", "2", "**", "res_log2", "\n", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "\n", "# First convolution layer for each resolution.", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "z_space_dim", "+", "self", ".", "label_size", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "kernel_size", "=", "self", ".", "init_res", ",", "\n", "padding", "=", "3", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Dense/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Dense/bias'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", "//", "2", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "upsample", "=", "True", ",", "\n", "fused_scale", "=", "self", ".", "fused_scale", ")", ")", "\n", "if", "self", ".", "fused_scale", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0_up/bias'", ")", "\n", "", "else", ":", "\n", "          ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv0/bias'", ")", "\n", "\n", "# Second convolution layer for each resolution.", "\n", "", "", "self", ".", "add_module", "(", "\n", "f'layer{2 * block_idx + 1}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "get_nf", "(", "res", ")", ")", ")", "\n", "if", "res", "==", "self", ".", "init_res", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv/bias'", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.conv.weight'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'layer{2 * block_idx + 1}.wscale.bias'", "]", "=", "(", "\n", "f'{res}x{res}/Conv1/bias'", ")", "\n", "\n", "# Output convolution layer for each resolution.", "\n", "", "self", ".", "add_module", "(", "\n", "f'output{block_idx}'", ",", "\n", "ConvBlock", "(", "in_channels", "=", "self", ".", "get_nf", "(", "res", ")", ",", "\n", "out_channels", "=", "self", ".", "image_channels", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "wscale_gain", "=", "1.0", ",", "\n", "activation_type", "=", "'linear'", ")", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.conv.weight'", "]", "=", "(", "\n", "f'ToRGB_lod{self.final_res_log2 - res_log2}/weight'", ")", "\n", "self", ".", "pth_to_tf_var_mapping", "[", "f'output{block_idx}.wscale.bias'", "]", "=", "(", "\n", "f'ToRGB_lod{self.final_res_log2 - res_log2}/bias'", ")", "\n", "\n", "", "self", ".", "upsample", "=", "ResolutionScalingLayer", "(", ")", "\n", "self", ".", "final_activate", "=", "nn", ".", "Tanh", "(", ")", "if", "self", ".", "final_tanh", "else", "nn", ".", "Identity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.get_nf": [[150, 153], ["min"], "methods", ["None"], ["", "def", "get_nf", "(", "self", ",", "res", ")", ":", "\n", "    ", "\"\"\"Gets number of feature maps according to current resolution.\"\"\"", "\n", "return", "min", "(", "self", ".", "fmaps_base", "//", "res", ",", "self", ".", "fmaps_max", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PGGANGeneratorNet.forward": [[154, 189], ["torch.cat.view", "torch.cat.view", "torch.cat.view", "pggan_generator_network.PGGANGeneratorNet.lod.cpu().tolist", "range", "pggan_generator_network.PGGANGeneratorNet.final_activate", "ValueError", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ValueError", "ValueError", "pggan_generator_network.PGGANGeneratorNet.lod.cpu", "pggan_generator_network.PGGANGeneratorNet.upsample", "feats.append", "pggan_generator_network.PGGANGeneratorNet.__getattr__", "pggan_generator_network.PGGANGeneratorNet.__getattr__", "pggan_generator_network.PGGANGeneratorNet.__getattr__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__"], ["", "def", "forward", "(", "self", ",", "z", ",", "l", "=", "None", ",", "generate_feature", "=", "False", ")", ":", "\n", "    ", "if", "z", ".", "ndim", "!=", "2", "or", "z", ".", "shape", "[", "1", "]", "!=", "self", ".", "z_space_dim", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input latent code should be with shape [batch_size, '", "\n", "f'latent_space_dim], where `latent_space_dim` equals to '", "\n", "f'{self.z_space_dim}!\\n'", "\n", "f'But {z.shape} is received!'", ")", "\n", "", "if", "self", ".", "label_size", ":", "\n", "      ", "if", "l", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "f'Model requires an additional label (with size '", "\n", "f'{self.label_size}) as inputs, but no label is '", "\n", "f'received!'", ")", "\n", "", "if", "l", ".", "ndim", "!=", "2", "or", "l", ".", "shape", "!=", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "label_size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "f'Input label should be with shape [batch_size, '", "\n", "f'label_size], where `batch_size` equals to that of '", "\n", "f'latent codes ({z.shape[0]}) and `label_size` equals '", "\n", "f'to {self.label_size}!\\n'", "\n", "f'But {l.shape} is received!'", ")", "\n", "", "z", "=", "torch", ".", "cat", "(", "(", "z", ",", "l", ")", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "z", ".", "view", "(", "z", ".", "shape", "[", "0", "]", ",", "self", ".", "z_space_dim", "+", "self", ".", "label_size", ",", "1", ",", "1", ")", "\n", "feats", "=", "[", "]", "\n", "lod", "=", "self", ".", "lod", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "\n", "for", "res_log2", "in", "range", "(", "self", ".", "init_res_log2", ",", "self", ".", "final_res_log2", "+", "1", ")", ":", "\n", "      ", "if", "res_log2", "+", "lod", "<=", "self", ".", "final_res_log2", ":", "\n", "        ", "block_idx", "=", "res_log2", "-", "self", ".", "init_res_log2", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx}'", ")", "(", "x", ")", "\n", "x", "=", "self", ".", "__getattr__", "(", "f'layer{2 * block_idx + 1}'", ")", "(", "x", ")", "\n", "image", "=", "self", ".", "__getattr__", "(", "f'output{block_idx}'", ")", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "image", "=", "self", ".", "upsample", "(", "image", ")", "\n", "", "if", "generate_feature", ":", "feats", ".", "append", "(", "x", ")", "\n", "", "image", "=", "self", ".", "final_activate", "(", "image", ")", "\n", "if", "generate_feature", ":", "\n", "      ", "return", "image", ",", "feats", "\n", "", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PixelNormLayer.__init__": [[194, 197], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "eps", "=", "epsilon", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.PixelNormLayer.forward": [[198, 200], ["torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "/", "torch", ".", "sqrt", "(", "torch", ".", "mean", "(", "x", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "+", "self", ".", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ResolutionScalingLayer.__init__": [[209, 212], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "scale_factor", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ResolutionScalingLayer.forward": [[213, 215], ["torch.interpolate", "torch.interpolate", "torch.interpolate"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "F", ".", "interpolate", "(", "x", ",", "scale_factor", "=", "self", ".", "scale_factor", ",", "mode", "=", "'nearest'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.WScaleLayer.__init__": [[225, 230], ["numpy.sqrt", "torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "numpy.sqrt", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.WScaleLayer.forward": [[231, 233], ["pggan_generator_network.WScaleLayer.bias.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "return", "x", "*", "self", ".", "scale", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ConvBlock.__init__": [[243, 311], ["numpy.sqrt", "torch.Module.__init__", "pggan_generator_network.PixelNormLayer", "pggan_generator_network.WScaleLayer", "pggan_generator_network.ResolutionScalingLayer", "torch.Identity", "torch.Identity", "torch.Identity", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Identity", "torch.Identity", "torch.Identity", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "numpy.sqrt", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "dilation", "=", "1", ",", "\n", "add_bias", "=", "False", ",", "\n", "upsample", "=", "False", ",", "\n", "fused_scale", "=", "False", ",", "\n", "wscale_gain", "=", "np", ".", "sqrt", "(", "2.0", ")", ",", "\n", "activation_type", "=", "'lrelu'", ")", ":", "\n", "    ", "\"\"\"Initializes the class with block settings.\n\n    Args:\n      in_channels: Number of channels of the input tensor fed into this block.\n      out_channels: Number of channels of the output tensor.\n      kernel_size: Size of the convolutional kernels.\n      stride: Stride parameter for convolution operation.\n      padding: Padding parameter for convolution operation.\n      dilation: Dilation rate for convolution operation.\n      add_bias: Whether to add bias onto the convolutional result.\n      upsample: Whether to upsample the input tensor before convolution.\n      fused_scale: Whether to fused `upsample` and `conv2d` together, resulting\n        in `conv2d_transpose`.\n      wscale_gain: The gain factor for `wscale` layer.\n      activation_type: Type of activation. Support `linear` and `lrelu`.\n\n    Raises:\n      NotImplementedError: If the input `activation_type` is not supported.\n    \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "pixel_norm", "=", "PixelNormLayer", "(", ")", "\n", "\n", "if", "upsample", "and", "not", "fused_scale", ":", "\n", "      ", "self", ".", "upsample", "=", "ResolutionScalingLayer", "(", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "upsample", "=", "nn", ".", "Identity", "(", ")", "\n", "\n", "", "if", "upsample", "and", "fused_scale", ":", "\n", "      ", "self", ".", "use_conv2d_transpose", "=", "True", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "randn", "(", "kernel_size", ",", "kernel_size", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "fan_in", "=", "in_channels", "*", "kernel_size", "*", "kernel_size", "\n", "self", ".", "scale", "=", "wscale_gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "use_conv2d_transpose", "=", "False", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "dilation", "=", "dilation", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "add_bias", ")", "\n", "\n", "", "self", ".", "wscale", "=", "WScaleLayer", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "out_channels", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "gain", "=", "wscale_gain", ")", "\n", "\n", "if", "activation_type", "==", "'linear'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "Identity", "(", ")", "\n", "", "elif", "activation_type", "==", "'lrelu'", ":", "\n", "      ", "self", ".", "activate", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "      ", "raise", "NotImplementedError", "(", "f'Not implemented activation function: '", "\n", "f'{activation_type}!'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.pggan_generator_network.ConvBlock.forward": [[313, 329], ["pggan_generator_network.ConvBlock.pixel_norm", "pggan_generator_network.ConvBlock.upsample", "pggan_generator_network.ConvBlock.wscale", "pggan_generator_network.ConvBlock.activate", "torch.pad", "torch.pad", "torch.pad", "kernel.permute.permute.permute", "torch.conv_transpose2d", "torch.conv_transpose2d", "torch.conv_transpose2d", "pggan_generator_network.ConvBlock.conv"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.pixel_norm"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "pixel_norm", "(", "x", ")", "\n", "x", "=", "self", ".", "upsample", "(", "x", ")", "\n", "if", "self", ".", "use_conv2d_transpose", ":", "\n", "      ", "kernel", "=", "self", ".", "weight", "*", "self", ".", "scale", "\n", "kernel", "=", "F", ".", "pad", "(", "kernel", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "1", ",", "1", ",", "1", ",", "1", ")", ",", "'constant'", ",", "0.0", ")", "\n", "kernel", "=", "(", "kernel", "[", "1", ":", ",", "1", ":", "]", "+", "kernel", "[", ":", "-", "1", ",", "1", ":", "]", "+", "\n", "kernel", "[", "1", ":", ",", ":", "-", "1", "]", "+", "kernel", "[", ":", "-", "1", ",", ":", "-", "1", "]", ")", "\n", "kernel", "=", "kernel", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", "\n", "x", "=", "F", ".", "conv_transpose2d", "(", "x", ",", "kernel", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "x", "=", "x", "/", "self", ".", "scale", "\n", "", "else", ":", "\n", "      ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "", "x", "=", "self", ".", "wscale", "(", "x", ")", "\n", "x", "=", "self", ".", "activate", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.__init__": [[20, 23], ["base_encoder.BaseEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["def", "__init__", "(", "self", ",", "model_name", ",", "logger", "=", "None", ")", ":", "\n", "    ", "self", ".", "gan_type", "=", "'stylegan'", "\n", "super", "(", ")", ".", "__init__", "(", "model_name", ",", "logger", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.build": [[24, 40], ["getattr", "getattr", "getattr", "getattr", "getattr", "stylegan_encoder_network.StyleGANEncoderNet"], "methods", ["None"], ["", "def", "build", "(", "self", ")", ":", "\n", "    ", "self", ".", "w_space_dim", "=", "getattr", "(", "self", ",", "'w_space_dim'", ",", "512", ")", "\n", "self", ".", "encoder_channels_base", "=", "getattr", "(", "self", ",", "'encoder_channels_base'", ",", "64", ")", "\n", "self", ".", "encoder_channels_max", "=", "getattr", "(", "self", ",", "'encoder_channels_max'", ",", "1024", ")", "\n", "self", ".", "use_wscale", "=", "getattr", "(", "self", ",", "'use_wscale'", ",", "False", ")", "\n", "self", ".", "use_bn", "=", "getattr", "(", "self", ",", "'use_bn'", ",", "False", ")", "\n", "self", ".", "net", "=", "StyleGANEncoderNet", "(", "\n", "resolution", "=", "self", ".", "resolution", ",", "\n", "w_space_dim", "=", "self", ".", "w_space_dim", ",", "\n", "image_channels", "=", "self", ".", "image_channels", ",", "\n", "encoder_channels_base", "=", "self", ".", "encoder_channels_base", ",", "\n", "encoder_channels_max", "=", "self", ".", "encoder_channels_max", ",", "\n", "use_wscale", "=", "self", ".", "use_wscale", ",", "\n", "use_bn", "=", "self", ".", "use_bn", ")", "\n", "self", ".", "num_layers", "=", "self", ".", "net", ".", "num_layers", "\n", "self", ".", "encode_dim", "=", "[", "self", ".", "num_layers", ",", "self", ".", "w_space_dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.convert_tf_weights": [[41, 103], ["warnings.filterwarnings", "tf.compat.v1.logging.set_verbosity", "tf.compat.v1.InteractiveSession", "stylegan_encoder.StyleGANEncoder.logger.info", "sys.path.insert", "sys.path.pop", "stylegan_encoder.StyleGANEncoder.logger.info", "stylegan_encoder.StyleGANEncoder.logger.info", "dict", "stylegan_encoder.StyleGANEncoder.net.state_dict", "stylegan_encoder.StyleGANEncoder.net.pth_to_tf_var_mapping.items", "stylegan_encoder.StyleGANEncoder.logger.info", "stylegan_encoder.StyleGANEncoder.logger.info", "torch.save", "stylegan_encoder.StyleGANEncoder.logger.info", "stylegan_encoder.StyleGANEncoder.load", "stylegan_encoder.StyleGANEncoder.logger.info", "stylegan_encoder.StyleGANEncoder.net.eval().to", "range", "stylegan_encoder.StyleGANEncoder.logger.info", "tf.compat.v1.InteractiveSession.close", "open", "pickle.load", "stylegan_encoder.StyleGANEncoder.logger.debug", "torch.from_numpy", "stylegan_encoder.StyleGANEncoder.logger.warning", "tf.compat.v1.InteractiveSession.close", "tf_net.run", "[].reshape", "numpy.average", "stylegan_encoder.StyleGANEncoder.logger.debug", "tf_net.__getstate__", "numpy.array", "tf.test.is_built_with_cuda", "stylegan_encoder.StyleGANEncoder.net.eval", "numpy.abs", "var.permute.permute.permute", "numpy.random.rand", "var.permute.permute.permute", "stylegan_encoder.StyleGANEncoder.encode"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.encode"], ["", "def", "convert_tf_weights", "(", "self", ",", "test_num", "=", "10", ")", ":", "\n", "# pylint: disable=import-outside-toplevel", "\n", "    ", "import", "sys", "\n", "import", "pickle", "\n", "import", "warnings", "\n", "warnings", ".", "filterwarnings", "(", "'ignore'", ",", "category", "=", "FutureWarning", ")", "\n", "import", "tensorflow", "as", "tf", "\n", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "compat", ".", "v1", ".", "logging", ".", "ERROR", ")", "\n", "# pylint: enable=import-outside-toplevel", "\n", "\n", "sess", "=", "tf", ".", "compat", ".", "v1", ".", "InteractiveSession", "(", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Loading tf weights from `{self.tf_weight_path}`.'", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "self", ".", "official_code_path", ")", "\n", "with", "open", "(", "self", ".", "tf_weight_path", ",", "'rb'", ")", "as", "f", ":", "\n", "      ", "tf_net", ",", "_", ",", "_", ",", "_", "=", "pickle", ".", "load", "(", "f", ")", "# E, G, D, Gs", "\n", "", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully loaded!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Converting tf weights to pytorch version.'", ")", "\n", "tf_vars", "=", "dict", "(", "tf_net", ".", "__getstate__", "(", ")", "[", "'variables'", "]", ")", "\n", "state_dict", "=", "self", ".", "net", ".", "state_dict", "(", ")", "\n", "for", "pth_var_name", ",", "tf_var_name", "in", "self", ".", "net", ".", "pth_to_tf_var_mapping", ".", "items", "(", ")", ":", "\n", "      ", "assert", "tf_var_name", "in", "tf_vars", "\n", "assert", "pth_var_name", "in", "state_dict", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Converting `{tf_var_name}` to `{pth_var_name}`.'", ")", "\n", "var", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "tf_vars", "[", "tf_var_name", "]", ")", ")", "\n", "if", "'weight'", "in", "pth_var_name", ":", "\n", "        ", "if", "'fc'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "1", ",", "0", ")", "\n", "", "elif", "'conv'", "in", "pth_var_name", ":", "\n", "          ", "var", "=", "var", ".", "permute", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "", "", "state_dict", "[", "pth_var_name", "]", "=", "var", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Successfully converted!'", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "f'Saving pytorch weights to `{self.weight_path}`.'", ")", "\n", "for", "var_name", "in", "self", ".", "model_specific_vars", ":", "\n", "      ", "del", "state_dict", "[", "var_name", "]", "\n", "", "torch", ".", "save", "(", "state_dict", ",", "self", ".", "weight_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "f'Successfully saved!'", ")", "\n", "\n", "self", ".", "load", "(", ")", "\n", "\n", "# Start testing if needed.", "\n", "if", "test_num", "<=", "0", "or", "not", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", ":", "\n", "      ", "self", ".", "logger", ".", "warning", "(", "f'Skip testing the weights converted from tf model!'", ")", "\n", "sess", ".", "close", "(", ")", "\n", "return", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Testing conversion results.'", ")", "\n", "self", ".", "net", ".", "eval", "(", ")", ".", "to", "(", "self", ".", "run_device", ")", "\n", "total_distance", "=", "0.0", "\n", "for", "i", "in", "range", "(", "test_num", ")", ":", "\n", "      ", "input_shape", "=", "[", "1", ",", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", "]", "\n", "image", "=", "np", ".", "random", ".", "rand", "(", "*", "input_shape", ")", "*", "2", "-", "1", "\n", "tf_output", "=", "tf_net", ".", "run", "(", "image", ",", "phase", "=", "False", ")", "\n", "pth_output", "=", "self", ".", "encode", "(", "image", ")", "[", "'code'", "]", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "distance", "=", "np", ".", "average", "(", "np", ".", "abs", "(", "tf_output", "-", "pth_output", ")", ")", "\n", "self", ".", "logger", ".", "debug", "(", "f'  Test {i:03d}: distance {distance:.6e}.'", ")", "\n", "total_distance", "+=", "distance", "\n", "", "self", ".", "logger", ".", "info", "(", "f'Average distance is {total_distance / test_num:.6e}.'", ")", "\n", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder._encode": [[104, 130], ["stylegan_encoder.StyleGANEncoder.to_tensor", "stylegan_encoder.StyleGANEncoder.net", "codes.view.view.view", "isinstance", "ValueError", "ValueError", "images.astype", "stylegan_encoder.StyleGANEncoder.get_value", "torch.cuda.empty_cache", "numpy.prod"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.to_tensor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.get_value"], ["", "def", "_encode", "(", "self", ",", "images", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "images", ",", "np", ".", "ndarray", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Latent codes should be with type `numpy.ndarray`!'", ")", "\n", "", "if", "(", "images", ".", "ndim", "!=", "4", "or", "images", ".", "shape", "[", "0", "]", "<=", "0", "or", "\n", "images", ".", "shape", "[", "0", "]", ">", "self", ".", "batch_size", "or", "images", ".", "shape", "[", "1", ":", "]", "!=", "(", "\n", "self", ".", "image_channels", ",", "self", ".", "resolution", ",", "self", ".", "resolution", ")", ")", ":", "\n", "      ", "raise", "ValueError", "(", "f'Input images should be with shape [batch_size, '", "\n", "f'channel, height, width], where '", "\n", "f'`batch_size` no larger than {self.batch_size}, '", "\n", "f'`channel` equals to {self.image_channels}, '", "\n", "f'`height` and `width` equal to {self.resolution}!\\n'", "\n", "f'But {images.shape} is received!'", ")", "\n", "\n", "", "xs", "=", "self", ".", "to_tensor", "(", "images", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "codes", "=", "self", ".", "net", "(", "xs", ")", "\n", "assert", "codes", ".", "shape", "==", "(", "images", ".", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "self", ".", "encode_dim", ")", ")", "\n", "codes", "=", "codes", ".", "view", "(", "codes", ".", "shape", "[", "0", "]", ",", "*", "self", ".", "encode_dim", ")", "\n", "results", "=", "{", "\n", "'image'", ":", "images", ",", "\n", "'code'", ":", "self", ".", "get_value", "(", "codes", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "use_cuda", ":", "\n", "      ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.encode": [[131, 133], ["stylegan_encoder.StyleGANEncoder.batch_run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.batch_run"], ["", "def", "encode", "(", "self", ",", "images", ",", "**", "kwargs", ")", ":", "\n", "    ", "return", "self", ".", "batch_run", "(", "images", ",", "self", ".", "_encode", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.config.EasyDict.__init__": [[13, 14], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "return", "self", "[", "name", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.config.EasyDict.__getattr__": [[14, 15], ["None"], "methods", ["None"], ["def", "__getattr__", "(", "self", ",", "name", ")", ":", "return", "self", "[", "name", "]", "\n", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "self", "[", "name", "]", "=", "value", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.config.EasyDict.__setattr__": [[15, 16], ["None"], "methods", ["None"], ["def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "self", "[", "name", "]", "=", "value", "\n", "def", "__delattr__", "(", "self", ",", "name", ")", ":", "del", "self", "[", "name", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.config.EasyDict.__delattr__": [[16, 17], ["None"], "methods", ["None"], ["def", "__delattr__", "(", "self", ",", "name", ")", ":", "del", "self", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.lerp": [[15, 16], ["None"], "function", ["None"], ["def", "lerp", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.lerp_clip": [[16, 17], ["tensorflow.clip_by_value"], "function", ["None"], ["def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.cset": [[17, 18], ["tensorflow.cond"], "function", ["None"], ["def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.get_weight": [[22, 30], ["numpy.sqrt", "numpy.prod", "numpy.sqrt", "tensorflow.constant", "tensorflow.get_variable", "numpy.float32", "tensorflow.get_variable", "tensorflow.initializers.random_normal", "tensorflow.initializers.random_normal"], "function", ["None"], ["def", "get_weight", "(", "shape", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ",", "fan_in", "=", "None", ")", ":", "\n", "    ", "if", "fan_in", "is", "None", ":", "fan_in", "=", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", "\n", "std", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "# He init", "\n", "if", "use_wscale", ":", "\n", "        ", "wscale", "=", "tf", ".", "constant", "(", "np", ".", "float32", "(", "std", ")", ",", "name", "=", "'wscale'", ")", "\n", "return", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "*", "wscale", "\n", "", "else", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", "0", ",", "std", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.dense": [[34, 40], ["numpy.sqrt", "networks.get_weight", "tensorflow.cast", "tensorflow.matmul", "len", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["", "", "def", "dense", "(", "x", ",", "fmaps", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "[", "d", ".", "value", "for", "d", "in", "x", ".", "shape", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "", "w", "=", "get_weight", "(", "[", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.conv2d": [[44, 49], ["numpy.sqrt", "networks.get_weight", "tensorflow.cast", "tensorflow.nn.conv2d"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.apply_bias": [[53, 60], ["tensorflow.get_variable", "tensorflow.cast", "len", "tensorflow.initializers.zeros", "tensorflow.reshape"], "function", ["None"], ["", "def", "apply_bias", "(", "x", ")", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "b", "=", "tf", ".", "cast", "(", "b", ",", "x", ".", "dtype", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "        ", "return", "x", "+", "b", "\n", "", "else", ":", "\n", "        ", "return", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.leaky_relu": [[64, 68], ["tensorflow.name_scope", "tensorflow.constant", "tensorflow.maximum"], "function", ["None"], ["", "", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'LeakyRelu'", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "constant", "(", "alpha", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'alpha'", ")", "\n", "return", "tf", ".", "maximum", "(", "x", "*", "alpha", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.upscale2d": [[72, 81], ["isinstance", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape"], "function", ["None"], ["", "", "def", "upscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "factor", "==", "1", ":", "return", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Upscale2D'", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.upscale2d_conv2d": [[86, 94], ["numpy.sqrt", "networks.get_weight", "tensorflow.pad", "tensorflow.add_n", "tensorflow.cast", "tensorflow.nn.conv2d_transpose", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["", "", "def", "upscale2d_conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "fmaps", ",", "x", ".", "shape", "[", "1", "]", ".", "value", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "fan_in", "=", "(", "kernel", "**", "2", ")", "*", "x", ".", "shape", "[", "1", "]", ".", "value", ")", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "os", "=", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "fmaps", ",", "x", ".", "shape", "[", "2", "]", "*", "2", ",", "x", ".", "shape", "[", "3", "]", "*", "2", "]", "\n", "return", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "os", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.downscale2d": [[98, 104], ["isinstance", "tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "def", "downscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "factor", "==", "1", ":", "return", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Downscale2D'", ")", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "return", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "# NOTE: requires tf_config['graph_options.place_pruned_graph'] = True", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.conv2d_downscale2d": [[109, 116], ["numpy.sqrt", "networks.get_weight", "tensorflow.pad", "tensorflow.cast", "tensorflow.nn.conv2d", "tensorflow.add_n"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "conv2d_downscale2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "*", "0.25", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.pixel_norm": [[120, 123], ["tensorflow.variable_scope", "tensorflow.rsqrt", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["", "def", "pixel_norm", "(", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'PixelNorm'", ")", ":", "\n", "        ", "return", "x", "*", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.minibatch_stddev_layer": [[127, 140], ["tensorflow.variable_scope", "tensorflow.minimum", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.tile", "tensorflow.concat", "tensorflow.square", "tensorflow.shape"], "function", ["None"], ["", "", "def", "minibatch_stddev_layer", "(", "x", ",", "group_size", "=", "4", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "        ", "group_size", "=", "tf", ".", "minimum", "(", "group_size", ",", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "# Minibatch must be divisible by (or smaller than) group_size.", "\n", "s", "=", "x", ".", "shape", "# [NCHW]  Input shape.", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "group_size", ",", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [GMCHW] Split minibatch into M groups of size G.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "# [GMCHW] Cast to FP32.", "\n", "y", "-=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [GMCHW] Subtract mean over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y", ")", ",", "axis", "=", "0", ")", "# [MCHW]  Calc variance over group.", "\n", "y", "=", "tf", ".", "sqrt", "(", "y", "+", "1e-8", ")", "# [MCHW]  Calc stddev over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "# [M111]  Take average over fmaps and pixels.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "x", ".", "dtype", ")", "# [M111]  Cast back to original data type.", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "group_size", ",", "1", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [N1HW]  Replicate over group and pixels.", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "# [NCHW]  Append as new fmap.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.G_paper": [[144, 230], ["int", "latents_in.set_shape", "labels_in.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "min", "networks.G_paper.nf"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "", "def", "G_paper", "(", "\n", "latents_in", ",", "# First input: Latent vectors [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "1", ",", "# Number of output color channels. Overridden based on dataset.", "\n", "resolution", "=", "32", ",", "# Output resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "latent_size", "=", "None", ",", "# Dimensionality of the latent vectors. None = min(fmap_base, fmap_max).", "\n", "normalize_latents", "=", "True", ",", "# Normalize latent vectors before feeding them to the network?", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "use_pixelnorm", "=", "True", ",", "# Enable pixelwise feature vector normalization?", "\n", "pixelnorm_epsilon", "=", "1e-8", ",", "# Constant epsilon for pixelwise feature vector normalization.", "\n", "use_leakyrelu", "=", "True", ",", "# True = leaky ReLU, False = ReLU.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "True", ",", "# True = use fused upscale2d + conv2d, False = separate upscale2d layers.", "\n", "structure", "=", "None", ",", "# 'linear' = human-readable, 'recursive' = efficient, None = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "def", "PN", "(", "x", ")", ":", "return", "pixel_norm", "(", "x", ",", "epsilon", "=", "pixelnorm_epsilon", ")", "if", "use_pixelnorm", "else", "x", "\n", "if", "latent_size", "is", "None", ":", "latent_size", "=", "nf", "(", "0", ")", "\n", "if", "structure", "is", "None", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", "=", "leaky_relu", "if", "use_leakyrelu", "else", "tf", ".", "nn", ".", "relu", "\n", "\n", "latents_in", ".", "set_shape", "(", "[", "None", ",", "latent_size", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "combo_in", "=", "tf", ".", "cast", "(", "tf", ".", "concat", "(", "[", "latents_in", ",", "labels_in", "]", ",", "axis", "=", "1", ")", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "\n", "# Building blocks.", "\n", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", "==", "2", ":", "# 4x4", "\n", "                ", "if", "normalize_latents", ":", "x", "=", "pixel_norm", "(", "x", ",", "epsilon", "=", "pixelnorm_epsilon", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Dense'", ")", ":", "\n", "                    ", "x", "=", "dense", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", "*", "16", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", "/", "4", ",", "use_wscale", "=", "use_wscale", ")", "# override gain to match the original Theano implementation", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nf", "(", "res", "-", "1", ")", ",", "4", ",", "4", "]", ")", "\n", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "x", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "                    ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "else", ":", "# 8x8 and up", "\n", "                ", "if", "fused_scale", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "                        ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "upscale2d_conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "x", "=", "upscale2d", "(", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                        ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                    ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "return", "x", "\n", "", "", "def", "torgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "lod", "=", "resolution_log2", "-", "res", "\n", "with", "tf", ".", "variable_scope", "(", "'ToRGB_lod%d'", "%", "lod", ")", ":", "\n", "            ", "return", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "x", "=", "block", "(", "combo_in", ",", "2", ")", "\n", "images_out", "=", "torgb", "(", "x", ",", "2", ")", "\n", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "torgb", "(", "x", ",", "res", ")", "\n", "images_out", "=", "upscale2d", "(", "images_out", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "images_out", "=", "lerp_clip", "(", "img", ",", "images_out", ",", "lod_in", "-", "lod", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "grow", "(", "x", ",", "res", ",", "lod", ")", ":", "\n", "            ", "y", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "lambda", ":", "upscale2d", "(", "torgb", "(", "y", ",", "res", ")", ",", "2", "**", "lod", ")", "\n", "if", "res", ">", "2", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "upscale2d", "(", "lerp", "(", "torgb", "(", "y", ",", "res", ")", ",", "upscale2d", "(", "torgb", "(", "x", ",", "res", "-", "1", ")", ")", ",", "lod_in", "-", "lod", ")", ",", "2", "**", "lod", ")", ")", "\n", "if", "lod", ">", "0", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "y", ",", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "return", "img", "(", ")", "\n", "", "images_out", "=", "grow", "(", "combo_in", ",", "2", ",", "resolution_log2", "-", "2", ")", "\n", "\n", "", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "images_out", "=", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.networks.D_paper": [[234, 314], ["int", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "tensorflow.identity", "numpy.log2", "min", "tensorflow.get_variable", "networks.D_paper.fromrgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "def", "D_paper", "(", "\n", "images_in", ",", "# Input: Images [minibatch, channel, height, width].", "\n", "num_channels", "=", "1", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "32", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "True", ",", "# True = use fused conv2d + downscale2d, False = separate downscale2d layers.", "\n", "structure", "=", "None", ",", "# 'linear' = human-readable, 'recursive' = efficient, None = select automatically", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "if", "structure", "is", "None", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", "=", "leaky_relu", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "\n", "# Building blocks.", "\n", "def", "fromrgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB_lod%d'", "%", "(", "resolution_log2", "-", "res", ")", ")", ":", "\n", "            ", "return", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", ">=", "3", ":", "# 8x8 and up", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "if", "fused_scale", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "                        ", "x", "=", "act", "(", "apply_bias", "(", "conv2d_downscale2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                        ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "x", "=", "downscale2d", "(", "x", ")", "\n", "", "", "else", ":", "# 4x4", "\n", "                ", "if", "mbstd_group_size", ">", "1", ":", "\n", "                    ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense1'", ")", ":", "\n", "                    ", "x", "=", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "1", "+", "label_size", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "", "", "return", "x", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "img", "=", "images_in", "\n", "x", "=", "fromrgb", "(", "img", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "downscale2d", "(", "img", ")", "\n", "y", "=", "fromrgb", "(", "img", ",", "res", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "x", "=", "lerp_clip", "(", "x", ",", "y", ",", "lod_in", "-", "lod", ")", "\n", "", "", "combo_out", "=", "block", "(", "x", ",", "2", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "grow", "(", "res", ",", "lod", ")", ":", "\n", "            ", "x", "=", "lambda", ":", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "lod", ")", ",", "res", ")", "\n", "if", "lod", ">", "0", ":", "x", "=", "cset", "(", "x", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "x", "=", "block", "(", "x", "(", ")", ",", "res", ")", ";", "y", "=", "lambda", ":", "x", "\n", "if", "res", ">", "2", ":", "y", "=", "cset", "(", "y", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "lerp", "(", "x", ",", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "(", "lod", "+", "1", ")", ")", ",", "res", "-", "1", ")", ",", "lod_in", "-", "lod", ")", ")", "\n", "return", "y", "(", ")", "\n", "", "combo_out", "=", "grow", "(", "2", ",", "resolution_log2", "-", "2", ")", "\n", "\n", "", "assert", "combo_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "combo_out", "[", ":", ",", ":", "1", "]", ",", "name", "=", "'scores_out'", ")", "\n", "labels_out", "=", "tf", ".", "identity", "(", "combo_out", "[", ":", ",", "1", ":", "]", ",", "name", "=", "'labels_out'", ")", "\n", "return", "scores_out", ",", "labels_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.__init__": [[31, 46], ["os.path.join", "os.path.isdir", "os.path.basename", "print", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "tfrecord_dir", ",", "expected_images", ",", "print_progress", "=", "True", ",", "progress_interval", "=", "10", ")", ":", "\n", "        ", "self", ".", "tfrecord_dir", "=", "tfrecord_dir", "\n", "self", ".", "tfr_prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tfrecord_dir", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "self", ".", "expected_images", "=", "expected_images", "\n", "self", ".", "cur_images", "=", "0", "\n", "self", ".", "shape", "=", "None", "\n", "self", ".", "resolution_log2", "=", "None", "\n", "self", ".", "tfr_writers", "=", "[", "]", "\n", "self", ".", "print_progress", "=", "print_progress", "\n", "self", ".", "progress_interval", "=", "progress_interval", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'Creating dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "tfrecord_dir", ")", "\n", "", "assert", "(", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.close": [[47, 56], ["print", "tfr_writer.close", "print", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Flushing data...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "for", "tfr_writer", "in", "self", ".", "tfr_writers", ":", "\n", "            ", "tfr_writer", ".", "close", "(", ")", "\n", "", "self", ".", "tfr_writers", "=", "[", "]", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "''", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "print", "(", "'Added %d images.'", "%", "self", ".", "cur_images", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.choose_shuffled_order": [[57, 61], ["numpy.arange", "numpy.random.RandomState().shuffle", "numpy.random.RandomState"], "methods", ["None"], ["", "", "def", "choose_shuffled_order", "(", "self", ")", ":", "# Note: Images and labels must be added in shuffled order.", "\n", "        ", "order", "=", "np", ".", "arange", "(", "self", ".", "expected_images", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "123", ")", ".", "shuffle", "(", "order", ")", "\n", "return", "order", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.add_image": [[62, 86], ["enumerate", "print", "int", "tensorflow.python_io.TFRecordOptions", "range", "numpy.rint().clip().astype", "tensorflow.train.Example", "tfr_writer.write", "numpy.log2", "dataset_tool.TFRecordExporter.tfr_writers.append", "img.astype.astype.astype", "tensorflow.train.Example.SerializeToString", "tensorflow.python_io.TFRecordWriter", "numpy.rint().clip", "tensorflow.train.Features", "numpy.rint", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Int64List", "tensorflow.train.BytesList", "numpy.rint().clip().astype.tostring"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "def", "add_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", "and", "self", ".", "cur_images", "%", "self", ".", "progress_interval", "==", "0", ":", "\n", "            ", "print", "(", "'%d / %d\\r'", "%", "(", "self", ".", "cur_images", ",", "self", ".", "expected_images", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "if", "self", ".", "shape", "is", "None", ":", "\n", "            ", "self", ".", "shape", "=", "img", ".", "shape", "\n", "self", ".", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "shape", "[", "1", "]", ")", ")", "\n", "assert", "self", ".", "shape", "[", "0", "]", "in", "[", "1", ",", "3", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "self", ".", "shape", "[", "2", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "2", "**", "self", ".", "resolution_log2", "\n", "tfr_opt", "=", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "tf", ".", "python_io", ".", "TFRecordCompressionType", ".", "NONE", ")", "\n", "for", "lod", "in", "range", "(", "self", ".", "resolution_log2", "-", "1", ")", ":", "\n", "                ", "tfr_file", "=", "self", ".", "tfr_prefix", "+", "'-r%02d.tfrecords'", "%", "(", "self", ".", "resolution_log2", "-", "lod", ")", "\n", "self", ".", "tfr_writers", ".", "append", "(", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfr_file", ",", "tfr_opt", ")", ")", "\n", "", "", "assert", "img", ".", "shape", "==", "self", ".", "shape", "\n", "for", "lod", ",", "tfr_writer", "in", "enumerate", "(", "self", ".", "tfr_writers", ")", ":", "\n", "            ", "if", "lod", ":", "\n", "                ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", ")", "*", "0.25", "\n", "", "quant", "=", "np", ".", "rint", "(", "img", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ex", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'shape'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "quant", ".", "shape", ")", ")", ",", "\n", "'data'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "quant", ".", "tostring", "(", ")", "]", ")", ")", "}", ")", ")", "\n", "tfr_writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "", "self", ".", "cur_images", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.add_labels": [[87, 93], ["print", "open", "numpy.save", "labels.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "add_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Saving labels...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "assert", "labels", ".", "shape", "[", "0", "]", "==", "self", ".", "cur_images", "\n", "with", "open", "(", "self", ".", "tfr_prefix", "+", "'-rxx.labels'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.__enter__": [[94, 96], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.TFRecordExporter.__exit__": [[97, 99], ["dataset_tool.TFRecordExporter.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ExceptionInfo.__init__": [[103, 106], ["traceback.format_exc", "sys.exc_info"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "value", "=", "sys", ".", "exc_info", "(", ")", "[", "1", "]", "\n", "self", ".", "traceback", "=", "traceback", ".", "format_exc", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.WorkerThread.__init__": [[110, 113], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["    ", "def", "__init__", "(", "self", ",", "task_queue", ")", ":", "\n", "        ", "threading", ".", "Thread", ".", "__init__", "(", "self", ")", "\n", "self", ".", "task_queue", "=", "task_queue", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.WorkerThread.run": [[114, 124], ["dataset_tool.WorkerThread.task_queue.get", "result_queue.put", "func", "dataset_tool.ExceptionInfo"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "func", ",", "args", ",", "result_queue", "=", "self", ".", "task_queue", ".", "get", "(", ")", "\n", "if", "func", "is", "None", ":", "\n", "                ", "break", "\n", "", "try", ":", "\n", "                ", "result", "=", "func", "(", "*", "args", ")", "\n", "", "except", ":", "\n", "                ", "result", "=", "ExceptionInfo", "(", ")", "\n", "", "result_queue", ".", "put", "(", "(", "result", ",", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.__init__": [[128, 137], ["six.Queue", "dict", "range", "dataset_tool.WorkerThread", "WorkerThread.start"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start"], ["    ", "def", "__init__", "(", "self", ",", "num_threads", ")", ":", "\n", "        ", "assert", "num_threads", ">=", "1", "\n", "self", ".", "task_queue", "=", "Queue", ".", "Queue", "(", ")", "\n", "self", ".", "result_queues", "=", "dict", "(", ")", "\n", "self", ".", "num_threads", "=", "num_threads", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "thread", "=", "WorkerThread", "(", "self", ".", "task_queue", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.add_task": [[138, 143], ["hasattr", "dataset_tool.ThreadPool.task_queue.put", "six.Queue"], "methods", ["None"], ["", "", "def", "add_task", "(", "self", ",", "func", ",", "args", "=", "(", ")", ")", ":", "\n", "        ", "assert", "hasattr", "(", "func", ",", "'__call__'", ")", "# must be a function", "\n", "if", "func", "not", "in", "self", ".", "result_queues", ":", "\n", "            ", "self", ".", "result_queues", "[", "func", "]", "=", "Queue", ".", "Queue", "(", ")", "\n", "", "self", ".", "task_queue", ".", "put", "(", "(", "func", ",", "args", ",", "self", ".", "result_queues", "[", "func", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.get_result": [[144, 150], ["dataset_tool.ThreadPool.result_queues[].get", "isinstance", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["", "def", "get_result", "(", "self", ",", "func", ")", ":", "# returns (result, args)", "\n", "        ", "result", ",", "args", "=", "self", ".", "result_queues", "[", "func", "]", ".", "get", "(", ")", "\n", "if", "isinstance", "(", "result", ",", "ExceptionInfo", ")", ":", "\n", "            ", "print", "(", "'\\n\\nWorker thread caught an exception:\\n'", "+", "result", ".", "traceback", ")", "\n", "raise", "result", ".", "value", "\n", "", "return", "result", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.finish": [[151, 154], ["range", "dataset_tool.ThreadPool.task_queue.put"], "methods", ["None"], ["", "def", "finish", "(", "self", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "self", ".", "task_queue", ".", "put", "(", "(", "None", ",", "(", ")", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.__enter__": [[155, 157], ["None"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "# for 'with' statement", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.__exit__": [[158, 160], ["dataset_tool.ThreadPool.finish"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.finish"], ["", "def", "__exit__", "(", "self", ",", "*", "excinfo", ")", ":", "\n", "        ", "self", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.ThreadPool.process_items_concurrently": [[161, 186], ["enumerate", "process_func", "dataset_tool.ThreadPool.get_result", "pre_func", "results.append", "dataset_tool.ThreadPool.add_task", "len", "dataset_tool.ThreadPool.process_items_concurrently.retire_result"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.get_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.add_task"], ["", "def", "process_items_concurrently", "(", "self", ",", "item_iterator", ",", "process_func", "=", "lambda", "x", ":", "x", ",", "pre_func", "=", "lambda", "x", ":", "x", ",", "post_func", "=", "lambda", "x", ":", "x", ",", "max_items_in_flight", "=", "None", ")", ":", "\n", "        ", "if", "max_items_in_flight", "is", "None", ":", "max_items_in_flight", "=", "self", ".", "num_threads", "*", "4", "\n", "assert", "max_items_in_flight", ">=", "1", "\n", "results", "=", "[", "]", "\n", "retire_idx", "=", "[", "0", "]", "\n", "\n", "def", "task_func", "(", "prepared", ",", "idx", ")", ":", "\n", "            ", "return", "process_func", "(", "prepared", ")", "\n", "\n", "", "def", "retire_result", "(", ")", ":", "\n", "            ", "processed", ",", "(", "prepared", ",", "idx", ")", "=", "self", ".", "get_result", "(", "task_func", ")", "\n", "results", "[", "idx", "]", "=", "processed", "\n", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", "and", "results", "[", "retire_idx", "[", "0", "]", "]", "is", "not", "None", ":", "\n", "                ", "yield", "post_func", "(", "results", "[", "retire_idx", "[", "0", "]", "]", ")", "\n", "results", "[", "retire_idx", "[", "0", "]", "]", "=", "None", "\n", "retire_idx", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "for", "idx", ",", "item", "in", "enumerate", "(", "item_iterator", ")", ":", "\n", "            ", "prepared", "=", "pre_func", "(", "item", ")", "\n", "results", ".", "append", "(", "None", ")", "\n", "self", ".", "add_task", "(", "func", "=", "task_func", ",", "args", "=", "(", "prepared", ",", "idx", ")", ")", "\n", "while", "retire_idx", "[", "0", "]", "<", "idx", "-", "max_items_in_flight", "+", "2", ":", "\n", "                ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "", "", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", ":", "\n", "            ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.error": [[24, 27], ["print", "exit"], "function", ["None"], ["def", "error", "(", "msg", ")", ":", "\n", "    ", "print", "(", "'Error: '", "+", "msg", ")", "\n", "exit", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.display": [[189, 212], ["print", "tfutil.init_tf", "dataset.TFRecordDataset", "tfutil.init_uninited_vars", "print", "print", "cv2.imshow", "dataset.TFRecordDataset.get_minibatch_np", "print", "cv2.namedWindow", "print", "cv2.waitKey", "images[].transpose", "labels[].tolist"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["", "", "", "def", "display", "(", "tfrecord_dir", ")", ":", "\n", "    ", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n", "tfutil", ".", "init_tf", "(", "{", "'gpu_options.allow_growth'", ":", "True", "}", ")", "\n", "dset", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir", ",", "max_label_size", "=", "'full'", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "idx", "==", "0", ":", "\n", "            ", "print", "(", "'Displaying images'", ")", "\n", "import", "cv2", "# pip install opencv-python", "\n", "cv2", ".", "namedWindow", "(", "'dataset_tool'", ")", "\n", "print", "(", "'Press SPACE or ENTER to advance, ESC to exit'", ")", "\n", "", "print", "(", "'\\nidx = %-8d\\nlabel = %s'", "%", "(", "idx", ",", "labels", "[", "0", "]", ".", "tolist", "(", ")", ")", ")", "\n", "cv2", ".", "imshow", "(", "'dataset_tool'", ",", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "# CHW => HWC, RGB => BGR", "\n", "idx", "+=", "1", "\n", "if", "cv2", ".", "waitKey", "(", ")", "==", "27", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "'\\nDisplayed %d images.'", "%", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.extract": [[215, 239], ["print", "tfutil.init_tf", "dataset.TFRecordDataset", "tfutil.init_uninited_vars", "print", "print", "os.path.isdir", "os.makedirs", "PIL.Image.fromarray.save", "print", "dataset.TFRecordDataset.get_minibatch_np", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.join", "images[].transpose"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["", "def", "extract", "(", "tfrecord_dir", ",", "output_dir", ")", ":", "\n", "    ", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n", "tfutil", ".", "init_tf", "(", "{", "'gpu_options.allow_growth'", ":", "True", "}", ")", "\n", "dset", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir", ",", "max_label_size", "=", "0", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Extracting images to \"%s\"'", "%", "output_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", "[", "0", "]", ",", "'L'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "'RGB'", ")", "\n", "", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'img%08d.png'", "%", "idx", ")", ")", "\n", "idx", "+=", "1", "\n", "", "print", "(", "'Extracted %d images.'", "%", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.compare": [[242, 282], ["print", "tfutil.init_tf", "dataset.TFRecordDataset", "print", "dataset.TFRecordDataset", "tfutil.init_uninited_vars", "print", "print", "print", "print", "dataset.TFRecordDataset.get_minibatch_np", "dataset.TFRecordDataset.get_minibatch_np", "numpy.all", "print", "numpy.all", "print", "print"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["", "def", "compare", "(", "tfrecord_dir_a", ",", "tfrecord_dir_b", ",", "ignore_labels", ")", ":", "\n", "    ", "max_label_size", "=", "0", "if", "ignore_labels", "else", "'full'", "\n", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir_a", ")", "\n", "tfutil", ".", "init_tf", "(", "{", "'gpu_options.allow_growth'", ":", "True", "}", ")", "\n", "dset_a", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_a", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir_b", ")", "\n", "dset_b", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_b", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Comparing datasets'", ")", "\n", "idx", "=", "0", "\n", "identical_images", "=", "0", "\n", "identical_labels", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "dset_a", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "None", ",", "None", "\n", "", "try", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "dset_b", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "None", ",", "None", "\n", "", "if", "images_a", "is", "None", "or", "images_b", "is", "None", ":", "\n", "            ", "if", "images_a", "is", "not", "None", "or", "images_b", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Datasets contain different number of images'", ")", "\n", "", "break", "\n", "", "if", "images_a", ".", "shape", "==", "images_b", ".", "shape", "and", "np", ".", "all", "(", "images_a", "==", "images_b", ")", ":", "\n", "            ", "identical_images", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Image %d is different'", "%", "idx", ")", "\n", "", "if", "labels_a", ".", "shape", "==", "labels_b", ".", "shape", "and", "np", ".", "all", "(", "labels_a", "==", "labels_b", ")", ":", "\n", "            ", "identical_labels", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Label %d is different'", "%", "idx", ")", "\n", "", "idx", "+=", "1", "\n", "", "print", "(", "'Identical images: %d / %d'", "%", "(", "identical_images", ",", "idx", ")", ")", "\n", "if", "not", "ignore_labels", ":", "\n", "        ", "print", "(", "'Identical labels: %d / %d'", "%", "(", "identical_labels", ",", "idx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_mnist": [[285, 306], ["print", "np.frombuffer.reshape", "numpy.pad", "numpy.zeros", "gzip.open", "numpy.frombuffer", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "file.read", "os.path.join", "file.read", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "def", "create_mnist", "(", "tfrecord_dir", ",", "mnist_dir", ")", ":", "\n", "    ", "print", "(", "'Loading MNIST from \"%s\"'", "%", "mnist_dir", ")", "\n", "import", "gzip", "\n", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-images-idx3-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-labels-idx1-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "labels", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "1", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "60000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_mnistrgb": [[309, 323], ["print", "np.frombuffer.reshape", "numpy.pad", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "numpy.random.RandomState", "range", "os.path.join", "file.read", "numpy.min", "numpy.max", "tfr.add_image", "np.random.RandomState.randint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "def", "create_mnistrgb", "(", "tfrecord_dir", ",", "mnist_dir", ",", "num_images", "=", "1000000", ",", "random_seed", "=", "123", ")", ":", "\n", "    ", "print", "(", "'Loading MNIST from \"%s\"'", "%", "mnist_dir", ")", "\n", "import", "gzip", "\n", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-images-idx3-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "num_images", ")", "as", "tfr", ":", "\n", "        ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "for", "idx", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "rnd", ".", "randint", "(", "images", ".", "shape", "[", "0", "]", ",", "size", "=", "3", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_cifar10": [[326, 350], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "data[].reshape", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "", "def", "create_cifar10", "(", "tfrecord_dir", ",", "cifar10_dir", ")", ":", "\n", "    ", "print", "(", "'Loading CIFAR-10 from \"%s\"'", "%", "cifar10_dir", ")", "\n", "import", "pickle", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cifar10_dir", ",", "'data_batch_%d'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "labels", ".", "append", "(", "data", "[", "'labels'", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_cifar100": [[353, 372], ["print", "data[].reshape", "numpy.array", "numpy.zeros", "open", "pickle.load", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "def", "create_cifar100", "(", "tfrecord_dir", ",", "cifar100_dir", ")", ":", "\n", "    ", "print", "(", "'Loading CIFAR-100 from \"%s\"'", "%", "cifar100_dir", ")", "\n", "import", "pickle", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cifar100_dir", ",", "'train'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", "=", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "labels", "=", "np", ".", "array", "(", "data", "[", "'fine_labels'", "]", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "99", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_svhn": [[375, 399], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "def", "create_svhn", "(", "tfrecord_dir", ",", "svhn_dir", ")", ":", "\n", "    ", "print", "(", "'Loading SVHN from \"%s\"'", "%", "svhn_dir", ")", "\n", "import", "pickle", "\n", "images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "svhn_dir", ",", "'train_%d.pkl'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "data", "[", "1", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "73257", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "73257", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_lsun": [[402, 432], ["print", "lmdb.open().begin", "txn.stat", "dataset_tool.TFRecordExporter", "enumerate", "lmdb.open", "txn.cursor", "numpy.min", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "np.asarray.transpose", "tfr.add_image", "cv2.imdecode", "print", "numpy.fromstring", "IOError", "numpy.asarray", "PIL.Image.open", "sys.exc_info", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "def", "create_lsun", "(", "tfrecord_dir", ",", "lmdb_dir", ",", "resolution", "=", "256", ",", "max_images", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Loading LSUN dataset from \"%s\"'", "%", "lmdb_dir", ")", "\n", "import", "lmdb", "# pip install lmdb", "\n", "import", "cv2", "# pip install opencv-python", "\n", "import", "io", "\n", "with", "lmdb", ".", "open", "(", "lmdb_dir", ",", "readonly", "=", "True", ")", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "total_images", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "if", "max_images", "is", "None", ":", "\n", "            ", "max_images", "=", "total_images", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "max_images", ")", "as", "tfr", ":", "\n", "            ", "for", "idx", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "txn", ".", "cursor", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "value", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "1", ")", "\n", "if", "img", "is", "None", ":", "\n", "                            ", "raise", "IOError", "(", "'cv2.imdecode failed'", ")", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR => RGB", "\n", "", "except", "IOError", ":", "\n", "                        ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "value", ")", ")", ")", "\n", "", "crop", "=", "np", ".", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "img", "=", "img", "[", "(", "img", ".", "shape", "[", "0", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "0", "]", "+", "crop", ")", "//", "2", ",", "(", "img", ".", "shape", "[", "1", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "1", "]", "+", "crop", ")", "//", "2", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "resolution", ",", "resolution", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", "\n", "", "if", "tfr", ".", "cur_images", "==", "max_images", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_celeba": [[435, 451], ["print", "os.path.join", "sorted", "glob.glob", "len", "dataset_tool.error", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "len", "numpy.asarray", "img.transpose.transpose", "tfr.add_image", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["", "", "", "", "", "def", "create_celeba", "(", "tfrecord_dir", ",", "celeba_dir", ",", "cx", "=", "89", ",", "cy", "=", "121", ")", ":", "\n", "    ", "print", "(", "'Loading CelebA from \"%s\"'", "%", "celeba_dir", ")", "\n", "glob_pattern", "=", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_align_celeba_png'", ",", "'*.png'", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "glob_pattern", ")", ")", "\n", "expected_images", "=", "202599", "\n", "if", "len", "(", "image_filenames", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "assert", "img", ".", "shape", "==", "(", "218", ",", "178", ",", "3", ")", "\n", "img", "=", "img", "[", "cy", "-", "64", ":", "cy", "+", "64", ",", "cx", "-", "64", ":", "cx", "+", "64", "]", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_celebahq": [[454, 595], ["print", "print", "numpy.array", "numpy.array", "hashlib.md5", "hashlib.md5.update", "len", "dataset_tool.error", "open", "numpy.float32().reshape", "len", "dataset_tool.error", "open", "dict", "enumerate", "getattr", "dataset_tool.error", "PIL.Image.open", "PIL.Image.fromarray.tobytes", "hashlib.md5.hexdigest", "dataset_tool.error", "numpy.array", "os.path.join", "PIL.Image.open", "numpy.hypot", "max", "dataset_tool.create_celebahq.rot90"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error"], ["", "", "", "def", "create_celebahq", "(", "tfrecord_dir", ",", "celeba_dir", ",", "delta_dir", ",", "num_threads", "=", "4", ",", "num_tasks", "=", "100", ")", ":", "\n", "    ", "print", "(", "'Loading CelebA from \"%s\"'", "%", "celeba_dir", ")", "\n", "expected_images", "=", "202599", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'*.jpg'", ")", ")", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'Anno'", ",", "'list_landmarks_celeba.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "landmarks", "=", "[", "[", "float", "(", "value", ")", "for", "value", "in", "line", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "line", "in", "file", ".", "readlines", "(", ")", "[", "2", ":", "]", "]", "\n", "landmarks", "=", "np", ".", "float32", "(", "landmarks", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "\n", "", "print", "(", "'Loading CelebA-HQ deltas from \"%s\"'", "%", "delta_dir", ")", "\n", "import", "scipy", ".", "ndimage", "\n", "import", "hashlib", "\n", "import", "bz2", "\n", "import", "zipfile", "\n", "import", "base64", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", "\n", "import", "cryptography", ".", "hazmat", ".", "backends", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", "\n", "import", "cryptography", ".", "fernet", "\n", "expected_zips", "=", "30", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'delta*.zip'", ")", ")", ")", "!=", "expected_zips", ":", "\n", "        ", "error", "(", "'Expected to find %d zips'", "%", "expected_zips", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'image_list.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "file", "]", "\n", "fields", "=", "dict", "(", ")", "\n", "for", "idx", ",", "field", "in", "enumerate", "(", "lines", "[", "0", "]", ")", ":", "\n", "            ", "type", "=", "int", "if", "field", ".", "endswith", "(", "'idx'", ")", "else", "str", "\n", "fields", "[", "field", "]", "=", "[", "type", "(", "line", "[", "idx", "]", ")", "for", "line", "in", "lines", "[", "1", ":", "]", "]", "\n", "", "", "indices", "=", "np", ".", "array", "(", "fields", "[", "'idx'", "]", ")", "\n", "\n", "# Must use pillow version 3.1.1 for everything to work correctly.", "\n", "if", "getattr", "(", "PIL", ",", "'PILLOW_VERSION'", ",", "''", ")", "!=", "'3.1.1'", ":", "\n", "        ", "error", "(", "'create_celebahq requires pillow version 3.1.1'", ")", "# conda install pillow=3.1.1", "\n", "\n", "# Must use libjpeg version 8d for everything to work correctly.", "\n", "", "img", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'000001.jpg'", ")", ")", ")", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "if", "md5", ".", "hexdigest", "(", ")", "!=", "'9cad8178d6cb0196b36f7b34bc5eb6d3'", ":", "\n", "        ", "error", "(", "'create_celebahq requires libjpeg version 8d'", ")", "# conda install jpeg=8d", "\n", "\n", "", "def", "rot90", "(", "v", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", "]", ")", "\n", "\n", "", "def", "process_func", "(", "idx", ")", ":", "\n", "# Load original image.", "\n", "        ", "orig_idx", "=", "fields", "[", "'orig_idx'", "]", "[", "idx", "]", "\n", "orig_file", "=", "fields", "[", "'orig_file'", "]", "[", "idx", "]", "\n", "orig_path", "=", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "orig_file", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "orig_path", ")", "\n", "\n", "# Choose oriented crop rectangle.", "\n", "lm", "=", "landmarks", "[", "orig_idx", "]", "\n", "eye_avg", "=", "(", "lm", "[", "0", "]", "+", "lm", "[", "1", "]", ")", "*", "0.5", "+", "0.5", "\n", "mouth_avg", "=", "(", "lm", "[", "3", "]", "+", "lm", "[", "4", "]", ")", "*", "0.5", "+", "0.5", "\n", "eye_to_eye", "=", "lm", "[", "1", "]", "-", "lm", "[", "0", "]", "\n", "eye_to_mouth", "=", "mouth_avg", "-", "eye_avg", "\n", "x", "=", "eye_to_eye", "-", "rot90", "(", "eye_to_mouth", ")", "\n", "x", "/=", "np", ".", "hypot", "(", "*", "x", ")", "\n", "x", "*=", "max", "(", "np", ".", "hypot", "(", "*", "eye_to_eye", ")", "*", "2.0", ",", "np", ".", "hypot", "(", "*", "eye_to_mouth", ")", "*", "1.8", ")", "\n", "y", "=", "rot90", "(", "x", ")", "\n", "c", "=", "eye_avg", "+", "eye_to_mouth", "*", "0.1", "\n", "quad", "=", "np", ".", "stack", "(", "[", "c", "-", "x", "-", "y", ",", "c", "-", "x", "+", "y", ",", "c", "+", "x", "+", "y", ",", "c", "+", "x", "-", "y", "]", ")", "\n", "zoom", "=", "1024", "/", "(", "np", ".", "hypot", "(", "*", "x", ")", "*", "2", ")", "\n", "\n", "# Shrink.", "\n", "shrink", "=", "int", "(", "np", ".", "floor", "(", "0.5", "/", "zoom", ")", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "            ", "size", "=", "(", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "0", "]", ")", "/", "shrink", ")", ")", ",", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "/", "shrink", ")", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "size", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "/=", "shrink", "\n", "zoom", "*=", "shrink", "\n", "\n", "# Crop.", "\n", "", "border", "=", "max", "(", "int", "(", "np", ".", "round", "(", "1024", "*", "0.1", "/", "zoom", ")", ")", ",", "3", ")", "\n", "crop", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "crop", "=", "(", "max", "(", "crop", "[", "0", "]", "-", "border", ",", "0", ")", ",", "max", "(", "crop", "[", "1", "]", "-", "border", ",", "0", ")", ",", "min", "(", "crop", "[", "2", "]", "+", "border", ",", "img", ".", "size", "[", "0", "]", ")", ",", "min", "(", "crop", "[", "3", "]", "+", "border", ",", "img", ".", "size", "[", "1", "]", ")", ")", "\n", "if", "crop", "[", "2", "]", "-", "crop", "[", "0", "]", "<", "img", ".", "size", "[", "0", "]", "or", "crop", "[", "3", "]", "-", "crop", "[", "1", "]", "<", "img", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "quad", "-=", "crop", "[", "0", ":", "2", "]", "\n", "\n", "# Simulate super-resolution.", "\n", "", "superres", "=", "int", "(", "np", ".", "exp2", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "zoom", ")", ")", ")", ")", "\n", "if", "superres", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "img", ".", "size", "[", "0", "]", "*", "superres", ",", "img", ".", "size", "[", "1", "]", "*", "superres", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "*=", "superres", "\n", "zoom", "/=", "superres", "\n", "\n", "# Pad.", "\n", "", "pad", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n", "pad", "=", "(", "max", "(", "-", "pad", "[", "0", "]", "+", "border", ",", "0", ")", ",", "max", "(", "-", "pad", "[", "1", "]", "+", "border", ",", "0", ")", ",", "max", "(", "pad", "[", "2", "]", "-", "img", ".", "size", "[", "0", "]", "+", "border", ",", "0", ")", ",", "max", "(", "pad", "[", "3", "]", "-", "img", ".", "size", "[", "1", "]", "+", "border", ",", "0", ")", ")", "\n", "if", "max", "(", "pad", ")", ">", "border", "-", "4", ":", "\n", "            ", "pad", "=", "np", ".", "maximum", "(", "pad", ",", "int", "(", "np", ".", "round", "(", "1024", "*", "0.3", "/", "zoom", ")", ")", ")", "\n", "img", "=", "np", ".", "pad", "(", "np", ".", "float32", "(", "img", ")", ",", "(", "(", "pad", "[", "1", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "y", ",", "x", ",", "_", "=", "np", ".", "mgrid", "[", ":", "h", ",", ":", "w", ",", ":", "1", "]", "\n", "mask", "=", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "minimum", "(", "np", ".", "float32", "(", "x", ")", "/", "pad", "[", "0", "]", ",", "np", ".", "float32", "(", "y", ")", "/", "pad", "[", "1", "]", ")", ",", "np", ".", "minimum", "(", "np", ".", "float32", "(", "w", "-", "1", "-", "x", ")", "/", "pad", "[", "2", "]", ",", "np", ".", "float32", "(", "h", "-", "1", "-", "y", ")", "/", "pad", "[", "3", "]", ")", ")", "\n", "blur", "=", "1024", "*", "0.02", "/", "zoom", "\n", "img", "+=", "(", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "img", ",", "[", "blur", ",", "blur", ",", "0", "]", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", "*", "3.0", "+", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "img", "+=", "(", "np", ".", "median", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np", ".", "round", "(", "img", ")", ",", "0", ",", "255", ")", ")", ",", "'RGB'", ")", "\n", "quad", "+=", "pad", "[", "0", ":", "2", "]", "\n", "\n", "# Transform.", "\n", "", "img", "=", "img", ".", "transform", "(", "(", "4096", ",", "4096", ")", ",", "PIL", ".", "Image", ".", "QUAD", ",", "(", "quad", "+", "0.5", ")", ".", "flatten", "(", ")", ",", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "1024", ",", "1024", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'proc_md5'", "]", "[", "idx", "]", "\n", "\n", "# Load delta image and original JPG.", "\n", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'deltas%05d.zip'", "%", "(", "idx", "-", "idx", "%", "1000", ")", ")", ",", "'r'", ")", "as", "zip", ":", "\n", "            ", "delta_bytes", "=", "zip", ".", "read", "(", "'delta%05d.dat'", "%", "idx", ")", "\n", "", "with", "open", "(", "orig_path", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "orig_bytes", "=", "file", ".", "read", "(", ")", "\n", "\n", "# Decrypt delta image, using original JPG data as decryption key.", "\n", "", "algorithm", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", ".", "SHA256", "(", ")", "\n", "backend", "=", "cryptography", ".", "hazmat", ".", "backends", ".", "default_backend", "(", ")", "\n", "salt", "=", "bytes", "(", "orig_file", ",", "'ascii'", ")", "\n", "kdf", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", ".", "PBKDF2HMAC", "(", "algorithm", "=", "algorithm", ",", "length", "=", "32", ",", "salt", "=", "salt", ",", "iterations", "=", "100000", ",", "backend", "=", "backend", ")", "\n", "key", "=", "base64", ".", "urlsafe_b64encode", "(", "kdf", ".", "derive", "(", "orig_bytes", ")", ")", "\n", "delta", "=", "np", ".", "frombuffer", "(", "bz2", ".", "decompress", "(", "cryptography", ".", "fernet", ".", "Fernet", "(", "key", ")", ".", "decrypt", "(", "delta_bytes", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "3", ",", "1024", ",", "1024", ")", "\n", "\n", "# Apply delta image.", "\n", "img", "=", "img", "+", "delta", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'final_md5'", "]", "[", "idx", "]", "\n", "return", "img", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "indices", ".", "size", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "with", "ThreadPool", "(", "num_threads", ")", "as", "pool", ":", "\n", "            ", "for", "img", "in", "pool", ".", "process_items_concurrently", "(", "indices", "[", "order", "]", ".", "tolist", "(", ")", ",", "process_func", "=", "process_func", ",", "max_items_in_flight", "=", "num_tasks", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_from_images": [[598, 623], ["print", "sorted", "numpy.asarray", "glob.glob", "len", "dataset_tool.error", "PIL.Image.open", "dataset_tool.error", "dataset_tool.error", "dataset_tool.error", "dataset_tool.TFRecordExporter", "range", "os.path.join", "int", "len", "tfr.choose_shuffled_order", "numpy.arange", "numpy.asarray", "tfr.add_image", "numpy.floor", "len", "PIL.Image.open", "img.transpose.transpose", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "", "", "", "def", "create_from_images", "(", "tfrecord_dir", ",", "image_dir", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading images from \"%s\"'", "%", "image_dir", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'*'", ")", ")", ")", "\n", "if", "len", "(", "image_filenames", ")", "==", "0", ":", "\n", "        ", "error", "(", "'No input images found'", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "0", "]", ")", ")", "\n", "resolution", "=", "img", ".", "shape", "[", "0", "]", "\n", "channels", "=", "img", ".", "shape", "[", "2", "]", "if", "img", ".", "ndim", "==", "3", "else", "1", "\n", "if", "img", ".", "shape", "[", "1", "]", "!=", "resolution", ":", "\n", "        ", "error", "(", "'Input images must have the same width and height'", ")", "\n", "", "if", "resolution", "!=", "2", "**", "int", "(", "np", ".", "floor", "(", "np", ".", "log2", "(", "resolution", ")", ")", ")", ":", "\n", "        ", "error", "(", "'Input image resolution must be a power-of-two'", ")", "\n", "", "if", "channels", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "        ", "error", "(", "'Input images must be stored as RGB or grayscale'", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "len", "(", "image_filenames", ")", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "if", "channels", "==", "1", ":", "\n", "                ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "# HW => CHW", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.create_from_hdf5": [[626, 638], ["print", "h5py.File", "max", "dataset_tool.TFRecordExporter", "range", "os.path.isfile", "tfr.choose_shuffled_order", "numpy.arange", "tfr.add_image", "tfr.add_labels", "hdf5_file.items", "key.startswith", "os.path.splitext", "numpy.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["", "", "", "def", "create_from_hdf5", "(", "tfrecord_dir", ",", "hdf5_filename", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading HDF5 archive from \"%s\"'", "%", "hdf5_filename", ")", "\n", "import", "h5py", "# conda install h5py", "\n", "with", "h5py", ".", "File", "(", "hdf5_filename", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "        ", "hdf5_data", "=", "max", "(", "[", "value", "for", "key", ",", "value", "in", "hdf5_file", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "'data'", ")", "]", ",", "key", "=", "lambda", "lod", ":", "lod", ".", "shape", "[", "3", "]", ")", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "hdf5_data", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "            ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "hdf5_data", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "hdf5_data", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "npy_filename", "=", "os", ".", "path", ".", "splitext", "(", "hdf5_filename", ")", "[", "0", "]", "+", "'-labels.npy'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "npy_filename", ")", ":", "\n", "                ", "tfr", ".", "add_labels", "(", "np", ".", "load", "(", "npy_filename", ")", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset_tool.execute_cmdline": [[641, 734], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "dataset_tool.execute_cmdline.add_command"], "function", ["None"], ["", "", "", "", "def", "execute_cmdline", "(", "argv", ")", ":", "\n", "    ", "prog", "=", "argv", "[", "0", "]", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "prog", "=", "prog", ",", "\n", "description", "=", "'Tool for creating, extracting, and visualizing Progressive GAN datasets.'", ",", "\n", "epilog", "=", "'Type \"%s <command> -h\" for more information.'", "%", "prog", ")", "\n", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'command'", ")", "\n", "subparsers", ".", "required", "=", "True", "\n", "def", "add_command", "(", "cmd", ",", "desc", ",", "example", "=", "None", ")", ":", "\n", "        ", "epilog", "=", "'Example: %s %s'", "%", "(", "prog", ",", "example", ")", "if", "example", "is", "not", "None", "else", "None", "\n", "return", "subparsers", ".", "add_parser", "(", "cmd", ",", "description", "=", "desc", ",", "help", "=", "desc", ",", "epilog", "=", "epilog", ")", "\n", "\n", "", "p", "=", "add_command", "(", "'display'", ",", "'Display images in dataset.'", ",", "\n", "'display datasets/mnist'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'Directory containing dataset'", ")", "\n", "\n", "p", "=", "add_command", "(", "'extract'", ",", "'Extract images from dataset.'", ",", "\n", "'extract datasets/mnist mnist-images'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'Directory containing dataset'", ")", "\n", "p", ".", "add_argument", "(", "'output_dir'", ",", "help", "=", "'Directory to extract the images into'", ")", "\n", "\n", "p", "=", "add_command", "(", "'compare'", ",", "'Compare two datasets.'", ",", "\n", "'compare datasets/mydataset datasets/mnist'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir_a'", ",", "help", "=", "'Directory containing first dataset'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir_b'", ",", "help", "=", "'Directory containing second dataset'", ")", "\n", "p", ".", "add_argument", "(", "'--ignore_labels'", ",", "help", "=", "'Ignore labels (default: 0)'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_mnist'", ",", "'Create dataset for MNIST.'", ",", "\n", "'create_mnist datasets/mnist ~/downloads/mnist'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'mnist_dir'", ",", "help", "=", "'Directory containing MNIST'", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_mnistrgb'", ",", "'Create dataset for MNIST-RGB.'", ",", "\n", "'create_mnistrgb datasets/mnistrgb ~/downloads/mnist'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'mnist_dir'", ",", "help", "=", "'Directory containing MNIST'", ")", "\n", "p", ".", "add_argument", "(", "'--num_images'", ",", "help", "=", "'Number of composite images to create (default: 1000000)'", ",", "type", "=", "int", ",", "default", "=", "1000000", ")", "\n", "p", ".", "add_argument", "(", "'--random_seed'", ",", "help", "=", "'Random seed (default: 123)'", ",", "type", "=", "int", ",", "default", "=", "123", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_cifar10'", ",", "'Create dataset for CIFAR-10.'", ",", "\n", "'create_cifar10 datasets/cifar10 ~/downloads/cifar10'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'cifar10_dir'", ",", "help", "=", "'Directory containing CIFAR-10'", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_cifar100'", ",", "'Create dataset for CIFAR-100.'", ",", "\n", "'create_cifar100 datasets/cifar100 ~/downloads/cifar100'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'cifar100_dir'", ",", "help", "=", "'Directory containing CIFAR-100'", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_svhn'", ",", "'Create dataset for SVHN.'", ",", "\n", "'create_svhn datasets/svhn ~/downloads/svhn'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'svhn_dir'", ",", "help", "=", "'Directory containing SVHN'", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_lsun'", ",", "'Create dataset for single LSUN category.'", ",", "\n", "'create_lsun datasets/lsun-car-100k ~/downloads/lsun/car_lmdb --resolution 256 --max_images 100000'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'lmdb_dir'", ",", "help", "=", "'Directory containing LMDB database'", ")", "\n", "p", ".", "add_argument", "(", "'--resolution'", ",", "help", "=", "'Output resolution (default: 256)'", ",", "type", "=", "int", ",", "default", "=", "256", ")", "\n", "p", ".", "add_argument", "(", "'--max_images'", ",", "help", "=", "'Maximum number of images (default: none)'", ",", "type", "=", "int", ",", "default", "=", "None", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_celeba'", ",", "'Create dataset for CelebA.'", ",", "\n", "'create_celeba datasets/celeba ~/downloads/celeba'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'celeba_dir'", ",", "help", "=", "'Directory containing CelebA'", ")", "\n", "p", ".", "add_argument", "(", "'--cx'", ",", "help", "=", "'Center X coordinate (default: 89)'", ",", "type", "=", "int", ",", "default", "=", "89", ")", "\n", "p", ".", "add_argument", "(", "'--cy'", ",", "help", "=", "'Center Y coordinate (default: 121)'", ",", "type", "=", "int", ",", "default", "=", "121", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_celebahq'", ",", "'Create dataset for CelebA-HQ.'", ",", "\n", "'create_celebahq datasets/celebahq ~/downloads/celeba ~/downloads/celeba-hq-deltas'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'celeba_dir'", ",", "help", "=", "'Directory containing CelebA'", ")", "\n", "p", ".", "add_argument", "(", "'delta_dir'", ",", "help", "=", "'Directory containing CelebA-HQ deltas'", ")", "\n", "p", ".", "add_argument", "(", "'--num_threads'", ",", "help", "=", "'Number of concurrent threads (default: 4)'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "p", ".", "add_argument", "(", "'--num_tasks'", ",", "help", "=", "'Number of concurrent processing tasks (default: 100)'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_from_images'", ",", "'Create dataset from a directory full of images.'", ",", "\n", "'create_from_images datasets/mydataset myimagedir'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'image_dir'", ",", "help", "=", "'Directory containing the images'", ")", "\n", "p", ".", "add_argument", "(", "'--shuffle'", ",", "help", "=", "'Randomize image order (default: 1)'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "p", "=", "add_command", "(", "'create_from_hdf5'", ",", "'Create dataset from legacy HDF5 archive.'", ",", "\n", "'create_from_hdf5 datasets/celebahq ~/downloads/celeba-hq-1024x1024.h5'", ")", "\n", "p", ".", "add_argument", "(", "'tfrecord_dir'", ",", "help", "=", "'New dataset directory to be created'", ")", "\n", "p", ".", "add_argument", "(", "'hdf5_filename'", ",", "help", "=", "'HDF5 archive containing the images'", ")", "\n", "p", ".", "add_argument", "(", "'--shuffle'", ",", "help", "=", "'Randomize image order (default: 1)'", ",", "type", "=", "int", ",", "default", "=", "1", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "argv", "[", "1", ":", "]", "if", "len", "(", "argv", ")", ">", "1", "else", "[", "'-h'", "]", ")", "\n", "func", "=", "globals", "(", ")", "[", "args", ".", "command", "]", "\n", "del", "args", ".", "command", "\n", "func", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.__init__": [[247, 274], ["tensorflow.convert_to_tensor", "tfutil.Optimizer.name.replace", "tensorflow.get_default_graph().unique_name", "tfutil.import_obj", "dict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_obj"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", "=", "'Train'", ",", "\n", "tf_optimizer", "=", "'tf.train.AdamOptimizer'", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "use_loss_scaling", "=", "False", ",", "\n", "loss_scaling_init", "=", "64.0", ",", "\n", "loss_scaling_inc", "=", "0.0005", ",", "\n", "loss_scaling_dec", "=", "1.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# Init fields.", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "learning_rate", "=", "tf", ".", "convert_to_tensor", "(", "learning_rate", ")", "\n", "self", ".", "id", "=", "self", ".", "name", ".", "replace", "(", "'/'", ",", "'.'", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "id", ")", "\n", "self", ".", "optimizer_class", "=", "import_obj", "(", "tf_optimizer", ")", "\n", "self", ".", "optimizer_kwargs", "=", "dict", "(", "kwargs", ")", "\n", "self", ".", "use_loss_scaling", "=", "use_loss_scaling", "\n", "self", ".", "loss_scaling_init", "=", "loss_scaling_init", "\n", "self", ".", "loss_scaling_inc", "=", "loss_scaling_inc", "\n", "self", ".", "loss_scaling_dec", "=", "loss_scaling_dec", "\n", "self", ".", "_grad_shapes", "=", "None", "# [shape, ...]", "\n", "self", ".", "_dev_opt", "=", "OrderedDict", "(", ")", "# device => optimizer", "\n", "self", ".", "_dev_grads", "=", "OrderedDict", "(", ")", "# device => [[(grad, var), ...], ...]", "\n", "self", ".", "_dev_ls_var", "=", "OrderedDict", "(", ")", "# device => variable (log2 of loss scaling factor)", "\n", "self", ".", "_updates_applied", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.register_gradients": [[277, 302], ["isinstance", "all", "all", "all", "list", "isinstance", "len", "len", "tensorflow.name_scope", "tensorflow.device", "tfutil.Optimizer.apply_loss_scaling", "tfutil.Optimizer._dev_opt[].compute_gradients", "tfutil.Optimizer._dev_grads[].append", "list.values", "len", "tfutil.is_tf_expression", "tfutil.shape_to_list", "tfutil.Optimizer.optimizer_class", "tensorflow.cast", "tfutil.shape_to_list", "zip", "tfutil.Optimizer.scope.replace", "len", "tensorflow.zeros_like"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.compute_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list"], ["", "def", "register_gradients", "(", "self", ",", "loss", ",", "vars", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_updates_applied", "\n", "\n", "# Validate arguments.", "\n", "if", "isinstance", "(", "vars", ",", "dict", ")", ":", "\n", "            ", "vars", "=", "list", "(", "vars", ".", "values", "(", ")", ")", "# allow passing in Network.trainables as vars", "\n", "", "assert", "isinstance", "(", "vars", ",", "list", ")", "and", "len", "(", "vars", ")", ">=", "1", "\n", "assert", "all", "(", "is_tf_expression", "(", "expr", ")", "for", "expr", "in", "vars", "+", "[", "loss", "]", ")", "\n", "if", "self", ".", "_grad_shapes", "is", "None", ":", "\n", "            ", "self", ".", "_grad_shapes", "=", "[", "shape_to_list", "(", "var", ".", "shape", ")", "for", "var", "in", "vars", "]", "\n", "", "assert", "len", "(", "vars", ")", "==", "len", "(", "self", ".", "_grad_shapes", ")", "\n", "assert", "all", "(", "shape_to_list", "(", "var", ".", "shape", ")", "==", "var_shape", "for", "var", ",", "var_shape", "in", "zip", "(", "vars", ",", "self", ".", "_grad_shapes", ")", ")", "\n", "dev", "=", "loss", ".", "device", "\n", "assert", "all", "(", "var", ".", "device", "==", "dev", "for", "var", "in", "vars", ")", "\n", "\n", "# Register device and compute gradients.", "\n", "with", "tf", ".", "name_scope", "(", "self", ".", "id", "+", "'_grad'", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "            ", "if", "dev", "not", "in", "self", ".", "_dev_opt", ":", "\n", "                ", "opt_name", "=", "self", ".", "scope", ".", "replace", "(", "'/'", ",", "'_'", ")", "+", "'_opt%d'", "%", "len", "(", "self", ".", "_dev_opt", ")", "\n", "self", ".", "_dev_opt", "[", "dev", "]", "=", "self", ".", "optimizer_class", "(", "name", "=", "opt_name", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optimizer_kwargs", ")", "\n", "self", ".", "_dev_grads", "[", "dev", "]", "=", "[", "]", "\n", "", "loss", "=", "self", ".", "apply_loss_scaling", "(", "tf", ".", "cast", "(", "loss", ",", "tf", ".", "float32", ")", ")", "\n", "grads", "=", "self", ".", "_dev_opt", "[", "dev", "]", ".", "compute_gradients", "(", "loss", ",", "vars", ",", "gate_gradients", "=", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", ")", "# disable gating to reduce memory usage", "\n", "grads", "=", "[", "(", "g", ",", "v", ")", "if", "g", "is", "not", "None", "else", "(", "tf", ".", "zeros_like", "(", "v", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "# replace disconnected gradients with zeros", "\n", "self", ".", "_dev_grads", "[", "dev", "]", ".", "append", "(", "grads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.apply_updates": [[304, 373], ["list", "sum", "tfutil.Optimizer._dev_grads.keys", "tfutil.absolute_name_scope", "collections.OrderedDict", "enumerate", "enumerate", "tfutil.Optimizer.reset_optimizer_state", "tfutil.init_uninited_vars", "tensorflow.group", "len", "len", "len", "collections.OrderedDict.items", "list", "tfutil.Optimizer._dev_grads.values", "tensorflow.name_scope", "tensorflow.device", "zip", "tensorflow.name_scope", "tensorflow.device", "enumerate", "tensorflow.name_scope", "tensorflow.device", "tfutil.Optimizer._dev_ls_var.values", "all", "sums.append", "numpy.prod", "zip", "tensorflow.name_scope", "tensorflow.reduce_all", "tensorflow.name_scope", "tfutil.Optimizer.get_loss_scaling_var", "tensorflow.cast", "tensorflow.add_n", "tensorflow.contrib.nccl.all_sum", "tensorflow.name_scope", "tensorflow.constant", "tfutil.Optimizer.undo_loss_scaling", "tensorflow.stack", "ops.append", "ops.append", "tensorflow.name_scope", "ops.append", "ops.append", "len", "numpy.float32", "tensorflow.cond", "tensorflow.cond", "tfutil.autosummary", "tfutil.autosummary", "ops.append", "tensorflow.reduce_all", "tensorflow.where", "tfutil.autosummary", "tensorflow.is_finite", "opt.apply_gradients", "tensorflow.group", "tensorflow.group", "tensorflow.assign_add", "opt.apply_gradients", "tensorflow.assign_sub"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.apply_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.apply_gradients"], ["", "", "def", "apply_updates", "(", "self", ")", ":", "\n", "        ", "assert", "not", "self", ".", "_updates_applied", "\n", "self", ".", "_updates_applied", "=", "True", "\n", "devices", "=", "list", "(", "self", ".", "_dev_grads", ".", "keys", "(", ")", ")", "\n", "total_grads", "=", "sum", "(", "len", "(", "grads", ")", "for", "grads", "in", "self", ".", "_dev_grads", ".", "values", "(", ")", ")", "\n", "assert", "len", "(", "devices", ")", ">=", "1", "and", "total_grads", ">=", "1", "\n", "ops", "=", "[", "]", "\n", "with", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "\n", "# Cast gradients to FP32 and calculate partial sum within each device.", "\n", "            ", "dev_grads", "=", "OrderedDict", "(", ")", "# device => [(grad, var), ...]", "\n", "for", "dev_idx", ",", "dev", "in", "enumerate", "(", "devices", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'ProcessGrads%d'", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "                    ", "sums", "=", "[", "]", "\n", "for", "gv", "in", "zip", "(", "*", "self", ".", "_dev_grads", "[", "dev", "]", ")", ":", "\n", "                        ", "assert", "all", "(", "v", "is", "gv", "[", "0", "]", "[", "1", "]", "for", "g", ",", "v", "in", "gv", ")", "\n", "g", "=", "[", "tf", ".", "cast", "(", "g", ",", "tf", ".", "float32", ")", "for", "g", ",", "v", "in", "gv", "]", "\n", "g", "=", "g", "[", "0", "]", "if", "len", "(", "g", ")", "==", "1", "else", "tf", ".", "add_n", "(", "g", ")", "\n", "sums", ".", "append", "(", "(", "g", ",", "gv", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "", "dev_grads", "[", "dev", "]", "=", "sums", "\n", "\n", "# Sum gradients across devices.", "\n", "", "", "if", "len", "(", "devices", ")", ">", "1", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'SumAcrossGPUs'", ")", ",", "tf", ".", "device", "(", "None", ")", ":", "\n", "                    ", "for", "var_idx", ",", "grad_shape", "in", "enumerate", "(", "self", ".", "_grad_shapes", ")", ":", "\n", "                        ", "g", "=", "[", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "0", "]", "for", "dev", "in", "devices", "]", "\n", "if", "np", ".", "prod", "(", "grad_shape", ")", ":", "# nccl does not support zero-sized tensors", "\n", "                            ", "g", "=", "tf", ".", "contrib", ".", "nccl", ".", "all_sum", "(", "g", ")", "\n", "", "for", "dev", ",", "gg", "in", "zip", "(", "devices", ",", "g", ")", ":", "\n", "                            ", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "=", "(", "gg", ",", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "1", "]", ")", "\n", "\n", "# Apply updates separately on each device.", "\n", "", "", "", "", "for", "dev_idx", ",", "(", "dev", ",", "grads", ")", "in", "enumerate", "(", "dev_grads", ".", "items", "(", ")", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "'ApplyGrads%d'", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "\n", "# Scale gradients as needed.", "\n", "                    ", "if", "self", ".", "use_loss_scaling", "or", "total_grads", ">", "1", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "'Scale'", ")", ":", "\n", "                            ", "coef", "=", "tf", ".", "constant", "(", "np", ".", "float32", "(", "1.0", "/", "total_grads", ")", ",", "name", "=", "'coef'", ")", "\n", "coef", "=", "self", ".", "undo_loss_scaling", "(", "coef", ")", "\n", "grads", "=", "[", "(", "g", "*", "coef", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "\n", "\n", "# Check for overflows.", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'CheckOverflow'", ")", ":", "\n", "                        ", "grad_ok", "=", "tf", ".", "reduce_all", "(", "tf", ".", "stack", "(", "[", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "for", "g", ",", "v", "in", "grads", "]", ")", ")", "\n", "\n", "# Update weights and adjust loss scaling.", "\n", "", "with", "tf", ".", "name_scope", "(", "'UpdateWeights'", ")", ":", "\n", "                        ", "opt", "=", "self", ".", "_dev_opt", "[", "dev", "]", "\n", "ls_var", "=", "self", ".", "get_loss_scaling_var", "(", "dev", ")", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "lambda", ":", "opt", ".", "apply_gradients", "(", "grads", ")", ",", "tf", ".", "no_op", ")", ")", "\n", "", "else", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_add", "(", "ls_var", ",", "self", ".", "loss_scaling_inc", ")", ",", "opt", ".", "apply_gradients", "(", "grads", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_sub", "(", "ls_var", ",", "self", ".", "loss_scaling_dec", ")", ")", ")", ")", "\n", "\n", "# Report statistics on the last device.", "\n", "", "", "if", "dev", "==", "devices", "[", "-", "1", "]", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "'Statistics'", ")", ":", "\n", "                            ", "ops", ".", "append", "(", "autosummary", "(", "self", ".", "id", "+", "'/learning_rate'", ",", "self", ".", "learning_rate", ")", ")", "\n", "ops", ".", "append", "(", "autosummary", "(", "self", ".", "id", "+", "'/overflow_frequency'", ",", "tf", ".", "where", "(", "grad_ok", ",", "0", ",", "1", ")", ")", ")", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                                ", "ops", ".", "append", "(", "autosummary", "(", "self", ".", "id", "+", "'/loss_scaling_log2'", ",", "ls_var", ")", ")", "\n", "\n", "# Initialize variables and group everything into a single op.", "\n", "", "", "", "", "", "self", ".", "reset_optimizer_state", "(", ")", "\n", "init_uninited_vars", "(", "list", "(", "self", ".", "_dev_ls_var", ".", "values", "(", ")", ")", ")", "\n", "return", "tf", ".", "group", "(", "*", "ops", ",", "name", "=", "'TrainingOp'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.reset_optimizer_state": [[375, 377], ["tfutil.run", "tfutil.Optimizer._dev_opt.values", "opt.variables"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.variables"], ["", "", "def", "reset_optimizer_state", "(", "self", ")", ":", "\n", "        ", "run", "(", "[", "var", ".", "initializer", "for", "opt", "in", "self", ".", "_dev_opt", ".", "values", "(", ")", "for", "var", "in", "opt", ".", "variables", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.get_loss_scaling_var": [[379, 386], ["tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.Variable", "numpy.float32"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["", "def", "get_loss_scaling_var", "(", "self", ",", "device", ")", ":", "\n", "        ", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "None", "\n", "", "if", "device", "not", "in", "self", ".", "_dev_ls_var", ":", "\n", "            ", "with", "absolute_name_scope", "(", "self", ".", "scope", "+", "'/LossScalingVars'", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "self", ".", "_dev_ls_var", "[", "device", "]", "=", "tf", ".", "Variable", "(", "np", ".", "float32", "(", "self", ".", "loss_scaling_init", ")", ",", "name", "=", "'loss_scaling_var'", ")", "\n", "", "", "return", "self", ".", "_dev_ls_var", "[", "device", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.apply_loss_scaling": [[388, 393], ["tfutil.is_tf_expression", "tfutil.exp2", "tfutil.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "apply_loss_scaling", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "value", ")", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "", "return", "value", "*", "exp2", "(", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Optimizer.undo_loss_scaling": [[395, 400], ["tfutil.is_tf_expression", "tfutil.exp2", "tfutil.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var"], ["", "def", "undo_loss_scaling", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "value", ")", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "", "return", "value", "*", "exp2", "(", "-", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.__init__": [[417, 434], ["tfutil.Network._init_fields", "dict", "tfutil.import_module", "inspect.getsource", "tfutil.find_obj_in_module", "tfutil.Network._init_graph", "tfutil.Network.reset_vars"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.find_obj_in_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_vars"], ["    ", "def", "__init__", "(", "self", ",", "\n", "name", "=", "None", ",", "# Network name. Used to select TensorFlow name and variable scopes.", "\n", "func", "=", "None", ",", "# Fully qualified name of the underlying network construction function.", "\n", "**", "static_kwargs", ")", ":", "# Keyword arguments to be passed in to the network construction function.", "\n", "\n", "        ", "self", ".", "_init_fields", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "static_kwargs", "=", "dict", "(", "static_kwargs", ")", "\n", "\n", "# Init build func.", "\n", "module", ",", "self", ".", "_build_func_name", "=", "import_module", "(", "func", ")", "\n", "self", ".", "_build_module_src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "self", ".", "_build_func", "=", "find_obj_in_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "\n", "# Init graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_vars", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network._init_fields": [[435, 455], ["dict", "collections.OrderedDict", "collections.OrderedDict", "dict"], "methods", ["None"], ["", "def", "_init_fields", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "None", "# User-specified name, defaults to build func name if None.", "\n", "self", ".", "scope", "=", "None", "# Unique TF graph scope, derived from the user-specified name.", "\n", "self", ".", "static_kwargs", "=", "dict", "(", ")", "# Arguments passed to the user-supplied build func.", "\n", "self", ".", "num_inputs", "=", "0", "# Number of input tensors.", "\n", "self", ".", "num_outputs", "=", "0", "# Number of output tensors.", "\n", "self", ".", "input_shapes", "=", "[", "[", "]", "]", "# Input tensor shapes (NC or NCHW), including minibatch dimension.", "\n", "self", ".", "output_shapes", "=", "[", "[", "]", "]", "# Output tensor shapes (NC or NCHW), including minibatch dimension.", "\n", "self", ".", "input_shape", "=", "[", "]", "# Short-hand for input_shapes[0].", "\n", "self", ".", "output_shape", "=", "[", "]", "# Short-hand for output_shapes[0].", "\n", "self", ".", "input_templates", "=", "[", "]", "# Input placeholders in the template graph.", "\n", "self", ".", "output_templates", "=", "[", "]", "# Output tensors in the template graph.", "\n", "self", ".", "input_names", "=", "[", "]", "# Name string for each input.", "\n", "self", ".", "output_names", "=", "[", "]", "# Name string for each output.", "\n", "self", ".", "vars", "=", "OrderedDict", "(", ")", "# All variables (localname => var).", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", ")", "# Trainable variables (localname => var).", "\n", "self", ".", "_build_func", "=", "None", "# User-supplied build function that constructs the network.", "\n", "self", ".", "_build_func_name", "=", "None", "# Name of the build function.", "\n", "self", ".", "_build_module_src", "=", "None", "# Full source code of the module containing the build function.", "\n", "self", ".", "_run_cache", "=", "dict", "(", ")", "# Cached graph data for Network.run().", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network._init_graph": [[456, 492], ["inspect.signature().parameters.values", "len", "tensorflow.get_default_graph().unique_name", "len", "collections.OrderedDict", "collections.OrderedDict", "tfutil.Network.name.replace", "tensorflow.variable_scope", "tfutil.is_tf_expression", "isinstance", "tfutil.is_tf_expression", "list", "tfutil.shape_to_list", "tfutil.shape_to_list", "tfutil.Network.input_names.append", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "[].split", "inspect.signature", "tensorflow.get_variable_scope", "tensorflow.control_dependencies", "tfutil.Network._build_func", "tfutil.Network.get_var_localname", "tensorflow.global_variables", "tfutil.Network.get_var_localname", "tensorflow.trainable_variables", "tensorflow.placeholder", "t.name.split"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.get_var_localname", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.get_var_localname"], ["", "def", "_init_graph", "(", "self", ")", ":", "\n", "# Collect inputs.", "\n", "        ", "self", ".", "input_names", "=", "[", "]", "\n", "for", "param", "in", "inspect", ".", "signature", "(", "self", ".", "_build_func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "kind", "==", "param", ".", "POSITIONAL_OR_KEYWORD", "and", "param", ".", "default", "is", "param", ".", "empty", ":", "\n", "                ", "self", ".", "input_names", ".", "append", "(", "param", ".", "name", ")", "\n", "", "", "self", ".", "num_inputs", "=", "len", "(", "self", ".", "input_names", ")", "\n", "assert", "self", ".", "num_inputs", ">=", "1", "\n", "\n", "# Choose name and scope.", "\n", "if", "self", ".", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "_build_func_name", "\n", "", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "name", ".", "replace", "(", "'/'", ",", "'_'", ")", ",", "mark_as_used", "=", "False", ")", "\n", "\n", "# Build template graph.", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "with", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "# ignore surrounding name_scope", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "                    ", "self", ".", "input_templates", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "self", ".", "input_templates", ",", "is_template_graph", "=", "True", ",", "**", "self", ".", "static_kwargs", ")", "\n", "\n", "# Collect outputs.", "\n", "", "", "", "assert", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "self", ".", "output_templates", "=", "[", "out_expr", "]", "if", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "self", ".", "output_names", "=", "[", "t", ".", "name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "':'", ")", "[", "0", "]", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "output_templates", ")", "\n", "assert", "self", ".", "num_outputs", ">=", "1", "\n", "\n", "# Populate remaining fields.", "\n", "self", ".", "input_shapes", "=", "[", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "input_templates", "]", "\n", "self", ".", "output_shapes", "=", "[", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "input_shape", "=", "self", ".", "input_shapes", "[", "0", "]", "\n", "self", ".", "output_shape", "=", "self", ".", "output_shapes", "[", "0", "]", "\n", "self", ".", "vars", "=", "OrderedDict", "(", "[", "(", "self", ".", "get_var_localname", "(", "var", ")", ",", "var", ")", "for", "var", "in", "tf", ".", "global_variables", "(", "self", ".", "scope", "+", "'/'", ")", "]", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", "[", "(", "self", ".", "get_var_localname", "(", "var", ")", ",", "var", ")", "for", "var", "in", "tf", ".", "trainable_variables", "(", "self", ".", "scope", "+", "'/'", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.reset_vars": [[494, 496], ["tfutil.Network.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "reset_vars", "(", "self", ")", ":", "\n", "        ", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "vars", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.reset_trainables": [[498, 500], ["tfutil.Network.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "reset_trainables", "(", "self", ")", ":", "\n", "        ", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "trainables", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.get_output_for": [[502, 514], ["dict", "dict.update", "len", "tensorflow.variable_scope", "tfutil.Network._build_func", "tfutil.is_tf_expression", "isinstance", "tensorflow.identity", "tfutil.is_tf_expression", "list", "tensorflow.get_variable_scope", "zip"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["", "def", "get_output_for", "(", "self", ",", "*", "in_expr", ",", "return_as_list", "=", "False", ",", "**", "dynamic_kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "in_expr", ")", "==", "self", ".", "num_inputs", "\n", "all_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "all_kwargs", ".", "update", "(", "dynamic_kwargs", ")", "\n", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "True", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "named_inputs", "=", "[", "tf", ".", "identity", "(", "expr", ",", "name", "=", "name", ")", "for", "expr", ",", "name", "in", "zip", "(", "in_expr", ",", "self", ".", "input_names", ")", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "named_inputs", ",", "**", "all_kwargs", ")", "\n", "", "assert", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "if", "return_as_list", ":", "\n", "            ", "out_expr", "=", "[", "out_expr", "]", "if", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "", "return", "out_expr", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.get_var_localname": [[516, 523], ["globalname.startswith", "tfutil.is_tf_expression", "isinstance", "isinstance", "localname.split", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["", "def", "get_var_localname", "(", "self", ",", "var_or_globalname", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var_or_globalname", ")", "or", "isinstance", "(", "var_or_globalname", ",", "str", ")", "\n", "globalname", "=", "var_or_globalname", "if", "isinstance", "(", "var_or_globalname", ",", "str", ")", "else", "var_or_globalname", ".", "name", "\n", "assert", "globalname", ".", "startswith", "(", "self", ".", "scope", "+", "'/'", ")", "\n", "localname", "=", "globalname", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "localname", "=", "localname", ".", "split", "(", "':'", ")", "[", "0", "]", "\n", "return", "localname", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.find_var": [[525, 528], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["", "def", "find_var", "(", "self", ",", "var_or_localname", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var_or_localname", ")", "or", "isinstance", "(", "var_or_localname", ",", "str", ")", "\n", "return", "self", ".", "vars", "[", "var_or_localname", "]", "if", "isinstance", "(", "var_or_localname", ",", "str", ")", "else", "var_or_localname", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.get_var": [[531, 533], ["tfutil.Network.find_var().eval", "tfutil.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["", "def", "get_var", "(", "self", ",", "var_or_localname", ")", ":", "\n", "        ", "return", "self", ".", "find_var", "(", "var_or_localname", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.set_var": [[536, 538], ["tfutil.set_vars", "tfutil.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["", "def", "set_var", "(", "self", ",", "var_or_localname", ",", "new_value", ")", ":", "\n", "        ", "return", "set_vars", "(", "{", "self", ".", "find_var", "(", "var_or_localname", ")", ":", "new_value", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.__getstate__": [[540, 548], ["list", "zip", "tfutil.Network.vars.keys", "tfutil.Network.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'version'", ":", "2", ",", "\n", "'name'", ":", "self", ".", "name", ",", "\n", "'static_kwargs'", ":", "self", ".", "static_kwargs", ",", "\n", "'build_module_src'", ":", "self", ".", "_build_module_src", ",", "\n", "'build_func_name'", ":", "self", ".", "_build_func_name", ",", "\n", "'variables'", ":", "list", "(", "zip", "(", "self", ".", "vars", ".", "keys", "(", ")", ",", "run", "(", "list", "(", "self", ".", "vars", ".", "values", "(", ")", ")", ")", ")", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.__setstate__": [[550, 574], ["tfutil.Network._init_fields", "imp.new_module", "exec", "tfutil.find_obj_in_module", "_network_import_modules.append", "tfutil.Network._init_graph", "tfutil.Network.reset_vars", "tfutil.set_vars", "handler", "len", "tfutil.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.find_obj_in_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "_init_fields", "(", ")", "\n", "\n", "# Execute custom import handlers.", "\n", "for", "handler", "in", "network_import_handlers", ":", "\n", "            ", "state", "=", "handler", "(", "state", ")", "\n", "\n", "# Set basic fields.", "\n", "", "assert", "state", "[", "'version'", "]", "==", "2", "\n", "self", ".", "name", "=", "state", "[", "'name'", "]", "\n", "self", ".", "static_kwargs", "=", "state", "[", "'static_kwargs'", "]", "\n", "self", ".", "_build_module_src", "=", "state", "[", "'build_module_src'", "]", "\n", "self", ".", "_build_func_name", "=", "state", "[", "'build_func_name'", "]", "\n", "\n", "# Parse imported module.", "\n", "module", "=", "imp", ".", "new_module", "(", "'_tfutil_network_import_module_%d'", "%", "len", "(", "_network_import_modules", ")", ")", "\n", "exec", "(", "self", ".", "_build_module_src", ",", "module", ".", "__dict__", ")", "\n", "self", ".", "_build_func", "=", "find_obj_in_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "_network_import_modules", ".", "append", "(", "module", ")", "# avoid gc", "\n", "\n", "# Init graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_vars", "(", ")", "\n", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "state", "[", "'variables'", "]", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.clone": [[576, 587], ["object.__new__", "object.__new__._init_fields", "dict", "object.__new__._init_graph", "object.__new__.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from"], ["", "def", "clone", "(", "self", ",", "name", "=", "None", ")", ":", "\n", "        ", "net", "=", "object", ".", "__new__", "(", "Network", ")", "\n", "net", ".", "_init_fields", "(", ")", "\n", "net", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "name", "\n", "net", ".", "static_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "net", ".", "_build_module_src", "=", "self", ".", "_build_module_src", "\n", "net", ".", "_build_func_name", "=", "self", ".", "_build_func_name", "\n", "net", ".", "_build_func", "=", "self", ".", "_build_func", "\n", "net", ".", "_init_graph", "(", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.copy_vars_from": [[589, 593], ["isinstance", "tfutil.Network.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "copy_vars_from", "(", "self", ",", "src_net", ")", ":", "\n", "        ", "assert", "isinstance", "(", "src_net", ",", "Network", ")", "\n", "name_to_value", "=", "run", "(", "{", "name", ":", "src_net", ".", "find_var", "(", "name", ")", "for", "name", "in", "self", ".", "vars", ".", "keys", "(", ")", "}", ")", "\n", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "name_to_value", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.copy_trainables_from": [[595, 599], ["isinstance", "tfutil.Network.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "copy_trainables_from", "(", "self", ",", "src_net", ")", ":", "\n", "        ", "assert", "isinstance", "(", "src_net", ",", "Network", ")", "\n", "name_to_value", "=", "run", "(", "{", "name", ":", "src_net", ".", "find_var", "(", "name", ")", "for", "name", "in", "self", ".", "trainables", ".", "keys", "(", ")", "}", ")", "\n", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "name_to_value", ".", "items", "(", ")", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.convert": [[601, 605], ["tfutil.Network", "tfutil.Network.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from"], ["", "def", "convert", "(", "self", ",", "name", "=", "None", ",", "func", "=", "None", ",", "**", "static_kwargs", ")", ":", "\n", "        ", "net", "=", "Network", "(", "name", ",", "func", ",", "**", "static_kwargs", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.setup_as_moving_average_of": [[608, 619], ["isinstance", "tfutil.absolute_name_scope", "tensorflow.name_scope", "tfutil.Network.vars.items", "tensorflow.group", "tfutil.lerp", "ops.append", "var.assign"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp"], ["", "def", "setup_as_moving_average_of", "(", "self", ",", "src_net", ",", "beta", "=", "0.99", ",", "beta_nontrainable", "=", "0.0", ")", ":", "\n", "        ", "assert", "isinstance", "(", "src_net", ",", "Network", ")", "\n", "with", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'MovingAvg'", ")", ":", "\n", "                ", "ops", "=", "[", "]", "\n", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ":", "\n", "                    ", "if", "name", "in", "src_net", ".", "vars", ":", "\n", "                        ", "cur_beta", "=", "beta", "if", "name", "in", "self", ".", "trainables", "else", "beta_nontrainable", "\n", "new_value", "=", "lerp", "(", "src_net", ".", "vars", "[", "name", "]", ",", "var", ",", "cur_beta", ")", "\n", "ops", ".", "append", "(", "var", ".", "assign", "(", "new_value", ")", ")", "\n", "", "", "return", "tf", ".", "group", "(", "*", "ops", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.run": [[621, 678], ["str", "range", "len", "numpy.empty", "min", "tensorflow.get_default_session().run", "zip", "print", "list", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "list", "range", "print", "dict", "tuple", "sorted", "zip", "tensorflow.concat", "tensorflow.get_default_session", "zip", "len", "dynamic_kwargs.items", "tensorflow.device", "tfutil.Network.get_output_for", "out_split.append", "zip", "tfutil.shape_to_list", "tensorflow.split", "tensorflow.nn.avg_pool", "tensorflow.as_dtype", "tensorflow.saturate_cast", "tensorflow.round"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list"], ["", "", "", "def", "run", "(", "self", ",", "*", "in_arrays", ",", "\n", "return_as_list", "=", "False", ",", "# True = return a list of NumPy arrays, False = return a single NumPy array, or a tuple if there are multiple outputs.", "\n", "print_progress", "=", "False", ",", "# Print progress to the console? Useful for very large input arrays.", "\n", "minibatch_size", "=", "None", ",", "# Maximum minibatch size to use, None = disable batching.", "\n", "num_gpus", "=", "1", ",", "# Number of GPUs to use.", "\n", "out_mul", "=", "1.0", ",", "# Multiplicative constant to apply to the output(s).", "\n", "out_add", "=", "0.0", ",", "# Additive constant to apply to the output(s).", "\n", "out_shrink", "=", "1", ",", "# Shrink the spatial dimensions of the output(s) by the given factor.", "\n", "out_dtype", "=", "None", ",", "# Convert the output to the specified data type.", "\n", "**", "dynamic_kwargs", ")", ":", "# Additional keyword arguments to pass into the network construction function.", "\n", "\n", "        ", "assert", "len", "(", "in_arrays", ")", "==", "self", ".", "num_inputs", "\n", "num_items", "=", "in_arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "minibatch_size", "is", "None", ":", "\n", "            ", "minibatch_size", "=", "num_items", "\n", "", "key", "=", "str", "(", "[", "list", "(", "sorted", "(", "dynamic_kwargs", ".", "items", "(", ")", ")", ")", ",", "num_gpus", ",", "out_mul", ",", "out_add", ",", "out_shrink", ",", "out_dtype", "]", ")", "\n", "\n", "# Build graph.", "\n", "if", "key", "not", "in", "self", ".", "_run_cache", ":", "\n", "            ", "with", "absolute_name_scope", "(", "self", ".", "scope", "+", "'/Run'", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "in_split", "=", "list", "(", "zip", "(", "*", "[", "tf", ".", "split", "(", "x", ",", "num_gpus", ")", "for", "x", "in", "self", ".", "input_templates", "]", ")", ")", "\n", "out_split", "=", "[", "]", "\n", "for", "gpu", "in", "range", "(", "num_gpus", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu", ")", ":", "\n", "                        ", "out_expr", "=", "self", ".", "get_output_for", "(", "*", "in_split", "[", "gpu", "]", ",", "return_as_list", "=", "True", ",", "**", "dynamic_kwargs", ")", "\n", "if", "out_mul", "!=", "1.0", ":", "\n", "                            ", "out_expr", "=", "[", "x", "*", "out_mul", "for", "x", "in", "out_expr", "]", "\n", "", "if", "out_add", "!=", "0.0", ":", "\n", "                            ", "out_expr", "=", "[", "x", "+", "out_add", "for", "x", "in", "out_expr", "]", "\n", "", "if", "out_shrink", ">", "1", ":", "\n", "                            ", "ksize", "=", "[", "1", ",", "1", ",", "out_shrink", ",", "out_shrink", "]", "\n", "out_expr", "=", "[", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "for", "x", "in", "out_expr", "]", "\n", "", "if", "out_dtype", "is", "not", "None", ":", "\n", "                            ", "if", "tf", ".", "as_dtype", "(", "out_dtype", ")", ".", "is_integer", ":", "\n", "                                ", "out_expr", "=", "[", "tf", ".", "round", "(", "x", ")", "for", "x", "in", "out_expr", "]", "\n", "", "out_expr", "=", "[", "tf", ".", "saturate_cast", "(", "x", ",", "out_dtype", ")", "for", "x", "in", "out_expr", "]", "\n", "", "out_split", ".", "append", "(", "out_expr", ")", "\n", "", "", "self", ".", "_run_cache", "[", "key", "]", "=", "[", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "for", "outputs", "in", "zip", "(", "*", "out_split", ")", "]", "\n", "\n", "# Run minibatches.", "\n", "", "", "out_expr", "=", "self", ".", "_run_cache", "[", "key", "]", "\n", "out_arrays", "=", "[", "np", ".", "empty", "(", "[", "num_items", "]", "+", "shape_to_list", "(", "expr", ".", "shape", ")", "[", "1", ":", "]", ",", "expr", ".", "dtype", ".", "name", ")", "for", "expr", "in", "out_expr", "]", "\n", "for", "mb_begin", "in", "range", "(", "0", ",", "num_items", ",", "minibatch_size", ")", ":", "\n", "            ", "if", "print_progress", ":", "\n", "                ", "print", "(", "'\\r%d / %d'", "%", "(", "mb_begin", ",", "num_items", ")", ",", "end", "=", "''", ")", "\n", "", "mb_end", "=", "min", "(", "mb_begin", "+", "minibatch_size", ",", "num_items", ")", "\n", "mb_in", "=", "[", "src", "[", "mb_begin", ":", "mb_end", "]", "for", "src", "in", "in_arrays", "]", "\n", "mb_out", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "out_expr", ",", "dict", "(", "zip", "(", "self", ".", "input_templates", ",", "mb_in", ")", ")", ")", "\n", "for", "dst", ",", "src", "in", "zip", "(", "out_arrays", ",", "mb_out", ")", ":", "\n", "                ", "dst", "[", "mb_begin", ":", "mb_end", "]", "=", "src", "\n", "\n", "# Done.", "\n", "", "", "if", "print_progress", ":", "\n", "            ", "print", "(", "'\\r%d / %d'", "%", "(", "num_items", ",", "num_items", ")", ")", "\n", "", "if", "not", "return_as_list", ":", "\n", "            ", "out_arrays", "=", "out_arrays", "[", "0", "]", "if", "len", "(", "out_arrays", ")", "==", "1", "else", "tuple", "(", "out_arrays", ")", "\n", "", "return", "out_arrays", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.list_layers": [[681, 711], ["tensorflow.get_default_graph().get_operations", "tfutil.Network.list_layers.recurse"], "methods", ["None"], ["", "def", "list_layers", "(", "self", ")", ":", "\n", "        ", "patterns_to_ignore", "=", "[", "'/Setter'", ",", "'/new_value'", ",", "'/Shape'", ",", "'/strided_slice'", ",", "'/Cast'", ",", "'/concat'", "]", "\n", "all_ops", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_operations", "(", ")", "\n", "all_ops", "=", "[", "op", "for", "op", "in", "all_ops", "if", "not", "any", "(", "p", "in", "op", ".", "name", "for", "p", "in", "patterns_to_ignore", ")", "]", "\n", "layers", "=", "[", "]", "\n", "\n", "def", "recurse", "(", "scope", ",", "parent_ops", ",", "level", ")", ":", "\n", "            ", "prefix", "=", "scope", "+", "'/'", "\n", "ops", "=", "[", "op", "for", "op", "in", "parent_ops", "if", "op", ".", "name", "==", "scope", "or", "op", ".", "name", ".", "startswith", "(", "prefix", ")", "]", "\n", "\n", "# Does not contain leaf nodes => expand immediate children.", "\n", "if", "level", "==", "0", "or", "all", "(", "'/'", "in", "op", ".", "name", "[", "len", "(", "prefix", ")", ":", "]", "for", "op", "in", "ops", ")", ":", "\n", "                ", "visited", "=", "set", "(", ")", "\n", "for", "op", "in", "ops", ":", "\n", "                    ", "suffix", "=", "op", ".", "name", "[", "len", "(", "prefix", ")", ":", "]", "\n", "if", "'/'", "in", "suffix", ":", "\n", "                        ", "suffix", "=", "suffix", "[", ":", "suffix", ".", "index", "(", "'/'", ")", "]", "\n", "", "if", "suffix", "not", "in", "visited", ":", "\n", "                        ", "recurse", "(", "prefix", "+", "suffix", ",", "ops", ",", "level", "+", "1", ")", "\n", "visited", ".", "add", "(", "suffix", ")", "\n", "\n", "# Otherwise => interpret as a layer.", "\n", "", "", "", "else", ":", "\n", "                ", "layer_name", "=", "scope", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "layer_output", "=", "ops", "[", "-", "1", "]", ".", "outputs", "[", "0", "]", "\n", "layer_trainables", "=", "[", "op", ".", "outputs", "[", "0", "]", "for", "op", "in", "ops", "if", "op", ".", "type", ".", "startswith", "(", "'Variable'", ")", "and", "self", ".", "get_var_localname", "(", "op", ".", "name", ")", "in", "self", ".", "trainables", "]", "\n", "layers", ".", "append", "(", "(", "layer_name", ",", "layer_output", ",", "layer_trainables", ")", ")", "\n", "\n", "", "", "recurse", "(", "self", ".", "scope", ",", "all_ops", ",", "0", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.print_layers": [[713, 736], ["print", "print", "print", "tfutil.Network.list_layers", "print", "print", "print", "sum", "print", "var.name.endswith", "numpy.prod", "tfutil.shape_to_list", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.list_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list"], ["", "def", "print_layers", "(", "self", ",", "title", "=", "None", ",", "hide_layers_with_no_params", "=", "False", ")", ":", "\n", "        ", "if", "title", "is", "None", ":", "title", "=", "self", ".", "name", "\n", "print", "(", ")", "\n", "print", "(", "'%-28s%-12s%-24s%-24s'", "%", "(", "title", ",", "'Params'", ",", "'OutputShape'", ",", "'WeightShape'", ")", ")", "\n", "print", "(", "'%-28s%-12s%-24s%-24s'", "%", "(", "(", "'---'", ",", ")", "*", "4", ")", ")", "\n", "\n", "total_params", "=", "0", "\n", "for", "layer_name", ",", "layer_output", ",", "layer_trainables", "in", "self", ".", "list_layers", "(", ")", ":", "\n", "            ", "weights", "=", "[", "var", "for", "var", "in", "layer_trainables", "if", "var", ".", "name", ".", "endswith", "(", "'/weight:0'", ")", "]", "\n", "num_params", "=", "sum", "(", "np", ".", "prod", "(", "shape_to_list", "(", "var", ".", "shape", ")", ")", "for", "var", "in", "layer_trainables", ")", "\n", "total_params", "+=", "num_params", "\n", "if", "hide_layers_with_no_params", "and", "num_params", "==", "0", ":", "\n", "                ", "continue", "\n", "\n", "", "print", "(", "'%-28s%-12s%-24s%-24s'", "%", "(", "\n", "layer_name", ",", "\n", "num_params", "if", "num_params", "else", "'-'", ",", "\n", "layer_output", ".", "shape", ",", "\n", "weights", "[", "0", "]", ".", "shape", "if", "len", "(", "weights", ")", "==", "1", "else", "'-'", ")", ")", "\n", "\n", "", "print", "(", "'%-28s%-12s%-24s%-24s'", "%", "(", "(", "'---'", ",", ")", "*", "4", ")", ")", "\n", "print", "(", "'%-28s%-12s%-24s%-24s'", "%", "(", "'Total'", ",", "total_params", ",", "''", ",", "''", ")", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.Network.setup_weight_histograms": [[738, 748], ["tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "tfutil.Network.trainables.items", "tensorflow.summary.histogram", "localname.split"], "methods", ["None"], ["", "def", "setup_weight_histograms", "(", "self", ",", "title", "=", "None", ")", ":", "\n", "        ", "if", "title", "is", "None", ":", "title", "=", "self", ".", "name", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "for", "localname", ",", "var", "in", "self", ".", "trainables", ".", "items", "(", ")", ":", "\n", "                ", "if", "'/'", "in", "localname", ":", "\n", "                    ", "p", "=", "localname", ".", "split", "(", "'/'", ")", "\n", "name", "=", "title", "+", "'_'", "+", "p", "[", "-", "1", "]", "+", "'/'", "+", "'_'", ".", "join", "(", "p", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "name", "=", "title", "+", "'_toplevel/'", "+", "localname", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.run": [[20, 22], ["tensorflow.get_default_session().run", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["def", "run", "(", "*", "args", ",", "**", "kwargs", ")", ":", "# Run the specified ops in the default session.", "\n", "    ", "return", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.is_tf_expression": [[23, 25], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "is_tf_expression", "(", "x", ")", ":", "\n", "    ", "return", "isinstance", "(", "x", ",", "tf", ".", "Tensor", ")", "or", "isinstance", "(", "x", ",", "tf", ".", "Variable", ")", "or", "isinstance", "(", "x", ",", "tf", ".", "Operation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.shape_to_list": [[26, 28], ["None"], "function", ["None"], ["", "def", "shape_to_list", "(", "shape", ")", ":", "\n", "    ", "return", "[", "dim", ".", "value", "for", "dim", "in", "shape", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.flatten": [[29, 32], ["tensorflow.name_scope", "tensorflow.reshape"], "function", ["None"], ["", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Flatten'", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.log2": [[33, 36], ["tensorflow.name_scope", "tensorflow.log", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "log2", "(", "x", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Log2'", ")", ":", "\n", "        ", "return", "tf", ".", "log", "(", "x", ")", "*", "np", ".", "float32", "(", "1.0", "/", "np", ".", "log", "(", "2.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.exp2": [[37, 40], ["tensorflow.name_scope", "tensorflow.exp", "numpy.float32", "numpy.log"], "function", ["None"], ["", "", "def", "exp2", "(", "x", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Exp2'", ")", ":", "\n", "        ", "return", "tf", ".", "exp", "(", "x", "*", "np", ".", "float32", "(", "np", ".", "log", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.lerp": [[41, 44], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "lerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Lerp'", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.lerp_clip": [[45, 48], ["tensorflow.name_scope", "tensorflow.clip_by_value"], "function", ["None"], ["", "", "def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'LerpClip'", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.absolute_name_scope": [[49, 51], ["tensorflow.name_scope"], "function", ["None"], ["", "", "def", "absolute_name_scope", "(", "scope", ")", ":", "# Forcefully enter the specified name scope, ignoring any surrounding scopes.", "\n", "    ", "return", "tf", ".", "name_scope", "(", "scope", "+", "'/'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_tf": [[55, 59], ["dict", "tensorflow.get_default_session", "tensorflow.set_random_seed", "tfutil.create_session", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session"], ["", "def", "init_tf", "(", "config_dict", "=", "dict", "(", ")", ")", ":", "\n", "    ", "if", "tf", ".", "get_default_session", "(", ")", "is", "None", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "np", ".", "random", ".", "randint", "(", "1", "<<", "31", ")", ")", "\n", "create_session", "(", "config_dict", ",", "force_as_default", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.create_session": [[64, 78], ["dict", "tensorflow.ConfigProto", "config_dict.items", "tensorflow.Session", "key.split", "setattr", "tf.Session.as_default", "tf.Session._default_session.__enter__", "getattr"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.__enter__"], ["", "", "def", "create_session", "(", "config_dict", "=", "dict", "(", ")", ",", "force_as_default", "=", "False", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "for", "key", ",", "value", "in", "config_dict", ".", "items", "(", ")", ":", "\n", "        ", "fields", "=", "key", ".", "split", "(", "'.'", ")", "\n", "obj", "=", "config", "\n", "for", "field", "in", "fields", "[", ":", "-", "1", "]", ":", "\n", "            ", "obj", "=", "getattr", "(", "obj", ",", "field", ")", "\n", "", "setattr", "(", "obj", ",", "fields", "[", "-", "1", "]", ",", "value", ")", "\n", "", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n", "if", "force_as_default", ":", "\n", "        ", "session", ".", "_default_session", "=", "session", ".", "as_default", "(", ")", "\n", "session", ".", "_default_session", ".", "enforce_nesting", "=", "False", "\n", "session", ".", "_default_session", ".", "__enter__", "(", ")", "\n", "", "return", "session", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars": [[84, 99], ["tfutil.run", "tensorflow.global_variables", "tensorflow.control_dependencies", "tfutil.is_tf_expression", "zip", "tensorflow.get_default_graph().get_tensor_by_name", "tfutil.run", "var.name.replace", "test_vars.append", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "test_ops.append", "tensorflow.is_variable_initialized", "var.name.split"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["", "def", "init_uninited_vars", "(", "vars", "=", "None", ")", ":", "\n", "    ", "if", "vars", "is", "None", ":", "vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "test_vars", "=", "[", "]", ";", "test_ops", "=", "[", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "        ", "for", "var", "in", "vars", ":", "\n", "            ", "assert", "is_tf_expression", "(", "var", ")", "\n", "try", ":", "\n", "                ", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "':0'", ",", "'/IsVariableInitialized:0'", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "# Op does not exist => variable may be uninitialized.", "\n", "                ", "test_vars", ".", "append", "(", "var", ")", "\n", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", ")", ":", "\n", "                    ", "test_ops", ".", "append", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ")", "\n", "", "", "", "", "init_vars", "=", "[", "var", "for", "var", ",", "inited", "in", "zip", "(", "test_vars", ",", "run", "(", "test_ops", ")", ")", "if", "not", "inited", "]", "\n", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "init_vars", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.set_vars": [[105, 119], ["var_to_value_dict.items", "tfutil.run", "tfutil.is_tf_expression", "ops.append", "tensorflow.get_default_graph().get_tensor_by_name", "var.name.replace", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.assign", "var.name.split", "tensorflow.placeholder"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["", "def", "set_vars", "(", "var_to_value_dict", ")", ":", "\n", "    ", "ops", "=", "[", "]", "\n", "feed_dict", "=", "{", "}", "\n", "for", "var", ",", "value", "in", "var_to_value_dict", ".", "items", "(", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var", ")", "\n", "try", ":", "\n", "            ", "setter", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "':0'", ",", "'/setter:0'", ")", ")", "# look for existing op", "\n", "", "except", "KeyError", ":", "\n", "            ", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", ")", ":", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "                    ", "setter", "=", "tf", ".", "assign", "(", "var", ",", "tf", ".", "placeholder", "(", "var", ".", "dtype", ",", "var", ".", "shape", ",", "'new_value'", ")", ",", "name", "=", "'setter'", ")", "# create new setter", "\n", "", "", "", "ops", ".", "append", "(", "setter", ")", "\n", "feed_dict", "[", "setter", ".", "op", ".", "inputs", "[", "1", "]", "]", "=", "value", "\n", "", "run", "(", "ops", ",", "feed_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.autosummary": [[139, 155], ["name.replace", "tfutil.is_tf_expression", "tfutil.run", "tensorflow.name_scope", "tensorflow.device", "tfutil._create_autosummary_var", "tensorflow.control_dependencies", "tensorflow.identity", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.placeholder", "tfutil._create_autosummary_var", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil._create_autosummary_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil._create_autosummary_var"], ["def", "autosummary", "(", "name", ",", "value", ")", ":", "\n", "    ", "id", "=", "name", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "if", "is_tf_expression", "(", "value", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'summary_'", "+", "id", ")", ",", "tf", ".", "device", "(", "value", ".", "device", ")", ":", "\n", "            ", "update_op", "=", "_create_autosummary_var", "(", "name", ",", "value", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "value", ")", "\n", "", "", "", "else", ":", "# python scalar or numpy array", "\n", "        ", "if", "name", "not", "in", "_autosummary_immediate", ":", "\n", "            ", "with", "absolute_name_scope", "(", "'Autosummary/'", "+", "id", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "update_value", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "update_op", "=", "_create_autosummary_var", "(", "name", ",", "update_value", ")", "\n", "_autosummary_immediate", "[", "name", "]", "=", "update_op", ",", "update_value", "\n", "", "", "update_op", ",", "update_value", "=", "_autosummary_immediate", "[", "name", "]", "\n", "run", "(", "update_op", ",", "{", "update_value", ":", "np", ".", "float32", "(", "value", ")", "}", ")", "\n", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.finalize_autosummaries": [[158, 174], ["tfutil.init_uninited_vars", "tensorflow.device", "tensorflow.control_dependencies", "_autosummary_vars.items", "name.replace", "_autosummary_vars.values", "tfutil.absolute_name_scope", "tensorflow.add_n", "tensorflow.control_dependencies", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.control_dependencies", "tensorflow.summary.scalar", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["", "", "def", "finalize_autosummaries", "(", ")", ":", "\n", "    ", "global", "_autosummary_finalized", "\n", "if", "_autosummary_finalized", ":", "\n", "        ", "return", "\n", "", "_autosummary_finalized", "=", "True", "\n", "init_uninited_vars", "(", "[", "var", "for", "vars", "in", "_autosummary_vars", ".", "values", "(", ")", "for", "var", "in", "vars", "]", ")", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "for", "name", ",", "vars", "in", "_autosummary_vars", ".", "items", "(", ")", ":", "\n", "            ", "id", "=", "name", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "with", "absolute_name_scope", "(", "'Autosummary/'", "+", "id", ")", ":", "\n", "                ", "sum", "=", "tf", ".", "add_n", "(", "vars", ")", "\n", "avg", "=", "sum", "[", "0", "]", "/", "sum", "[", "1", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "avg", "]", ")", ":", "# read before resetting", "\n", "                    ", "reset_ops", "=", "[", "tf", ".", "assign", "(", "var", ",", "tf", ".", "zeros", "(", "2", ")", ")", "for", "var", "in", "vars", "]", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "reset_ops", ")", ":", "# reset before reporting", "\n", "                        ", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil._create_autosummary_var": [[176, 194], ["tensorflow.cast", "tensorflow.cond", "tensorflow.cond", "tensorflow.is_finite", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.is_variable_initialized", "_autosummary_vars[].append", "numpy.float32", "tensorflow.stack", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.assign_add", "tensorflow.assign", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.reduce_prod", "tensorflow.cast", "tensorflow.shape", "tensorflow.shape"], "function", ["None"], ["", "", "", "", "", "", "def", "_create_autosummary_var", "(", "name", ",", "value_expr", ")", ":", "\n", "    ", "assert", "not", "_autosummary_finalized", "\n", "v", "=", "tf", ".", "cast", "(", "value_expr", ",", "tf", ".", "float32", ")", "\n", "if", "v", ".", "shape", ".", "ndims", "is", "0", ":", "\n", "        ", "v", "=", "[", "v", ",", "np", ".", "float32", "(", "1.0", ")", "]", "\n", "", "elif", "v", ".", "shape", ".", "ndims", "is", "1", ":", "\n", "        ", "v", "=", "[", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "]", "\n", "", "else", ":", "\n", "        ", "v", "=", "[", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "reduce_prod", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", ",", "tf", ".", "float32", ")", ")", "]", "\n", "", "v", "=", "tf", ".", "cond", "(", "tf", ".", "is_finite", "(", "v", "[", "0", "]", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "v", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "2", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "2", ")", ")", "# [numerator, denominator]", "\n", "", "update_op", "=", "tf", ".", "cond", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ",", "lambda", ":", "tf", ".", "assign_add", "(", "var", ",", "v", ")", ",", "lambda", ":", "tf", ".", "assign", "(", "var", ",", "v", ")", ")", "\n", "if", "name", "in", "_autosummary_vars", ":", "\n", "        ", "_autosummary_vars", "[", "name", "]", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "        ", "_autosummary_vars", "[", "name", "]", "=", "[", "var", "]", "\n", "", "return", "update_op", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.save_summaries": [[201, 208], ["filewriter.add_summary", "tfutil.finalize_autosummaries", "tf.summary.merge_all.eval", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.summary.merge_all"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.finalize_autosummaries"], ["def", "save_summaries", "(", "filewriter", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "global", "_summary_merge_op", "\n", "if", "_summary_merge_op", "is", "None", ":", "\n", "        ", "finalize_autosummaries", "(", ")", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "_summary_merge_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "", "", "filewriter", ".", "add_summary", "(", "_summary_merge_op", ".", "eval", "(", ")", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module": [[212, 223], ["module_or_obj_name.split", "range", "ImportError", "len", "importlib.import_module"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module"], ["", "def", "import_module", "(", "module_or_obj_name", ")", ":", "\n", "    ", "parts", "=", "module_or_obj_name", ".", "split", "(", "'.'", ")", "\n", "parts", "[", "0", "]", "=", "{", "'np'", ":", "'numpy'", ",", "'tf'", ":", "'tensorflow'", "}", ".", "get", "(", "parts", "[", "0", "]", ",", "parts", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "'.'", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ")", "\n", "relative_obj_name", "=", "'.'", ".", "join", "(", "parts", "[", "i", ":", "]", ")", "\n", "return", "module", ",", "relative_obj_name", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "", "", "raise", "ImportError", "(", "module_or_obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.find_obj_in_module": [[224, 229], ["relative_obj_name.split", "getattr"], "function", ["None"], ["", "def", "find_obj_in_module", "(", "module", ",", "relative_obj_name", ")", ":", "\n", "    ", "obj", "=", "module", "\n", "for", "part", "in", "relative_obj_name", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_obj": [[230, 233], ["tfutil.import_module", "tfutil.find_obj_in_module"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.find_obj_in_module"], ["", "def", "import_obj", "(", "obj_name", ")", ":", "\n", "    ", "module", ",", "relative_obj_name", "=", "import_module", "(", "obj_name", ")", "\n", "return", "find_obj_in_module", "(", "module", ",", "relative_obj_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.call_func_by_name": [[234, 237], ["tfutil.import_obj"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_obj"], ["", "def", "call_func_by_name", "(", "*", "args", ",", "func", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "func", "is", "not", "None", "\n", "return", "import_obj", "(", "func", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.util_scripts.generate_fake_images": [[28, 45], ["misc.locate_network_pkl", "numpy.random.RandomState", "print", "misc.load_network_pkl", "misc.create_result_subdir", "range", "open().close", "print", "misc.random_latents", "numpy.zeros", "Gs.run", "misc.save_image_grid", "misc.get_id_string_for_network_pkl", "numpy.prod", "os.path.join", "open", "os.path.join"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.random_latents", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.get_id_string_for_network_pkl"], ["def", "generate_fake_images", "(", "run_id", ",", "snapshot", "=", "None", ",", "grid_size", "=", "[", "1", ",", "1", "]", ",", "num_pngs", "=", "1", ",", "image_shrink", "=", "1", ",", "png_prefix", "=", "None", ",", "random_seed", "=", "1000", ",", "minibatch_size", "=", "8", ")", ":", "\n", "    ", "network_pkl", "=", "misc", ".", "locate_network_pkl", "(", "run_id", ",", "snapshot", ")", "\n", "if", "png_prefix", "is", "None", ":", "\n", "        ", "png_prefix", "=", "misc", ".", "get_id_string_for_network_pkl", "(", "network_pkl", ")", "+", "'-'", "\n", "", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "\n", "print", "(", "'Loading network from \"%s\"...'", "%", "network_pkl", ")", "\n", "G", ",", "D", ",", "Gs", "=", "misc", ".", "load_network_pkl", "(", "run_id", ",", "snapshot", ")", "\n", "\n", "result_subdir", "=", "misc", ".", "create_result_subdir", "(", "config", ".", "result_dir", ",", "config", ".", "desc", ")", "\n", "for", "png_idx", "in", "range", "(", "num_pngs", ")", ":", "\n", "        ", "print", "(", "'Generating png %d / %d...'", "%", "(", "png_idx", ",", "num_pngs", ")", ")", "\n", "latents", "=", "misc", ".", "random_latents", "(", "np", ".", "prod", "(", "grid_size", ")", ",", "Gs", ",", "random_state", "=", "random_state", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "latents", ".", "shape", "[", "0", "]", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "labels", ",", "minibatch_size", "=", "minibatch_size", ",", "num_gpus", "=", "config", ".", "num_gpus", ",", "out_mul", "=", "127.5", ",", "out_add", "=", "127.5", ",", "out_shrink", "=", "image_shrink", ",", "out_dtype", "=", "np", ".", "uint8", ")", "\n", "misc", ".", "save_image_grid", "(", "images", ",", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "'%s%06d.png'", "%", "(", "png_prefix", ",", "png_idx", ")", ")", ",", "[", "0", ",", "255", "]", ",", "grid_size", ")", "\n", "", "open", "(", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "'_done.txt'", ")", ",", "'wt'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.util_scripts.generate_interpolation_video": [[50, 84], ["misc.locate_network_pkl", "int", "numpy.random.RandomState", "print", "misc.load_network_pkl", "print", "np.random.RandomState.randn().astype", "scipy.ndimage.gaussian_filter", "scipy.ndimage.gaussian_filter", "numpy.sqrt", "misc.create_result_subdir", "moviepy.editor.VideoClip().write_videofile", "open().close", "numpy.rint", "numpy.mean", "int", "numpy.zeros", "Gs.run", "misc.create_image_grid().transpose", "os.path.join", "misc.get_id_string_for_network_pkl", "numpy.prod", "np.random.RandomState.randn", "numpy.square", "numpy.clip", "scipy.ndimage.zoom", "scipy.ndimage.zoom", "grid.repeat.repeat", "moviepy.editor.VideoClip", "open", "len", "numpy.round", "misc.create_image_grid", "os.path.join"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.get_id_string_for_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.create_image_grid"], ["", "def", "generate_interpolation_video", "(", "run_id", ",", "snapshot", "=", "None", ",", "grid_size", "=", "[", "1", ",", "1", "]", ",", "image_shrink", "=", "1", ",", "image_zoom", "=", "1", ",", "duration_sec", "=", "60.0", ",", "smoothing_sec", "=", "1.0", ",", "mp4", "=", "None", ",", "mp4_fps", "=", "30", ",", "mp4_codec", "=", "'libx265'", ",", "mp4_bitrate", "=", "'16M'", ",", "random_seed", "=", "1000", ",", "minibatch_size", "=", "8", ")", ":", "\n", "    ", "network_pkl", "=", "misc", ".", "locate_network_pkl", "(", "run_id", ",", "snapshot", ")", "\n", "if", "mp4", "is", "None", ":", "\n", "        ", "mp4", "=", "misc", ".", "get_id_string_for_network_pkl", "(", "network_pkl", ")", "+", "'-lerp.mp4'", "\n", "", "num_frames", "=", "int", "(", "np", ".", "rint", "(", "duration_sec", "*", "mp4_fps", ")", ")", "\n", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "\n", "print", "(", "'Loading network from \"%s\"...'", "%", "network_pkl", ")", "\n", "G", ",", "D", ",", "Gs", "=", "misc", ".", "load_network_pkl", "(", "run_id", ",", "snapshot", ")", "\n", "\n", "print", "(", "'Generating latent vectors...'", ")", "\n", "shape", "=", "[", "num_frames", ",", "np", ".", "prod", "(", "grid_size", ")", "]", "+", "Gs", ".", "input_shape", "[", "1", ":", "]", "# [frame, image, channel, component]", "\n", "all_latents", "=", "random_state", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "all_latents", "=", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "all_latents", ",", "[", "smoothing_sec", "*", "mp4_fps", "]", "+", "[", "0", "]", "*", "len", "(", "Gs", ".", "input_shape", ")", ",", "mode", "=", "'wrap'", ")", "\n", "all_latents", "/=", "np", ".", "sqrt", "(", "np", ".", "mean", "(", "np", ".", "square", "(", "all_latents", ")", ")", ")", "\n", "\n", "# Frame generation func for moviepy.", "\n", "def", "make_frame", "(", "t", ")", ":", "\n", "        ", "frame_idx", "=", "int", "(", "np", ".", "clip", "(", "np", ".", "round", "(", "t", "*", "mp4_fps", ")", ",", "0", ",", "num_frames", "-", "1", ")", ")", "\n", "latents", "=", "all_latents", "[", "frame_idx", "]", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "latents", ".", "shape", "[", "0", "]", ",", "0", "]", ",", "np", ".", "float32", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "labels", ",", "minibatch_size", "=", "minibatch_size", ",", "num_gpus", "=", "config", ".", "num_gpus", ",", "out_mul", "=", "127.5", ",", "out_add", "=", "127.5", ",", "out_shrink", "=", "image_shrink", ",", "out_dtype", "=", "np", ".", "uint8", ")", "\n", "grid", "=", "misc", ".", "create_image_grid", "(", "images", ",", "grid_size", ")", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "# HWC", "\n", "if", "image_zoom", ">", "1", ":", "\n", "            ", "grid", "=", "scipy", ".", "ndimage", ".", "zoom", "(", "grid", ",", "[", "image_zoom", ",", "image_zoom", ",", "1", "]", ",", "order", "=", "0", ")", "\n", "", "if", "grid", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "grid", "=", "grid", ".", "repeat", "(", "3", ",", "2", ")", "# grayscale => RGB", "\n", "", "return", "grid", "\n", "\n", "# Generate video.", "\n", "", "import", "moviepy", ".", "editor", "# pip install moviepy", "\n", "result_subdir", "=", "misc", ".", "create_result_subdir", "(", "config", ".", "result_dir", ",", "config", ".", "desc", ")", "\n", "moviepy", ".", "editor", ".", "VideoClip", "(", "make_frame", ",", "duration", "=", "duration_sec", ")", ".", "write_videofile", "(", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "mp4", ")", ",", "fps", "=", "mp4_fps", ",", "codec", "=", "'libx264'", ",", "bitrate", "=", "mp4_bitrate", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "'_done.txt'", ")", ",", "'wt'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.util_scripts.generate_training_video": [[89, 135], ["misc.locate_result_subdir", "len", "misc.create_result_subdir", "moviepy.editor.VideoClip().write_videofile", "open().close", "open", "misc.draw_text_label", "misc.draw_text_label", "misc.draw_text_label", "os.path.join", "os.path.basename", "os.path.join", "re.search", "re.search", "re.search", "scipy.misc.imread", "scipy.misc.imread", "misc.format_time", "moviepy.editor.VideoClip", "open", "float", "float", "os.path.join", "os.path.isfile", "max", "img.astype().reshape().mean.astype().reshape().mean", "int", "os.path.join", "float.group", "float.group", "times.append", "snaps.append", "numpy.rint", "re.search.group", "int", "range", "int", "bisect.bisect", "img.astype().reshape().mean.astype().reshape", "numpy.floor", "re.search.group", "img.astype().reshape().mean.astype"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.draw_text_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.draw_text_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.draw_text_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time"], ["", "def", "generate_training_video", "(", "run_id", ",", "duration_sec", "=", "20.0", ",", "time_warp", "=", "1.5", ",", "mp4", "=", "None", ",", "mp4_fps", "=", "30", ",", "mp4_codec", "=", "'libx265'", ",", "mp4_bitrate", "=", "'16M'", ")", ":", "\n", "    ", "src_result_subdir", "=", "misc", ".", "locate_result_subdir", "(", "run_id", ")", "\n", "if", "mp4", "is", "None", ":", "\n", "        ", "mp4", "=", "os", ".", "path", ".", "basename", "(", "src_result_subdir", ")", "+", "'-train.mp4'", "\n", "\n", "# Parse log.", "\n", "", "times", "=", "[", "]", "\n", "snaps", "=", "[", "]", "# [(png, kimg, lod), ...]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "src_result_subdir", ",", "'log.txt'", ")", ",", "'rt'", ")", "as", "log", ":", "\n", "        ", "for", "line", "in", "log", ":", "\n", "            ", "k", "=", "re", ".", "search", "(", "r'kimg ([\\d\\.]+) '", ",", "line", ")", "\n", "l", "=", "re", ".", "search", "(", "r'lod ([\\d\\.]+) '", ",", "line", ")", "\n", "t", "=", "re", ".", "search", "(", "r'time (\\d+d)? *(\\d+h)? *(\\d+m)? *(\\d+s)? '", ",", "line", ")", "\n", "if", "k", "and", "l", "and", "t", ":", "\n", "                ", "k", "=", "float", "(", "k", ".", "group", "(", "1", ")", ")", "\n", "l", "=", "float", "(", "l", ".", "group", "(", "1", ")", ")", "\n", "t", "=", "[", "int", "(", "t", ".", "group", "(", "i", ")", "[", ":", "-", "1", "]", ")", "if", "t", ".", "group", "(", "i", ")", "else", "0", "for", "i", "in", "range", "(", "1", ",", "5", ")", "]", "\n", "t", "=", "t", "[", "0", "]", "*", "24", "*", "60", "*", "60", "+", "t", "[", "1", "]", "*", "60", "*", "60", "+", "t", "[", "2", "]", "*", "60", "+", "t", "[", "3", "]", "\n", "png", "=", "os", ".", "path", ".", "join", "(", "src_result_subdir", ",", "'fakes%06d.png'", "%", "int", "(", "np", ".", "floor", "(", "k", ")", ")", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "png", ")", ":", "\n", "                    ", "times", ".", "append", "(", "t", ")", "\n", "snaps", ".", "append", "(", "(", "png", ",", "k", ",", "l", ")", ")", "\n", "", "", "", "", "assert", "len", "(", "times", ")", "\n", "\n", "# Frame generation func for moviepy.", "\n", "png_cache", "=", "[", "None", ",", "None", "]", "# [png, img]", "\n", "def", "make_frame", "(", "t", ")", ":", "\n", "        ", "wallclock", "=", "(", "(", "t", "/", "duration_sec", ")", "**", "time_warp", ")", "*", "times", "[", "-", "1", "]", "\n", "png", ",", "kimg", ",", "lod", "=", "snaps", "[", "max", "(", "bisect", ".", "bisect", "(", "times", ",", "wallclock", ")", "-", "1", ",", "0", ")", "]", "\n", "if", "png_cache", "[", "0", "]", "==", "png", ":", "\n", "            ", "img", "=", "png_cache", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "img", "=", "scipy", ".", "misc", ".", "imread", "(", "png", ")", "\n", "while", "img", ".", "shape", "[", "1", "]", ">", "1920", "or", "img", ".", "shape", "[", "0", "]", ">", "1080", ":", "\n", "                ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "img", ".", "shape", "[", "0", "]", "//", "2", ",", "2", ",", "img", ".", "shape", "[", "1", "]", "//", "2", ",", "2", ",", "-", "1", ")", ".", "mean", "(", "axis", "=", "(", "1", ",", "3", ")", ")", "\n", "", "png_cache", "[", ":", "]", "=", "[", "png", ",", "img", "]", "\n", "", "img", "=", "misc", ".", "draw_text_label", "(", "img", ",", "'lod %.2f'", "%", "lod", ",", "16", ",", "img", ".", "shape", "[", "0", "]", "-", "4", ",", "alignx", "=", "0.0", ",", "aligny", "=", "1.0", ")", "\n", "img", "=", "misc", ".", "draw_text_label", "(", "img", ",", "misc", ".", "format_time", "(", "int", "(", "np", ".", "rint", "(", "wallclock", ")", ")", ")", ",", "img", ".", "shape", "[", "1", "]", "//", "2", ",", "img", ".", "shape", "[", "0", "]", "-", "4", ",", "alignx", "=", "0.5", ",", "aligny", "=", "1.0", ")", "\n", "img", "=", "misc", ".", "draw_text_label", "(", "img", ",", "'%.0f kimg'", "%", "kimg", ",", "img", ".", "shape", "[", "1", "]", "-", "16", ",", "img", ".", "shape", "[", "0", "]", "-", "4", ",", "alignx", "=", "1.0", ",", "aligny", "=", "1.0", ")", "\n", "return", "img", "\n", "\n", "# Generate video.", "\n", "", "import", "moviepy", ".", "editor", "# pip install moviepy", "\n", "result_subdir", "=", "misc", ".", "create_result_subdir", "(", "config", ".", "result_dir", ",", "config", ".", "desc", ")", "\n", "moviepy", ".", "editor", ".", "VideoClip", "(", "make_frame", ",", "duration", "=", "duration_sec", ")", ".", "write_videofile", "(", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "mp4", ")", ",", "fps", "=", "mp4_fps", ",", "codec", "=", "'libx264'", ",", "bitrate", "=", "mp4_bitrate", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "'_done.txt'", ")", ",", "'wt'", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.util_scripts.evaluate_metrics": [[140, 238], ["misc.locate_result_subdir", "misc.list_network_pkls", "os.path.join", "print", "misc.set_output_log_file", "misc.load_dataset_for_previous_run", "print", "print", "print", "print", "print", "enumerate", "print", "len", "numpy.clip", "metric_class_names.get", "print", "tfutil.import_obj", "tfutil.import_obj.", "tfutil.init_uninited_vars", "class_def.begin", "range", "class_def.end", "metric_objs.append", "zip", "class_def.get_metric_formatting", "print", "time.time", "numpy.zeros", "range", "print", "zip", "print", "reversed", "os.path.basename", "int", "print", "time.time", "print", "zip", "print", "class_def.feed", "class_def.get_metric_names", "class_def.get_metric_formatting", "print", "print", "class_def.begin", "min", "dataset_obj.get_minibatch_np", "class_def.end", "zip", "os.path.basename.startswith", "os.path.basename.endswith", "class_def.begin", "tensorflow.Graph().as_default", "tfutil.create_session().as_default", "misc.load_pkl", "range", "class_def.end", "zip", "numpy.random.randint", "misc.apply_mirror_augment", "numpy.tile", "class_def.feed", "misc.format_time", "class_def.get_metric_formatting", "print", "min", "misc.random_latents", "Gs.run", "misc.format_time", "class_def.get_metric_formatting", "print", "len", "tensorflow.Graph", "tfutil.create_session", "numpy.tile", "class_def.feed", "len", "len", "time.time", "len", "time.time"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.list_network_pkls", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.set_output_log_file", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_dataset_for_previous_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_obj", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.init_uninited_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.end", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_formatting", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.feed", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_names", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_formatting", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.end", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.end", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.apply_mirror_augment", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.feed", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_formatting", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.random_latents", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_formatting", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.feed"], ["", "def", "evaluate_metrics", "(", "run_id", ",", "log", ",", "metrics", ",", "num_images", ",", "real_passes", ",", "minibatch_size", "=", "None", ")", ":", "\n", "    ", "metric_class_names", "=", "{", "\n", "'swd'", ":", "'metrics.sliced_wasserstein.API'", ",", "\n", "'fid'", ":", "'metrics.frechet_inception_distance.API'", ",", "\n", "'is'", ":", "'metrics.inception_score.API'", ",", "\n", "'msssim'", ":", "'metrics.ms_ssim.API'", ",", "\n", "}", "\n", "\n", "# Locate training run and initialize logging.", "\n", "result_subdir", "=", "misc", ".", "locate_result_subdir", "(", "run_id", ")", "\n", "snapshot_pkls", "=", "misc", ".", "list_network_pkls", "(", "result_subdir", ",", "include_final", "=", "False", ")", "\n", "assert", "len", "(", "snapshot_pkls", ")", ">=", "1", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "result_subdir", ",", "log", ")", "\n", "print", "(", "'Logging output to'", ",", "log_file", ")", "\n", "misc", ".", "set_output_log_file", "(", "log_file", ")", "\n", "\n", "# Initialize dataset and select minibatch size.", "\n", "dataset_obj", ",", "mirror_augment", "=", "misc", ".", "load_dataset_for_previous_run", "(", "result_subdir", ",", "verbose", "=", "True", ",", "shuffle_mb", "=", "0", ")", "\n", "if", "minibatch_size", "is", "None", ":", "\n", "        ", "minibatch_size", "=", "np", ".", "clip", "(", "8192", "//", "dataset_obj", ".", "shape", "[", "1", "]", ",", "4", ",", "256", ")", "\n", "\n", "# Initialize metrics.", "\n", "", "metric_objs", "=", "[", "]", "\n", "for", "name", "in", "metrics", ":", "\n", "        ", "class_name", "=", "metric_class_names", ".", "get", "(", "name", ",", "name", ")", "\n", "print", "(", "'Initializing %s...'", "%", "class_name", ")", "\n", "class_def", "=", "tfutil", ".", "import_obj", "(", "class_name", ")", "\n", "image_shape", "=", "[", "3", "]", "+", "dataset_obj", ".", "shape", "[", "1", ":", "]", "\n", "obj", "=", "class_def", "(", "num_images", "=", "num_images", ",", "image_shape", "=", "image_shape", ",", "image_dtype", "=", "np", ".", "uint8", ",", "minibatch_size", "=", "minibatch_size", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "mode", "=", "'warmup'", "\n", "obj", ".", "begin", "(", "mode", ")", "\n", "for", "idx", "in", "range", "(", "10", ")", ":", "\n", "            ", "obj", ".", "feed", "(", "mode", ",", "np", ".", "random", ".", "randint", "(", "0", ",", "256", ",", "size", "=", "[", "minibatch_size", "]", "+", "image_shape", ",", "dtype", "=", "np", ".", "uint8", ")", ")", "\n", "", "obj", ".", "end", "(", "mode", ")", "\n", "metric_objs", ".", "append", "(", "obj", ")", "\n", "\n", "# Print table header.", "\n", "", "print", "(", ")", "\n", "print", "(", "'%-10s%-12s'", "%", "(", "'Snapshot'", ",", "'Time_eval'", ")", ",", "end", "=", "''", ")", "\n", "for", "obj", "in", "metric_objs", ":", "\n", "        ", "for", "name", ",", "fmt", "in", "zip", "(", "obj", ".", "get_metric_names", "(", ")", ",", "obj", ".", "get_metric_formatting", "(", ")", ")", ":", "\n", "            ", "print", "(", "'%-*s'", "%", "(", "len", "(", "fmt", "%", "0", ")", ",", "name", ")", ",", "end", "=", "''", ")", "\n", "", "", "print", "(", ")", "\n", "print", "(", "'%-10s%-12s'", "%", "(", "'---'", ",", "'---'", ")", ",", "end", "=", "''", ")", "\n", "for", "obj", "in", "metric_objs", ":", "\n", "        ", "for", "fmt", "in", "obj", ".", "get_metric_formatting", "(", ")", ":", "\n", "            ", "print", "(", "'%-*s'", "%", "(", "len", "(", "fmt", "%", "0", ")", ",", "'---'", ")", ",", "end", "=", "''", ")", "\n", "", "", "print", "(", ")", "\n", "\n", "# Feed in reals.", "\n", "for", "title", ",", "mode", "in", "[", "(", "'Reals'", ",", "'reals'", ")", ",", "(", "'Reals2'", ",", "'fakes'", ")", "]", "[", ":", "real_passes", "]", ":", "\n", "        ", "print", "(", "'%-10s'", "%", "title", ",", "end", "=", "''", ")", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "labels", "=", "np", ".", "zeros", "(", "[", "num_images", ",", "dataset_obj", ".", "label_size", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "[", "obj", ".", "begin", "(", "mode", ")", "for", "obj", "in", "metric_objs", "]", "\n", "for", "begin", "in", "range", "(", "0", ",", "num_images", ",", "minibatch_size", ")", ":", "\n", "            ", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "num_images", ")", "\n", "images", ",", "labels", "[", "begin", ":", "end", "]", "=", "dataset_obj", ".", "get_minibatch_np", "(", "end", "-", "begin", ")", "\n", "if", "mirror_augment", ":", "\n", "                ", "images", "=", "misc", ".", "apply_mirror_augment", "(", "images", ")", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                ", "images", "=", "np", ".", "tile", "(", "images", ",", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "# grayscale => RGB", "\n", "", "[", "obj", ".", "feed", "(", "mode", ",", "images", ")", "for", "obj", "in", "metric_objs", "]", "\n", "", "results", "=", "[", "obj", ".", "end", "(", "mode", ")", "for", "obj", "in", "metric_objs", "]", "\n", "print", "(", "'%-12s'", "%", "misc", ".", "format_time", "(", "time", ".", "time", "(", ")", "-", "time_begin", ")", ",", "end", "=", "''", ")", "\n", "for", "obj", ",", "vals", "in", "zip", "(", "metric_objs", ",", "results", ")", ":", "\n", "            ", "for", "val", ",", "fmt", "in", "zip", "(", "vals", ",", "obj", ".", "get_metric_formatting", "(", ")", ")", ":", "\n", "                ", "print", "(", "fmt", "%", "val", ",", "end", "=", "''", ")", "\n", "", "", "print", "(", ")", "\n", "\n", "# Evaluate each network snapshot.", "\n", "", "for", "snapshot_idx", ",", "snapshot_pkl", "in", "enumerate", "(", "reversed", "(", "snapshot_pkls", ")", ")", ":", "\n", "        ", "prefix", "=", "'network-snapshot-'", ";", "postfix", "=", "'.pkl'", "\n", "snapshot_name", "=", "os", ".", "path", ".", "basename", "(", "snapshot_pkl", ")", "\n", "assert", "snapshot_name", ".", "startswith", "(", "prefix", ")", "and", "snapshot_name", ".", "endswith", "(", "postfix", ")", "\n", "snapshot_kimg", "=", "int", "(", "snapshot_name", "[", "len", "(", "prefix", ")", ":", "-", "len", "(", "postfix", ")", "]", ")", "\n", "\n", "print", "(", "'%-10d'", "%", "snapshot_kimg", ",", "end", "=", "''", ")", "\n", "mode", "=", "'fakes'", "\n", "[", "obj", ".", "begin", "(", "mode", ")", "for", "obj", "in", "metric_objs", "]", "\n", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ",", "tfutil", ".", "create_session", "(", "config", ".", "tf_config", ")", ".", "as_default", "(", ")", ":", "\n", "            ", "G", ",", "D", ",", "Gs", "=", "misc", ".", "load_pkl", "(", "snapshot_pkl", ")", "\n", "for", "begin", "in", "range", "(", "0", ",", "num_images", ",", "minibatch_size", ")", ":", "\n", "                ", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "num_images", ")", "\n", "latents", "=", "misc", ".", "random_latents", "(", "end", "-", "begin", ",", "Gs", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "labels", "[", "begin", ":", "end", "]", ",", "num_gpus", "=", "config", ".", "num_gpus", ",", "out_mul", "=", "127.5", ",", "out_add", "=", "127.5", ",", "out_dtype", "=", "np", ".", "uint8", ")", "\n", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "                    ", "images", "=", "np", ".", "tile", "(", "images", ",", "[", "1", ",", "3", ",", "1", ",", "1", "]", ")", "# grayscale => RGB", "\n", "", "[", "obj", ".", "feed", "(", "mode", ",", "images", ")", "for", "obj", "in", "metric_objs", "]", "\n", "", "", "results", "=", "[", "obj", ".", "end", "(", "mode", ")", "for", "obj", "in", "metric_objs", "]", "\n", "print", "(", "'%-12s'", "%", "misc", ".", "format_time", "(", "time", ".", "time", "(", ")", "-", "time_begin", ")", ",", "end", "=", "''", ")", "\n", "for", "obj", ",", "vals", "in", "zip", "(", "metric_objs", ",", "results", ")", ":", "\n", "            ", "for", "val", ",", "fmt", "in", "zip", "(", "vals", ",", "obj", ".", "get_metric_formatting", "(", ")", ")", ":", "\n", "                ", "print", "(", "fmt", "%", "val", ",", "end", "=", "''", ")", "\n", "", "", "print", "(", ")", "\n", "", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.train.TrainingSchedule.__init__": [[86, 128], ["numpy.floor", "max", "minibatch_dict.get", "G_lrate_dict.get", "D_lrate_dict.get", "tick_kimg_dict.get", "int", "numpy.log2", "min", "numpy.floor", "max", "int", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["write_results", "(", "f\"{res_dir}_els{args.latent_strategy}.txt\"", ",", "mIoU", ",", "c_ious", ")", "\n", "\n", "", "", "if", "__name__", "==", "\"__main__\"", ":", "\n", "  ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "# Architecture setting", "\n", "parser", ".", "add_argument", "(", "'--layer-weight'", ",", "type", "=", "str", ",", "default", "=", "'softplus'", ",", "\n", "choices", "=", "[", "'softplus'", ",", "'sigmoid'", ",", "'none'", "]", ",", "\n", "help", "=", "'Different layer weight strategy.'", ")", "\n", "parser", ".", "add_argument", "(", "'--latent-strategy'", ",", "type", "=", "str", ",", "default", "=", "'trunc-wp'", ",", "\n", "choices", "=", "[", "'notrunc-mixwp'", ",", "'trunc-wp'", ",", "'notrunc-wp'", "]", ",", "\n", "help", "=", "'notrunc-mixwp: mixed W+ without truncation. trunc-wp: W+ with truncation. notrunc-wp: W+ without truncation.'", ")", "\n", "parser", ".", "add_argument", "(", "'--G'", ",", "type", "=", "str", ",", "default", "=", "'stylegan2_ffhq'", ",", "\n", "help", "=", "'The model type of generator'", ")", "\n", "parser", ".", "add_argument", "(", "'--SE'", ",", "type", "=", "str", ",", "default", "=", "'LSE'", ",", "\n", "help", "=", "'The model type of semantic extractor'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "\n", "help", "=", "'focal: use Focal loss. normal: use CE loss.'", ")", "\n", "parser", ".", "add_argument", "(", "'--full-label'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Default: 0, use selected label. 1: use full label.'", ")", "\n", "# Training setting", "\n", "parser", ".", "add_argument", "(", "'--reload'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'The path to saved file of semantic extractor.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "\n", "help", "=", "'The learning rate.'", ")", "\n", "parser", ".", "add_argument", "(", "'--expr'", ",", "type", "=", "str", ",", "default", "=", "'expr/semantics'", ",", "\n", "help", "=", "'The experiment directory.'", ")", "\n", "parser", ".", "add_argument", "(", "'--slurm'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'If the script is run on slurm.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'GPUs to use. (default: %(default)s)'", ")", "\n", "# evaluation settings", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Whether to evaluate after training.\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "from", "lib", ".", "misc", "import", "set_cuda_devices", "\n", "set_cuda_devices", "(", "args", ".", "gpu_id", ")", "\n", "main", "(", "args", ")", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.train.setup_snapshot_image_grid": [[22, 52], ["numpy.zeros", "numpy.zeros", "range", "misc.random_latents", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "training_set.get_minibatch_np"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.random_latents", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["DIR", "=", "f\"{args.expr}/{args.G}_{args.SE}_l{args.loss_type}_ls{args.latent_strategy}_lw{args.layer_weight}_lr{args.lr}\"", "\n", "G", "=", "build_generator", "(", "args", ".", "G", ")", "\n", "is_face", "=", "\"celebahq\"", "in", "args", ".", "G", "or", "\"ffhq\"", "in", "args", ".", "G", "\n", "if", "is_face", ":", "\n", "    ", "P", "=", "FaceSegmenter", "(", ")", "\n", "", "else", ":", "\n", "    ", "if", "args", ".", "full_label", ":", "\n", "      ", "P", "=", "SceneSegmenter", "(", ")", "\n", "", "else", ":", "\n", "      ", "P", "=", "SceneSegmenter", "(", "model_name", "=", "args", ".", "G", ")", "\n", "", "", "print", "(", "f\"=> Segmenter has {P.num_categories} classes\"", ")", "\n", "\n", "if", "len", "(", "args", ".", "reload", ")", ">", "1", ":", "\n", "    ", "SE", "=", "load_semantic_extractor", "(", "args", ".", "reload", ")", "\n", "", "else", ":", "\n", "    ", "features", "=", "G", "(", "G", ".", "easy_sample", "(", "1", ")", ")", "[", "'feature'", "]", "\n", "dims", "=", "[", "s", ".", "shape", "[", "1", "]", "for", "s", "in", "features", "]", "\n", "layers", "=", "list", "(", "range", "(", "len", "(", "dims", ")", ")", ")", "\n", "SE", "=", "build_semantic_extractor", "(", "\n", "lw_type", "=", "args", ".", "layer_weight", ",", "\n", "model_name", "=", "args", ".", "SE", ",", "\n", "n_class", "=", "P", ".", "num_categories", ",", "\n", "dims", "=", "dims", ",", "\n", "layers", "=", "layers", ")", "\n", "", "SE", ".", "cuda", "(", ")", ".", "train", "(", ")", "\n", "\n", "dm", "=", "NoiseDataModule", "(", "train_size", "=", "1024", ",", "batch_size", "=", "1", ")", "\n", "z", "=", "torch", ".", "randn", "(", "6", ",", "512", ")", ".", "cuda", "(", ")", "\n", "resolution", "=", "512", "if", "is_face", "else", "256", "\n", "callbacks", "=", "[", "\n", "SEVisualizerCallback", "(", "z", ",", "interval", "=", "5", "*", "1024", ")", ",", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.train.process_reals": [[56, 81], ["tensorflow.name_scope", "tensorflow.name_scope", "tensorflow.cast", "misc.adjust_dynamic_range", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.reshape", "tfutil.lerp", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.random_uniform", "tensorflow.tile", "tensorflow.where", "tensorflow.reverse", "tensorflow.floor", "tensorflow.floor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp"], ["    ", "print", "(", "\"=> Layer weight\"", ")", "\n", "weight", "=", "SE", ".", "_calc_layer_weight", "(", ")", "\n", "s", "=", "\" \"", ".", "join", "(", "[", "f\"{w:.2f}\"", "for", "w", "in", "weight", "]", ")", "\n", "print", "(", "f\"=> Layer weight: {s}\"", ")", "\n", "callbacks", ".", "append", "(", "WeightVisualizerCallback", "(", ")", ")", "\n", "\n", "", "logger", "=", "pl_logger", ".", "TensorBoardLogger", "(", "DIR", ")", "\n", "learner", "=", "SELearner", "(", "model", "=", "SE", ",", "G", "=", "G", ".", "net", ",", "P", "=", "P", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "loss_type", "=", "args", ".", "loss_type", ",", "\n", "latent_strategy", "=", "args", ".", "latent_strategy", ",", "\n", "resolution", "=", "resolution", ",", "\n", "save_dir", "=", "DIR", ")", "\n", "trainer", "=", "pl", ".", "Trainer", "(", "\n", "logger", "=", "logger", ",", "\n", "checkpoint_callback", "=", "False", ",", "\n", "accumulate_grad_batches", "=", "{", "0", ":", "1", ",", "2", ":", "4", ",", "18", ":", "64", "}", ",", "\n", "max_epochs", "=", "50", ",", "\n", "progress_bar_refresh_rate", "=", "0", "if", "args", ".", "slurm", "else", "1", ",", "\n", "callbacks", "=", "callbacks", ",", "\n", "gpus", "=", "1", ",", "\n", "distributed_backend", "=", "'dp'", ")", "\n", "trainer", ".", "fit", "(", "learner", ",", "dm", ")", "\n", "save_semantic_extractor", "(", "SE", ",", "f\"{DIR}/{args.G}_{args.SE}.pth\"", ")", "\n", "\n", "if", "args", ".", "eval", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.train.train_progressive_gan": [[133, 273], ["time.time", "dataset.load_dataset", "tfutil.Network.print_layers", "tfutil.Network.print_layers", "print", "tfutil.Optimizer", "tfutil.Optimizer", "range", "tfutil.Optimizer.apply_updates", "tfutil.Optimizer.apply_updates", "print", "train.setup_snapshot_image_grid", "train.TrainingSchedule", "G.clone.run", "print", "misc.create_result_subdir", "misc.save_image_grid", "misc.save_image_grid", "tensorflow.summary.FileWriter", "print", "int", "time.time", "misc.save_pkl", "tf.summary.FileWriter.close", "open().close", "tensorflow.device", "G.clone.setup_as_moving_average_of", "tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "dataset.load_dataset.get_minibatch_tf", "tensorflow.split", "tensorflow.split", "os.path.join", "os.path.join", "tf.summary.FileWriter.add_graph", "tfutil.Network.setup_weight_histograms", "tfutil.Network.setup_weight_histograms", "train.TrainingSchedule", "dataset.load_dataset.configure", "range", "os.path.join", "misc.locate_network_pkl", "print", "misc.load_pkl", "print", "tfutil.Network", "tfutil.Network", "tfutil.Network.clone", "tensorflow.name_scope", "tensorflow.device", "train.process_reals", "tfutil.Optimizer.register_gradients", "tfutil.Optimizer.register_gradients", "tensorflow.get_default_graph", "range", "tfutil.run", "time.time", "print", "tfutil.autosummary", "tfutil.autosummary", "tfutil.save_summaries", "time.time", "open", "tfutil.Network.clone", "tfutil.Network.clone", "tensorflow.assign", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.control_dependencies", "tfutil.call_func_by_name", "tensorflow.name_scope", "tensorflow.control_dependencies", "tfutil.call_func_by_name", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tfutil.Optimizer.reset_optimizer_state", "tfutil.Optimizer.reset_optimizer_state", "tfutil.run", "G.clone.run", "misc.save_image_grid", "misc.save_pkl", "os.path.join", "G_gpu.find_var", "D_gpu.find_var", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "os.path.join", "os.path.join", "tfutil.autosummary", "tfutil.autosummary", "tfutil.autosummary", "tfutil.autosummary", "misc.format_time", "tfutil.autosummary", "tfutil.autosummary", "tfutil.autosummary", "tfutil.autosummary"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.setup_snapshot_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_as_moving_average_of", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.process_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.save_summaries", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.__init__": [[35, 133], ["dict", "dict", "os.path.isdir", "sorted", "max", "int", "all", "all", "all", "all", "numpy.zeros", "glob.glob", "len", "tensorflow.python_io.TFRecordOptions", "tensorflow.python_io.tf_record_iterator", "sorted", "len", "numpy.log2", "numpy.load", "tensorflow.name_scope", "tensorflow.device", "tensorflow.placeholder", "tensorflow.zeros", "tensorflow.Variable", "tfutil.set_vars", "tensorflow.data.Dataset.from_tensor_slices", "zip", "tensorflow.data.Iterator.from_structure", "os.path.join", "tfr_shapes.append", "glob.glob", "os.path.isfile", "os.path.join", "os.path.isfile", "int", "tensorflow.data.TFRecordDataset", "dset.prefetch.prefetch.map", "tensorflow.data.Dataset.zip", "dset.prefetch.prefetch.batch", "dataset.TFRecordDataset._tf_iterator.make_initializer", "os.path.join", "numpy.prod", "numpy.log2", "zip", "range", "numpy.prod", "dset.prefetch.prefetch.shuffle", "dset.prefetch.prefetch.repeat", "dset.prefetch.prefetch.prefetch", "dataset.TFRecordDataset._tf_datasets.items", "dataset.parse_tfrecord_np", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.parse_tfrecord_np"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "val_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.configure": [[135, 142], ["int", "numpy.floor", "dataset.TFRecordDataset._tf_init_ops[].run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.get_minibatch_tf": [[144, 146], ["dataset.TFRecordDataset._tf_iterator.get_next"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.get_minibatch_np": [[148, 153], ["dataset.TFRecordDataset.configure", "tfutil.run", "dataset.TFRecordDataset.get_minibatch_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.get_random_labels_tf": [[155, 160], ["tensorflow.gather", "tensorflow.zeros", "tensorflow.random_uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.TFRecordDataset.get_random_labels_np": [[162, 167], ["numpy.zeros", "numpy.random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.__init__": [[172, 189], ["int", "numpy.log2", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "numpy.int32", "numpy.int32"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.configure": [[190, 194], ["int", "tfutil.set_vars", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.get_minibatch_tf": [[195, 202], ["tensorflow.name_scope", "tensorflow.cast", "dataset.SyntheticDataset._generate_images", "dataset.SyntheticDataset._generate_labels", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_images", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_labels"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.get_minibatch_np": [[203, 208], ["dataset.SyntheticDataset.configure", "tfutil.run", "dataset.SyntheticDataset.get_minibatch_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.get_random_labels_tf": [[209, 212], ["tensorflow.name_scope", "dataset.SyntheticDataset._generate_labels"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_labels"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset.get_random_labels_np": [[213, 218], ["dataset.SyntheticDataset.configure", "tfutil.run", "dataset.SyntheticDataset.get_random_labels_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset._generate_images": [[219, 221], ["tensorflow.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.SyntheticDataset._generate_labels": [[222, 224], ["tensorflow.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.parse_tfrecord_tf": [[17, 23], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["      ", "return", "self", ".", "z", "[", "idx", "]", "\n", "", "else", ":", "\n", "      ", "return", "torch", ".", "randn", "(", "self", ".", "latent_size", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.parse_tfrecord_np": [[24, 30], ["tensorflow.train.Example", "tf.train.Example.ParseFromString", "numpy.fromstring().reshape", "numpy.fromstring"], "function", ["None"], ["\n", "", "", "class", "NoiseDataModule", "(", "pl", ".", "LightningDataModule", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "train_size", "=", "1024", ",", "val_size", "=", "1024", ",", "latent_size", "=", "512", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_ds", "=", "NoiseDataset", "(", "train_size", ",", "latent_size", ")", "\n", "self", ".", "val_ds", "=", "NoiseDataset", "(", "val_size", ",", "latent_size", ",", "fixed", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.dataset.load_dataset": [[228, 240], ["dict", "os.path.join", "print", "tfutil.import_obj", "print", "print", "print", "numpy.int32().tolist", "numpy.int32"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_obj"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.loss.fp32": [[16, 21], ["tuple", "isinstance", "len", "tensorflow.cast", "len"], "function", ["None"], ["\n", "\n", "", "class", "FocalLoss", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "binary", "=", "False", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.loss.G_wgan_acgan": [[25, 39], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "loss.fp32", "D.get_output_for", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits_v2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], ["", "else", ":", "\n", "      ", "self", ".", "func", "=", "F", ".", "cross_entropy", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "loss", "=", "self", ".", "func", "(", "inputs", ",", "targets", ",", "reduction", "=", "'none'", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "-", "loss", ")", "\n", "focal_loss", "=", "self", ".", "alpha", "*", "(", "(", "1", "-", "pt", ")", ".", "pow", "(", "self", ".", "gamma", ")", "*", "loss", ")", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "      ", "return", "focal_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "      ", "return", "focal_loss", "\n", "\n", "\n", "", "", "", "def", "segloss", "(", "segs", ",", "label", ",", "loss_fn", ")", ":", "\n", "  ", "\"\"\"The final version of loss.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.loss.D_wgangp_acgan": [[43, 81], ["tensorflow.random_normal", "G.get_output_for", "loss.fp32", "loss.fp32", "tfutil.autosummary", "tfutil.autosummary", "D.get_output_for", "D.get_output_for", "tensorflow.name_scope", "tensorflow.random_uniform", "tfutil.lerp", "loss.fp32", "tfutil.autosummary", "opt.apply_loss_scaling", "opt.undo_loss_scaling", "tensorflow.sqrt", "tfutil.autosummary", "tensorflow.square", "tensorflow.name_scope", "tfutil.autosummary", "tensorflow.cast", "D.get_output_for", "tensorflow.reduce_sum", "loss.fp32", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.name_scope", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tensorflow.nn.softmax_cross_entropy_with_logits_v2", "tfutil.autosummary", "tfutil.autosummary", "tensorflow.square", "tensorflow.gradients"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["    ", "seg", "=", "op", ".", "bu", "(", "seg", ",", "size", ")", "if", "seg", ".", "size", "(", "2", ")", "!=", "size", "else", "seg", "\n", "segloss", ".", "append", "(", "loss_fn", "(", "seg", ",", "label", ")", ")", "\n", "", "return", "segloss", "\n", "\n", "\n", "", "def", "segloss_bce", "(", "segs", ",", "label", ",", "loss_fn_layer", ",", "loss_fn_final", ")", ":", "\n", "  ", "\"\"\"Use BCE for each layer. It is slow and CPU intensive.\"\"\"", "\n", "N", "=", "len", "(", "segs", "[", "0", "]", ")", "\n", "seglosses", "=", "[", "]", "\n", "for", "cat_id", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "segloss", "=", "[", "]", "\n", "onehot", "=", "int2onehot", "(", "label", "[", "cat_id", "]", ".", "unsqueeze", "(", "1", ")", ",", "segs", "[", "cat_id", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "# BCE loss", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "      ", "seg", "=", "segs", "[", "cat_id", "]", "[", "i", "]", "\n", "segloss", ".", "append", "(", "loss_fn_layer", "(", "seg", "if", "seg", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "seg", ",", "label", ".", "size", "(", "3", ")", ")", ",", "onehot", ")", ")", "\n", "# CE loss", "\n", "", "final", "=", "segs", "[", "cat_id", "]", "[", "-", "1", "]", "\n", "segloss", ".", "append", "(", "loss_fn_final", "(", "final", "if", "final", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "final", ",", "label", ".", "size", "(", "3", ")", ")", ",", "label", "[", "cat_id", "]", ")", ")", "\n", "seglosses", ".", "append", "(", "segloss", ")", "\n", "", "return", "seglosses", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.OutputLogger.__init__": [[89, 92], ["None"], "methods", ["None"], ["    ", "ext", "=", "\"PNG\"", "\n", "", "else", ":", "\n", "    ", "print", "(", "f\"!> Extension not found!\"", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.OutputLogger.set_log_file": [[93, 99], ["open", "misc.OutputLogger.file.write"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["    ", "Image", ".", "fromarray", "(", "image", ".", "astype", "(", "\"uint8\"", ")", ")", ".", "convert", "(", "format", ")", ".", "save", "(", "f", ",", "format", "=", "ext", ")", "\n", "\n", "\n", "### Evaluation Utilities ###", "\n", "\n", "\n", "", "", "def", "invert_dic", "(", "dic", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.OutputLogger.write": [[100, 105], ["misc.OutputLogger.file.write"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["  ", "idic", "=", "{", "}", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "if", "k2", "not", "in", "idic", ":", "\n", "        ", "idic", "[", "k2", "]", "=", "{", "}", "\n", "", "idic", "[", "k2", "]", "[", "k1", "]", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.OutputLogger.flush": [[106, 109], ["misc.OutputLogger.file.flush"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush"], ["", "", "return", "idic", "\n", "\n", "\n", "", "def", "max_key", "(", "dic", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.TeeOutputStream.__init__": [[111, 114], ["None"], "methods", ["None"], ["ind", "=", "np", ".", "argmax", "(", "[", "dic", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "return", "ind", ",", "keys", "[", "ind", "]", ",", "dic", "[", "keys", "[", "ind", "]", "]", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.TeeOutputStream.write": [[115, 120], ["stream.write", "misc.TeeOutputStream.flush"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush"], ["", "def", "print_table", "(", "t", ")", ":", "\n", "  ", "\"\"\"Print a table\n  \n  Args:\n    t : A 2D numpy array or a 2D list.\n  \"\"\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.TeeOutputStream.flush": [[121, 124], ["stream.flush"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush"], ["for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "len", "(", "t", "[", "0", "]", ")", ")", ":", "\n", "      ", "try", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.load_pkl": [[27, 30], ["open", "legacy.LegacyUnpickler().load", "legacy.LegacyUnpickler"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["\n", "if", "not", "use_cuda", ":", "\n", "    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "\n", "return", "0", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.save_pkl": [[31, 34], ["open", "pickle.dump"], "function", ["None"], ["", "assert", "isinstance", "(", "device_ids", ",", "str", ")", "\n", "if", "device_ids", ".", "lower", "(", ")", "==", "'all'", ":", "\n", "    ", "if", "'CUDA_VISIBLE_DEVICES'", "in", "os", ".", "environ", ":", "\n", "      ", "del", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.adjust_dynamic_range": [[38, 44], ["numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["None"], ["\n", "\n", "### Data I/O ###", "\n", "\n", "\n", "", "def", "read_ade20k_labels", "(", "fpath", "=", "\"figure/ade20k_labels.csv\"", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_image_grid": [[45, 61], ["numpy.zeros", "range", "tuple", "max", "max", "int", "list", "numpy.ceil", "numpy.sqrt"], "function", ["None"], ["\n", "lines", "=", "open", "(", "fpath", ",", "\"r\"", ")", ".", "readlines", "(", ")", "\n", "label_list", "=", "[", "l", ".", "split", "(", "\",\"", ")", "[", "-", "1", "]", ".", "split", "(", "\";\"", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "l", "in", "lines", "[", "1", ":", "]", "]", "\n", "return", "label_list", "\n", "\n", "\n", "", "def", "read_selected_labels", "(", "fpath", "=", "\"figure/selected_labels.csv\"", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.convert_to_pil_image": [[62, 74], ["misc.adjust_dynamic_range", "numpy.rint().clip().astype", "PIL.Image.fromarray", "image.transpose.transpose", "numpy.rint().clip", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range"], ["\n", "dic", "=", "{", "}", "\n", "with", "open", "(", "fpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "      ", "items", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "dic", "[", "items", "[", "0", "]", "]", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "items", "[", "1", ":", "]", "]", "\n", "", "", "return", "dic", "\n", "\n", "\n", "", "def", "imread", "(", "fpath", ")", ":", "\n", "  ", "\"\"\"Read image and returns a numpy array in [0, 255] scale.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.save_image": [[75, 81], ["misc.convert_to_pil_image", "convert_to_pil_image.save", "convert_to_pil_image.save"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.convert_to_pil_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n", "    ", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "\n", "\n", "", "", "def", "imwrite", "(", "fpath", ",", "image", ",", "format", "=", "\"RGB\"", ")", ":", "\n", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.save_image_grid": [[82, 84], ["convert_to_pil_image().save", "misc.convert_to_pil_image", "misc.create_image_grid"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.convert_to_pil_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.create_image_grid"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.init_output_logging": [[127, 133], ["misc.OutputLogger", "misc.TeeOutputStream", "misc.TeeOutputStream"], "function", ["None"], ["        ", "s", "+=", "f\"{t[i][j]:.3f}\\t\"", "\n", "", "", "print", "(", "s", ")", "\n", "\n", "\n", "", "", "def", "listkey_convert", "(", "name", ",", "listkey", ",", "output", "=", "None", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.set_output_log_file": [[134, 137], ["output_logger.set_log_file"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.OutputLogger.set_log_file"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.create_result_subdir": [[141, 176], ["print", "misc.set_output_log_file", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "os.makedirs", "open", "sorted", "os.path.basename", "int", "max", "os.path.isdir", "os.path.join", "config.__dict__.items", "k.startswith", "fout.write", "os.path.basename.find", "str"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.set_output_log_file", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write"], ["\n", "for", "i", ",", "key", "in", "enumerate", "(", "listkey", ")", ":", "\n", "    ", "if", "key", "in", "name", ":", "\n", "      ", "if", "output", "is", "not", "None", ":", "\n", "        ", "return", "output", "[", "i", "]", "\n", "", "return", "key", "\n", "", "", "return", "\"\"", "\n", "\n", "\n", "", "def", "aggregate_iou", "(", "res", ")", ":", "\n", "  ", "\"\"\"Aggregate IoU of each instance into a global mIoU and IoU.\n  \n  Args:\n    res : The result. Assumed to be a list. Item 1 is pixel accuracy, item 2\n          is IoU. -1 means the category is missing in both detection and GT.\n  Returns:\n    mIoU, class-wise IoU\n  \"\"\"", "\n", "ic_iou", "=", "torch", ".", "stack", "(", "[", "r", "[", "1", "]", "for", "r", "in", "res", "]", ")", "\n", "c_iou", "=", "torch", ".", "zeros", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", "\n", "for", "c", "in", "range", "(", "ic_iou", ".", "shape", "[", "1", "]", ")", ":", "\n", "    ", "val", "=", "ic_iou", "[", ":", ",", "c", "]", "\n", "val", "=", "val", "[", "val", ">", "-", "0.1", "]", "\n", "c_iou", "[", "c", "]", "=", "-", "1", "if", "val", ".", "shape", "[", "0", "]", "==", "0", "else", "val", ".", "mean", "(", ")", "\n", "", "mIoU", "=", "c_iou", "[", "c_iou", ">", "-", "1", "]", ".", "mean", "(", ")", "\n", "return", "mIoU", ",", "c_iou", "\n", "\n", "\n", "", "def", "formal_name", "(", "name", ")", ":", "\n", "  ", "\"\"\"Convert the naming in code to naming in paper.\"\"\"", "\n", "if", "type", "(", "name", ")", "is", "list", ":", "\n", "    ", "return", "[", "formal_name", "(", "n", ")", "for", "n", "in", "name", "]", "\n", "", "finds", "=", "[", "\"stylegan\"", ",", "\"pggan\"", ",", "\"bedroom\"", ",", "\"church\"", ",", "\"celebahq\"", ",", "\"ffhq\"", "]", "\n", "subs", "=", "[", "\"StyleGAN\"", ",", "\"PGGAN\"", ",", "\"Bedroom\"", ",", "\"Church\"", ",", "\"CelebAHQ\"", ",", "\"FFHQ\"", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.format_time": [[177, 183], ["int", "numpy.rint"], "function", ["None"], ["for", "find", ",", "sub", "in", "zip", "(", "finds", ",", "subs", ")", ":", "\n", "    ", "name", "=", "name", ".", "replace", "(", "find", ",", "sub", ")", "\n", "", "return", "name", "\n", "\n", "\n", "", "def", "enumerate_names", "(", "prev", "=", "[", "]", ",", "i", "=", "0", ",", "groups", "=", "[", "]", ")", ":", "\n", "  ", "res", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_result_subdir": [[187, 207], ["IOError", "isinstance", "os.path.isdir", "os.path.join", "os.path.isdir", "sorted", "os.path.join", "str", "isinstance", "str", "glob.glob", "len", "os.path.join", "os.path.isdir"], "function", ["None"], ["", "else", ":", "\n", "      ", "cur", "=", "prev", "\n", "\n", "", "if", "i", "<", "len", "(", "groups", ")", "-", "1", ":", "\n", "      ", "t", "=", "enumerate_names", "(", "cur", ",", "i", "+", "1", ",", "groups", ")", "\n", "res", ".", "extend", "(", "t", ")", "\n", "", "else", ":", "\n", "      ", "res", ".", "append", "(", "cur", ")", "\n", "", "", "return", "res", "\n", "\n", "\n", "", "def", "enumerate_args", "(", "prev", "=", "[", "]", ",", "i", "=", "0", ",", "groups", "=", "[", "]", ")", ":", "\n", "  ", "res", "=", "[", "]", "\n", "for", "key", "in", "groups", "[", "i", "]", ":", "\n", "    ", "if", "i", "<", "len", "(", "groups", ")", "-", "1", ":", "\n", "      ", "t", "=", "enumerate_args", "(", "prev", "+", "[", "key", "]", ",", "i", "+", "1", ",", "groups", ")", "\n", "res", ".", "extend", "(", "t", ")", "\n", "", "else", ":", "\n", "      ", "res", ".", "append", "(", "prev", "+", "[", "key", "]", ")", "\n", "", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.list_network_pkls": [[208, 216], ["misc.locate_result_subdir", "sorted", "glob.glob", "os.path.join", "len", "os.path.basename", "sorted.append"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_result_subdir"], ["\n", "", "def", "get_args_name", "(", "methods", "=", "[", "\"LSE\"", "]", ",", "loss_types", "=", "[", "\"normal\"", "]", ",", "ls", "=", "\"\"", ",", "\n", "layer_weights", "=", "[", "\"softplus\"", "]", ",", "lrs", "=", "\"\"", ",", "els", "=", "\"\"", ")", ":", "\n", "  ", "\"\"\"Format the arguments of SE into its name.\"\"\"", "\n", "for", "m", "in", "methods", ":", "\n", "    ", "for", "layer_weight", "in", "layer_weights", ":", "\n", "      ", "for", "loss_type", "in", "loss_types", ":", "\n", "        ", "for", "lr", "in", "lrs", ":", "\n", "          ", "yield", "f\"{m}_l{loss_type}_{ls}_{layer_weight}_{lr}_{els}\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_network_pkl": [[217, 233], ["misc.list_network_pkls", "IOError", "isinstance", "os.path.isfile", "len", "int", "os.path.splitext", "os.path.basename", "name.split"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.list_network_pkls"], ["\n", "\n", "", "", "", "", "", "def", "str_num", "(", "n", ",", "F", "=", "\"%.3f\"", ")", ":", "\n", "  ", "\"\"\"Formatting numerical values.\"\"\"", "\n", "return", "(", "F", "%", "n", ")", ".", "replace", "(", "\".000\"", ",", "\"\"", ")", "\n", "\n", "\n", "", "def", "get_dic_depth", "(", "dic", ")", ":", "\n", "  ", "\"\"\"Get the depth of a dict.\"\"\"", "\n", "v", "=", "next", "(", "iter", "(", "dic", ".", "values", "(", ")", ")", ")", "\n", "count", "=", "1", "\n", "while", "type", "(", "v", ")", "is", "dict", ":", "\n", "    ", "count", "+=", "1", "\n", "v", "=", "next", "(", "iter", "(", "v", ".", "values", "(", ")", ")", ")", "\n", "", "return", "count", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.get_id_string_for_network_pkl": [[234, 237], ["network_pkl.replace().replace().split", "network_pkl.replace().replace", "max", "network_pkl.replace", "len"], "function", ["None"], ["", "def", "trim_dic", "(", "dic", ")", ":", "\n", "  ", "\"\"\"Remove empty key-value pairs.\"\"\"", "\n", "for", "k", "in", "list", "(", "dic", ".", "keys", "(", ")", ")", ":", "\n", "    ", "if", "type", "(", "dic", "[", "k", "]", ")", "is", "dict", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.load_network_pkl": [[241, 243], ["misc.load_pkl", "misc.locate_network_pkl"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl"], ["        ", "trim_dic", "(", "dic", "[", "k", "]", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.random_latents": [[244, 249], ["random_state.randn().astype", "numpy.random.randn().astype", "random_state.randn", "numpy.random.randn"], "function", ["None"], ["", "", "", "", "def", "dic2table", "(", "dic", ",", "transpose", "=", "True", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.load_dataset_for_previous_run": [[250, 294], ["misc.locate_result_subdir", "dict", "dict.get", "dict.get", "parsed_cfg.get.get", "dataset_cfg.pop.replace().replace", "dataset_cfg.pop.replace().replace", "dataset_cfg.pop.replace().replace", "dataset_cfg.pop.replace().replace", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "re.sub", "re.sub", "parsed_cfg.get.update", "dataset.load_dataset", "open", "dict", "dict", "parsed_cfg.get.pop().replace", "parsed_cfg.get.pop", "parsed_cfg.get.pop", "parsed_cfg.get.pop", "os.path.join", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "dataset_cfg.pop.replace", "line.startswith", "line.startswith", "exec", "parsed_cfg.get.pop"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.locate_result_subdir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset"], ["\n", "strs", "=", "[", "]", "\n", "col_names", "=", "list", "(", "next", "(", "iter", "(", "dic", ".", "values", "(", ")", ")", ")", ".", "keys", "(", ")", ")", "\n", "ncols", "=", "len", "(", "col_names", ")", "+", "1", "\n", "strs", ".", "append", "(", "[", "\"\"", "]", "+", "col_names", ")", "\n", "for", "row_name", ",", "row_vals", "in", "dic", ".", "items", "(", ")", ":", "\n", "    ", "strs", ".", "append", "(", "[", "row_name", "]", "+", "[", "row_vals", "[", "k", "]", "for", "k", "in", "col_names", "]", ")", "\n", "", "if", "transpose", ":", "\n", "    ", "nstrs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "len", "(", "strs", "[", "0", "]", ")", ")", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "0", "]", ")", ")", ":", "\n", "      ", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "        ", "nstrs", "[", "j", "]", ".", "append", "(", "strs", "[", "i", "]", "[", "j", "]", ")", "\n", "", "", "return", "nstrs", "\n", "", "return", "strs", "\n", "\n", "\n", "", "def", "str_table_single", "(", "dic", ")", ":", "\n", "  ", "strs", "=", "[", "]", "\n", "for", "row_name", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "if", "len", "(", "strs", ")", "==", "0", ":", "# table header", "\n", "      ", "strs", ".", "append", "(", "[", "]", "+", "list", "(", "dic", "[", "row_name", "]", ".", "keys", "(", ")", ")", ")", "\n", "", "s", "=", "[", "row_name", "]", "\n", "for", "col_name", "in", "dic", "[", "row_name", "]", ".", "keys", "(", ")", ":", "\n", "      ", "s", ".", "append", "(", "f\"{dic[row_name][col_name]*100:.2f}\"", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "", "return", "strs", "\n", "\n", "\n", "", "def", "str_table_multiple", "(", "dic", ",", "T", "=", "0", ")", ":", "# group, G, method", "\n", "  ", "groups", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "# 1st column name", "\n", "def", "latex_header", "(", "n", ")", ":", "\n", "    ", "return", "f\"\\\\multicolumn\"", "+", "\"{\"", "+", "str", "(", "n", ")", "+", "\"}\"", "+", "\"{c|}\"", "\n", "", "strs", "=", "[", "[", "\"Generator\"", "]", "+", "[", "f\"{latex_header(len(dic[g].keys()))}\"", "+", "\"{\"", "+", "formal_name", "(", "g", ")", "+", "\"}\"", "for", "g", "in", "groups", "]", "]", "\n", "s", "=", "[", "\"Dataset\"", "]", "\n", "for", "g", "in", "groups", ":", "\n", "    ", "Gs", "=", "list", "(", "dic", "[", "groups", "[", "0", "]", "]", ".", "keys", "(", ")", ")", "# 2nd column name", "\n", "s", ".", "extend", "(", "formal_name", "(", "Gs", ")", ")", "\n", "", "strs", ".", "append", "(", "s", ")", "\n", "\n", "s_", "=", "[", "]", "\n", "for", "group", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "ds", "in", "dic", "[", "group", "]", ".", "keys", "(", ")", ":", "\n", "      ", "print", "(", "group", ",", "ds", ",", "dic", "[", "group", "]", "[", "ds", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.apply_mirror_augment": [[295, 300], ["numpy.array", "numpy.random.rand"], "function", ["None"], ["best_ind", ",", "best_method", ",", "best_val", "=", "max_key", "(", "dic", "[", "group", "]", "[", "ds", "]", ")", "\n", "for", "i", ",", "method", "in", "enumerate", "(", "dic", "[", "group", "]", "[", "ds", "]", ".", "keys", "(", ")", ")", ":", "\n", "        ", "acc", "=", "f\"{dic[group][ds][method] * 100:.1f}\"", "\n", "comp", "=", "(", "dic", "[", "group", "]", "[", "ds", "]", "[", "method", "]", "-", "best_val", ")", "/", "best_val", "*", "100", "\n", "if", "best_method", "==", "method", ":", "\n", "          ", "item_str", "=", "\"\\\\textbf{\"", "+", "acc", "+", "\"}\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.draw_text_label": [[306, 318], ["numpy.array().flatten().astype", "misc.setup_text_label", "numpy.array", "int", "int", "max", "max", "min", "min", "numpy.array().flatten", "numpy.rint", "numpy.rint", "numpy.array"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.setup_text_label", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.flatten"], ["", "", "", "strs", ".", "extend", "(", "s_", ")", "\n", "return", "strs", "\n", "\n", "\n", "", "def", "str_latex_table", "(", "strs", ")", ":", "\n", "  ", "\"\"\"Format a string table to a latex table.\n  \n  Args:\n    strs : A 2D string table. Each item is a cell.\n  Returns:\n    A single string for the latex table.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.misc.setup_text_label": [[319, 343], ["moviepy.editor.TextClip().mask.make_frame", "numpy.pad", "scipy.ndimage.gaussian_filter", "len", "_text_label_cache.popitem", "numpy.maximum", "moviepy.editor.TextClip"], "function", ["None"], ["    ", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "i", "]", ")", ")", ":", "\n", "      ", "if", "\"_\"", "in", "strs", "[", "i", "]", "[", "j", "]", ":", "\n", "        ", "strs", "[", "i", "]", "[", "j", "]", "=", "strs", "[", "i", "]", "[", "j", "]", ".", "replace", "(", "\"_\"", ",", "\"-\"", ")", "\n", "\n", "", "", "ncols", "=", "len", "(", "strs", "[", "0", "]", ")", "\n", "seps", "=", "\"\"", ".", "join", "(", "[", "\"c\"", "for", "i", "in", "range", "(", "ncols", ")", "]", ")", "\n", "s", "=", "[", "]", "\n", "s", ".", "append", "(", "\"\\\\begin{table}\"", ")", "\n", "s", ".", "append", "(", "\"\\\\centering\"", ")", "\n", "s", ".", "append", "(", "\"\\\\begin{tabular}{%s}\"", "%", "seps", ")", "\n", "s", ".", "append", "(", "\" & \"", ".", "join", "(", "strs", "[", "0", "]", ")", "+", "\" \\\\\\\\\\\\hline\"", ")", "\n", "for", "line", "in", "strs", "[", "1", ":", "]", ":", "\n", "      ", "s", ".", "append", "(", "\" & \"", ".", "join", "(", "line", ")", "+", "\" \\\\\\\\\"", ")", "\n", "", "s", ".", "append", "(", "\"\\\\end{tabular}\"", ")", "\n", "s", ".", "append", "(", "\"\\\\end{table}\"", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "strs", ")", ")", ":", "\n", "      ", "for", "j", "in", "range", "(", "len", "(", "strs", "[", "i", "]", ")", ")", ":", "\n", "        ", "if", "\"_\"", "in", "strs", "[", "i", "]", "[", "j", "]", ":", "\n", "          ", "strs", "[", "i", "]", "[", "j", "]", "=", "strs", "[", "i", "]", "[", "j", "]", ".", "replace", "(", "\"\\\\_\"", ",", "\"_\"", ")", "\n", "\n", "", "", "", "", "return", "\"\\n\"", ".", "join", "(", "s", ")", "\n", "\n", "\n", "", "def", "str_csv_table", "(", "strs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.legacy.LegacyUnpickler.__init__": [[20, 22], ["pickle.Unpickler.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.legacy.LegacyUnpickler.find_class": [[23, 27], ["super().find_class"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.legacy.LegacyUnpickler.find_class"], ["", "def", "find_class", "(", "self", ",", "module", ",", "name", ")", ":", "\n", "        ", "if", "module", "==", "'network'", "and", "name", "==", "'Network'", ":", "\n", "            ", "return", "tfutil", ".", "Network", "\n", "", "return", "super", "(", ")", ".", "find_class", "(", "module", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.legacy.patch_theano_gan": [[38, 95], ["dict", "dict.pop", "dict.get", "int", "dict.get", "dict.pop", "iter", "numpy.sqrt", "spec.pop.startswith", "spec.pop.startswith", "numpy.log2", "dict.pop", "dict.pop", "dict.pop", "dict.pop", "dict.pop", "dict.pop", "dict.pop", "w.reshape", "legacy.patch_theano_gan.layer"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["def", "patch_theano_gan", "(", "state", ")", ":", "\n", "    ", "if", "'version'", "in", "state", "or", "state", "[", "'build_func_spec'", "]", "[", "'func'", "]", "not", "in", "theano_gan_remap", ":", "\n", "        ", "return", "state", "\n", "\n", "", "spec", "=", "dict", "(", "state", "[", "'build_func_spec'", "]", ")", "\n", "func", "=", "spec", ".", "pop", "(", "'func'", ")", "\n", "resolution", "=", "spec", ".", "get", "(", "'resolution'", ",", "32", ")", "\n", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "use_wscale", "=", "spec", ".", "get", "(", "'use_wscale'", ",", "True", ")", "\n", "\n", "assert", "spec", ".", "pop", "(", "'label_size'", ",", "0", ")", "==", "0", "\n", "assert", "spec", ".", "pop", "(", "'use_batchnorm'", ",", "False", ")", "==", "False", "\n", "assert", "spec", ".", "pop", "(", "'tanh_at_end'", ",", "None", ")", "is", "None", "\n", "assert", "spec", ".", "pop", "(", "'mbstat_func'", ",", "'Tstdeps'", ")", "==", "'Tstdeps'", "\n", "assert", "spec", ".", "pop", "(", "'mbstat_avg'", ",", "'all'", ")", "==", "'all'", "\n", "assert", "spec", ".", "pop", "(", "'mbdisc_kernels'", ",", "None", ")", "is", "None", "\n", "spec", ".", "pop", "(", "'use_gdrop'", ",", "True", ")", "# doesn't make a difference", "\n", "assert", "spec", ".", "pop", "(", "'use_layernorm'", ",", "False", ")", "==", "False", "\n", "spec", "[", "'fused_scale'", "]", "=", "False", "\n", "spec", "[", "'mbstd_group_size'", "]", "=", "16", "\n", "\n", "vars", "=", "[", "]", "\n", "param_iter", "=", "iter", "(", "state", "[", "'param_values'", "]", ")", "\n", "relu", "=", "np", ".", "sqrt", "(", "2", ")", ";", "linear", "=", "1.0", "\n", "def", "flatten2", "(", "w", ")", ":", "return", "w", ".", "reshape", "(", "w", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "def", "he_std", "(", "gain", ",", "w", ")", ":", "return", "gain", "/", "np", ".", "sqrt", "(", "np", ".", "prod", "(", "w", ".", "shape", "[", ":", "-", "1", "]", ")", ")", "\n", "def", "wscale", "(", "gain", ",", "w", ")", ":", "return", "w", "*", "next", "(", "param_iter", ")", "/", "he_std", "(", "gain", ",", "w", ")", "if", "use_wscale", "else", "w", "\n", "def", "layer", "(", "name", ",", "gain", ",", "w", ")", ":", "return", "[", "(", "name", "+", "'/weight'", ",", "wscale", "(", "gain", ",", "w", ")", ")", ",", "(", "name", "+", "'/bias'", ",", "next", "(", "param_iter", ")", ")", "]", "\n", "\n", "if", "func", ".", "startswith", "(", "'G'", ")", ":", "\n", "        ", "vars", "+=", "layer", "(", "'4x4/Dense'", ",", "relu", "/", "4", ",", "flatten2", "(", "next", "(", "param_iter", ")", ".", "transpose", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", ")", "\n", "vars", "+=", "layer", "(", "'4x4/Conv'", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "vars", "+=", "layer", "(", "'%dx%d/Conv0'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "vars", "+=", "layer", "(", "'%dx%d/Conv1'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "", "for", "lod", "in", "range", "(", "0", ",", "resolution_log2", "-", "1", ")", ":", "\n", "            ", "vars", "+=", "layer", "(", "'ToRGB_lod%d'", "%", "lod", ",", "linear", ",", "next", "(", "param_iter", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "\n", "", "", "if", "func", ".", "startswith", "(", "'D'", ")", ":", "\n", "        ", "vars", "+=", "layer", "(", "'FromRGB_lod0'", ",", "relu", ",", "next", "(", "param_iter", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "vars", "+=", "layer", "(", "'%dx%d/Conv0'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "vars", "+=", "layer", "(", "'%dx%d/Conv1'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "vars", "+=", "layer", "(", "'FromRGB_lod%d'", "%", "(", "resolution_log2", "-", "(", "res", "-", "1", ")", ")", ",", "relu", ",", "next", "(", "param_iter", ")", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "", "vars", "+=", "layer", "(", "'4x4/Conv'", ",", "relu", ",", "next", "(", "param_iter", ")", ".", "transpose", "(", "2", ",", "3", ",", "1", ",", "0", ")", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", "\n", "vars", "+=", "layer", "(", "'4x4/Dense0'", ",", "relu", ",", "flatten2", "(", "next", "(", "param_iter", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ")", ".", "transpose", "(", ")", ")", "\n", "vars", "+=", "layer", "(", "'4x4/Dense1'", ",", "linear", ",", "next", "(", "param_iter", ")", ")", "\n", "\n", "", "vars", "+=", "[", "(", "'lod'", ",", "state", "[", "'toplevel_params'", "]", "[", "'cur_lod'", "]", ")", "]", "\n", "\n", "return", "{", "\n", "'version'", ":", "2", ",", "\n", "'name'", ":", "func", ",", "\n", "'build_module_src'", ":", "inspect", ".", "getsource", "(", "networks", ")", ",", "\n", "'build_func_name'", ":", "theano_gan_remap", "[", "func", "]", ",", "\n", "'static_kwargs'", ":", "spec", ",", "\n", "'variables'", ":", "vars", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.legacy.ignore_unknown_theano_network": [[102, 114], ["print"], "function", ["None"], ["def", "ignore_unknown_theano_network", "(", "state", ")", ":", "\n", "    ", "if", "'version'", "in", "state", ":", "\n", "        ", "return", "state", "\n", "\n", "", "print", "(", "'Ignoring unknown Theano network:'", ",", "state", "[", "'build_func_spec'", "]", "[", "'func'", "]", ")", "\n", "return", "{", "\n", "'version'", ":", "2", ",", "\n", "'name'", ":", "'Dummy'", ",", "\n", "'build_module_src'", ":", "'def dummy(input, **kwargs): input.set_shape([None, 1]); return input'", ",", "\n", "'build_func_name'", ":", "'dummy'", ",", "\n", "'static_kwargs'", ":", "{", "}", ",", "\n", "'variables'", ":", "[", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.__init__": [[250, 256], ["os.path.join", "frechet_inception_distance.check_or_download_inception", "tensorflow.get_default_session", "frechet_inception_distance.create_inception_graph"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.check_or_download_inception", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.create_inception_graph"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "image_shape", ",", "image_dtype", ",", "minibatch_size", ")", ":", "\n", "        ", "import", "config", "\n", "self", ".", "network_dir", "=", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'_inception_fid'", ")", "\n", "self", ".", "network_file", "=", "check_or_download_inception", "(", "self", ".", "network_dir", ")", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "create_inception_graph", "(", "self", ".", "network_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.get_metric_names": [[257, 259], ["None"], "methods", ["None"], ["", "def", "get_metric_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'FID'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.get_metric_formatting": [[260, 262], ["None"], "methods", ["None"], ["", "def", "get_metric_formatting", "(", "self", ")", ":", "\n", "        ", "return", "[", "'%-10.4f'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.begin": [[263, 266], ["None"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'warmup'", ",", "'reals'", ",", "'fakes'", "]", "\n", "self", ".", "activations", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.feed": [[267, 270], ["frechet_inception_distance.get_activations", "frechet_inception_distance.API.activations.append", "minibatch.transpose"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.get_activations"], ["", "def", "feed", "(", "self", ",", "mode", ",", "minibatch", ")", ":", "\n", "        ", "act", "=", "get_activations", "(", "minibatch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "self", ".", "sess", ",", "batch_size", "=", "minibatch", ".", "shape", "[", "0", "]", ")", "\n", "self", ".", "activations", ".", "append", "(", "act", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.API.end": [[271, 280], ["numpy.concatenate", "numpy.mean", "numpy.cov", "frechet_inception_distance.calculate_frechet_distance"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_frechet_distance"], ["", "def", "end", "(", "self", ",", "mode", ")", ":", "\n", "        ", "act", "=", "np", ".", "concatenate", "(", "self", ".", "activations", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "if", "mode", "in", "[", "'warmup'", ",", "'reals'", "]", ":", "\n", "            ", "self", ".", "mu_real", "=", "mu", "\n", "self", ".", "sigma_real", "=", "sigma", "\n", "", "fid", "=", "calculate_frechet_distance", "(", "mu", ",", "sigma", ",", "self", ".", "mu_real", ",", "self", ".", "sigma_real", ")", "\n", "return", "[", "fid", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.create_inception_graph": [[52, 59], ["tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "f.read"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read"], ["", "def", "create_inception_graph", "(", "pth", ")", ":", "\n", "    ", "\"\"\"Creates a graph from saved GraphDef file.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "pth", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'FID_Inception_Net'", ")", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance._get_inception_layer": [[64, 85], ["sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "o.get_shape", "enumerate", "tensorflow.TensorShape", "new_shape.append", "new_shape.append", "tensorflow.TensorShape"], "function", ["None"], ["", "", "def", "_get_inception_layer", "(", "sess", ")", ":", "\n", "    ", "\"\"\"Prepares inception net for batched usage and returns pool_3 layer. \"\"\"", "\n", "layername", "=", "'FID_Inception_Net/pool_3:0'", "\n", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "layername", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "if", "shape", ".", "_dims", "is", "not", "None", ":", "\n", "              ", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                  ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                  ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "try", ":", "\n", "                ", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "o", ".", "_shape_val", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "# EDIT: added for compatibility with tensorflow 1.6.0", "\n", "", "", "", "", "return", "pool3", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.get_activations": [[88, 122], ["frechet_inception_distance._get_inception_layer", "numpy.empty", "range", "print", "sess.run", "sess.run.reshape", "print", "print"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance._get_inception_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "get_activations", "(", "images", ",", "sess", ",", "batch_size", "=", "50", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 256.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the disposable hardware.\n    -- verbose    : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, 2048) that contains the\n       activations of the given tensor when feeding inception with the query tensor.\n    \"\"\"", "\n", "inception_layer", "=", "_get_inception_layer", "(", "sess", ")", "\n", "d0", "=", "images", ".", "shape", "[", "0", "]", "\n", "if", "batch_size", ">", "d0", ":", "\n", "        ", "print", "(", "\"warning: batch size is bigger than the data size. setting batch size to data size\"", ")", "\n", "batch_size", "=", "d0", "\n", "", "n_batches", "=", "d0", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "2048", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"\\rPropagating batch %d/%d\"", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "batch", "=", "images", "[", "start", ":", "end", "]", "\n", "pred", "=", "sess", ".", "run", "(", "inception_layer", ",", "{", "'FID_Inception_Net/ExpandDims:0'", ":", "batch", "}", ")", "\n", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "\" done\"", ")", "\n", "", "return", "pred_arr", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_frechet_distance": [[125, 153], ["numpy.square().sum", "scipy.linalg.sqrtm", "numpy.real", "numpy.dot", "numpy.trace", "numpy.square"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Params:\n    -- mu1 : Numpy array containing the activations of the pool_3 layer of the\n             inception net ( like returned by the function 'get_predictions')\n    -- mu2   : The sample mean over activations of the pool_3 layer, precalcualted\n               on an representive data set.\n    -- sigma2: The covariance matrix over activations of the pool_3 layer,\n               precalcualted on an representive data set.\n\n    Returns:\n    -- dist  : The Frechet Distance.\n\n    Raises:\n    -- InvalidFIDException if nan occures.\n    \"\"\"", "\n", "m", "=", "np", ".", "square", "(", "mu1", "-", "mu2", ")", ".", "sum", "(", ")", "\n", "#s = sp.linalg.sqrtm(np.dot(sigma1, sigma2)) # EDIT: commented out", "\n", "s", ",", "_", "=", "sp", ".", "linalg", ".", "sqrtm", "(", "np", ".", "dot", "(", "sigma1", ",", "sigma2", ")", ",", "disp", "=", "False", ")", "# EDIT: added", "\n", "dist", "=", "m", "+", "np", ".", "trace", "(", "sigma1", "+", "sigma2", "-", "2", "*", "s", ")", "\n", "#if np.isnan(dist): # EDIT: commented out", "\n", "#    raise InvalidFIDException(\"nan occured in distance calculation.\") # EDIT: commented out", "\n", "#return dist # EDIT: commented out", "\n", "return", "np", ".", "real", "(", "dist", ")", "# EDIT: added", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_activation_statistics": [[156, 176], ["frechet_inception_distance.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.get_activations"], ["", "def", "calculate_activation_statistics", "(", "images", ",", "sess", ",", "batch_size", "=", "50", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- images      : Numpy array of dimension (n_images, hi, wi, 3). The values\n                     must lie between 0 and 255.\n    -- sess        : current session\n    -- batch_size  : the images numpy array is split into batches with batch size\n                     batch_size. A reasonable batch size depends on the available hardware.\n    -- verbose     : If set to True and parameter out_step is given, the number of calculated\n                     batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the incption model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the incption model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "images", ",", "sess", ",", "batch_size", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "#-------------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.check_or_download_inception": [[184, 200], ["pathlib.Path", "str", "model_file.exists", "print", "request.urlretrieve", "tarfile.open", "f.extract", "str"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.extract"], ["", "def", "check_or_download_inception", "(", "inception_path", ")", ":", "\n", "    ", "''' Checks if the path to the inception file is valid, or downloads\n        the file if it is not present. '''", "\n", "INCEPTION_URL", "=", "'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'", "\n", "if", "inception_path", "is", "None", ":", "\n", "        ", "inception_path", "=", "'/tmp'", "\n", "", "inception_path", "=", "pathlib", ".", "Path", "(", "inception_path", ")", "\n", "model_file", "=", "inception_path", "/", "'classify_image_graph_def.pb'", "\n", "if", "not", "model_file", ".", "exists", "(", ")", ":", "\n", "        ", "print", "(", "\"Downloading Inception model\"", ")", "\n", "from", "urllib", "import", "request", "\n", "import", "tarfile", "\n", "fn", ",", "_", "=", "request", ".", "urlretrieve", "(", "INCEPTION_URL", ")", "\n", "with", "tarfile", ".", "open", "(", "fn", ",", "mode", "=", "'r'", ")", "as", "f", ":", "\n", "            ", "f", ".", "extract", "(", "'classify_image_graph_def.pb'", ",", "str", "(", "model_file", ".", "parent", ")", ")", "\n", "", "", "return", "str", "(", "model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance._handle_path": [[202, 213], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "numpy.array", "frechet_inception_distance.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob", "scipy.misc.imread().astype", "scipy.misc.imread", "str"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_activation_statistics", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.imread"], ["", "def", "_handle_path", "(", "path", ",", "sess", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "x", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "fn", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "for", "fn", "in", "files", "]", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "x", ",", "sess", ")", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_fid_given_paths": [[215, 230], ["frechet_inception_distance.check_or_download_inception", "frechet_inception_distance.create_inception_graph", "str", "tensorflow.Session", "sess.run", "frechet_inception_distance._handle_path", "frechet_inception_distance._handle_path", "frechet_inception_distance.calculate_frechet_distance", "os.path.exists", "RuntimeError", "tensorflow.global_variables_initializer"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.check_or_download_inception", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.create_inception_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance._handle_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance._handle_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "inception_path", ")", ":", "\n", "    ", "''' Calculates the FID of two paths. '''", "\n", "inception_path", "=", "check_or_download_inception", "(", "inception_path", ")", "\n", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"Invalid path: %s\"", "%", "p", ")", "\n", "\n", "", "", "create_inception_graph", "(", "str", "(", "inception_path", ")", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "m1", ",", "s1", "=", "_handle_path", "(", "paths", "[", "0", "]", ",", "sess", ")", "\n", "m2", ",", "s2", "=", "_handle_path", "(", "paths", "[", "1", "]", ",", "sess", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.__init__": [[122, 127], ["os.path.join", "tensorflow.get_default_session", "inception_score._init_inception", "globals"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score._init_inception"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "image_shape", ",", "image_dtype", ",", "minibatch_size", ")", ":", "\n", "        ", "import", "config", "\n", "globals", "(", ")", "[", "'MODEL_DIR'", "]", "=", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'_inception'", ")", "\n", "self", ".", "sess", "=", "tf", ".", "get_default_session", "(", ")", "\n", "_init_inception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.get_metric_names": [[128, 130], ["None"], "methods", ["None"], ["", "def", "get_metric_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'IS_mean'", ",", "'IS_std'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.get_metric_formatting": [[131, 133], ["None"], "methods", ["None"], ["", "def", "get_metric_formatting", "(", "self", ")", ":", "\n", "        ", "return", "[", "'%-10.4f'", ",", "'%-10.4f'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.begin": [[134, 137], ["None"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'warmup'", ",", "'reals'", ",", "'fakes'", "]", "\n", "self", ".", "images", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.feed": [[138, 140], ["inception_score.API.images.append", "minibatch.transpose"], "methods", ["None"], ["", "def", "feed", "(", "self", ",", "mode", ",", "minibatch", ")", ":", "\n", "        ", "self", ".", "images", ".", "append", "(", "minibatch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.API.end": [[141, 146], ["list", "numpy.concatenate", "inception_score.API.sess.as_default", "inception_score.get_inception_score"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.get_inception_score"], ["", "def", "end", "(", "self", ",", "mode", ")", ":", "\n", "        ", "images", "=", "list", "(", "np", ".", "concatenate", "(", "self", ".", "images", ")", ")", "\n", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "            ", "mean", ",", "std", "=", "get_inception_score", "(", "images", ")", "\n", "", "return", "[", "mean", ",", "std", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.get_inception_score": [[41, 70], ["type", "type", "len", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.expand_dims", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "#assert(np.max(images[0]) > 10) # EDIT: commented out", "\n", "#assert(np.min(images[0]) >= 0.0)", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "#sys.stdout.write(\".\") # EDIT: commented out", "\n", "#sys.stdout.flush()", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "      ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score._init_inception": [[72, 114], ["os.path.join", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tarfile.open().extractall", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "os.path.join", "f.read", "tensorflow.squeeze", "tarfile.open", "o.get_shape", "enumerate", "sess.graph.get_operation_by_name", "tensorflow.TensorShape", "new_shape.append", "new_shape.append", "tensorflow.TensorShape", "float", "float"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read"], ["", "", "def", "_init_inception", "(", ")", ":", "\n", "  ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "# EDIT: increased indent", "\n", "", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                    ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "try", ":", "\n", "                ", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "except", "ValueError", ":", "\n", "                ", "o", ".", "_shape_val", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "# EDIT: added for compatibility with tensorflow 1.6.0", "\n", "", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.__init__": [[177, 180], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "image_shape", ",", "image_dtype", ",", "minibatch_size", ")", ":", "\n", "        ", "assert", "num_images", "%", "2", "==", "0", "and", "minibatch_size", "%", "2", "==", "0", "\n", "self", ".", "num_pairs", "=", "num_images", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.get_metric_names": [[181, 183], ["None"], "methods", ["None"], ["", "def", "get_metric_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'MS-SSIM'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.get_metric_formatting": [[184, 186], ["None"], "methods", ["None"], ["", "def", "get_metric_formatting", "(", "self", ")", ":", "\n", "        ", "return", "[", "'%-10.4f'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.begin": [[187, 190], ["None"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'warmup'", ",", "'reals'", ",", "'fakes'", "]", "\n", "self", ".", "sum", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.feed": [[191, 195], ["minibatch.transpose", "ms_ssim.msssim"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.msssim"], ["", "def", "feed", "(", "self", ",", "mode", ",", "minibatch", ")", ":", "\n", "        ", "images", "=", "minibatch", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "score", "=", "msssim", "(", "images", "[", "0", ":", ":", "2", "]", ",", "images", "[", "1", ":", ":", "2", "]", ")", "\n", "self", ".", "sum", "+=", "score", "*", "(", "images", ".", "shape", "[", "0", "]", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.API.end": [[196, 199], ["None"], "methods", ["None"], ["", "def", "end", "(", "self", ",", "mode", ")", ":", "\n", "        ", "avg", "=", "self", ".", "sum", "/", "self", ".", "num_pairs", "\n", "return", "[", "avg", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._FSpecialGauss": [[25, 37], ["numpy.exp", "len", "np.exp.sum"], "function", ["None"], ["def", "_FSpecialGauss", "(", "size", ",", "sigma", ")", ":", "\n", "    ", "\"\"\"Function to mimic the 'fspecial' gaussian MATLAB function.\"\"\"", "\n", "radius", "=", "size", "//", "2", "\n", "offset", "=", "0.0", "\n", "start", ",", "stop", "=", "-", "radius", ",", "radius", "+", "1", "\n", "if", "size", "%", "2", "==", "0", ":", "\n", "        ", "offset", "=", "0.5", "\n", "stop", "-=", "1", "\n", "", "x", ",", "y", "=", "np", ".", "mgrid", "[", "offset", "+", "start", ":", "stop", ",", "offset", "+", "start", ":", "stop", "]", "\n", "assert", "len", "(", "x", ")", "==", "size", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "**", "2", "+", "y", "**", "2", ")", "/", "(", "2.0", "*", "sigma", "**", "2", ")", ")", ")", "\n", "return", "g", "/", "g", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._SSIMForMultiScale": [[38, 109], ["img1.astype.astype", "img2.astype.astype", "min", "numpy.mean", "numpy.mean", "RuntimeError", "RuntimeError", "numpy.reshape", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "scipy.signal.fftconvolve", "ms_ssim._FSpecialGauss"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._FSpecialGauss"], ["", "def", "_SSIMForMultiScale", "(", "img1", ",", "img2", ",", "max_val", "=", "255", ",", "filter_size", "=", "11", ",", "filter_sigma", "=", "1.5", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ")", ":", "\n", "    ", "\"\"\"Return the Structural Similarity Map between `img1` and `img2`.\n\n    This function attempts to match the functionality of ssim_index_new.m by\n    Zhou Wang: http://www.cns.nyu.edu/~lcv/ssim/msssim.zip\n\n    Arguments:\n        img1: Numpy array holding the first RGB image batch.\n        img2: Numpy array holding the second RGB image batch.\n        max_val: the dynamic range of the images (i.e., the difference between the\n            maximum the and minimum allowed values).\n        filter_size: Size of blur kernel to use (will be reduced for small images).\n        filter_sigma: Standard deviation for Gaussian blur kernel (will be reduced\n            for small images).\n        k1: Constant used to maintain stability in the SSIM calculation (0.01 in\n            the original paper).\n        k2: Constant used to maintain stability in the SSIM calculation (0.03 in\n            the original paper).\n\n    Returns:\n        Pair containing the mean SSIM and contrast sensitivity between `img1` and\n        `img2`.\n\n    Raises:\n        RuntimeError: If input images don't have the same shape or don't have four\n            dimensions: [batch_size, height, width, depth].\n    \"\"\"", "\n", "if", "img1", ".", "shape", "!=", "img2", ".", "shape", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have the same shape (%s vs. %s).'", "%", "(", "img1", ".", "shape", ",", "img2", ".", "shape", ")", ")", "\n", "", "if", "img1", ".", "ndim", "!=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have four dimensions, not %d'", "%", "img1", ".", "ndim", ")", "\n", "\n", "", "img1", "=", "img1", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img2", "=", "img2", ".", "astype", "(", "np", ".", "float32", ")", "\n", "_", ",", "height", ",", "width", ",", "_", "=", "img1", ".", "shape", "\n", "\n", "# Filter size can't be larger than height or width of images.", "\n", "size", "=", "min", "(", "filter_size", ",", "height", ",", "width", ")", "\n", "\n", "# Scale down sigma if a smaller filter size is used.", "\n", "sigma", "=", "size", "*", "filter_sigma", "/", "filter_size", "if", "filter_size", "else", "0", "\n", "\n", "if", "filter_size", ":", "\n", "        ", "window", "=", "np", ".", "reshape", "(", "_FSpecialGauss", "(", "size", ",", "sigma", ")", ",", "(", "1", ",", "size", ",", "size", ",", "1", ")", ")", "\n", "mu1", "=", "signal", ".", "fftconvolve", "(", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "mu2", "=", "signal", ".", "fftconvolve", "(", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma11", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img1", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma22", "=", "signal", ".", "fftconvolve", "(", "img2", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "sigma12", "=", "signal", ".", "fftconvolve", "(", "img1", "*", "img2", ",", "window", ",", "mode", "=", "'valid'", ")", "\n", "", "else", ":", "\n", "# Empty blur kernel so no need to convolve.", "\n", "        ", "mu1", ",", "mu2", "=", "img1", ",", "img2", "\n", "sigma11", "=", "img1", "*", "img1", "\n", "sigma22", "=", "img2", "*", "img2", "\n", "sigma12", "=", "img1", "*", "img2", "\n", "\n", "", "mu11", "=", "mu1", "*", "mu1", "\n", "mu22", "=", "mu2", "*", "mu2", "\n", "mu12", "=", "mu1", "*", "mu2", "\n", "sigma11", "-=", "mu11", "\n", "sigma22", "-=", "mu22", "\n", "sigma12", "-=", "mu12", "\n", "\n", "# Calculate intermediate values used by both ssim and cs_map.", "\n", "c1", "=", "(", "k1", "*", "max_val", ")", "**", "2", "\n", "c2", "=", "(", "k2", "*", "max_val", ")", "**", "2", "\n", "v1", "=", "2.0", "*", "sigma12", "+", "c2", "\n", "v2", "=", "sigma11", "+", "sigma22", "+", "c2", "\n", "ssim", "=", "np", ".", "mean", "(", "(", "(", "(", "2.0", "*", "mu12", "+", "c1", ")", "*", "v1", ")", "/", "(", "(", "mu11", "+", "mu22", "+", "c1", ")", "*", "v2", ")", ")", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "# Return for each image individually.", "\n", "cs", "=", "np", ".", "mean", "(", "v1", "/", "v2", ",", "axis", "=", "(", "1", ",", "2", ",", "3", ")", ")", "\n", "return", "ssim", ",", "cs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._HoxDownsample": [[110, 112], ["None"], "function", ["None"], ["", "def", "_HoxDownsample", "(", "img", ")", ":", "\n", "    ", "return", "(", "img", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", ",", ":", "]", "+", "img", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", ",", ":", "]", ")", "*", "0.25", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim.msssim": [[113, 172], ["numpy.array", "range", "numpy.clip", "numpy.clip", "numpy.mean", "RuntimeError", "RuntimeError", "numpy.ones", "x.astype", "ms_ssim._SSIMForMultiScale", "np.clip.append", "np.clip.append", "numpy.asarray", "numpy.asarray", "ms_ssim._HoxDownsample", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._SSIMForMultiScale", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.ms_ssim._HoxDownsample"], ["", "def", "msssim", "(", "img1", ",", "img2", ",", "max_val", "=", "255", ",", "filter_size", "=", "11", ",", "filter_sigma", "=", "1.5", ",", "k1", "=", "0.01", ",", "k2", "=", "0.03", ",", "weights", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return the MS-SSIM score between `img1` and `img2`.\n\n    This function implements Multi-Scale Structural Similarity (MS-SSIM) Image\n    Quality Assessment according to Zhou Wang's paper, \"Multi-scale structural\n    similarity for image quality assessment\" (2003).\n    Link: https://ece.uwaterloo.ca/~z70wang/publications/msssim.pdf\n\n    Author's MATLAB implementation:\n    http://www.cns.nyu.edu/~lcv/ssim/msssim.zip\n\n    Arguments:\n        img1: Numpy array holding the first RGB image batch.\n        img2: Numpy array holding the second RGB image batch.\n        max_val: the dynamic range of the images (i.e., the difference between the\n            maximum the and minimum allowed values).\n        filter_size: Size of blur kernel to use (will be reduced for small images).\n        filter_sigma: Standard deviation for Gaussian blur kernel (will be reduced\n            for small images).\n        k1: Constant used to maintain stability in the SSIM calculation (0.01 in\n            the original paper).\n        k2: Constant used to maintain stability in the SSIM calculation (0.03 in\n            the original paper).\n        weights: List of weights for each level; if none, use five levels and the\n            weights from the original paper.\n\n    Returns:\n        MS-SSIM score between `img1` and `img2`.\n\n    Raises:\n        RuntimeError: If input images don't have the same shape or don't have four\n            dimensions: [batch_size, height, width, depth].\n    \"\"\"", "\n", "if", "img1", ".", "shape", "!=", "img2", ".", "shape", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have the same shape (%s vs. %s).'", "%", "(", "img1", ".", "shape", ",", "img2", ".", "shape", ")", ")", "\n", "", "if", "img1", ".", "ndim", "!=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "'Input images must have four dimensions, not %d'", "%", "img1", ".", "ndim", ")", "\n", "\n", "# Note: default weights don't sum to 1.0 but do match the paper / matlab code.", "\n", "", "weights", "=", "np", ".", "array", "(", "weights", "if", "weights", "else", "[", "0.0448", ",", "0.2856", ",", "0.3001", ",", "0.2363", ",", "0.1333", "]", ")", "\n", "levels", "=", "weights", ".", "size", "\n", "downsample_filter", "=", "np", ".", "ones", "(", "(", "1", ",", "2", ",", "2", ",", "1", ")", ")", "/", "4.0", "\n", "im1", ",", "im2", "=", "[", "x", ".", "astype", "(", "np", ".", "float32", ")", "for", "x", "in", "[", "img1", ",", "img2", "]", "]", "\n", "mssim", "=", "[", "]", "\n", "mcs", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "levels", ")", ":", "\n", "        ", "ssim", ",", "cs", "=", "_SSIMForMultiScale", "(", "\n", "im1", ",", "im2", ",", "max_val", "=", "max_val", ",", "filter_size", "=", "filter_size", ",", "\n", "filter_sigma", "=", "filter_sigma", ",", "k1", "=", "k1", ",", "k2", "=", "k2", ")", "\n", "mssim", ".", "append", "(", "ssim", ")", "\n", "mcs", ".", "append", "(", "cs", ")", "\n", "im1", ",", "im2", "=", "[", "_HoxDownsample", "(", "x", ")", "for", "x", "in", "[", "im1", ",", "im2", "]", "]", "\n", "\n", "# Clip to zero. Otherwise we get NaNs.", "\n", "", "mssim", "=", "np", ".", "clip", "(", "np", ".", "asarray", "(", "mssim", ")", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "mcs", "=", "np", ".", "clip", "(", "np", ".", "asarray", "(", "mcs", ")", ",", "0.0", ",", "np", ".", "inf", ")", "\n", "\n", "# Average over images only at the end.", "\n", "return", "np", ".", "mean", "(", "np", ".", "prod", "(", "mcs", "[", ":", "-", "1", ",", ":", "]", "**", "weights", "[", ":", "-", "1", ",", "np", ".", "newaxis", "]", ",", "axis", "=", "0", ")", "*", "(", "mssim", "[", "-", "1", ",", ":", "]", "**", "weights", "[", "-", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.__init__": [[99, 109], ["sliced_wasserstein.API.resolutions.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "image_shape", ",", "image_dtype", ",", "minibatch_size", ")", ":", "\n", "        ", "self", ".", "nhood_size", "=", "7", "\n", "self", ".", "nhoods_per_image", "=", "128", "\n", "self", ".", "dir_repeats", "=", "4", "\n", "self", ".", "dirs_per_repeat", "=", "128", "\n", "self", ".", "resolutions", "=", "[", "]", "\n", "res", "=", "image_shape", "[", "1", "]", "\n", "while", "res", ">=", "16", ":", "\n", "            ", "self", ".", "resolutions", ".", "append", "(", "res", ")", "\n", "res", "//=", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_names": [[110, 112], ["None"], "methods", ["None"], ["", "", "def", "get_metric_names", "(", "self", ")", ":", "\n", "        ", "return", "[", "'SWDx1e3_%d'", "%", "res", "for", "res", "in", "self", ".", "resolutions", "]", "+", "[", "'SWDx1e3_avg'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_formatting": [[113, 115], ["len", "sliced_wasserstein.API.get_metric_names"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.get_metric_names"], ["", "def", "get_metric_formatting", "(", "self", ")", ":", "\n", "        ", "return", "[", "'%-13.4f'", "]", "*", "len", "(", "self", ".", "get_metric_names", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin": [[116, 119], ["None"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "mode", ")", ":", "\n", "        ", "assert", "mode", "in", "[", "'warmup'", ",", "'reals'", ",", "'fakes'", "]", "\n", "self", ".", "descriptors", "=", "[", "[", "]", "for", "res", "in", "self", ".", "resolutions", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.feed": [[120, 124], ["enumerate", "sliced_wasserstein.generate_laplacian_pyramid", "sliced_wasserstein.get_descriptors_for_minibatch", "sliced_wasserstein.API.descriptors[].append", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.generate_laplacian_pyramid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.get_descriptors_for_minibatch"], ["", "def", "feed", "(", "self", ",", "mode", ",", "minibatch", ")", ":", "\n", "        ", "for", "lod", ",", "level", "in", "enumerate", "(", "generate_laplacian_pyramid", "(", "minibatch", ",", "len", "(", "self", ".", "resolutions", ")", ")", ")", ":", "\n", "            ", "desc", "=", "get_descriptors_for_minibatch", "(", "level", ",", "self", ".", "nhood_size", ",", "self", ".", "nhoods_per_image", ")", "\n", "self", ".", "descriptors", "[", "lod", "]", ".", "append", "(", "desc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.end": [[125, 134], ["sliced_wasserstein.finalize_descriptors", "sliced_wasserstein.sliced_wasserstein", "zip", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.finalize_descriptors", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.sliced_wasserstein"], ["", "", "def", "end", "(", "self", ",", "mode", ")", ":", "\n", "        ", "desc", "=", "[", "finalize_descriptors", "(", "d", ")", "for", "d", "in", "self", ".", "descriptors", "]", "\n", "del", "self", ".", "descriptors", "\n", "if", "mode", "in", "[", "'warmup'", ",", "'reals'", "]", ":", "\n", "            ", "self", ".", "desc_real", "=", "desc", "\n", "", "dist", "=", "[", "sliced_wasserstein", "(", "dreal", ",", "dfake", ",", "self", ".", "dir_repeats", ",", "self", ".", "dirs_per_repeat", ")", "for", "dreal", ",", "dfake", "in", "zip", "(", "self", ".", "desc_real", ",", "desc", ")", "]", "\n", "del", "desc", "\n", "dist", "=", "[", "d", "*", "1e3", "for", "d", "in", "dist", "]", "# multiply by 10^3", "\n", "return", "dist", "+", "[", "np", ".", "mean", "(", "dist", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.get_descriptors_for_minibatch": [[13, 24], ["numpy.random.randint", "numpy.random.randint", "len"], "function", ["None"], ["def", "get_descriptors_for_minibatch", "(", "minibatch", ",", "nhood_size", ",", "nhoods_per_image", ")", ":", "\n", "    ", "S", "=", "minibatch", ".", "shape", "# (minibatch, channel, height, width)", "\n", "assert", "len", "(", "S", ")", "==", "4", "and", "S", "[", "1", "]", "==", "3", "\n", "N", "=", "nhoods_per_image", "*", "S", "[", "0", "]", "\n", "H", "=", "nhood_size", "//", "2", "\n", "nhood", ",", "chan", ",", "x", ",", "y", "=", "np", ".", "ogrid", "[", "0", ":", "N", ",", "0", ":", "3", ",", "-", "H", ":", "H", "+", "1", ",", "-", "H", ":", "H", "+", "1", "]", "\n", "img", "=", "nhood", "//", "nhoods_per_image", "\n", "x", "=", "x", "+", "np", ".", "random", ".", "randint", "(", "H", ",", "S", "[", "3", "]", "-", "H", ",", "size", "=", "(", "N", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "y", "=", "y", "+", "np", ".", "random", ".", "randint", "(", "H", ",", "S", "[", "2", "]", "-", "H", ",", "size", "=", "(", "N", ",", "1", ",", "1", ",", "1", ")", ")", "\n", "idx", "=", "(", "(", "img", "*", "S", "[", "1", "]", "+", "chan", ")", "*", "S", "[", "2", "]", "+", "y", ")", "*", "S", "[", "3", "]", "+", "x", "\n", "return", "minibatch", ".", "flat", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.finalize_descriptors": [[27, 35], ["isinstance", "numpy.mean", "numpy.std", "np.concatenate.reshape", "numpy.concatenate"], "function", ["None"], ["", "def", "finalize_descriptors", "(", "desc", ")", ":", "\n", "    ", "if", "isinstance", "(", "desc", ",", "list", ")", ":", "\n", "        ", "desc", "=", "np", ".", "concatenate", "(", "desc", ",", "axis", "=", "0", ")", "\n", "", "assert", "desc", ".", "ndim", "==", "4", "# (neighborhood, channel, height, width)", "\n", "desc", "-=", "np", ".", "mean", "(", "desc", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "desc", "/=", "np", ".", "std", "(", "desc", ",", "axis", "=", "(", "0", ",", "2", ",", "3", ")", ",", "keepdims", "=", "True", ")", "\n", "desc", "=", "desc", ".", "reshape", "(", "desc", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "return", "desc", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.sliced_wasserstein": [[38, 52], ["range", "numpy.mean", "numpy.random.randn", "numpy.sqrt", "dirs.astype.astype", "numpy.matmul", "numpy.matmul", "numpy.sort", "numpy.sort", "numpy.abs", "results.append", "numpy.sum", "numpy.mean", "numpy.square"], "function", ["None"], ["", "def", "sliced_wasserstein", "(", "A", ",", "B", ",", "dir_repeats", ",", "dirs_per_repeat", ")", ":", "\n", "    ", "assert", "A", ".", "ndim", "==", "2", "and", "A", ".", "shape", "==", "B", ".", "shape", "# (neighborhood, descriptor_component)", "\n", "results", "=", "[", "]", "\n", "for", "repeat", "in", "range", "(", "dir_repeats", ")", ":", "\n", "        ", "dirs", "=", "np", ".", "random", ".", "randn", "(", "A", ".", "shape", "[", "1", "]", ",", "dirs_per_repeat", ")", "# (descriptor_component, direction)", "\n", "dirs", "/=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "dirs", ")", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "# normalize descriptor components for each direction", "\n", "dirs", "=", "dirs", ".", "astype", "(", "np", ".", "float32", ")", "\n", "projA", "=", "np", ".", "matmul", "(", "A", ",", "dirs", ")", "# (neighborhood, direction)", "\n", "projB", "=", "np", ".", "matmul", "(", "B", ",", "dirs", ")", "\n", "projA", "=", "np", ".", "sort", "(", "projA", ",", "axis", "=", "0", ")", "# sort neighborhood projections for each direction", "\n", "projB", "=", "np", ".", "sort", "(", "projB", ",", "axis", "=", "0", ")", "\n", "dists", "=", "np", ".", "abs", "(", "projA", "-", "projB", ")", "# pointwise wasserstein distances", "\n", "results", ".", "append", "(", "np", ".", "mean", "(", "dists", ")", ")", "# average over neighborhoods and directions", "\n", "", "return", "np", ".", "mean", "(", "results", ")", "# average over repeats", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.downscale_minibatch": [[55, 62], ["minibatch.astype", "range", "numpy.round().clip().astype", "numpy.round().clip", "numpy.round"], "function", ["None"], ["", "def", "downscale_minibatch", "(", "minibatch", ",", "lod", ")", ":", "\n", "    ", "if", "lod", "==", "0", ":", "\n", "        ", "return", "minibatch", "\n", "", "t", "=", "minibatch", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "lod", ")", ":", "\n", "        ", "t", "=", "(", "t", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "t", "[", ":", ",", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "+", "t", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "t", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", ")", "*", "0.25", "\n", "", "return", "np", ".", "round", "(", "t", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.pyr_down": [[72, 75], ["scipy.ndimage.convolve"], "function", ["None"], ["def", "pyr_down", "(", "minibatch", ")", ":", "# matches cv2.pyrDown()", "\n", "    ", "assert", "minibatch", ".", "ndim", "==", "4", "\n", "return", "scipy", ".", "ndimage", ".", "convolve", "(", "minibatch", ",", "gaussian_filter", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", ",", "mode", "=", "'mirror'", ")", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.pyr_up": [[76, 82], ["numpy.zeros", "scipy.ndimage.convolve"], "function", ["None"], ["", "def", "pyr_up", "(", "minibatch", ")", ":", "# matches cv2.pyrUp()", "\n", "    ", "assert", "minibatch", ".", "ndim", "==", "4", "\n", "S", "=", "minibatch", ".", "shape", "\n", "res", "=", "np", ".", "zeros", "(", "(", "S", "[", "0", "]", ",", "S", "[", "1", "]", ",", "S", "[", "2", "]", "*", "2", ",", "S", "[", "3", "]", "*", "2", ")", ",", "minibatch", ".", "dtype", ")", "\n", "res", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", "=", "minibatch", "\n", "return", "scipy", ".", "ndimage", ".", "convolve", "(", "res", ",", "gaussian_filter", "[", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", ":", "]", "*", "4.0", ",", "mode", "=", "'mirror'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.generate_laplacian_pyramid": [[83, 89], ["range", "numpy.float32", "pyramid.append", "sliced_wasserstein.pyr_up", "sliced_wasserstein.pyr_down"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.pyr_up", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.pyr_down"], ["", "def", "generate_laplacian_pyramid", "(", "minibatch", ",", "num_levels", ")", ":", "\n", "    ", "pyramid", "=", "[", "np", ".", "float32", "(", "minibatch", ")", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "num_levels", ")", ":", "\n", "        ", "pyramid", ".", "append", "(", "pyr_down", "(", "pyramid", "[", "-", "1", "]", ")", ")", "\n", "pyramid", "[", "-", "2", "]", "-=", "pyr_up", "(", "pyramid", "[", "-", "1", "]", ")", "\n", "", "return", "pyramid", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.reconstruct_laplacian_pyramid": [[90, 95], ["sliced_wasserstein.pyr_up"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.pyr_up"], ["", "def", "reconstruct_laplacian_pyramid", "(", "pyramid", ")", ":", "\n", "    ", "minibatch", "=", "pyramid", "[", "-", "1", "]", "\n", "for", "level", "in", "pyramid", "[", "-", "2", ":", ":", "-", "1", "]", ":", "\n", "        ", "minibatch", "=", "pyr_up", "(", "minibatch", ")", "+", "level", "\n", "", "return", "minibatch", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.LS.__init__": [[104, 111], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["", "class", "LS", "(", "metric_base", ".", "MetricBase", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_samples", ",", "num_keep", ",", "attrib_indices", ",", "minibatch_per_gpu", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "num_keep", "<=", "num_samples", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "num_keep", "=", "num_keep", "\n", "self", ".", "attrib_indices", "=", "attrib_indices", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.LS._evaluate": [[112, 177], ["range", "range", "collections.defaultdict", "linear_separability.LS._report_result", "linear_separability.LS._report_result", "linear_separability.LS._report_progress", "dnnlib.run", "numpy.concatenate", "list", "sorted", "numpy.argmax", "tensorflow.device", "Gs.clone", "tensorflow.random_normal", "linear_separability.LS._get_random_labels_tf", "Gs.clone.components.mapping.get_output_for", "Gs.clone.get_output_for", "dict", "result_expr.append", "results[].keys", "range", "conditional_entropies[].append", "numpy.sum", "collections.defaultdict.items", "tensorflow.reshape", "tensorflow.reduce_mean", "training.misc.load_pkl", "training.misc.load_pkl.get_output_for", "tensorflow.nn.softmax", "sklearn.svm.LinearSVC", "sklearn.svm.LinearSVC.fit", "sklearn.svm.LinearSVC.score", "sklearn.svm.LinearSVC.predict", "linear_separability.conditional_entropy", "tensorflow.concat", "numpy.mean", "numpy.max", "zip"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.semantic_extractor.SemanticExtractor.predict", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.conditional_entropy"], ["\n", "", "def", "_evaluate", "(", "self", ",", "Gs", ",", "num_gpus", ")", ":", "\n", "        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "\n", "# Construct TensorFlow graph for each GPU.", "\n", "result_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "\n", "# Generate images.", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "dlatents", "=", "Gs_clone", ".", "components", ".", "mapping", ".", "get_output_for", "(", "latents", ",", "None", ",", "is_validation", "=", "True", ")", "\n", "images", "=", "Gs_clone", ".", "components", ".", "synthesis", ".", "get_output_for", "(", "dlatents", ",", "is_validation", "=", "True", ",", "randomize_noise", "=", "True", ")", "\n", "\n", "# Downsample to 256x256. The attribute classifiers were built for 256x256.", "\n", "if", "images", ".", "shape", "[", "2", "]", ">", "256", ":", "\n", "                    ", "factor", "=", "images", ".", "shape", "[", "2", "]", "//", "256", "\n", "images", "=", "tf", ".", "reshape", "(", "images", ",", "[", "-", "1", ",", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "//", "factor", ",", "factor", ",", "images", ".", "shape", "[", "3", "]", "//", "factor", ",", "factor", "]", ")", "\n", "images", "=", "tf", ".", "reduce_mean", "(", "images", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "\n", "# Run classifier for each attribute.", "\n", "", "result_dict", "=", "dict", "(", "latents", "=", "latents", ",", "dlatents", "=", "dlatents", "[", ":", ",", "-", "1", "]", ")", "\n", "for", "attrib_idx", "in", "self", ".", "attrib_indices", ":", "\n", "                    ", "classifier", "=", "misc", ".", "load_pkl", "(", "classifier_urls", "[", "attrib_idx", "]", ")", "\n", "logits", "=", "classifier", ".", "get_output_for", "(", "images", ",", "None", ")", "\n", "predictions", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "concat", "(", "[", "logits", ",", "-", "logits", "]", ",", "axis", "=", "1", ")", ")", "\n", "result_dict", "[", "attrib_idx", "]", "=", "predictions", "\n", "", "result_expr", ".", "append", "(", "result_dict", ")", "\n", "\n", "# Sampling loop.", "\n", "", "", "results", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "0", ",", "self", ".", "num_samples", ",", "minibatch_size", ")", ":", "\n", "            ", "results", "+=", "tflib", ".", "run", "(", "result_expr", ")", "\n", "", "results", "=", "{", "key", ":", "np", ".", "concatenate", "(", "[", "value", "[", "key", "]", "for", "value", "in", "results", "]", ",", "axis", "=", "0", ")", "for", "key", "in", "results", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "\n", "# Calculate conditional entropy for each attribute.", "\n", "conditional_entropies", "=", "defaultdict", "(", "list", ")", "\n", "for", "attrib_idx", "in", "self", ".", "attrib_indices", ":", "\n", "# Prune the least confident samples.", "\n", "            ", "pruned_indices", "=", "list", "(", "range", "(", "self", ".", "num_samples", ")", ")", "\n", "pruned_indices", "=", "sorted", "(", "pruned_indices", ",", "key", "=", "lambda", "i", ":", "-", "np", ".", "max", "(", "results", "[", "attrib_idx", "]", "[", "i", "]", ")", ")", "\n", "pruned_indices", "=", "pruned_indices", "[", ":", "self", ".", "num_keep", "]", "\n", "\n", "# Fit SVM to the remaining samples.", "\n", "svm_targets", "=", "np", ".", "argmax", "(", "results", "[", "attrib_idx", "]", "[", "pruned_indices", "]", ",", "axis", "=", "1", ")", "\n", "for", "space", "in", "[", "'latents'", ",", "'dlatents'", "]", ":", "\n", "                ", "svm_inputs", "=", "results", "[", "space", "]", "[", "pruned_indices", "]", "\n", "try", ":", "\n", "                    ", "svm", "=", "sklearn", ".", "svm", ".", "LinearSVC", "(", ")", "\n", "svm", ".", "fit", "(", "svm_inputs", ",", "svm_targets", ")", "\n", "svm", ".", "score", "(", "svm_inputs", ",", "svm_targets", ")", "\n", "svm_outputs", "=", "svm", ".", "predict", "(", "svm_inputs", ")", "\n", "", "except", ":", "\n", "                    ", "svm_outputs", "=", "svm_targets", "# assume perfect prediction", "\n", "\n", "# Calculate conditional entropy.", "\n", "", "p", "=", "[", "[", "np", ".", "mean", "(", "[", "case", "==", "(", "row", ",", "col", ")", "for", "case", "in", "zip", "(", "svm_outputs", ",", "svm_targets", ")", "]", ")", "for", "col", "in", "(", "0", ",", "1", ")", "]", "for", "row", "in", "(", "0", ",", "1", ")", "]", "\n", "conditional_entropies", "[", "space", "]", ".", "append", "(", "conditional_entropy", "(", "p", ")", ")", "\n", "\n", "# Calculate separability scores.", "\n", "", "", "scores", "=", "{", "key", ":", "2", "**", "np", ".", "sum", "(", "values", ")", "for", "key", ",", "values", "in", "conditional_entropies", ".", "items", "(", ")", "}", "\n", "self", ".", "_report_result", "(", "scores", "[", "'latents'", "]", ",", "suffix", "=", "'_z'", ")", "\n", "self", ".", "_report_result", "(", "scores", "[", "'dlatents'", "]", ",", "suffix", "=", "'_w'", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.prob_normalize": [[65, 69], ["numpy.asarray().astype", "len", "numpy.sum", "numpy.asarray"], "function", ["None"], ["\n", "def", "prob_normalize", "(", "p", ")", ":", "\n", "    ", "p", "=", "np", ".", "asarray", "(", "p", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "assert", "len", "(", "p", ".", "shape", ")", "==", "2", "\n", "return", "p", "/", "np", ".", "sum", "(", "p", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.mutual_information": [[70, 83], ["linear_separability.prob_normalize", "numpy.sum", "numpy.sum", "range", "range", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.prob_normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["\n", "", "def", "mutual_information", "(", "p", ")", ":", "\n", "    ", "p", "=", "prob_normalize", "(", "p", ")", "\n", "px", "=", "np", ".", "sum", "(", "p", ",", "axis", "=", "1", ")", "\n", "py", "=", "np", ".", "sum", "(", "p", ",", "axis", "=", "0", ")", "\n", "result", "=", "0.0", "\n", "for", "x", "in", "range", "(", "p", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "p_x", "=", "px", "[", "x", "]", "\n", "for", "y", "in", "range", "(", "p", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "p_xy", "=", "p", "[", "x", "]", "[", "y", "]", "\n", "p_y", "=", "py", "[", "y", "]", "\n", "if", "p_xy", ">", "0.0", ":", "\n", "                ", "result", "+=", "p_xy", "*", "np", ".", "log2", "(", "p_xy", "/", "(", "p_x", "*", "p_y", ")", ")", "# get bits as output", "\n", "", "", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.entropy": [[84, 93], ["linear_separability.prob_normalize", "range", "range", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.prob_normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["\n", "", "def", "entropy", "(", "p", ")", ":", "\n", "    ", "p", "=", "prob_normalize", "(", "p", ")", "\n", "result", "=", "0.0", "\n", "for", "x", "in", "range", "(", "p", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "for", "y", "in", "range", "(", "p", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "p_xy", "=", "p", "[", "x", "]", "[", "y", "]", "\n", "if", "p_xy", ">", "0.0", ":", "\n", "                ", "result", "-=", "p_xy", "*", "np", ".", "log2", "(", "p_xy", ")", "\n", "", "", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.conditional_entropy": [[94, 100], ["linear_separability.prob_normalize", "numpy.sum", "max", "linear_separability.entropy", "linear_separability.mutual_information"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.prob_normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.entropy", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.linear_separability.mutual_information"], ["\n", "", "def", "conditional_entropy", "(", "p", ")", ":", "\n", "# H(Y|X) where X corresponds to axis 0, Y to axis 1", "\n", "# i.e., How many bits of additional information are needed to where we are on axis 1 if we know where we are on axis 0?", "\n", "    ", "p", "=", "prob_normalize", "(", "p", ")", "\n", "y", "=", "np", ".", "sum", "(", "p", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# marginalize to calculate H(Y)", "\n", "return", "max", "(", "0.0", ",", "entropy", "(", "y", ")", "-", "mutual_information", "(", "p", ")", ")", "# can slip just below 0 due to FP inaccuracies, clean those up.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.FID.__init__": [[21, 25], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.frechet_inception_distance.FID._evaluate": [[26, 72], ["training.misc.load_pkl", "numpy.empty", "frechet_inception_distance.FID._get_cache_file_for_reals", "os.makedirs", "os.path.isfile", "range", "range", "numpy.mean", "numpy.cov", "numpy.square().sum", "scipy.linalg.sqrtm", "frechet_inception_distance.FID._report_result", "os.path.dirname", "training.misc.load_pkl", "enumerate", "numpy.mean", "numpy.cov", "training.misc.save_pkl", "frechet_inception_distance.FID._report_progress", "min", "numpy.dot", "numpy.trace", "numpy.real", "frechet_inception_distance.FID._iterate_reals", "min", "training.misc.load_pkl.run", "tensorflow.device", "Gs.clone", "training.misc.load_pkl.clone", "tensorflow.random_normal", "frechet_inception_distance.FID._get_random_labels_tf", "Gs.clone.get_output_for", "dnnlib.convert_images_to_uint8", "result_expr.append", "numpy.concatenate", "numpy.square", "misc.load_pkl.clone.get_output_for", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_cache_file_for_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._iterate_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "\n", "from", "__future__", "import", "absolute_import", ",", "division", ",", "print_function", "\n", "import", "numpy", "as", "np", "\n", "import", "scipy", "as", "sp", "\n", "import", "os", "\n", "import", "gzip", ",", "pickle", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "scipy", ".", "misc", "import", "imread", "\n", "import", "pathlib", "\n", "import", "urllib", "\n", "\n", "\n", "class", "InvalidFIDException", "(", "Exception", ")", ":", "\n", "    ", "pass", "\n", "\n", "\n", "", "def", "create_inception_graph", "(", "pth", ")", ":", "\n", "    ", "\"\"\"Creates a graph from saved GraphDef file.\"\"\"", "\n", "# Creates graph from saved graph_def.pb.", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "pth", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "'FID_Inception_Net'", ")", "\n", "#-------------------------------------------------------------------------------", "\n", "\n", "\n", "# code for handling inception net derived from", "\n", "#   https://github.com/openai/improved-gan/blob/master/inception_score/model.py", "\n", "", "", "def", "_get_inception_layer", "(", "sess", ")", ":", "\n", "    ", "\"\"\"Prepares inception net for batched usage and returns pool_3 layer. \"\"\"", "\n", "layername", "=", "'FID_Inception_Net/pool_3:0'", "\n", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "layername", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "if", "shape", ".", "_dims", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.__init__": [[24, 33], ["metric_base.MetricBase._reset"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._reset"], ["\n", "fid50k", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.frechet_inception_distance.FID'", ",", "name", "=", "'fid50k'", ",", "num_images", "=", "50000", ",", "minibatch_per_gpu", "=", "8", ")", "\n", "ppl_zfull", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.perceptual_path_length.PPL'", ",", "name", "=", "'ppl_zfull'", ",", "num_samples", "=", "100000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'z'", ",", "sampling", "=", "'full'", ",", "minibatch_per_gpu", "=", "16", ")", "\n", "ppl_wfull", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.perceptual_path_length.PPL'", ",", "name", "=", "'ppl_wfull'", ",", "num_samples", "=", "100000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'w'", ",", "sampling", "=", "'full'", ",", "minibatch_per_gpu", "=", "16", ")", "\n", "ppl_zend", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.perceptual_path_length.PPL'", ",", "name", "=", "'ppl_zend'", ",", "num_samples", "=", "100000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'z'", ",", "sampling", "=", "'end'", ",", "minibatch_per_gpu", "=", "16", ")", "\n", "ppl_wend", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.perceptual_path_length.PPL'", ",", "name", "=", "'ppl_wend'", ",", "num_samples", "=", "100000", ",", "epsilon", "=", "1e-4", ",", "space", "=", "'w'", ",", "sampling", "=", "'end'", ",", "minibatch_per_gpu", "=", "16", ")", "\n", "ls", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.linear_separability.LS'", ",", "name", "=", "'ls'", ",", "num_samples", "=", "200000", ",", "num_keep", "=", "100000", ",", "attrib_indices", "=", "range", "(", "40", ")", ",", "minibatch_per_gpu", "=", "4", ")", "\n", "dummy", "=", "dnnlib", ".", "EasyDict", "(", "func_name", "=", "'metrics.metric_base.DummyMetric'", ",", "name", "=", "'dummy'", ")", "# for debugging", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.run": [[61, 78], ["dict", "metric_base.MetricBase._reset", "time.time", "tensorflow.Graph().as_default", "dnnlib.create_session().as_default", "dnnlib.create_session().as_default", "metric_base.MetricBase._report_progress", "training.misc.load_pkl", "metric_base.MetricBase._evaluate", "metric_base.MetricBase._report_progress", "time.time", "os.path.join", "print", "tensorflow.Graph", "dnnlib.create_session", "dnnlib.create_session", "dnnlib.util.Logger", "dnnlib.util.Logger", "dnnlib.util.Logger", "dnnlib.util.Logger", "print", "metric_base.MetricBase.get_result_str().strip", "metric_base.MetricBase.get_result_str().strip", "metric_base.MetricBase.get_result_str", "metric_base.MetricBase.get_result_str"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._reset", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.IS._evaluate", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.get_result_str", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.get_result_str"], ["", "self", ".", "_eval_time", "=", "time", ".", "time", "(", ")", "-", "time_begin", "\n", "\n", "if", "log_results", ":", "\n", "            ", "result_str", "=", "self", ".", "get_result_str", "(", ")", "\n", "if", "run_dir", "is", "not", "None", ":", "\n", "                ", "log", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "'metric-%s.txt'", "%", "self", ".", "name", ")", "\n", "with", "dnnlib", ".", "util", ".", "Logger", "(", "log", ",", "'a'", ")", ":", "\n", "                    ", "print", "(", "result_str", ")", "\n", "", "", "else", ":", "\n", "                ", "print", "(", "result_str", ")", "\n", "\n", "", "", "", "def", "get_result_str", "(", "self", ")", ":", "\n", "        ", "network_name", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "self", ".", "_network_pkl", ")", ")", "[", "0", "]", "\n", "if", "len", "(", "network_name", ")", ">", "29", ":", "\n", "            ", "network_name", "=", "'...'", "+", "network_name", "[", "-", "26", ":", "]", "\n", "", "result_str", "=", "'%-30s'", "%", "network_name", "\n", "result_str", "+=", "' time %-12s'", "%", "dnnlib", ".", "util", ".", "format_time", "(", "self", ".", "_eval_time", ")", "\n", "for", "res", "in", "self", ".", "_results", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.get_result_str": [[79, 89], ["os.path.splitext", "len", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.util.format_time", "os.path.basename"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time"], ["            ", "result_str", "+=", "' '", "+", "self", ".", "name", "+", "res", ".", "suffix", "+", "' '", "\n", "result_str", "+=", "res", ".", "fmt", "%", "res", ".", "value", "\n", "", "return", "result_str", "\n", "\n", "", "def", "update_autosummaries", "(", "self", ")", ":", "\n", "        ", "for", "res", "in", "self", ".", "_results", ":", "\n", "            ", "tflib", ".", "autosummary", ".", "autosummary", "(", "'Metrics/'", "+", "self", ".", "name", "+", "res", ".", "suffix", ",", "res", ".", "value", ")", "\n", "\n", "", "", "def", "_evaluate", "(", "self", ",", "Gs", ",", "num_gpus", ")", ":", "\n", "        ", "raise", "NotImplementedError", "# to be overridden by subclasses", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.update_autosummaries": [[90, 93], ["dnnlib.autosummary.autosummary", "dnnlib.autosummary.autosummary"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["", "def", "_report_result", "(", "self", ",", "value", ",", "suffix", "=", "''", ",", "fmt", "=", "'%-10.4f'", ")", ":", "\n", "        ", "self", ".", "_results", "+=", "[", "dnnlib", ".", "EasyDict", "(", "value", "=", "value", ",", "suffix", "=", "suffix", ",", "fmt", "=", "fmt", ")", "]", "\n", "\n", "", "def", "_get_cache_file_for_reals", "(", "self", ",", "extension", "=", "'pkl'", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._evaluate": [[94, 96], ["None"], "methods", ["None"], ["        ", "all_args", "=", "dnnlib", ".", "EasyDict", "(", "metric_name", "=", "self", ".", "name", ",", "mirror_augment", "=", "self", ".", "_mirror_augment", ")", "\n", "all_args", ".", "update", "(", "self", ".", "_dataset_args", ")", "\n", "all_args", ".", "update", "(", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result": [[97, 99], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict"], "methods", ["None"], ["md5", "=", "hashlib", ".", "md5", "(", "repr", "(", "sorted", "(", "all_args", ".", "items", "(", ")", ")", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "dataset_name", "=", "self", ".", "_dataset_args", "[", "'tfrecord_dir'", "]", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "return", "os", ".", "path", ".", "join", "(", "config", ".", "cache_dir", ",", "'%s-%s-%s.%s'", "%", "(", "md5", ".", "hexdigest", "(", ")", ",", "self", ".", "name", ",", "dataset_name", ",", "extension", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_cache_file_for_reals": [[110, 118], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "hashlib.md5", "os.path.join", "repr().encode", "metric_base.MetricBase._dataset_args.get", "metric_base.MetricBase._dataset_args.get", "os.path.splitext", "os.path.basename", "repr", "hashlib.md5.hexdigest", "sorted", "dnnlib.EasyDict.items", "dnnlib.EasyDict.items"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.encode", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["        ", "while", "True", ":", "\n", "            ", "latents", "=", "np", ".", "random", ".", "randn", "(", "minibatch_size", ",", "*", "Gs", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "fmt", "=", "dict", "(", "func", "=", "tflib", ".", "convert_images_to_uint8", ",", "nchw_to_nhwc", "=", "True", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "None", ",", "output_transform", "=", "fmt", ",", "is_validation", "=", "True", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "True", ")", "\n", "yield", "images", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Group of multiple metrics.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._iterate_reals": [[124, 131], ["metric_base.MetricBase._get_dataset_obj", "metric_base.MetricBase.get_minibatch_np", "training.misc.apply_mirror_augment"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_dataset_obj", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.apply_mirror_augment"], ["        ", "for", "metric", "in", "self", ".", "metrics", ":", "\n", "            ", "metric", ".", "run", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "get_result_str", "(", "self", ")", ":", "\n", "        ", "return", "' '", ".", "join", "(", "metric", ".", "get_result_str", "(", ")", "for", "metric", "in", "self", ".", "metrics", ")", "\n", "\n", "", "def", "update_autosummaries", "(", "self", ")", ":", "\n", "        ", "for", "metric", "in", "self", ".", "metrics", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._iterate_fakes": [[132, 138], ["numpy.random.randn", "dict", "Gs.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["            ", "metric", ".", "update_autosummaries", "(", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Dummy metric for debugging purposes.", "\n", "\n", "", "", "", "class", "DummyMetric", "(", "MetricBase", ")", ":", "\n", "    ", "def", "_evaluate", "(", "self", ",", "Gs", ",", "num_gpus", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.__init__": [[146, 148], ["dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.run": [[149, 152], ["metric.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.get_result_str": [[153, 155], ["metric.get_result_str"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.get_result_str"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.update_autosummaries": [[156, 159], ["metric.update_autosummaries"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.update_autosummaries"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.DummyMetric._evaluate": [[164, 167], ["metric_base.DummyMetric._report_result"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.PPL.__init__": [[35, 46], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["", "class", "PPL", "(", "metric_base", ".", "MetricBase", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_samples", ",", "epsilon", ",", "space", ",", "sampling", ",", "minibatch_per_gpu", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "space", "in", "[", "'z'", ",", "'w'", "]", "\n", "assert", "sampling", "in", "[", "'full'", ",", "'end'", "]", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_samples", "=", "num_samples", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "space", "=", "space", "\n", "self", ".", "sampling", "=", "sampling", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n", "\n", "", "def", "_evaluate", "(", "self", ",", "Gs", ",", "num_gpus", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.PPL._evaluate": [[47, 115], ["dict", "dict.update", "range", "range", "numpy.concatenate", "numpy.percentile", "numpy.percentile", "numpy.extract", "perceptual_path_length.PPL._report_result", "perceptual_path_length.PPL._report_progress", "dnnlib.run", "numpy.logical_and", "numpy.mean", "tensorflow.device", "Gs.clone", "tensorflow.random_normal", "tensorflow.random_uniform", "tensorflow.reshape", "training.misc.load_pkl", "distance_expr.append", "tensorflow.tile", "Gs.clone.components.mapping.get_output_for", "tensorflow.cast", "dnnlib.lerp", "dnnlib.lerp", "tensorflow.reshape", "perceptual_path_length.slerp", "perceptual_path_length.slerp", "tensorflow.reshape", "Gs.clone.components.mapping.get_output_for", "tensorflow.control_dependencies", "Gs.clone.components.synthesis.get_output_for", "tensorflow.cast", "int", "tensorflow.reshape", "tensorflow.reduce_mean", "Gs.clone.components.synthesis.vars.items", "name.startswith", "perceptual_path_length.PPL._get_random_labels_tf", "tensorflow.stack", "tensorflow.stack", "training.misc.load_pkl.get_output_for"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.extract", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.slerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.slerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], ["        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "\n", "# Construct TensorFlow graph.", "\n", "distance_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "noise_vars", "=", "[", "var", "for", "name", ",", "var", "in", "Gs_clone", ".", "components", ".", "synthesis", ".", "vars", ".", "items", "(", ")", "if", "name", ".", "startswith", "(", "'noise'", ")", "]", "\n", "\n", "# Generate random latents and interpolation t-values.", "\n", "lat_t01", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "*", "2", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "lerp_t", "=", "tf", ".", "random_uniform", "(", "[", "self", ".", "minibatch_per_gpu", "]", ",", "0.0", ",", "1.0", "if", "self", ".", "sampling", "==", "'full'", "else", "0.0", ")", "\n", "\n", "# Interpolate in W or Z.", "\n", "if", "self", ".", "space", "==", "'w'", ":", "\n", "                    ", "dlat_t01", "=", "Gs_clone", ".", "components", ".", "mapping", ".", "get_output_for", "(", "lat_t01", ",", "None", ",", "is_validation", "=", "True", ")", "\n", "dlat_t0", ",", "dlat_t1", "=", "dlat_t01", "[", "0", ":", ":", "2", "]", ",", "dlat_t01", "[", "1", ":", ":", "2", "]", "\n", "dlat_e0", "=", "tflib", ".", "lerp", "(", "dlat_t0", ",", "dlat_t1", ",", "lerp_t", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ")", "\n", "dlat_e1", "=", "tflib", ".", "lerp", "(", "dlat_t0", ",", "dlat_t1", ",", "lerp_t", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "+", "self", ".", "epsilon", ")", "\n", "dlat_e01", "=", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "[", "dlat_e0", ",", "dlat_e1", "]", ",", "axis", "=", "1", ")", ",", "dlat_t01", ".", "shape", ")", "\n", "", "else", ":", "# space == 'z'", "\n", "                    ", "lat_t0", ",", "lat_t1", "=", "lat_t01", "[", "0", ":", ":", "2", "]", ",", "lat_t01", "[", "1", ":", ":", "2", "]", "\n", "lat_e0", "=", "slerp", "(", "lat_t0", ",", "lat_t1", ",", "lerp_t", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "lat_e1", "=", "slerp", "(", "lat_t0", ",", "lat_t1", ",", "lerp_t", "[", ":", ",", "np", ".", "newaxis", "]", "+", "self", ".", "epsilon", ")", "\n", "lat_e01", "=", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "[", "lat_e0", ",", "lat_e1", "]", ",", "axis", "=", "1", ")", ",", "lat_t01", ".", "shape", ")", "\n", "dlat_e01", "=", "Gs_clone", ".", "components", ".", "mapping", ".", "get_output_for", "(", "lat_e01", ",", "None", ",", "is_validation", "=", "True", ")", "\n", "\n", "# Synthesize images.", "\n", "", "with", "tf", ".", "control_dependencies", "(", "[", "var", ".", "initializer", "for", "var", "in", "noise_vars", "]", ")", ":", "# use same noise inputs for the entire minibatch", "\n", "                    ", "images", "=", "Gs_clone", ".", "components", ".", "synthesis", ".", "get_output_for", "(", "dlat_e01", ",", "is_validation", "=", "True", ",", "randomize_noise", "=", "False", ")", "\n", "\n", "# Crop only the face region.", "\n", "", "c", "=", "int", "(", "images", ".", "shape", "[", "2", "]", "//", "8", ")", "\n", "images", "=", "images", "[", ":", ",", ":", ",", "c", "*", "3", ":", "c", "*", "7", ",", "c", "*", "2", ":", "c", "*", "6", "]", "\n", "\n", "# Downsample image to 256x256 if it's larger than that. VGG was built for 224x224 images.", "\n", "if", "images", ".", "shape", "[", "2", "]", ">", "256", ":", "\n", "                    ", "factor", "=", "images", ".", "shape", "[", "2", "]", "//", "256", "\n", "images", "=", "tf", ".", "reshape", "(", "images", ",", "[", "-", "1", ",", "images", ".", "shape", "[", "1", "]", ",", "images", ".", "shape", "[", "2", "]", "//", "factor", ",", "factor", ",", "images", ".", "shape", "[", "3", "]", "//", "factor", ",", "factor", "]", ")", "\n", "images", "=", "tf", ".", "reduce_mean", "(", "images", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "\n", "# Scale dynamic range from [-1,1] to [0,255] for VGG.", "\n", "", "images", "=", "(", "images", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "\n", "# Evaluate perceptual distance.", "\n", "img_e0", ",", "img_e1", "=", "images", "[", "0", ":", ":", "2", "]", ",", "images", "[", "1", ":", ":", "2", "]", "\n", "distance_measure", "=", "misc", ".", "load_pkl", "(", "'https://drive.google.com/uc?id=1N2-m9qszOeVC9Tq77WxsLnuWwOedQiD2'", ")", "# vgg16_zhang_perceptual.pkl", "\n", "distance_expr", ".", "append", "(", "distance_measure", ".", "get_output_for", "(", "img_e0", ",", "img_e1", ")", "*", "(", "1", "/", "self", ".", "epsilon", "**", "2", ")", ")", "\n", "\n", "# Sampling loop.", "\n", "", "", "all_distances", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "0", ",", "self", ".", "num_samples", ",", "minibatch_size", ")", ":", "\n", "            ", "all_distances", "+=", "tflib", ".", "run", "(", "distance_expr", ")", "\n", "", "all_distances", "=", "np", ".", "concatenate", "(", "all_distances", ",", "axis", "=", "0", ")", "\n", "\n", "# Reject outliers.", "\n", "lo", "=", "np", ".", "percentile", "(", "all_distances", ",", "1", ",", "interpolation", "=", "'lower'", ")", "\n", "hi", "=", "np", ".", "percentile", "(", "all_distances", ",", "99", ",", "interpolation", "=", "'higher'", ")", "\n", "filtered_distances", "=", "np", ".", "extract", "(", "np", ".", "logical_and", "(", "lo", "<=", "all_distances", ",", "all_distances", "<=", "hi", ")", ",", "all_distances", ")", "\n", "self", ".", "_report_result", "(", "np", ".", "mean", "(", "filtered_distances", ")", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.normalize": [[19, 21], ["tensorflow.sqrt", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["None"], ["# Normalize batch of vectors.", "\n", "def", "normalize", "(", "v", ")", ":", "\n", "    ", "return", "v", "/", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.slerp": [[23, 31], ["perceptual_path_length.normalize", "perceptual_path_length.normalize", "tensorflow.reduce_sum", "perceptual_path_length.normalize", "perceptual_path_length.normalize", "tensorflow.math.acos", "tensorflow.math.cos", "tensorflow.math.sin"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.normalize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.perceptual_path_length.normalize"], ["# Spherical interpolation of a batch of vectors.", "\n", "", "def", "slerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "a", "=", "normalize", "(", "a", ")", "\n", "b", "=", "normalize", "(", "b", ")", "\n", "d", "=", "tf", ".", "reduce_sum", "(", "a", "*", "b", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "p", "=", "t", "*", "tf", ".", "math", ".", "acos", "(", "d", ")", "\n", "c", "=", "normalize", "(", "b", "-", "d", "*", "a", ")", "\n", "d", "=", "a", "*", "tf", ".", "math", ".", "cos", "(", "p", ")", "+", "c", "*", "tf", ".", "math", ".", "sin", "(", "p", ")", "\n", "return", "normalize", "(", "d", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.DistanceBlock.__init__": [[40, 54], ["tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.split", "range", "tensorflow.concat", "tensorflow.device", "distances_split.append", "precision_recall.batch_pairwise_distances"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.batch_pairwise_distances"], ["def", "__init__", "(", "self", ",", "num_features", ",", "num_gpus", ")", ":", "\n", "        ", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "num_gpus", "=", "num_gpus", "\n", "\n", "# Initialize TF graph to calculate pairwise distances.", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "self", ".", "_features_batch1", "=", "tf", ".", "placeholder", "(", "tf", ".", "float16", ",", "shape", "=", "[", "None", ",", "self", ".", "num_features", "]", ")", "\n", "self", ".", "_features_batch2", "=", "tf", ".", "placeholder", "(", "tf", ".", "float16", ",", "shape", "=", "[", "None", ",", "self", ".", "num_features", "]", ")", "\n", "features_split2", "=", "tf", ".", "split", "(", "self", ".", "_features_batch2", ",", "self", ".", "num_gpus", ",", "axis", "=", "0", ")", "\n", "distances_split", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "self", ".", "num_gpus", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                    ", "distances_split", ".", "append", "(", "batch_pairwise_distances", "(", "self", ".", "_features_batch1", ",", "features_split2", "[", "gpu_idx", "]", ")", ")", "\n", "", "", "self", ".", "_distance_block", "=", "tf", ".", "concat", "(", "distances_split", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.DistanceBlock.pairwise_distances": [[55, 58], ["precision_recall.DistanceBlock._distance_block.eval"], "methods", ["None"], ["", "", "def", "pairwise_distances", "(", "self", ",", "U", ",", "V", ")", ":", "\n", "        ", "\"\"\"Evaluate pairwise distances between two batches of feature vectors.\"\"\"", "\n", "return", "self", ".", "_distance_block", ".", "eval", "(", "feed_dict", "=", "{", "self", ".", "_features_batch1", ":", "U", ",", "self", ".", "_features_batch2", ":", "V", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.ManifoldEstimator.__init__": [[63, 95], ["len", "numpy.zeros", "numpy.zeros", "numpy.arange", "range", "min", "range", "numpy.percentile", "max", "min", "precision_recall.ManifoldEstimator._distance_block.pairwise_distances", "numpy.partition"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.DistanceBlock.pairwise_distances"], ["def", "__init__", "(", "self", ",", "distance_block", ",", "features", ",", "row_batch_size", ",", "col_batch_size", ",", "nhood_sizes", ",", "clamp_to_percentile", "=", "None", ")", ":", "\n", "        ", "\"\"\"Find an estimate of the manifold of given feature vectors.\"\"\"", "\n", "num_images", "=", "features", ".", "shape", "[", "0", "]", "\n", "self", ".", "nhood_sizes", "=", "nhood_sizes", "\n", "self", ".", "num_nhoods", "=", "len", "(", "nhood_sizes", ")", "\n", "self", ".", "row_batch_size", "=", "row_batch_size", "\n", "self", ".", "col_batch_size", "=", "col_batch_size", "\n", "self", ".", "_ref_features", "=", "features", "\n", "self", ".", "_distance_block", "=", "distance_block", "\n", "\n", "# Estimate manifold of features by calculating distances to kth nearest neighbor of each sample.", "\n", "self", ".", "D", "=", "np", ".", "zeros", "(", "[", "num_images", ",", "self", ".", "num_nhoods", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "distance_batch", "=", "np", ".", "zeros", "(", "[", "row_batch_size", ",", "num_images", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "seq", "=", "np", ".", "arange", "(", "max", "(", "self", ".", "nhood_sizes", ")", "+", "1", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "begin1", "in", "range", "(", "0", ",", "num_images", ",", "row_batch_size", ")", ":", "\n", "            ", "end1", "=", "min", "(", "begin1", "+", "row_batch_size", ",", "num_images", ")", "\n", "row_batch", "=", "features", "[", "begin1", ":", "end1", "]", "\n", "\n", "for", "begin2", "in", "range", "(", "0", ",", "num_images", ",", "col_batch_size", ")", ":", "\n", "                ", "end2", "=", "min", "(", "begin2", "+", "col_batch_size", ",", "num_images", ")", "\n", "col_batch", "=", "features", "[", "begin2", ":", "end2", "]", "\n", "\n", "# Compute distances between batches.", "\n", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", "begin2", ":", "end2", "]", "=", "self", ".", "_distance_block", ".", "pairwise_distances", "(", "row_batch", ",", "col_batch", ")", "\n", "\n", "# Find the kth nearest neighbor from the current batch.", "\n", "", "self", ".", "D", "[", "begin1", ":", "end1", ",", ":", "]", "=", "np", ".", "partition", "(", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", ":", "]", ",", "seq", ",", "axis", "=", "1", ")", "[", ":", ",", "self", ".", "nhood_sizes", "]", "\n", "\n", "", "if", "clamp_to_percentile", "is", "not", "None", ":", "\n", "            ", "max_distances", "=", "np", ".", "percentile", "(", "self", ".", "D", ",", "clamp_to_percentile", ",", "axis", "=", "0", ")", "\n", "self", ".", "D", "[", "self", ".", "D", ">", "max_distances", "]", "=", "0", "#max_distances  # 0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.ManifoldEstimator.evaluate": [[96, 135], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "min", "range", "numpy.any().astype", "numpy.argmin", "min", "precision_recall.ManifoldEstimator._distance_block.pairwise_distances", "numpy.min", "numpy.any"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.DistanceBlock.pairwise_distances"], ["", "", "def", "evaluate", "(", "self", ",", "eval_features", ",", "return_realism", "=", "False", ",", "return_neighbors", "=", "False", ")", ":", "\n", "        ", "\"\"\"Evaluate if new feature vectors are in the estimated manifold.\"\"\"", "\n", "num_eval_images", "=", "eval_features", ".", "shape", "[", "0", "]", "\n", "num_ref_images", "=", "self", ".", "D", ".", "shape", "[", "0", "]", "\n", "distance_batch", "=", "np", ".", "zeros", "(", "[", "self", ".", "row_batch_size", ",", "num_ref_images", "]", ",", "dtype", "=", "np", ".", "float16", ")", "\n", "batch_predictions", "=", "np", ".", "zeros", "(", "[", "num_eval_images", ",", "self", ".", "num_nhoods", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "#max_realism_score = np.zeros([num_eval_images,], dtype=np.float32)", "\n", "realism_score", "=", "np", ".", "zeros", "(", "[", "num_eval_images", ",", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "nearest_indices", "=", "np", ".", "zeros", "(", "[", "num_eval_images", ",", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "for", "begin1", "in", "range", "(", "0", ",", "num_eval_images", ",", "self", ".", "row_batch_size", ")", ":", "\n", "            ", "end1", "=", "min", "(", "begin1", "+", "self", ".", "row_batch_size", ",", "num_eval_images", ")", "\n", "feature_batch", "=", "eval_features", "[", "begin1", ":", "end1", "]", "\n", "\n", "for", "begin2", "in", "range", "(", "0", ",", "num_ref_images", ",", "self", ".", "col_batch_size", ")", ":", "\n", "                ", "end2", "=", "min", "(", "begin2", "+", "self", ".", "col_batch_size", ",", "num_ref_images", ")", "\n", "ref_batch", "=", "self", ".", "_ref_features", "[", "begin2", ":", "end2", "]", "\n", "\n", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", "begin2", ":", "end2", "]", "=", "self", ".", "_distance_block", ".", "pairwise_distances", "(", "feature_batch", ",", "ref_batch", ")", "\n", "\n", "# From the minibatch of new feature vectors, determine if they are in the estimated manifold.", "\n", "# If a feature vector is inside a hypersphere of some reference sample, then the new sample lies on the estimated manifold.", "\n", "# The radii of the hyperspheres are determined from distances of neighborhood size k.", "\n", "", "samples_in_manifold", "=", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", ":", ",", "None", "]", "<=", "self", ".", "D", "\n", "batch_predictions", "[", "begin1", ":", "end1", "]", "=", "np", ".", "any", "(", "samples_in_manifold", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "#max_realism_score[begin1:end1] = np.max(self.D[:, 0] / (distance_batch[0:end1-begin1, :] + 1e-18), axis=1)", "\n", "#nearest_indices[begin1:end1] = np.argmax(self.D[:, 0] / (distance_batch[0:end1-begin1, :] + 1e-18), axis=1)", "\n", "nearest_indices", "[", "begin1", ":", "end1", "]", "=", "np", ".", "argmin", "(", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "realism_score", "[", "begin1", ":", "end1", "]", "=", "self", ".", "D", "[", "nearest_indices", "[", "begin1", ":", "end1", "]", ",", "0", "]", "/", "np", ".", "min", "(", "distance_batch", "[", "0", ":", "end1", "-", "begin1", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "if", "return_realism", "and", "return_neighbors", ":", "\n", "            ", "return", "batch_predictions", ",", "realism_score", ",", "nearest_indices", "\n", "", "elif", "return_realism", ":", "\n", "            ", "return", "batch_predictions", ",", "realism_score", "\n", "", "elif", "return_neighbors", ":", "\n", "            ", "return", "batch_predictions", ",", "nearest_indices", "\n", "\n", "", "return", "batch_predictions", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.PR.__init__": [[172, 179], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_images", ",", "nhood_size", ",", "minibatch_per_gpu", ",", "row_batch_size", ",", "col_batch_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "num_images", "=", "num_images", "\n", "self", ".", "nhood_size", "=", "nhood_size", "\n", "self", ".", "minibatch_per_gpu", "=", "minibatch_per_gpu", "\n", "self", ".", "row_batch_size", "=", "row_batch_size", "\n", "self", ".", "col_batch_size", "=", "col_batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.PR._evaluate": [[180, 223], ["training.misc.load_pkl", "precision_recall.PR._get_cache_file_for_reals", "os.makedirs", "os.path.isfile", "range", "numpy.empty", "range", "precision_recall.knn_precision_recall_features", "precision_recall.PR._report_result", "precision_recall.PR._report_result", "os.path.dirname", "training.misc.load_pkl", "numpy.empty", "enumerate", "training.misc.save_pkl", "precision_recall.PR._report_progress", "min", "precision_recall.PR._iterate_reals", "min", "training.misc.load_pkl.run", "tensorflow.device", "Gs.clone", "training.misc.load_pkl.clone", "tensorflow.random_normal", "precision_recall.PR._get_random_labels_tf", "Gs.clone.get_output_for", "dnnlib.convert_images_to_uint8", "dnnlib.convert_images_to_uint8", "result_expr.append", "numpy.concatenate", "misc.load_pkl.clone.get_output_for", "dnnlib.run", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_cache_file_for_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.knn_precision_recall_features", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._iterate_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "_evaluate", "(", "self", ",", "Gs", ",", "Gs_kwargs", ",", "num_gpus", ")", ":", "\n", "        ", "minibatch_size", "=", "num_gpus", "*", "self", ".", "minibatch_per_gpu", "\n", "feature_net", "=", "misc", ".", "load_pkl", "(", "'http://d36zk2xti64re0.cloudfront.net/stylegan1/networks/metrics/vgg16.pkl'", ")", "\n", "\n", "# Calculate features for reals.", "\n", "cache_file", "=", "self", ".", "_get_cache_file_for_reals", "(", "num_images", "=", "self", ".", "num_images", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "cache_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "cache_file", ")", ":", "\n", "            ", "ref_features", "=", "misc", ".", "load_pkl", "(", "cache_file", ")", "\n", "", "else", ":", "\n", "            ", "ref_features", "=", "np", ".", "empty", "(", "[", "self", ".", "num_images", ",", "feature_net", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "idx", ",", "images", "in", "enumerate", "(", "self", ".", "_iterate_reals", "(", "minibatch_size", "=", "minibatch_size", ")", ")", ":", "\n", "                ", "begin", "=", "idx", "*", "minibatch_size", "\n", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "self", ".", "num_images", ")", "\n", "ref_features", "[", "begin", ":", "end", "]", "=", "feature_net", ".", "run", "(", "images", "[", ":", "end", "-", "begin", "]", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "True", ")", "\n", "if", "end", "==", "self", ".", "num_images", ":", "\n", "                    ", "break", "\n", "", "", "misc", ".", "save_pkl", "(", "ref_features", ",", "cache_file", ")", "\n", "\n", "# Construct TensorFlow graph.", "\n", "", "result_expr", "=", "[", "]", "\n", "for", "gpu_idx", "in", "range", "(", "num_gpus", ")", ":", "\n", "            ", "with", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu_idx", ")", ":", "\n", "                ", "Gs_clone", "=", "Gs", ".", "clone", "(", ")", "\n", "feature_net_clone", "=", "feature_net", ".", "clone", "(", ")", "\n", "latents", "=", "tf", ".", "random_normal", "(", "[", "self", ".", "minibatch_per_gpu", "]", "+", "Gs_clone", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "labels", "=", "self", ".", "_get_random_labels_tf", "(", "self", ".", "minibatch_per_gpu", ")", "\n", "images", "=", "Gs_clone", ".", "get_output_for", "(", "latents", ",", "labels", ",", "**", "Gs_kwargs", ")", "\n", "images", "=", "tflib", ".", "convert_images_to_uint8", "(", "images", ")", "\n", "result_expr", ".", "append", "(", "feature_net_clone", ".", "get_output_for", "(", "images", ")", ")", "\n", "\n", "# Calculate features for fakes.", "\n", "", "", "eval_features", "=", "np", ".", "empty", "(", "[", "self", ".", "num_images", ",", "feature_net", ".", "output_shape", "[", "1", "]", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "begin", "in", "range", "(", "0", ",", "self", ".", "num_images", ",", "minibatch_size", ")", ":", "\n", "            ", "self", ".", "_report_progress", "(", "begin", ",", "self", ".", "num_images", ")", "\n", "end", "=", "min", "(", "begin", "+", "minibatch_size", ",", "self", ".", "num_images", ")", "\n", "eval_features", "[", "begin", ":", "end", "]", "=", "np", ".", "concatenate", "(", "tflib", ".", "run", "(", "result_expr", ")", ",", "axis", "=", "0", ")", "[", ":", "end", "-", "begin", "]", "\n", "\n", "# Calculate precision and recall.", "\n", "", "state", "=", "knn_precision_recall_features", "(", "ref_features", "=", "ref_features", ",", "eval_features", "=", "eval_features", ",", "feature_net", "=", "feature_net", ",", "\n", "nhood_sizes", "=", "[", "self", ".", "nhood_size", "]", ",", "row_batch_size", "=", "self", ".", "row_batch_size", ",", "col_batch_size", "=", "self", ".", "row_batch_size", ",", "num_gpus", "=", "num_gpus", ")", "\n", "self", ".", "_report_result", "(", "state", ".", "knn_precision", "[", "0", "]", ",", "suffix", "=", "'_precision'", ")", "\n", "self", ".", "_report_result", "(", "state", ".", "knn_recall", "[", "0", "]", ",", "suffix", "=", "'_recall'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.batch_pairwise_distances": [[20, 35], ["tensorflow.variable_scope", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.maximum", "tensorflow.square", "tensorflow.square", "tensorflow.matmul"], "function", ["None"], ["def", "batch_pairwise_distances", "(", "U", ",", "V", ")", ":", "\n", "    ", "\"\"\" Compute pairwise distances between two batches of feature vectors.\"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "'pairwise_dist_block'", ")", ":", "\n", "# Squared norms of each row in U and V.", "\n", "        ", "norm_u", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "U", ")", ",", "1", ")", "\n", "norm_v", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "V", ")", ",", "1", ")", "\n", "\n", "# norm_u as a row and norm_v as a column vectors.", "\n", "norm_u", "=", "tf", ".", "reshape", "(", "norm_u", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "norm_v", "=", "tf", ".", "reshape", "(", "norm_v", ",", "[", "1", ",", "-", "1", "]", ")", "\n", "\n", "# Pairwise squared Euclidean distances.", "\n", "D", "=", "tf", ".", "maximum", "(", "norm_u", "-", "2", "*", "tf", ".", "matmul", "(", "U", ",", "V", ",", "False", ",", "True", ")", "+", "norm_v", ",", "0.0", ")", "\n", "\n", "", "return", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.knn_precision_recall_features": [[138, 168], ["dnnlib.EasyDict", "dnnlib.EasyDict", "precision_recall.DistanceBlock", "precision_recall.ManifoldEstimator", "precision_recall.ManifoldEstimator", "dnnlib.EasyDict.ref_manifold.evaluate", "dnnlib.EasyDict.precision.mean", "dnnlib.EasyDict.eval_manifold.evaluate", "dnnlib.EasyDict.recall.mean"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.ManifoldEstimator.evaluate", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.precision_recall.ManifoldEstimator.evaluate"], ["", "", "def", "knn_precision_recall_features", "(", "ref_features", ",", "eval_features", ",", "feature_net", ",", "nhood_sizes", ",", "\n", "row_batch_size", ",", "col_batch_size", ",", "num_gpus", ")", ":", "\n", "    ", "\"\"\"Calculates k-NN precision and recall for two sets of feature vectors.\"\"\"", "\n", "state", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "#num_images = ref_features.shape[0]", "\n", "num_features", "=", "feature_net", ".", "output_shape", "[", "1", "]", "\n", "state", ".", "ref_features", "=", "ref_features", "\n", "state", ".", "eval_features", "=", "eval_features", "\n", "\n", "# Initialize DistanceBlock and ManifoldEstimators.", "\n", "distance_block", "=", "DistanceBlock", "(", "num_features", ",", "num_gpus", ")", "\n", "state", ".", "ref_manifold", "=", "ManifoldEstimator", "(", "distance_block", ",", "state", ".", "ref_features", ",", "row_batch_size", ",", "col_batch_size", ",", "nhood_sizes", ")", "\n", "state", ".", "eval_manifold", "=", "ManifoldEstimator", "(", "distance_block", ",", "state", ".", "eval_features", ",", "row_batch_size", ",", "col_batch_size", ",", "nhood_sizes", ")", "\n", "\n", "# Evaluate precision and recall using k-nearest neighbors.", "\n", "#print('Evaluating k-NN precision and recall with %i samples...' % num_images)", "\n", "#start = time.time()", "\n", "\n", "# Precision: How many points from eval_features are in ref_features manifold.", "\n", "state", ".", "precision", ",", "state", ".", "realism_scores", ",", "state", ".", "nearest_neighbors", "=", "state", ".", "ref_manifold", ".", "evaluate", "(", "state", ".", "eval_features", ",", "return_realism", "=", "True", ",", "return_neighbors", "=", "True", ")", "\n", "state", ".", "knn_precision", "=", "state", ".", "precision", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "# Recall: How many points from ref_features are in eval_features manifold.", "\n", "state", ".", "recall", "=", "state", ".", "eval_manifold", ".", "evaluate", "(", "state", ".", "ref_features", ")", "\n", "state", ".", "knn_recall", "=", "state", ".", "recall", ".", "mean", "(", "axis", "=", "0", ")", "\n", "\n", "#elapsed_time = time.time() - start", "\n", "#print('Done evaluation in: %gs' % elapsed_time)", "\n", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.IS.__init__": [[19, 24], ["metrics.metric_base.MetricBase.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["from", "__future__", "import", "division", "\n", "from", "__future__", "import", "print_function", "\n", "\n", "import", "os", ".", "path", "\n", "import", "sys", "\n", "import", "tarfile", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.inception_score.IS._evaluate": [[25, 57], ["training.misc.load_pkl", "numpy.empty", "range", "range", "range", "inception_score.IS._report_result", "inception_score.IS._report_result", "inception_score.IS._report_progress", "min", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "tensorflow.device", "Gs.clone", "training.misc.load_pkl.clone", "tensorflow.random_normal", "inception_score.IS._get_random_labels_tf", "Gs.clone.get_output_for", "dnnlib.convert_images_to_uint8", "result_expr.append", "numpy.concatenate", "numpy.sum", "numpy.exp", "misc.load_pkl.clone.get_output_for", "dnnlib.run", "numpy.log", "numpy.log", "numpy.expand_dims", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_to_uint8", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "import", "numpy", "as", "np", "\n", "from", "six", ".", "moves", "import", "urllib", "\n", "import", "tensorflow", "as", "tf", "\n", "import", "glob", "\n", "import", "scipy", ".", "misc", "\n", "import", "math", "\n", "import", "sys", "\n", "\n", "MODEL_DIR", "=", "'/tmp/imagenet'", "\n", "\n", "DATA_URL", "=", "'http://download.tensorflow.org/models/image/imagenet/inception-2015-12-05.tgz'", "\n", "softmax", "=", "None", "\n", "\n", "# Call this function with list of images. Each of elements should be a ", "\n", "# numpy array with values ranging from 0 to 255.", "\n", "def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "#assert(np.max(images[0]) > 10) # EDIT: commented out", "\n", "#assert(np.min(images[0]) >= 0.0)", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "#sys.stdout.write(\".\") # EDIT: commented out", "\n", "#sys.stdout.flush()", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.close": [[34, 36], ["metric_base.MetricBase._reset"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._reset"], ["# Base class for metrics.", "\n", "\n", "class", "MetricBase", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._reset": [[37, 54], ["metric_base.MetricBase._dataset_obj.close", "training.misc.parse_config_for_previous_run", "dict", "run_config[].get"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.parse_config_for_previous_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["    ", "def", "__init__", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "_network_pkl", "=", "None", "\n", "self", ".", "_dataset_args", "=", "None", "\n", "self", ".", "_mirror_augment", "=", "None", "\n", "self", ".", "_results", "=", "[", "]", "\n", "self", ".", "_eval_time", "=", "None", "\n", "\n", "", "def", "run", "(", "self", ",", "network_pkl", ",", "run_dir", "=", "None", ",", "dataset_args", "=", "None", ",", "mirror_augment", "=", "None", ",", "num_gpus", "=", "1", ",", "tf_config", "=", "None", ",", "log_results", "=", "True", ")", ":", "\n", "        ", "self", ".", "_network_pkl", "=", "network_pkl", "\n", "self", ".", "_dataset_args", "=", "dataset_args", "\n", "self", ".", "_mirror_augment", "=", "mirror_augment", "\n", "self", ".", "_results", "=", "[", "]", "\n", "\n", "if", "(", "dataset_args", "is", "None", "or", "mirror_augment", "is", "None", ")", "and", "run_dir", "is", "not", "None", ":", "\n", "            ", "run_config", "=", "misc", ".", "parse_config_for_previous_run", "(", "run_dir", ")", "\n", "self", ".", "_dataset_args", "=", "dict", "(", "run_config", "[", "'dataset'", "]", ")", "\n", "self", ".", "_dataset_args", "[", "'shuffle_mb'", "]", "=", "0", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase.configure_progress_reports": [[55, 60], ["None"], "methods", ["None"], ["self", ".", "_mirror_augment", "=", "run_config", "[", "'train'", "]", ".", "get", "(", "'mirror_augment'", ",", "False", ")", "\n", "\n", "", "time_begin", "=", "time", ".", "time", "(", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ",", "tflib", ".", "create_session", "(", "tf_config", ")", ".", "as_default", "(", ")", ":", "# pylint: disable=not-context-manager", "\n", "            ", "_G", ",", "_D", ",", "Gs", "=", "misc", ".", "load_pkl", "(", "self", ".", "_network_pkl", ")", "\n", "self", ".", "_evaluate", "(", "Gs", ",", "num_gpus", "=", "num_gpus", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._report_progress": [[100, 109], ["time.time", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "int", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["\n", "", "def", "_iterate_reals", "(", "self", ",", "minibatch_size", ")", ":", "\n", "        ", "dataset_obj", "=", "dataset", ".", "load_dataset", "(", "data_dir", "=", "config", ".", "data_dir", ",", "**", "self", ".", "_dataset_args", ")", "\n", "while", "True", ":", "\n", "            ", "images", ",", "_labels", "=", "dataset_obj", ".", "get_minibatch_np", "(", "minibatch_size", ")", "\n", "if", "self", ".", "_mirror_augment", ":", "\n", "                ", "images", "=", "misc", ".", "apply_mirror_augment", "(", "images", ")", "\n", "", "yield", "images", "\n", "\n", "", "", "def", "_iterate_fakes", "(", "self", ",", "Gs", ",", "minibatch_size", ",", "num_gpus", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_dataset_obj": [[119, 123], ["training.dataset.load_dataset"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset"], ["", "", "", "class", "MetricGroup", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "metric_kwarg_list", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "[", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "kwargs", ")", "for", "kwargs", "in", "metric_kwarg_list", "]", "\n", "\n", "", "def", "run", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_random_labels_tf": [[139, 141], ["metric_base.MetricBase._get_dataset_obj().get_random_labels_tf", "metric_base.MetricBase._get_dataset_obj"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricBase._get_dataset_obj"], ["        ", "_", "=", "Gs", ",", "num_gpus", "\n", "self", ".", "_report_result", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.pretrained_example.main": [[18, 45], ["dnnlib.init_tf", "Gs.print_layers", "numpy.random.RandomState", "np.random.RandomState.randn", "dict", "Gs.run", "os.makedirs", "os.path.join", "PIL.Image.fromarray().save", "dnnlib.util.open_url", "dnnlib.util.open_url", "pickle.load", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["def", "main", "(", ")", ":", "\n", "# Initialize TensorFlow.", "\n", "    ", "tflib", ".", "init_tf", "(", ")", "\n", "\n", "# Load pre-trained network.", "\n", "url", "=", "'https://drive.google.com/uc?id=1MEGjdvVpUsu1jB4zrXZN7Y4kBBOzizDQ'", "# karras2019stylegan-ffhq-1024x1024.pkl", "\n", "with", "dnnlib", ".", "util", ".", "open_url", "(", "url", ",", "cache_dir", "=", "config", ".", "cache_dir", ")", "as", "f", ":", "\n", "        ", "_G", ",", "_D", ",", "Gs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "# _G = Instantaneous snapshot of the generator. Mainly useful for resuming a previous training run.", "\n", "# _D = Instantaneous snapshot of the discriminator. Mainly useful for resuming a previous training run.", "\n", "# Gs = Long-term average of the generator. Yields higher-quality results than the instantaneous snapshot.", "\n", "\n", "# Print network details.", "\n", "", "Gs", ".", "print_layers", "(", ")", "\n", "\n", "# Pick latent vector.", "\n", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "5", ")", "\n", "latents", "=", "rnd", ".", "randn", "(", "1", ",", "Gs", ".", "input_shape", "[", "1", "]", ")", "\n", "\n", "# Generate image.", "\n", "fmt", "=", "dict", "(", "func", "=", "tflib", ".", "convert_images_to_uint8", ",", "nchw_to_nhwc", "=", "True", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "None", ",", "truncation_psi", "=", "0.7", ",", "randomize_noise", "=", "True", ",", "output_transform", "=", "fmt", ")", "\n", "\n", "# Save image.", "\n", "os", ".", "makedirs", "(", "config", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "png_filename", "=", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'example.png'", ")", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ",", "'RGB'", ")", ".", "save", "(", "png_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs": [[31, 37], ["dnnlib.util.open_url", "dnnlib.util.open_url", "pickle.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["def", "load_Gs", "(", "url", ")", ":", "\n", "    ", "if", "url", "not", "in", "_Gs_cache", ":", "\n", "        ", "with", "dnnlib", ".", "util", ".", "open_url", "(", "url", ",", "cache_dir", "=", "config", ".", "cache_dir", ")", "as", "f", ":", "\n", "            ", "_G", ",", "_D", ",", "Gs", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "_Gs_cache", "[", "url", "]", "=", "Gs", "\n", "", "return", "_Gs_cache", "[", "url", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_uncurated_result_figure": [[41, 55], ["print", "numpy.random.RandomState().randn", "Gs.run", "PIL.Image.new", "iter", "enumerate", "PIL.Image.new.save", "sum", "list", "range", "numpy.random.RandomState", "sum", "PIL.Image.fromarray", "image.resize.crop", "image.resize.resize", "PIL.Image.new.paste", "next", "sum"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "def", "draw_uncurated_result_figure", "(", "png", ",", "Gs", ",", "cx", ",", "cy", ",", "cw", ",", "ch", ",", "rows", ",", "lods", ",", "seed", ")", ":", "\n", "    ", "print", "(", "png", ")", "\n", "latents", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "sum", "(", "rows", "*", "2", "**", "lod", "for", "lod", "in", "lods", ")", ",", "Gs", ".", "input_shape", "[", "1", "]", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "None", ",", "**", "synthesis_kwargs", ")", "# [seed, y, x, rgb]", "\n", "\n", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "sum", "(", "cw", "//", "2", "**", "lod", "for", "lod", "in", "lods", ")", ",", "ch", "*", "rows", ")", ",", "'white'", ")", "\n", "image_iter", "=", "iter", "(", "list", "(", "images", ")", ")", "\n", "for", "col", ",", "lod", "in", "enumerate", "(", "lods", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "rows", "*", "2", "**", "lod", ")", ":", "\n", "            ", "image", "=", "PIL", ".", "Image", ".", "fromarray", "(", "next", "(", "image_iter", ")", ",", "'RGB'", ")", "\n", "image", "=", "image", ".", "crop", "(", "(", "cx", ",", "cy", ",", "cx", "+", "cw", ",", "cy", "+", "ch", ")", ")", "\n", "image", "=", "image", ".", "resize", "(", "(", "cw", "//", "2", "**", "lod", ",", "ch", "//", "2", "**", "lod", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "canvas", ".", "paste", "(", "image", ",", "(", "sum", "(", "cw", "//", "2", "**", "lod", "for", "lod", "in", "lods", "[", ":", "col", "]", ")", ",", "row", "*", "ch", "//", "2", "**", "lod", ")", ")", "\n", "", "", "canvas", ".", "save", "(", "png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_style_mixing_figure": [[59, 79], ["print", "numpy.stack", "numpy.stack", "Gs.components.mapping.run", "Gs.components.mapping.run", "Gs.components.synthesis.run", "Gs.components.synthesis.run", "PIL.Image.new", "enumerate", "enumerate", "PIL.Image.new.save", "list", "PIL.Image.new.paste", "list", "PIL.Image.new.paste", "numpy.stack", "Gs.components.synthesis.run", "enumerate", "numpy.random.RandomState().randn", "numpy.random.RandomState().randn", "PIL.Image.fromarray", "PIL.Image.fromarray", "list", "PIL.Image.new.paste", "len", "PIL.Image.fromarray", "numpy.random.RandomState", "numpy.random.RandomState", "len", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "draw_style_mixing_figure", "(", "png", ",", "Gs", ",", "w", ",", "h", ",", "src_seeds", ",", "dst_seeds", ",", "style_ranges", ")", ":", "\n", "    ", "print", "(", "png", ")", "\n", "src_latents", "=", "np", ".", "stack", "(", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "Gs", ".", "input_shape", "[", "1", "]", ")", "for", "seed", "in", "src_seeds", ")", "\n", "dst_latents", "=", "np", ".", "stack", "(", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "Gs", ".", "input_shape", "[", "1", "]", ")", "for", "seed", "in", "dst_seeds", ")", "\n", "src_dlatents", "=", "Gs", ".", "components", ".", "mapping", ".", "run", "(", "src_latents", ",", "None", ")", "# [seed, layer, component]", "\n", "dst_dlatents", "=", "Gs", ".", "components", ".", "mapping", ".", "run", "(", "dst_latents", ",", "None", ")", "# [seed, layer, component]", "\n", "src_images", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "src_dlatents", ",", "randomize_noise", "=", "False", ",", "**", "synthesis_kwargs", ")", "\n", "dst_images", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "dst_dlatents", ",", "randomize_noise", "=", "False", ",", "**", "synthesis_kwargs", ")", "\n", "\n", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "*", "(", "len", "(", "src_seeds", ")", "+", "1", ")", ",", "h", "*", "(", "len", "(", "dst_seeds", ")", "+", "1", ")", ")", ",", "'white'", ")", "\n", "for", "col", ",", "src_image", "in", "enumerate", "(", "list", "(", "src_images", ")", ")", ":", "\n", "        ", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "src_image", ",", "'RGB'", ")", ",", "(", "(", "col", "+", "1", ")", "*", "w", ",", "0", ")", ")", "\n", "", "for", "row", ",", "dst_image", "in", "enumerate", "(", "list", "(", "dst_images", ")", ")", ":", "\n", "        ", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "dst_image", ",", "'RGB'", ")", ",", "(", "0", ",", "(", "row", "+", "1", ")", "*", "h", ")", ")", "\n", "row_dlatents", "=", "np", ".", "stack", "(", "[", "dst_dlatents", "[", "row", "]", "]", "*", "len", "(", "src_seeds", ")", ")", "\n", "row_dlatents", "[", ":", ",", "style_ranges", "[", "row", "]", "]", "=", "src_dlatents", "[", ":", ",", "style_ranges", "[", "row", "]", "]", "\n", "row_images", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "row_dlatents", ",", "randomize_noise", "=", "False", ",", "**", "synthesis_kwargs", ")", "\n", "for", "col", ",", "image", "in", "enumerate", "(", "list", "(", "row_images", ")", ")", ":", "\n", "            ", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "image", ",", "'RGB'", ")", ",", "(", "(", "col", "+", "1", ")", "*", "w", ",", "(", "row", "+", "1", ")", "*", "h", ")", ")", "\n", "", "", "canvas", ".", "save", "(", "png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_noise_detail_figure": [[83, 99], ["print", "PIL.Image.new", "enumerate", "PIL.Image.new.save", "numpy.stack", "Gs.run", "PIL.Image.new.paste", "range", "numpy.clip().astype", "PIL.Image.new.paste", "PIL.Image.fromarray", "PIL.Image.fromarray", "crop.resize.crop", "crop.resize.resize", "PIL.Image.new.paste", "numpy.std", "PIL.Image.fromarray", "len", "numpy.mean", "numpy.clip", "numpy.random.RandomState().randn", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "draw_noise_detail_figure", "(", "png", ",", "Gs", ",", "w", ",", "h", ",", "num_samples", ",", "seeds", ")", ":", "\n", "    ", "print", "(", "png", ")", "\n", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "*", "3", ",", "h", "*", "len", "(", "seeds", ")", ")", ",", "'white'", ")", "\n", "for", "row", ",", "seed", "in", "enumerate", "(", "seeds", ")", ":", "\n", "        ", "latents", "=", "np", ".", "stack", "(", "[", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "Gs", ".", "input_shape", "[", "1", "]", ")", "]", "*", "num_samples", ")", "\n", "images", "=", "Gs", ".", "run", "(", "latents", ",", "None", ",", "truncation_psi", "=", "1", ",", "**", "synthesis_kwargs", ")", "\n", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ",", "'RGB'", ")", ",", "(", "0", ",", "row", "*", "h", ")", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "crop", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "i", "+", "1", "]", ",", "'RGB'", ")", "\n", "crop", "=", "crop", ".", "crop", "(", "(", "650", ",", "180", ",", "906", ",", "436", ")", ")", "\n", "crop", "=", "crop", ".", "resize", "(", "(", "w", "//", "2", ",", "h", "//", "2", ")", ",", "PIL", ".", "Image", ".", "NEAREST", ")", "\n", "canvas", ".", "paste", "(", "crop", ",", "(", "w", "+", "(", "i", "%", "2", ")", "*", "w", "//", "2", ",", "row", "*", "h", "+", "(", "i", "//", "2", ")", "*", "h", "//", "2", ")", ")", "\n", "", "diff", "=", "np", ".", "std", "(", "np", ".", "mean", "(", "images", ",", "axis", "=", "3", ")", ",", "axis", "=", "0", ")", "*", "4", "\n", "diff", "=", "np", ".", "clip", "(", "diff", "+", "0.5", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "diff", ",", "'L'", ")", ",", "(", "w", "*", "2", ",", "row", "*", "h", ")", ")", "\n", "", "canvas", ".", "save", "(", "png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_noise_components_figure": [[103, 123], ["print", "Gs.clone", "list", "numpy.stack", "PIL.Image.new", "enumerate", "PIL.Image.new.save", "zip", "dnnlib.set_vars", "Gs.clone.run", "all_images.append", "zip", "PIL.Image.new.paste", "PIL.Image.new.paste", "PIL.Image.new.paste", "PIL.Image.new.paste", "Gs.clone.components.synthesis.vars.items", "name.startswith", "dnnlib.run", "numpy.random.RandomState().randn", "list", "PIL.Image.fromarray().crop", "PIL.Image.fromarray().crop", "PIL.Image.fromarray().crop", "PIL.Image.fromarray().crop", "numpy.random.RandomState", "enumerate", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray", "PIL.Image.fromarray"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "draw_noise_components_figure", "(", "png", ",", "Gs", ",", "w", ",", "h", ",", "seeds", ",", "noise_ranges", ",", "flips", ")", ":", "\n", "    ", "print", "(", "png", ")", "\n", "Gsc", "=", "Gs", ".", "clone", "(", ")", "\n", "noise_vars", "=", "[", "var", "for", "name", ",", "var", "in", "Gsc", ".", "components", ".", "synthesis", ".", "vars", ".", "items", "(", ")", "if", "name", ".", "startswith", "(", "'noise'", ")", "]", "\n", "noise_pairs", "=", "list", "(", "zip", "(", "noise_vars", ",", "tflib", ".", "run", "(", "noise_vars", ")", ")", ")", "# [(var, val), ...]", "\n", "latents", "=", "np", ".", "stack", "(", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "Gs", ".", "input_shape", "[", "1", "]", ")", "for", "seed", "in", "seeds", ")", "\n", "all_images", "=", "[", "]", "\n", "for", "noise_range", "in", "noise_ranges", ":", "\n", "        ", "tflib", ".", "set_vars", "(", "{", "var", ":", "val", "*", "(", "1", "if", "i", "in", "noise_range", "else", "0", ")", "for", "i", ",", "(", "var", ",", "val", ")", "in", "enumerate", "(", "noise_pairs", ")", "}", ")", "\n", "range_images", "=", "Gsc", ".", "run", "(", "latents", ",", "None", ",", "truncation_psi", "=", "1", ",", "randomize_noise", "=", "False", ",", "**", "synthesis_kwargs", ")", "\n", "range_images", "[", "flips", ",", ":", ",", ":", "]", "=", "range_images", "[", "flips", ",", ":", ",", ":", ":", "-", "1", "]", "\n", "all_images", ".", "append", "(", "list", "(", "range_images", ")", ")", "\n", "\n", "", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "*", "2", ",", "h", "*", "2", ")", ",", "'white'", ")", "\n", "for", "col", ",", "col_images", "in", "enumerate", "(", "zip", "(", "*", "all_images", ")", ")", ":", "\n", "        ", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "col_images", "[", "0", "]", ",", "'RGB'", ")", ".", "crop", "(", "(", "0", ",", "0", ",", "w", "//", "2", ",", "h", ")", ")", ",", "(", "col", "*", "w", ",", "0", ")", ")", "\n", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "col_images", "[", "1", "]", ",", "'RGB'", ")", ".", "crop", "(", "(", "w", "//", "2", ",", "0", ",", "w", ",", "h", ")", ")", ",", "(", "col", "*", "w", "+", "w", "//", "2", ",", "0", ")", ")", "\n", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "col_images", "[", "2", "]", ",", "'RGB'", ")", ".", "crop", "(", "(", "0", ",", "0", ",", "w", "//", "2", ",", "h", ")", ")", ",", "(", "col", "*", "w", ",", "h", ")", ")", "\n", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "col_images", "[", "3", "]", ",", "'RGB'", ")", ".", "crop", "(", "(", "w", "//", "2", ",", "0", ",", "w", ",", "h", ")", ")", ",", "(", "col", "*", "w", "+", "w", "//", "2", ",", "h", ")", ")", "\n", "", "canvas", ".", "save", "(", "png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_truncation_trick_figure": [[127, 140], ["print", "numpy.stack", "Gs.components.mapping.run", "Gs.get_var", "PIL.Image.new", "enumerate", "PIL.Image.new.save", "list", "Gs.components.synthesis.run", "enumerate", "numpy.random.RandomState().randn", "list", "PIL.Image.new.paste", "len", "len", "numpy.reshape", "PIL.Image.fromarray", "numpy.random.RandomState"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "draw_truncation_trick_figure", "(", "png", ",", "Gs", ",", "w", ",", "h", ",", "seeds", ",", "psis", ")", ":", "\n", "    ", "print", "(", "png", ")", "\n", "latents", "=", "np", ".", "stack", "(", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "Gs", ".", "input_shape", "[", "1", "]", ")", "for", "seed", "in", "seeds", ")", "\n", "dlatents", "=", "Gs", ".", "components", ".", "mapping", ".", "run", "(", "latents", ",", "None", ")", "# [seed, layer, component]", "\n", "dlatent_avg", "=", "Gs", ".", "get_var", "(", "'dlatent_avg'", ")", "# [component]", "\n", "\n", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "w", "*", "len", "(", "psis", ")", ",", "h", "*", "len", "(", "seeds", ")", ")", ",", "'white'", ")", "\n", "for", "row", ",", "dlatent", "in", "enumerate", "(", "list", "(", "dlatents", ")", ")", ":", "\n", "        ", "row_dlatents", "=", "(", "dlatent", "[", "np", ".", "newaxis", "]", "-", "dlatent_avg", ")", "*", "np", ".", "reshape", "(", "psis", ",", "[", "-", "1", ",", "1", ",", "1", "]", ")", "+", "dlatent_avg", "\n", "row_images", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "row_dlatents", ",", "randomize_noise", "=", "False", ",", "**", "synthesis_kwargs", ")", "\n", "for", "col", ",", "image", "in", "enumerate", "(", "list", "(", "row_images", ")", ")", ":", "\n", "            ", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "image", ",", "'RGB'", ")", ",", "(", "col", "*", "w", ",", "row", "*", "h", ")", ")", "\n", "", "", "canvas", ".", "save", "(", "png", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.main": [[144, 155], ["dnnlib.init_tf", "os.makedirs", "generate_figures.draw_uncurated_result_figure", "generate_figures.draw_style_mixing_figure", "generate_figures.draw_noise_detail_figure", "generate_figures.draw_noise_components_figure", "generate_figures.draw_truncation_trick_figure", "generate_figures.draw_uncurated_result_figure", "generate_figures.draw_uncurated_result_figure", "generate_figures.draw_uncurated_result_figure", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "os.path.join", "generate_figures.load_Gs", "range", "range", "range", "range", "range", "range", "range"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_uncurated_result_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_style_mixing_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_noise_detail_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_noise_components_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_truncation_trick_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_uncurated_result_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_uncurated_result_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.draw_uncurated_result_figure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.generate_figures.load_Gs"], ["", "def", "main", "(", ")", ":", "\n", "    ", "tflib", ".", "init_tf", "(", ")", "\n", "os", ".", "makedirs", "(", "config", ".", "result_dir", ",", "exist_ok", "=", "True", ")", "\n", "draw_uncurated_result_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure02-uncurated-ffhq.png'", ")", ",", "load_Gs", "(", "url_ffhq", ")", ",", "cx", "=", "0", ",", "cy", "=", "0", ",", "cw", "=", "1024", ",", "ch", "=", "1024", ",", "rows", "=", "3", ",", "lods", "=", "[", "0", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", "]", ",", "seed", "=", "5", ")", "\n", "draw_style_mixing_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure03-style-mixing.png'", ")", ",", "load_Gs", "(", "url_ffhq", ")", ",", "w", "=", "1024", ",", "h", "=", "1024", ",", "src_seeds", "=", "[", "639", ",", "701", ",", "687", ",", "615", ",", "2268", "]", ",", "dst_seeds", "=", "[", "888", ",", "829", ",", "1898", ",", "1733", ",", "1614", ",", "845", "]", ",", "style_ranges", "=", "[", "range", "(", "0", ",", "4", ")", "]", "*", "3", "+", "[", "range", "(", "4", ",", "8", ")", "]", "*", "2", "+", "[", "range", "(", "8", ",", "18", ")", "]", ")", "\n", "draw_noise_detail_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure04-noise-detail.png'", ")", ",", "load_Gs", "(", "url_ffhq", ")", ",", "w", "=", "1024", ",", "h", "=", "1024", ",", "num_samples", "=", "100", ",", "seeds", "=", "[", "1157", ",", "1012", "]", ")", "\n", "draw_noise_components_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure05-noise-components.png'", ")", ",", "load_Gs", "(", "url_ffhq", ")", ",", "w", "=", "1024", ",", "h", "=", "1024", ",", "seeds", "=", "[", "1967", ",", "1555", "]", ",", "noise_ranges", "=", "[", "range", "(", "0", ",", "18", ")", ",", "range", "(", "0", ",", "0", ")", ",", "range", "(", "8", ",", "18", ")", ",", "range", "(", "0", ",", "8", ")", "]", ",", "flips", "=", "[", "1", "]", ")", "\n", "draw_truncation_trick_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure08-truncation-trick.png'", ")", ",", "load_Gs", "(", "url_ffhq", ")", ",", "w", "=", "1024", ",", "h", "=", "1024", ",", "seeds", "=", "[", "91", ",", "388", "]", ",", "psis", "=", "[", "1", ",", "0.7", ",", "0.5", ",", "0", ",", "-", "0.5", ",", "-", "1", "]", ")", "\n", "draw_uncurated_result_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure10-uncurated-bedrooms.png'", ")", ",", "load_Gs", "(", "url_bedrooms", ")", ",", "cx", "=", "0", ",", "cy", "=", "0", ",", "cw", "=", "256", ",", "ch", "=", "256", ",", "rows", "=", "5", ",", "lods", "=", "[", "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", "]", ",", "seed", "=", "0", ")", "\n", "draw_uncurated_result_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure11-uncurated-cars.png'", ")", ",", "load_Gs", "(", "url_cars", ")", ",", "cx", "=", "0", ",", "cy", "=", "64", ",", "cw", "=", "512", ",", "ch", "=", "384", ",", "rows", "=", "4", ",", "lods", "=", "[", "0", ",", "1", ",", "2", ",", "2", ",", "3", ",", "3", "]", ",", "seed", "=", "2", ")", "\n", "draw_uncurated_result_figure", "(", "os", ".", "path", ".", "join", "(", "config", ".", "result_dir", ",", "'figure12-uncurated-cats.png'", ")", ",", "load_Gs", "(", "url_cats", ")", ",", "cx", "=", "0", ",", "cy", "=", "0", ",", "cw", "=", "256", ",", "ch", "=", "256", ",", "rows", "=", "5", ",", "lods", "=", "[", "0", ",", "0", ",", "1", ",", "1", ",", "2", ",", "2", ",", "2", "]", ",", "seed", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.__init__": [[34, 50], ["os.path.join", "os.path.isdir", "os.path.basename", "print", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["self", ".", "expected_images", "=", "expected_images", "\n", "self", ".", "cur_images", "=", "0", "\n", "self", ".", "shape", "=", "None", "\n", "self", ".", "resolution_log2", "=", "None", "\n", "self", ".", "tfr_writers", "=", "[", "]", "\n", "self", ".", "print_progress", "=", "print_progress", "\n", "self", ".", "progress_interval", "=", "progress_interval", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'Creating dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "tfrecord_dir", ")", "\n", "", "assert", "(", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Flushing data...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "for", "tfr_writer", "in", "self", ".", "tfr_writers", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.close": [[51, 60], ["print", "tfr_writer.close", "print", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["            ", "tfr_writer", ".", "close", "(", ")", "\n", "", "self", ".", "tfr_writers", "=", "[", "]", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "''", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "print", "(", "'Added %d images.'", "%", "self", ".", "cur_images", ")", "\n", "\n", "", "", "def", "choose_shuffled_order", "(", "self", ")", ":", "# Note: Images and labels must be added in shuffled order.", "\n", "        ", "order", "=", "np", ".", "arange", "(", "self", ".", "expected_images", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "123", ")", ".", "shuffle", "(", "order", ")", "\n", "return", "order", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.choose_shuffled_order": [[61, 65], ["numpy.arange", "numpy.random.RandomState().shuffle", "numpy.random.RandomState"], "methods", ["None"], ["\n", "", "def", "add_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", "and", "self", ".", "cur_images", "%", "self", ".", "progress_interval", "==", "0", ":", "\n", "            ", "print", "(", "'%d / %d\\r'", "%", "(", "self", ".", "cur_images", ",", "self", ".", "expected_images", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "if", "self", ".", "shape", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.add_image": [[66, 90], ["enumerate", "print", "int", "tensorflow.python_io.TFRecordOptions", "range", "numpy.rint().clip().astype", "tensorflow.train.Example", "tfr_writer.write", "numpy.log2", "dataset_tool.TFRecordExporter.tfr_writers.append", "img.astype.astype.astype", "tensorflow.train.Example.SerializeToString", "tensorflow.python_io.TFRecordWriter", "numpy.rint().clip", "tensorflow.train.Features", "numpy.rint", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Int64List", "tensorflow.train.BytesList", "numpy.rint().clip().astype.tostring"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["            ", "self", ".", "shape", "=", "img", ".", "shape", "\n", "self", ".", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "shape", "[", "1", "]", ")", ")", "\n", "assert", "self", ".", "shape", "[", "0", "]", "in", "[", "1", ",", "3", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "self", ".", "shape", "[", "2", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "2", "**", "self", ".", "resolution_log2", "\n", "tfr_opt", "=", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "tf", ".", "python_io", ".", "TFRecordCompressionType", ".", "NONE", ")", "\n", "for", "lod", "in", "range", "(", "self", ".", "resolution_log2", "-", "1", ")", ":", "\n", "                ", "tfr_file", "=", "self", ".", "tfr_prefix", "+", "'-r%02d.tfrecords'", "%", "(", "self", ".", "resolution_log2", "-", "lod", ")", "\n", "self", ".", "tfr_writers", ".", "append", "(", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfr_file", ",", "tfr_opt", ")", ")", "\n", "", "", "assert", "img", ".", "shape", "==", "self", ".", "shape", "\n", "for", "lod", ",", "tfr_writer", "in", "enumerate", "(", "self", ".", "tfr_writers", ")", ":", "\n", "            ", "if", "lod", ":", "\n", "                ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", ")", "*", "0.25", "\n", "", "quant", "=", "np", ".", "rint", "(", "img", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ex", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'shape'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "quant", ".", "shape", ")", ")", ",", "\n", "'data'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "quant", ".", "tostring", "(", ")", "]", ")", ")", "}", ")", ")", "\n", "tfr_writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "", "self", ".", "cur_images", "+=", "1", "\n", "\n", "", "def", "add_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Saving labels...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "assert", "labels", ".", "shape", "[", "0", "]", "==", "self", ".", "cur_images", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.add_labels": [[91, 97], ["print", "open", "numpy.save", "labels.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["with", "open", "(", "self", ".", "tfr_prefix", "+", "'-rxx.labels'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.__enter__": [[98, 100], ["None"], "methods", ["None"], ["        ", "self", ".", "close", "(", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.TFRecordExporter.__exit__": [[101, 103], ["dataset_tool.TFRecordExporter.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["\n", "", "", "class", "ExceptionInfo", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ExceptionInfo.__init__": [[107, 110], ["traceback.format_exc", "sys.exc_info"], "methods", ["None"], ["#----------------------------------------------------------------------------", "\n", "\n", "", "", "class", "WorkerThread", "(", "threading", ".", "Thread", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "task_queue", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.WorkerThread.__init__": [[114, 117], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "func", ",", "args", ",", "result_queue", "=", "self", ".", "task_queue", ".", "get", "(", ")", "\n", "if", "func", "is", "None", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.WorkerThread.run": [[118, 128], ["dataset_tool.WorkerThread.task_queue.get", "result_queue.put", "func", "dataset_tool.ExceptionInfo"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["                ", "break", "\n", "", "try", ":", "\n", "                ", "result", "=", "func", "(", "*", "args", ")", "\n", "", "except", ":", "\n", "                ", "result", "=", "ExceptionInfo", "(", ")", "\n", "", "result_queue", ".", "put", "(", "(", "result", ",", "args", ")", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "class", "ThreadPool", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "num_threads", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.__init__": [[132, 141], ["six.Queue", "dict", "range", "dataset_tool.WorkerThread", "WorkerThread.start"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start"], ["self", ".", "num_threads", "=", "num_threads", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "thread", "=", "WorkerThread", "(", "self", ".", "task_queue", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "", "", "def", "add_task", "(", "self", ",", "func", ",", "args", "=", "(", ")", ")", ":", "\n", "        ", "assert", "hasattr", "(", "func", ",", "'__call__'", ")", "# must be a function", "\n", "if", "func", "not", "in", "self", ".", "result_queues", ":", "\n", "            ", "self", ".", "result_queues", "[", "func", "]", "=", "Queue", ".", "Queue", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.add_task": [[142, 147], ["hasattr", "dataset_tool.ThreadPool.task_queue.put", "six.Queue"], "methods", ["None"], ["", "self", ".", "task_queue", ".", "put", "(", "(", "func", ",", "args", ",", "self", ".", "result_queues", "[", "func", "]", ")", ")", "\n", "\n", "", "def", "get_result", "(", "self", ",", "func", ")", ":", "# returns (result, args)", "\n", "        ", "result", ",", "args", "=", "self", ".", "result_queues", "[", "func", "]", ".", "get", "(", ")", "\n", "if", "isinstance", "(", "result", ",", "ExceptionInfo", ")", ":", "\n", "            ", "print", "(", "'\\n\\nWorker thread caught an exception:\\n'", "+", "result", ".", "traceback", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.get_result": [[148, 154], ["dataset_tool.ThreadPool.result_queues[].get", "isinstance", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["raise", "result", ".", "value", "\n", "", "return", "result", ",", "args", "\n", "\n", "", "def", "finish", "(", "self", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "self", ".", "task_queue", ".", "put", "(", "(", "None", ",", "(", ")", ",", "None", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.finish": [[155, 158], ["range", "dataset_tool.ThreadPool.task_queue.put"], "methods", ["None"], ["", "", "def", "__enter__", "(", "self", ")", ":", "# for 'with' statement", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "*", "excinfo", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.__enter__": [[159, 161], ["None"], "methods", ["None"], ["        ", "self", ".", "finish", "(", ")", "\n", "\n", "", "def", "process_items_concurrently", "(", "self", ",", "item_iterator", ",", "process_func", "=", "lambda", "x", ":", "x", ",", "pre_func", "=", "lambda", "x", ":", "x", ",", "post_func", "=", "lambda", "x", ":", "x", ",", "max_items_in_flight", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.__exit__": [[162, 164], ["dataset_tool.ThreadPool.finish"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.finish"], ["        ", "if", "max_items_in_flight", "is", "None", ":", "max_items_in_flight", "=", "self", ".", "num_threads", "*", "4", "\n", "assert", "max_items_in_flight", ">=", "1", "\n", "results", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.ThreadPool.process_items_concurrently": [[165, 190], ["enumerate", "process_func", "dataset_tool.ThreadPool.get_result", "pre_func", "results.append", "dataset_tool.ThreadPool.add_task", "len", "dataset_tool.ThreadPool.process_items_concurrently.retire_result"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.get_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.add_task"], ["retire_idx", "=", "[", "0", "]", "\n", "\n", "def", "task_func", "(", "prepared", ",", "idx", ")", ":", "\n", "            ", "return", "process_func", "(", "prepared", ")", "\n", "\n", "", "def", "retire_result", "(", ")", ":", "\n", "            ", "processed", ",", "(", "prepared", ",", "idx", ")", "=", "self", ".", "get_result", "(", "task_func", ")", "\n", "results", "[", "idx", "]", "=", "processed", "\n", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", "and", "results", "[", "retire_idx", "[", "0", "]", "]", "is", "not", "None", ":", "\n", "                ", "yield", "post_func", "(", "results", "[", "retire_idx", "[", "0", "]", "]", ")", "\n", "results", "[", "retire_idx", "[", "0", "]", "]", "=", "None", "\n", "retire_idx", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "for", "idx", ",", "item", "in", "enumerate", "(", "item_iterator", ")", ":", "\n", "            ", "prepared", "=", "pre_func", "(", "item", ")", "\n", "results", ".", "append", "(", "None", ")", "\n", "self", ".", "add_task", "(", "func", "=", "task_func", ",", "args", "=", "(", "prepared", ",", "idx", ")", ")", "\n", "while", "retire_idx", "[", "0", "]", "<", "idx", "-", "max_items_in_flight", "+", "2", ":", "\n", "                ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "", "", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", ":", "\n", "            ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "display", "(", "tfrecord_dir", ")", ":", "\n", "    ", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.error": [[27, 30], ["print", "exit"], "function", ["None"], ["\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "class", "TFRecordExporter", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.display": [[193, 216], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "cv2.imshow", "dataset.TFRecordDataset.get_minibatch_np", "print", "cv2.namedWindow", "print", "cv2.waitKey", "images[].transpose", "labels[].tolist"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "idx", "==", "0", ":", "\n", "            ", "print", "(", "'Displaying images'", ")", "\n", "import", "cv2", "# pip install opencv-python", "\n", "cv2", ".", "namedWindow", "(", "'dataset_tool'", ")", "\n", "print", "(", "'Press SPACE or ENTER to advance, ESC to exit'", ")", "\n", "", "print", "(", "'\\nidx = %-8d\\nlabel = %s'", "%", "(", "idx", ",", "labels", "[", "0", "]", ".", "tolist", "(", ")", ")", ")", "\n", "cv2", ".", "imshow", "(", "'dataset_tool'", ",", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "# CHW => HWC, RGB => BGR", "\n", "idx", "+=", "1", "\n", "if", "cv2", ".", "waitKey", "(", ")", "==", "27", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "'\\nDisplayed %d images.'", "%", "idx", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "def", "extract", "(", "tfrecord_dir", ",", "output_dir", ")", ":", "\n", "    ", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.extract": [[219, 243], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "os.path.isdir", "os.makedirs", "PIL.Image.fromarray.save", "print", "dataset.TFRecordDataset.get_minibatch_np", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.join", "images[].transpose"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Extracting images to \"%s\"'", "%", "output_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", "[", "0", "]", ",", "'L'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "'RGB'", ")", "\n", "", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'img%08d.png'", "%", "idx", ")", ")", "\n", "idx", "+=", "1", "\n", "", "print", "(", "'Extracted %d images.'", "%", "idx", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "def", "compare", "(", "tfrecord_dir_a", ",", "tfrecord_dir_b", ",", "ignore_labels", ")", ":", "\n", "    ", "max_label_size", "=", "0", "if", "ignore_labels", "else", "'full'", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.compare": [[246, 286], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "print", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "print", "print", "dataset.TFRecordDataset.get_minibatch_np", "dataset.TFRecordDataset.get_minibatch_np", "numpy.all", "print", "numpy.all", "print", "print"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["dset_a", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_a", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir_b", ")", "\n", "dset_b", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_b", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Comparing datasets'", ")", "\n", "idx", "=", "0", "\n", "identical_images", "=", "0", "\n", "identical_labels", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "dset_a", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "None", ",", "None", "\n", "", "try", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "dset_b", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "None", ",", "None", "\n", "", "if", "images_a", "is", "None", "or", "images_b", "is", "None", ":", "\n", "            ", "if", "images_a", "is", "not", "None", "or", "images_b", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Datasets contain different number of images'", ")", "\n", "", "break", "\n", "", "if", "images_a", ".", "shape", "==", "images_b", ".", "shape", "and", "np", ".", "all", "(", "images_a", "==", "images_b", ")", ":", "\n", "            ", "identical_images", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Image %d is different'", "%", "idx", ")", "\n", "", "if", "labels_a", ".", "shape", "==", "labels_b", ".", "shape", "and", "np", ".", "all", "(", "labels_a", "==", "labels_b", ")", ":", "\n", "            ", "identical_labels", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Label %d is different'", "%", "idx", ")", "\n", "", "idx", "+=", "1", "\n", "", "print", "(", "'Identical images: %d / %d'", "%", "(", "identical_images", ",", "idx", ")", ")", "\n", "if", "not", "ignore_labels", ":", "\n", "        ", "print", "(", "'Identical labels: %d / %d'", "%", "(", "identical_labels", ",", "idx", ")", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_mnist", "(", "tfrecord_dir", ",", "mnist_dir", ")", ":", "\n", "    ", "print", "(", "'Loading MNIST from \"%s\"'", "%", "mnist_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_mnist": [[289, 310], ["print", "np.frombuffer.reshape", "numpy.pad", "numpy.zeros", "gzip.open", "numpy.frombuffer", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "file.read", "os.path.join", "file.read", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-labels-idx1-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "labels", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "1", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "60000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_mnistrgb", "(", "tfrecord_dir", ",", "mnist_dir", ",", "num_images", "=", "1000000", ",", "random_seed", "=", "123", ")", ":", "\n", "    ", "print", "(", "'Loading MNIST from \"%s\"'", "%", "mnist_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_mnistrgb": [[313, 327], ["print", "np.frombuffer.reshape", "numpy.pad", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "numpy.random.RandomState", "range", "os.path.join", "file.read", "numpy.min", "numpy.max", "tfr.add_image", "np.random.RandomState.randint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "num_images", ")", "as", "tfr", ":", "\n", "        ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "for", "idx", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "rnd", ".", "randint", "(", "images", ".", "shape", "[", "0", "]", ",", "size", "=", "3", ")", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_cifar10", "(", "tfrecord_dir", ",", "cifar10_dir", ")", ":", "\n", "    ", "print", "(", "'Loading CIFAR-10 from \"%s\"'", "%", "cifar10_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_cifar10": [[330, 354], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "data[].reshape", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cifar10_dir", ",", "'data_batch_%d'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "labels", ".", "append", "(", "data", "[", "'labels'", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_cifar100", "(", "tfrecord_dir", ",", "cifar100_dir", ")", ":", "\n", "    ", "print", "(", "'Loading CIFAR-100 from \"%s\"'", "%", "cifar100_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_cifar100": [[357, 376], ["print", "data[].reshape", "numpy.array", "numpy.zeros", "open", "pickle.load", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["        ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", "=", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "labels", "=", "np", ".", "array", "(", "data", "[", "'fine_labels'", "]", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "99", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_svhn", "(", "tfrecord_dir", ",", "svhn_dir", ")", ":", "\n", "    ", "print", "(", "'Loading SVHN from \"%s\"'", "%", "svhn_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_svhn": [[379, 403], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "svhn_dir", ",", "'train_%d.pkl'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "data", "[", "1", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "73257", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "73257", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_lsun", "(", "tfrecord_dir", ",", "lmdb_dir", ",", "resolution", "=", "256", ",", "max_images", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Loading LSUN dataset from \"%s\"'", "%", "lmdb_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_lsun": [[406, 436], ["print", "lmdb.open().begin", "txn.stat", "dataset_tool.TFRecordExporter", "enumerate", "lmdb.open", "txn.cursor", "numpy.min", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "np.asarray.transpose", "tfr.add_image", "cv2.imdecode", "print", "numpy.fromstring", "IOError", "numpy.asarray", "PIL.Image.open", "sys.exc_info", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["import", "io", "\n", "with", "lmdb", ".", "open", "(", "lmdb_dir", ",", "readonly", "=", "True", ")", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "total_images", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "if", "max_images", "is", "None", ":", "\n", "            ", "max_images", "=", "total_images", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "max_images", ")", "as", "tfr", ":", "\n", "            ", "for", "idx", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "txn", ".", "cursor", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "value", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "1", ")", "\n", "if", "img", "is", "None", ":", "\n", "                            ", "raise", "IOError", "(", "'cv2.imdecode failed'", ")", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR => RGB", "\n", "", "except", "IOError", ":", "\n", "                        ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "value", ")", ")", ")", "\n", "", "crop", "=", "np", ".", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "img", "=", "img", "[", "(", "img", ".", "shape", "[", "0", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "0", "]", "+", "crop", ")", "//", "2", ",", "(", "img", ".", "shape", "[", "1", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "1", "]", "+", "crop", ")", "//", "2", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "resolution", ",", "resolution", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", "\n", "", "if", "tfr", ".", "cur_images", "==", "max_images", ":", "\n", "                    ", "break", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "", "", "def", "create_celeba", "(", "tfrecord_dir", ",", "celeba_dir", ",", "cx", "=", "89", ",", "cy", "=", "121", ")", ":", "\n", "    ", "print", "(", "'Loading CelebA from \"%s\"'", "%", "celeba_dir", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_lsun_wide": [[439, 481], ["print", "print", "lmdb.open().begin", "int", "txn.stat", "dataset_tool.TFRecordExporter", "enumerate", "numpy.round", "lmdb.open", "txn.cursor", "numpy.log2", "int", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "np.asarray.transpose", "numpy.zeros", "tfr.add_image", "print", "cv2.imdecode", "numpy.round", "print", "numpy.fromstring", "IOError", "numpy.asarray", "PIL.Image.open", "sys.exc_info", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["expected_images", "=", "202599", "\n", "if", "len", "(", "image_filenames", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "assert", "img", ".", "shape", "==", "(", "218", ",", "178", ",", "3", ")", "\n", "img", "=", "img", "[", "cy", "-", "64", ":", "cy", "+", "64", ",", "cx", "-", "64", ":", "cx", "+", "64", "]", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_celebahq", "(", "tfrecord_dir", ",", "celeba_dir", ",", "delta_dir", ",", "num_threads", "=", "4", ",", "num_tasks", "=", "100", ")", ":", "\n", "    ", "print", "(", "'Loading CelebA from \"%s\"'", "%", "celeba_dir", ")", "\n", "expected_images", "=", "202599", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'*.jpg'", ")", ")", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'Anno'", ",", "'list_landmarks_celeba.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "landmarks", "=", "[", "[", "float", "(", "value", ")", "for", "value", "in", "line", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "line", "in", "file", ".", "readlines", "(", ")", "[", "2", ":", "]", "]", "\n", "landmarks", "=", "np", ".", "float32", "(", "landmarks", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "\n", "", "print", "(", "'Loading CelebA-HQ deltas from \"%s\"'", "%", "delta_dir", ")", "\n", "import", "scipy", ".", "ndimage", "\n", "import", "hashlib", "\n", "import", "bz2", "\n", "import", "zipfile", "\n", "import", "base64", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", "\n", "import", "cryptography", ".", "hazmat", ".", "backends", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", "\n", "import", "cryptography", ".", "fernet", "\n", "expected_zips", "=", "30", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'delta*.zip'", ")", ")", ")", "!=", "expected_zips", ":", "\n", "        ", "error", "(", "'Expected to find %d zips'", "%", "expected_zips", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'image_list.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "file", "]", "\n", "fields", "=", "dict", "(", ")", "\n", "for", "idx", ",", "field", "in", "enumerate", "(", "lines", "[", "0", "]", ")", ":", "\n", "            ", "type", "=", "int", "if", "field", ".", "endswith", "(", "'idx'", ")", "else", "str", "\n", "fields", "[", "field", "]", "=", "[", "type", "(", "line", "[", "idx", "]", ")", "for", "line", "in", "lines", "[", "1", ":", "]", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_celeba": [[484, 500], ["print", "os.path.join", "sorted", "glob.glob", "len", "dataset_tool.error", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "len", "numpy.asarray", "img.transpose.transpose", "tfr.add_image", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["# Must use pillow version 3.1.1 for everything to work correctly.", "\n", "if", "getattr", "(", "PIL", ",", "'PILLOW_VERSION'", ",", "''", ")", "!=", "'3.1.1'", ":", "\n", "        ", "error", "(", "'create_celebahq requires pillow version 3.1.1'", ")", "# conda install pillow=3.1.1", "\n", "\n", "# Must use libjpeg version 8d for everything to work correctly.", "\n", "", "img", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'000001.jpg'", ")", ")", ")", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "if", "md5", ".", "hexdigest", "(", ")", "!=", "'9cad8178d6cb0196b36f7b34bc5eb6d3'", ":", "\n", "        ", "error", "(", "'create_celebahq requires libjpeg version 8d'", ")", "# conda install jpeg=8d", "\n", "\n", "", "def", "rot90", "(", "v", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", "]", ")", "\n", "\n", "", "def", "process_func", "(", "idx", ")", ":", "\n", "# Load original image.", "\n", "        ", "orig_idx", "=", "fields", "[", "'orig_idx'", "]", "[", "idx", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_from_images": [[503, 528], ["print", "sorted", "numpy.asarray", "glob.glob", "len", "dataset_tool.error", "PIL.Image.open", "dataset_tool.error", "dataset_tool.error", "dataset_tool.error", "dataset_tool.TFRecordExporter", "range", "os.path.join", "int", "len", "tfr.choose_shuffled_order", "numpy.arange", "numpy.asarray", "tfr.add_image", "numpy.floor", "len", "PIL.Image.open", "img.transpose.transpose", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["img", "=", "PIL", ".", "Image", ".", "open", "(", "orig_path", ")", "\n", "\n", "# Choose oriented crop rectangle.", "\n", "lm", "=", "landmarks", "[", "orig_idx", "]", "\n", "eye_avg", "=", "(", "lm", "[", "0", "]", "+", "lm", "[", "1", "]", ")", "*", "0.5", "+", "0.5", "\n", "mouth_avg", "=", "(", "lm", "[", "3", "]", "+", "lm", "[", "4", "]", ")", "*", "0.5", "+", "0.5", "\n", "eye_to_eye", "=", "lm", "[", "1", "]", "-", "lm", "[", "0", "]", "\n", "eye_to_mouth", "=", "mouth_avg", "-", "eye_avg", "\n", "x", "=", "eye_to_eye", "-", "rot90", "(", "eye_to_mouth", ")", "\n", "x", "/=", "np", ".", "hypot", "(", "*", "x", ")", "\n", "x", "*=", "max", "(", "np", ".", "hypot", "(", "*", "eye_to_eye", ")", "*", "2.0", ",", "np", ".", "hypot", "(", "*", "eye_to_mouth", ")", "*", "1.8", ")", "\n", "y", "=", "rot90", "(", "x", ")", "\n", "c", "=", "eye_avg", "+", "eye_to_mouth", "*", "0.1", "\n", "quad", "=", "np", ".", "stack", "(", "[", "c", "-", "x", "-", "y", ",", "c", "-", "x", "+", "y", ",", "c", "+", "x", "+", "y", ",", "c", "+", "x", "-", "y", "]", ")", "\n", "zoom", "=", "1024", "/", "(", "np", ".", "hypot", "(", "*", "x", ")", "*", "2", ")", "\n", "\n", "# Shrink.", "\n", "shrink", "=", "int", "(", "np", ".", "floor", "(", "0.5", "/", "zoom", ")", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "            ", "size", "=", "(", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "0", "]", ")", "/", "shrink", ")", ")", ",", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "/", "shrink", ")", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "size", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "/=", "shrink", "\n", "zoom", "*=", "shrink", "\n", "\n", "# Crop.", "\n", "", "border", "=", "max", "(", "int", "(", "np", ".", "round", "(", "1024", "*", "0.1", "/", "zoom", ")", ")", ",", "3", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.create_from_hdf5": [[531, 543], ["print", "h5py.File", "max", "dataset_tool.TFRecordExporter", "range", "os.path.isfile", "tfr.choose_shuffled_order", "numpy.arange", "tfr.add_image", "tfr.add_labels", "hdf5_file.items", "key.startswith", "os.path.splitext", "numpy.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["if", "crop", "[", "2", "]", "-", "crop", "[", "0", "]", "<", "img", ".", "size", "[", "0", "]", "or", "crop", "[", "3", "]", "-", "crop", "[", "1", "]", "<", "img", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "quad", "-=", "crop", "[", "0", ":", "2", "]", "\n", "\n", "# Simulate super-resolution.", "\n", "", "superres", "=", "int", "(", "np", ".", "exp2", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "zoom", ")", ")", ")", ")", "\n", "if", "superres", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "img", ".", "size", "[", "0", "]", "*", "superres", ",", "img", ".", "size", "[", "1", "]", "*", "superres", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "*=", "superres", "\n", "zoom", "/=", "superres", "\n", "\n", "# Pad.", "\n", "", "pad", "=", "(", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "floor", "(", "min", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "0", "]", ")", ")", ")", ",", "int", "(", "np", ".", "ceil", "(", "max", "(", "quad", "[", ":", ",", "1", "]", ")", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.dataset_tool.execute_cmdline": [[546, 639], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "dataset_tool.execute_cmdline.add_command"], "function", ["None"], ["            ", "pad", "=", "np", ".", "maximum", "(", "pad", ",", "int", "(", "np", ".", "round", "(", "1024", "*", "0.3", "/", "zoom", ")", ")", ")", "\n", "img", "=", "np", ".", "pad", "(", "np", ".", "float32", "(", "img", ")", ",", "(", "(", "pad", "[", "1", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "y", ",", "x", ",", "_", "=", "np", ".", "mgrid", "[", ":", "h", ",", ":", "w", ",", ":", "1", "]", "\n", "mask", "=", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "minimum", "(", "np", ".", "float32", "(", "x", ")", "/", "pad", "[", "0", "]", ",", "np", ".", "float32", "(", "y", ")", "/", "pad", "[", "1", "]", ")", ",", "np", ".", "minimum", "(", "np", ".", "float32", "(", "w", "-", "1", "-", "x", ")", "/", "pad", "[", "2", "]", ",", "np", ".", "float32", "(", "h", "-", "1", "-", "y", ")", "/", "pad", "[", "3", "]", ")", ")", "\n", "blur", "=", "1024", "*", "0.02", "/", "zoom", "\n", "img", "+=", "(", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "img", ",", "[", "blur", ",", "blur", ",", "0", "]", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", "*", "3.0", "+", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "img", "+=", "(", "np", ".", "median", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np", ".", "round", "(", "img", ")", ",", "0", ",", "255", ")", ")", ",", "'RGB'", ")", "\n", "quad", "+=", "pad", "[", "0", ":", "2", "]", "\n", "\n", "# Transform.", "\n", "", "img", "=", "img", ".", "transform", "(", "(", "4096", ",", "4096", ")", ",", "PIL", ".", "Image", ".", "QUAD", ",", "(", "quad", "+", "0.5", ")", ".", "flatten", "(", ")", ",", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "1024", ",", "1024", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'proc_md5'", "]", "[", "idx", "]", "\n", "\n", "# Load delta image and original JPG.", "\n", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'deltas%05d.zip'", "%", "(", "idx", "-", "idx", "%", "1000", ")", ")", ",", "'r'", ")", "as", "zip", ":", "\n", "            ", "delta_bytes", "=", "zip", ".", "read", "(", "'delta%05d.dat'", "%", "idx", ")", "\n", "", "with", "open", "(", "orig_path", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "orig_bytes", "=", "file", ".", "read", "(", ")", "\n", "\n", "# Decrypt delta image, using original JPG data as decryption key.", "\n", "", "algorithm", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", ".", "SHA256", "(", ")", "\n", "backend", "=", "cryptography", ".", "hazmat", ".", "backends", ".", "default_backend", "(", ")", "\n", "salt", "=", "bytes", "(", "orig_file", ",", "'ascii'", ")", "\n", "kdf", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", ".", "PBKDF2HMAC", "(", "algorithm", "=", "algorithm", ",", "length", "=", "32", ",", "salt", "=", "salt", ",", "iterations", "=", "100000", ",", "backend", "=", "backend", ")", "\n", "key", "=", "base64", ".", "urlsafe_b64encode", "(", "kdf", ".", "derive", "(", "orig_bytes", ")", ")", "\n", "delta", "=", "np", ".", "frombuffer", "(", "bz2", ".", "decompress", "(", "cryptography", ".", "fernet", ".", "Fernet", "(", "key", ")", ".", "decrypt", "(", "delta_bytes", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "3", ",", "1024", ",", "1024", ")", "\n", "\n", "# Apply delta image.", "\n", "img", "=", "img", "+", "delta", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'final_md5'", "]", "[", "idx", "]", "\n", "return", "img", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "indices", ".", "size", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "with", "ThreadPool", "(", "num_threads", ")", "as", "pool", ":", "\n", "            ", "for", "img", "in", "pool", ".", "process_items_concurrently", "(", "indices", "[", "order", "]", ".", "tolist", "(", ")", ",", "process_func", "=", "process_func", ",", "max_items_in_flight", "=", "num_tasks", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "", "def", "create_from_images", "(", "tfrecord_dir", ",", "image_dir", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading images from \"%s\"'", "%", "image_dir", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'*'", ")", ")", ")", "\n", "if", "len", "(", "image_filenames", ")", "==", "0", ":", "\n", "        ", "error", "(", "'No input images found'", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "0", "]", ")", ")", "\n", "resolution", "=", "img", ".", "shape", "[", "0", "]", "\n", "channels", "=", "img", ".", "shape", "[", "2", "]", "if", "img", ".", "ndim", "==", "3", "else", "1", "\n", "if", "img", ".", "shape", "[", "1", "]", "!=", "resolution", ":", "\n", "        ", "error", "(", "'Input images must have the same width and height'", ")", "\n", "", "if", "resolution", "!=", "2", "**", "int", "(", "np", ".", "floor", "(", "np", ".", "log2", "(", "resolution", ")", ")", ")", ":", "\n", "        ", "error", "(", "'Input image resolution must be a power-of-two'", ")", "\n", "", "if", "channels", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "        ", "error", "(", "'Input images must be stored as RGB or grayscale'", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "len", "(", "image_filenames", ")", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "if", "channels", "==", "1", ":", "\n", "                ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "# HW => CHW", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_from_hdf5", "(", "tfrecord_dir", ",", "hdf5_filename", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading HDF5 archive from \"%s\"'", "%", "hdf5_filename", ")", "\n", "import", "h5py", "# conda install h5py", "\n", "with", "h5py", ".", "File", "(", "hdf5_filename", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "        ", "hdf5_data", "=", "max", "(", "[", "value", "for", "key", ",", "value", "in", "hdf5_file", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "'data'", ")", "]", ",", "key", "=", "lambda", "lod", ":", "lod", ".", "shape", "[", "3", "]", ")", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "hdf5_data", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "            ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "hdf5_data", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "hdf5_data", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "npy_filename", "=", "os", ".", "path", ".", "splitext", "(", "hdf5_filename", ")", "[", "0", "]", "+", "'-labels.npy'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "npy_filename", ")", ":", "\n", "                ", "tfr", ".", "add_labels", "(", "np", ".", "load", "(", "npy_filename", ")", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.run_metrics.run_pickle": [[20, 29], ["dnnlib.RunContext", "dnnlib.RunContext", "dnnlib.init_tf", "print", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "print", "dnnlib.util.call_func_by_name.run", "print", "dnnlib.RunContext.close"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["def", "run_pickle", "(", "submit_config", ",", "metric_args", ",", "network_pkl", ",", "dataset_args", ",", "mirror_augment", ")", ":", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ")", "\n", "tflib", ".", "init_tf", "(", ")", "\n", "print", "(", "'Evaluating %s metric on network_pkl \"%s\"...'", "%", "(", "metric_args", ".", "name", ",", "network_pkl", ")", ")", "\n", "metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "dataset_args", "=", "dataset_args", ",", "mirror_augment", "=", "mirror_augment", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n", "print", "(", ")", "\n", "ctx", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.run_metrics.run_snapshot": [[32, 43], ["dnnlib.RunContext", "dnnlib.RunContext", "dnnlib.init_tf", "print", "training.misc.locate_run_dir", "training.misc.locate_network_pkl", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "print", "dnnlib.util.call_func_by_name.run", "print", "dnnlib.RunContext.close"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_run_dir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "run_snapshot", "(", "submit_config", ",", "metric_args", ",", "run_id", ",", "snapshot", ")", ":", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ")", "\n", "tflib", ".", "init_tf", "(", ")", "\n", "print", "(", "'Evaluating %s metric on run_id %s, snapshot %s...'", "%", "(", "metric_args", ".", "name", ",", "run_id", ",", "snapshot", ")", ")", "\n", "run_dir", "=", "misc", ".", "locate_run_dir", "(", "run_id", ")", "\n", "network_pkl", "=", "misc", ".", "locate_network_pkl", "(", "run_dir", ",", "snapshot", ")", "\n", "metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "run_dir", "=", "run_dir", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n", "print", "(", ")", "\n", "ctx", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.run_metrics.run_all_snapshots": [[46, 59], ["dnnlib.RunContext", "dnnlib.RunContext", "dnnlib.init_tf", "print", "training.misc.locate_run_dir", "training.misc.list_network_pkls", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "print", "enumerate", "print", "dnnlib.RunContext.close", "dnnlib.RunContext.update", "dnnlib.util.call_func_by_name.run", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_run_dir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.list_network_pkls", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "run_all_snapshots", "(", "submit_config", ",", "metric_args", ",", "run_id", ")", ":", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ")", "\n", "tflib", ".", "init_tf", "(", ")", "\n", "print", "(", "'Evaluating %s metric on all snapshots of run_id %s...'", "%", "(", "metric_args", ".", "name", ",", "run_id", ")", ")", "\n", "run_dir", "=", "misc", ".", "locate_run_dir", "(", "run_id", ")", "\n", "network_pkls", "=", "misc", ".", "list_network_pkls", "(", "run_dir", ")", "\n", "metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "for", "idx", ",", "network_pkl", "in", "enumerate", "(", "network_pkls", ")", ":", "\n", "        ", "ctx", ".", "update", "(", "''", ",", "idx", ",", "len", "(", "network_pkls", ")", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "run_dir", "=", "run_dir", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n", "", "print", "(", ")", "\n", "ctx", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.run_metrics.main": [[62, 99], ["dnnlib.SubmitConfig", "dnnlib.SubmitConfig", "dnnlib.submission.submit.get_template_from_path", "dnnlib.submission.submit.get_template_from_path", "dnnlib.EasyDict", "task.run_func_name.endswith", "task.run_func_name.endswith", "dnnlib.submit_run", "dnnlib.submit_run", "dnnlib.EasyDict"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], ["", "def", "main", "(", ")", ":", "\n", "    ", "submit_config", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "\n", "\n", "# Which metrics to evaluate?", "\n", "metrics", "=", "[", "]", "\n", "metrics", "+=", "[", "metric_base", ".", "fid50k", "]", "\n", "#metrics += [metric_base.ppl_zfull]", "\n", "#metrics += [metric_base.ppl_wfull]", "\n", "#metrics += [metric_base.ppl_zend]", "\n", "#metrics += [metric_base.ppl_wend]", "\n", "#metrics += [metric_base.ls]", "\n", "#metrics += [metric_base.dummy]", "\n", "\n", "# Which networks to evaluate them on?", "\n", "tasks", "=", "[", "]", "\n", "tasks", "+=", "[", "EasyDict", "(", "run_func_name", "=", "'run_metrics.run_pickle'", ",", "network_pkl", "=", "'https://drive.google.com/uc?id=1MEGjdvVpUsu1jB4zrXZN7Y4kBBOzizDQ'", ",", "dataset_args", "=", "EasyDict", "(", "tfrecord_dir", "=", "'ffhq'", ",", "shuffle_mb", "=", "0", ")", ",", "mirror_augment", "=", "True", ")", "]", "# karras2019stylegan-ffhq-1024x1024.pkl", "\n", "#tasks += [EasyDict(run_func_name='run_metrics.run_snapshot', run_id=100, snapshot=25000)]", "\n", "#tasks += [EasyDict(run_func_name='run_metrics.run_all_snapshots', run_id=100)]", "\n", "\n", "# How many GPUs to use?", "\n", "submit_config", ".", "num_gpus", "=", "1", "\n", "#submit_config.num_gpus = 2", "\n", "#submit_config.num_gpus = 4", "\n", "#submit_config.num_gpus = 8", "\n", "\n", "# Execute.", "\n", "submit_config", ".", "run_dir_root", "=", "dnnlib", ".", "submission", ".", "submit", ".", "get_template_from_path", "(", "config", ".", "result_dir", ")", "\n", "submit_config", ".", "run_dir_ignore", "+=", "config", ".", "run_dir_ignore", "\n", "for", "task", "in", "tasks", ":", "\n", "        ", "for", "metric", "in", "metrics", ":", "\n", "            ", "submit_config", ".", "run_desc", "=", "'%s-%s'", "%", "(", "task", ".", "run_func_name", ",", "metric", ".", "name", ")", "\n", "if", "task", ".", "run_func_name", ".", "endswith", "(", "'run_snapshot'", ")", ":", "\n", "                ", "submit_config", ".", "run_desc", "+=", "'-%s-%s'", "%", "(", "task", ".", "run_id", ",", "task", ".", "snapshot", ")", "\n", "", "if", "task", ".", "run_func_name", ".", "endswith", "(", "'run_all_snapshots'", ")", ":", "\n", "                ", "submit_config", ".", "run_desc", "+=", "'-%s'", "%", "task", ".", "run_id", "\n", "", "submit_config", ".", "run_desc", "+=", "'-%dgpu'", "%", "submit_config", ".", "num_gpus", "\n", "dnnlib", ".", "submit_run", "(", "submit_config", ",", "metric_args", "=", "metric", ",", "**", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan_official.train.main": [[177, 186], ["dnnlib.EasyDict", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "copy.deepcopy", "dnnlib.submission.submit.get_template_from_path", "dnnlib.submit_run"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__getattr__": [[38, 43], ["AttributeError"], "methods", ["None"], ["\n", "def", "__getattr__", "(", "self", ",", "name", ":", "str", ")", "->", "Any", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "self", "[", "name", "]", "\n", "", "except", "KeyError", ":", "\n", "            ", "raise", "AttributeError", "(", "name", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__setattr__": [[44, 46], ["None"], "methods", ["None"], ["\n", "", "", "def", "__setattr__", "(", "self", ",", "name", ":", "str", ",", "value", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", "[", "name", "]", "=", "value", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.EasyDict.__delattr__": [[47, 49], ["None"], "methods", ["None"], ["\n", "", "def", "__delattr__", "(", "self", ",", "name", ":", "str", ")", "->", "None", ":", "\n", "        ", "del", "self", "[", "name", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.__init__": [[54, 66], ["open"], "methods", ["None"], ["\n", "def", "__init__", "(", "self", ",", "file_name", ":", "str", "=", "None", ",", "file_mode", ":", "str", "=", "\"w\"", ",", "should_flush", ":", "bool", "=", "True", ")", ":", "\n", "        ", "self", ".", "file", "=", "None", "\n", "\n", "if", "file_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", "=", "open", "(", "file_name", ",", "file_mode", ")", "\n", "\n", "", "self", ".", "should_flush", "=", "should_flush", "\n", "self", ".", "stdout", "=", "sys", ".", "stdout", "\n", "self", ".", "stderr", "=", "sys", ".", "stderr", "\n", "\n", "sys", ".", "stdout", "=", "self", "\n", "sys", ".", "stderr", "=", "self", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.__enter__": [[67, 69], ["None"], "methods", ["None"], ["\n", "", "def", "__enter__", "(", "self", ")", "->", "\"Logger\"", ":", "\n", "        ", "return", "self", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.__exit__": [[70, 72], ["util.Logger.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write": [[73, 85], ["util.Logger.stdout.write", "len", "util.Logger.file.write", "util.Logger.flush"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush"], ["\n", "", "def", "write", "(", "self", ",", "text", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"Write text to stdout (and a file) and optionally flush.\"\"\"", "\n", "if", "len", "(", "text", ")", "==", "0", ":", "# workaround for a bug in VSCode debugger: sys.stdout.write(''); sys.stdout.flush() => crash", "\n", "            ", "return", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "write", "(", "text", ")", "\n", "\n", "", "self", ".", "stdout", ".", "write", "(", "text", ")", "\n", "\n", "if", "self", ".", "should_flush", ":", "\n", "            ", "self", ".", "flush", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush": [[86, 92], ["util.Logger.stdout.flush", "util.Logger.file.flush"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush"], ["\n", "", "", "def", "flush", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush written text to both stdout and a file, if open.\"\"\"", "\n", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "stdout", ".", "flush", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.close": [[93, 105], ["util.Logger.flush", "util.Logger.file.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.flush", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["\n", "", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Flush, close possible files, and remove stdout/stderr mirroring.\"\"\"", "\n", "self", ".", "flush", "(", ")", "\n", "\n", "# if using multiple loggers, prevent closing in wrong order", "\n", "if", "sys", ".", "stdout", "is", "self", ":", "\n", "            ", "sys", ".", "stdout", "=", "self", ".", "stdout", "\n", "", "if", "sys", ".", "stderr", "is", "self", ":", "\n", "            ", "sys", ".", "stderr", "=", "self", ".", "stderr", "\n", "\n", "", "if", "self", ".", "file", "is", "not", "None", ":", "\n", "            ", "self", ".", "file", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time": [[111, 123], ["int", "numpy.rint"], "function", ["None"], ["\n", "", "", "", "def", "format_time", "(", "seconds", ":", "Union", "[", "int", ",", "float", "]", ")", "->", "str", ":", "\n", "    ", "\"\"\"Convert the seconds to human readable string with days, hours, minutes and seconds.\"\"\"", "\n", "s", "=", "int", "(", "np", ".", "rint", "(", "seconds", ")", ")", "\n", "\n", "if", "s", "<", "60", ":", "\n", "        ", "return", "\"{0}s\"", ".", "format", "(", "s", ")", "\n", "", "elif", "s", "<", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}m {1:02}s\"", ".", "format", "(", "s", "//", "60", ",", "s", "%", "60", ")", "\n", "", "elif", "s", "<", "24", "*", "60", "*", "60", ":", "\n", "        ", "return", "\"{0}h {1:02}m {2:02}s\"", ".", "format", "(", "s", "//", "(", "60", "*", "60", ")", ",", "(", "s", "//", "60", ")", "%", "60", ",", "s", "%", "60", ")", "\n", "", "else", ":", "\n", "        ", "return", "\"{0}d {1:02}h {2:02}m\"", ".", "format", "(", "s", "//", "(", "24", "*", "60", "*", "60", ")", ",", "(", "s", "//", "(", "60", "*", "60", ")", ")", "%", "24", ",", "(", "s", "//", "60", ")", "%", "60", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.ask_yes_no": [[125, 133], ["print", "distutils.util.strtobool", "input().lower", "input"], "function", ["None"], ["\n", "", "", "def", "ask_yes_no", "(", "question", ":", "str", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Ask the user the question until the user inputs a valid answer.\"\"\"", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "print", "(", "\"{0} [y/n]\"", ".", "format", "(", "question", ")", ")", "\n", "return", "strtobool", "(", "input", "(", ")", ".", "lower", "(", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "            ", "pass", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.tuple_product": [[135, 143], ["None"], "function", ["None"], ["\n", "", "", "", "def", "tuple_product", "(", "t", ":", "Tuple", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Calculate the product of the tuple elements.\"\"\"", "\n", "result", "=", "1", "\n", "\n", "for", "v", "in", "t", ":", "\n", "        ", "result", "*=", "v", "\n", "\n", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_dtype_and_ctype": [[159, 180], ["isinstance", "numpy.dtype", "hasattr", "_str_to_ctype.keys", "ctypes.sizeof", "hasattr", "RuntimeError"], "function", ["None"], ["\n", "def", "get_dtype_and_ctype", "(", "type_obj", ":", "Any", ")", "->", "Tuple", "[", "np", ".", "dtype", ",", "Any", "]", ":", "\n", "    ", "\"\"\"Given a type name string (or an object having a __name__ attribute), return matching Numpy and ctypes types that have the same size in bytes.\"\"\"", "\n", "type_str", "=", "None", "\n", "\n", "if", "isinstance", "(", "type_obj", ",", "str", ")", ":", "\n", "        ", "type_str", "=", "type_obj", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"__name__\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "__name__", "\n", "", "elif", "hasattr", "(", "type_obj", ",", "\"name\"", ")", ":", "\n", "        ", "type_str", "=", "type_obj", ".", "name", "\n", "", "else", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"Cannot infer type name from input\"", ")", "\n", "\n", "", "assert", "type_str", "in", "_str_to_ctype", ".", "keys", "(", ")", "\n", "\n", "my_dtype", "=", "np", ".", "dtype", "(", "type_str", ")", "\n", "my_ctype", "=", "_str_to_ctype", "[", "type_str", "]", "\n", "\n", "assert", "my_dtype", ".", "itemsize", "==", "ctypes", ".", "sizeof", "(", "my_ctype", ")", "\n", "\n", "return", "my_dtype", ",", "my_ctype", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_pickleable": [[182, 189], ["io.BytesIO", "pickle.dump"], "function", ["None"], ["\n", "", "def", "is_pickleable", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "io", ".", "BytesIO", "(", ")", "as", "stream", ":", "\n", "            ", "pickle", ".", "dump", "(", "obj", ",", "stream", ")", "\n", "", "return", "True", "\n", "", "except", ":", "\n", "        ", "return", "False", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_from_obj_name": [[194, 233], ["re.sub", "re.sub", "re.sub.split", "ImportError", "range", "importlib.import_module", "util.get_obj_from_module", "importlib.import_module", "importlib.import_module", "util.get_obj_from_module", "len", "str().startswith", "str", "sys.exc_info"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.pggan_official.tfutil.import_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module"], ["\n", "", "", "def", "get_module_from_obj_name", "(", "obj_name", ":", "str", ")", "->", "Tuple", "[", "types", ".", "ModuleType", ",", "str", "]", ":", "\n", "    ", "\"\"\"Searches for the underlying module behind the name to some python object.\n    Returns the module and the object name (original name with module part removed).\"\"\"", "\n", "\n", "# allow convenience shorthands, substitute them by full names", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^np.\"", ",", "\"numpy.\"", ",", "obj_name", ")", "\n", "obj_name", "=", "re", ".", "sub", "(", "\"^tf.\"", ",", "\"tensorflow.\"", ",", "obj_name", ")", "\n", "\n", "# list alternatives for (module_name, local_obj_name)", "\n", "parts", "=", "obj_name", ".", "split", "(", "\".\"", ")", "\n", "name_pairs", "=", "[", "(", "\".\"", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ",", "\".\"", ".", "join", "(", "parts", "[", "i", ":", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", "]", "\n", "\n", "# try each alternative in turn", "\n", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "return", "module", ",", "local_obj_name", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "# maybe some of the modules themselves contain errors?", "\n", "", "", "for", "module_name", ",", "_local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "", "except", "ImportError", ":", "\n", "            ", "if", "not", "str", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", ".", "startswith", "(", "\"No module named '\"", "+", "module_name", "+", "\"'\"", ")", ":", "\n", "                ", "raise", "\n", "\n", "# maybe the requested attribute is missing?", "\n", "", "", "", "for", "module_name", ",", "local_obj_name", "in", "name_pairs", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "module_name", ")", "# may raise ImportError", "\n", "get_obj_from_module", "(", "module", ",", "local_obj_name", ")", "# may raise AttributeError", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "\n", "# we are out of luck, but we have no idea why", "\n", "", "", "raise", "ImportError", "(", "obj_name", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module": [[235, 243], ["obj_name.split", "getattr"], "function", ["None"], ["\n", "", "def", "get_obj_from_module", "(", "module", ":", "types", ".", "ModuleType", ",", "obj_name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Traverses the object name and returns the last (rightmost) python object.\"\"\"", "\n", "if", "obj_name", "==", "''", ":", "\n", "        ", "return", "module", "\n", "", "obj", "=", "module", "\n", "for", "part", "in", "obj_name", ".", "split", "(", "\".\"", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name": [[245, 249], ["util.get_module_from_obj_name", "util.get_obj_from_module"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module"], ["\n", "", "def", "get_obj_by_name", "(", "name", ":", "str", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name.\"\"\"", "\n", "module", ",", "obj_name", "=", "get_module_from_obj_name", "(", "name", ")", "\n", "return", "get_obj_from_module", "(", "module", ",", "obj_name", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name": [[251, 257], ["util.get_obj_by_name", "callable", "get_obj_by_name."], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name"], ["\n", "", "def", "call_func_by_name", "(", "*", "args", ",", "func_name", ":", "str", "=", "None", ",", "**", "kwargs", ")", "->", "Any", ":", "\n", "    ", "\"\"\"Finds the python object with the given name and calls it as a function.\"\"\"", "\n", "assert", "func_name", "is", "not", "None", "\n", "func_obj", "=", "get_obj_by_name", "(", "func_name", ")", "\n", "assert", "callable", "(", "func_obj", ")", "\n", "return", "func_obj", "(", "*", "args", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_dir_by_obj_name": [[259, 263], ["util.get_module_from_obj_name", "os.path.dirname", "inspect.getfile"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_from_obj_name"], ["\n", "", "def", "get_module_dir_by_obj_name", "(", "obj_name", ":", "str", ")", "->", "str", ":", "\n", "    ", "\"\"\"Get the directory path of the module containing the given object name.\"\"\"", "\n", "module", ",", "_", "=", "get_module_from_obj_name", "(", "obj_name", ")", "\n", "return", "os", ".", "path", ".", "dirname", "(", "inspect", ".", "getfile", "(", "module", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function": [[265, 268], ["callable"], "function", ["None"], ["\n", "", "def", "is_top_level_function", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a top-level function, i.e., defined at module scope using 'def'.\"\"\"", "\n", "return", "callable", "(", "obj", ")", "and", "obj", ".", "__name__", "in", "sys", ".", "modules", "[", "obj", ".", "__module__", "]", ".", "__dict__", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_top_level_function_name": [[270, 274], ["util.is_top_level_function"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function"], ["\n", "", "def", "get_top_level_function_name", "(", "obj", ":", "Any", ")", "->", "str", ":", "\n", "    ", "\"\"\"Return the fully-qualified name of a top-level function.\"\"\"", "\n", "assert", "is_top_level_function", "(", "obj", ")", "\n", "return", "obj", ".", "__module__", "+", "\".\"", "+", "obj", ".", "__name__", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.list_dir_recursively_with_ignore": [[279, 310], ["os.path.isdir", "os.path.basename", "os.walk", "os.path.normpath", "zip", "os.path.join", "os.path.relpath", "len", "len", "dirs.remove", "os.path.join", "fnmatch.fnmatch", "fnmatch.fnmatch"], "function", ["None"], ["\n", "", "def", "list_dir_recursively_with_ignore", "(", "dir_path", ":", "str", ",", "ignores", ":", "List", "[", "str", "]", "=", "None", ",", "add_base_to_relative", ":", "bool", "=", "False", ")", "->", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ":", "\n", "    ", "\"\"\"List all files recursively in a given directory while ignoring given file and directory names.\n    Returns list of tuples containing both absolute and relative paths.\"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", "\n", "base_name", "=", "os", ".", "path", ".", "basename", "(", "os", ".", "path", ".", "normpath", "(", "dir_path", ")", ")", "\n", "\n", "if", "ignores", "is", "None", ":", "\n", "        ", "ignores", "=", "[", "]", "\n", "\n", "", "result", "=", "[", "]", "\n", "\n", "for", "root", ",", "dirs", ",", "files", "in", "os", ".", "walk", "(", "dir_path", ",", "topdown", "=", "True", ")", ":", "\n", "        ", "for", "ignore_", "in", "ignores", ":", "\n", "            ", "dirs_to_remove", "=", "[", "d", "for", "d", "in", "dirs", "if", "fnmatch", ".", "fnmatch", "(", "d", ",", "ignore_", ")", "]", "\n", "\n", "# dirs need to be edited in-place", "\n", "for", "d", "in", "dirs_to_remove", ":", "\n", "                ", "dirs", ".", "remove", "(", "d", ")", "\n", "\n", "", "files", "=", "[", "f", "for", "f", "in", "files", "if", "not", "fnmatch", ".", "fnmatch", "(", "f", ",", "ignore_", ")", "]", "\n", "\n", "", "absolute_paths", "=", "[", "os", ".", "path", ".", "join", "(", "root", ",", "f", ")", "for", "f", "in", "files", "]", "\n", "relative_paths", "=", "[", "os", ".", "path", ".", "relpath", "(", "p", ",", "dir_path", ")", "for", "p", "in", "absolute_paths", "]", "\n", "\n", "if", "add_base_to_relative", ":", "\n", "            ", "relative_paths", "=", "[", "os", ".", "path", ".", "join", "(", "base_name", ",", "p", ")", "for", "p", "in", "relative_paths", "]", "\n", "\n", "", "assert", "len", "(", "absolute_paths", ")", "==", "len", "(", "relative_paths", ")", "\n", "result", "+=", "zip", "(", "absolute_paths", ",", "relative_paths", ")", "\n", "\n", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.copy_files_and_create_dirs": [[312, 323], ["os.path.dirname", "shutil.copyfile", "os.path.exists", "os.makedirs"], "function", ["None"], ["\n", "", "def", "copy_files_and_create_dirs", "(", "files", ":", "List", "[", "Tuple", "[", "str", ",", "str", "]", "]", ")", "->", "None", ":", "\n", "    ", "\"\"\"Takes in a list of tuples of (src, dst) paths and copies files.\n    Will create all necessary directories.\"\"\"", "\n", "for", "file", "in", "files", ":", "\n", "        ", "target_dir_name", "=", "os", ".", "path", ".", "dirname", "(", "file", "[", "1", "]", ")", "\n", "\n", "# will create all intermediate-level directories", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "target_dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "target_dir_name", ")", "\n", "\n", "", "shutil", ".", "copyfile", "(", "file", "[", "0", "]", ",", "file", "[", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_url": [[328, 344], ["obj.startswith", "requests.compat.urlparse", "requests.compat.urlparse", "isinstance", "requests.compat.urljoin"], "function", ["None"], ["\n", "", "", "def", "is_url", "(", "obj", ":", "Any", ")", "->", "bool", ":", "\n", "    ", "\"\"\"Determine whether the given object is a valid URL string.\"\"\"", "\n", "if", "not", "isinstance", "(", "obj", ",", "str", ")", "or", "not", "\"://\"", "in", "obj", ":", "\n", "        ", "return", "False", "\n", "", "try", ":", "\n", "        ", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "obj", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "res", "=", "requests", ".", "compat", ".", "urlparse", "(", "requests", ".", "compat", ".", "urljoin", "(", "obj", ",", "\"/\"", ")", ")", "\n", "if", "not", "res", ".", "scheme", "or", "not", "res", ".", "netloc", "or", "not", "\".\"", "in", "res", ".", "netloc", ":", "\n", "            ", "return", "False", "\n", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "return", "True", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url": [[346, 411], ["util.is_url", "requests.compat.urljoin.startswith", "hashlib.md5().hexdigest", "io.BytesIO", "open", "glob.glob", "requests.Session", "reversed", "re.sub", "os.path.join", "os.path.join", "os.makedirs", "os.replace", "hashlib.md5", "os.path.join", "len", "open", "print", "range", "open", "f.write", "requests.compat.urljoin.encode", "len", "session.get", "res.raise_for_status", "re.search", "len", "IOError", "len", "res.content.decode", "res.headers.get", "print", "print", "res.headers.get", "IOError", "print", "html.unescape", "len", "requests.compat.urljoin", "IOError", "res.content.decode.split", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_encoder.StyleGANEncoder.encode", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["    ", "\"\"\"Download the given URL and return a binary-mode file object to access the data.\"\"\"", "\n", "assert", "is_url", "(", "url", ")", "\n", "assert", "num_attempts", ">=", "1", "\n", "\n", "# Lookup from cache.", "\n", "url_md5", "=", "hashlib", ".", "md5", "(", "url", ".", "encode", "(", "\"utf-8\"", ")", ")", ".", "hexdigest", "(", ")", "\n", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "cache_files", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_*\"", ")", ")", "\n", "if", "len", "(", "cache_files", ")", "==", "1", ":", "\n", "            ", "return", "open", "(", "cache_files", "[", "0", "]", ",", "\"rb\"", ")", "\n", "\n", "# Download.", "\n", "", "", "url_name", "=", "None", "\n", "url_data", "=", "None", "\n", "with", "requests", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "\"Downloading %s ...\"", "%", "url", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "for", "attempts_left", "in", "reversed", "(", "range", "(", "num_attempts", ")", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "session", ".", "get", "(", "url", ")", "as", "res", ":", "\n", "                    ", "res", ".", "raise_for_status", "(", ")", "\n", "if", "len", "(", "res", ".", "content", ")", "==", "0", ":", "\n", "                        ", "raise", "IOError", "(", "\"No data received\"", ")", "\n", "\n", "", "if", "len", "(", "res", ".", "content", ")", "<", "8192", ":", "\n", "                        ", "content_str", "=", "res", ".", "content", ".", "decode", "(", "\"utf-8\"", ")", "\n", "if", "\"download_warning\"", "in", "res", ".", "headers", ".", "get", "(", "\"Set-Cookie\"", ",", "\"\"", ")", ":", "\n", "                            ", "links", "=", "[", "html", ".", "unescape", "(", "link", ")", "for", "link", "in", "content_str", ".", "split", "(", "'\"'", ")", "if", "\"export=download\"", "in", "link", "]", "\n", "if", "len", "(", "links", ")", "==", "1", ":", "\n", "                                ", "url", "=", "requests", ".", "compat", ".", "urljoin", "(", "url", ",", "links", "[", "0", "]", ")", "\n", "raise", "IOError", "(", "\"Google Drive virus checker nag\"", ")", "\n", "", "", "if", "\"Google Drive - Quota exceeded\"", "in", "content_str", ":", "\n", "                            ", "raise", "IOError", "(", "\"Google Drive quota exceeded\"", ")", "\n", "\n", "", "", "match", "=", "re", ".", "search", "(", "r'filename=\"([^\"]*)\"'", ",", "res", ".", "headers", ".", "get", "(", "\"Content-Disposition\"", ",", "\"\"", ")", ")", "\n", "url_name", "=", "match", "[", "1", "]", "if", "match", "else", "url", "\n", "url_data", "=", "res", ".", "content", "\n", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" done\"", ")", "\n", "", "break", "\n", "", "", "except", ":", "\n", "                ", "if", "not", "attempts_left", ":", "\n", "                    ", "if", "verbose", ":", "\n", "                        ", "print", "(", "\" failed\"", ")", "\n", "", "raise", "\n", "", "if", "verbose", ":", "\n", "                    ", "print", "(", "\".\"", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "\n", "# Save to cache.", "\n", "", "", "", "", "if", "cache_dir", "is", "not", "None", ":", "\n", "        ", "safe_name", "=", "re", ".", "sub", "(", "r\"[^0-9a-zA-Z-._]\"", ",", "\"_\"", ",", "url_name", ")", "\n", "cache_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "temp_file", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "\"tmp_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "\"_\"", "+", "url_md5", "+", "\"_\"", "+", "safe_name", ")", "\n", "os", ".", "makedirs", "(", "cache_dir", ",", "exist_ok", "=", "True", ")", "\n", "with", "open", "(", "temp_file", ",", "\"wb\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "url_data", ")", "\n", "", "os", ".", "replace", "(", "temp_file", ",", "cache_file", ")", "# atomic", "\n", "\n", "# Return data as file object.", "\n", "", "return", "io", ".", "BytesIO", "(", "url_data", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.__init__": [[35, 56], ["time.time", "time.time", "print", "datetime.datetime.now().isoformat", "open", "pprint.pprint", "os.path.join", "datetime.datetime.now"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "submit_config", ":", "submit", ".", "SubmitConfig", ",", "config_module", ":", "types", ".", "ModuleType", "=", "None", ",", "max_epoch", ":", "Any", "=", "None", ")", ":", "\n", "        ", "self", ".", "submit_config", "=", "submit_config", "\n", "self", ".", "should_stop_flag", "=", "False", "\n", "self", ".", "has_closed", "=", "False", "\n", "self", ".", "start_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "last_update_interval", "=", "0.0", "\n", "self", ".", "max_epoch", "=", "max_epoch", "\n", "\n", "# pretty print the all the relevant content of the config module to a text file", "\n", "if", "config_module", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"config.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "filtered_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "config_module", ".", "__dict__", ".", "items", "(", ")", "if", "not", "k", ".", "startswith", "(", "\"_\"", ")", "and", "not", "isinstance", "(", "v", ",", "(", "types", ".", "ModuleType", ",", "types", ".", "FunctionType", ",", "types", ".", "LambdaType", ",", "submit", ".", "SubmitConfig", ",", "type", ")", ")", "}", "\n", "pprint", ".", "pprint", "(", "filtered_dict", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "# write out details about the run to a text file", "\n", "", "", "self", ".", "run_txt_data", "=", "{", "\"task_name\"", ":", "submit_config", ".", "task_name", ",", "\"host_name\"", ":", "submit_config", ".", "host_name", ",", "\"start_time\"", ":", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "}", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", "->", "\"RunContext\"", ":", "\n", "        ", "return", "self", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.__enter__": [[57, 59], ["None"], "methods", ["None"], ["\n", "", "def", "__exit__", "(", "self", ",", "exc_type", ":", "Any", ",", "exc_value", ":", "Any", ",", "traceback", ":", "Any", ")", "->", "None", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.__exit__": [[60, 62], ["run_context.RunContext.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["\n", "", "def", "update", "(", "self", ",", "loss", ":", "Any", "=", "0", ",", "cur_epoch", ":", "Any", "=", "0", ",", "max_epoch", ":", "Any", "=", "None", ")", "->", "None", ":", "\n", "        "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update": [[63, 73], ["time.time", "os.path.exists", "time.time", "os.path.join"], "methods", ["None"], ["\n", "assert", "not", "self", ".", "has_closed", "\n", "\n", "self", ".", "last_update_interval", "=", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "self", ".", "last_update_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"abort.txt\"", ")", ")", ":", "\n", "            ", "self", ".", "should_stop_flag", "=", "True", "\n", "\n", "", "max_epoch_val", "=", "self", ".", "max_epoch", "if", "max_epoch", "is", "None", "else", "max_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.should_stop": [[74, 77], ["None"], "methods", ["None"], ["", "def", "should_stop", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Tell whether a stopping condition has been triggered one way or another.\"\"\"", "\n", "return", "self", ".", "should_stop_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_start": [[78, 81], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_start", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the creation of the context.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "start_time", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_last_update": [[82, 85], ["time.time"], "methods", ["None"], ["", "def", "get_time_since_last_update", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time has passed since the last call to update.\"\"\"", "\n", "return", "time", ".", "time", "(", ")", "-", "self", ".", "last_update_time", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_last_update_interval": [[86, 89], ["None"], "methods", ["None"], ["", "def", "get_last_update_interval", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"How much time passed between the previous two calls to update.\"\"\"", "\n", "return", "self", ".", "last_update_interval", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.close": [[90, 104], ["datetime.datetime.now().isoformat", "open", "pprint.pprint", "datetime.datetime.now", "os.path.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Close the context and clean up.\n        Should only be called once.\"\"\"", "\n", "if", "not", "self", ".", "has_closed", ":", "\n", "# update the run.txt with stopping time", "\n", "            ", "self", ".", "run_txt_data", "[", "\"stop_time\"", "]", "=", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "isoformat", "(", "sep", "=", "\" \"", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "submit_config", ".", "run_dir", ",", "\"run.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "                ", "pprint", ".", "pprint", "(", "self", ".", "run_txt_data", ",", "stream", "=", "f", ",", "indent", "=", "4", ",", "width", "=", "200", ",", "compact", "=", "False", ")", "\n", "\n", "", "self", ".", "has_closed", "=", "True", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.SubmitConfig.__init__": [[87, 114], ["util.EasyDict.__init__", "internal.local.TargetOptions", "submit.PlatformExtras"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["\n", "\n", "", "def", "scs", "(", ")", ":", "\n", "  ", "cmds", "=", "[", "]", "\n", "Gs", "=", "[", "\"stylegan2_bedroom\"", ",", "\"stylegan2_church\"", ",", "\"stylegan2_ffhq\"", "]", "\n", "n_inits", "=", "[", "10", ",", "100", ",", "100", "]", "\n", "SE_format", "=", "\"expr/fewshot/{G}_LSE_fewshot/r{rind}_n{num_sample}.pth\"", "\n", "evalcmd", "=", "\"python manipulation/scs.py --SE {SE} --n-init {n_init}\"", "\n", "for", "rind", "in", "range", "(", "5", ")", ":", "\n", "    ", "for", "num_sample", "in", "[", "1", ",", "4", ",", "8", ",", "16", "]", ":", "\n", "      ", "for", "G", ",", "n_init", "in", "zip", "(", "Gs", ",", "n_inits", ")", ":", "\n", "        ", "SE", "=", "SE_format", ".", "format", "(", "G", "=", "G", ",", "rind", "=", "rind", ",", "num_sample", "=", "num_sample", ")", "\n", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "SE", "=", "SE", ",", "rind", "=", "rind", ",", "n_init", "=", "n_init", ")", ")", "\n", "if", "num_sample", "==", "1", "and", "rind", "==", "0", ":", "\n", "          ", "SE", "=", "f\"{G}_baseline\"", "\n", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "SE", "=", "SE", ",", "n_init", "=", "n_init", ")", ")", "\n", "\n", "", "", "", "", "return", "cmds", "\n", "\n", "\n", "", "def", "qualitative_figures", "(", ")", ":", "\n", "  ", "evalcmd", "=", "\"python figure/qualitative_paper.py --op {op} --place {place} --repeat {repeat} --row-set-num {row_set_num}\"", "\n", "cmds", "=", "[", "]", "\n", "for", "place", "in", "[", "\"paper\"", ",", "\"appendix\"", "]", ":", "\n", "    ", "for", "op", "in", "[", "\"face\"", ",", "\"bedroom\"", ",", "\"church\"", "]", ":", "\n", "      ", "for", "row_set_num", "in", "[", "1", ",", "2", "]", ":", "\n", "        ", "if", "place", "==", "\"paper\"", ":", "\n", "          ", "repeat", "=", "row_set_num", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_path_from_template": [[116, 136], ["path_template.replace.replace", "submit.get_user_name", "str", "platform.system", "pathlib.PureWindowsPath", "str", "RuntimeError", "platform.system", "RuntimeError", "pathlib.PurePosixPath"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_user_name"], ["          ", "repeat", "=", "row_set_num", "*", "5", "\n", "", "cmds", ".", "append", "(", "evalcmd", ".", "format", "(", "\n", "op", "=", "op", ",", "place", "=", "place", ",", "\n", "repeat", "=", "repeat", ",", "row_set_num", "=", "row_set_num", ")", ")", "\n", "", "", "", "return", "cmds", "\n", "\n", "\n", "", "def", "generator_semantics", "(", ")", ":", "\n", "  ", "ALL_GANs", "=", "\"stylegan2_bedroom,stylegan2_church,stylegan_bedroom,stylegan_church,pggan_bedroom,pggan_church,pggan_celebahq,stylegan_celebahq,stylegan2_ffhq,stylegan2_car,stylegan_ffhq\"", "\n", "cmds", "=", "[", "]", "\n", "basecmd", "=", "\"python script/semantics/generator_semantics.py --G {G}\"", "\n", "for", "G", "in", "ALL_GANs", ".", "split", "(", "\",\"", ")", ":", "\n", "    ", "cmds", ".", "append", "(", "basecmd", ".", "format", "(", "G", "=", "G", ")", ")", "\n", "", "return", "cmds", "\n", "\n", "\n", "", "funcs", "=", "{", "\n", "\"layerwise_LSE\"", ":", "layerwise_LSE", ",", "\n", "\"sr_LSE_arch\"", ":", "sr_LSE_arch", ",", "\n", "\"sr_NSE_arch\"", ":", "sr_NSE_arch", ",", "\n", "\"sr_all_method\"", ":", "sr_all_method", ",", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_template_from_path": [[138, 142], ["path.replace.replace"], "function", ["None"], ["\"sr_all_method_other\"", ":", "sr_all_method_other", ",", "\n", "\"train_fewshot\"", ":", "train_fewshot", ",", "\n", "\"scs\"", ":", "scs", ",", "\n", "\"qf\"", ":", "qualitative_figures", ",", "\n", "\"gs\"", ":", "generator_semantics", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path": [[144, 149], ["submit.get_template_from_path", "submit.get_path_from_template"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_template_from_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_path_from_template"], ["\n", "print", "(", "args", ".", "gpu", ")", "\n", "if", "args", ".", "gpu", "in", "[", "\"bzhou\"", ",", "\"chpc\"", "]", ":", "\n", "  ", "for", "i", ",", "cmd", "in", "enumerate", "(", "funcs", "[", "args", ".", "func", "]", "(", ")", ")", ":", "\n", "    ", "logfile", "=", "f\"logs/{args.func}_{i}.txt\"", "\n", "srun", "=", "f\"srun -p {args.gpu} -o {logfile} -J {args.func} -n1 --gres=gpu:1 -l {cmd}\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.set_user_name_override": [[151, 155], ["None"], "function", ["None"], ["os", ".", "system", "(", "srun", ")", "\n", "", "", "else", ":", "\n", "  ", "gpus", "=", "args", ".", "gpu", ".", "split", "(", "'/'", ")", "\n", "slots", "=", "[", "[", "]", "for", "_", "in", "gpus", "]", "\n", "for", "i", ",", "cmd", "in", "enumerate", "(", "funcs", "[", "args", ".", "func", "]", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_user_name": [[157, 171], ["platform.system", "os.getlogin", "platform.system", "RuntimeError", "pwd.getpwuid", "os.geteuid"], "function", ["None"], ["slots", "[", "i", "%", "len", "(", "gpus", ")", "]", ".", "append", "(", "f\"{cmd} --gpu-id {gpu}\"", ")", "\n", "", "for", "s", "in", "slots", ":", "\n", "    ", "cmd", "=", "\" && \"", ".", "join", "(", "s", ")", "#+ \" &\"", "\n", "print", "(", "cmd", ")", "\n", "os", ".", "system", "(", "cmd", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._create_run_dir_local": [[192, 209], ["submit.get_path_from_template", "submit._get_next_run_id_local", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_path_from_template", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._get_next_run_id_local"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._get_next_run_id_local": [[211, 225], ["re.compile", "re.compile.match", "os.listdir", "os.path.isdir", "int", "max", "os.path.join", "r.match.group"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._populate_run_dir": [[227, 253], ["pickle.dump", "util.get_module_dir_by_obj_name", "range", "util.list_dir_recursively_with_ignore", "util.get_module_dir_by_obj_name", "util.list_dir_recursively_with_ignore", "util.copy_files_and_create_dirs", "open", "open", "pprint.pprint", "os.path.dirname", "os.path.join", "os.path.join", "submit_config.run_func_name.count", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_dir_by_obj_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.list_dir_recursively_with_ignore", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.copy_files_and_create_dirs"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.run_wrapper": [[256, 308], ["dnnlib.RunContext.get().close", "util.Logger.close", "util.Logger", "util.Logger", "print", "time.time", "util.get_obj_by_name", "callable", "inspect.signature", "print", "open().close", "sys.exit", "util.get_obj_by_name.", "util.get_obj_by_name.", "dnnlib.RunContext.get", "os.path.join", "util.format_time", "traceback.print_exc", "os.path.join", "os.path.join", "shutil.copyfile", "open", "submit.get_path_from_template", "os.path.join", "time.time"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_path_from_template"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run": [[310, 344], ["copy.deepcopy", "submit._create_run_dir_local", "internal.local.Target.finalize_submit_config", "submit._populate_run_dir", "internal.local.Target.submit", "internal.local.Target", "RuntimeError", "submit.get_user_name", "re.match", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._create_run_dir_local", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.finalize_submit_config", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit._populate_run_dir", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.submit", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.get_user_name"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get": [[105, 111], ["run_context.RunContext"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.PlatformExtras.__init__": [[57, 60], ["None"], "methods", ["None"], ["  ", "cmds", "=", "[", "]", "\n", "srcmd", "=", "\"python train.py --G {G} --SE {SE}\"", "\n", "Gs", "=", "\"stylegan2_ffhq,stylegan_celebahq,pggan_celebahq\"", ".", "split", "(", "\",\"", ")", "\n", "for", "SE", "in", "[", "\"LSE\"", ",", "\"NSE-1\"", ",", "\"NSE-2\"", "]", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path": [[173, 190], ["os.path.join", "os.path.join", "os.getcwd"], "function", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN._internal.run.main": [[22, 43], ["str", "str", "str", "os.path.join", "pickle.load", "dnnlib.submission.submit.set_user_name_override", "dnnlib.submission.submit.run_wrapper", "RuntimeError", "os.path.exists", "RuntimeError", "open", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.set_user_name_override", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.run_wrapper"], ["def", "main", "(", ")", ":", "\n", "    ", "if", "not", "len", "(", "sys", ".", "argv", ")", ">=", "4", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"This script needs three arguments: run_dir, task_name and host_name!\"", ")", "\n", "\n", "", "run_dir", "=", "str", "(", "sys", ".", "argv", "[", "1", "]", ")", "\n", "task_name", "=", "str", "(", "sys", ".", "argv", "[", "2", "]", ")", "\n", "host_name", "=", "str", "(", "sys", ".", "argv", "[", "3", "]", ")", "\n", "\n", "submit_config_path", "=", "os", ".", "path", ".", "join", "(", "run_dir", ",", "\"submit_config.pkl\"", ")", "\n", "\n", "# SubmitConfig should have been pickled to the run dir", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "submit_config_path", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "\"SubmitConfig pickle file does not exist!\"", ")", "\n", "\n", "", "submit_config", ":", "dnnlib", ".", "SubmitConfig", "=", "pickle", ".", "load", "(", "open", "(", "submit_config_path", ",", "\"rb\"", ")", ")", "\n", "dnnlib", ".", "submission", ".", "submit", ".", "set_user_name_override", "(", "submit_config", ".", "user_name", ")", "\n", "\n", "submit_config", ".", "task_name", "=", "task_name", "\n", "submit_config", ".", "host_name", "=", "host_name", "\n", "\n", "dnnlib", ".", "submission", ".", "submit", ".", "run_wrapper", "(", "submit_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.run": [[28, 32], ["tfutil.assert_tf_initialized", "tensorflow.get_default_session().run", "tensorflow.get_default_session"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "flatten", "(", "x", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Flatten'", ")", ":", "\n", "        ", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression": [[34, 37], ["isinstance"], "function", ["None"], ["    ", "with", "tf", ".", "name_scope", "(", "'Log2'", ")", ":", "\n", "        ", "return", "tf", ".", "log", "(", "x", ")", "*", "np", ".", "float32", "(", "1.0", "/", "np", ".", "log", "(", "2.0", ")", ")", "\n", "\n", "", "", "def", "exp2", "(", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.shape_to_list": [[39, 42], ["None"], "function", ["None"], ["        ", "return", "tf", ".", "exp", "(", "x", "*", "np", ".", "float32", "(", "np", ".", "log", "(", "2.0", ")", ")", ")", "\n", "\n", "", "", "def", "lerp", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'Lerp'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.flatten": [[44, 48], ["tensorflow.name_scope", "tensorflow.reshape"], "function", ["None"], ["\n", "", "", "def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'LerpClip'", ")", ":", "\n", "        ", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2": [[50, 54], ["tensorflow.name_scope", "tensorflow.log", "numpy.float32", "numpy.log"], "function", ["None"], ["    ", "return", "tf", ".", "name_scope", "(", "scope", "+", "'/'", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Initialize TensorFlow graph and session using good default settings.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.exp2": [[56, 60], ["tensorflow.name_scope", "tensorflow.exp", "numpy.float32", "numpy.log"], "function", ["None"], ["    ", "if", "tf", ".", "get_default_session", "(", ")", "is", "None", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "np", ".", "random", ".", "randint", "(", "1", "<<", "31", ")", ")", "\n", "create_session", "(", "config_dict", ",", "force_as_default", "=", "True", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.lerp": [[62, 66], ["tensorflow.name_scope"], "function", ["None"], ["# {'gpu_options.allow_growth': True}", "\n", "\n", "", "", "def", "create_session", "(", "config_dict", "=", "dict", "(", ")", ",", "force_as_default", "=", "False", ")", ":", "\n", "    ", "config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "for", "key", ",", "value", "in", "config_dict", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.lerp_clip": [[68, 72], ["tensorflow.name_scope", "tensorflow.clip_by_value"], "function", ["None"], ["obj", "=", "config", "\n", "for", "field", "in", "fields", "[", ":", "-", "1", "]", ":", "\n", "            ", "obj", "=", "getattr", "(", "obj", ",", "field", ")", "\n", "", "setattr", "(", "obj", ",", "fields", "[", "-", "1", "]", ",", "value", ")", "\n", "", "session", "=", "tf", ".", "Session", "(", "config", "=", "config", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope": [[74, 77], ["tensorflow.name_scope"], "function", ["None"], ["        ", "session", ".", "_default_session", "=", "session", ".", "as_default", "(", ")", "\n", "session", ".", "_default_session", ".", "enforce_nesting", "=", "False", "\n", "session", ".", "_default_session", ".", "__enter__", "(", ")", "\n", "", "return", "session", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_variable_scope": [[79, 82], ["tensorflow.variable_scope", "tensorflow.VariableScope"], "function", ["None"], ["#----------------------------------------------------------------------------", "\n", "# Initialize all tf.Variables that have not already been initialized.", "\n", "# Equivalent to the following, but more efficient and does not bloat the tf graph:", "\n", "#   tf.variables_initializer(tf.report_unitialized_variables()).run()", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil._sanitize_tf_config": [[84, 105], ["dict", "list", "key.split", "dict.update", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update"], ["", "def", "init_uninited_vars", "(", "vars", "=", "None", ")", ":", "\n", "    ", "if", "vars", "is", "None", ":", "vars", "=", "tf", ".", "global_variables", "(", ")", "\n", "test_vars", "=", "[", "]", ";", "test_ops", "=", "[", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "        ", "for", "var", "in", "vars", ":", "\n", "            ", "assert", "is_tf_expression", "(", "var", ")", "\n", "try", ":", "\n", "                ", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "':0'", ",", "'/IsVariableInitialized:0'", ")", ")", "\n", "", "except", "KeyError", ":", "\n", "# Op does not exist => variable may be uninitialized.", "\n", "                ", "test_vars", ".", "append", "(", "var", ")", "\n", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", ")", ":", "\n", "                    ", "test_ops", ".", "append", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ")", "\n", "", "", "", "", "init_vars", "=", "[", "var", "for", "var", ",", "inited", "in", "zip", "(", "test_vars", ",", "run", "(", "test_ops", ")", ")", "if", "not", "inited", "]", "\n", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "init_vars", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Set the values of given tf.Variables.", "\n", "# Equivalent to the following, but more efficient and does not bloat the tf graph:", "\n", "#   tfutil.run([tf.assign(var, value) for var, value in var_to_value_dict.items()]", "\n", "\n", "", "def", "set_vars", "(", "var_to_value_dict", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf": [[107, 133], ["tfutil._sanitize_tf_config", "_sanitize_tf_config.items", "tfutil.create_session", "tensorflow.get_default_session", "numpy.random.seed", "numpy.random.randint", "tensorflow.set_random_seed", "key.split", "str", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session"], ["feed_dict", "=", "{", "}", "\n", "for", "var", ",", "value", "in", "var_to_value_dict", ".", "items", "(", ")", ":", "\n", "        ", "assert", "is_tf_expression", "(", "var", ")", "\n", "try", ":", "\n", "            ", "setter", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_tensor_by_name", "(", "var", ".", "name", ".", "replace", "(", "':0'", ",", "'/setter:0'", ")", ")", "# look for existing op", "\n", "", "except", "KeyError", ":", "\n", "            ", "with", "absolute_name_scope", "(", "var", ".", "name", ".", "split", "(", "':'", ")", "[", "0", "]", ")", ":", "\n", "                ", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control_dependencies", "\n", "                    ", "setter", "=", "tf", ".", "assign", "(", "var", ",", "tf", ".", "placeholder", "(", "var", ".", "dtype", ",", "var", ".", "shape", ",", "'new_value'", ")", ",", "name", "=", "'setter'", ")", "# create new setter", "\n", "", "", "", "ops", ".", "append", "(", "setter", ")", "\n", "feed_dict", "[", "setter", ".", "op", ".", "inputs", "[", "1", "]", "]", "=", "value", "\n", "", "run", "(", "ops", ",", "feed_dict", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Autosummary creates an identity op that internally keeps track of the input", "\n", "# values and automatically shows up in TensorBoard. The reported value", "\n", "# represents an average over input components. The average is accumulated", "\n", "# constantly over time and flushed when save_summaries() is called.", "\n", "#", "\n", "# Notes:", "\n", "# - The output tensor must be used as an input for something else in the", "\n", "#   graph. Otherwise, the autosummary op will not get executed, and the average", "\n", "#   value will not get accumulated.", "\n", "# - It is perfectly fine to include autosummaries with the same name in", "\n", "#   several places throughout the graph, even if they are executed concurrently.", "\n", "# - It is ok to also pass in a python scalar or numpy array. In this case, it", "\n", "#   is added to the average immediately.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized": [[135, 139], ["tensorflow.get_default_session", "RuntimeError"], "function", ["None"], ["", "_autosummary_vars", "=", "OrderedDict", "(", ")", "# name => [var, ...]", "\n", "_autosummary_immediate", "=", "OrderedDict", "(", ")", "# name => update_op, update_value", "\n", "_autosummary_finalized", "=", "False", "\n", "\n", "def", "autosummary", "(", "name", ",", "value", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_session": [[141, 162], ["tfutil._sanitize_tf_config", "tensorflow.ConfigProto", "_sanitize_tf_config.items", "tensorflow.Session", "key.split", "tf.Session.as_default", "tf.Session._default_session.__enter__", "setattr", "getattr"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil._sanitize_tf_config", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.__enter__"], ["if", "is_tf_expression", "(", "value", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'summary_'", "+", "id", ")", ",", "tf", ".", "device", "(", "value", ".", "device", ")", ":", "\n", "            ", "update_op", "=", "_create_autosummary_var", "(", "name", ",", "value", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "value", ")", "\n", "", "", "", "else", ":", "# python scalar or numpy array", "\n", "        ", "if", "name", "not", "in", "_autosummary_immediate", ":", "\n", "            ", "with", "absolute_name_scope", "(", "'Autosummary/'", "+", "id", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "update_value", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "update_op", "=", "_create_autosummary_var", "(", "name", ",", "update_value", ")", "\n", "_autosummary_immediate", "[", "name", "]", "=", "update_op", ",", "update_value", "\n", "", "", "update_op", ",", "update_value", "=", "_autosummary_immediate", "[", "name", "]", "\n", "run", "(", "update_op", ",", "{", "update_value", ":", "np", ".", "float32", "(", "value", ")", "}", ")", "\n", "return", "value", "\n", "\n", "# Create the necessary ops to include autosummaries in TensorBoard report.", "\n", "# Note: This should be done only once per graph.", "\n", "", "", "def", "finalize_autosummaries", "(", ")", ":", "\n", "    ", "global", "_autosummary_finalized", "\n", "if", "_autosummary_finalized", ":", "\n", "        ", "return", "\n", "", "_autosummary_finalized", "=", "True", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars": [[164, 192], ["tfutil.assert_tf_initialized", "tfutil.run", "tensorflow.global_variables", "tensorflow.control_dependencies", "tfutil.is_tf_expression", "zip", "tensorflow.get_default_graph().get_tensor_by_name", "tfutil.run", "var.name.replace", "test_vars.append", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "test_ops.append", "tensorflow.is_variable_initialized", "var.name.split"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "for", "name", ",", "vars", "in", "_autosummary_vars", ".", "items", "(", ")", ":", "\n", "            ", "id", "=", "name", ".", "replace", "(", "'/'", ",", "'_'", ")", "\n", "with", "absolute_name_scope", "(", "'Autosummary/'", "+", "id", ")", ":", "\n", "                ", "sum", "=", "tf", ".", "add_n", "(", "vars", ")", "\n", "avg", "=", "sum", "[", "0", "]", "/", "sum", "[", "1", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "avg", "]", ")", ":", "# read before resetting", "\n", "                    ", "reset_ops", "=", "[", "tf", ".", "assign", "(", "var", ",", "tf", ".", "zeros", "(", "2", ")", ")", "for", "var", "in", "vars", "]", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "reset_ops", ")", ":", "# reset before reporting", "\n", "                        ", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "avg", ")", "\n", "\n", "# Internal helper for creating autosummary accumulators.", "\n", "", "", "", "", "", "", "def", "_create_autosummary_var", "(", "name", ",", "value_expr", ")", ":", "\n", "    ", "assert", "not", "_autosummary_finalized", "\n", "v", "=", "tf", ".", "cast", "(", "value_expr", ",", "tf", ".", "float32", ")", "\n", "if", "v", ".", "shape", ".", "ndims", "is", "0", ":", "\n", "        ", "v", "=", "[", "v", ",", "np", ".", "float32", "(", "1.0", ")", "]", "\n", "", "elif", "v", ".", "shape", ".", "ndims", "is", "1", ":", "\n", "        ", "v", "=", "[", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", "[", "0", "]", ",", "tf", ".", "float32", ")", "]", "\n", "", "else", ":", "\n", "        ", "v", "=", "[", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "reduce_prod", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", ",", "tf", ".", "float32", ")", ")", "]", "\n", "", "v", "=", "tf", ".", "cond", "(", "tf", ".", "is_finite", "(", "v", "[", "0", "]", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "v", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "2", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "2", ")", ")", "# [numerator, denominator]", "\n", "", "update_op", "=", "tf", ".", "cond", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ",", "lambda", ":", "tf", ".", "assign_add", "(", "var", ",", "v", ")", ",", "lambda", ":", "tf", ".", "assign", "(", "var", ",", "v", ")", ")", "\n", "if", "name", "in", "_autosummary_vars", ":", "\n", "        ", "_autosummary_vars", "[", "name", "]", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "        ", "_autosummary_vars", "[", "name", "]", "=", "[", "var", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars": [[194, 218], ["tfutil.assert_tf_initialized", "var_to_value_dict.items", "tfutil.run", "tfutil.is_tf_expression", "ops.append", "tensorflow.get_default_graph().get_tensor_by_name", "var.name.replace", "tensorflow.get_default_graph", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.assign", "var.name.split", "tensorflow.placeholder"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["\n", "#----------------------------------------------------------------------------", "\n", "# Call filewriter.add_summary() with all summaries in the default graph,", "\n", "# automatically finalizing and merging them on the first call.", "\n", "\n", "", "_summary_merge_op", "=", "None", "\n", "\n", "def", "save_summaries", "(", "filewriter", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "global", "_summary_merge_op", "\n", "if", "_summary_merge_op", "is", "None", ":", "\n", "        ", "finalize_autosummaries", "(", ")", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "_summary_merge_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "", "", "filewriter", ".", "add_summary", "(", "_summary_merge_op", ".", "eval", "(", ")", ",", "global_step", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Utilities for importing modules and objects by name.", "\n", "\n", "", "def", "import_module", "(", "module_or_obj_name", ")", ":", "\n", "    ", "parts", "=", "module_or_obj_name", ".", "split", "(", "'.'", ")", "\n", "parts", "[", "0", "]", "=", "{", "'np'", ":", "'numpy'", ",", "'tf'", ":", "'tensorflow'", "}", ".", "get", "(", "parts", "[", "0", "]", ",", "parts", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "parts", ")", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "module", "=", "importlib", ".", "import_module", "(", "'.'", ".", "join", "(", "parts", "[", ":", "i", "]", ")", ")", "\n", "relative_obj_name", "=", "'.'", ".", "join", "(", "parts", "[", "i", ":", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_var_with_large_initial_value": [[220, 228], ["tfutil.assert_tf_initialized", "isinstance", "tensorflow.zeros", "tensorflow.Variable", "tfutil.set_vars"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars"], ["", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "", "", "raise", "ImportError", "(", "module_or_obj_name", ")", "\n", "\n", "", "def", "find_obj_in_module", "(", "module", ",", "relative_obj_name", ")", ":", "\n", "    ", "obj", "=", "module", "\n", "for", "part", "in", "relative_obj_name", ".", "split", "(", "'.'", ")", ":", "\n", "        ", "obj", "=", "getattr", "(", "obj", ",", "part", ")", "\n", "", "return", "obj", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_from_uint8": [[230, 238], ["tensorflow.cast", "tensorflow.transpose"], "function", ["None"], ["", "def", "import_obj", "(", "obj_name", ")", ":", "\n", "    ", "module", ",", "relative_obj_name", "=", "import_module", "(", "obj_name", ")", "\n", "return", "find_obj_in_module", "(", "module", ",", "relative_obj_name", ")", "\n", "\n", "", "def", "call_func_by_name", "(", "*", "args", ",", "func", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "func", "is", "not", "None", "\n", "return", "import_obj", "(", "func", ")", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.convert_images_to_uint8": [[240, 253], ["tensorflow.cast", "tensorflow.saturate_cast", "tensorflow.nn.avg_pool", "tensorflow.transpose"], "function", ["None"], ["# - Gradient averaging for multi-GPU training.", "\n", "# - Dynamic loss scaling and typecasts for FP16 training.", "\n", "# - Ignoring corrupted gradients that contain NaNs/Infs.", "\n", "# - Reporting statistics.", "\n", "# - Well-chosen default settings.", "\n", "\n", "", "class", "Optimizer", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "name", "=", "'Train'", ",", "\n", "tf_optimizer", "=", "'tf.train.AdamOptimizer'", ",", "\n", "learning_rate", "=", "0.001", ",", "\n", "use_loss_scaling", "=", "False", ",", "\n", "loss_scaling_init", "=", "64.0", ",", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__init__": [[73, 99], ["tfutil.assert_tf_initialized", "util.is_pickleable", "network.Network._init_fields", "util.EasyDict", "util.is_top_level_function", "util.get_module_from_obj_name", "util.get_obj_from_module", "callable", "_import_module_src.get", "network.Network._init_graph", "network.Network.reset_own_vars", "isinstance", "isinstance", "util.is_top_level_function", "util.get_top_level_function_name", "inspect.getsource"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_pickleable", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_module_from_obj_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_top_level_function_name"], ["\n", "def", "__init__", "(", "self", ",", "name", ":", "str", "=", "None", ",", "func_name", ":", "Any", "=", "None", ",", "**", "static_kwargs", ")", ":", "\n", "        ", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "isinstance", "(", "name", ",", "str", ")", "or", "name", "is", "None", "\n", "assert", "func_name", "is", "not", "None", "\n", "assert", "isinstance", "(", "func_name", ",", "str", ")", "or", "util", ".", "is_top_level_function", "(", "func_name", ")", "\n", "assert", "util", ".", "is_pickleable", "(", "static_kwargs", ")", "\n", "\n", "self", ".", "_init_fields", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "static_kwargs", ")", "\n", "\n", "# Locate the user-specified network build function.", "\n", "if", "util", ".", "is_top_level_function", "(", "func_name", ")", ":", "\n", "            ", "func_name", "=", "util", ".", "get_top_level_function_name", "(", "func_name", ")", "\n", "", "module", ",", "self", ".", "_build_func_name", "=", "util", ".", "get_module_from_obj_name", "(", "func_name", ")", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Dig up source code for the module containing the build function.", "\n", "self", ".", "_build_module_src", "=", "_import_module_src", ".", "get", "(", "module", ",", "None", ")", "\n", "if", "self", ".", "_build_module_src", "is", "None", ":", "\n", "            ", "self", ".", "_build_module_src", "=", "inspect", ".", "getsource", "(", "module", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields": [[100, 124], ["util.EasyDict", "util.EasyDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "dict"], "methods", ["None"], ["\n", "", "def", "_init_fields", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "name", "=", "None", "\n", "self", ".", "scope", "=", "None", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", ")", "\n", "self", ".", "num_inputs", "=", "0", "\n", "self", ".", "num_outputs", "=", "0", "\n", "self", ".", "input_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "output_shapes", "=", "[", "[", "]", "]", "\n", "self", ".", "input_shape", "=", "[", "]", "\n", "self", ".", "output_shape", "=", "[", "]", "\n", "self", ".", "input_templates", "=", "[", "]", "\n", "self", ".", "output_templates", "=", "[", "]", "\n", "self", ".", "input_names", "=", "[", "]", "\n", "self", ".", "output_names", "=", "[", "]", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", ")", "\n", "\n", "self", ".", "_build_func", "=", "None", "# User-supplied build function that constructs the network.", "\n", "self", ".", "_build_func_name", "=", "None", "# Name of the build function.", "\n", "self", ".", "_build_module_src", "=", "None", "# Full source code of the module containing the build function.", "\n", "self", ".", "_run_cache", "=", "dict", "(", ")", "# Cached graph data for Network.run().", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph": [[125, 186], ["inspect.signature().parameters.values", "len", "re.match", "dict", "len", "all", "any", "any", "any", "collections.OrderedDict", "collections.OrderedDict", "network.Network.vars.update", "collections.OrderedDict", "collections.OrderedDict", "tensorflow.name_scope", "tensorflow.get_default_graph().unique_name", "tfutil.absolute_variable_scope", "tfutil.absolute_name_scope", "tfutil.is_tf_expression", "isinstance", "tfutil.is_tf_expression", "list", "ValueError", "ValueError", "ValueError", "len", "len", "ValueError", "t.shape.as_list", "t.shape.as_list", "network.Network.input_names.append", "tensorflow.get_default_graph().get_name_scope", "tensorflow.control_dependencies", "network.Network._build_func", "tfutil.is_tf_expression", "set", "[].split", "inspect.signature", "tensorflow.get_default_graph", "tensorflow.get_variable_scope", "tensorflow.placeholder", "isinstance", "network.Network.components.values", "tensorflow.global_variables", "network.Network.components.values", "comp.vars.items", "network.Network.vars.items", "network.Network.vars.items", "tensorflow.get_default_graph", "var.name[].split", "var.name.split", "network.Network.components.values", "t.name.split", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["\n", "", "def", "_init_graph", "(", "self", ")", "->", "None", ":", "\n", "# Collect inputs.", "\n", "        ", "self", ".", "input_names", "=", "[", "]", "\n", "\n", "for", "param", "in", "inspect", ".", "signature", "(", "self", ".", "_build_func", ")", ".", "parameters", ".", "values", "(", ")", ":", "\n", "            ", "if", "param", ".", "kind", "==", "param", ".", "POSITIONAL_OR_KEYWORD", "and", "param", ".", "default", "is", "param", ".", "empty", ":", "\n", "                ", "self", ".", "input_names", ".", "append", "(", "param", ".", "name", ")", "\n", "\n", "", "", "self", ".", "num_inputs", "=", "len", "(", "self", ".", "input_names", ")", "\n", "assert", "self", ".", "num_inputs", ">=", "1", "\n", "\n", "# Choose name and scope.", "\n", "if", "self", ".", "name", "is", "None", ":", "\n", "            ", "self", ".", "name", "=", "self", ".", "_build_func_name", "\n", "", "assert", "re", ".", "match", "(", "\"^[A-Za-z0-9_.\\\\-]*$\"", ",", "self", ".", "name", ")", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ":", "\n", "            ", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "name", ",", "mark_as_used", "=", "True", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "True", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build template graph.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "# ignore surrounding scopes", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "assert", "tf", ".", "get_default_graph", "(", ")", ".", "get_name_scope", "(", ")", "==", "self", ".", "scope", "\n", "with", "tf", ".", "control_dependencies", "(", "None", ")", ":", "# ignore surrounding control dependencies", "\n", "                ", "self", ".", "input_templates", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "out_expr", "=", "self", ".", "_build_func", "(", "*", "self", ".", "input_templates", ",", "**", "build_kwargs", ")", "\n", "\n", "# Collect outputs.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "self", ".", "output_templates", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "self", ".", "num_outputs", "=", "len", "(", "self", ".", "output_templates", ")", "\n", "assert", "self", ".", "num_outputs", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "t", ")", "for", "t", "in", "self", ".", "output_templates", ")", "\n", "\n", "# Perform sanity checks.", "\n", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "input_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network input shapes not defined. Please call x.set_shape() for each input.\"", ")", "\n", "", "if", "any", "(", "t", ".", "shape", ".", "ndims", "is", "None", "for", "t", "in", "self", ".", "output_templates", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Network output shapes not defined. Please call x.set_shape() where applicable.\"", ")", "\n", "", "if", "any", "(", "not", "isinstance", "(", "comp", ",", "Network", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must be Networks themselves.\"", ")", "\n", "", "if", "len", "(", "self", ".", "components", ")", "!=", "len", "(", "set", "(", "comp", ".", "name", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"Components of a Network must have unique names.\"", ")", "\n", "\n", "# List inputs and outputs.", "\n", "", "self", ".", "input_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "input_templates", "]", "\n", "self", ".", "output_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "t", ".", "shape", ")", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "self", ".", "input_shape", "=", "self", ".", "input_shapes", "[", "0", "]", "\n", "self", ".", "output_shape", "=", "self", ".", "output_shapes", "[", "0", "]", "\n", "self", ".", "output_names", "=", "[", "t", ".", "name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", "for", "t", "in", "self", ".", "output_templates", "]", "\n", "\n", "# List variables.", "\n", "self", ".", "own_vars", "=", "OrderedDict", "(", "(", "var", ".", "name", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "var", ")", "for", "var", "in", "tf", ".", "global_variables", "(", "self", ".", "scope", "+", "\"/\"", ")", ")", "\n", "self", ".", "vars", "=", "OrderedDict", "(", "self", ".", "own_vars", ")", "\n", "self", ".", "vars", ".", "update", "(", "(", "comp", ".", "name", "+", "\"/\"", "+", "name", ",", "var", ")", "for", "comp", "in", "self", ".", "components", ".", "values", "(", ")", "for", "name", ",", "var", "in", "comp", ".", "vars", ".", "items", "(", ")", ")", "\n", "self", ".", "trainables", "=", "OrderedDict", "(", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", "if", "var", ".", "trainable", ")", "\n", "self", ".", "var_global_to_local", "=", "OrderedDict", "(", "(", "var", ".", "name", ".", "split", "(", "\":\"", ")", "[", "0", "]", ",", "name", ")", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_own_vars": [[187, 190], ["tfutil.run", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "reset_own_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, excluding sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "own_vars", ".", "values", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_vars": [[191, 194], ["tfutil.run", "network.Network.vars.values"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "reset_vars", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "vars", ".", "values", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_trainables": [[195, 198], ["tfutil.run", "network.Network.trainables.values"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "reset_trainables", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Re-initialize all trainable variables of this network, including sub-networks.\"\"\"", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "var", "in", "self", ".", "trainables", ".", "values", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for": [[199, 233], ["dict", "dict.update", "zip", "len", "all", "tfutil.absolute_variable_scope", "tensorflow.name_scope", "zip", "network.Network._build_func", "isinstance", "tfutil.is_tf_expression", "isinstance", "final_inputs.append", "tensorflow.zeros.set_shape", "tfutil.is_tf_expression", "list", "tensorflow.get_variable_scope", "tensorflow.identity", "tensorflow.zeros", "tensorflow.shape"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_variable_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["\n", "", "def", "get_output_for", "(", "self", ",", "*", "in_expr", ":", "TfExpression", ",", "return_as_list", ":", "bool", "=", "False", ",", "**", "dynamic_kwargs", ")", "->", "Union", "[", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", ":", "\n", "        ", "\"\"\"Construct TensorFlow expression(s) for the output(s) of this network, given the input expression(s).\"\"\"", "\n", "assert", "len", "(", "in_expr", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "expr", "is", "None", "for", "expr", "in", "in_expr", ")", "\n", "\n", "# Finalize build func kwargs.", "\n", "build_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "build_kwargs", ".", "update", "(", "dynamic_kwargs", ")", "\n", "build_kwargs", "[", "\"is_template_graph\"", "]", "=", "False", "\n", "build_kwargs", "[", "\"components\"", "]", "=", "self", ".", "components", "\n", "\n", "# Build TensorFlow graph to evaluate the network.", "\n", "with", "tfutil", ".", "absolute_variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "True", ")", ",", "tf", ".", "name_scope", "(", "self", ".", "name", ")", ":", "\n", "            ", "assert", "tf", ".", "get_variable_scope", "(", ")", ".", "name", "==", "self", ".", "scope", "\n", "valid_inputs", "=", "[", "expr", "for", "expr", "in", "in_expr", "if", "expr", "is", "not", "None", "]", "\n", "final_inputs", "=", "[", "]", "\n", "for", "expr", ",", "name", ",", "shape", "in", "zip", "(", "in_expr", ",", "self", ".", "input_names", ",", "self", ".", "input_shapes", ")", ":", "\n", "                ", "if", "expr", "is", "not", "None", ":", "\n", "                    ", "expr", "=", "tf", ".", "identity", "(", "expr", ",", "name", "=", "name", ")", "\n", "", "else", ":", "\n", "                    ", "expr", "=", "tf", ".", "zeros", "(", "[", "tf", ".", "shape", "(", "valid_inputs", "[", "0", "]", ")", "[", "0", "]", "]", "+", "shape", "[", "1", ":", "]", ",", "name", "=", "name", ")", "\n", "", "final_inputs", ".", "append", "(", "expr", ")", "\n", "", "out_expr", "=", "self", ".", "_build_func", "(", "*", "final_inputs", ",", "**", "build_kwargs", ")", "\n", "\n", "# Propagate input shapes back to the user-specified expressions.", "\n", "", "for", "expr", ",", "final", "in", "zip", "(", "in_expr", ",", "final_inputs", ")", ":", "\n", "            ", "if", "isinstance", "(", "expr", ",", "tf", ".", "Tensor", ")", ":", "\n", "                ", "expr", ".", "set_shape", "(", "final", ".", "shape", ")", "\n", "\n", "# Express outputs in the desired format.", "\n", "", "", "assert", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "or", "isinstance", "(", "out_expr", ",", "tuple", ")", "\n", "if", "return_as_list", ":", "\n", "            ", "out_expr", "=", "[", "out_expr", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_expr", ")", "else", "list", "(", "out_expr", ")", "\n", "", "return", "out_expr", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_var_local_name": [[234, 239], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["\n", "", "def", "get_var_local_name", "(", "self", ",", "var_or_global_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "str", ":", "\n", "        ", "\"\"\"Get the local name of a given variable, without any surrounding name scopes.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_global_name", ")", "or", "isinstance", "(", "var_or_global_name", ",", "str", ")", "\n", "global_name", "=", "var_or_global_name", "if", "isinstance", "(", "var_or_global_name", ",", "str", ")", "else", "var_or_global_name", ".", "name", "\n", "return", "self", ".", "var_global_to_local", "[", "global_name", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var": [[240, 244], ["tfutil.is_tf_expression", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression"], ["\n", "", "def", "find_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Find variable by local or global name.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "var_or_local_name", ")", "or", "isinstance", "(", "var_or_local_name", ",", "str", ")", "\n", "return", "self", ".", "vars", "[", "var_or_local_name", "]", "if", "isinstance", "(", "var_or_local_name", ",", "str", ")", "else", "var_or_local_name", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_var": [[245, 249], ["network.Network.find_var().eval", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["\n", "", "def", "get_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"Get the value of a given variable as NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.run(list_of_vars) whenever possible.\"\"\"", "\n", "return", "self", ".", "find_var", "(", "var_or_local_name", ")", ".", "eval", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.set_var": [[250, 254], ["tfutil.set_vars", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["\n", "", "def", "set_var", "(", "self", ",", "var_or_local_name", ":", "Union", "[", "TfExpression", ",", "str", "]", ",", "new_value", ":", "Union", "[", "int", ",", "float", ",", "np", ".", "ndarray", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Set the value of a given variable based on the given NumPy array.\n        Note: This method is very inefficient -- prefer to use tflib.set_vars() whenever possible.\"\"\"", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "var_or_local_name", ")", ":", "new_value", "}", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__getstate__": [[255, 266], ["dict", "dict", "dict", "list", "zip", "network.Network.own_vars.keys", "tfutil.run", "list", "network.Network.own_vars.values"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "__getstate__", "(", "self", ")", "->", "dict", ":", "\n", "        ", "\"\"\"Pickle export.\"\"\"", "\n", "state", "=", "dict", "(", ")", "\n", "state", "[", "\"version\"", "]", "=", "3", "\n", "state", "[", "\"name\"", "]", "=", "self", ".", "name", "\n", "state", "[", "\"static_kwargs\"", "]", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "state", "[", "\"components\"", "]", "=", "dict", "(", "self", ".", "components", ")", "\n", "state", "[", "\"build_module_src\"", "]", "=", "self", ".", "_build_module_src", "\n", "state", "[", "\"build_func_name\"", "]", "=", "self", ".", "_build_func_name", "\n", "state", "[", "\"variables\"", "]", "=", "list", "(", "zip", "(", "self", ".", "own_vars", ".", "keys", "(", ")", ",", "tfutil", ".", "run", "(", "list", "(", "self", ".", "own_vars", ".", "values", "(", ")", ")", ")", ")", ")", "\n", "return", "state", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.__setstate__": [[267, 300], ["tfutil.assert_tf_initialized", "network.Network._init_fields", "util.EasyDict", "util.EasyDict", "types.ModuleType", "exec", "util.get_obj_from_module", "callable", "network.Network._init_graph", "network.Network.reset_own_vars", "tfutil.set_vars", "handler", "handler.get", "uuid.uuid4", "network.Network.find_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_from_module", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.reset_own_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["\n", "", "def", "__setstate__", "(", "self", ",", "state", ":", "dict", ")", "->", "None", ":", "\n", "        ", "\"\"\"Pickle import.\"\"\"", "\n", "# pylint: disable=attribute-defined-outside-init", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "self", ".", "_init_fields", "(", ")", "\n", "\n", "# Execute custom import handlers.", "\n", "for", "handler", "in", "_import_handlers", ":", "\n", "            ", "state", "=", "handler", "(", "state", ")", "\n", "\n", "# Set basic fields.", "\n", "", "assert", "state", "[", "\"version\"", "]", "in", "[", "2", ",", "3", "]", "\n", "self", ".", "name", "=", "state", "[", "\"name\"", "]", "\n", "self", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "state", "[", "\"static_kwargs\"", "]", ")", "\n", "self", ".", "components", "=", "util", ".", "EasyDict", "(", "state", ".", "get", "(", "\"components\"", ",", "{", "}", ")", ")", "\n", "self", ".", "_build_module_src", "=", "state", "[", "\"build_module_src\"", "]", "\n", "self", ".", "_build_func_name", "=", "state", "[", "\"build_func_name\"", "]", "\n", "\n", "# Create temporary module from the imported source code.", "\n", "module_name", "=", "\"_tflib_network_import_\"", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "\n", "module", "=", "types", ".", "ModuleType", "(", "module_name", ")", "\n", "sys", ".", "modules", "[", "module_name", "]", "=", "module", "\n", "_import_module_src", "[", "module", "]", "=", "self", ".", "_build_module_src", "\n", "exec", "(", "self", ".", "_build_module_src", ",", "module", ".", "__dict__", ")", "# pylint: disable=exec-used", "\n", "\n", "# Locate network build function in the temporary module.", "\n", "self", ".", "_build_func", "=", "util", ".", "get_obj_from_module", "(", "module", ",", "self", ".", "_build_func_name", ")", "\n", "assert", "callable", "(", "self", ".", "_build_func", ")", "\n", "\n", "# Init TensorFlow graph.", "\n", "self", ".", "_init_graph", "(", ")", "\n", "self", ".", "reset_own_vars", "(", ")", "\n", "tfutil", ".", "set_vars", "(", "{", "self", ".", "find_var", "(", "name", ")", ":", "value", "for", "name", ",", "value", "in", "state", "[", "\"variables\"", "]", "}", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone": [[301, 315], ["object.__new__", "object.__new__._init_fields", "util.EasyDict", "object.__new__.static_kwargs.update", "object.__new__._init_graph", "object.__new__.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_fields", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network._init_graph", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from"], ["\n", "", "def", "clone", "(", "self", ",", "name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create a clone of this network with its own copy of the variables.\"\"\"", "\n", "# pylint: disable=protected-access", "\n", "net", "=", "object", ".", "__new__", "(", "Network", ")", "\n", "net", ".", "_init_fields", "(", ")", "\n", "net", ".", "name", "=", "name", "if", "name", "is", "not", "None", "else", "self", ".", "name", "\n", "net", ".", "static_kwargs", "=", "util", ".", "EasyDict", "(", "self", ".", "static_kwargs", ")", "\n", "net", ".", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", ".", "_build_module_src", "=", "self", ".", "_build_module_src", "\n", "net", ".", "_build_func_name", "=", "self", ".", "_build_func_name", "\n", "net", ".", "_build_func", "=", "self", ".", "_build_func", "\n", "net", ".", "_init_graph", "(", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_own_vars_from": [[316, 320], ["tfutil.set_vars", "tfutil.run", "network.Network.own_vars.keys"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "copy_own_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, excluding sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "own_vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "own_vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from": [[321, 325], ["tfutil.set_vars", "tfutil.run", "network.Network.vars.keys"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "copy_vars_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "vars", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "vars", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_trainables_from": [[326, 330], ["tfutil.set_vars", "tfutil.run", "network.Network.trainables.keys"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["\n", "", "def", "copy_trainables_from", "(", "self", ",", "src_net", ":", "\"Network\"", ")", "->", "None", ":", "\n", "        ", "\"\"\"Copy the values of all trainable variables from the given network, including sub-networks.\"\"\"", "\n", "names", "=", "[", "name", "for", "name", "in", "self", ".", "trainables", ".", "keys", "(", ")", "if", "name", "in", "src_net", ".", "trainables", "]", "\n", "tfutil", ".", "set_vars", "(", "tfutil", ".", "run", "(", "{", "self", ".", "vars", "[", "name", "]", ":", "src_net", ".", "vars", "[", "name", "]", "for", "name", "in", "names", "}", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.convert": [[331, 340], ["dict", "dict.update", "network.Network", "network.Network.copy_vars_from"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from"], ["\n", "", "def", "convert", "(", "self", ",", "new_func_name", ":", "str", ",", "new_name", ":", "str", "=", "None", ",", "**", "new_static_kwargs", ")", "->", "\"Network\"", ":", "\n", "        ", "\"\"\"Create new network with the given parameters, and copy all variables from this network.\"\"\"", "\n", "if", "new_name", "is", "None", ":", "\n", "            ", "new_name", "=", "self", ".", "name", "\n", "", "static_kwargs", "=", "dict", "(", "self", ".", "static_kwargs", ")", "\n", "static_kwargs", ".", "update", "(", "new_static_kwargs", ")", "\n", "net", "=", "Network", "(", "name", "=", "new_name", ",", "func_name", "=", "new_func_name", ",", "**", "static_kwargs", ")", "\n", "net", ".", "copy_vars_from", "(", "self", ")", "\n", "return", "net", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_as_moving_average_of": [[341, 352], ["tfutil.absolute_name_scope", "network.Network.vars.items", "tensorflow.group", "tfutil.lerp", "ops.append", "var.assign"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp"], ["\n", "", "def", "setup_as_moving_average_of", "(", "self", ",", "src_net", ":", "\"Network\"", ",", "beta", ":", "TfExpressionEx", "=", "0.99", ",", "beta_nontrainable", ":", "TfExpressionEx", "=", "0.0", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct a TensorFlow op that updates the variables of this network\n        to be slightly closer to those of the given network.\"\"\"", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_MovingAvg\"", ")", ":", "\n", "            ", "ops", "=", "[", "]", "\n", "for", "name", ",", "var", "in", "self", ".", "vars", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "src_net", ".", "vars", ":", "\n", "                    ", "cur_beta", "=", "beta", "if", "name", "in", "self", ".", "trainables", "else", "beta_nontrainable", "\n", "new_value", "=", "tfutil", ".", "lerp", "(", "src_net", ".", "vars", "[", "name", "]", ",", "var", ",", "cur_beta", ")", "\n", "ops", ".", "append", "(", "var", ".", "assign", "(", "new_value", ")", ")", "\n", "", "", "return", "tf", ".", "group", "(", "*", "ops", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.run": [[353, 454], ["network._handle_legacy_output_transforms", "dict", "repr", "range", "len", "all", "util.is_top_level_function", "util.is_top_level_function", "isinstance", "callable", "network.Network.run.unwind_key"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network._handle_legacy_output_transforms", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_top_level_function"], ["\n", "", "", "def", "run", "(", "self", ",", "\n", "*", "in_arrays", ":", "Tuple", "[", "Union", "[", "np", ".", "ndarray", ",", "None", "]", ",", "...", "]", ",", "\n", "input_transform", ":", "dict", "=", "None", ",", "\n", "output_transform", ":", "dict", "=", "None", ",", "\n", "return_as_list", ":", "bool", "=", "False", ",", "\n", "print_progress", ":", "bool", "=", "False", ",", "\n", "minibatch_size", ":", "int", "=", "None", ",", "\n", "num_gpus", ":", "int", "=", "1", ",", "\n", "assume_frozen", ":", "bool", "=", "False", ",", "\n", "**", "dynamic_kwargs", ")", "->", "Union", "[", "np", ".", "ndarray", ",", "Tuple", "[", "np", ".", "ndarray", ",", "...", "]", ",", "List", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "\"\"\"Run this network for the given NumPy array(s), and return the output(s) as NumPy array(s).\n\n        Args:\n            input_transform:    A dict specifying a custom transformation to be applied to the input tensor(s) before evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the input\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            output_transform:   A dict specifying a custom transformation to be applied to the output tensor(s) after evaluating the network.\n                                The dict must contain a 'func' field that points to a top-level function. The function is called with the output\n                                TensorFlow expression(s) as positional arguments. Any remaining fields of the dict will be passed in as kwargs.\n            return_as_list:     True = return a list of NumPy arrays, False = return a single NumPy array, or a tuple if there are multiple outputs.\n            print_progress:     Print progress to the console? Useful for very large input arrays.\n            minibatch_size:     Maximum minibatch size to use, None = disable batching.\n            num_gpus:           Number of GPUs to use.\n            assume_frozen:      Improve multi-GPU performance by assuming that the trainable parameters will remain changed between calls.\n            dynamic_kwargs:     Additional keyword arguments to be passed into the network build function.\n        \"\"\"", "\n", "assert", "len", "(", "in_arrays", ")", "==", "self", ".", "num_inputs", "\n", "assert", "not", "all", "(", "arr", "is", "None", "for", "arr", "in", "in_arrays", ")", "\n", "assert", "input_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "input_transform", "[", "\"func\"", "]", ")", "\n", "assert", "output_transform", "is", "None", "or", "util", ".", "is_top_level_function", "(", "output_transform", "[", "\"func\"", "]", ")", "\n", "output_transform", ",", "dynamic_kwargs", "=", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", "\n", "num_items", "=", "in_arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "if", "minibatch_size", "is", "None", ":", "\n", "            ", "minibatch_size", "=", "num_items", "\n", "\n", "# Construct unique hash key from all arguments that affect the TensorFlow graph.", "\n", "", "key", "=", "dict", "(", "input_transform", "=", "input_transform", ",", "output_transform", "=", "output_transform", ",", "num_gpus", "=", "num_gpus", ",", "assume_frozen", "=", "assume_frozen", ",", "dynamic_kwargs", "=", "dynamic_kwargs", ")", "\n", "def", "unwind_key", "(", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "return", "[", "(", "key", ",", "unwind_key", "(", "value", ")", ")", "for", "key", ",", "value", "in", "sorted", "(", "obj", ".", "items", "(", ")", ")", "]", "\n", "", "if", "callable", "(", "obj", ")", ":", "\n", "                ", "return", "util", ".", "get_top_level_function_name", "(", "obj", ")", "\n", "", "return", "obj", "\n", "", "key", "=", "repr", "(", "unwind_key", "(", "key", ")", ")", "\n", "\n", "# Build graph.", "\n", "if", "key", "not", "in", "self", ".", "_run_cache", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/_Run\"", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "in_expr", "=", "[", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "name", ")", "for", "name", "in", "self", ".", "input_names", "]", "\n", "in_split", "=", "list", "(", "zip", "(", "*", "[", "tf", ".", "split", "(", "x", ",", "num_gpus", ")", "for", "x", "in", "in_expr", "]", ")", ")", "\n", "\n", "", "out_split", "=", "[", "]", "\n", "for", "gpu", "in", "range", "(", "num_gpus", ")", ":", "\n", "                    ", "with", "tf", ".", "device", "(", "\"/gpu:%d\"", "%", "gpu", ")", ":", "\n", "                        ", "net_gpu", "=", "self", ".", "clone", "(", ")", "if", "assume_frozen", "else", "self", "\n", "in_gpu", "=", "in_split", "[", "gpu", "]", "\n", "\n", "if", "input_transform", "is", "not", "None", ":", "\n", "                            ", "in_kwargs", "=", "dict", "(", "input_transform", ")", "\n", "in_gpu", "=", "in_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "in_gpu", ",", "**", "in_kwargs", ")", "\n", "in_gpu", "=", "[", "in_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "in_gpu", ")", "else", "list", "(", "in_gpu", ")", "\n", "\n", "", "assert", "len", "(", "in_gpu", ")", "==", "self", ".", "num_inputs", "\n", "out_gpu", "=", "net_gpu", ".", "get_output_for", "(", "*", "in_gpu", ",", "return_as_list", "=", "True", ",", "**", "dynamic_kwargs", ")", "\n", "\n", "if", "output_transform", "is", "not", "None", ":", "\n", "                            ", "out_kwargs", "=", "dict", "(", "output_transform", ")", "\n", "out_gpu", "=", "out_kwargs", ".", "pop", "(", "\"func\"", ")", "(", "*", "out_gpu", ",", "**", "out_kwargs", ")", "\n", "out_gpu", "=", "[", "out_gpu", "]", "if", "tfutil", ".", "is_tf_expression", "(", "out_gpu", ")", "else", "list", "(", "out_gpu", ")", "\n", "\n", "", "assert", "len", "(", "out_gpu", ")", "==", "self", ".", "num_outputs", "\n", "out_split", ".", "append", "(", "out_gpu", ")", "\n", "\n", "", "", "with", "tf", ".", "device", "(", "\"/cpu:0\"", ")", ":", "\n", "                    ", "out_expr", "=", "[", "tf", ".", "concat", "(", "outputs", ",", "axis", "=", "0", ")", "for", "outputs", "in", "zip", "(", "*", "out_split", ")", "]", "\n", "self", ".", "_run_cache", "[", "key", "]", "=", "in_expr", ",", "out_expr", "\n", "\n", "# Run minibatches.", "\n", "", "", "", "in_expr", ",", "out_expr", "=", "self", ".", "_run_cache", "[", "key", "]", "\n", "out_arrays", "=", "[", "np", ".", "empty", "(", "[", "num_items", "]", "+", "tfutil", ".", "shape_to_list", "(", "expr", ".", "shape", ")", "[", "1", ":", "]", ",", "expr", ".", "dtype", ".", "name", ")", "for", "expr", "in", "out_expr", "]", "\n", "\n", "for", "mb_begin", "in", "range", "(", "0", ",", "num_items", ",", "minibatch_size", ")", ":", "\n", "            ", "if", "print_progress", ":", "\n", "                ", "print", "(", "\"\\r%d / %d\"", "%", "(", "mb_begin", ",", "num_items", ")", ",", "end", "=", "\"\"", ")", "\n", "\n", "", "mb_end", "=", "min", "(", "mb_begin", "+", "minibatch_size", ",", "num_items", ")", "\n", "mb_num", "=", "mb_end", "-", "mb_begin", "\n", "mb_in", "=", "[", "src", "[", "mb_begin", ":", "mb_end", "]", "if", "src", "is", "not", "None", "else", "np", ".", "zeros", "(", "[", "mb_num", "]", "+", "shape", "[", "1", ":", "]", ")", "for", "src", ",", "shape", "in", "zip", "(", "in_arrays", ",", "self", ".", "input_shapes", ")", "]", "\n", "mb_out", "=", "tf", ".", "get_default_session", "(", ")", ".", "run", "(", "out_expr", ",", "dict", "(", "zip", "(", "in_expr", ",", "mb_in", ")", ")", ")", "\n", "\n", "for", "dst", ",", "src", "in", "zip", "(", "out_arrays", ",", "mb_out", ")", ":", "\n", "                ", "dst", "[", "mb_begin", ":", "mb_end", "]", "=", "src", "\n", "\n", "# Done.", "\n", "", "", "if", "print_progress", ":", "\n", "            ", "print", "(", "\"\\r%d / %d\"", "%", "(", "num_items", ",", "num_items", ")", ")", "\n", "\n", "", "if", "not", "return_as_list", ":", "\n", "            ", "out_arrays", "=", "out_arrays", "[", "0", "]", "if", "len", "(", "out_arrays", ")", "==", "1", "else", "tuple", "(", "out_arrays", ")", "\n", "", "return", "out_arrays", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.list_ops": [[455, 462], ["tensorflow.get_default_graph().get_operations", "tensorflow.get_default_graph", "op.name.startswith", "op.name.startswith"], "methods", ["None"], ["\n", "", "def", "list_ops", "(", "self", ")", "->", "List", "[", "TfExpression", "]", ":", "\n", "        ", "include_prefix", "=", "self", ".", "scope", "+", "\"/\"", "\n", "exclude_prefix", "=", "include_prefix", "+", "\"_\"", "\n", "ops", "=", "tf", ".", "get_default_graph", "(", ")", ".", "get_operations", "(", ")", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "op", ".", "name", ".", "startswith", "(", "include_prefix", ")", "]", "\n", "ops", "=", "[", "op", "for", "op", "in", "ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "exclude_prefix", ")", "]", "\n", "return", "ops", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.list_layers": [[463, 505], ["network.Network.list_layers.recurse"], "methods", ["None"], ["\n", "", "def", "list_layers", "(", "self", ")", "->", "List", "[", "Tuple", "[", "str", ",", "TfExpression", ",", "List", "[", "TfExpression", "]", "]", "]", ":", "\n", "        ", "\"\"\"Returns a list of (layer_name, output_expr, trainable_vars) tuples corresponding to\n        individual layers of the network. Mainly intended to be used for reporting.\"\"\"", "\n", "layers", "=", "[", "]", "\n", "\n", "def", "recurse", "(", "scope", ",", "parent_ops", ",", "parent_vars", ",", "level", ")", ":", "\n", "# Ignore specific patterns.", "\n", "            ", "if", "any", "(", "p", "in", "scope", "for", "p", "in", "[", "\"/Shape\"", ",", "\"/strided_slice\"", ",", "\"/Cast\"", ",", "\"/concat\"", ",", "\"/Assign\"", "]", ")", ":", "\n", "                ", "return", "\n", "\n", "# Filter ops and vars by scope.", "\n", "", "global_prefix", "=", "scope", "+", "\"/\"", "\n", "local_prefix", "=", "global_prefix", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "parent_ops", "if", "op", ".", "name", ".", "startswith", "(", "global_prefix", ")", "or", "op", ".", "name", "==", "global_prefix", "[", ":", "-", "1", "]", "]", "\n", "cur_vars", "=", "[", "(", "name", ",", "var", ")", "for", "name", ",", "var", "in", "parent_vars", "if", "name", ".", "startswith", "(", "local_prefix", ")", "or", "name", "==", "local_prefix", "[", ":", "-", "1", "]", "]", "\n", "if", "not", "cur_ops", "and", "not", "cur_vars", ":", "\n", "                ", "return", "\n", "\n", "# Filter out all ops related to variables.", "\n", "", "for", "var", "in", "[", "op", "for", "op", "in", "cur_ops", "if", "op", ".", "type", ".", "startswith", "(", "\"Variable\"", ")", "]", ":", "\n", "                ", "var_prefix", "=", "var", ".", "name", "+", "\"/\"", "\n", "cur_ops", "=", "[", "op", "for", "op", "in", "cur_ops", "if", "not", "op", ".", "name", ".", "startswith", "(", "var_prefix", ")", "]", "\n", "\n", "# Scope does not contain ops as immediate children => recurse deeper.", "\n", "", "contains_direct_ops", "=", "any", "(", "\"/\"", "not", "in", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "and", "op", ".", "type", "!=", "\"Identity\"", "for", "op", "in", "cur_ops", ")", "\n", "if", "(", "level", "==", "0", "or", "not", "contains_direct_ops", ")", "and", "(", "len", "(", "cur_ops", ")", "+", "len", "(", "cur_vars", ")", ")", ">", "1", ":", "\n", "                ", "visited", "=", "set", "(", ")", "\n", "for", "rel_name", "in", "[", "op", ".", "name", "[", "len", "(", "global_prefix", ")", ":", "]", "for", "op", "in", "cur_ops", "]", "+", "[", "name", "[", "len", "(", "local_prefix", ")", ":", "]", "for", "name", ",", "_var", "in", "cur_vars", "]", ":", "\n", "                    ", "token", "=", "rel_name", ".", "split", "(", "\"/\"", ")", "[", "0", "]", "\n", "if", "token", "not", "in", "visited", ":", "\n", "                        ", "recurse", "(", "global_prefix", "+", "token", ",", "cur_ops", ",", "cur_vars", ",", "level", "+", "1", ")", "\n", "visited", ".", "add", "(", "token", ")", "\n", "", "", "return", "\n", "\n", "# Report layer.", "\n", "", "layer_name", "=", "scope", "[", "len", "(", "self", ".", "scope", ")", "+", "1", ":", "]", "\n", "layer_output", "=", "cur_ops", "[", "-", "1", "]", ".", "outputs", "[", "0", "]", "if", "cur_ops", "else", "cur_vars", "[", "-", "1", "]", "[", "1", "]", "\n", "layer_trainables", "=", "[", "var", "for", "_name", ",", "var", "in", "cur_vars", "if", "var", ".", "trainable", "]", "\n", "layers", ".", "append", "(", "(", "layer_name", ",", "layer_output", ",", "layer_trainables", ")", ")", "\n", "\n", "", "recurse", "(", "self", ".", "scope", ",", "self", ".", "list_ops", "(", ")", ",", "list", "(", "self", ".", "vars", ".", "items", "(", ")", ")", ",", "0", ")", "\n", "return", "layers", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers": [[506, 534], ["network.Network.list_layers", "print", "print", "sum", "weights.sort", "max", "print", "str", "str", "zip", "int", "var.name.endswith", "len", "len", "str", "str", "len", "numpy.prod", "len", "len", "var.shape.as_list", "zip", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.list_layers"], ["\n", "", "def", "print_layers", "(", "self", ",", "title", ":", "str", "=", "None", ",", "hide_layers_with_no_params", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "\"\"\"Print a summary table of the network structure.\"\"\"", "\n", "rows", "=", "[", "[", "title", "if", "title", "is", "not", "None", "else", "self", ".", "name", ",", "\"Params\"", ",", "\"OutputShape\"", ",", "\"WeightShape\"", "]", "]", "\n", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "total_params", "=", "0", "\n", "\n", "for", "layer_name", ",", "layer_output", ",", "layer_trainables", "in", "self", ".", "list_layers", "(", ")", ":", "\n", "            ", "num_params", "=", "sum", "(", "np", ".", "prod", "(", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", ")", "for", "var", "in", "layer_trainables", ")", "\n", "weights", "=", "[", "var", "for", "var", "in", "layer_trainables", "if", "var", ".", "name", ".", "endswith", "(", "\"/weight:0\"", ")", "]", "\n", "weights", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", ".", "name", ")", ")", "\n", "if", "len", "(", "weights", ")", "==", "0", "and", "len", "(", "layer_trainables", ")", "==", "1", ":", "\n", "                ", "weights", "=", "layer_trainables", "\n", "", "total_params", "+=", "num_params", "\n", "\n", "if", "not", "hide_layers_with_no_params", "or", "num_params", "!=", "0", ":", "\n", "                ", "num_params_str", "=", "str", "(", "num_params", ")", "if", "num_params", ">", "0", "else", "\"-\"", "\n", "output_shape_str", "=", "str", "(", "layer_output", ".", "shape", ")", "\n", "weight_shape_str", "=", "str", "(", "weights", "[", "0", "]", ".", "shape", ")", "if", "len", "(", "weights", ")", ">=", "1", "else", "\"-\"", "\n", "rows", "+=", "[", "[", "layer_name", ",", "num_params_str", ",", "output_shape_str", ",", "weight_shape_str", "]", "]", "\n", "\n", "", "", "rows", "+=", "[", "[", "\"---\"", "]", "*", "4", "]", "\n", "rows", "+=", "[", "[", "\"Total\"", ",", "str", "(", "total_params", ")", ",", "\"\"", ",", "\"\"", "]", "]", "\n", "\n", "widths", "=", "[", "max", "(", "len", "(", "cell", ")", "for", "cell", "in", "column", ")", "for", "column", "in", "zip", "(", "*", "rows", ")", "]", "\n", "print", "(", ")", "\n", "for", "row", "in", "rows", ":", "\n", "            ", "print", "(", "\"  \"", ".", "join", "(", "cell", "+", "\" \"", "*", "(", "width", "-", "len", "(", "cell", ")", ")", "for", "cell", ",", "width", "in", "zip", "(", "row", ",", "widths", ")", ")", ")", "\n", "", "print", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_weight_histograms": [[535, 549], ["tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "network.Network.trainables.items", "tensorflow.summary.histogram", "local_name.split"], "methods", ["None"], ["\n", "", "def", "setup_weight_histograms", "(", "self", ",", "title", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "\"\"\"Construct summary ops to include histograms of all trainable parameters in TensorBoard.\"\"\"", "\n", "if", "title", "is", "None", ":", "\n", "            ", "title", "=", "self", ".", "name", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "for", "local_name", ",", "var", "in", "self", ".", "trainables", ".", "items", "(", ")", ":", "\n", "                ", "if", "\"/\"", "in", "local_name", ":", "\n", "                    ", "p", "=", "local_name", ".", "split", "(", "\"/\"", ")", "\n", "name", "=", "title", "+", "\"_\"", "+", "p", "[", "-", "1", "]", "+", "\"/\"", "+", "\"_\"", ".", "join", "(", "p", "[", ":", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "name", "=", "title", "+", "\"_toplevel/\"", "+", "local_name", "\n", "\n", "", "tf", ".", "summary", ".", "histogram", "(", "name", ",", "var", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.import_handler": [[29, 33], ["_import_handlers.append"], "function", ["None"], ["\n", "def", "import_handler", "(", "handler_func", ")", ":", "\n", "    ", "\"\"\"Function decorator for declaring custom import handlers.\"\"\"", "\n", "_import_handlers", ".", "append", "(", "handler_func", ")", "\n", "return", "handler_func", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network._handle_legacy_output_transforms": [[555, 574], ["dict", "any", "print", "print", "print", "print", "print", "dict.pop"], "function", ["None"], ["\n", "def", "_handle_legacy_output_transforms", "(", "output_transform", ",", "dynamic_kwargs", ")", ":", "\n", "    ", "global", "_print_legacy_warning", "\n", "legacy_kwargs", "=", "[", "\"out_mul\"", ",", "\"out_add\"", ",", "\"out_shrink\"", ",", "\"out_dtype\"", "]", "\n", "if", "not", "any", "(", "kwarg", "in", "dynamic_kwargs", "for", "kwarg", "in", "legacy_kwargs", ")", ":", "\n", "        ", "return", "output_transform", ",", "dynamic_kwargs", "\n", "\n", "", "if", "_print_legacy_warning", ":", "\n", "        ", "_print_legacy_warning", "=", "False", "\n", "print", "(", ")", "\n", "print", "(", "\"WARNING: Old-style output transformations in Network.run() are deprecated.\"", ")", "\n", "print", "(", "\"Consider using 'output_transform=dict(func=tflib.convert_images_to_uint8)'\"", ")", "\n", "print", "(", "\"instead of 'out_mul=127.5, out_add=127.5, out_dtype=np.uint8'.\"", ")", "\n", "print", "(", ")", "\n", "", "assert", "output_transform", "is", "None", "\n", "\n", "new_kwargs", "=", "dict", "(", "dynamic_kwargs", ")", "\n", "new_transform", "=", "{", "kwarg", ":", "new_kwargs", ".", "pop", "(", "kwarg", ")", "for", "kwarg", "in", "legacy_kwargs", "if", "kwarg", "in", "dynamic_kwargs", "}", "\n", "new_transform", "[", "\"func\"", "]", "=", "_legacy_output_transform_func", "\n", "return", "new_transform", ",", "new_kwargs", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network._legacy_output_transform_func": [[575, 591], ["tensorflow.nn.avg_pool", "tensorflow.as_dtype", "tensorflow.saturate_cast", "tensorflow.round"], "function", ["None"], ["\n", "", "def", "_legacy_output_transform_func", "(", "*", "expr", ",", "out_mul", "=", "1.0", ",", "out_add", "=", "0.0", ",", "out_shrink", "=", "1", ",", "out_dtype", "=", "None", ")", ":", "\n", "    ", "if", "out_mul", "!=", "1.0", ":", "\n", "        ", "expr", "=", "[", "x", "*", "out_mul", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_add", "!=", "0.0", ":", "\n", "        ", "expr", "=", "[", "x", "+", "out_add", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_shrink", ">", "1", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "out_shrink", ",", "out_shrink", "]", "\n", "expr", "=", "[", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "\"VALID\"", ",", "data_format", "=", "\"NCHW\"", ")", "for", "x", "in", "expr", "]", "\n", "\n", "", "if", "out_dtype", "is", "not", "None", ":", "\n", "        ", "if", "tf", ".", "as_dtype", "(", "out_dtype", ")", ".", "is_integer", ":", "\n", "            ", "expr", "=", "[", "tf", ".", "round", "(", "x", ")", "for", "x", "in", "expr", "]", "\n", "", "expr", "=", "[", "tf", ".", "saturate_cast", "(", "x", ",", "out_dtype", ")", "for", "x", "in", "expr", "]", "\n", "", "return", "expr", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary._create_var": [[45, 75], ["name.replace", "tensorflow.cast", "tf.reshape.shape.is_fully_defined", "tensorflow.cond", "tensorflow.cond", "numpy.prod", "tensorflow.constant", "tensorflow.reduce_prod", "tensorflow.is_finite", "tfutil.absolute_name_scope", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.is_variable_initialized", "_vars[].append", "tf.reshape.shape.as_list", "tensorflow.cast", "tensorflow.reshape", "tensorflow.square", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.stack", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.assign_add", "tensorflow.assign", "tensorflow.shape", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "v", "=", "tf", ".", "cast", "(", "value_expr", ",", "_dtype", ")", "\n", "\n", "if", "v", ".", "shape", ".", "is_fully_defined", "(", ")", ":", "\n", "        ", "size", "=", "np", ".", "prod", "(", "tfutil", ".", "shape_to_list", "(", "v", ".", "shape", ")", ")", "\n", "size_expr", "=", "tf", ".", "constant", "(", "size", ",", "dtype", "=", "_dtype", ")", "\n", "", "else", ":", "\n", "        ", "size", "=", "None", "\n", "size_expr", "=", "tf", ".", "reduce_prod", "(", "tf", ".", "cast", "(", "tf", ".", "shape", "(", "v", ")", ",", "_dtype", ")", ")", "\n", "\n", "", "if", "size", "==", "1", ":", "\n", "        ", "if", "v", ".", "shape", ".", "ndims", "!=", "0", ":", "\n", "            ", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "]", ")", "\n", "", "v", "=", "[", "size_expr", ",", "v", ",", "tf", ".", "square", "(", "v", ")", "]", "\n", "", "else", ":", "\n", "        ", "v", "=", "[", "size_expr", ",", "tf", ".", "reduce_sum", "(", "v", ")", ",", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "v", ")", ")", "]", "\n", "", "v", "=", "tf", ".", "cond", "(", "tf", ".", "is_finite", "(", "v", "[", "1", "]", ")", ",", "lambda", ":", "tf", ".", "stack", "(", "v", ")", ",", "lambda", ":", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "\n", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ",", "trainable", "=", "False", ")", "# [sum(1), sum(x), sum(x**2)]", "\n", "", "update_op", "=", "tf", ".", "cond", "(", "tf", ".", "is_variable_initialized", "(", "var", ")", ",", "lambda", ":", "tf", ".", "assign_add", "(", "var", ",", "v", ")", ",", "lambda", ":", "tf", ".", "assign", "(", "var", ",", "v", ")", ")", "\n", "\n", "if", "name", "in", "_vars", ":", "\n", "        ", "_vars", "[", "name", "]", ".", "append", "(", "var", ")", "\n", "", "else", ":", "\n", "        ", "_vars", "[", "name", "]", "=", "[", "var", "]", "\n", "", "return", "update_op", "\n", "\n", "\n", "", "def", "autosummary", "(", "name", ":", "str", ",", "value", ":", "TfExpressionEx", ",", "passthru", ":", "TfExpressionEx", "=", "None", ")", "->", "TfExpressionEx", ":", "\n", "    "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary": [[77, 116], ["tfutil.assert_tf_initialized", "name.replace", "tfutil.is_tf_expression", "tensorflow.name_scope", "tensorflow.device", "tensorflow.convert_to_tensor", "tensorflow.cond", "tfutil.is_tf_expression", "tfutil.is_tf_expression", "tfutil.run", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.group", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.placeholder", "autosummary._create_var", "autosummary._create_var"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary._create_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary._create_var"], ["\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "\n", "if", "tfutil", ".", "is_tf_expression", "(", "value", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"summary_\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "value", ".", "device", ")", ":", "\n", "            ", "update_op", "=", "_create_var", "(", "name", ",", "value", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "return", "tf", ".", "identity", "(", "value", "if", "passthru", "is", "None", "else", "passthru", ")", "\n", "\n", "", "", "", "else", ":", "# python scalar or numpy array", "\n", "        ", "if", "name", "not", "in", "_immediate", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ",", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "update_value", "=", "tf", ".", "placeholder", "(", "_dtype", ")", "\n", "update_op", "=", "_create_var", "(", "name", ",", "update_value", ")", "\n", "_immediate", "[", "name", "]", "=", "update_op", ",", "update_value", "\n", "\n", "", "", "update_op", ",", "update_value", "=", "_immediate", "[", "name", "]", "\n", "tfutil", ".", "run", "(", "update_op", ",", "{", "update_value", ":", "value", "}", ")", "\n", "return", "value", "if", "passthru", "is", "None", "else", "passthru", "\n", "\n", "\n", "", "", "def", "finalize_autosummaries", "(", ")", "->", "None", ":", "\n", "    ", "\"\"\"Create the necessary ops to include autosummaries in TensorBoard report.\n    Note: This should be done only once per graph.\n    \"\"\"", "\n", "global", "_finalized", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.finalize_autosummaries": [[118, 176], ["tfutil.assert_tf_initialized", "tfutil.init_uninitialized_vars", "tensorflow.device", "tensorflow.control_dependencies", "_vars.items", "collections.OrderedDict", "sorted", "collections.OrderedDict.items", "tensorboard.summary.custom_scalar_pb", "name.replace", "_vars.keys", "series_name.split", "[].append", "chart_dict.items", "categories.append", "tensorboard.plugins.custom_scalar.layout_pb2.Layout", "_vars.values", "tfutil.absolute_name_scope", "tensorflow.add_n", "collections.OrderedDict", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent", "charts.append", "tensorboard.plugins.custom_scalar.layout_pb2.Category", "tensorflow.control_dependencies", "len", "len", "series.append", "tensorboard.plugins.custom_scalar.layout_pb2.Chart", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.control_dependencies", "tensorflow.sqrt", "tensorflow.summary.scalar", "tensorboard.plugins.custom_scalar.layout_pb2.MarginChartContent.Series", "tensorflow.zeros", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["\n", "if", "_finalized", ":", "\n", "        ", "return", "None", "\n", "\n", "", "_finalized", "=", "True", "\n", "tfutil", ".", "init_uninitialized_vars", "(", "[", "var", "for", "vars_list", "in", "_vars", ".", "values", "(", ")", "for", "var", "in", "vars_list", "]", ")", "\n", "\n", "# Create summary ops.", "\n", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "        ", "for", "name", ",", "vars_list", "in", "_vars", ".", "items", "(", ")", ":", "\n", "            ", "name_id", "=", "name", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "\"Autosummary/\"", "+", "name_id", ")", ":", "\n", "                ", "moments", "=", "tf", ".", "add_n", "(", "vars_list", ")", "\n", "moments", "/=", "moments", "[", "0", "]", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "moments", "]", ")", ":", "# read before resetting", "\n", "                    ", "reset_ops", "=", "[", "tf", ".", "assign", "(", "var", ",", "tf", ".", "zeros", "(", "3", ",", "dtype", "=", "_dtype", ")", ")", "for", "var", "in", "vars_list", "]", "\n", "with", "tf", ".", "name_scope", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "reset_ops", ")", ":", "# reset before reporting", "\n", "                        ", "mean", "=", "moments", "[", "1", "]", "\n", "std", "=", "tf", ".", "sqrt", "(", "moments", "[", "2", "]", "-", "tf", ".", "square", "(", "moments", "[", "1", "]", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "name", ",", "mean", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_lo\"", ",", "mean", "-", "std", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"xCustomScalars/\"", "+", "name", "+", "\"/margin_hi\"", ",", "mean", "+", "std", ")", "\n", "\n", "# Group by category and chart name.", "\n", "", "", "", "", "", "cat_dict", "=", "OrderedDict", "(", ")", "\n", "for", "series_name", "in", "sorted", "(", "_vars", ".", "keys", "(", ")", ")", ":", "\n", "        ", "p", "=", "series_name", ".", "split", "(", "\"/\"", ")", "\n", "cat", "=", "p", "[", "0", "]", "if", "len", "(", "p", ")", ">=", "2", "else", "\"\"", "\n", "chart", "=", "\"/\"", ".", "join", "(", "p", "[", "1", ":", "-", "1", "]", ")", "if", "len", "(", "p", ")", ">=", "3", "else", "p", "[", "-", "1", "]", "\n", "if", "cat", "not", "in", "cat_dict", ":", "\n", "            ", "cat_dict", "[", "cat", "]", "=", "OrderedDict", "(", ")", "\n", "", "if", "chart", "not", "in", "cat_dict", "[", "cat", "]", ":", "\n", "            ", "cat_dict", "[", "cat", "]", "[", "chart", "]", "=", "[", "]", "\n", "", "cat_dict", "[", "cat", "]", "[", "chart", "]", ".", "append", "(", "series_name", ")", "\n", "\n", "# Setup custom_scalar layout.", "\n", "", "categories", "=", "[", "]", "\n", "for", "cat_name", ",", "chart_dict", "in", "cat_dict", ".", "items", "(", ")", ":", "\n", "        ", "charts", "=", "[", "]", "\n", "for", "chart_name", ",", "series_names", "in", "chart_dict", ".", "items", "(", ")", ":", "\n", "            ", "series", "=", "[", "]", "\n", "for", "series_name", "in", "series_names", ":", "\n", "                ", "series", ".", "append", "(", "layout_pb2", ".", "MarginChartContent", ".", "Series", "(", "\n", "value", "=", "series_name", ",", "\n", "lower", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_lo\"", ",", "\n", "upper", "=", "\"xCustomScalars/\"", "+", "series_name", "+", "\"/margin_hi\"", ")", ")", "\n", "", "margin", "=", "layout_pb2", ".", "MarginChartContent", "(", "series", "=", "series", ")", "\n", "charts", ".", "append", "(", "layout_pb2", ".", "Chart", "(", "title", "=", "chart_name", ",", "margin", "=", "margin", ")", ")", "\n", "", "categories", ".", "append", "(", "layout_pb2", ".", "Category", "(", "title", "=", "cat_name", ",", "chart", "=", "charts", ")", ")", "\n", "", "layout", "=", "summary_lib", ".", "custom_scalar_pb", "(", "layout_pb2", ".", "Layout", "(", "category", "=", "categories", ")", ")", "\n", "return", "layout", "\n", "\n", "", "def", "save_summaries", "(", "file_writer", ",", "global_step", "=", "None", ")", ":", "\n", "    ", "\"\"\"Call FileWriter.add_summary() with all summaries in the default graph,\n    automatically finalizing and merging them on the first call.\n    \"\"\"", "\n", "global", "_merge_op", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.save_summaries": [[177, 192], ["tfutil.assert_tf_initialized", "file_writer.add_summary", "autosummary.finalize_autosummaries", "tf.summary.merge_all.eval", "file_writer.add_summary", "tensorflow.device", "tensorflow.control_dependencies", "tensorflow.summary.merge_all"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.finalize_autosummaries"], ["if", "_merge_op", "is", "None", ":", "\n", "        ", "layout", "=", "finalize_autosummaries", "(", ")", "\n", "if", "layout", "is", "not", "None", ":", "\n", "            ", "file_writer", ".", "add_summary", "(", "layout", ")", "\n", "", "with", "tf", ".", "device", "(", "None", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "            ", "_merge_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "", "", "file_writer", ".", "add_summary", "(", "_merge_op", ".", "eval", "(", ")", ",", "global_step", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.__init__": [[40, 83], ["optimizer.Optimizer.name.replace", "tensorflow.get_default_graph().unique_name", "util.get_obj_by_name", "dict", "collections.OrderedDict", "collections.OrderedDict", "callable", "isinstance", "tensorflow.get_default_graph"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name"], ["def", "__init__", "(", "self", ",", "\n", "name", ":", "str", "=", "\"Train\"", ",", "\n", "tf_optimizer", ":", "str", "=", "\"tf.train.AdamOptimizer\"", ",", "\n", "learning_rate", ":", "TfExpressionEx", "=", "0.001", ",", "\n", "use_loss_scaling", ":", "bool", "=", "False", ",", "\n", "loss_scaling_init", ":", "float", "=", "64.0", ",", "\n", "loss_scaling_inc", ":", "float", "=", "0.0005", ",", "\n", "loss_scaling_dec", ":", "float", "=", "1.0", ",", "\n", "**", "kwargs", ")", ":", "\n", "\n", "# Init fields.", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "learning_rate", "=", "tf", ".", "convert_to_tensor", "(", "learning_rate", ")", "\n", "self", ".", "id", "=", "self", ".", "name", ".", "replace", "(", "\"/\"", ",", "\".\"", ")", "\n", "self", ".", "scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "self", ".", "id", ")", "\n", "self", ".", "optimizer_class", "=", "util", ".", "get_obj_by_name", "(", "tf_optimizer", ")", "\n", "self", ".", "optimizer_kwargs", "=", "dict", "(", "kwargs", ")", "\n", "self", ".", "use_loss_scaling", "=", "use_loss_scaling", "\n", "self", ".", "loss_scaling_init", "=", "loss_scaling_init", "\n", "self", ".", "loss_scaling_inc", "=", "loss_scaling_inc", "\n", "self", ".", "loss_scaling_dec", "=", "loss_scaling_dec", "\n", "self", ".", "_grad_shapes", "=", "None", "# [shape, ...]", "\n", "self", ".", "_dev_opt", "=", "OrderedDict", "(", ")", "# device => optimizer", "\n", "self", ".", "_dev_grads", "=", "OrderedDict", "(", ")", "# device => [[(grad, var), ...], ...]", "\n", "self", ".", "_dev_ls_var", "=", "OrderedDict", "(", ")", "# device => variable (log2 of loss scaling factor)", "\n", "self", ".", "_updates_applied", "=", "False", "\n", "\n", "", "def", "register_gradients", "(", "self", ",", "loss", ":", "TfExpression", ",", "trainable_vars", ":", "Union", "[", "List", ",", "dict", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Register the gradients of the given loss function with respect to the given variables.\n        Intended to be called once per GPU.\"\"\"", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "\n", "# Validate arguments.", "\n", "if", "isinstance", "(", "trainable_vars", ",", "dict", ")", ":", "\n", "            ", "trainable_vars", "=", "list", "(", "trainable_vars", ".", "values", "(", ")", ")", "# allow passing in Network.trainables as vars", "\n", "\n", "", "assert", "isinstance", "(", "trainable_vars", ",", "list", ")", "and", "len", "(", "trainable_vars", ")", ">=", "1", "\n", "assert", "all", "(", "tfutil", ".", "is_tf_expression", "(", "expr", ")", "for", "expr", "in", "trainable_vars", "+", "[", "loss", "]", ")", "\n", "\n", "if", "self", ".", "_grad_shapes", "is", "None", ":", "\n", "            ", "self", ".", "_grad_shapes", "=", "[", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", "for", "var", "in", "trainable_vars", "]", "\n", "\n", "", "assert", "len", "(", "trainable_vars", ")", "==", "len", "(", "self", ".", "_grad_shapes", ")", "\n", "assert", "all", "(", "tfutil", ".", "shape_to_list", "(", "var", ".", "shape", ")", "==", "var_shape", "for", "var", ",", "var_shape", "in", "zip", "(", "trainable_vars", ",", "self", ".", "_grad_shapes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients": [[114, 155], ["tfutil.assert_tf_initialized", "optimizer.Optimizer._get_device", "isinstance", "all", "all", "all", "list", "isinstance", "len", "len", "tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "optimizer.Optimizer.apply_loss_scaling", "optimizer.Optimizer.optimizer.compute_gradients", "optimizer.Optimizer.grad_raw[].append", "list.values", "len", "tfutil.is_tf_expression", "var.shape.as_list", "tensorflow.cast", "var.shape.as_list", "zip", "tensorflow.name_scope", "tensorflow.device", "tensorflow.control_dependencies", "deps.append", "autosummary.autosummary", "tensorflow.contrib.memory_stats.BytesInUse"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer._get_device", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.compute_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["            ", "dev_grads", "=", "OrderedDict", "(", ")", "# device => [(grad, var), ...]", "\n", "\n", "for", "dev_idx", ",", "dev", "in", "enumerate", "(", "devices", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"ProcessGrads%d\"", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "                    ", "sums", "=", "[", "]", "\n", "\n", "for", "gv", "in", "zip", "(", "*", "self", ".", "_dev_grads", "[", "dev", "]", ")", ":", "\n", "                        ", "assert", "all", "(", "v", "is", "gv", "[", "0", "]", "[", "1", "]", "for", "g", ",", "v", "in", "gv", ")", "\n", "g", "=", "[", "tf", ".", "cast", "(", "g", ",", "tf", ".", "float32", ")", "for", "g", ",", "v", "in", "gv", "]", "\n", "g", "=", "g", "[", "0", "]", "if", "len", "(", "g", ")", "==", "1", "else", "tf", ".", "add_n", "(", "g", ")", "\n", "sums", ".", "append", "(", "(", "g", ",", "gv", "[", "0", "]", "[", "1", "]", ")", ")", "\n", "\n", "", "dev_grads", "[", "dev", "]", "=", "sums", "\n", "\n", "# Sum gradients across devices.", "\n", "", "", "if", "len", "(", "devices", ")", ">", "1", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"SumAcrossGPUs\"", ")", ",", "tf", ".", "device", "(", "None", ")", ":", "\n", "                    ", "for", "var_idx", ",", "grad_shape", "in", "enumerate", "(", "self", ".", "_grad_shapes", ")", ":", "\n", "                        ", "g", "=", "[", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "0", "]", "for", "dev", "in", "devices", "]", "\n", "\n", "if", "np", ".", "prod", "(", "grad_shape", ")", ":", "# nccl does not support zero-sized tensors", "\n", "                            ", "g", "=", "nccl_ops", ".", "all_sum", "(", "g", ")", "\n", "\n", "", "for", "dev", ",", "gg", "in", "zip", "(", "devices", ",", "g", ")", ":", "\n", "                            ", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "=", "(", "gg", ",", "dev_grads", "[", "dev", "]", "[", "var_idx", "]", "[", "1", "]", ")", "\n", "\n", "# Apply updates separately on each device.", "\n", "", "", "", "", "for", "dev_idx", ",", "(", "dev", ",", "grads", ")", "in", "enumerate", "(", "dev_grads", ".", "items", "(", ")", ")", ":", "\n", "                ", "with", "tf", ".", "name_scope", "(", "\"ApplyGrads%d\"", "%", "dev_idx", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "# Scale gradients as needed.", "\n", "                    ", "if", "self", ".", "use_loss_scaling", "or", "total_grads", ">", "1", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "\"Scale\"", ")", ":", "\n", "                            ", "coef", "=", "tf", ".", "constant", "(", "np", ".", "float32", "(", "1.0", "/", "total_grads", ")", ",", "name", "=", "\"coef\"", ")", "\n", "coef", "=", "self", ".", "undo_loss_scaling", "(", "coef", ")", "\n", "grads", "=", "[", "(", "g", "*", "coef", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "\n", "\n", "# Check for overflows.", "\n", "", "", "with", "tf", ".", "name_scope", "(", "\"CheckOverflow\"", ")", ":", "\n", "                        ", "grad_ok", "=", "tf", ".", "reduce_all", "(", "tf", ".", "stack", "(", "[", "tf", ".", "reduce_all", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "for", "g", ",", "v", "in", "grads", "]", ")", ")", "\n", "\n", "# Update weights and adjust loss scaling.", "\n", "", "with", "tf", ".", "name_scope", "(", "\"UpdateWeights\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates": [[156, 265], ["tfutil.assert_tf_initialized", "enumerate", "enumerate", "optimizer.Optimizer.reset_optimizer_state", "optimizer.Optimizer._devices.values", "len", "optimizer.Optimizer._devices.values", "tfutil.init_uninitialized_vars", "tfutil.run", "tfutil.absolute_name_scope", "tensorflow.group", "len", "tfutil.absolute_name_scope", "tensorflow.no_op", "tfutil.absolute_name_scope", "tensorflow.device", "device.grad_raw.items", "tfutil.absolute_name_scope", "tensorflow.device", "zip", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.reduce_all", "all_ops.append", "tensorflow.constant", "optimizer.Optimizer.undo_loss_scaling", "tensorflow.constant", "collections.OrderedDict", "all_ops.append", "device.grad_clean.items", "tensorflow.stack", "device.optimizer.apply_gradients", "tensorflow.cond", "all_ops.append", "all_ops.append", "all_ops.append", "tensorflow.cast", "len", "tensorflow.zeros", "len", "tensorflow.cast", "all", "nccl_ops.all_sum", "zip", "tensorflow.control_dependencies", "device.grad_clean.keys", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.cast", "tensorflow.cond", "tensorflow.assign_add", "tensorflow.assign_sub", "tensorflow.group", "tensorflow.cond", "len", "autosummary.autosummary", "autosummary.autosummary", "all_ops.append", "optimizer.Optimizer._devices.values", "optimizer.Optimizer._devices.values", "len", "tensorflow.add_n", "len", "device.grad_clean.keys", "len", "optimizer.Optimizer._devices.values", "tensorflow.Variable", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.control_dependencies", "all_ops.append", "tensorflow.cond", "tensorflow.where", "autosummary.autosummary", "list", "optimizer.Optimizer._devices.values", "zip", "tensorflow.zeros", "tensorflow.assign", "tensorflow.assign", "tensorflow.cond", "tensorflow.reduce_all", "tensorflow.cast", "device.grad_acc.items", "device.grad_acc_vars.values", "all_vars[].shape.as_list", "optimizer.Optimizer._devices.values", "tensorflow.zeros", "tensorflow.is_finite", "device.grad_acc.values"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.apply_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["# pylint: disable=cell-var-from-loop", "\n", "                        ", "opt", "=", "self", ".", "_dev_opt", "[", "dev", "]", "\n", "ls_var", "=", "self", ".", "get_loss_scaling_var", "(", "dev", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "lambda", ":", "opt", ".", "apply_gradients", "(", "grads", ")", ",", "tf", ".", "no_op", ")", ")", "\n", "", "else", ":", "\n", "                            ", "ops", ".", "append", "(", "tf", ".", "cond", "(", "grad_ok", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_add", "(", "ls_var", ",", "self", ".", "loss_scaling_inc", ")", ",", "opt", ".", "apply_gradients", "(", "grads", ")", ")", ",", "\n", "lambda", ":", "tf", ".", "group", "(", "tf", ".", "assign_sub", "(", "ls_var", ",", "self", ".", "loss_scaling_dec", ")", ")", ")", ")", "\n", "\n", "# Report statistics on the last device.", "\n", "", "", "if", "dev", "==", "devices", "[", "-", "1", "]", ":", "\n", "                        ", "with", "tf", ".", "name_scope", "(", "\"Statistics\"", ")", ":", "\n", "                            ", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/learning_rate\"", ",", "self", ".", "learning_rate", ")", ")", "\n", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/overflow_frequency\"", ",", "tf", ".", "where", "(", "grad_ok", ",", "0", ",", "1", ")", ")", ")", "\n", "\n", "if", "self", ".", "use_loss_scaling", ":", "\n", "                                ", "ops", ".", "append", "(", "autosummary", ".", "autosummary", "(", "self", ".", "id", "+", "\"/loss_scaling_log2\"", ",", "ls_var", ")", ")", "\n", "\n", "# Initialize variables and group everything into a single op.", "\n", "", "", "", "", "", "self", ".", "reset_optimizer_state", "(", ")", "\n", "tfutil", ".", "init_uninitialized_vars", "(", "list", "(", "self", ".", "_dev_ls_var", ".", "values", "(", ")", ")", ")", "\n", "\n", "return", "tf", ".", "group", "(", "*", "ops", ",", "name", "=", "\"TrainingOp\"", ")", "\n", "\n", "", "", "def", "reset_optimizer_state", "(", "self", ")", "->", "None", ":", "\n", "        ", "\"\"\"Reset internal state of the underlying optimizer.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "tfutil", ".", "run", "(", "[", "var", ".", "initializer", "for", "opt", "in", "self", ".", "_dev_opt", ".", "values", "(", ")", "for", "var", "in", "opt", ".", "variables", "(", ")", "]", ")", "\n", "\n", "", "def", "get_loss_scaling_var", "(", "self", ",", "device", ":", "str", ")", "->", "Union", "[", "tf", ".", "Variable", ",", "None", "]", ":", "\n", "        ", "\"\"\"Get or create variable representing log2 of the current dynamic loss scaling factor.\"\"\"", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "device", "not", "in", "self", ".", "_dev_ls_var", ":", "\n", "            ", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", "+", "\"/LossScalingVars\"", ")", ",", "tf", ".", "control_dependencies", "(", "None", ")", ":", "\n", "                ", "self", ".", "_dev_ls_var", "[", "device", "]", "=", "tf", ".", "Variable", "(", "np", ".", "float32", "(", "self", ".", "loss_scaling_init", ")", ",", "name", "=", "\"loss_scaling_var\"", ")", "\n", "\n", "", "", "return", "self", ".", "_dev_ls_var", "[", "device", "]", "\n", "\n", "", "def", "apply_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Apply dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "\n", "\n", "", "def", "undo_loss_scaling", "(", "self", ",", "value", ":", "TfExpression", ")", "->", "TfExpression", ":", "\n", "        ", "\"\"\"Undo the effect of dynamic loss scaling for the given expression.\"\"\"", "\n", "assert", "tfutil", ".", "is_tf_expression", "(", "value", ")", "\n", "\n", "if", "not", "self", ".", "use_loss_scaling", ":", "\n", "            ", "return", "value", "\n", "\n", "", "return", "value", "*", "tfutil", ".", "exp2", "(", "-", "self", ".", "get_loss_scaling_var", "(", "value", ".", "device", ")", ")", "# pylint: disable=invalid-unary-operand-type", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state": [[266, 270], ["tfutil.assert_tf_initialized", "tfutil.run", "optimizer.Optimizer._devices.values", "device.optimizer.variables"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.variables"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var": [[271, 274], ["optimizer.Optimizer._get_device"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer._get_device"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling": [[275, 281], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling": [[282, 288], ["tfutil.is_tf_expression", "tfutil.exp2", "optimizer.Optimizer.get_loss_scaling_var"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.exp2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.get_loss_scaling_var"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._find_compiler_bindir": [[36, 41], ["os.path.isdir"], "function", ["None"], ["def", "_find_compiler_bindir", "(", ")", ":", "\n", "    ", "for", "compiler_path", "in", "compiler_bindir_search_path", ":", "\n", "        ", "if", "os", ".", "path", ".", "isdir", "(", "compiler_path", ")", ":", "\n", "            ", "return", "compiler_path", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._get_compute_cap": [[42, 48], ["re.search", "re.search.group", "re.search.group"], "function", ["None"], ["", "def", "_get_compute_cap", "(", "device", ")", ":", "\n", "    ", "caps_str", "=", "device", ".", "physical_device_desc", "\n", "m", "=", "re", ".", "search", "(", "'compute capability: (\\\\d+).(\\\\d+)'", ",", "caps_str", ")", "\n", "major", "=", "m", ".", "group", "(", "1", ")", "\n", "minor", "=", "m", ".", "group", "(", "2", ")", "\n", "return", "(", "major", ",", "minor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._get_cuda_gpu_arch_string": [[49, 55], ["custom_ops._get_compute_cap", "len", "RuntimeError", "tensorflow.python.client.device_lib.list_local_devices"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._get_compute_cap"], ["", "def", "_get_cuda_gpu_arch_string", "(", ")", ":", "\n", "    ", "gpus", "=", "[", "x", "for", "x", "in", "device_lib", ".", "list_local_devices", "(", ")", "if", "x", ".", "device_type", "==", "'GPU'", "]", "\n", "if", "len", "(", "gpus", ")", "==", "0", ":", "\n", "        ", "raise", "RuntimeError", "(", "'No GPU devices found'", ")", "\n", "", "(", "major", ",", "minor", ")", "=", "_get_compute_cap", "(", "gpus", "[", "0", "]", ")", "\n", "return", "'sm_%s%s'", "%", "(", "major", ",", "minor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._run_cmd": [[56, 62], ["os.popen", "pipe.read", "pipe.close", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "def", "_run_cmd", "(", "cmd", ")", ":", "\n", "    ", "with", "os", ".", "popen", "(", "cmd", ")", "as", "pipe", ":", "\n", "        ", "output", "=", "pipe", ".", "read", "(", ")", "\n", "status", "=", "pipe", ".", "close", "(", ")", "\n", "", "if", "status", "is", "not", "None", ":", "\n", "        ", "raise", "RuntimeError", "(", "'NVCC returned an error. See below for full command line and output log:\\n\\n%s\\n\\n%s'", "%", "(", "cmd", ",", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._prepare_nvcc_cli": [[63, 81], ["custom_ops._find_compiler_bindir", "opts.strip", "tensorflow.sysconfig.get_include", "os.path.join", "os.path.join", "os.path.join", "tensorflow.sysconfig.get_include", "tensorflow.sysconfig.get_include", "tensorflow.sysconfig.get_include", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._find_compiler_bindir"], ["", "", "def", "_prepare_nvcc_cli", "(", "opts", ")", ":", "\n", "    ", "cmd", "=", "'nvcc '", "+", "opts", ".", "strip", "(", ")", "\n", "cmd", "+=", "' --disable-warnings'", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "tf", ".", "sysconfig", ".", "get_include", "(", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "tf", ".", "sysconfig", ".", "get_include", "(", ")", ",", "'external'", ",", "'protobuf_archive'", ",", "'src'", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "tf", ".", "sysconfig", ".", "get_include", "(", ")", ",", "'external'", ",", "'com_google_absl'", ")", "\n", "cmd", "+=", "' --include-path \"%s\"'", "%", "os", ".", "path", ".", "join", "(", "tf", ".", "sysconfig", ".", "get_include", "(", ")", ",", "'external'", ",", "'eigen_archive'", ")", "\n", "\n", "compiler_bindir", "=", "_find_compiler_bindir", "(", ")", "\n", "if", "compiler_bindir", "is", "None", ":", "\n", "# Require that _find_compiler_bindir succeeds on Windows.  Allow", "\n", "# nvcc to use whatever is the default on Linux.", "\n", "        ", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Could not find MSVC/GCC/CLANG installation on this computer. Check compiler_bindir_search_path list in \"%s\".'", "%", "__file__", ")", "\n", "", "", "else", ":", "\n", "        ", "cmd", "+=", "' --compiler-bindir \"%s\"'", "%", "compiler_bindir", "\n", "", "cmd", "+=", "' 2>&1'", "\n", "return", "cmd", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops.get_plugin": [[87, 168], ["os.path.basename", "os.path.splitext", "print", "hashlib.md5", "hashlib.md5.update", "custom_ops._prepare_nvcc_cli", "hashlib.md5.update", "hashlib.md5.update", "hashlib.md5.update", "os.path.join", "tensorflow.load_op_library", "open", "hashlib.md5.update", "custom_ops._get_cuda_gpu_arch_string", "os.path.isfile", "print", "print", "f.read", "print", "tempfile.TemporaryDirectory", "os.path.join", "custom_ops._run_cmd", "os.path.join", "print", "tempfile.TemporaryDirectory", "os.path.join", "custom_ops._run_cmd", "os.makedirs", "os.path.join", "shutil.copyfile", "os.rename", "print", "custom_ops._prepare_nvcc_cli", "open", "hashlib.md5.update", "tensorflow.sysconfig.get_lib", "os.path.join", "hashlib.md5.hexdigest", "tensorflow.sysconfig.get_lib", "ln.replace.replace", "hashlib.md5.update", "ln.replace.startswith", "ln.replace.startswith", "cuda_file.replace", "uuid.uuid4"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._prepare_nvcc_cli", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._get_cuda_gpu_arch_string", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._run_cmd", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._run_cmd", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops._prepare_nvcc_cli", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update"], ["def", "get_plugin", "(", "cuda_file", ")", ":", "\n", "    ", "cuda_file_base", "=", "os", ".", "path", ".", "basename", "(", "cuda_file", ")", "\n", "cuda_file_name", ",", "cuda_file_ext", "=", "os", ".", "path", ".", "splitext", "(", "cuda_file_base", ")", "\n", "\n", "# Already in cache?", "\n", "if", "cuda_file", "in", "_plugin_cache", ":", "\n", "        ", "return", "_plugin_cache", "[", "cuda_file", "]", "\n", "\n", "# Setup plugin.", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Setting up TensorFlow plugin \"%s\": '", "%", "cuda_file_base", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "# Hash CUDA source.", "\n", "        ", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "with", "open", "(", "cuda_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "md5", ".", "update", "(", "f", ".", "read", "(", ")", ")", "\n", "", "md5", ".", "update", "(", "b'\\n'", ")", "\n", "\n", "# Hash headers included by the CUDA code by running it through the preprocessor.", "\n", "if", "not", "do_not_hash_included_headers", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'Preprocessing... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "                ", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "cuda_file_name", "+", "'_tmp'", "+", "cuda_file_ext", ")", "\n", "_run_cmd", "(", "_prepare_nvcc_cli", "(", "'\"%s\" --preprocess -o \"%s\" --keep --keep-dir \"%s\"'", "%", "(", "cuda_file", ",", "tmp_file", ",", "tmp_dir", ")", ")", ")", "\n", "with", "open", "(", "tmp_file", ",", "'rb'", ")", "as", "f", ":", "\n", "                    ", "bad_file_str", "=", "(", "'\"'", "+", "cuda_file", ".", "replace", "(", "'\\\\'", ",", "'/'", ")", "+", "'\"'", ")", ".", "encode", "(", "'utf-8'", ")", "# __FILE__ in error check macros", "\n", "good_file_str", "=", "(", "'\"'", "+", "cuda_file_base", "+", "'\"'", ")", ".", "encode", "(", "'utf-8'", ")", "\n", "for", "ln", "in", "f", ":", "\n", "                        ", "if", "not", "ln", ".", "startswith", "(", "b'# '", ")", "and", "not", "ln", ".", "startswith", "(", "b'#line '", ")", ":", "# ignore line number pragmas", "\n", "                            ", "ln", "=", "ln", ".", "replace", "(", "bad_file_str", ",", "good_file_str", ")", "\n", "md5", ".", "update", "(", "ln", ")", "\n", "", "", "md5", ".", "update", "(", "b'\\n'", ")", "\n", "\n", "# Select compiler options.", "\n", "", "", "", "compile_opts", "=", "''", "\n", "if", "os", ".", "name", "==", "'nt'", ":", "\n", "            ", "compile_opts", "+=", "'\"%s\"'", "%", "os", ".", "path", ".", "join", "(", "tf", ".", "sysconfig", ".", "get_lib", "(", ")", ",", "'python'", ",", "'_pywrap_tensorflow_internal.lib'", ")", "\n", "", "elif", "os", ".", "name", "==", "'posix'", ":", "\n", "            ", "compile_opts", "+=", "'\"%s\"'", "%", "os", ".", "path", ".", "join", "(", "tf", ".", "sysconfig", ".", "get_lib", "(", ")", ",", "'python'", ",", "'_pywrap_tensorflow_internal.so'", ")", "\n", "compile_opts", "+=", "' --compiler-options \\'-fPIC -D_GLIBCXX_USE_CXX11_ABI=0\\''", "\n", "", "else", ":", "\n", "            ", "assert", "False", "# not Windows or Linux, w00t?", "\n", "", "compile_opts", "+=", "' --gpu-architecture=%s'", "%", "_get_cuda_gpu_arch_string", "(", ")", "\n", "compile_opts", "+=", "' --use_fast_math'", "\n", "nvcc_cmd", "=", "_prepare_nvcc_cli", "(", "compile_opts", ")", "\n", "\n", "# Hash build configuration.", "\n", "md5", ".", "update", "(", "(", "'nvcc_cmd: '", "+", "nvcc_cmd", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "md5", ".", "update", "(", "(", "'tf.VERSION: '", "+", "tf", ".", "VERSION", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "md5", ".", "update", "(", "(", "'cuda_cache_version_tag: '", "+", "cuda_cache_version_tag", ")", ".", "encode", "(", "'utf-8'", ")", "+", "b'\\n'", ")", "\n", "\n", "# Compile if not already compiled.", "\n", "bin_file_ext", "=", "'.dll'", "if", "os", ".", "name", "==", "'nt'", "else", "'.so'", "\n", "bin_file", "=", "os", ".", "path", ".", "join", "(", "cuda_cache_path", ",", "cuda_file_name", "+", "'_'", "+", "md5", ".", "hexdigest", "(", ")", "+", "bin_file_ext", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "bin_file", ")", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "print", "(", "'Compiling... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", ")", "as", "tmp_dir", ":", "\n", "                ", "tmp_file", "=", "os", ".", "path", ".", "join", "(", "tmp_dir", ",", "cuda_file_name", "+", "'_tmp'", "+", "bin_file_ext", ")", "\n", "_run_cmd", "(", "nvcc_cmd", "+", "' \"%s\" --shared -o \"%s\" --keep --keep-dir \"%s\"'", "%", "(", "cuda_file", ",", "tmp_file", ",", "tmp_dir", ")", ")", "\n", "os", ".", "makedirs", "(", "cuda_cache_path", ",", "exist_ok", "=", "True", ")", "\n", "intermediate_file", "=", "os", ".", "path", ".", "join", "(", "cuda_cache_path", ",", "cuda_file_name", "+", "'_'", "+", "uuid", ".", "uuid4", "(", ")", ".", "hex", "+", "'_tmp'", "+", "bin_file_ext", ")", "\n", "shutil", ".", "copyfile", "(", "tmp_file", ",", "intermediate_file", ")", "\n", "os", ".", "rename", "(", "intermediate_file", ",", "bin_file", ")", "# atomic", "\n", "\n", "# Load.", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "'Loading... '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "plugin", "=", "tf", ".", "load_op_library", "(", "bin_file", ")", "\n", "\n", "# Add to cache.", "\n", "_plugin_cache", "[", "cuda_file", "]", "=", "plugin", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "'Done.'", ",", "flush", "=", "True", ")", "\n", "", "return", "plugin", "\n", "\n", "", "except", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'Failed!'", ",", "flush", "=", "True", ")", "\n", "", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer._get_device": [[84, 113], ["tfutil.assert_tf_initialized", "util.EasyDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tfutil.absolute_name_scope", "tensorflow.device", "tensorflow.control_dependencies", "optimizer.Optimizer.optimizer_class", "tensorflow.Variable", "optimizer.Optimizer.scope.replace", "numpy.float32", "len"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.assert_tf_initialized", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.absolute_name_scope"], ["\n", "dev", "=", "loss", ".", "device", "\n", "\n", "assert", "all", "(", "var", ".", "device", "==", "dev", "for", "var", "in", "trainable_vars", ")", "\n", "\n", "# Register device and compute gradients.", "\n", "with", "tf", ".", "name_scope", "(", "self", ".", "id", "+", "\"_grad\"", ")", ",", "tf", ".", "device", "(", "dev", ")", ":", "\n", "            ", "if", "dev", "not", "in", "self", ".", "_dev_opt", ":", "\n", "                ", "opt_name", "=", "self", ".", "scope", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "+", "\"_opt%d\"", "%", "len", "(", "self", ".", "_dev_opt", ")", "\n", "assert", "callable", "(", "self", ".", "optimizer_class", ")", "\n", "self", ".", "_dev_opt", "[", "dev", "]", "=", "self", ".", "optimizer_class", "(", "name", "=", "opt_name", ",", "learning_rate", "=", "self", ".", "learning_rate", ",", "**", "self", ".", "optimizer_kwargs", ")", "\n", "self", ".", "_dev_grads", "[", "dev", "]", "=", "[", "]", "\n", "\n", "", "loss", "=", "self", ".", "apply_loss_scaling", "(", "tf", ".", "cast", "(", "loss", ",", "tf", ".", "float32", ")", ")", "\n", "grads", "=", "self", ".", "_dev_opt", "[", "dev", "]", ".", "compute_gradients", "(", "loss", ",", "trainable_vars", ",", "gate_gradients", "=", "tf", ".", "train", ".", "Optimizer", ".", "GATE_NONE", ")", "# disable gating to reduce memory usage", "\n", "grads", "=", "[", "(", "g", ",", "v", ")", "if", "g", "is", "not", "None", "else", "(", "tf", ".", "zeros_like", "(", "v", ")", ",", "v", ")", "for", "g", ",", "v", "in", "grads", "]", "# replace disconnected gradients with zeros", "\n", "self", ".", "_dev_grads", "[", "dev", "]", ".", "append", "(", "grads", ")", "\n", "\n", "", "", "def", "apply_updates", "(", "self", ")", "->", "tf", ".", "Operation", ":", "\n", "        ", "\"\"\"Construct training op to update the registered variables based on their gradients.\"\"\"", "\n", "tfutil", ".", "assert_tf_initialized", "(", ")", "\n", "assert", "not", "self", ".", "_updates_applied", "\n", "self", ".", "_updates_applied", "=", "True", "\n", "devices", "=", "list", "(", "self", ".", "_dev_grads", ".", "keys", "(", ")", ")", "\n", "total_grads", "=", "sum", "(", "len", "(", "grads", ")", "for", "grads", "in", "self", ".", "_dev_grads", ".", "values", "(", ")", ")", "\n", "assert", "len", "(", "devices", ")", ">=", "1", "and", "total_grads", ">=", "1", "\n", "ops", "=", "[", "]", "\n", "\n", "with", "tfutil", ".", "absolute_name_scope", "(", "self", ".", "scope", ")", ":", "\n", "# Cast gradients to FP32 and calculate partial sum within each device.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.__init__": [[293, 300], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.variables": [[301, 303], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.compute_gradients": [[304, 307], ["list", "zip", "tensorflow.gradients"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.SimpleAdam.apply_gradients": [[308, 337], ["tensorflow.name_scope", "tensorflow.group", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.sqrt", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign_sub", "tensorflow.square", "tensorflow.sqrt", "tensorflow.zeros_like", "tensorflow.zeros_like"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.process_reals": [[22, 43], ["tensorflow.name_scope", "tensorflow.cast", "training.misc.adjust_dynamic_range", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.tile", "tensorflow.reshape", "dnnlib.lerp", "tensorflow.name_scope", "tensorflow.shape", "tensorflow.cast", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "tensorflow.name_scope", "tensorflow.where", "tensorflow.reverse", "tensorflow.floor", "tensorflow.floor", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp"], ["\n", "#----------------------------------------------------------------------------", "\n", "# Just-in-time processing of training images before feeding them to the networks.", "\n", "\n", "def", "process_reals", "(", "x", ",", "lod", ",", "mirror_augment", ",", "drange_data", ",", "drange_net", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'ProcessReals'", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'DynamicRange'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "x", "=", "misc", ".", "adjust_dynamic_range", "(", "x", ",", "drange_data", ",", "drange_net", ")", "\n", "", "if", "mirror_augment", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'MirrorAugment'", ")", ":", "\n", "                ", "s", "=", "tf", ".", "shape", "(", "x", ")", "\n", "mask", "=", "tf", ".", "random_uniform", "(", "[", "s", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ",", "0.0", ",", "1.0", ")", "\n", "mask", "=", "tf", ".", "tile", "(", "mask", ",", "[", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "\n", "x", "=", "tf", ".", "where", "(", "mask", "<", "0.5", ",", "x", ",", "tf", ".", "reverse", "(", "x", ",", "axis", "=", "[", "3", "]", ")", ")", "\n", "", "", "with", "tf", ".", "name_scope", "(", "'FadeLOD'", ")", ":", "# Smooth crossfade between consecutive levels-of-detail.", "\n", "            ", "s", "=", "tf", ".", "shape", "(", "x", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "//", "2", ",", "2", ",", "s", "[", "3", "]", "//", "2", ",", "2", "]", ")", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "3", ",", "5", "]", ",", "keepdims", "=", "True", ")", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "1", ",", "1", ",", "1", ",", "2", ",", "1", ",", "2", "]", ")", "\n", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "\n", "x", "=", "tflib", ".", "lerp", "(", "x", ",", "y", ",", "lod", "-", "tf", ".", "floor", "(", "lod", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.training_schedule": [[47, 101], ["dnnlib.EasyDict", "dnnlib.EasyDict", "minibatch_size_dict.get", "minibatch_gpu_dict.get", "G_lrate_dict.get", "D_lrate_dict.get", "tick_kimg_dict.get", "int", "numpy.floor", "max", "min", "numpy.floor", "numpy.log2", "int", "max", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", "]", ")", "\n", "", "return", "x", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Evaluate time-varying training parameters.", "\n", "\n", "", "", "def", "training_schedule", "(", "\n", "cur_nimg", ",", "\n", "training_set", ",", "\n", "num_gpus", ",", "\n", "lod_initial_resolution", "=", "4", ",", "# Image resolution used at the beginning.", "\n", "lod_training_kimg", "=", "600", ",", "# Thousands of real images to show before doubling the resolution.", "\n", "lod_transition_kimg", "=", "600", ",", "# Thousands of real images to show when fading in new layers.", "\n", "minibatch_base", "=", "16", ",", "# Maximum minibatch size, divided evenly among GPUs.", "\n", "minibatch_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "max_minibatch_per_gpu", "=", "{", "}", ",", "# Resolution-specific maximum minibatch size per GPU.", "\n", "G_lrate_base", "=", "0.001", ",", "# Learning rate for the generator.", "\n", "G_lrate_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "D_lrate_base", "=", "0.001", ",", "# Learning rate for the discriminator.", "\n", "D_lrate_dict", "=", "{", "}", ",", "# Resolution-specific overrides.", "\n", "lrate_rampup_kimg", "=", "0", ",", "# Duration of learning rate ramp-up.", "\n", "tick_kimg_base", "=", "160", ",", "# Default interval of progress snapshots.", "\n", "tick_kimg_dict", "=", "{", "4", ":", "160", ",", "8", ":", "140", ",", "16", ":", "120", ",", "32", ":", "100", ",", "64", ":", "80", ",", "128", ":", "60", ",", "256", ":", "40", ",", "512", ":", "30", ",", "1024", ":", "20", "}", ")", ":", "# Resolution-specific overrides.", "\n", "\n", "# Initialize result dict.", "\n", "    ", "s", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "s", ".", "kimg", "=", "cur_nimg", "/", "1000.0", "\n", "\n", "# Training phase.", "\n", "phase_dur", "=", "lod_training_kimg", "+", "lod_transition_kimg", "\n", "phase_idx", "=", "int", "(", "np", ".", "floor", "(", "s", ".", "kimg", "/", "phase_dur", ")", ")", "if", "phase_dur", ">", "0", "else", "0", "\n", "phase_kimg", "=", "s", ".", "kimg", "-", "phase_idx", "*", "phase_dur", "\n", "\n", "# Level-of-detail and resolution.", "\n", "s", ".", "lod", "=", "training_set", ".", "resolution_log2", "\n", "s", ".", "lod", "-=", "np", ".", "floor", "(", "np", ".", "log2", "(", "lod_initial_resolution", ")", ")", "\n", "s", ".", "lod", "-=", "phase_idx", "\n", "if", "lod_transition_kimg", ">", "0", ":", "\n", "        ", "s", ".", "lod", "-=", "max", "(", "phase_kimg", "-", "lod_training_kimg", ",", "0.0", ")", "/", "lod_transition_kimg", "\n", "", "s", ".", "lod", "=", "max", "(", "s", ".", "lod", ",", "0.0", ")", "\n", "s", ".", "resolution", "=", "2", "**", "(", "training_set", ".", "resolution_log2", "-", "int", "(", "np", ".", "floor", "(", "s", ".", "lod", ")", ")", ")", "\n", "\n", "# Minibatch size.", "\n", "s", ".", "minibatch", "=", "minibatch_dict", ".", "get", "(", "s", ".", "resolution", ",", "minibatch_base", ")", "\n", "s", ".", "minibatch", "-=", "s", ".", "minibatch", "%", "num_gpus", "\n", "if", "s", ".", "resolution", "in", "max_minibatch_per_gpu", ":", "\n", "        ", "s", ".", "minibatch", "=", "min", "(", "s", ".", "minibatch", ",", "max_minibatch_per_gpu", "[", "s", ".", "resolution", "]", "*", "num_gpus", ")", "\n", "\n", "# Learning rate.", "\n", "", "s", ".", "G_lrate", "=", "G_lrate_dict", ".", "get", "(", "s", ".", "resolution", ",", "G_lrate_base", ")", "\n", "s", ".", "D_lrate", "=", "D_lrate_dict", ".", "get", "(", "s", ".", "resolution", ",", "D_lrate_base", ")", "\n", "if", "lrate_rampup_kimg", ">", "0", ":", "\n", "        ", "rampup", "=", "min", "(", "s", ".", "kimg", "/", "lrate_rampup_kimg", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.training_loop": [[105, 355], ["dnnlib.init_tf", "training.dataset.load_dataset", "training.misc.setup_snapshot_image_grid", "training.misc.save_image_grid", "tflib.Network.print_layers", "tflib.Network.print_layers", "training_loop.training_schedule", "numpy.random.randn", "G.clone.run", "training.misc.save_image_grid", "print", "dict", "dict", "dnnlib.Optimizer", "dnnlib.Optimizer", "dnnlib.Optimizer", "dnnlib.Optimizer", "range", "tensorflow.group", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "tflib.Optimizer.apply_updates", "G.clone.setup_as_moving_average_of", "dnnlib.init_uninitialized_vars", "print", "tensorflow.summary.FileWriter", "metrics.metric_base.MetricGroup", "print", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().get_last_update_interval", "dnnlib.RunContext.get().get_last_update_interval", "int", "training.misc.save_pkl", "tf.summary.FileWriter.close", "dataset.load_dataset.close", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "tensorflow.device", "numpy.prod", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "tensorflow.name_scope", "tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.device", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "tf.summary.FileWriter.add_graph", "tflib.Network.setup_weight_histograms", "tflib.Network.setup_weight_histograms", "dnnlib.RunContext.get().should_stop", "dnnlib.RunContext.get().should_stop", "training_loop.training_schedule", "dataset.load_dataset.configure", "range", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "dnnlib.convert_path", "dnnlib.convert_path", "print", "dnnlib.Network", "dnnlib.Network", "tflib.Network.clone", "print", "training.misc.load_pkl", "tensorflow.name_scope", "tensorflow.device", "tflib.Optimizer.register_gradients", "tflib.Optimizer.register_gradients", "tensorflow.contrib.memory_stats.MaxBytesInUse", "tensorflow.get_default_graph", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "range", "dnnlib.RunContext.get().get_time_since_last_update", "dnnlib.RunContext.get().get_time_since_last_update", "print", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "metric_base.MetricGroup.update_autosummaries", "dnnlib.autosummary.save_summaries", "dnnlib.RunContext.get().update", "dnnlib.RunContext.get().update", "tflib.Network.copy_vars_from", "tflib.Network.copy_vars_from", "G.clone.copy_vars_from", "tensorflow.div", "tflib.Network.clone", "tflib.Network.clone", "tensorflow.name_scope", "training_loop.training_schedule", "tensorflow.Variable", "tensorflow.Variable", "dataset.load_dataset.get_minibatch_tf", "training_loop.process_reals", "tensorflow.concat", "tensorflow.concat", "tensorflow.control_dependencies", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.constant", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "tflib.Optimizer.reset_optimizer_state", "tflib.Optimizer.reset_optimizer_state", "len", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.RunContext.get().get_time_since_start", "dnnlib.RunContext.get().get_time_since_start", "G.clone.run", "training.misc.save_image_grid", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "training.misc.save_pkl", "metric_base.MetricGroup.run", "dnnlib.RunContext.get().get_last_update_interval", "dnnlib.RunContext.get().get_last_update_interval", "tensorflow.cast", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.assign", "tensorflow.name_scope", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "tensorflow.name_scope", "dnnlib.util.call_func_by_name", "dnnlib.util.call_func_by_name", "tflib.Optimizer.register_gradients", "tflib.Optimizer.register_gradients", "numpy.floor", "numpy.floor", "numpy.ceil", "numpy.ceil", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "int", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "dnnlib.run", "dnnlib.run", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.util.format_time", "dnnlib.util.format_time", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "dnnlib.convert_path", "dnnlib.convert_path", "dnnlib.RunContext.get", "dnnlib.RunContext.get", "dnnlib.tflib.autosummary.autosummary", "tf.constant.eval"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.setup_snapshot_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.print_layers", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.training_schedule", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_as_moving_average_of", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.setup_weight_histograms", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.should_stop", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.should_stop", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.training_schedule", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_last_update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_last_update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.metric_base.MetricGroup.update_autosummaries", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.save_summaries", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.copy_vars_from", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.training_schedule", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.training_loop.process_reals", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_time_since_start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get_last_update_interval", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.call_func_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.format_time", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["# Other parameters.", "\n", "", "s", ".", "tick_kimg", "=", "tick_kimg_dict", ".", "get", "(", "s", ".", "resolution", ",", "tick_kimg_base", ")", "\n", "return", "s", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "# Main training script.", "\n", "\n", "", "def", "training_loop", "(", "\n", "submit_config", ",", "\n", "G_args", "=", "{", "}", ",", "# Options for generator network.", "\n", "D_args", "=", "{", "}", ",", "# Options for discriminator network.", "\n", "G_opt_args", "=", "{", "}", ",", "# Options for generator optimizer.", "\n", "D_opt_args", "=", "{", "}", ",", "# Options for discriminator optimizer.", "\n", "G_loss_args", "=", "{", "}", ",", "# Options for generator loss.", "\n", "D_loss_args", "=", "{", "}", ",", "# Options for discriminator loss.", "\n", "dataset_args", "=", "{", "}", ",", "# Options for dataset.load_dataset().", "\n", "sched_args", "=", "{", "}", ",", "# Options for train.TrainingSchedule.", "\n", "grid_args", "=", "{", "}", ",", "# Options for train.setup_snapshot_image_grid().", "\n", "metric_arg_list", "=", "[", "]", ",", "# Options for MetricGroup.", "\n", "tf_config", "=", "{", "}", ",", "# Options for tflib.init_tf().", "\n", "G_smoothing_kimg", "=", "10.0", ",", "# Half-life of the running average of generator weights.", "\n", "D_repeats", "=", "1", ",", "# How many times the discriminator is trained per G iteration.", "\n", "minibatch_repeats", "=", "4", ",", "# Number of minibatches to run before adjusting training parameters.", "\n", "reset_opt_for_new_lod", "=", "True", ",", "# Reset optimizer internal state (e.g. Adam moments) when new layers are introduced?", "\n", "total_kimg", "=", "15000", ",", "# Total length of the training, measured in thousands of real images.", "\n", "mirror_augment", "=", "False", ",", "# Enable mirror augment?", "\n", "drange_net", "=", "[", "-", "1", ",", "1", "]", ",", "# Dynamic range used when feeding image data to the networks.", "\n", "image_snapshot_ticks", "=", "1", ",", "# How often to export image snapshots?", "\n", "network_snapshot_ticks", "=", "10", ",", "# How often to export network snapshots?", "\n", "save_tf_graph", "=", "False", ",", "# Include full TensorFlow computation graph in the tfevents file?", "\n", "save_weight_histograms", "=", "False", ",", "# Include weight histograms in the tfevents file?", "\n", "resume_run_id", "=", "None", ",", "# Run ID or network pkl to resume training from, None = start from scratch.", "\n", "resume_snapshot", "=", "None", ",", "# Snapshot index to resume training from, None = autodetect.", "\n", "resume_kimg", "=", "0.0", ",", "# Assumed training progress at the beginning. Affects reporting and training schedule.", "\n", "resume_time", "=", "0.0", ")", ":", "# Assumed wallclock time at the beginning. Affects reporting.", "\n", "\n", "# Initialize dnnlib and TensorFlow.", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ",", "train", ")", "\n", "tflib", ".", "init_tf", "(", "tf_config", ")", "\n", "\n", "# Load training set.", "\n", "training_set", "=", "dataset", ".", "load_dataset", "(", "data_dir", "=", "config", ".", "data_dir", ",", "verbose", "=", "True", ",", "**", "dataset_args", ")", "\n", "\n", "# Construct networks.", "\n", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "        ", "if", "resume_run_id", "is", "not", "None", ":", "\n", "            ", "network_pkl", "=", "misc", ".", "locate_network_pkl", "(", "resume_run_id", ",", "resume_snapshot", ")", "\n", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "G", ",", "D", ",", "Gs", "=", "misc", ".", "load_pkl", "(", "network_pkl", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Constructing networks...'", ")", "\n", "G", "=", "tflib", ".", "Network", "(", "'G'", ",", "num_channels", "=", "training_set", ".", "shape", "[", "0", "]", ",", "resolution", "=", "training_set", ".", "shape", "[", "1", "]", ",", "label_size", "=", "training_set", ".", "label_size", ",", "**", "G_args", ")", "\n", "D", "=", "tflib", ".", "Network", "(", "'D'", ",", "num_channels", "=", "training_set", ".", "shape", "[", "0", "]", ",", "resolution", "=", "training_set", ".", "shape", "[", "1", "]", ",", "label_size", "=", "training_set", ".", "label_size", ",", "**", "D_args", ")", "\n", "Gs", "=", "G", ".", "clone", "(", "'Gs'", ")", "\n", "", "", "G", ".", "print_layers", "(", ")", ";", "D", ".", "print_layers", "(", ")", "\n", "\n", "print", "(", "'Building TensorFlow graph...'", ")", "\n", "with", "tf", ".", "name_scope", "(", "'Inputs'", ")", ",", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "        ", "lod_in", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'lod_in'", ",", "shape", "=", "[", "]", ")", "\n", "lrate_in", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'lrate_in'", ",", "shape", "=", "[", "]", ")", "\n", "minibatch_in", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "'minibatch_in'", ",", "shape", "=", "[", "]", ")", "\n", "minibatch_split", "=", "minibatch_in", "//", "submit_config", ".", "num_gpus", "\n", "Gs_beta", "=", "0.5", "**", "tf", ".", "div", "(", "tf", ".", "cast", "(", "minibatch_in", ",", "tf", ".", "float32", ")", ",", "G_smoothing_kimg", "*", "1000.0", ")", "if", "G_smoothing_kimg", ">", "0.0", "else", "0.0", "\n", "\n", "", "G_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'TrainG'", ",", "learning_rate", "=", "lrate_in", ",", "**", "G_opt_args", ")", "\n", "D_opt", "=", "tflib", ".", "Optimizer", "(", "name", "=", "'TrainD'", ",", "learning_rate", "=", "lrate_in", ",", "**", "D_opt_args", ")", "\n", "for", "gpu", "in", "range", "(", "submit_config", ".", "num_gpus", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'GPU%d'", "%", "gpu", ")", ",", "tf", ".", "device", "(", "'/gpu:%d'", "%", "gpu", ")", ":", "\n", "            ", "G_gpu", "=", "G", "if", "gpu", "==", "0", "else", "G", ".", "clone", "(", "G", ".", "name", "+", "'_shadow'", ")", "\n", "D_gpu", "=", "D", "if", "gpu", "==", "0", "else", "D", ".", "clone", "(", "D", ".", "name", "+", "'_shadow'", ")", "\n", "lod_assign_ops", "=", "[", "tf", ".", "assign", "(", "G_gpu", ".", "find_var", "(", "'lod'", ")", ",", "lod_in", ")", ",", "tf", ".", "assign", "(", "D_gpu", ".", "find_var", "(", "'lod'", ")", ",", "lod_in", ")", "]", "\n", "reals", ",", "labels", "=", "training_set", ".", "get_minibatch_tf", "(", ")", "\n", "reals", "=", "process_reals", "(", "reals", ",", "lod_in", ",", "mirror_augment", ",", "training_set", ".", "dynamic_range", ",", "drange_net", ")", "\n", "with", "tf", ".", "name_scope", "(", "'G_loss'", ")", ",", "tf", ".", "control_dependencies", "(", "lod_assign_ops", ")", ":", "\n", "                ", "G_loss", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "G", "=", "G_gpu", ",", "D", "=", "D_gpu", ",", "opt", "=", "G_opt", ",", "training_set", "=", "training_set", ",", "minibatch_size", "=", "minibatch_split", ",", "**", "G_loss_args", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'D_loss'", ")", ",", "tf", ".", "control_dependencies", "(", "lod_assign_ops", ")", ":", "\n", "                ", "D_loss", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "G", "=", "G_gpu", ",", "D", "=", "D_gpu", ",", "opt", "=", "D_opt", ",", "training_set", "=", "training_set", ",", "minibatch_size", "=", "minibatch_split", ",", "reals", "=", "reals", ",", "labels", "=", "labels", ",", "**", "D_loss_args", ")", "\n", "", "G_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "G_loss", ")", ",", "G_gpu", ".", "trainables", ")", "\n", "D_opt", ".", "register_gradients", "(", "tf", ".", "reduce_mean", "(", "D_loss", ")", ",", "D_gpu", ".", "trainables", ")", "\n", "", "", "G_train_op", "=", "G_opt", ".", "apply_updates", "(", ")", "\n", "D_train_op", "=", "D_opt", ".", "apply_updates", "(", ")", "\n", "\n", "Gs_update_op", "=", "Gs", ".", "setup_as_moving_average_of", "(", "G", ",", "beta", "=", "Gs_beta", ")", "\n", "with", "tf", ".", "device", "(", "'/gpu:0'", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "peak_gpu_mem_op", "=", "tf", ".", "contrib", ".", "memory_stats", ".", "MaxBytesInUse", "(", ")", "\n", "", "except", "tf", ".", "errors", ".", "NotFoundError", ":", "\n", "            ", "peak_gpu_mem_op", "=", "tf", ".", "constant", "(", "0", ")", "\n", "\n", "", "", "print", "(", "'Setting up snapshot image grid...'", ")", "\n", "grid_size", ",", "grid_reals", ",", "grid_labels", ",", "grid_latents", "=", "misc", ".", "setup_snapshot_image_grid", "(", "G", ",", "training_set", ",", "**", "grid_args", ")", "\n", "sched", "=", "training_schedule", "(", "cur_nimg", "=", "total_kimg", "*", "1000", ",", "training_set", "=", "training_set", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ",", "**", "sched_args", ")", "\n", "grid_fakes", "=", "Gs", ".", "run", "(", "grid_latents", ",", "grid_labels", ",", "is_validation", "=", "True", ",", "minibatch_size", "=", "sched", ".", "minibatch", "//", "submit_config", ".", "num_gpus", ")", "\n", "\n", "print", "(", "'Setting up run dir...'", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_reals", ",", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "'reals.png'", ")", ",", "drange", "=", "training_set", ".", "dynamic_range", ",", "grid_size", "=", "grid_size", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_fakes", ",", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "'fakes%06d.png'", "%", "resume_kimg", ")", ",", "drange", "=", "drange_net", ",", "grid_size", "=", "grid_size", ")", "\n", "summary_log", "=", "tf", ".", "summary", ".", "FileWriter", "(", "submit_config", ".", "run_dir", ")", "\n", "if", "save_tf_graph", ":", "\n", "        ", "summary_log", ".", "add_graph", "(", "tf", ".", "get_default_graph", "(", ")", ")", "\n", "", "if", "save_weight_histograms", ":", "\n", "        ", "G", ".", "setup_weight_histograms", "(", ")", ";", "D", ".", "setup_weight_histograms", "(", ")", "\n", "", "metrics", "=", "metric_base", ".", "MetricGroup", "(", "metric_arg_list", ")", "\n", "\n", "print", "(", "'Training...\\n'", ")", "\n", "ctx", ".", "update", "(", "''", ",", "cur_epoch", "=", "resume_kimg", ",", "max_epoch", "=", "total_kimg", ")", "\n", "maintenance_time", "=", "ctx", ".", "get_last_update_interval", "(", ")", "\n", "cur_nimg", "=", "int", "(", "resume_kimg", "*", "1000", ")", "\n", "cur_tick", "=", "0", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "prev_lod", "=", "-", "1.0", "\n", "while", "cur_nimg", "<", "total_kimg", "*", "1000", ":", "\n", "        ", "if", "ctx", ".", "should_stop", "(", ")", ":", "break", "\n", "\n", "# Choose training parameters and configure training ops.", "\n", "sched", "=", "training_schedule", "(", "cur_nimg", "=", "cur_nimg", ",", "training_set", "=", "training_set", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ",", "**", "sched_args", ")", "\n", "training_set", ".", "configure", "(", "sched", ".", "minibatch", "//", "submit_config", ".", "num_gpus", ",", "sched", ".", "lod", ")", "\n", "if", "reset_opt_for_new_lod", ":", "\n", "            ", "if", "np", ".", "floor", "(", "sched", ".", "lod", ")", "!=", "np", ".", "floor", "(", "prev_lod", ")", "or", "np", ".", "ceil", "(", "sched", ".", "lod", ")", "!=", "np", ".", "ceil", "(", "prev_lod", ")", ":", "\n", "                ", "G_opt", ".", "reset_optimizer_state", "(", ")", ";", "D_opt", ".", "reset_optimizer_state", "(", ")", "\n", "", "", "prev_lod", "=", "sched", ".", "lod", "\n", "\n", "# Run training ops.", "\n", "for", "_mb_repeat", "in", "range", "(", "minibatch_repeats", ")", ":", "\n", "            ", "for", "_D_repeat", "in", "range", "(", "D_repeats", ")", ":", "\n", "                ", "tflib", ".", "run", "(", "[", "D_train_op", ",", "Gs_update_op", "]", ",", "{", "lod_in", ":", "sched", ".", "lod", ",", "lrate_in", ":", "sched", ".", "D_lrate", ",", "minibatch_in", ":", "sched", ".", "minibatch", "}", ")", "\n", "cur_nimg", "+=", "sched", ".", "minibatch", "\n", "", "tflib", ".", "run", "(", "[", "G_train_op", "]", ",", "{", "lod_in", ":", "sched", ".", "lod", ",", "lrate_in", ":", "sched", ".", "G_lrate", ",", "minibatch_in", ":", "sched", ".", "minibatch", "}", ")", "\n", "\n", "# Perform maintenance tasks once per tick.", "\n", "", "done", "=", "(", "cur_nimg", ">=", "total_kimg", "*", "1000", ")", "\n", "if", "cur_nimg", ">=", "tick_start_nimg", "+", "sched", ".", "tick_kimg", "*", "1000", "or", "done", ":", "\n", "            ", "cur_tick", "+=", "1", "\n", "tick_kimg", "=", "(", "cur_nimg", "-", "tick_start_nimg", ")", "/", "1000.0", "\n", "tick_start_nimg", "=", "cur_nimg", "\n", "tick_time", "=", "ctx", ".", "get_time_since_last_update", "(", ")", "\n", "total_time", "=", "ctx", ".", "get_time_since_start", "(", ")", "+", "resume_time", "\n", "\n", "# Report progress.", "\n", "print", "(", "'tick %-5d kimg %-8.1f lod %-5.2f minibatch %-4d time %-12s sec/tick %-7.1f sec/kimg %-7.2f maintenance %-6.1f gpumem %-4.1f'", "%", "(", "\n", "autosummary", "(", "'Progress/tick'", ",", "cur_tick", ")", ",", "\n", "autosummary", "(", "'Progress/kimg'", ",", "cur_nimg", "/", "1000.0", ")", ",", "\n", "autosummary", "(", "'Progress/lod'", ",", "sched", ".", "lod", ")", ",", "\n", "autosummary", "(", "'Progress/minibatch'", ",", "sched", ".", "minibatch", ")", ",", "\n", "dnnlib", ".", "util", ".", "format_time", "(", "autosummary", "(", "'Timing/total_sec'", ",", "total_time", ")", ")", ",", "\n", "autosummary", "(", "'Timing/sec_per_tick'", ",", "tick_time", ")", ",", "\n", "autosummary", "(", "'Timing/sec_per_kimg'", ",", "tick_time", "/", "tick_kimg", ")", ",", "\n", "autosummary", "(", "'Timing/maintenance_sec'", ",", "maintenance_time", ")", ",", "\n", "autosummary", "(", "'Resources/peak_gpu_mem_gb'", ",", "peak_gpu_mem_op", ".", "eval", "(", ")", "/", "2", "**", "30", ")", ")", ")", "\n", "autosummary", "(", "'Timing/total_hours'", ",", "total_time", "/", "(", "60.0", "*", "60.0", ")", ")", "\n", "autosummary", "(", "'Timing/total_days'", ",", "total_time", "/", "(", "24.0", "*", "60.0", "*", "60.0", ")", ")", "\n", "\n", "# Save snapshots.", "\n", "if", "cur_tick", "%", "image_snapshot_ticks", "==", "0", "or", "done", ":", "\n", "                ", "grid_fakes", "=", "Gs", ".", "run", "(", "grid_latents", ",", "grid_labels", ",", "is_validation", "=", "True", ",", "minibatch_size", "=", "sched", ".", "minibatch", "//", "submit_config", ".", "num_gpus", ")", "\n", "misc", ".", "save_image_grid", "(", "grid_fakes", ",", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "'fakes%06d.png'", "%", "(", "cur_nimg", "//", "1000", ")", ")", ",", "drange", "=", "drange_net", ",", "grid_size", "=", "grid_size", ")", "\n", "", "if", "cur_tick", "%", "network_snapshot_ticks", "==", "0", "or", "done", "or", "cur_tick", "==", "1", ":", "\n", "                ", "pkl", "=", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "'network-snapshot-%06d.pkl'", "%", "(", "cur_nimg", "//", "1000", ")", ")", "\n", "misc", ".", "save_pkl", "(", "(", "G", ",", "D", ",", "Gs", ")", ",", "pkl", ")", "\n", "metrics", ".", "run", "(", "pkl", ",", "run_dir", "=", "submit_config", ".", "run_dir", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ",", "tf_config", "=", "tf_config", ")", "\n", "\n", "# Update summaries and RunContext.", "\n", "", "metrics", ".", "update_autosummaries", "(", ")", "\n", "tflib", ".", "autosummary", ".", "save_summaries", "(", "summary_log", ",", "cur_nimg", ")", "\n", "ctx", ".", "update", "(", "'%.2f'", "%", "sched", ".", "lod", ",", "cur_epoch", "=", "cur_nimg", "//", "1000", ",", "max_epoch", "=", "total_kimg", ")", "\n", "maintenance_time", "=", "ctx", ".", "get_last_update_interval", "(", ")", "-", "tick_time", "\n", "\n", "# Write final results.", "\n", "", "", "misc", ".", "save_pkl", "(", "(", "G", ",", "D", ",", "Gs", ")", ",", "os", ".", "path", ".", "join", "(", "submit_config", ".", "run_dir", ",", "'network-final.pkl'", ")", ")", "\n", "summary_log", ".", "close", "(", ")", "\n", "\n", "ctx", ".", "close", "(", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.__init__": [[20, 121], ["dict", "dict", "os.path.isdir", "sorted", "max", "int", "all", "all", "all", "all", "numpy.zeros", "glob.glob", "len", "tensorflow.python_io.TFRecordOptions", "tensorflow.python_io.tf_record_iterator", "sorted", "len", "numpy.log2", "numpy.load", "tensorflow.name_scope", "tensorflow.device", "tensorflow.placeholder", "dnnlib.create_var_with_large_initial_value", "dnnlib.create_var_with_large_initial_value", "tensorflow.data.Dataset.from_tensor_slices", "zip", "tensorflow.data.Iterator.from_structure", "os.path.join", "tfr_shapes.append", "glob.glob", "os.path.isfile", "os.path.join", "os.path.isfile", "int", "tensorflow.data.TFRecordDataset", "dset.prefetch.prefetch.map", "tensorflow.data.Dataset.zip", "dset.prefetch.prefetch.batch", "dataset.TFRecordDataset._tf_iterator.make_initializer", "os.path.join", "numpy.log2", "zip", "range", "dset.prefetch.prefetch.take", "numpy.prod", "dset.prefetch.prefetch.shuffle", "dset.prefetch.prefetch.repeat", "dset.prefetch.prefetch.prefetch", "dataset.TFRecordDataset._tf_datasets.items", "dataset.TFRecordDataset.parse_tfrecord_np", "numpy.dtype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_var_with_large_initial_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.create_var_with_large_initial_value", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.parse_tfrecord_np"], ["\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "epoch_size", "\n", "\n", "\n", "", "", "class", "NoiseDataModule", "(", "pl", ".", "LightningDataModule", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "train_size", "=", "1024", ",", "val_size", "=", "1024", ",", "latent_size", "=", "512", ",", "batch_size", "=", "64", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_ds", "=", "NoiseDataset", "(", "train_size", ",", "latent_size", ")", "\n", "self", ".", "val_ds", "=", "NoiseDataset", "(", "val_size", ",", "latent_size", ",", "fixed", "=", "True", ")", "\n", "\n", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "train_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n", "\n", "", "def", "val_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "val_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.configure": [[126, 133], ["int", "numpy.floor", "dataset.TFRecordDataset._tf_init_ops[].run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.get_minibatch_tf": [[135, 137], ["dataset.TFRecordDataset._tf_iterator.get_next"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.get_minibatch_np": [[139, 145], ["dataset.TFRecordDataset.configure", "tensorflow.name_scope", "dnnlib.run", "dnnlib.run", "dataset.TFRecordDataset.get_minibatch_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.get_random_labels_tf": [[147, 153], ["tensorflow.name_scope", "tensorflow.zeros", "tensorflow.device", "tensorflow.gather", "tensorflow.random_uniform"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.get_random_labels_np": [[155, 159], ["numpy.zeros", "numpy.random.randint"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.__init__": [[172, 189], ["int", "numpy.log2", "tensorflow.name_scope", "tensorflow.Variable", "tensorflow.Variable", "numpy.int32", "numpy.int32"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure": [[190, 194], ["int", "dnnlib.set_vars", "dnnlib.set_vars", "numpy.floor"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf": [[195, 202], ["tensorflow.name_scope", "tensorflow.cast", "dataset.SyntheticDataset._generate_images", "dataset.SyntheticDataset._generate_labels", "tensorflow.cast"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_images", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_labels"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np": [[203, 208], ["dataset.SyntheticDataset.configure", "dnnlib.run", "dnnlib.run", "dataset.SyntheticDataset.get_minibatch_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf": [[209, 212], ["tensorflow.name_scope", "dataset.SyntheticDataset._generate_labels"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_labels"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_np": [[213, 218], ["dataset.SyntheticDataset.configure", "dnnlib.run", "dnnlib.run", "dataset.SyntheticDataset.get_random_labels_tf"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.configure", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_images": [[219, 221], ["tensorflow.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset._generate_labels": [[222, 224], ["tensorflow.zeros"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.parse_tfrecord_tf": [[20, 26], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "function", ["None"], ["\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "epoch_size", "\n", "\n", "\n", "", "", "class", "NoiseDataModule", "(", "pl", ".", "LightningDataModule", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "train_size", "=", "1024", ",", "val_size", "=", "1024", ",", "latent_size", "=", "512", ",", "batch_size", "=", "64", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.parse_tfrecord_np": [[27, 33], ["tensorflow.train.Example", "tf.train.Example.ParseFromString", "numpy.fromstring().reshape", "numpy.fromstring"], "function", ["None"], ["    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_ds", "=", "NoiseDataset", "(", "train_size", ",", "latent_size", ")", "\n", "self", ".", "val_ds", "=", "NoiseDataset", "(", "val_size", ",", "latent_size", ",", "fixed", "=", "True", ")", "\n", "\n", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "    ", "return", "DataLoader", "(", "self", ".", "train_ds", ",", "batch_size", "=", "self", ".", "batch_size", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset": [[181, 198], ["dict", "print", "dnnlib.util.get_obj_by_name", "dnnlib.util.get_obj_by_name", "print", "print", "print", "os.path.join", "numpy.int32().tolist", "numpy.int32"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.get_obj_by_name"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32": [[17, 22], ["tuple", "isinstance", "len", "tensorflow.cast", "len"], "function", ["None"], ["\n", "", "class", "FocalLoss", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "binary", "=", "False", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "# \u6307\u6570", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_wgan": [[92, 100], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "D.get_output_for"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_wgan": [[101, 114], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.name_scope", "dnnlib.tflib.autosummary.autosummary", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_wgan_gp": [[119, 143], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.name_scope", "dnnlib.tflib.autosummary.autosummary", "tensorflow.name_scope", "tensorflow.random_uniform", "dnnlib.lerp", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "tensorflow.sqrt", "dnnlib.tflib.autosummary.autosummary", "tensorflow.square", "tensorflow.square", "tensorflow.cast", "tensorflow.gradients", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_hinge": [[83, 92], ["tensorflow.random_normal", "G.get_output_for", "loss.fp32", "loss.fp32", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "D.get_output_for", "D.get_output_for", "tensorflow.maximum", "tensorflow.maximum"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_hinge_gp": [[93, 117], ["tensorflow.random_normal", "G.get_output_for", "loss.fp32", "loss.fp32", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "D.get_output_for", "D.get_output_for", "tensorflow.maximum", "tensorflow.maximum", "tensorflow.name_scope", "tensorflow.random_uniform", "dnnlib.lerp", "loss.fp32", "dnnlib.tflib.autosummary.autosummary", "opt.apply_loss_scaling", "opt.undo_loss_scaling", "tensorflow.sqrt", "dnnlib.tflib.autosummary.autosummary", "tensorflow.square", "tensorflow.cast", "D.get_output_for", "tensorflow.reduce_sum", "loss.fp32", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.gradients"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_logistic_saturating": [[123, 130], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "loss.fp32", "D.get_output_for", "tensorflow.nn.softplus"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_logistic_nonsaturating": [[131, 138], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "loss.fp32", "tensorflow.nn.softplus", "D.get_output_for"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_logistic": [[36, 47], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.nn.softplus", "tensorflow.nn.softplus"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["\n", "\n", "", "", "", "def", "segloss", "(", "segs", ",", "label", ",", "loss_fn", ")", ":", "\n", "  ", "\"\"\"The final version of loss.\"\"\"", "\n", "segloss", "=", "[", "]", "\n", "size", "=", "label", ".", "size", "(", "2", ")", "\n", "for", "seg", "in", "segs", ":", "\n", "    ", "seg", "=", "op", ".", "bu", "(", "seg", ",", "size", ")", "if", "seg", ".", "size", "(", "2", ")", "!=", "size", "else", "seg", "\n", "segloss", ".", "append", "(", "loss_fn", "(", "seg", ",", "label", ")", ")", "\n", "", "return", "segloss", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_logistic_simplegp": [[150, 176], ["tensorflow.random_normal", "G.get_output_for", "loss.fp32", "loss.fp32", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "D.get_output_for", "D.get_output_for", "tensorflow.name_scope", "opt.apply_loss_scaling", "opt.undo_loss_scaling", "tensorflow.reduce_sum", "dnnlib.tflib.autosummary.autosummary", "tensorflow.name_scope", "opt.apply_loss_scaling", "opt.undo_loss_scaling", "tensorflow.reduce_sum", "dnnlib.tflib.autosummary.autosummary", "tensorflow.reduce_sum", "loss.fp32", "tensorflow.square", "tensorflow.reduce_sum", "loss.fp32", "tensorflow.square", "tensorflow.gradients", "tensorflow.gradients"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.undo_loss_scaling", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.fp32"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan._blur2d": [[21, 49], ["numpy.array", "numpy.tile", "tensorflow.cast", "tensorflow.constant", "tensorflow.nn.depthwise_conv2d", "tensorflow.cast", "all", "isinstance", "numpy.sum", "int"], "function", ["None"], ["\n", "def", "_blur2d", "(", "x", ",", "f", "=", "[", "1", ",", "2", ",", "1", "]", ",", "normalize", "=", "True", ",", "flip", "=", "False", ",", "stride", "=", "1", ")", ":", "\n", "    ", "assert", "x", ".", "shape", ".", "ndims", "==", "4", "and", "all", "(", "dim", ".", "value", "is", "not", "None", "for", "dim", "in", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "assert", "isinstance", "(", "stride", ",", "int", ")", "and", "stride", ">=", "1", "\n", "\n", "# Finalize filter kernel.", "\n", "f", "=", "np", ".", "array", "(", "f", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "f", ".", "ndim", "==", "1", ":", "\n", "        ", "f", "=", "f", "[", ":", ",", "np", ".", "newaxis", "]", "*", "f", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "assert", "f", ".", "ndim", "==", "2", "\n", "if", "normalize", ":", "\n", "        ", "f", "/=", "np", ".", "sum", "(", "f", ")", "\n", "", "if", "flip", ":", "\n", "        ", "f", "=", "f", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", "", "f", "=", "f", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", "\n", "f", "=", "np", ".", "tile", "(", "f", ",", "[", "1", ",", "1", ",", "int", "(", "x", ".", "shape", "[", "1", "]", ")", ",", "1", "]", ")", "\n", "\n", "# No-op => early exit.", "\n", "if", "f", ".", "shape", "==", "(", "1", ",", "1", ")", "and", "f", "[", "0", ",", "0", "]", "==", "1", ":", "\n", "        ", "return", "x", "\n", "\n", "# Convolve using depthwise_conv2d.", "\n", "", "orig_dtype", "=", "x", ".", "dtype", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "# tf.nn.depthwise_conv2d() doesn't support fp16", "\n", "f", "=", "tf", ".", "constant", "(", "f", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'filter'", ")", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", "\n", "x", "=", "tf", ".", "nn", ".", "depthwise_conv2d", "(", "x", ",", "f", ",", "strides", "=", "strides", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "orig_dtype", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan._upscale2d": [[50, 68], ["tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape", "all", "isinstance"], "function", ["None"], ["\n", "", "def", "_upscale2d", "(", "x", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "    ", "assert", "x", ".", "shape", ".", "ndims", "==", "4", "and", "all", "(", "dim", ".", "value", "is", "not", "None", "for", "dim", "in", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "\n", "# Apply gain.", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "*=", "gain", "\n", "\n", "# No-op => early exit.", "\n", "", "if", "factor", "==", "1", ":", "\n", "        ", "return", "x", "\n", "\n", "# Upscale using tf.tile().", "\n", "", "s", "=", "x", ".", "shape", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", "]", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan._downscale2d": [[69, 90], ["tensorflow.nn.avg_pool", "all", "isinstance", "networks_stylegan._blur2d", "numpy.sqrt"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan._blur2d"], ["\n", "", "def", "_downscale2d", "(", "x", ",", "factor", "=", "2", ",", "gain", "=", "1", ")", ":", "\n", "    ", "assert", "x", ".", "shape", ".", "ndims", "==", "4", "and", "all", "(", "dim", ".", "value", "is", "not", "None", "for", "dim", "in", "x", ".", "shape", "[", "1", ":", "]", ")", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "\n", "# 2x2, float32 => downscale using _blur2d().", "\n", "if", "factor", "==", "2", "and", "x", ".", "dtype", "==", "tf", ".", "float32", ":", "\n", "        ", "f", "=", "[", "np", ".", "sqrt", "(", "gain", ")", "/", "factor", "]", "*", "factor", "\n", "return", "_blur2d", "(", "x", ",", "f", "=", "f", ",", "normalize", "=", "False", ",", "stride", "=", "factor", ")", "\n", "\n", "# Apply gain.", "\n", "", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "*=", "gain", "\n", "\n", "# No-op => early exit.", "\n", "", "if", "factor", "==", "1", ":", "\n", "        ", "return", "x", "\n", "\n", "# Large factor => downscale using tf.nn.avg_pool().", "\n", "# NOTE: Requires tf_config['graph_options.place_pruned_graph']=True to work.", "\n", "", "ksize", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "return", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.blur2d": [[95, 106], ["tensorflow.variable_scope", "networks_stylegan.blur2d.func"], "function", ["None"], ["\n", "", "def", "blur2d", "(", "x", ",", "f", "=", "[", "1", ",", "2", ",", "1", "]", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Blur2D'", ")", ":", "\n", "        ", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "            ", "y", "=", "_blur2d", "(", "x", ",", "f", ",", "normalize", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "                ", "dx", "=", "_blur2d", "(", "dy", ",", "f", ",", "normalize", ",", "flip", "=", "True", ")", "\n", "return", "dx", ",", "lambda", "ddx", ":", "_blur2d", "(", "ddx", ",", "f", ",", "normalize", ")", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.upscale2d": [[107, 118], ["tensorflow.variable_scope", "networks_stylegan.blur2d.func"], "function", ["None"], ["\n", "", "", "def", "upscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Upscale2D'", ")", ":", "\n", "        ", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "            ", "y", "=", "_upscale2d", "(", "x", ",", "factor", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "                ", "dx", "=", "_downscale2d", "(", "dy", ",", "factor", ",", "gain", "=", "factor", "**", "2", ")", "\n", "return", "dx", ",", "lambda", "ddx", ":", "_upscale2d", "(", "ddx", ",", "factor", ")", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.downscale2d": [[119, 130], ["tensorflow.variable_scope", "networks_stylegan.blur2d.func"], "function", ["None"], ["\n", "", "", "def", "downscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'Downscale2D'", ")", ":", "\n", "        ", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "            ", "y", "=", "_downscale2d", "(", "x", ",", "factor", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "                ", "dx", "=", "_upscale2d", "(", "dy", ",", "factor", ",", "gain", "=", "1", "/", "factor", "**", "2", ")", "\n", "return", "dx", ",", "lambda", "ddx", ":", "_downscale2d", "(", "ddx", ",", "factor", ")", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.get_weight": [[134, 149], ["numpy.sqrt", "numpy.prod", "tensorflow.initializers.random_normal", "numpy.sqrt", "tensorflow.get_variable"], "function", ["None"], ["\n", "", "", "def", "get_weight", "(", "shape", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ",", "lrmul", "=", "1", ")", ":", "\n", "    ", "fan_in", "=", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", "# [kernel, kernel, fmaps_in, fmaps_out] or [in, out]", "\n", "he_std", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "# He init", "\n", "\n", "# Equalized learning rate and custom learning rate multiplier.", "\n", "if", "use_wscale", ":", "\n", "        ", "init_std", "=", "1.0", "/", "lrmul", "\n", "runtime_coef", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "        ", "init_std", "=", "he_std", "/", "lrmul", "\n", "runtime_coef", "=", "lrmul", "\n", "\n", "# Create variable.", "\n", "", "init", "=", "tf", ".", "initializers", ".", "random_normal", "(", "0", ",", "init_std", ")", "\n", "return", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "shape", ",", "initializer", "=", "init", ")", "*", "runtime_coef", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.dense": [[153, 159], ["networks_stylegan.get_weight", "tensorflow.cast", "tensorflow.matmul", "len", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["\n", "", "def", "dense", "(", "x", ",", "fmaps", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "[", "d", ".", "value", "for", "d", "in", "x", ".", "shape", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "", "w", "=", "get_weight", "(", "[", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "**", "kwargs", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.conv2d": [[163, 168], ["networks_stylegan.get_weight", "tensorflow.cast", "tensorflow.nn.conv2d"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["\n", "", "def", "conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "**", "kwargs", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.upscale2d_conv2d": [[173, 191], ["networks_stylegan.get_weight", "tensorflow.transpose", "tensorflow.pad", "tensorflow.add_n", "tensorflow.cast", "tensorflow.nn.conv2d_transpose", "networks_stylegan.conv2d", "networks_stylegan.upscale2d", "tensorflow.shape", "min"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.upscale2d"], ["\n", "", "def", "upscale2d_conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "fused_scale", "=", "'auto'", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "assert", "fused_scale", "in", "[", "True", ",", "False", ",", "'auto'", "]", "\n", "if", "fused_scale", "==", "'auto'", ":", "\n", "        ", "fused_scale", "=", "min", "(", "x", ".", "shape", "[", "2", ":", "]", ")", "*", "2", ">=", "128", "\n", "\n", "# Not fused => call the individual ops directly.", "\n", "", "if", "not", "fused_scale", ":", "\n", "        ", "return", "conv2d", "(", "upscale2d", "(", "x", ")", ",", "fmaps", ",", "kernel", ",", "**", "kwargs", ")", "\n", "\n", "# Fused => perform both ops simultaneously using tf.nn.conv2d_transpose().", "\n", "", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "**", "kwargs", ")", "\n", "w", "=", "tf", ".", "transpose", "(", "w", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "# [kernel, kernel, fmaps_out, fmaps_in]", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "os", "=", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "fmaps", ",", "x", ".", "shape", "[", "2", "]", "*", "2", ",", "x", ".", "shape", "[", "3", "]", "*", "2", "]", "\n", "return", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "os", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.conv2d_downscale2d": [[192, 208], ["networks_stylegan.get_weight", "tensorflow.pad", "tensorflow.cast", "tensorflow.nn.conv2d", "networks_stylegan.downscale2d", "tensorflow.add_n", "min", "networks_stylegan.conv2d"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.downscale2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["\n", "", "def", "conv2d_downscale2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "fused_scale", "=", "'auto'", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "assert", "fused_scale", "in", "[", "True", ",", "False", ",", "'auto'", "]", "\n", "if", "fused_scale", "==", "'auto'", ":", "\n", "        ", "fused_scale", "=", "min", "(", "x", ".", "shape", "[", "2", ":", "]", ")", ">=", "128", "\n", "\n", "# Not fused => call the individual ops directly.", "\n", "", "if", "not", "fused_scale", ":", "\n", "        ", "return", "downscale2d", "(", "conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "**", "kwargs", ")", ")", "\n", "\n", "# Fused => perform both ops simultaneously using tf.nn.conv2d().", "\n", "", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "**", "kwargs", ")", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "*", "0.25", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.apply_bias": [[212, 218], ["tensorflow.cast", "tensorflow.get_variable", "len", "tensorflow.reshape", "tensorflow.initializers.zeros"], "function", ["None"], ["\n", "", "def", "apply_bias", "(", "x", ",", "lrmul", "=", "1", ")", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "*", "lrmul", "\n", "b", "=", "tf", ".", "cast", "(", "b", ",", "x", ".", "dtype", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "        ", "return", "x", "+", "b", "\n", "", "return", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.leaky_relu": [[222, 234], ["tensorflow.variable_scope", "tensorflow.constant", "networks_stylegan.blur2d.func"], "function", ["None"], ["\n", "", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'LeakyReLU'", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "constant", "(", "alpha", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'alpha'", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "            ", "y", "=", "tf", ".", "maximum", "(", "x", ",", "x", "*", "alpha", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "                ", "dx", "=", "tf", ".", "where", "(", "y", ">=", "0", ",", "dy", ",", "dy", "*", "alpha", ")", "\n", "return", "dx", ",", "lambda", "ddx", ":", "tf", ".", "where", "(", "y", ">=", "0", ",", "ddx", ",", "ddx", "*", "alpha", ")", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.pixel_norm": [[238, 242], ["tensorflow.variable_scope", "tensorflow.constant", "tensorflow.rsqrt", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["\n", "", "", "def", "pixel_norm", "(", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'PixelNorm'", ")", ":", "\n", "        ", "epsilon", "=", "tf", ".", "constant", "(", "epsilon", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'epsilon'", ")", "\n", "return", "x", "*", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.instance_norm": [[246, 256], ["len", "tensorflow.variable_scope", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.constant", "tensorflow.rsqrt", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["\n", "", "", "def", "instance_norm", "(", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "# NCHW", "\n", "with", "tf", ".", "variable_scope", "(", "'InstanceNorm'", ")", ":", "\n", "        ", "orig_dtype", "=", "x", ".", "dtype", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "tf", ".", "float32", ")", "\n", "x", "-=", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "\n", "epsilon", "=", "tf", ".", "constant", "(", "epsilon", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'epsilon'", ")", "\n", "x", "*=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "[", "2", ",", "3", "]", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n", "x", "=", "tf", ".", "cast", "(", "x", ",", "orig_dtype", ")", "\n", "return", "x", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.style_mod": [[260, 265], ["tensorflow.variable_scope", "networks_stylegan.apply_bias", "tensorflow.reshape", "networks_stylegan.dense", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.apply_bias", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense"], ["\n", "", "", "def", "style_mod", "(", "x", ",", "dlatent", ",", "**", "kwargs", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'StyleMod'", ")", ":", "\n", "        ", "style", "=", "apply_bias", "(", "dense", "(", "dlatent", ",", "fmaps", "=", "x", ".", "shape", "[", "1", "]", "*", "2", ",", "gain", "=", "1", ",", "**", "kwargs", ")", ")", "\n", "style", "=", "tf", ".", "reshape", "(", "style", ",", "[", "-", "1", ",", "2", ",", "x", ".", "shape", "[", "1", "]", "]", "+", "[", "1", "]", "*", "(", "len", "(", "x", ".", "shape", ")", "-", "2", ")", ")", "\n", "return", "x", "*", "(", "style", "[", ":", ",", "0", "]", "+", "1", ")", "+", "style", "[", ":", ",", "1", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.apply_noise": [[269, 278], ["len", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.random_normal", "tensorflow.cast", "tensorflow.initializers.zeros", "tensorflow.reshape", "tensorflow.cast", "tensorflow.shape"], "function", ["None"], ["\n", "", "", "def", "apply_noise", "(", "x", ",", "noise_var", "=", "None", ",", "randomize_noise", "=", "True", ")", ":", "\n", "    ", "assert", "len", "(", "x", ".", "shape", ")", "==", "4", "# NCHW", "\n", "with", "tf", ".", "variable_scope", "(", "'Noise'", ")", ":", "\n", "        ", "if", "noise_var", "is", "None", "or", "randomize_noise", ":", "\n", "            ", "noise", "=", "tf", ".", "random_normal", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "tf", ".", "cast", "(", "noise_var", ",", "x", ".", "dtype", ")", "\n", "", "weight", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", ".", "value", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "return", "x", "+", "noise", "*", "tf", ".", "reshape", "(", "tf", ".", "cast", "(", "weight", ",", "x", ".", "dtype", ")", ",", "[", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.minibatch_stddev_layer": [[282, 296], ["tensorflow.variable_scope", "tensorflow.minimum", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.tile", "tensorflow.concat", "tensorflow.square", "tensorflow.shape"], "function", ["None"], ["\n", "", "", "def", "minibatch_stddev_layer", "(", "x", ",", "group_size", "=", "4", ",", "num_new_features", "=", "1", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "        ", "group_size", "=", "tf", ".", "minimum", "(", "group_size", ",", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "# Minibatch must be divisible by (or smaller than) group_size.", "\n", "s", "=", "x", ".", "shape", "# [NCHW]  Input shape.", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "group_size", ",", "-", "1", ",", "num_new_features", ",", "s", "[", "1", "]", "//", "num_new_features", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [GMncHW] Split minibatch into M groups of size G. Split channels into n channel groups c.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "# [GMncHW] Cast to FP32.", "\n", "y", "-=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [GMncHW] Subtract mean over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y", ")", ",", "axis", "=", "0", ")", "# [MncHW]  Calc variance over group.", "\n", "y", "=", "tf", ".", "sqrt", "(", "y", "+", "1e-8", ")", "# [MncHW]  Calc stddev over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", "# [Mn111]  Take average over fmaps and pixels.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", "]", ")", "# [Mn11] Split channels into c channel groups", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "x", ".", "dtype", ")", "# [Mn11]  Cast back to original data type.", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "group_size", ",", "1", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [NnHW]  Replicate over group and pixels.", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "# [NCHW]  Append as new fmap.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.G_style": [[301, 379], ["dnnlib.EasyDict", "dnnlib.EasyDict", "isinstance", "tensorflow.get_variable", "tensorflow.get_variable", "components.mapping.get_output_for", "tensorflow.identity", "dnnlib.Network", "dnnlib.Network", "tensorflow.control_dependencies", "components.synthesis.get_output_for", "numpy.float32", "tensorflow.initializers.zeros", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.assign", "tensorflow.name_scope", "tensorflow.random_normal", "components.mapping.get_output_for", "tensorflow.cond", "tensorflow.where", "tensorflow.variable_scope", "numpy.ones", "tensorflow.where", "dnnlib.lerp", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.lerp", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.shape", "numpy.arange", "tensorflow.broadcast_to", "numpy.arange", "tensorflow.assign", "tensorflow.cast", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.shape", "components.synthesis.find_var"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.find_var"], ["\n", "", "", "def", "G_style", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "truncation_psi", "=", "0.7", ",", "# Style strength multiplier for the truncation trick. None = disable.", "\n", "truncation_cutoff", "=", "8", ",", "# Number of layers for which to apply the truncation trick. None = disable.", "\n", "truncation_psi_val", "=", "None", ",", "# Value for truncation_psi to use during validation.", "\n", "truncation_cutoff_val", "=", "None", ",", "# Value for truncation_cutoff to use during validation.", "\n", "dlatent_avg_beta", "=", "0.995", ",", "# Decay for tracking the moving average of W during training. None = disable.", "\n", "style_mixing_prob", "=", "0.9", ",", "# Probability of mixing styles during training. None = disable.", "\n", "is_training", "=", "False", ",", "# Network is under training? Enables and disables specific features.", "\n", "is_validation", "=", "False", ",", "# Network is under validation? Chooses which value to use for truncation_psi.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "components", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "# Container for sub-networks. Retained between calls.", "\n", "**", "kwargs", ")", ":", "# Arguments for sub-networks (G_mapping and G_synthesis).", "\n", "\n", "# Validate arguments.", "\n", "    ", "assert", "not", "is_training", "or", "not", "is_validation", "\n", "assert", "isinstance", "(", "components", ",", "dnnlib", ".", "EasyDict", ")", "\n", "if", "is_validation", ":", "\n", "        ", "truncation_psi", "=", "truncation_psi_val", "\n", "truncation_cutoff", "=", "truncation_cutoff_val", "\n", "", "if", "is_training", "or", "(", "truncation_psi", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "truncation_psi", ")", "and", "truncation_psi", "==", "1", ")", ":", "\n", "        ", "truncation_psi", "=", "None", "\n", "", "if", "is_training", "or", "(", "truncation_cutoff", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "truncation_cutoff", ")", "and", "truncation_cutoff", "<=", "0", ")", ":", "\n", "        ", "truncation_cutoff", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "dlatent_avg_beta", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "dlatent_avg_beta", ")", "and", "dlatent_avg_beta", "==", "1", ")", ":", "\n", "        ", "dlatent_avg_beta", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "style_mixing_prob", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "style_mixing_prob", ")", "and", "style_mixing_prob", "<=", "0", ")", ":", "\n", "        ", "style_mixing_prob", "=", "None", "\n", "\n", "# Setup components.", "\n", "", "if", "'synthesis'", "not", "in", "components", ":", "\n", "        ", "components", ".", "synthesis", "=", "tflib", ".", "Network", "(", "'G_synthesis'", ",", "func_name", "=", "G_synthesis", ",", "**", "kwargs", ")", "\n", "", "num_layers", "=", "components", ".", "synthesis", ".", "input_shape", "[", "1", "]", "\n", "dlatent_size", "=", "components", ".", "synthesis", ".", "input_shape", "[", "2", "]", "\n", "if", "'mapping'", "not", "in", "components", ":", "\n", "        ", "components", ".", "mapping", "=", "tflib", ".", "Network", "(", "'G_mapping'", ",", "func_name", "=", "G_mapping", ",", "dlatent_broadcast", "=", "num_layers", ",", "**", "kwargs", ")", "\n", "\n", "# Setup variables.", "\n", "", "lod_in", "=", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "dlatent_avg", "=", "tf", ".", "get_variable", "(", "'dlatent_avg'", ",", "shape", "=", "[", "dlatent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Evaluate mapping network.", "\n", "dlatents", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents_in", ",", "labels_in", ",", "**", "kwargs", ")", "\n", "\n", "# Update moving average of W.", "\n", "if", "dlatent_avg_beta", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'DlatentAvg'", ")", ":", "\n", "            ", "batch_avg", "=", "tf", ".", "reduce_mean", "(", "dlatents", "[", ":", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "update_op", "=", "tf", ".", "assign", "(", "dlatent_avg", ",", "tflib", ".", "lerp", "(", "batch_avg", ",", "dlatent_avg", ",", "dlatent_avg_beta", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "dlatents", "=", "tf", ".", "identity", "(", "dlatents", ")", "\n", "\n", "# Perform style mixing regularization.", "\n", "", "", "", "if", "style_mixing_prob", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "'StyleMix'", ")", ":", "\n", "            ", "latents2", "=", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "latents_in", ")", ")", "\n", "dlatents2", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents2", ",", "labels_in", ",", "**", "kwargs", ")", "\n", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "cur_layers", "=", "num_layers", "-", "tf", ".", "cast", "(", "lod_in", ",", "tf", ".", "int32", ")", "*", "2", "\n", "mixing_cutoff", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "random_uniform", "(", "[", "]", ",", "0.0", ",", "1.0", ")", "<", "style_mixing_prob", ",", "\n", "lambda", ":", "tf", ".", "random_uniform", "(", "[", "]", ",", "1", ",", "cur_layers", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "lambda", ":", "cur_layers", ")", "\n", "dlatents", "=", "tf", ".", "where", "(", "tf", ".", "broadcast_to", "(", "layer_idx", "<", "mixing_cutoff", ",", "tf", ".", "shape", "(", "dlatents", ")", ")", ",", "dlatents", ",", "dlatents2", ")", "\n", "\n", "# Apply truncation trick.", "\n", "", "", "if", "truncation_psi", "is", "not", "None", "and", "truncation_cutoff", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Truncation'", ")", ":", "\n", "            ", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "ones", "=", "np", ".", "ones", "(", "layer_idx", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "coefs", "=", "tf", ".", "where", "(", "layer_idx", "<", "truncation_cutoff", ",", "truncation_psi", "*", "ones", ",", "ones", ")", "\n", "dlatents", "=", "tflib", ".", "lerp", "(", "dlatent_avg", ",", "dlatents", ",", "coefs", ")", "\n", "\n", "# Evaluate synthesis network.", "\n", "", "", "with", "tf", ".", "control_dependencies", "(", "[", "tf", ".", "assign", "(", "components", ".", "synthesis", ".", "find_var", "(", "'lod'", ")", ",", "lod_in", ")", "]", ")", ":", "\n", "        ", "images_out", "=", "components", ".", "synthesis", ".", "get_output_for", "(", "dlatents", ",", "force_clean_graph", "=", "is_template_graph", ",", "**", "kwargs", ")", "\n", "", "return", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.G_mapping": [[383, 435], ["tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "networks_stylegan.pixel_norm", "tensorflow.as_dtype", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.concat", "tensorflow.variable_scope", "networks_stylegan.dense", "networks_stylegan.apply_bias", "act", "tensorflow.variable_scope", "tensorflow.tile", "numpy.sqrt", "numpy.sqrt", "tensorflow.cast", "tensorflow.initializers.random_normal"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.pixel_norm", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.apply_bias"], ["\n", "", "def", "G_mapping", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "latent_size", "=", "512", ",", "# Latent vector (Z) dimensionality.", "\n", "label_size", "=", "0", ",", "# Label dimensionality, 0 if no labels.", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "dlatent_broadcast", "=", "None", ",", "# Output disentangled latent (W) as [minibatch, dlatent_size] or [minibatch, dlatent_broadcast, dlatent_size].", "\n", "mapping_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "mapping_fmaps", "=", "512", ",", "# Number of activations in the mapping layers.", "\n", "mapping_lrmul", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "mapping_nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu'.", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "normalize_latents", "=", "True", ",", "# Normalize latent vectors (Z) before feeding them to the mapping layers?", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "tf", ".", "nn", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "'lrelu'", ":", "(", "leaky_relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "mapping_nonlinearity", "]", "\n", "\n", "# Inputs.", "\n", "latents_in", ".", "set_shape", "(", "[", "None", ",", "latent_size", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "latents_in", "=", "tf", ".", "cast", "(", "latents_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "x", "=", "latents_in", "\n", "\n", "# Embed labels and concatenate them with latents.", "\n", "if", "label_size", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LabelConcat'", ")", ":", "\n", "            ", "w", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "[", "label_size", ",", "latent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "labels_in", ",", "tf", ".", "cast", "(", "w", ",", "dtype", ")", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Normalize latents.", "\n", "", "", "if", "normalize_latents", ":", "\n", "        ", "x", "=", "pixel_norm", "(", "x", ")", "\n", "\n", "# Mapping layers.", "\n", "", "for", "layer_idx", "in", "range", "(", "mapping_layers", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Dense%d'", "%", "layer_idx", ")", ":", "\n", "            ", "fmaps", "=", "dlatent_size", "if", "layer_idx", "==", "mapping_layers", "-", "1", "else", "mapping_fmaps", "\n", "x", "=", "dense", "(", "x", ",", "fmaps", "=", "fmaps", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "mapping_lrmul", ")", "\n", "x", "=", "apply_bias", "(", "x", ",", "lrmul", "=", "mapping_lrmul", ")", "\n", "x", "=", "act", "(", "x", ")", "\n", "\n", "# Broadcast.", "\n", "", "", "if", "dlatent_broadcast", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Broadcast'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "tile", "(", "x", "[", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "dlatent_broadcast", ",", "1", "]", ")", "\n", "\n", "# Output.", "\n", "", "", "assert", "x", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "x", ",", "name", "=", "'dlatents_out'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.G_synthesis": [[439, 559], ["int", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "min", "tensorflow.get_variable", "range", "networks_stylegan.apply_bias", "act", "tensorflow.variable_scope", "range", "networks_stylegan.G_synthesis.torgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.apply_bias"], ["\n", "", "def", "G_synthesis", "(", "\n", "dlatents_in", ",", "# Input: Disentangled latents (W) [minibatch, num_layers, dlatent_size].", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "use_styles", "=", "True", ",", "# Enable style inputs?", "\n", "const_input_layer", "=", "True", ",", "# First layer is a learned constant?", "\n", "use_noise", "=", "True", ",", "# Enable noise inputs?", "\n", "randomize_noise", "=", "True", ",", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu'", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "use_pixel_norm", "=", "False", ",", "# Enable pixelwise feature vector normalization?", "\n", "use_instance_norm", "=", "True", ",", "# Enable instance normalization?", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "'auto'", ",", "# True = fused convolution + scaling, False = separate ops, 'auto' = decide automatically.", "\n", "blur_filter", "=", "[", "1", ",", "2", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "structure", "=", "'auto'", ",", "# 'fixed' = no progressive growing, 'linear' = human-readable, 'recursive' = efficient, 'auto' = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "force_clean_graph", "=", "False", ",", "# True = construct a clean graph that looks nice in TensorBoard, False = default behavior.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "def", "blur", "(", "x", ")", ":", "return", "blur2d", "(", "x", ",", "blur_filter", ")", "if", "blur_filter", "else", "x", "\n", "if", "is_template_graph", ":", "force_clean_graph", "=", "True", "\n", "if", "force_clean_graph", ":", "randomize_noise", "=", "False", "\n", "if", "structure", "==", "'auto'", ":", "structure", "=", "'linear'", "if", "force_clean_graph", "else", "'recursive'", "\n", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "tf", ".", "nn", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "'lrelu'", ":", "(", "leaky_relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "num_styles", "=", "num_layers", "if", "use_styles", "else", "1", "\n", "images_out", "=", "None", "\n", "\n", "# Primary inputs.", "\n", "dlatents_in", ".", "set_shape", "(", "[", "None", ",", "num_styles", ",", "dlatent_size", "]", ")", "\n", "dlatents_in", "=", "tf", ".", "cast", "(", "dlatents_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "\n", "# Noise inputs.", "\n", "noise_inputs", "=", "[", "]", "\n", "if", "use_noise", ":", "\n", "        ", "for", "layer_idx", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "res", "=", "layer_idx", "//", "2", "+", "2", "\n", "shape", "=", "[", "1", ",", "use_noise", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "noise_inputs", ".", "append", "(", "tf", ".", "get_variable", "(", "'noise%d'", "%", "layer_idx", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ",", "trainable", "=", "False", ")", ")", "\n", "\n", "# Things to do at the end of each layer.", "\n", "", "", "def", "layer_epilogue", "(", "x", ",", "layer_idx", ")", ":", "\n", "        ", "if", "use_noise", ":", "\n", "            ", "x", "=", "apply_noise", "(", "x", ",", "noise_inputs", "[", "layer_idx", "]", ",", "randomize_noise", "=", "randomize_noise", ")", "\n", "", "x", "=", "apply_bias", "(", "x", ")", "\n", "x", "=", "act", "(", "x", ")", "\n", "if", "use_pixel_norm", ":", "\n", "            ", "x", "=", "pixel_norm", "(", "x", ")", "\n", "", "if", "use_instance_norm", ":", "\n", "            ", "x", "=", "instance_norm", "(", "x", ")", "\n", "", "if", "use_styles", ":", "\n", "            ", "x", "=", "style_mod", "(", "x", ",", "dlatents_in", "[", ":", ",", "layer_idx", "]", ",", "use_wscale", "=", "use_wscale", ")", "\n", "", "return", "x", "\n", "\n", "# Early layers.", "\n", "", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "if", "const_input_layer", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Const'", ")", ":", "\n", "                ", "x", "=", "tf", ".", "get_variable", "(", "'const'", ",", "shape", "=", "[", "1", ",", "nf", "(", "1", ")", ",", "4", ",", "4", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "ones", "(", ")", ")", "\n", "x", "=", "layer_epilogue", "(", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "x", ",", "dtype", ")", ",", "[", "tf", ".", "shape", "(", "dlatents_in", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", ",", "0", ")", "\n", "", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Dense'", ")", ":", "\n", "                ", "x", "=", "dense", "(", "dlatents_in", "[", ":", ",", "0", "]", ",", "fmaps", "=", "nf", "(", "1", ")", "*", "16", ",", "gain", "=", "gain", "/", "4", ",", "use_wscale", "=", "use_wscale", ")", "# tweak gain to match the official implementation of Progressing GAN", "\n", "x", "=", "layer_epilogue", "(", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nf", "(", "1", ")", ",", "4", ",", "4", "]", ")", ",", "0", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "layer_epilogue", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ",", "1", ")", "\n", "\n", "# Building blocks for remaining layers.", "\n", "", "", "def", "block", "(", "res", ",", "x", ")", ":", "# res = 3..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "                ", "x", "=", "layer_epilogue", "(", "blur", "(", "upscale2d_conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "fused_scale", "=", "fused_scale", ")", ")", ",", "res", "*", "2", "-", "4", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                ", "x", "=", "layer_epilogue", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ",", "res", "*", "2", "-", "3", ")", "\n", "", "return", "x", "\n", "", "", "def", "torgb", "(", "res", ",", "x", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "lod", "=", "resolution_log2", "-", "res", "\n", "with", "tf", ".", "variable_scope", "(", "'ToRGB_lod%d'", "%", "lod", ")", ":", "\n", "            ", "return", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "\n", "# Fixed structure: simple and efficient, but does not support progressive growing.", "\n", "", "", "if", "structure", "==", "'fixed'", ":", "\n", "        ", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "x", "=", "block", "(", "res", ",", "x", ")", "\n", "", "images_out", "=", "torgb", "(", "resolution_log2", ",", "x", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "images_out", "=", "torgb", "(", "2", ",", "x", ")", "\n", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "res", ",", "x", ")", "\n", "img", "=", "torgb", "(", "res", ",", "x", ")", "\n", "images_out", "=", "upscale2d", "(", "images_out", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "images_out", "=", "tflib", ".", "lerp_clip", "(", "img", ",", "images_out", ",", "lod_in", "-", "lod", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "\n", "            ", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "", "def", "grow", "(", "x", ",", "res", ",", "lod", ")", ":", "\n", "            ", "y", "=", "block", "(", "res", ",", "x", ")", "\n", "img", "=", "lambda", ":", "upscale2d", "(", "torgb", "(", "res", ",", "y", ")", ",", "2", "**", "lod", ")", "\n", "img", "=", "cset", "(", "img", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "upscale2d", "(", "tflib", ".", "lerp", "(", "torgb", "(", "res", ",", "y", ")", ",", "upscale2d", "(", "torgb", "(", "res", "-", "1", ",", "x", ")", ")", ",", "lod_in", "-", "lod", ")", ",", "2", "**", "lod", ")", ")", "\n", "if", "lod", ">", "0", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "y", ",", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "return", "img", "(", ")", "\n", "", "images_out", "=", "grow", "(", "x", ",", "3", ",", "resolution_log2", "-", "3", ")", "\n", "\n", "", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan.D_basic": [[563, 659], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "min", "tensorflow.get_variable", "networks_stylegan.D_basic.fromrgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["\n", "", "def", "D_basic", "(", "\n", "images_in", ",", "# First input: Images [minibatch, channel, height, width].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "1", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "32", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu',", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "mbstd_num_features", "=", "1", ",", "# Number of features for the minibatch standard deviation layer.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "'auto'", ",", "# True = fused convolution + scaling, False = separate ops, 'auto' = decide automatically.", "\n", "blur_filter", "=", "[", "1", ",", "2", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "structure", "=", "'auto'", ",", "# 'fixed' = no progressive growing, 'linear' = human-readable, 'recursive' = efficient, 'auto' = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "def", "blur", "(", "x", ")", ":", "return", "blur2d", "(", "x", ",", "blur_filter", ")", "if", "blur_filter", "else", "x", "\n", "if", "structure", "==", "'auto'", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", ",", "gain", "=", "{", "'relu'", ":", "(", "tf", ".", "nn", ".", "relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", ",", "'lrelu'", ":", "(", "leaky_relu", ",", "np", ".", "sqrt", "(", "2", ")", ")", "}", "[", "nonlinearity", "]", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "scores_out", "=", "None", "\n", "\n", "# Building blocks.", "\n", "def", "fromrgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB_lod%d'", "%", "(", "resolution_log2", "-", "res", ")", ")", ":", "\n", "            ", "return", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", ">=", "3", ":", "# 8x8 and up", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d_downscale2d", "(", "blur", "(", "x", ")", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "fused_scale", "=", "fused_scale", ")", ")", ")", "\n", "", "", "else", ":", "# 4x4", "\n", "                ", "if", "mbstd_group_size", ">", "1", ":", "\n", "                    ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ",", "mbstd_num_features", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense1'", ")", ":", "\n", "                    ", "x", "=", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "max", "(", "label_size", ",", "1", ")", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "", "", "return", "x", "\n", "\n", "# Fixed structure: simple and efficient, but does not support progressive growing.", "\n", "", "", "if", "structure", "==", "'fixed'", ":", "\n", "        ", "x", "=", "fromrgb", "(", "images_in", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "", "scores_out", "=", "block", "(", "x", ",", "2", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "img", "=", "images_in", "\n", "x", "=", "fromrgb", "(", "img", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "downscale2d", "(", "img", ")", "\n", "y", "=", "fromrgb", "(", "img", ",", "res", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "x", "=", "tflib", ".", "lerp_clip", "(", "x", ",", "y", ",", "lod_in", "-", "lod", ")", "\n", "", "", "scores_out", "=", "block", "(", "x", ",", "2", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "\n", "            ", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "", "def", "grow", "(", "res", ",", "lod", ")", ":", "\n", "            ", "x", "=", "lambda", ":", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "lod", ")", ",", "res", ")", "\n", "if", "lod", ">", "0", ":", "x", "=", "cset", "(", "x", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "x", "=", "block", "(", "x", "(", ")", ",", "res", ")", ";", "y", "=", "lambda", ":", "x", "\n", "if", "res", ">", "2", ":", "y", "=", "cset", "(", "y", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "tflib", ".", "lerp", "(", "x", ",", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "(", "lod", "+", "1", ")", ")", ",", "res", "-", "1", ")", ",", "lod_in", "-", "lod", ")", ")", "\n", "return", "y", "(", ")", "\n", "", "scores_out", "=", "grow", "(", "2", ",", "resolution_log2", "-", "2", ")", "\n", "\n", "# Label conditioning from \"Which Training Methods for GANs do actually Converge?\"", "\n", "", "if", "label_size", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LabelSwitch'", ")", ":", "\n", "            ", "scores_out", "=", "tf", ".", "reduce_sum", "(", "scores_out", "*", "labels_in", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "\n", "", "", "assert", "scores_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "scores_out", ",", "name", "=", "'scores_out'", ")", "\n", "return", "scores_out", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.open_file_or_url": [[20, 24], ["dnnlib.util.is_url", "open", "dnnlib.util.open_url"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl": [[25, 28], ["misc.open_file_or_url", "pickle.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.open_file_or_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["\n", "if", "not", "use_cuda", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_pkl": [[29, 32], ["open", "pickle.dump"], "function", ["None"], ["    ", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "'-1'", "\n", "return", "0", "\n", "", "assert", "isinstance", "(", "device_ids", ",", "str", ")", "\n", "if", "device_ids", ".", "lower", "(", ")", "==", "'all'", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range": [[36, 42], ["numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.float32"], "function", ["None"], ["", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "device_ids", ".", "replace", "(", "' '", ",", "''", ")", "\n", "return", "len", "(", "device_ids", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "\n", "### Data I/O ###", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.create_image_grid": [[43, 59], ["numpy.zeros", "range", "tuple", "max", "max", "int", "list", "numpy.ceil", "numpy.sqrt"], "function", ["None"], ["", "def", "read_ade20k_labels", "(", "fpath", "=", "\"figure/ade20k_labels.csv\"", ")", ":", "\n", "  ", "\"\"\"Read label file for ADE20K dataset\n  \n  Args:\n    fpath : The store location of the label file.\n  Returns:\n    A label list. Note that the default label has one more background category comparing to the official label.\n  \"\"\"", "\n", "lines", "=", "open", "(", "fpath", ",", "\"r\"", ")", ".", "readlines", "(", ")", "\n", "label_list", "=", "[", "l", ".", "split", "(", "\",\"", ")", "[", "-", "1", "]", ".", "split", "(", "\";\"", ")", "[", "0", "]", ".", "strip", "(", ")", "for", "l", "in", "lines", "[", "1", ":", "]", "]", "\n", "return", "label_list", "\n", "\n", "\n", "", "def", "read_selected_labels", "(", "fpath", "=", "\"figure/selected_labels.csv\"", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.convert_to_pil_image": [[60, 72], ["misc.adjust_dynamic_range", "numpy.rint().clip().astype", "PIL.Image.fromarray", "PIL.Image.fromarray", "image.transpose.transpose", "numpy.rint().clip", "numpy.rint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range"], ["\n", "dic", "=", "{", "}", "\n", "with", "open", "(", "fpath", ",", "\"r\"", ")", "as", "f", ":", "\n", "    ", "for", "line", "in", "f", ".", "readlines", "(", ")", ":", "\n", "      ", "items", "=", "line", ".", "split", "(", "\",\"", ")", "\n", "dic", "[", "items", "[", "0", "]", "]", "=", "[", "i", ".", "strip", "(", ")", "for", "i", "in", "items", "[", "1", ":", "]", "]", "\n", "", "", "return", "dic", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image": [[79, 85], ["misc.convert_to_pil_image", "convert_to_pil_image.save", "convert_to_pil_image.save"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.convert_to_pil_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "", "def", "imwrite", "(", "fpath", ",", "image", ",", "format", "=", "\"RGB\"", ")", ":", "\n", "\n", "  ", "\"\"\"Write an numpy image to file.\n\n  Args:\n    image : an array of shape [H, W, 3] and scale in [0, 255].\n  \"\"\"", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid": [[73, 75], ["convert_to_pil_image().save", "misc.convert_to_pil_image", "misc.create_image_grid"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.convert_to_pil_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.create_image_grid"], ["", "def", "imread", "(", "fpath", ")", ":", "\n", "  ", "\"\"\"Read image and returns a numpy array in [0, 255] scale.\"\"\"", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"rb\"", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_run_dir": [[92, 112], ["isinstance", "re.compile", "IOError", "os.path.isdir", "dnnlib.submission.submit.convert_path", "os.path.isdir", "os.path.join", "os.path.isdir", "sorted", "str", "os.path.normpath", "str", "glob.glob", "len", "os.path.join", "os.path.join", "re.compile.match", "os.path.isdir", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path"], ["", "with", "open", "(", "os", ".", "path", ".", "join", "(", "fpath", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "    ", "Image", ".", "fromarray", "(", "image", ".", "astype", "(", "\"uint8\"", ")", ")", ".", "convert", "(", "format", ")", ".", "save", "(", "f", ",", "format", "=", "ext", ")", "\n", "\n", "\n", "### Evaluation Utilities ###", "\n", "\n", "\n", "", "", "def", "invert_dic", "(", "dic", ")", ":", "\n", "  ", "idic", "=", "{", "}", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "if", "k2", "not", "in", "idic", ":", "\n", "        ", "idic", "[", "k2", "]", "=", "{", "}", "\n", "", "idic", "[", "k2", "]", "[", "k1", "]", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n", "", "", "return", "idic", "\n", "\n", "\n", "", "def", "max_key", "(", "dic", ")", ":", "\n", "  ", "keys", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "ind", "=", "np", ".", "argmax", "(", "[", "dic", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "return", "ind", ",", "keys", "[", "ind", "]", ",", "dic", "[", "keys", "[", "ind", "]", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.list_network_pkls": [[113, 121], ["misc.locate_run_dir", "sorted", "glob.glob", "os.path.join", "len", "os.path.basename", "sorted.append"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_run_dir"], ["\n", "\n", "", "def", "print_table", "(", "t", ")", ":", "\n", "  ", "\"\"\"Print a table\n  \n  Args:\n    t : A 2D numpy array or a 2D list.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl": [[122, 144], ["misc.list_network_pkls", "IOError", "isinstance", "os.path.isfile", "dnnlib.submission.submit.convert_path", "os.path.isfile", "len", "int", "os.path.splitext", "os.path.basename", "name.split"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.list_network_pkls", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path"], ["    ", "s", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "len", "(", "t", "[", "0", "]", ")", ")", ":", "\n", "      ", "try", ":", "\n", "        ", "s", "+=", "f\"{t[i, j]:.3f}\\t\"", "\n", "", "except", ":", "\n", "        ", "s", "+=", "f\"{t[i][j]:.3f}\\t\"", "\n", "", "", "print", "(", "s", ")", "\n", "\n", "\n", "", "", "def", "listkey_convert", "(", "name", ",", "listkey", ",", "output", "=", "None", ")", ":", "\n", "  ", "\"\"\"Check which key in listkey is a substring of name and return a value.\n  \n  Args:\n    name : The raw string. It may contain one or more keys from listkey.\n    listkey : A list of keys.\n    output : When output is None, the matched key will be returned directly. \n             When output is a list, the function will return the element of \n             output at index of the matched key.\n  Returns:\n    A matched key, or the output word corresponding to the index of the \n    matched key, or an empty string if matching fails\n  \"\"\"", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "listkey", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.get_id_string_for_network_pkl": [[145, 148], ["network_pkl.replace().replace().split", "network_pkl.replace().replace", "max", "network_pkl.replace", "len"], "function", ["None"], ["    ", "if", "key", "in", "name", ":", "\n", "      ", "if", "output", "is", "not", "None", ":", "\n", "        ", "return", "output", "[", "i", "]", "\n", "", "return", "key", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_network_pkl": [[152, 154], ["misc.load_pkl", "misc.locate_network_pkl"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.locate_network_pkl"], ["", "def", "aggregate_iou", "(", "res", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.parse_config_for_previous_run": [[85, 90], ["pickle.load.get", "dict", "open", "pickle.load", "os.path.join", "pickle.load.get"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["\n", "if", "\".jpg\"", "in", "fpath", "or", "\".jpeg\"", "in", "fpath", ":", "\n", "    ", "ext", "=", "\"JPEG\"", "\n", "", "elif", "\".png\"", "in", "fpath", ":", "\n", "    ", "ext", "=", "\"PNG\"", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_dataset_for_previous_run": [[180, 186], ["misc.parse_config_for_previous_run", "cfg[].update", "training.dataset.load_dataset", "cfg[].get"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.parse_config_for_previous_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["\n", "\n", "", "def", "enumerate_names", "(", "prev", "=", "[", "]", ",", "i", "=", "0", ",", "groups", "=", "[", "]", ")", ":", "\n", "  ", "res", "=", "[", "]", "\n", "for", "key", "in", "groups", "[", "i", "]", ":", "\n", "    ", "if", "len", "(", "groups", "[", "i", "]", ")", ">", "1", ":", "\n", "      ", "cur", "=", "prev", "+", "[", "key", "]", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.apply_mirror_augment": [[76, 81], ["numpy.array", "numpy.random.rand"], "function", ["None"], ["    ", "return", "np", ".", "asarray", "(", "Image", ".", "open", "(", "f", ")", ",", "dtype", "=", "\"uint8\"", ")", "\n", "\n", "\n", "", "", "def", "imwrite", "(", "fpath", ",", "image", ",", "format", "=", "\"RGB\"", ")", ":", "\n", "\n", "  "]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.setup_snapshot_image_grid": [[95, 144], ["numpy.zeros", "numpy.zeros", "dict", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "training_set.get_minibatch_np", "range", "enumerate", "training_set.get_minibatch_np", "numpy.argmax", "enumerate", "range", "len", "blocks[].append", "all", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["\n", "### Evaluation Utilities ###", "\n", "\n", "\n", "", "", "def", "invert_dic", "(", "dic", ")", ":", "\n", "  ", "idic", "=", "{", "}", "\n", "for", "k1", "in", "dic", ".", "keys", "(", ")", ":", "\n", "    ", "for", "k2", "in", "dic", "[", "k1", "]", ".", "keys", "(", ")", ":", "\n", "      ", "if", "k2", "not", "in", "idic", ":", "\n", "        ", "idic", "[", "k2", "]", "=", "{", "}", "\n", "", "idic", "[", "k2", "]", "[", "k1", "]", "=", "dic", "[", "k1", "]", "[", "k2", "]", "\n", "", "", "return", "idic", "\n", "\n", "\n", "", "def", "max_key", "(", "dic", ")", ":", "\n", "  ", "keys", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "ind", "=", "np", ".", "argmax", "(", "[", "dic", "[", "k", "]", "for", "k", "in", "keys", "]", ")", "\n", "return", "ind", ",", "keys", "[", "ind", "]", ",", "dic", "[", "keys", "[", "ind", "]", "]", "\n", "\n", "\n", "", "def", "print_table", "(", "t", ")", ":", "\n", "  ", "\"\"\"Print a table\n  \n  Args:\n    t : A 2D numpy array or a 2D list.\n  \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "t", ")", ")", ":", "\n", "    ", "s", "=", "\"\"", "\n", "for", "j", "in", "range", "(", "len", "(", "t", "[", "0", "]", ")", ")", ":", "\n", "      ", "try", ":", "\n", "        ", "s", "+=", "f\"{t[i, j]:.3f}\\t\"", "\n", "", "except", ":", "\n", "        ", "s", "+=", "f\"{t[i][j]:.3f}\\t\"", "\n", "", "", "print", "(", "s", ")", "\n", "\n", "\n", "", "", "def", "listkey_convert", "(", "name", ",", "listkey", ",", "output", "=", "None", ")", ":", "\n", "  ", "\"\"\"Check which key in listkey is a substring of name and return a value.\n  \n  Args:\n    name : The raw string. It may contain one or more keys from listkey.\n    listkey : A list of keys.\n    output : When output is None, the matched key will be returned directly. \n             When output is a list, the function will return the element of \n             output at index of the matched key.\n  Returns:\n    A matched key, or the output word corresponding to the index of the \n    matched key, or an empty string if matching fails\n  \"\"\"", "\n", "for", "i", ",", "key", "in", "enumerate", "(", "listkey", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp": [[18, 19], ["None"], "function", ["None"], ["def", "lerp", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "t", "\n", "def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp_clip": [[19, 20], ["tensorflow.clip_by_value"], "function", ["None"], ["def", "lerp_clip", "(", "a", ",", "b", ",", "t", ")", ":", "return", "a", "+", "(", "b", "-", "a", ")", "*", "tf", ".", "clip_by_value", "(", "t", ",", "0.0", ",", "1.0", ")", "\n", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.cset": [[20, 21], ["tensorflow.cond"], "function", ["None"], ["def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.get_weight": [[25, 34], ["numpy.sqrt", "numpy.prod", "numpy.sqrt", "tensorflow.constant", "tensorflow.get_variable", "numpy.float32", "tensorflow.get_variable", "tensorflow.initializers.random_normal", "tensorflow.initializers.random_normal"], "function", ["None"], ["def", "get_weight", "(", "shape", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "fan_in", "=", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", "# [kernel, kernel, fmaps_in, fmaps_out] or [in, out]", "\n", "std", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "# He init", "\n", "if", "use_wscale", ":", "\n", "        ", "wscale", "=", "tf", ".", "constant", "(", "np", ".", "float32", "(", "std", ")", ",", "name", "=", "'wscale'", ")", "\n", "w", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "*", "wscale", "\n", "", "else", ":", "\n", "        ", "w", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", "0", ",", "std", ")", ")", "\n", "", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.dense": [[38, 44], ["numpy.sqrt", "networks_progan.get_weight", "tensorflow.cast", "tensorflow.matmul", "len", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["", "def", "dense", "(", "x", ",", "fmaps", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "[", "d", ".", "value", "for", "d", "in", "x", ".", "shape", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "", "w", "=", "get_weight", "(", "[", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d": [[48, 53], ["numpy.sqrt", "networks_progan.get_weight", "tensorflow.cast", "tensorflow.nn.conv2d"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.apply_bias": [[57, 63], ["tensorflow.get_variable", "tensorflow.cast", "len", "tensorflow.reshape", "tensorflow.initializers.zeros"], "function", ["None"], ["", "def", "apply_bias", "(", "x", ")", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "'bias'", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "b", "=", "tf", ".", "cast", "(", "b", ",", "x", ".", "dtype", ")", "\n", "if", "len", "(", "x", ".", "shape", ")", "==", "2", ":", "\n", "        ", "return", "x", "+", "b", "\n", "", "return", "x", "+", "tf", ".", "reshape", "(", "b", ",", "[", "1", ",", "-", "1", ",", "1", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.leaky_relu": [[67, 71], ["tensorflow.name_scope", "tensorflow.constant", "tensorflow.maximum"], "function", ["None"], ["", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'LeakyRelu'", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "constant", "(", "alpha", ",", "dtype", "=", "x", ".", "dtype", ",", "name", "=", "'alpha'", ")", "\n", "return", "tf", ".", "maximum", "(", "x", "*", "alpha", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.upscale2d": [[75, 84], ["isinstance", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape"], "function", ["None"], ["", "", "def", "upscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "factor", "==", "1", ":", "return", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Upscale2D'", ")", ":", "\n", "        ", "s", "=", "x", ".", "shape", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", ",", "1", ",", "s", "[", "3", "]", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "s", "[", "1", "]", ",", "s", "[", "2", "]", "*", "factor", ",", "s", "[", "3", "]", "*", "factor", "]", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.upscale2d_conv2d": [[89, 98], ["numpy.sqrt", "networks_progan.get_weight", "tensorflow.transpose", "tensorflow.pad", "tensorflow.add_n", "tensorflow.cast", "tensorflow.nn.conv2d_transpose", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["", "", "def", "upscale2d_conv2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "transpose", "(", "w", ",", "[", "0", ",", "1", ",", "3", ",", "2", "]", ")", "# [kernel, kernel, fmaps_out, fmaps_in]", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "os", "=", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "fmaps", ",", "x", ".", "shape", "[", "2", "]", "*", "2", ",", "x", ".", "shape", "[", "3", "]", "*", "2", "]", "\n", "return", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "os", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.downscale2d": [[102, 108], ["isinstance", "tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "def", "downscale2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "factor", "==", "1", ":", "return", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Downscale2D'", ")", ":", "\n", "        ", "ksize", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "return", "tf", ".", "nn", ".", "avg_pool", "(", "x", ",", "ksize", "=", "ksize", ",", "strides", "=", "ksize", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "# NOTE: requires tf_config['graph_options.place_pruned_graph'] = True", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d_downscale2d": [[113, 120], ["numpy.sqrt", "networks_progan.get_weight", "tensorflow.pad", "tensorflow.cast", "tensorflow.nn.conv2d", "tensorflow.add_n"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "conv2d_downscale2d", "(", "x", ",", "fmaps", ",", "kernel", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", ",", "use_wscale", "=", "False", ")", ":", "\n", "    ", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ")", "\n", "w", "=", "tf", ".", "pad", "(", "w", ",", "[", "[", "1", ",", "1", "]", ",", "[", "1", ",", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", "]", ",", "mode", "=", "'CONSTANT'", ")", "\n", "w", "=", "tf", ".", "add_n", "(", "[", "w", "[", "1", ":", ",", "1", ":", "]", ",", "w", "[", ":", "-", "1", ",", "1", ":", "]", ",", "w", "[", "1", ":", ",", ":", "-", "1", "]", ",", "w", "[", ":", "-", "1", ",", ":", "-", "1", "]", "]", ")", "*", "0.25", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.pixel_norm": [[124, 127], ["tensorflow.variable_scope", "tensorflow.rsqrt", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["None"], ["", "def", "pixel_norm", "(", "x", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'PixelNorm'", ")", ":", "\n", "        ", "return", "x", "*", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.minibatch_stddev_layer": [[131, 145], ["tensorflow.variable_scope", "tensorflow.minimum", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.tile", "tensorflow.concat", "tensorflow.square", "tensorflow.shape"], "function", ["None"], ["", "", "def", "minibatch_stddev_layer", "(", "x", ",", "group_size", "=", "4", ",", "num_new_features", "=", "1", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "        ", "group_size", "=", "tf", ".", "minimum", "(", "group_size", ",", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "# Minibatch must be divisible by (or smaller than) group_size.", "\n", "s", "=", "x", ".", "shape", "# [NCHW]  Input shape.", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "group_size", ",", "-", "1", ",", "num_new_features", ",", "s", "[", "1", "]", "//", "num_new_features", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [GMncHW] Split minibatch into M groups of size G. Split channels into n channel groups c.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "# [GMncHW] Cast to FP32.", "\n", "y", "-=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [GMncHW] Subtract mean over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y", ")", ",", "axis", "=", "0", ")", "# [MncHW]  Calc variance over group.", "\n", "y", "=", "tf", ".", "sqrt", "(", "y", "+", "1e-8", ")", "# [MncHW]  Calc stddev over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", "# [Mn111]  Take average over fmaps and pixels.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", "]", ")", "# [Mn11] Split channels into c channel groups", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "x", ".", "dtype", ")", "# [Mn11]  Cast back to original data type.", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "group_size", ",", "1", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [NnHW]  Replicate over group and pixels.", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "# [NCHW]  Append as new fmap.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.G_paper": [[149, 236], ["int", "latents_in.set_shape", "labels_in.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "min", "networks_progan.G_paper.nf"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "", "def", "G_paper", "(", "\n", "latents_in", ",", "# First input: Latent vectors [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "1", ",", "# Number of output color channels. Overridden based on dataset.", "\n", "resolution", "=", "32", ",", "# Output resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "latent_size", "=", "None", ",", "# Dimensionality of the latent vectors. None = min(fmap_base, fmap_max).", "\n", "normalize_latents", "=", "True", ",", "# Normalize latent vectors before feeding them to the network?", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "use_pixelnorm", "=", "True", ",", "# Enable pixelwise feature vector normalization?", "\n", "pixelnorm_epsilon", "=", "1e-8", ",", "# Constant epsilon for pixelwise feature vector normalization.", "\n", "use_leakyrelu", "=", "True", ",", "# True = leaky ReLU, False = ReLU.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "True", ",", "# True = use fused upscale2d + conv2d, False = separate upscale2d layers.", "\n", "structure", "=", "None", ",", "# 'linear' = human-readable, 'recursive' = efficient, None = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "def", "PN", "(", "x", ")", ":", "return", "pixel_norm", "(", "x", ",", "epsilon", "=", "pixelnorm_epsilon", ")", "if", "use_pixelnorm", "else", "x", "\n", "if", "latent_size", "is", "None", ":", "latent_size", "=", "nf", "(", "0", ")", "\n", "if", "structure", "is", "None", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", "=", "leaky_relu", "if", "use_leakyrelu", "else", "tf", ".", "nn", ".", "relu", "\n", "\n", "latents_in", ".", "set_shape", "(", "[", "None", ",", "latent_size", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "combo_in", "=", "tf", ".", "cast", "(", "tf", ".", "concat", "(", "[", "latents_in", ",", "labels_in", "]", ",", "axis", "=", "1", ")", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "images_out", "=", "None", "\n", "\n", "# Building blocks.", "\n", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", "==", "2", ":", "# 4x4", "\n", "                ", "if", "normalize_latents", ":", "x", "=", "pixel_norm", "(", "x", ",", "epsilon", "=", "pixelnorm_epsilon", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Dense'", ")", ":", "\n", "                    ", "x", "=", "dense", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", "*", "16", ",", "gain", "=", "np", ".", "sqrt", "(", "2", ")", "/", "4", ",", "use_wscale", "=", "use_wscale", ")", "# override gain to match the original Theano implementation", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "nf", "(", "res", "-", "1", ")", ",", "4", ",", "4", "]", ")", "\n", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "x", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "                    ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "else", ":", "# 8x8 and up", "\n", "                ", "if", "fused_scale", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "                        ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "upscale2d_conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "x", "=", "upscale2d", "(", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                        ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                    ", "x", "=", "PN", "(", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", ")", "\n", "", "", "return", "x", "\n", "", "", "def", "torgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "lod", "=", "resolution_log2", "-", "res", "\n", "with", "tf", ".", "variable_scope", "(", "'ToRGB_lod%d'", "%", "lod", ")", ":", "\n", "            ", "return", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "x", "=", "block", "(", "combo_in", ",", "2", ")", "\n", "images_out", "=", "torgb", "(", "x", ",", "2", ")", "\n", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "torgb", "(", "x", ",", "res", ")", "\n", "images_out", "=", "upscale2d", "(", "images_out", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "images_out", "=", "lerp_clip", "(", "img", ",", "images_out", ",", "lod_in", "-", "lod", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "grow", "(", "x", ",", "res", ",", "lod", ")", ":", "\n", "            ", "y", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "lambda", ":", "upscale2d", "(", "torgb", "(", "y", ",", "res", ")", ",", "2", "**", "lod", ")", "\n", "if", "res", ">", "2", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "upscale2d", "(", "lerp", "(", "torgb", "(", "y", ",", "res", ")", ",", "upscale2d", "(", "torgb", "(", "x", ",", "res", "-", "1", ")", ")", ",", "lod_in", "-", "lod", ")", ",", "2", "**", "lod", ")", ")", "\n", "if", "lod", ">", "0", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "y", ",", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "return", "img", "(", ")", "\n", "", "images_out", "=", "grow", "(", "combo_in", ",", "2", ",", "resolution_log2", "-", "2", ")", "\n", "\n", "", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "images_out", "=", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.D_paper": [[238, 321], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "min", "tensorflow.get_variable", "networks_progan.D_paper.fromrgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "def", "D_paper", "(", "\n", "images_in", ",", "# First input: Images [minibatch, channel, height, width].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "1", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "32", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "8192", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "use_wscale", "=", "True", ",", "# Enable equalized learning rate?", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "fused_scale", "=", "True", ",", "# True = use fused conv2d + downscale2d, False = separate downscale2d layers.", "\n", "structure", "=", "None", ",", "# 'linear' = human-readable, 'recursive' = efficient, None = select automatically", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "min", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_max", ")", "\n", "if", "structure", "is", "None", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", "=", "leaky_relu", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "scores_out", "=", "None", "\n", "\n", "# Building blocks.", "\n", "def", "fromrgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB_lod%d'", "%", "(", "resolution_log2", "-", "res", ")", ")", ":", "\n", "            ", "return", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "res", ">=", "3", ":", "# 8x8 and up", "\n", "                ", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "if", "fused_scale", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "                        ", "x", "=", "act", "(", "apply_bias", "(", "conv2d_downscale2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "", "else", ":", "\n", "                    ", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                        ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "x", "=", "downscale2d", "(", "x", ")", "\n", "", "", "else", ":", "# 4x4", "\n", "                ", "if", "mbstd_group_size", ">", "1", ":", "\n", "                    ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "conv2d", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "                    ", "x", "=", "act", "(", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "use_wscale", "=", "use_wscale", ")", ")", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense1'", ")", ":", "\n", "                    ", "x", "=", "apply_bias", "(", "dense", "(", "x", ",", "fmaps", "=", "1", ",", "gain", "=", "1", ",", "use_wscale", "=", "use_wscale", ")", ")", "\n", "", "", "return", "x", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "img", "=", "images_in", "\n", "x", "=", "fromrgb", "(", "img", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "img", "=", "downscale2d", "(", "img", ")", "\n", "y", "=", "fromrgb", "(", "img", ",", "res", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "x", "=", "lerp_clip", "(", "x", ",", "y", ",", "lod_in", "-", "lod", ")", "\n", "", "", "scores_out", "=", "block", "(", "x", ",", "2", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "grow", "(", "res", ",", "lod", ")", ":", "\n", "            ", "x", "=", "lambda", ":", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "lod", ")", ",", "res", ")", "\n", "if", "lod", ">", "0", ":", "x", "=", "cset", "(", "x", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "x", "=", "block", "(", "x", "(", ")", ",", "res", ")", ";", "y", "=", "lambda", ":", "x", "\n", "if", "res", ">", "2", ":", "y", "=", "cset", "(", "y", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "lerp", "(", "x", ",", "fromrgb", "(", "downscale2d", "(", "images_in", ",", "2", "**", "(", "lod", "+", "1", ")", ")", ",", "res", "-", "1", ")", ",", "lod_in", "-", "lod", ")", ")", "\n", "return", "y", "(", ")", "\n", "", "scores_out", "=", "grow", "(", "2", ",", "resolution_log2", "-", "2", ")", "\n", "\n", "", "assert", "scores_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "scores_out", ",", "name", "=", "'scores_out'", ")", "\n", "return", "scores_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.close": [[122, 124], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.parse_tfrecord_tf": [[161, 168], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.TFRecordDataset.parse_tfrecord_np": [[170, 177], ["tensorflow.train.Example", "tensorflow.train.Example.ParseFromString", "numpy.fromstring().reshape", "numpy.fromstring"], "methods", ["None"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_logistic": [[18, 26], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "D.get_output_for", "tensorflow.nn.softplus"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], ["", "class", "FocalLoss", "(", "nn", ".", "Module", ")", ":", "\n", "  ", "def", "__init__", "(", "self", ",", "binary", "=", "False", ",", "alpha", "=", "1", ",", "gamma", "=", "2", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "gamma", "=", "gamma", "# \u6307\u6570", "\n", "if", "binary", ":", "\n", "      ", "self", ".", "func", "=", "F", ".", "binary_cross_entropy_with_logits", "\n", "", "else", ":", "\n", "      ", "self", ".", "func", "=", "F", ".", "cross_entropy", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_logistic_ns": [[27, 35], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "D.get_output_for", "tensorflow.nn.softplus"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for"], ["\n", "", "", "def", "forward", "(", "self", ",", "inputs", ",", "targets", ",", "reduction", "=", "\"mean\"", ")", ":", "\n", "    ", "loss", "=", "self", ".", "func", "(", "inputs", ",", "targets", ",", "reduction", "=", "'none'", ")", "\n", "pt", "=", "torch", ".", "exp", "(", "-", "loss", ")", "\n", "focal_loss", "=", "self", ".", "alpha", "*", "(", "(", "1", "-", "pt", ")", ".", "pow", "(", "self", ".", "gamma", ")", "*", "loss", ")", "\n", "if", "reduction", "==", "\"mean\"", ":", "\n", "      ", "return", "focal_loss", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "      ", "return", "focal_loss", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_logistic_r1": [[52, 69], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "tensorflow.name_scope", "tensorflow.reduce_sum", "dnnlib.tflib.autosummary.autosummary", "tensorflow.gradients", "tensorflow.square", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], ["for", "cat_id", "in", "range", "(", "label", ".", "shape", "[", "0", "]", ")", ":", "\n", "    ", "segloss", "=", "[", "]", "\n", "onehot", "=", "int2onehot", "(", "label", "[", "cat_id", "]", ".", "unsqueeze", "(", "1", ")", ",", "segs", "[", "cat_id", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "# BCE loss", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "      ", "seg", "=", "segs", "[", "cat_id", "]", "[", "i", "]", "\n", "segloss", ".", "append", "(", "loss_fn_layer", "(", "seg", "if", "seg", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "seg", ",", "label", ".", "size", "(", "3", ")", ")", ",", "onehot", ")", ")", "\n", "# CE loss", "\n", "", "final", "=", "segs", "[", "cat_id", "]", "[", "-", "1", "]", "\n", "segloss", ".", "append", "(", "loss_fn_final", "(", "final", "if", "final", ".", "size", "(", "2", ")", "==", "label", ".", "size", "(", "3", ")", "else", "op", ".", "bu", "(", "final", ",", "label", ".", "size", "(", "3", ")", ")", ",", "label", "[", "cat_id", "]", ")", ")", "\n", "seglosses", ".", "append", "(", "segloss", ")", "\n", "", "return", "seglosses", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.D_logistic_r2": [[70, 87], ["tensorflow.random_normal", "G.get_output_for", "D.get_output_for", "D.get_output_for", "dnnlib.tflib.autosummary.autosummary", "dnnlib.tflib.autosummary.autosummary", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "tensorflow.name_scope", "tensorflow.reduce_sum", "dnnlib.tflib.autosummary.autosummary", "tensorflow.gradients", "tensorflow.square", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.loss.G_logistic_ns_pathreg": [[148, 196], ["tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "D.get_output_for", "tensorflow.nn.softplus", "tensorflow.name_scope", "tensorflow.sqrt", "dnnlib.tflib.autosummary.autosummary", "tensorflow.assign", "tensorflow.random_normal", "training_set.get_random_labels_tf", "G.get_output_for", "tensorflow.random_normal", "numpy.sqrt", "tensorflow.gradients", "tensorflow.reduce_mean", "tensorflow.control_dependencies", "tensorflow.Variable", "tensorflow.control_dependencies", "tensorflow.square", "dnnlib.tflib.autosummary.autosummary", "tensorflow.shape", "numpy.prod", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_random_labels_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.autosummary.autosummary"], []], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight": [[22, 37], ["numpy.prod", "tensorflow.initializers.random_normal", "numpy.sqrt", "tensorflow.get_variable"], "function", ["None"], ["def", "get_weight", "(", "shape", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "fan_in", "=", "np", ".", "prod", "(", "shape", "[", ":", "-", "1", "]", ")", "# [kernel, kernel, fmaps_in, fmaps_out] or [in, out]", "\n", "he_std", "=", "gain", "/", "np", ".", "sqrt", "(", "fan_in", ")", "# He init", "\n", "\n", "# Equalized learning rate and custom learning rate multiplier.", "\n", "if", "use_wscale", ":", "\n", "        ", "init_std", "=", "1.0", "/", "lrmul", "\n", "runtime_coef", "=", "he_std", "*", "lrmul", "\n", "", "else", ":", "\n", "        ", "init_std", "=", "he_std", "/", "lrmul", "\n", "runtime_coef", "=", "lrmul", "\n", "\n", "# Create variable.", "\n", "", "init", "=", "tf", ".", "initializers", ".", "random_normal", "(", "0", ",", "init_std", ")", "\n", "return", "tf", ".", "get_variable", "(", "weight_var", ",", "shape", "=", "shape", ",", "initializer", "=", "init", ")", "*", "runtime_coef", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.dense_layer": [[41, 47], ["networks_stylegan2.get_weight", "tensorflow.cast", "tensorflow.matmul", "len", "tensorflow.reshape", "numpy.prod"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight"], ["", "def", "dense_layer", "(", "x", ",", "fmaps", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "if", "len", "(", "x", ".", "shape", ")", ">", "2", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "np", ".", "prod", "(", "[", "d", ".", "value", "for", "d", "in", "x", ".", "shape", "[", "1", ":", "]", "]", ")", "]", ")", "\n", "", "w", "=", "get_weight", "(", "[", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "w", "=", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", "\n", "return", "tf", ".", "matmul", "(", "x", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.conv2d_layer": [[51, 62], ["networks_stylegan2.get_weight", "dnnlib.tflib.ops.upfirdn_2d.upsample_conv_2d", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.conv_downsample_2d", "tensorflow.nn.conv2d", "tensorflow.cast", "tensorflow.cast"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upsample_conv_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.conv_downsample_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "conv2d_layer", "(", "x", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ",", "down", "=", "False", ",", "resample_kernel", "=", "None", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "weight_var", "=", "'weight'", ")", ":", "\n", "    ", "assert", "not", "(", "up", "and", "down", ")", "\n", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "if", "up", ":", "\n", "        ", "x", "=", "upsample_conv_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "elif", "down", ":", "\n", "        ", "x", "=", "conv_downsample_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act": [[66, 69], ["dnnlib.tflib.ops.fused_bias_act.fused_bias_act", "tensorflow.get_variable", "tensorflow.cast", "tensorflow.initializers.zeros"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.fused_bias_act.fused_bias_act"], ["", "def", "apply_bias_act", "(", "x", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "lrmul", "=", "1", ",", "bias_var", "=", "'bias'", ")", ":", "\n", "    ", "b", "=", "tf", ".", "get_variable", "(", "bias_var", ",", "shape", "=", "[", "x", ".", "shape", "[", "1", "]", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "*", "lrmul", "\n", "return", "fused_bias_act", "(", "x", ",", "b", "=", "tf", ".", "cast", "(", "b", ",", "x", ".", "dtype", ")", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.naive_upsample_2d": [[73, 79], ["tensorflow.variable_scope", "tf.tile.shape.as_list", "tensorflow.reshape", "tensorflow.tile", "tensorflow.reshape"], "function", ["None"], ["", "def", "naive_upsample_2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'NaiveUpsample'", ")", ":", "\n", "        ", "_N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", ",", "1", ",", "W", ",", "1", "]", ")", "\n", "x", "=", "tf", ".", "tile", "(", "x", ",", "[", "1", ",", "1", ",", "1", ",", "factor", ",", "1", ",", "factor", "]", ")", "\n", "return", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", "*", "factor", ",", "W", "*", "factor", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.naive_downsample_2d": [[80, 85], ["tensorflow.variable_scope", "tf.reshape.shape.as_list", "tensorflow.reshape", "tensorflow.reduce_mean"], "function", ["None"], ["", "", "def", "naive_downsample_2d", "(", "x", ",", "factor", "=", "2", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'NaiveDownsample'", ")", ":", "\n", "        ", "_N", ",", "C", ",", "H", ",", "W", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "C", ",", "H", "//", "factor", ",", "factor", ",", "W", "//", "factor", ",", "factor", "]", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "x", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.modulated_conv2d_layer": [[89, 128], ["networks_stylegan2.get_weight", "networks_stylegan2.dense_layer", "tensorflow.cast", "networks_stylegan2.apply_bias_act", "tensorflow.rsqrt", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.upsample_conv_2d", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.cast", "dnnlib.tflib.ops.upfirdn_2d.conv_downsample_2d", "tensorflow.nn.conv2d", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.cast", "tensorflow.cast", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.get_weight", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.dense_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upsample_conv_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.conv_downsample_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "", "def", "modulated_conv2d_layer", "(", "x", ",", "y", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ",", "down", "=", "False", ",", "demodulate", "=", "True", ",", "resample_kernel", "=", "None", ",", "gain", "=", "1", ",", "use_wscale", "=", "True", ",", "lrmul", "=", "1", ",", "fused_modconv", "=", "True", ",", "weight_var", "=", "'weight'", ",", "mod_weight_var", "=", "'mod_weight'", ",", "mod_bias_var", "=", "'mod_bias'", ")", ":", "\n", "    ", "assert", "not", "(", "up", "and", "down", ")", "\n", "assert", "kernel", ">=", "1", "and", "kernel", "%", "2", "==", "1", "\n", "\n", "# Get weight.", "\n", "w", "=", "get_weight", "(", "[", "kernel", ",", "kernel", ",", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "fmaps", "]", ",", "gain", "=", "gain", ",", "use_wscale", "=", "use_wscale", ",", "lrmul", "=", "lrmul", ",", "weight_var", "=", "weight_var", ")", "\n", "ww", "=", "w", "[", "np", ".", "newaxis", "]", "# [BkkIO] Introduce minibatch dimension.", "\n", "\n", "# Modulate.", "\n", "s", "=", "dense_layer", "(", "y", ",", "fmaps", "=", "x", ".", "shape", "[", "1", "]", ".", "value", ",", "weight_var", "=", "mod_weight_var", ")", "# [BI] Transform incoming W to style.", "\n", "s", "=", "apply_bias_act", "(", "s", ",", "bias_var", "=", "mod_bias_var", ")", "+", "1", "# [BI] Add bias (initially 1).", "\n", "ww", "*=", "tf", ".", "cast", "(", "s", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", ",", "w", ".", "dtype", ")", "# [BkkIO] Scale input feature maps.", "\n", "\n", "# Demodulate.", "\n", "if", "demodulate", ":", "\n", "        ", "d", "=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "ww", ")", ",", "axis", "=", "[", "1", ",", "2", ",", "3", "]", ")", "+", "1e-8", ")", "# [BO] Scaling factor.", "\n", "ww", "*=", "d", "[", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", ",", ":", "]", "# [BkkIO] Scale output feature maps.", "\n", "\n", "# Reshape/scale input.", "\n", "", "if", "fused_modconv", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "1", ",", "-", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "# Fused => reshape minibatch to convolution groups.", "\n", "w", "=", "tf", ".", "reshape", "(", "tf", ".", "transpose", "(", "ww", ",", "[", "1", ",", "2", ",", "3", ",", "0", ",", "4", "]", ")", ",", "[", "ww", ".", "shape", "[", "1", "]", ",", "ww", ".", "shape", "[", "2", "]", ",", "ww", ".", "shape", "[", "3", "]", ",", "-", "1", "]", ")", "\n", "", "else", ":", "\n", "        ", "x", "*=", "tf", ".", "cast", "(", "s", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "x", ".", "dtype", ")", "# [BIhw] Not fused => scale input activations.", "\n", "\n", "# Convolution with optional up/downsampling.", "\n", "", "if", "up", ":", "\n", "        ", "x", "=", "upsample_conv_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "elif", "down", ":", "\n", "        ", "x", "=", "conv_downsample_2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "k", "=", "resample_kernel", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "tf", ".", "cast", "(", "w", ",", "x", ".", "dtype", ")", ",", "data_format", "=", "'NCHW'", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "\n", "# Reshape/scale output.", "\n", "", "if", "fused_modconv", ":", "\n", "        ", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "fmaps", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ")", "# Fused => reshape convolution groups back to minibatch.", "\n", "", "elif", "demodulate", ":", "\n", "        ", "x", "*=", "tf", ".", "cast", "(", "d", "[", ":", ",", ":", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "x", ".", "dtype", ")", "# [BOhw] Not fused => scale output activations.", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.minibatch_stddev_layer": [[132, 145], ["tensorflow.minimum", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.sqrt", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.cast", "tensorflow.tile", "tensorflow.concat", "tensorflow.square", "tensorflow.shape"], "function", ["None"], ["", "def", "minibatch_stddev_layer", "(", "x", ",", "group_size", "=", "4", ",", "num_new_features", "=", "1", ")", ":", "\n", "    ", "group_size", "=", "tf", ".", "minimum", "(", "group_size", ",", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ")", "# Minibatch must be divisible by (or smaller than) group_size.", "\n", "s", "=", "x", ".", "shape", "# [NCHW]  Input shape.", "\n", "y", "=", "tf", ".", "reshape", "(", "x", ",", "[", "group_size", ",", "-", "1", ",", "num_new_features", ",", "s", "[", "1", "]", "//", "num_new_features", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [GMncHW] Split minibatch into M groups of size G. Split channels into n channel groups c.", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "tf", ".", "float32", ")", "# [GMncHW] Cast to FP32.", "\n", "y", "-=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [GMncHW] Subtract mean over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "y", ")", ",", "axis", "=", "0", ")", "# [MncHW]  Calc variance over group.", "\n", "y", "=", "tf", ".", "sqrt", "(", "y", "+", "1e-8", ")", "# [MncHW]  Calc stddev over group.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", ",", "3", ",", "4", "]", ",", "keepdims", "=", "True", ")", "# [Mn111]  Take average over fmaps and pixels.", "\n", "y", "=", "tf", ".", "reduce_mean", "(", "y", ",", "axis", "=", "[", "2", "]", ")", "# [Mn11] Split channels into c channel groups", "\n", "y", "=", "tf", ".", "cast", "(", "y", ",", "x", ".", "dtype", ")", "# [Mn11]  Cast back to original data type.", "\n", "y", "=", "tf", ".", "tile", "(", "y", ",", "[", "group_size", ",", "1", ",", "s", "[", "2", "]", ",", "s", "[", "3", "]", "]", ")", "# [NnHW]  Replicate over group and pixels.", "\n", "return", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "# [NCHW]  Append as new fmap.", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.G_main": [[151, 245], ["dnnlib.EasyDict", "dnnlib.EasyDict", "isinstance", "tensorflow.get_variable", "tensorflow.get_variable", "components.mapping.get_output_for", "tensorflow.cast", "tensorflow.identity", "dnnlib.Network", "dnnlib.Network", "deps.append", "tensorflow.control_dependencies", "components.synthesis.get_output_for", "numpy.float32", "tensorflow.initializers.zeros", "tensorflow.variable_scope", "tensorflow.reduce_mean", "tensorflow.assign", "tensorflow.variable_scope", "tensorflow.random_normal", "components.mapping.get_output_for", "tensorflow.cast", "tensorflow.cond", "tensorflow.where", "tensorflow.variable_scope", "numpy.ones", "dnnlib.lerp", "tensorflow.assign", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.is_tf_expression", "dnnlib.lerp", "tensorflow.control_dependencies", "tensorflow.identity", "tensorflow.shape", "numpy.arange", "tensorflow.broadcast_to", "numpy.arange", "tensorflow.where", "globals", "globals", "tensorflow.cast", "tensorflow.random_uniform", "tensorflow.random_uniform", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.is_tf_expression", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.lerp"], ["", "def", "G_main", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "truncation_psi", "=", "0.5", ",", "# Style strength multiplier for the truncation trick. None = disable.", "\n", "truncation_cutoff", "=", "None", ",", "# Number of layers for which to apply the truncation trick. None = disable.", "\n", "truncation_psi_val", "=", "None", ",", "# Value for truncation_psi to use during validation.", "\n", "truncation_cutoff_val", "=", "None", ",", "# Value for truncation_cutoff to use during validation.", "\n", "dlatent_avg_beta", "=", "0.995", ",", "# Decay for tracking the moving average of W during training. None = disable.", "\n", "style_mixing_prob", "=", "0.9", ",", "# Probability of mixing styles during training. None = disable.", "\n", "is_training", "=", "False", ",", "# Network is under training? Enables and disables specific features.", "\n", "is_validation", "=", "False", ",", "# Network is under validation? Chooses which value to use for truncation_psi.", "\n", "return_dlatents", "=", "False", ",", "# Return dlatents in addition to the images?", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "components", "=", "dnnlib", ".", "EasyDict", "(", ")", ",", "# Container for sub-networks. Retained between calls.", "\n", "mapping_func", "=", "'G_mapping'", ",", "# Build func name for the mapping network.", "\n", "synthesis_func", "=", "'G_synthesis_stylegan2'", ",", "# Build func name for the synthesis network.", "\n", "**", "kwargs", ")", ":", "# Arguments for sub-networks (mapping and synthesis).", "\n", "\n", "# Validate arguments.", "\n", "    ", "assert", "not", "is_training", "or", "not", "is_validation", "\n", "assert", "isinstance", "(", "components", ",", "dnnlib", ".", "EasyDict", ")", "\n", "if", "is_validation", ":", "\n", "        ", "truncation_psi", "=", "truncation_psi_val", "\n", "truncation_cutoff", "=", "truncation_cutoff_val", "\n", "", "if", "is_training", "or", "(", "truncation_psi", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "truncation_psi", ")", "and", "truncation_psi", "==", "1", ")", ":", "\n", "        ", "truncation_psi", "=", "None", "\n", "", "if", "is_training", ":", "\n", "        ", "truncation_cutoff", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "dlatent_avg_beta", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "dlatent_avg_beta", ")", "and", "dlatent_avg_beta", "==", "1", ")", ":", "\n", "        ", "dlatent_avg_beta", "=", "None", "\n", "", "if", "not", "is_training", "or", "(", "style_mixing_prob", "is", "not", "None", "and", "not", "tflib", ".", "is_tf_expression", "(", "style_mixing_prob", ")", "and", "style_mixing_prob", "<=", "0", ")", ":", "\n", "        ", "style_mixing_prob", "=", "None", "\n", "\n", "# Setup components.", "\n", "", "if", "'synthesis'", "not", "in", "components", ":", "\n", "        ", "components", ".", "synthesis", "=", "tflib", ".", "Network", "(", "'G_synthesis'", ",", "func_name", "=", "globals", "(", ")", "[", "synthesis_func", "]", ",", "**", "kwargs", ")", "\n", "", "num_layers", "=", "components", ".", "synthesis", ".", "input_shape", "[", "1", "]", "\n", "dlatent_size", "=", "components", ".", "synthesis", ".", "input_shape", "[", "2", "]", "\n", "if", "'mapping'", "not", "in", "components", ":", "\n", "        ", "components", ".", "mapping", "=", "tflib", ".", "Network", "(", "'G_mapping'", ",", "func_name", "=", "globals", "(", ")", "[", "mapping_func", "]", ",", "dlatent_broadcast", "=", "num_layers", ",", "**", "kwargs", ")", "\n", "\n", "# Setup variables.", "\n", "", "lod_in", "=", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0", ")", ",", "trainable", "=", "False", ")", "\n", "dlatent_avg", "=", "tf", ".", "get_variable", "(", "'dlatent_avg'", ",", "shape", "=", "[", "dlatent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ",", "trainable", "=", "False", ")", "\n", "\n", "# Evaluate mapping network.", "\n", "dlatents", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents_in", ",", "labels_in", ",", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "dlatents", "=", "tf", ".", "cast", "(", "dlatents", ",", "tf", ".", "float32", ")", "\n", "\n", "# Update moving average of W.", "\n", "if", "dlatent_avg_beta", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'DlatentAvg'", ")", ":", "\n", "            ", "batch_avg", "=", "tf", ".", "reduce_mean", "(", "dlatents", "[", ":", ",", "0", "]", ",", "axis", "=", "0", ")", "\n", "update_op", "=", "tf", ".", "assign", "(", "dlatent_avg", ",", "tflib", ".", "lerp", "(", "batch_avg", ",", "dlatent_avg", ",", "dlatent_avg_beta", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "update_op", "]", ")", ":", "\n", "                ", "dlatents", "=", "tf", ".", "identity", "(", "dlatents", ")", "\n", "\n", "# Perform style mixing regularization.", "\n", "", "", "", "if", "style_mixing_prob", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'StyleMix'", ")", ":", "\n", "            ", "latents2", "=", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "latents_in", ")", ")", "\n", "dlatents2", "=", "components", ".", "mapping", ".", "get_output_for", "(", "latents2", ",", "labels_in", ",", "is_training", "=", "is_training", ",", "**", "kwargs", ")", "\n", "dlatents2", "=", "tf", ".", "cast", "(", "dlatents2", ",", "tf", ".", "float32", ")", "\n", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "cur_layers", "=", "num_layers", "-", "tf", ".", "cast", "(", "lod_in", ",", "tf", ".", "int32", ")", "*", "2", "\n", "mixing_cutoff", "=", "tf", ".", "cond", "(", "\n", "tf", ".", "random_uniform", "(", "[", "]", ",", "0.0", ",", "1.0", ")", "<", "style_mixing_prob", ",", "\n", "lambda", ":", "tf", ".", "random_uniform", "(", "[", "]", ",", "1", ",", "cur_layers", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "lambda", ":", "cur_layers", ")", "\n", "dlatents", "=", "tf", ".", "where", "(", "tf", ".", "broadcast_to", "(", "layer_idx", "<", "mixing_cutoff", ",", "tf", ".", "shape", "(", "dlatents", ")", ")", ",", "dlatents", ",", "dlatents2", ")", "\n", "\n", "# Apply truncation trick.", "\n", "", "", "if", "truncation_psi", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Truncation'", ")", ":", "\n", "            ", "layer_idx", "=", "np", ".", "arange", "(", "num_layers", ")", "[", "np", ".", "newaxis", ",", ":", ",", "np", ".", "newaxis", "]", "\n", "layer_psi", "=", "np", ".", "ones", "(", "layer_idx", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "truncation_cutoff", "is", "None", ":", "\n", "                ", "layer_psi", "*=", "truncation_psi", "\n", "", "else", ":", "\n", "                ", "layer_psi", "=", "tf", ".", "where", "(", "layer_idx", "<", "truncation_cutoff", ",", "layer_psi", "*", "truncation_psi", ",", "layer_psi", ")", "\n", "", "dlatents", "=", "tflib", ".", "lerp", "(", "dlatent_avg", ",", "dlatents", ",", "layer_psi", ")", "\n", "\n", "# Evaluate synthesis network.", "\n", "", "", "deps", "=", "[", "]", "\n", "if", "'lod'", "in", "components", ".", "synthesis", ".", "vars", ":", "\n", "        ", "deps", ".", "append", "(", "tf", ".", "assign", "(", "components", ".", "synthesis", ".", "vars", "[", "'lod'", "]", ",", "lod_in", ")", ")", "\n", "", "with", "tf", ".", "control_dependencies", "(", "deps", ")", ":", "\n", "        ", "images_out", "=", "components", ".", "synthesis", ".", "get_output_for", "(", "dlatents", ",", "is_training", "=", "is_training", ",", "force_clean_graph", "=", "is_template_graph", ",", "**", "kwargs", ")", "\n", "\n", "# Return requested outputs.", "\n", "", "images_out", "=", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "if", "return_dlatents", ":", "\n", "        ", "return", "images_out", ",", "dlatents", "\n", "", "return", "images_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.G_mapping": [[251, 301], ["tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "tensorflow.as_dtype", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.matmul", "tensorflow.concat", "tensorflow.variable_scope", "tensorflow.rsqrt", "tensorflow.variable_scope", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "tensorflow.tile", "tensorflow.cast", "networks_stylegan2.dense_layer", "tensorflow.initializers.random_normal", "tensorflow.reduce_mean", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.dense_layer"], ["", "def", "G_mapping", "(", "\n", "latents_in", ",", "# First input: Latent vectors (Z) [minibatch, latent_size].", "\n", "labels_in", ",", "# Second input: Conditioning labels [minibatch, label_size].", "\n", "latent_size", "=", "512", ",", "# Latent vector (Z) dimensionality.", "\n", "label_size", "=", "0", ",", "# Label dimensionality, 0 if no labels.", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "dlatent_broadcast", "=", "None", ",", "# Output disentangled latent (W) as [minibatch, dlatent_size] or [minibatch, dlatent_broadcast, dlatent_size].", "\n", "mapping_layers", "=", "8", ",", "# Number of mapping layers.", "\n", "mapping_fmaps", "=", "512", ",", "# Number of activations in the mapping layers.", "\n", "mapping_lrmul", "=", "0.01", ",", "# Learning rate multiplier for the mapping layers.", "\n", "mapping_nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "normalize_latents", "=", "True", ",", "# Normalize latent vectors (Z) before feeding them to the mapping layers?", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "act", "=", "mapping_nonlinearity", "\n", "\n", "# Inputs.", "\n", "latents_in", ".", "set_shape", "(", "[", "None", ",", "latent_size", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "latents_in", "=", "tf", ".", "cast", "(", "latents_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "x", "=", "latents_in", "\n", "\n", "# Embed labels and concatenate them with latents.", "\n", "if", "label_size", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'LabelConcat'", ")", ":", "\n", "            ", "w", "=", "tf", ".", "get_variable", "(", "'weight'", ",", "shape", "=", "[", "label_size", ",", "latent_size", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "\n", "y", "=", "tf", ".", "matmul", "(", "labels_in", ",", "tf", ".", "cast", "(", "w", ",", "dtype", ")", ")", "\n", "x", "=", "tf", ".", "concat", "(", "[", "x", ",", "y", "]", ",", "axis", "=", "1", ")", "\n", "\n", "# Normalize latents.", "\n", "", "", "if", "normalize_latents", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Normalize'", ")", ":", "\n", "            ", "x", "*=", "tf", ".", "rsqrt", "(", "tf", ".", "reduce_mean", "(", "tf", ".", "square", "(", "x", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "+", "1e-8", ")", "\n", "\n", "# Mapping layers.", "\n", "", "", "for", "layer_idx", "in", "range", "(", "mapping_layers", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Dense%d'", "%", "layer_idx", ")", ":", "\n", "            ", "fmaps", "=", "dlatent_size", "if", "layer_idx", "==", "mapping_layers", "-", "1", "else", "mapping_fmaps", "\n", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "fmaps", ",", "lrmul", "=", "mapping_lrmul", ")", ",", "act", "=", "act", ",", "lrmul", "=", "mapping_lrmul", ")", "\n", "\n", "# Broadcast.", "\n", "", "", "if", "dlatent_broadcast", "is", "not", "None", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Broadcast'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "tile", "(", "x", "[", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "dlatent_broadcast", ",", "1", "]", ")", "\n", "\n", "# Output.", "\n", "", "", "assert", "x", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "x", ",", "name", "=", "'dlatents_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.G_synthesis_stylegan_revised": [[307, 411], ["int", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "numpy.log2", "numpy.clip", "tensorflow.get_variable", "noise_inputs.append", "networks_stylegan2.modulated_conv2d_layer", "tensorflow.get_variable", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "range", "networks_stylegan2.G_synthesis_stylegan_revised.torgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.modulated_conv2d_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act"], ["", "def", "G_synthesis_stylegan_revised", "(", "\n", "dlatents_in", ",", "# Input: Disentangled latents (W) [minibatch, num_layers, dlatent_size].", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "randomize_noise", "=", "True", ",", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "fused_modconv", "=", "True", ",", "# Implement modulated_conv2d_layer() as a single fused op?", "\n", "structure", "=", "'auto'", ",", "# 'fixed' = no progressive growing, 'linear' = human-readable, 'recursive' = efficient, 'auto' = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "force_clean_graph", "=", "False", ",", "# True = construct a clean graph that looks nice in TensorBoard, False = default behavior.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "if", "is_template_graph", ":", "force_clean_graph", "=", "True", "\n", "if", "force_clean_graph", ":", "randomize_noise", "=", "False", "\n", "if", "structure", "==", "'auto'", ":", "structure", "=", "'linear'", "if", "force_clean_graph", "else", "'recursive'", "\n", "act", "=", "nonlinearity", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "images_out", "=", "None", "\n", "\n", "# Primary inputs.", "\n", "dlatents_in", ".", "set_shape", "(", "[", "None", ",", "num_layers", ",", "dlatent_size", "]", ")", "\n", "dlatents_in", "=", "tf", ".", "cast", "(", "dlatents_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "\n", "# Noise inputs.", "\n", "noise_inputs", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "        ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "noise_inputs", ".", "append", "(", "tf", ".", "get_variable", "(", "'noise%d'", "%", "layer_idx", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ",", "trainable", "=", "False", ")", ")", "\n", "\n", "# Single convolution layer with all the bells and whistles.", "\n", "", "def", "layer", "(", "x", ",", "layer_idx", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ")", ":", "\n", "        ", "x", "=", "modulated_conv2d_layer", "(", "x", ",", "dlatents_in", "[", ":", ",", "layer_idx", "]", ",", "fmaps", "=", "fmaps", ",", "kernel", "=", "kernel", ",", "up", "=", "up", ",", "resample_kernel", "=", "resample_kernel", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "if", "randomize_noise", ":", "\n", "            ", "noise", "=", "tf", ".", "random_normal", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "tf", ".", "cast", "(", "noise_inputs", "[", "layer_idx", "]", ",", "x", ".", "dtype", ")", "\n", "", "noise_strength", "=", "tf", ".", "get_variable", "(", "'noise_strength'", ",", "shape", "=", "[", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "x", "+=", "noise", "*", "tf", ".", "cast", "(", "noise_strength", ",", "x", ".", "dtype", ")", "\n", "return", "apply_bias_act", "(", "x", ",", "act", "=", "act", ")", "\n", "\n", "# Early layers.", "\n", "", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Const'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "get_variable", "(", "'const'", ",", "shape", "=", "[", "1", ",", "nf", "(", "1", ")", ",", "4", ",", "4", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "\n", "x", "=", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "x", ",", "dtype", ")", ",", "[", "tf", ".", "shape", "(", "dlatents_in", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "0", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", "\n", "\n", "# Building blocks for remaining layers.", "\n", "", "", "def", "block", "(", "res", ",", "x", ")", ":", "# res = 3..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "5", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "up", "=", "True", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "4", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", "\n", "", "return", "x", "\n", "", "", "def", "torgb", "(", "res", ",", "x", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'ToRGB_lod%d'", "%", "(", "resolution_log2", "-", "res", ")", ")", ":", "\n", "            ", "return", "apply_bias_act", "(", "modulated_conv2d_layer", "(", "x", ",", "dlatents_in", "[", ":", ",", "res", "*", "2", "-", "3", "]", ",", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "demodulate", "=", "False", ",", "fused_modconv", "=", "fused_modconv", ")", ")", "\n", "\n", "# Fixed structure: simple and efficient, but does not support progressive growing.", "\n", "", "", "if", "structure", "==", "'fixed'", ":", "\n", "        ", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "x", "=", "block", "(", "res", ",", "x", ")", "\n", "", "images_out", "=", "torgb", "(", "resolution_log2", ",", "x", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "images_out", "=", "torgb", "(", "2", ",", "x", ")", "\n", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "res", ",", "x", ")", "\n", "img", "=", "torgb", "(", "res", ",", "x", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Upsample_lod%d'", "%", "lod", ")", ":", "\n", "                ", "images_out", "=", "upsample_2d", "(", "images_out", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "images_out", "=", "tflib", ".", "lerp_clip", "(", "img", ",", "images_out", ",", "lod_in", "-", "lod", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "\n", "            ", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "", "def", "grow", "(", "x", ",", "res", ",", "lod", ")", ":", "\n", "            ", "y", "=", "block", "(", "res", ",", "x", ")", "\n", "img", "=", "lambda", ":", "naive_upsample_2d", "(", "torgb", "(", "res", ",", "y", ")", ",", "factor", "=", "2", "**", "lod", ")", "\n", "img", "=", "cset", "(", "img", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "naive_upsample_2d", "(", "tflib", ".", "lerp", "(", "torgb", "(", "res", ",", "y", ")", ",", "upsample_2d", "(", "torgb", "(", "res", "-", "1", ",", "x", ")", ")", ",", "lod_in", "-", "lod", ")", ",", "factor", "=", "2", "**", "lod", ")", ")", "\n", "if", "lod", ">", "0", ":", "img", "=", "cset", "(", "img", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "y", ",", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "return", "img", "(", ")", "\n", "", "images_out", "=", "grow", "(", "x", ",", "3", ",", "resolution_log2", "-", "3", ")", "\n", "\n", "", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.G_synthesis_stylegan2": [[417, 507], ["int", "tf.cast.set_shape", "tensorflow.cast", "range", "range", "tensorflow.identity", "numpy.log2", "numpy.clip", "noise_inputs.append", "networks_stylegan2.modulated_conv2d_layer", "tensorflow.get_variable", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "tensorflow.as_dtype", "int", "tensorflow.get_variable", "tensorflow.random_normal", "tensorflow.cast", "tensorflow.cast", "tensorflow.variable_scope", "networks_stylegan2.G_synthesis_stylegan_revised.layer"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.modulated_conv2d_layer", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act"], ["", "def", "G_synthesis_stylegan2", "(", "\n", "dlatents_in", ",", "# Input: Disentangled latents (W) [minibatch, num_layers, dlatent_size].", "\n", "dlatent_size", "=", "512", ",", "# Disentangled latent (W) dimensionality.", "\n", "num_channels", "=", "3", ",", "# Number of output color channels.", "\n", "resolution", "=", "1024", ",", "# Output resolution.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "randomize_noise", "=", "True", ",", "# True = randomize noise inputs every time (non-deterministic), False = read noise inputs from variables.", "\n", "architecture", "=", "'skip'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "fused_modconv", "=", "True", ",", "# Implement modulated_conv2d_layer() as a single fused op?", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "act", "=", "nonlinearity", "\n", "num_layers", "=", "resolution_log2", "*", "2", "-", "2", "\n", "images_out", "=", "None", "\n", "\n", "# Primary inputs.", "\n", "dlatents_in", ".", "set_shape", "(", "[", "None", ",", "num_layers", ",", "dlatent_size", "]", ")", "\n", "dlatents_in", "=", "tf", ".", "cast", "(", "dlatents_in", ",", "dtype", ")", "\n", "\n", "# Noise inputs.", "\n", "noise_inputs", "=", "[", "]", "\n", "for", "layer_idx", "in", "range", "(", "num_layers", "-", "1", ")", ":", "\n", "        ", "res", "=", "(", "layer_idx", "+", "5", ")", "//", "2", "\n", "shape", "=", "[", "1", ",", "1", ",", "2", "**", "res", ",", "2", "**", "res", "]", "\n", "noise_inputs", ".", "append", "(", "tf", ".", "get_variable", "(", "'noise%d'", "%", "layer_idx", ",", "shape", "=", "shape", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ",", "trainable", "=", "False", ")", ")", "\n", "\n", "# Single convolution layer with all the bells and whistles.", "\n", "", "def", "layer", "(", "x", ",", "layer_idx", ",", "fmaps", ",", "kernel", ",", "up", "=", "False", ")", ":", "\n", "        ", "x", "=", "modulated_conv2d_layer", "(", "x", ",", "dlatents_in", "[", ":", ",", "layer_idx", "]", ",", "fmaps", "=", "fmaps", ",", "kernel", "=", "kernel", ",", "up", "=", "up", ",", "resample_kernel", "=", "resample_kernel", ",", "fused_modconv", "=", "fused_modconv", ")", "\n", "if", "randomize_noise", ":", "\n", "            ", "noise", "=", "tf", ".", "random_normal", "(", "[", "tf", ".", "shape", "(", "x", ")", "[", "0", "]", ",", "1", ",", "x", ".", "shape", "[", "2", "]", ",", "x", ".", "shape", "[", "3", "]", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "noise", "=", "tf", ".", "cast", "(", "noise_inputs", "[", "layer_idx", "]", ",", "x", ".", "dtype", ")", "\n", "", "noise_strength", "=", "tf", ".", "get_variable", "(", "'noise_strength'", ",", "shape", "=", "[", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "zeros", "(", ")", ")", "\n", "x", "+=", "noise", "*", "tf", ".", "cast", "(", "noise_strength", ",", "x", ".", "dtype", ")", "\n", "return", "apply_bias_act", "(", "x", ",", "act", "=", "act", ")", "\n", "\n", "# Building blocks for main layers.", "\n", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 3..resolution_log2", "\n", "        ", "t", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0_up'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "5", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ",", "up", "=", "True", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "res", "*", "2", "-", "4", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", "\n", "", "if", "architecture", "==", "'resnet'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Skip'", ")", ":", "\n", "                ", "t", "=", "conv2d_layer", "(", "t", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ",", "up", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", "\n", "x", "=", "(", "x", "+", "t", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "", "return", "x", "\n", "", "def", "upsample", "(", "y", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Upsample'", ")", ":", "\n", "            ", "return", "upsample_2d", "(", "y", ",", "k", "=", "resample_kernel", ")", "\n", "", "", "def", "torgb", "(", "x", ",", "y", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'ToRGB'", ")", ":", "\n", "            ", "t", "=", "apply_bias_act", "(", "modulated_conv2d_layer", "(", "x", ",", "dlatents_in", "[", ":", ",", "res", "*", "2", "-", "3", "]", ",", "fmaps", "=", "num_channels", ",", "kernel", "=", "1", ",", "demodulate", "=", "False", ",", "fused_modconv", "=", "fused_modconv", ")", ")", "\n", "return", "t", "if", "y", "is", "None", "else", "y", "+", "t", "\n", "\n", "# Early layers.", "\n", "", "", "y", "=", "None", "\n", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Const'", ")", ":", "\n", "            ", "x", "=", "tf", ".", "get_variable", "(", "'const'", ",", "shape", "=", "[", "1", ",", "nf", "(", "1", ")", ",", "4", ",", "4", "]", ",", "initializer", "=", "tf", ".", "initializers", ".", "random_normal", "(", ")", ")", "\n", "x", "=", "tf", ".", "tile", "(", "tf", ".", "cast", "(", "x", ",", "dtype", ")", ",", "[", "tf", ".", "shape", "(", "dlatents_in", ")", "[", "0", "]", ",", "1", ",", "1", ",", "1", "]", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "layer_idx", "=", "0", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", "\n", "", "if", "architecture", "==", "'skip'", ":", "\n", "            ", "y", "=", "torgb", "(", "x", ",", "y", ",", "2", ")", "\n", "\n", "# Main layers.", "\n", "", "", "for", "res", "in", "range", "(", "3", ",", "resolution_log2", "+", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "if", "architecture", "==", "'skip'", ":", "\n", "                ", "y", "=", "upsample", "(", "y", ")", "\n", "", "if", "architecture", "==", "'skip'", "or", "res", "==", "resolution_log2", ":", "\n", "                ", "y", "=", "torgb", "(", "x", ",", "y", ",", "res", ")", "\n", "", "", "", "images_out", "=", "y", "\n", "\n", "assert", "images_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "return", "tf", ".", "identity", "(", "images_out", ",", "name", "=", "'images_out'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.D_stylegan": [[512, 607], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "tensorflow.cast", "tensorflow.identity", "numpy.log2", "numpy.clip", "tensorflow.get_variable", "networks_stylegan2.D_stylegan.fromrgb"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "def", "D_stylegan", "(", "\n", "images_in", ",", "# First input: Images [minibatch, channel, height, width].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "3", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "1024", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "mbstd_num_features", "=", "1", ",", "# Number of features for the minibatch standard deviation layer.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "structure", "=", "'auto'", ",", "# 'fixed' = no progressive growing, 'linear' = human-readable, 'recursive' = efficient, 'auto' = select automatically.", "\n", "is_template_graph", "=", "False", ",", "# True = template graph constructed by the Network class, False = actual evaluation.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "if", "structure", "==", "'auto'", ":", "structure", "=", "'linear'", "if", "is_template_graph", "else", "'recursive'", "\n", "act", "=", "nonlinearity", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "lod_in", "=", "tf", ".", "cast", "(", "tf", ".", "get_variable", "(", "'lod'", ",", "initializer", "=", "np", ".", "float32", "(", "0.0", ")", ",", "trainable", "=", "False", ")", ",", "dtype", ")", "\n", "\n", "# Building blocks for spatial layers.", "\n", "def", "fromrgb", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB_lod%d'", "%", "(", "resolution_log2", "-", "res", ")", ")", ":", "\n", "            ", "return", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ")", ",", "act", "=", "act", ")", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "                ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "                ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", ",", "act", "=", "act", ")", "\n", "", "return", "x", "\n", "\n", "# Fixed structure: simple and efficient, but does not support progressive growing.", "\n", "", "", "if", "structure", "==", "'fixed'", ":", "\n", "        ", "x", "=", "fromrgb", "(", "images_in", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "\n", "# Linear structure: simple but inefficient.", "\n", "", "", "if", "structure", "==", "'linear'", ":", "\n", "        ", "img", "=", "images_in", "\n", "x", "=", "fromrgb", "(", "img", ",", "resolution_log2", ")", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "            ", "lod", "=", "resolution_log2", "-", "res", "\n", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Downsample_lod%d'", "%", "lod", ")", ":", "\n", "                ", "img", "=", "downsample_2d", "(", "img", ")", "\n", "", "y", "=", "fromrgb", "(", "img", ",", "res", "-", "1", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'Grow_lod%d'", "%", "lod", ")", ":", "\n", "                ", "x", "=", "tflib", ".", "lerp_clip", "(", "x", ",", "y", ",", "lod_in", "-", "lod", ")", "\n", "\n", "# Recursive structure: complex but efficient.", "\n", "", "", "", "if", "structure", "==", "'recursive'", ":", "\n", "        ", "def", "cset", "(", "cur_lambda", ",", "new_cond", ",", "new_lambda", ")", ":", "\n", "            ", "return", "lambda", ":", "tf", ".", "cond", "(", "new_cond", ",", "new_lambda", ",", "cur_lambda", ")", "\n", "", "def", "grow", "(", "res", ",", "lod", ")", ":", "\n", "            ", "x", "=", "lambda", ":", "fromrgb", "(", "naive_downsample_2d", "(", "images_in", ",", "factor", "=", "2", "**", "lod", ")", ",", "res", ")", "\n", "if", "lod", ">", "0", ":", "x", "=", "cset", "(", "x", ",", "(", "lod_in", "<", "lod", ")", ",", "lambda", ":", "grow", "(", "res", "+", "1", ",", "lod", "-", "1", ")", ")", "\n", "x", "=", "block", "(", "x", "(", ")", ",", "res", ")", ";", "y", "=", "lambda", ":", "x", "\n", "y", "=", "cset", "(", "y", ",", "(", "lod_in", ">", "lod", ")", ",", "lambda", ":", "tflib", ".", "lerp", "(", "x", ",", "fromrgb", "(", "naive_downsample_2d", "(", "images_in", ",", "factor", "=", "2", "**", "(", "lod", "+", "1", ")", ")", ",", "res", "-", "1", ")", ",", "lod_in", "-", "lod", ")", ")", "\n", "return", "y", "(", ")", "\n", "", "x", "=", "grow", "(", "3", ",", "resolution_log2", "-", "3", ")", "\n", "\n", "# Final layers at 4x4 resolution.", "\n", "", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "if", "mbstd_group_size", ">", "1", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "                ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ",", "mbstd_num_features", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "0", ")", ")", ",", "act", "=", "act", ")", "\n", "\n", "# Output layer with label conditioning from \"Which Training Methods for GANs do actually Converge?\"", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Output'", ")", ":", "\n", "        ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "max", "(", "labels_in", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ")", "\n", "if", "labels_in", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "x", "=", "tf", ".", "reduce_sum", "(", "x", "*", "labels_in", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "", "scores_out", "=", "x", "\n", "\n", "# Output.", "\n", "assert", "scores_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "scores_out", ",", "name", "=", "'scores_out'", ")", "\n", "return", "scores_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.D_stylegan2": [[613, 696], ["int", "tf.cast.set_shape", "tf.cast.set_shape", "tensorflow.cast", "tensorflow.cast", "range", "tensorflow.identity", "numpy.log2", "numpy.clip", "tensorflow.variable_scope", "tensorflow.variable_scope", "networks_stylegan2.apply_bias_act", "tensorflow.as_dtype", "int", "tensorflow.variable_scope", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "networks_stylegan2.apply_bias_act", "tensorflow.variable_scope", "dnnlib.tflib.ops.upfirdn_2d.downsample_2d", "tensorflow.variable_scope", "networks_stylegan2.G_synthesis_stylegan_revised.block"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_stylegan2.apply_bias_act", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.downsample_2d"], ["", "def", "D_stylegan2", "(", "\n", "images_in", ",", "# First input: Images [minibatch, channel, height, width].", "\n", "labels_in", ",", "# Second input: Labels [minibatch, label_size].", "\n", "num_channels", "=", "3", ",", "# Number of input color channels. Overridden based on dataset.", "\n", "resolution", "=", "1024", ",", "# Input resolution. Overridden based on dataset.", "\n", "label_size", "=", "0", ",", "# Dimensionality of the labels, 0 if no labels. Overridden based on dataset.", "\n", "fmap_base", "=", "16", "<<", "10", ",", "# Overall multiplier for the number of feature maps.", "\n", "fmap_decay", "=", "1.0", ",", "# log2 feature map reduction when doubling the resolution.", "\n", "fmap_min", "=", "1", ",", "# Minimum number of feature maps in any layer.", "\n", "fmap_max", "=", "512", ",", "# Maximum number of feature maps in any layer.", "\n", "architecture", "=", "'resnet'", ",", "# Architecture: 'orig', 'skip', 'resnet'.", "\n", "nonlinearity", "=", "'lrelu'", ",", "# Activation function: 'relu', 'lrelu', etc.", "\n", "mbstd_group_size", "=", "4", ",", "# Group size for the minibatch standard deviation layer, 0 = disable.", "\n", "mbstd_num_features", "=", "1", ",", "# Number of features for the minibatch standard deviation layer.", "\n", "dtype", "=", "'float32'", ",", "# Data type to use for activations and outputs.", "\n", "resample_kernel", "=", "[", "1", ",", "3", ",", "3", ",", "1", "]", ",", "# Low-pass filter to apply when resampling activations. None = no filtering.", "\n", "**", "_kwargs", ")", ":", "# Ignore unrecognized keyword args.", "\n", "\n", "    ", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "resolution", ")", ")", "\n", "assert", "resolution", "==", "2", "**", "resolution_log2", "and", "resolution", ">=", "4", "\n", "def", "nf", "(", "stage", ")", ":", "return", "np", ".", "clip", "(", "int", "(", "fmap_base", "/", "(", "2.0", "**", "(", "stage", "*", "fmap_decay", ")", ")", ")", ",", "fmap_min", ",", "fmap_max", ")", "\n", "assert", "architecture", "in", "[", "'orig'", ",", "'skip'", ",", "'resnet'", "]", "\n", "act", "=", "nonlinearity", "\n", "\n", "images_in", ".", "set_shape", "(", "[", "None", ",", "num_channels", ",", "resolution", ",", "resolution", "]", ")", "\n", "labels_in", ".", "set_shape", "(", "[", "None", ",", "label_size", "]", ")", "\n", "images_in", "=", "tf", ".", "cast", "(", "images_in", ",", "dtype", ")", "\n", "labels_in", "=", "tf", ".", "cast", "(", "labels_in", ",", "dtype", ")", "\n", "\n", "# Building blocks for main layers.", "\n", "def", "fromrgb", "(", "x", ",", "y", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'FromRGB'", ")", ":", "\n", "            ", "t", "=", "apply_bias_act", "(", "conv2d_layer", "(", "y", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "1", ")", ",", "act", "=", "act", ")", "\n", "return", "t", "if", "x", "is", "None", "else", "x", "+", "t", "\n", "", "", "def", "block", "(", "x", ",", "res", ")", ":", "# res = 2..resolution_log2", "\n", "        ", "t", "=", "x", "\n", "with", "tf", ".", "variable_scope", "(", "'Conv0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Conv1_down'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "3", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", ",", "act", "=", "act", ")", "\n", "", "if", "architecture", "==", "'resnet'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'Skip'", ")", ":", "\n", "                ", "t", "=", "conv2d_layer", "(", "t", ",", "fmaps", "=", "nf", "(", "res", "-", "2", ")", ",", "kernel", "=", "1", ",", "down", "=", "True", ",", "resample_kernel", "=", "resample_kernel", ")", "\n", "x", "=", "(", "x", "+", "t", ")", "*", "(", "1", "/", "np", ".", "sqrt", "(", "2", ")", ")", "\n", "", "", "return", "x", "\n", "", "def", "downsample", "(", "y", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'Downsample'", ")", ":", "\n", "            ", "return", "downsample_2d", "(", "y", ",", "k", "=", "resample_kernel", ")", "\n", "\n", "# Main layers.", "\n", "", "", "x", "=", "None", "\n", "y", "=", "images_in", "\n", "for", "res", "in", "range", "(", "resolution_log2", ",", "2", ",", "-", "1", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'%dx%d'", "%", "(", "2", "**", "res", ",", "2", "**", "res", ")", ")", ":", "\n", "            ", "if", "architecture", "==", "'skip'", "or", "res", "==", "resolution_log2", ":", "\n", "                ", "x", "=", "fromrgb", "(", "x", ",", "y", ",", "res", ")", "\n", "", "x", "=", "block", "(", "x", ",", "res", ")", "\n", "if", "architecture", "==", "'skip'", ":", "\n", "                ", "y", "=", "downsample", "(", "y", ")", "\n", "\n", "# Final layers.", "\n", "", "", "", "with", "tf", ".", "variable_scope", "(", "'4x4'", ")", ":", "\n", "        ", "if", "architecture", "==", "'skip'", ":", "\n", "            ", "x", "=", "fromrgb", "(", "x", ",", "y", ",", "2", ")", "\n", "", "if", "mbstd_group_size", ">", "1", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'MinibatchStddev'", ")", ":", "\n", "                ", "x", "=", "minibatch_stddev_layer", "(", "x", ",", "mbstd_group_size", ",", "mbstd_num_features", ")", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Conv'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "conv2d_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "1", ")", ",", "kernel", "=", "3", ")", ",", "act", "=", "act", ")", "\n", "", "with", "tf", ".", "variable_scope", "(", "'Dense0'", ")", ":", "\n", "            ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "nf", "(", "0", ")", ")", ",", "act", "=", "act", ")", "\n", "\n", "# Output layer with label conditioning from \"Which Training Methods for GANs do actually Converge?\"", "\n", "", "", "with", "tf", ".", "variable_scope", "(", "'Output'", ")", ":", "\n", "        ", "x", "=", "apply_bias_act", "(", "dense_layer", "(", "x", ",", "fmaps", "=", "max", "(", "labels_in", ".", "shape", "[", "1", "]", ",", "1", ")", ")", ")", "\n", "if", "labels_in", ".", "shape", "[", "1", "]", ">", "0", ":", "\n", "            ", "x", "=", "tf", ".", "reduce_sum", "(", "x", "*", "labels_in", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "", "", "scores_out", "=", "x", "\n", "\n", "# Output.", "\n", "assert", "scores_out", ".", "dtype", "==", "tf", ".", "as_dtype", "(", "dtype", ")", "\n", "scores_out", "=", "tf", ".", "identity", "(", "scores_out", ",", "name", "=", "'scores_out'", ")", "\n", "return", "scores_out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.__init__": [[17, 49], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "num_steps", "=", "1000", "\n", "self", ".", "dlatent_avg_samples", "=", "10000", "\n", "self", ".", "initial_learning_rate", "=", "0.1", "\n", "self", ".", "initial_noise_factor", "=", "0.05", "\n", "self", ".", "lr_rampdown_length", "=", "0.25", "\n", "self", ".", "lr_rampup_length", "=", "0.05", "\n", "self", ".", "noise_ramp_length", "=", "0.75", "\n", "self", ".", "regularize_noise_weight", "=", "1e5", "\n", "self", ".", "verbose", "=", "False", "\n", "self", ".", "clone_net", "=", "True", "\n", "\n", "self", ".", "_Gs", "=", "None", "\n", "self", ".", "_minibatch_size", "=", "None", "\n", "self", ".", "_dlatent_avg", "=", "None", "\n", "self", ".", "_dlatent_std", "=", "None", "\n", "self", ".", "_noise_vars", "=", "None", "\n", "self", ".", "_noise_init_op", "=", "None", "\n", "self", ".", "_noise_normalize_op", "=", "None", "\n", "self", ".", "_dlatents_var", "=", "None", "\n", "self", ".", "_noise_in", "=", "None", "\n", "self", ".", "_dlatents_expr", "=", "None", "\n", "self", ".", "_images_expr", "=", "None", "\n", "self", ".", "_target_images_var", "=", "None", "\n", "self", ".", "_lpips", "=", "None", "\n", "self", ".", "_dist", "=", "None", "\n", "self", ".", "_loss", "=", "None", "\n", "self", ".", "_reg_sizes", "=", "None", "\n", "self", ".", "_lrate_in", "=", "None", "\n", "self", ".", "_opt", "=", "None", "\n", "self", ".", "_opt_step", "=", "None", "\n", "self", ".", "_cur_step", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info": [[50, 53], ["print"], "methods", ["None"], ["", "def", "_info", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "print", "(", "'Projector:'", ",", "*", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.set_network": [[54, 133], ["projector.Projector._info", "numpy.random.RandomState().randn", "numpy.mean", "projector.Projector._info", "projector.Projector._info", "tensorflow.group", "tensorflow.group", "projector.Projector._info", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.tile", "projector.Projector._Gs.components.synthesis.get_output_for", "tensorflow.reduce_mean.shape.as_list", "projector.Projector._info", "tensorflow.Variable", "projector.Projector._lpips.get_output_for", "tensorflow.reduce_sum", "projector.Projector._info", "projector.Projector._info", "tensorflow.placeholder", "dnnlib.tflib.Optimizer", "dnnlib.tflib.Optimizer", "dnnlib.tflib.Optimizer", "dnnlib.tflib.Optimizer", "projector.Projector._opt.register_gradients", "projector.Projector._opt.apply_updates", "projector.Projector._Gs.clone", "projector.Projector._Gs.components.mapping.run", "projector.Projector._noise_vars.append", "noise_init_ops.append", "tensorflow.reduce_mean", "noise_normalize_ops.append", "projector.Projector._info", "tensorflow.zeros", "tensorflow.random.normal", "tensorflow.reduce_mean", "tensorflow.zeros", "training.misc.load_pkl", "numpy.random.RandomState", "numpy.sum", "len", "tensorflow.assign", "tensorflow.reduce_mean", "tensorflow.assign", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_mean", "tensorflow.random_normal", "list", "tensorflow.shape", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.roll", "tensorflow.roll"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_output_for", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.register_gradients", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.apply_updates", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.clone", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.load_pkl"], ["", "", "def", "set_network", "(", "self", ",", "Gs", ",", "minibatch_size", "=", "1", ")", ":", "\n", "        ", "assert", "minibatch_size", "==", "1", "\n", "self", ".", "_Gs", "=", "Gs", "\n", "self", ".", "_minibatch_size", "=", "minibatch_size", "\n", "if", "self", ".", "_Gs", "is", "None", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "clone_net", ":", "\n", "            ", "self", ".", "_Gs", "=", "self", ".", "_Gs", ".", "clone", "(", ")", "\n", "\n", "# Find dlatent stats.", "\n", "", "self", ".", "_info", "(", "'Finding W midpoint and stddev using %d samples...'", "%", "self", ".", "dlatent_avg_samples", ")", "\n", "latent_samples", "=", "np", ".", "random", ".", "RandomState", "(", "123", ")", ".", "randn", "(", "self", ".", "dlatent_avg_samples", ",", "*", "self", ".", "_Gs", ".", "input_shapes", "[", "0", "]", "[", "1", ":", "]", ")", "\n", "dlatent_samples", "=", "self", ".", "_Gs", ".", "components", ".", "mapping", ".", "run", "(", "latent_samples", ",", "None", ")", "[", ":", ",", ":", "1", ",", ":", "]", "# [N, 1, 512]", "\n", "self", ".", "_dlatent_avg", "=", "np", ".", "mean", "(", "dlatent_samples", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "# [1, 1, 512]", "\n", "self", ".", "_dlatent_std", "=", "(", "np", ".", "sum", "(", "(", "dlatent_samples", "-", "self", ".", "_dlatent_avg", ")", "**", "2", ")", "/", "self", ".", "dlatent_avg_samples", ")", "**", "0.5", "\n", "self", ".", "_info", "(", "'std = %g'", "%", "self", ".", "_dlatent_std", ")", "\n", "\n", "# Find noise inputs.", "\n", "self", ".", "_info", "(", "'Setting up noise inputs...'", ")", "\n", "self", ".", "_noise_vars", "=", "[", "]", "\n", "noise_init_ops", "=", "[", "]", "\n", "noise_normalize_ops", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "n", "=", "'G_synthesis/noise%d'", "%", "len", "(", "self", ".", "_noise_vars", ")", "\n", "if", "not", "n", "in", "self", ".", "_Gs", ".", "vars", ":", "\n", "                ", "break", "\n", "", "v", "=", "self", ".", "_Gs", ".", "vars", "[", "n", "]", "\n", "self", ".", "_noise_vars", ".", "append", "(", "v", ")", "\n", "noise_init_ops", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "tf", ".", "random_normal", "(", "tf", ".", "shape", "(", "v", ")", ",", "dtype", "=", "tf", ".", "float32", ")", ")", ")", "\n", "noise_mean", "=", "tf", ".", "reduce_mean", "(", "v", ")", "\n", "noise_std", "=", "tf", ".", "reduce_mean", "(", "(", "v", "-", "noise_mean", ")", "**", "2", ")", "**", "0.5", "\n", "noise_normalize_ops", ".", "append", "(", "tf", ".", "assign", "(", "v", ",", "(", "v", "-", "noise_mean", ")", "/", "noise_std", ")", ")", "\n", "self", ".", "_info", "(", "n", ",", "v", ")", "\n", "", "self", ".", "_noise_init_op", "=", "tf", ".", "group", "(", "*", "noise_init_ops", ")", "\n", "self", ".", "_noise_normalize_op", "=", "tf", ".", "group", "(", "*", "noise_normalize_ops", ")", "\n", "\n", "# Image output graph.", "\n", "self", ".", "_info", "(", "'Building image output graph...'", ")", "\n", "self", ".", "_dlatents_var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "[", "self", ".", "_minibatch_size", "]", "+", "list", "(", "self", ".", "_dlatent_avg", ".", "shape", "[", "1", ":", "]", ")", ")", ",", "name", "=", "'dlatents_var'", ")", "\n", "self", ".", "_noise_in", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "name", "=", "'noise_in'", ")", "\n", "dlatents_noise", "=", "tf", ".", "random", ".", "normal", "(", "shape", "=", "self", ".", "_dlatents_var", ".", "shape", ")", "*", "self", ".", "_noise_in", "\n", "self", ".", "_dlatents_expr", "=", "tf", ".", "tile", "(", "self", ".", "_dlatents_var", "+", "dlatents_noise", ",", "[", "1", ",", "self", ".", "_Gs", ".", "components", ".", "synthesis", ".", "input_shape", "[", "1", "]", ",", "1", "]", ")", "\n", "self", ".", "_images_expr", "=", "self", ".", "_Gs", ".", "components", ".", "synthesis", ".", "get_output_for", "(", "self", ".", "_dlatents_expr", ",", "randomize_noise", "=", "False", ")", "\n", "\n", "# Downsample image to 256x256 if it's larger than that. VGG was built for 224x224 images.", "\n", "proc_images_expr", "=", "(", "self", ".", "_images_expr", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "sh", "=", "proc_images_expr", ".", "shape", ".", "as_list", "(", ")", "\n", "if", "sh", "[", "2", "]", ">", "256", ":", "\n", "            ", "factor", "=", "sh", "[", "2", "]", "//", "256", "\n", "proc_images_expr", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reshape", "(", "proc_images_expr", ",", "[", "-", "1", ",", "sh", "[", "1", "]", ",", "sh", "[", "2", "]", "//", "factor", ",", "factor", ",", "sh", "[", "2", "]", "//", "factor", ",", "factor", "]", ")", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "\n", "# Loss graph.", "\n", "", "self", ".", "_info", "(", "'Building loss graph...'", ")", "\n", "self", ".", "_target_images_var", "=", "tf", ".", "Variable", "(", "tf", ".", "zeros", "(", "proc_images_expr", ".", "shape", ")", ",", "name", "=", "'target_images_var'", ")", "\n", "if", "self", ".", "_lpips", "is", "None", ":", "\n", "            ", "self", ".", "_lpips", "=", "misc", ".", "load_pkl", "(", "'http://d36zk2xti64re0.cloudfront.net/stylegan1/networks/metrics/vgg16_zhang_perceptual.pkl'", ")", "\n", "", "self", ".", "_dist", "=", "self", ".", "_lpips", ".", "get_output_for", "(", "proc_images_expr", ",", "self", ".", "_target_images_var", ")", "\n", "self", ".", "_loss", "=", "tf", ".", "reduce_sum", "(", "self", ".", "_dist", ")", "\n", "\n", "# Noise regularization graph.", "\n", "self", ".", "_info", "(", "'Building noise regularization graph...'", ")", "\n", "reg_loss", "=", "0.0", "\n", "for", "v", "in", "self", ".", "_noise_vars", ":", "\n", "            ", "sz", "=", "v", ".", "shape", "[", "2", "]", "\n", "while", "True", ":", "\n", "                ", "reg_loss", "+=", "tf", ".", "reduce_mean", "(", "v", "*", "tf", ".", "roll", "(", "v", ",", "shift", "=", "1", ",", "axis", "=", "3", ")", ")", "**", "2", "+", "tf", ".", "reduce_mean", "(", "v", "*", "tf", ".", "roll", "(", "v", ",", "shift", "=", "1", ",", "axis", "=", "2", ")", ")", "**", "2", "\n", "if", "sz", "<=", "8", ":", "\n", "                    ", "break", "# Small enough already", "\n", "", "v", "=", "tf", ".", "reshape", "(", "v", ",", "[", "1", ",", "1", ",", "sz", "//", "2", ",", "2", ",", "sz", "//", "2", ",", "2", "]", ")", "# Downscale", "\n", "v", "=", "tf", ".", "reduce_mean", "(", "v", ",", "axis", "=", "[", "3", ",", "5", "]", ")", "\n", "sz", "=", "sz", "//", "2", "\n", "", "", "self", ".", "_loss", "+=", "reg_loss", "*", "self", ".", "regularize_noise_weight", "\n", "\n", "# Optimizer.", "\n", "self", ".", "_info", "(", "'Setting up optimizer...'", ")", "\n", "self", ".", "_lrate_in", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "]", ",", "name", "=", "'lrate_in'", ")", "\n", "self", ".", "_opt", "=", "dnnlib", ".", "tflib", ".", "Optimizer", "(", "learning_rate", "=", "self", ".", "_lrate_in", ")", "\n", "self", ".", "_opt", ".", "register_gradients", "(", "self", ".", "_loss", ",", "[", "self", ".", "_dlatents_var", "]", "+", "self", ".", "_noise_vars", ")", "\n", "self", ".", "_opt_step", "=", "self", ".", "_opt", ".", "apply_updates", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.run": [[134, 146], ["projector.Projector.start", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "projector.Projector.get_dlatents", "projector.Projector.get_noises", "projector.Projector.get_images", "projector.Projector.step"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_dlatents", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_noises", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_images", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step"], ["", "def", "run", "(", "self", ",", "target_images", ")", ":", "\n", "# Run to completion.", "\n", "        ", "self", ".", "start", "(", "target_images", ")", "\n", "while", "self", ".", "_cur_step", "<", "self", ".", "num_steps", ":", "\n", "            ", "self", ".", "step", "(", ")", "\n", "\n", "# Collect results.", "\n", "", "pres", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "pres", ".", "dlatents", "=", "self", ".", "get_dlatents", "(", ")", "\n", "pres", ".", "noises", "=", "self", ".", "get_noises", "(", ")", "\n", "pres", ".", "images", "=", "self", ".", "get_images", "(", ")", "\n", "return", "pres", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start": [[147, 166], ["projector.Projector._info", "numpy.asarray", "projector.Projector._info", "dnnlib.set_vars", "dnnlib.set_vars", "dnnlib.run", "dnnlib.run", "projector.Projector._opt.reset_optimizer_state", "numpy.reshape().mean", "numpy.tile", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.optimizer.Optimizer.reset_optimizer_state"], ["", "def", "start", "(", "self", ",", "target_images", ")", ":", "\n", "        ", "assert", "self", ".", "_Gs", "is", "not", "None", "\n", "\n", "# Prepare target images.", "\n", "self", ".", "_info", "(", "'Preparing target images...'", ")", "\n", "target_images", "=", "np", ".", "asarray", "(", "target_images", ",", "dtype", "=", "'float32'", ")", "\n", "target_images", "=", "(", "target_images", "+", "1", ")", "*", "(", "255", "/", "2", ")", "\n", "sh", "=", "target_images", ".", "shape", "\n", "assert", "sh", "[", "0", "]", "==", "self", ".", "_minibatch_size", "\n", "if", "sh", "[", "2", "]", ">", "self", ".", "_target_images_var", ".", "shape", "[", "2", "]", ":", "\n", "            ", "factor", "=", "sh", "[", "2", "]", "//", "self", ".", "_target_images_var", ".", "shape", "[", "2", "]", "\n", "target_images", "=", "np", ".", "reshape", "(", "target_images", ",", "[", "-", "1", ",", "sh", "[", "1", "]", ",", "sh", "[", "2", "]", "//", "factor", ",", "factor", ",", "sh", "[", "3", "]", "//", "factor", ",", "factor", "]", ")", ".", "mean", "(", "(", "3", ",", "5", ")", ")", "\n", "\n", "# Initialize optimization state.", "\n", "", "self", ".", "_info", "(", "'Initializing optimization state...'", ")", "\n", "tflib", ".", "set_vars", "(", "{", "self", ".", "_target_images_var", ":", "target_images", ",", "self", ".", "_dlatents_var", ":", "np", ".", "tile", "(", "self", ".", "_dlatent_avg", ",", "[", "self", ".", "_minibatch_size", ",", "1", ",", "1", "]", ")", "}", ")", "\n", "tflib", ".", "run", "(", "self", ".", "_noise_init_op", ")", "\n", "self", ".", "_opt", ".", "reset_optimizer_state", "(", ")", "\n", "self", ".", "_cur_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step": [[167, 193], ["min", "dnnlib.run", "dnnlib.run", "dnnlib.run", "dnnlib.run", "projector.Projector._info", "min", "projector.Projector._info", "projector.Projector._info", "max", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector._info"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_cur_step", "is", "not", "None", "\n", "if", "self", ".", "_cur_step", ">=", "self", ".", "num_steps", ":", "\n", "            ", "return", "\n", "", "if", "self", ".", "_cur_step", "==", "0", ":", "\n", "            ", "self", ".", "_info", "(", "'Running...'", ")", "\n", "\n", "# Hyperparameters.", "\n", "", "t", "=", "self", ".", "_cur_step", "/", "self", ".", "num_steps", "\n", "noise_strength", "=", "self", ".", "_dlatent_std", "*", "self", ".", "initial_noise_factor", "*", "max", "(", "0.0", ",", "1.0", "-", "t", "/", "self", ".", "noise_ramp_length", ")", "**", "2", "\n", "lr_ramp", "=", "min", "(", "1.0", ",", "(", "1.0", "-", "t", ")", "/", "self", ".", "lr_rampdown_length", ")", "\n", "lr_ramp", "=", "0.5", "-", "0.5", "*", "np", ".", "cos", "(", "lr_ramp", "*", "np", ".", "pi", ")", "\n", "lr_ramp", "=", "lr_ramp", "*", "min", "(", "1.0", ",", "t", "/", "self", ".", "lr_rampup_length", ")", "\n", "learning_rate", "=", "self", ".", "initial_learning_rate", "*", "lr_ramp", "\n", "\n", "# Train.", "\n", "feed_dict", "=", "{", "self", ".", "_noise_in", ":", "noise_strength", ",", "self", ".", "_lrate_in", ":", "learning_rate", "}", "\n", "_", ",", "dist_value", ",", "loss_value", "=", "tflib", ".", "run", "(", "[", "self", ".", "_opt_step", ",", "self", ".", "_dist", ",", "self", ".", "_loss", "]", ",", "feed_dict", ")", "\n", "tflib", ".", "run", "(", "self", ".", "_noise_normalize_op", ")", "\n", "\n", "# Print status.", "\n", "self", ".", "_cur_step", "+=", "1", "\n", "if", "self", ".", "_cur_step", "==", "self", ".", "num_steps", "or", "self", ".", "_cur_step", "%", "10", "==", "0", ":", "\n", "            ", "self", ".", "_info", "(", "'%-8d%-12g%-12g'", "%", "(", "self", ".", "_cur_step", ",", "dist_value", ",", "loss_value", ")", ")", "\n", "", "if", "self", ".", "_cur_step", "==", "self", ".", "num_steps", ":", "\n", "            ", "self", ".", "_info", "(", "'Done.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_cur_step": [[194, 196], ["None"], "methods", ["None"], ["", "", "def", "get_cur_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_cur_step", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_dlatents": [[197, 199], ["dnnlib.run", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "get_dlatents", "(", "self", ")", ":", "\n", "        ", "return", "tflib", ".", "run", "(", "self", ".", "_dlatents_expr", ",", "{", "self", ".", "_noise_in", ":", "0", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_noises": [[200, 202], ["dnnlib.run", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "get_noises", "(", "self", ")", ":", "\n", "        ", "return", "tflib", ".", "run", "(", "self", ".", "_noise_vars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_images": [[203, 205], ["dnnlib.run", "dnnlib.run"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "def", "get_images", "(", "self", ")", ":", "\n", "        ", "return", "tflib", ".", "run", "(", "self", ".", "_images_expr", ",", "{", "self", ".", "_noise_in", ":", "0", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_generator.generate_images": [[19, 37], ["print", "pretrained_networks.load_networks", "dnnlib.EasyDict", "dnnlib.EasyDict", "dict", "enumerate", "print", "numpy.random.RandomState", "np.random.RandomState.randn", "dnnlib.set_vars", "Gs.run", "PIL.Image.fromarray().save", "Gs.components.synthesis.vars.items", "name.startswith", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "np.random.RandomState.randn", "PIL.Image.fromarray", "len", "var.shape.as_list"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.load_networks", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path"], ["def", "generate_images", "(", "network_pkl", ",", "seeds", ",", "truncation_psi", ")", ":", "\n", "    ", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "_G", ",", "_D", ",", "Gs", "=", "pretrained_networks", ".", "load_networks", "(", "network_pkl", ")", "\n", "noise_vars", "=", "[", "var", "for", "name", ",", "var", "in", "Gs", ".", "components", ".", "synthesis", ".", "vars", ".", "items", "(", ")", "if", "name", ".", "startswith", "(", "'noise'", ")", "]", "\n", "\n", "Gs_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "Gs_kwargs", ".", "output_transform", "=", "dict", "(", "func", "=", "tflib", ".", "convert_images_to_uint8", ",", "nchw_to_nhwc", "=", "True", ")", "\n", "Gs_kwargs", ".", "randomize_noise", "=", "False", "\n", "if", "truncation_psi", "is", "not", "None", ":", "\n", "        ", "Gs_kwargs", ".", "truncation_psi", "=", "truncation_psi", "\n", "\n", "", "for", "seed_idx", ",", "seed", "in", "enumerate", "(", "seeds", ")", ":", "\n", "        ", "print", "(", "'Generating image for seed %d (%d/%d) ...'", "%", "(", "seed", ",", "seed_idx", ",", "len", "(", "seeds", ")", ")", ")", "\n", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "z", "=", "rnd", ".", "randn", "(", "1", ",", "*", "Gs", ".", "input_shape", "[", "1", ":", "]", ")", "# [minibatch, component]", "\n", "tflib", ".", "set_vars", "(", "{", "var", ":", "rnd", ".", "randn", "(", "*", "var", ".", "shape", ".", "as_list", "(", ")", ")", "for", "var", "in", "noise_vars", "}", ")", "# [height, width]", "\n", "images", "=", "Gs", ".", "run", "(", "z", ",", "None", ",", "**", "Gs_kwargs", ")", "# [minibatch, height, width, channel]", "\n", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ",", "'RGB'", ")", ".", "save", "(", "dnnlib", ".", "make_run_dir_path", "(", "'seed%04d.png'", "%", "seed", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_generator.style_mixing_example": [[40, 87], ["print", "pretrained_networks.load_networks", "Gs.get_var", "dnnlib.EasyDict", "dnnlib.EasyDict", "dict", "print", "list", "numpy.stack", "Gs.components.mapping.run", "print", "Gs.components.synthesis.run", "print", "print", "image_dict.items", "print", "PIL.Image.new", "enumerate", "PIL.Image.new.save", "set", "PIL.Image.fromarray().save", "enumerate", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "numpy.random.RandomState().randn", "zip", "zip", "w_dict[].copy", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "PIL.Image.new.paste", "list", "list", "Gs.components.synthesis.run", "PIL.Image.fromarray", "PIL.Image.fromarray", "numpy.random.RandomState", "len", "len"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.load_networks", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.network.Network.get_var", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["", "", "def", "style_mixing_example", "(", "network_pkl", ",", "row_seeds", ",", "col_seeds", ",", "truncation_psi", ",", "col_styles", ",", "minibatch_size", "=", "4", ")", ":", "\n", "    ", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "_G", ",", "_D", ",", "Gs", "=", "pretrained_networks", ".", "load_networks", "(", "network_pkl", ")", "\n", "w_avg", "=", "Gs", ".", "get_var", "(", "'dlatent_avg'", ")", "# [component]", "\n", "\n", "Gs_syn_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "Gs_syn_kwargs", ".", "output_transform", "=", "dict", "(", "func", "=", "tflib", ".", "convert_images_to_uint8", ",", "nchw_to_nhwc", "=", "True", ")", "\n", "Gs_syn_kwargs", ".", "randomize_noise", "=", "False", "\n", "Gs_syn_kwargs", ".", "minibatch_size", "=", "minibatch_size", "\n", "\n", "print", "(", "'Generating W vectors...'", ")", "\n", "all_seeds", "=", "list", "(", "set", "(", "row_seeds", "+", "col_seeds", ")", ")", "\n", "all_z", "=", "np", ".", "stack", "(", "[", "np", ".", "random", ".", "RandomState", "(", "seed", ")", ".", "randn", "(", "*", "Gs", ".", "input_shape", "[", "1", ":", "]", ")", "for", "seed", "in", "all_seeds", "]", ")", "# [minibatch, component]", "\n", "all_w", "=", "Gs", ".", "components", ".", "mapping", ".", "run", "(", "all_z", ",", "None", ")", "# [minibatch, layer, component]", "\n", "all_w", "=", "w_avg", "+", "(", "all_w", "-", "w_avg", ")", "*", "truncation_psi", "# [minibatch, layer, component]", "\n", "w_dict", "=", "{", "seed", ":", "w", "for", "seed", ",", "w", "in", "zip", "(", "all_seeds", ",", "list", "(", "all_w", ")", ")", "}", "# [layer, component]", "\n", "\n", "print", "(", "'Generating images...'", ")", "\n", "all_images", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "all_w", ",", "**", "Gs_syn_kwargs", ")", "# [minibatch, height, width, channel]", "\n", "image_dict", "=", "{", "(", "seed", ",", "seed", ")", ":", "image", "for", "seed", ",", "image", "in", "zip", "(", "all_seeds", ",", "list", "(", "all_images", ")", ")", "}", "\n", "\n", "print", "(", "'Generating style-mixed images...'", ")", "\n", "for", "row_seed", "in", "row_seeds", ":", "\n", "        ", "for", "col_seed", "in", "col_seeds", ":", "\n", "            ", "w", "=", "w_dict", "[", "row_seed", "]", ".", "copy", "(", ")", "\n", "w", "[", "col_styles", "]", "=", "w_dict", "[", "col_seed", "]", "[", "col_styles", "]", "\n", "image", "=", "Gs", ".", "components", ".", "synthesis", ".", "run", "(", "w", "[", "np", ".", "newaxis", "]", ",", "**", "Gs_syn_kwargs", ")", "[", "0", "]", "\n", "image_dict", "[", "(", "row_seed", ",", "col_seed", ")", "]", "=", "image", "\n", "\n", "", "", "print", "(", "'Saving images...'", ")", "\n", "for", "(", "row_seed", ",", "col_seed", ")", ",", "image", "in", "image_dict", ".", "items", "(", ")", ":", "\n", "        ", "PIL", ".", "Image", ".", "fromarray", "(", "image", ",", "'RGB'", ")", ".", "save", "(", "dnnlib", ".", "make_run_dir_path", "(", "'%d-%d.png'", "%", "(", "row_seed", ",", "col_seed", ")", ")", ")", "\n", "\n", "", "print", "(", "'Saving image grid...'", ")", "\n", "_N", ",", "_C", ",", "H", ",", "W", "=", "Gs", ".", "output_shape", "\n", "canvas", "=", "PIL", ".", "Image", ".", "new", "(", "'RGB'", ",", "(", "W", "*", "(", "len", "(", "col_seeds", ")", "+", "1", ")", ",", "H", "*", "(", "len", "(", "row_seeds", ")", "+", "1", ")", ")", ",", "'black'", ")", "\n", "for", "row_idx", ",", "row_seed", "in", "enumerate", "(", "[", "None", "]", "+", "row_seeds", ")", ":", "\n", "        ", "for", "col_idx", ",", "col_seed", "in", "enumerate", "(", "[", "None", "]", "+", "col_seeds", ")", ":", "\n", "            ", "if", "row_seed", "is", "None", "and", "col_seed", "is", "None", ":", "\n", "                ", "continue", "\n", "", "key", "=", "(", "row_seed", ",", "col_seed", ")", "\n", "if", "row_seed", "is", "None", ":", "\n", "                ", "key", "=", "(", "col_seed", ",", "col_seed", ")", "\n", "", "if", "col_seed", "is", "None", ":", "\n", "                ", "key", "=", "(", "row_seed", ",", "row_seed", ")", "\n", "", "canvas", ".", "paste", "(", "PIL", ".", "Image", ".", "fromarray", "(", "image_dict", "[", "key", "]", ",", "'RGB'", ")", ",", "(", "W", "*", "col_idx", ",", "H", "*", "row_idx", ")", ")", "\n", "", "", "canvas", ".", "save", "(", "dnnlib", ".", "make_run_dir_path", "(", "'grid.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_generator._parse_num_range": [[90, 99], ["re.compile", "re.compile.match", "s.split", "list", "int", "range", "int", "range_re.match.group", "int", "range_re.match.group"], "function", ["None"], ["", "def", "_parse_num_range", "(", "s", ")", ":", "\n", "    ", "'''Accept either a comma separated list of numbers 'a,b,c' or a range 'a-c' and return as a list of ints.'''", "\n", "\n", "range_re", "=", "re", ".", "compile", "(", "r'^(\\d+)-(\\d+)$'", ")", "\n", "m", "=", "range_re", ".", "match", "(", "s", ")", "\n", "if", "m", ":", "\n", "        ", "return", "list", "(", "range", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "int", "(", "m", ".", "group", "(", "2", ")", ")", "+", "1", ")", ")", "\n", "", "vals", "=", "s", ".", "split", "(", "','", ")", "\n", "return", "[", "int", "(", "x", ")", "for", "x", "in", "vals", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_generator.main": [[119, 164], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "vars.pop", "dnnlib.SubmitConfig", "dnnlib.SubmitConfig", "vars.pop", "dnnlib.submit_run", "dnnlib.submit_run", "print", "sys.exit"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'''StyleGAN2 generator.\n\nRun 'python %(prog)s <subcommand> --help' for subcommand help.'''", ",", "\n", "epilog", "=", "_examples", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'Sub-commands'", ",", "dest", "=", "'command'", ")", "\n", "\n", "parser_generate_images", "=", "subparsers", ".", "add_parser", "(", "'generate-images'", ",", "help", "=", "'Generate images'", ")", "\n", "parser_generate_images", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'Network pickle filename'", ",", "dest", "=", "'network_pkl'", ",", "required", "=", "True", ")", "\n", "parser_generate_images", ".", "add_argument", "(", "'--seeds'", ",", "type", "=", "_parse_num_range", ",", "help", "=", "'List of random seeds'", ",", "required", "=", "True", ")", "\n", "parser_generate_images", ".", "add_argument", "(", "'--truncation-psi'", ",", "type", "=", "float", ",", "help", "=", "'Truncation psi (default: %(default)s)'", ",", "default", "=", "0.5", ")", "\n", "parser_generate_images", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "\n", "parser_style_mixing_example", "=", "subparsers", ".", "add_parser", "(", "'style-mixing-example'", ",", "help", "=", "'Generate style mixing video'", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'Network pickle filename'", ",", "dest", "=", "'network_pkl'", ",", "required", "=", "True", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--row-seeds'", ",", "type", "=", "_parse_num_range", ",", "help", "=", "'Random seeds to use for image rows'", ",", "required", "=", "True", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--col-seeds'", ",", "type", "=", "_parse_num_range", ",", "help", "=", "'Random seeds to use for image columns'", ",", "required", "=", "True", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--col-styles'", ",", "type", "=", "_parse_num_range", ",", "help", "=", "'Style layer range (default: %(default)s)'", ",", "default", "=", "'0-6'", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--truncation-psi'", ",", "type", "=", "float", ",", "help", "=", "'Truncation psi (default: %(default)s)'", ",", "default", "=", "0.5", ")", "\n", "parser_style_mixing_example", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "kwargs", "=", "vars", "(", "args", ")", "\n", "subcmd", "=", "kwargs", ".", "pop", "(", "'command'", ")", "\n", "\n", "if", "subcmd", "is", "None", ":", "\n", "        ", "print", "(", "'Error: missing subcommand.  Re-run with --help for usage.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "sc", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "\n", "sc", ".", "num_gpus", "=", "1", "\n", "sc", ".", "submit_target", "=", "dnnlib", ".", "SubmitTarget", ".", "LOCAL", "\n", "sc", ".", "local", ".", "do_not_copy_source_files", "=", "True", "\n", "sc", ".", "run_dir_root", "=", "kwargs", ".", "pop", "(", "'result_dir'", ")", "\n", "sc", ".", "run_desc", "=", "subcmd", "\n", "\n", "func_name_map", "=", "{", "\n", "'generate-images'", ":", "'run_generator.generate_images'", ",", "\n", "'style-mixing-example'", ":", "'run_generator.style_mixing_example'", "\n", "}", "\n", "dnnlib", ".", "submit_run", "(", "sc", ",", "func_name_map", "[", "subcmd", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.__init__": [[33, 49], ["os.path.join", "os.path.isdir", "os.path.basename", "print", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["self", ".", "tfr_prefix", "=", "os", ".", "path", ".", "join", "(", "self", ".", "tfrecord_dir", ",", "os", ".", "path", ".", "basename", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "self", ".", "expected_images", "=", "expected_images", "\n", "self", ".", "cur_images", "=", "0", "\n", "self", ".", "shape", "=", "None", "\n", "self", ".", "resolution_log2", "=", "None", "\n", "self", ".", "tfr_writers", "=", "[", "]", "\n", "self", ".", "print_progress", "=", "print_progress", "\n", "self", ".", "progress_interval", "=", "progress_interval", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'Creating dataset \"%s\"'", "%", "tfrecord_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "tfrecord_dir", ")", "\n", "", "assert", "(", "os", ".", "path", ".", "isdir", "(", "self", ".", "tfrecord_dir", ")", ")", "\n", "\n", "", "def", "close", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Flushing data...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close": [[50, 59], ["print", "tfr_writer.close", "print", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["", "for", "tfr_writer", "in", "self", ".", "tfr_writers", ":", "\n", "            ", "tfr_writer", ".", "close", "(", ")", "\n", "", "self", ".", "tfr_writers", "=", "[", "]", "\n", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "''", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "print", "(", "'Added %d images.'", "%", "self", ".", "cur_images", ")", "\n", "\n", "", "", "def", "choose_shuffled_order", "(", "self", ")", ":", "# Note: Images and labels must be added in shuffled order.", "\n", "        ", "order", "=", "np", ".", "arange", "(", "self", ".", "expected_images", ")", "\n", "np", ".", "random", ".", "RandomState", "(", "123", ")", ".", "shuffle", "(", "order", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order": [[60, 64], ["numpy.arange", "numpy.random.RandomState().shuffle", "numpy.random.RandomState"], "methods", ["None"], ["return", "order", "\n", "\n", "", "def", "add_image", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", "and", "self", ".", "cur_images", "%", "self", ".", "progress_interval", "==", "0", ":", "\n", "            ", "print", "(", "'%d / %d\\r'", "%", "(", "self", ".", "cur_images", ",", "self", ".", "expected_images", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image": [[65, 89], ["enumerate", "print", "int", "tensorflow.python_io.TFRecordOptions", "range", "numpy.rint().clip().astype", "tensorflow.train.Example", "tfr_writer.write", "numpy.log2", "dataset_tool.TFRecordExporter.tfr_writers.append", "img.astype.astype.astype", "tensorflow.train.Example.SerializeToString", "tensorflow.python_io.TFRecordWriter", "numpy.rint().clip", "tensorflow.train.Features", "numpy.rint", "tensorflow.train.Feature", "tensorflow.train.Feature", "tensorflow.train.Int64List", "tensorflow.train.BytesList", "numpy.rint().clip().astype.tostring"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.Logger.write", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["", "if", "self", ".", "shape", "is", "None", ":", "\n", "            ", "self", ".", "shape", "=", "img", ".", "shape", "\n", "self", ".", "resolution_log2", "=", "int", "(", "np", ".", "log2", "(", "self", ".", "shape", "[", "1", "]", ")", ")", "\n", "assert", "self", ".", "shape", "[", "0", "]", "in", "[", "1", ",", "3", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "self", ".", "shape", "[", "2", "]", "\n", "assert", "self", ".", "shape", "[", "1", "]", "==", "2", "**", "self", ".", "resolution_log2", "\n", "tfr_opt", "=", "tf", ".", "python_io", ".", "TFRecordOptions", "(", "tf", ".", "python_io", ".", "TFRecordCompressionType", ".", "NONE", ")", "\n", "for", "lod", "in", "range", "(", "self", ".", "resolution_log2", "-", "1", ")", ":", "\n", "                ", "tfr_file", "=", "self", ".", "tfr_prefix", "+", "'-r%02d.tfrecords'", "%", "(", "self", ".", "resolution_log2", "-", "lod", ")", "\n", "self", ".", "tfr_writers", ".", "append", "(", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "tfr_file", ",", "tfr_opt", ")", ")", "\n", "", "", "assert", "img", ".", "shape", "==", "self", ".", "shape", "\n", "for", "lod", ",", "tfr_writer", "in", "enumerate", "(", "self", ".", "tfr_writers", ")", ":", "\n", "            ", "if", "lod", ":", "\n", "                ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "img", "=", "(", "img", "[", ":", ",", "0", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "0", ":", ":", "2", ",", "1", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "0", ":", ":", "2", "]", "+", "img", "[", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", ")", "*", "0.25", "\n", "", "quant", "=", "np", ".", "rint", "(", "img", ")", ".", "clip", "(", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "ex", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'shape'", ":", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "quant", ".", "shape", ")", ")", ",", "\n", "'data'", ":", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "quant", ".", "tostring", "(", ")", "]", ")", ")", "}", ")", ")", "\n", "tfr_writer", ".", "write", "(", "ex", ".", "SerializeToString", "(", ")", ")", "\n", "", "self", ".", "cur_images", "+=", "1", "\n", "\n", "", "def", "add_labels", "(", "self", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "print_progress", ":", "\n", "            ", "print", "(", "'%-40s\\r'", "%", "'Saving labels...'", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels": [[90, 96], ["print", "open", "numpy.save", "labels.astype"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save"], ["", "assert", "labels", ".", "shape", "[", "0", "]", "==", "self", ".", "cur_images", "\n", "with", "open", "(", "self", ".", "tfr_prefix", "+", "'-rxx.labels'", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "np", ".", "save", "(", "f", ",", "labels", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "\n", "", "", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.__enter__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.__exit__": [[100, 102], ["dataset_tool.TFRecordExporter.close"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close"], ["#----------------------------------------------------------------------------", "\n", "\n", "", "", "class", "ExceptionInfo", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ExceptionInfo.__init__": [[106, 109], ["traceback.format_exc", "sys.exc_info"], "methods", ["None"], ["\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "class", "WorkerThread", "(", "threading", ".", "Thread", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.WorkerThread.__init__": [[113, 116], ["threading.Thread.__init__"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__"], ["\n", "", "def", "run", "(", "self", ")", ":", "\n", "        ", "while", "True", ":", "\n", "            ", "func", ",", "args", ",", "result_queue", "=", "self", ".", "task_queue", ".", "get", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.WorkerThread.run": [[117, 127], ["dataset_tool.WorkerThread.task_queue.get", "result_queue.put", "func", "dataset_tool.ExceptionInfo"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["if", "func", "is", "None", ":", "\n", "                ", "break", "\n", "", "try", ":", "\n", "                ", "result", "=", "func", "(", "*", "args", ")", "\n", "", "except", ":", "\n", "                ", "result", "=", "ExceptionInfo", "(", ")", "\n", "", "result_queue", ".", "put", "(", "(", "result", ",", "args", ")", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "class", "ThreadPool", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.__init__": [[131, 140], ["six.Queue", "dict", "range", "dataset_tool.WorkerThread", "WorkerThread.start"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start"], ["self", ".", "result_queues", "=", "dict", "(", ")", "\n", "self", ".", "num_threads", "=", "num_threads", "\n", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "thread", "=", "WorkerThread", "(", "self", ".", "task_queue", ")", "\n", "thread", ".", "daemon", "=", "True", "\n", "thread", ".", "start", "(", ")", "\n", "\n", "", "", "def", "add_task", "(", "self", ",", "func", ",", "args", "=", "(", ")", ")", ":", "\n", "        ", "assert", "hasattr", "(", "func", ",", "'__call__'", ")", "# must be a function", "\n", "if", "func", "not", "in", "self", ".", "result_queues", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.add_task": [[141, 146], ["hasattr", "dataset_tool.ThreadPool.task_queue.put", "six.Queue"], "methods", ["None"], ["            ", "self", ".", "result_queues", "[", "func", "]", "=", "Queue", ".", "Queue", "(", ")", "\n", "", "self", ".", "task_queue", ".", "put", "(", "(", "func", ",", "args", ",", "self", ".", "result_queues", "[", "func", "]", ")", ")", "\n", "\n", "", "def", "get_result", "(", "self", ",", "func", ")", ":", "# returns (result, args)", "\n", "        ", "result", ",", "args", "=", "self", ".", "result_queues", "[", "func", "]", ".", "get", "(", ")", "\n", "if", "isinstance", "(", "result", ",", "ExceptionInfo", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.get_result": [[147, 153], ["dataset_tool.ThreadPool.result_queues[].get", "isinstance", "print"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["            ", "print", "(", "'\\n\\nWorker thread caught an exception:\\n'", "+", "result", ".", "traceback", ")", "\n", "raise", "result", ".", "value", "\n", "", "return", "result", ",", "args", "\n", "\n", "", "def", "finish", "(", "self", ")", ":", "\n", "        ", "for", "idx", "in", "range", "(", "self", ".", "num_threads", ")", ":", "\n", "            ", "self", ".", "task_queue", ".", "put", "(", "(", "None", ",", "(", ")", ",", "None", ")", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.finish": [[154, 157], ["range", "dataset_tool.ThreadPool.task_queue.put"], "methods", ["None"], ["\n", "", "", "def", "__enter__", "(", "self", ")", ":", "# for 'with' statement", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.__enter__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "*", "excinfo", ")", ":", "\n", "        ", "self", ".", "finish", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.__exit__": [[161, 163], ["dataset_tool.ThreadPool.finish"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.finish"], ["", "def", "process_items_concurrently", "(", "self", ",", "item_iterator", ",", "process_func", "=", "lambda", "x", ":", "x", ",", "pre_func", "=", "lambda", "x", ":", "x", ",", "post_func", "=", "lambda", "x", ":", "x", ",", "max_items_in_flight", "=", "None", ")", ":", "\n", "        ", "if", "max_items_in_flight", "is", "None", ":", "max_items_in_flight", "=", "self", ".", "num_threads", "*", "4", "\n", "assert", "max_items_in_flight", ">=", "1", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.process_items_concurrently": [[164, 189], ["enumerate", "process_func", "dataset_tool.ThreadPool.get_result", "pre_func", "results.append", "dataset_tool.ThreadPool.add_task", "len", "dataset_tool.ThreadPool.process_items_concurrently.retire_result"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.get_result", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.ThreadPool.add_task"], ["results", "=", "[", "]", "\n", "retire_idx", "=", "[", "0", "]", "\n", "\n", "def", "task_func", "(", "prepared", ",", "idx", ")", ":", "\n", "            ", "return", "process_func", "(", "prepared", ")", "\n", "\n", "", "def", "retire_result", "(", ")", ":", "\n", "            ", "processed", ",", "(", "prepared", ",", "idx", ")", "=", "self", ".", "get_result", "(", "task_func", ")", "\n", "results", "[", "idx", "]", "=", "processed", "\n", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", "and", "results", "[", "retire_idx", "[", "0", "]", "]", "is", "not", "None", ":", "\n", "                ", "yield", "post_func", "(", "results", "[", "retire_idx", "[", "0", "]", "]", ")", "\n", "results", "[", "retire_idx", "[", "0", "]", "]", "=", "None", "\n", "retire_idx", "[", "0", "]", "+=", "1", "\n", "\n", "", "", "for", "idx", ",", "item", "in", "enumerate", "(", "item_iterator", ")", ":", "\n", "            ", "prepared", "=", "pre_func", "(", "item", ")", "\n", "results", ".", "append", "(", "None", ")", "\n", "self", ".", "add_task", "(", "func", "=", "task_func", ",", "args", "=", "(", "prepared", ",", "idx", ")", ")", "\n", "while", "retire_idx", "[", "0", "]", "<", "idx", "-", "max_items_in_flight", "+", "2", ":", "\n", "                ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "", "", "while", "retire_idx", "[", "0", "]", "<", "len", "(", "results", ")", ":", "\n", "            ", "for", "res", "in", "retire_result", "(", ")", ":", "yield", "res", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "display", "(", "tfrecord_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error": [[26, 29], ["print", "exit"], "function", ["None"], ["exit", "(", "1", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.display": [[192, 215], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "cv2.imshow", "dataset.TFRecordDataset.get_minibatch_np", "print", "cv2.namedWindow", "print", "cv2.waitKey", "images[].transpose", "labels[].tolist"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["dset", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir", ",", "max_label_size", "=", "'full'", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "idx", "==", "0", ":", "\n", "            ", "print", "(", "'Displaying images'", ")", "\n", "import", "cv2", "# pip install opencv-python", "\n", "cv2", ".", "namedWindow", "(", "'dataset_tool'", ")", "\n", "print", "(", "'Press SPACE or ENTER to advance, ESC to exit'", ")", "\n", "", "print", "(", "'\\nidx = %-8d\\nlabel = %s'", "%", "(", "idx", ",", "labels", "[", "0", "]", ".", "tolist", "(", ")", ")", ")", "\n", "cv2", ".", "imshow", "(", "'dataset_tool'", ",", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", ")", "# CHW => HWC, RGB => BGR", "\n", "idx", "+=", "1", "\n", "if", "cv2", ".", "waitKey", "(", ")", "==", "27", ":", "\n", "            ", "break", "\n", "", "", "print", "(", "'\\nDisplayed %d images.'", "%", "idx", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "def", "extract", "(", "tfrecord_dir", ",", "output_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.extract": [[218, 242], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "os.path.isdir", "os.makedirs", "PIL.Image.fromarray.save", "print", "dataset.TFRecordDataset.get_minibatch_np", "PIL.Image.fromarray", "PIL.Image.fromarray", "os.path.join", "images[].transpose"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["dset", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir", ",", "max_label_size", "=", "0", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Extracting images to \"%s\"'", "%", "output_dir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "output_dir", ")", "\n", "", "idx", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images", ",", "labels", "=", "dset", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "", "if", "images", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", "[", "0", "]", ",", "'L'", ")", "\n", "", "else", ":", "\n", "            ", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "images", "[", "0", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", ",", "'RGB'", ")", "\n", "", "img", ".", "save", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'img%08d.png'", "%", "idx", ")", ")", "\n", "idx", "+=", "1", "\n", "", "print", "(", "'Extracted %d images.'", "%", "idx", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "def", "compare", "(", "tfrecord_dir_a", ",", "tfrecord_dir_b", ",", "ignore_labels", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.compare": [[245, 285], ["print", "dnnlib.init_tf", "training.dataset.TFRecordDataset", "print", "training.dataset.TFRecordDataset", "dnnlib.init_uninitialized_vars", "print", "print", "print", "print", "dataset.TFRecordDataset.get_minibatch_np", "dataset.TFRecordDataset.get_minibatch_np", "numpy.all", "print", "numpy.all", "print", "print"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_uninitialized_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np"], ["tfutil", ".", "init_tf", "(", "{", "'gpu_options.allow_growth'", ":", "True", "}", ")", "\n", "dset_a", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_a", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "print", "(", "'Loading dataset \"%s\"'", "%", "tfrecord_dir_b", ")", "\n", "dset_b", "=", "dataset", ".", "TFRecordDataset", "(", "tfrecord_dir_b", ",", "max_label_size", "=", "max_label_size", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "tfutil", ".", "init_uninited_vars", "(", ")", "\n", "\n", "print", "(", "'Comparing datasets'", ")", "\n", "idx", "=", "0", "\n", "identical_images", "=", "0", "\n", "identical_labels", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "idx", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'%d\\r'", "%", "idx", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "try", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "dset_a", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_a", ",", "labels_a", "=", "None", ",", "None", "\n", "", "try", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "dset_b", ".", "get_minibatch_np", "(", "1", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "images_b", ",", "labels_b", "=", "None", ",", "None", "\n", "", "if", "images_a", "is", "None", "or", "images_b", "is", "None", ":", "\n", "            ", "if", "images_a", "is", "not", "None", "or", "images_b", "is", "not", "None", ":", "\n", "                ", "print", "(", "'Datasets contain different number of images'", ")", "\n", "", "break", "\n", "", "if", "images_a", ".", "shape", "==", "images_b", ".", "shape", "and", "np", ".", "all", "(", "images_a", "==", "images_b", ")", ":", "\n", "            ", "identical_images", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Image %d is different'", "%", "idx", ")", "\n", "", "if", "labels_a", ".", "shape", "==", "labels_b", ".", "shape", "and", "np", ".", "all", "(", "labels_a", "==", "labels_b", ")", ":", "\n", "            ", "identical_labels", "+=", "1", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Label %d is different'", "%", "idx", ")", "\n", "", "idx", "+=", "1", "\n", "", "print", "(", "'Identical images: %d / %d'", "%", "(", "identical_images", ",", "idx", ")", ")", "\n", "if", "not", "ignore_labels", ":", "\n", "        ", "print", "(", "'Identical labels: %d / %d'", "%", "(", "identical_labels", ",", "idx", ")", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_mnist", "(", "tfrecord_dir", ",", "mnist_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_mnist": [[288, 309], ["print", "np.frombuffer.reshape", "numpy.pad", "numpy.zeros", "gzip.open", "numpy.frombuffer", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "file.read", "os.path.join", "file.read", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-images-idx3-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-labels-idx1-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "labels", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "1", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "60000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_mnistrgb", "(", "tfrecord_dir", ",", "mnist_dir", ",", "num_images", "=", "1000000", ",", "random_seed", "=", "123", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_mnistrgb": [[312, 326], ["print", "np.frombuffer.reshape", "numpy.pad", "gzip.open", "numpy.frombuffer", "dataset_tool.TFRecordExporter", "numpy.random.RandomState", "range", "os.path.join", "file.read", "numpy.min", "numpy.max", "tfr.add_image", "np.random.RandomState.randint"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.VideoReader.read", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["with", "gzip", ".", "open", "(", "os", ".", "path", ".", "join", "(", "mnist_dir", ",", "'train-images-idx3-ubyte.gz'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "file", ".", "read", "(", ")", ",", "np", ".", "uint8", ",", "offset", "=", "16", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "28", ",", "28", ")", "\n", "images", "=", "np", ".", "pad", "(", "images", ",", "[", "(", "0", ",", "0", ")", ",", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", "]", ",", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "assert", "images", ".", "shape", "==", "(", "60000", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "num_images", ")", "as", "tfr", ":", "\n", "        ", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "random_seed", ")", "\n", "for", "idx", "in", "range", "(", "num_images", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "rnd", ".", "randint", "(", "images", ".", "shape", "[", "0", "]", ",", "size", "=", "3", ")", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_cifar10", "(", "tfrecord_dir", ",", "cifar10_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_cifar10": [[329, 353], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "data[].reshape", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cifar10_dir", ",", "'data_batch_%d'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", ")", "\n", "labels", ".", "append", "(", "data", "[", "'labels'", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_cifar100", "(", "tfrecord_dir", ",", "cifar100_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_cifar100": [[356, 375], ["print", "data[].reshape", "numpy.array", "numpy.zeros", "open", "pickle.load", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "os.path.join", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["with", "open", "(", "os", ".", "path", ".", "join", "(", "cifar100_dir", ",", "'train'", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", "=", "data", "[", "'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "labels", "=", "np", ".", "array", "(", "data", "[", "'fine_labels'", "]", ")", "\n", "assert", "images", ".", "shape", "==", "(", "50000", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "50000", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "int32", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "99", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_svhn", "(", "tfrecord_dir", ",", "svhn_dir", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_svhn": [[378, 402], ["print", "range", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "np.concatenate.append", "np.concatenate.append", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "tfr.add_labels", "open", "pickle.load", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "tfr.add_image", "os.path.join", "numpy.max", "numpy.arange"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["images", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "batch", "in", "range", "(", "1", ",", "4", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "svhn_dir", ",", "'train_%d.pkl'", "%", "batch", ")", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "file", ",", "encoding", "=", "'latin1'", ")", "\n", "", "images", ".", "append", "(", "data", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "data", "[", "1", "]", ")", "\n", "", "images", "=", "np", ".", "concatenate", "(", "images", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "labels", ")", "\n", "assert", "images", ".", "shape", "==", "(", "73257", ",", "3", ",", "32", ",", "32", ")", "and", "images", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "labels", ".", "shape", "==", "(", "73257", ",", ")", "and", "labels", ".", "dtype", "==", "np", ".", "uint8", "\n", "assert", "np", ".", "min", "(", "images", ")", "==", "0", "and", "np", ".", "max", "(", "images", ")", "==", "255", "\n", "assert", "np", ".", "min", "(", "labels", ")", "==", "0", "and", "np", ".", "max", "(", "labels", ")", "==", "9", "\n", "onehot", "=", "np", ".", "zeros", "(", "(", "labels", ".", "size", ",", "np", ".", "max", "(", "labels", ")", "+", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "np", ".", "arange", "(", "labels", ".", "size", ")", ",", "labels", "]", "=", "1.0", "\n", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "images", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "tfr", ".", "add_image", "(", "images", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "tfr", ".", "add_labels", "(", "onehot", "[", "order", "]", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "def", "create_lsun", "(", "tfrecord_dir", ",", "lmdb_dir", ",", "resolution", "=", "256", ",", "max_images", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_lsun": [[405, 435], ["print", "lmdb.open().begin", "txn.stat", "dataset_tool.TFRecordExporter", "enumerate", "lmdb.open", "txn.cursor", "numpy.min", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "np.asarray.transpose", "tfr.add_image", "cv2.imdecode", "print", "numpy.fromstring", "IOError", "numpy.asarray", "PIL.Image.open", "sys.exc_info", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["import", "cv2", "# pip install opencv-python", "\n", "import", "io", "\n", "with", "lmdb", ".", "open", "(", "lmdb_dir", ",", "readonly", "=", "True", ")", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "        ", "total_images", "=", "txn", ".", "stat", "(", ")", "[", "'entries'", "]", "\n", "if", "max_images", "is", "None", ":", "\n", "            ", "max_images", "=", "total_images", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "max_images", ")", "as", "tfr", ":", "\n", "            ", "for", "idx", ",", "(", "key", ",", "value", ")", "in", "enumerate", "(", "txn", ".", "cursor", "(", ")", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "try", ":", "\n", "                        ", "img", "=", "cv2", ".", "imdecode", "(", "np", ".", "fromstring", "(", "value", ",", "dtype", "=", "np", ".", "uint8", ")", ",", "1", ")", "\n", "if", "img", "is", "None", ":", "\n", "                            ", "raise", "IOError", "(", "'cv2.imdecode failed'", ")", "\n", "", "img", "=", "img", "[", ":", ",", ":", ",", ":", ":", "-", "1", "]", "# BGR => RGB", "\n", "", "except", "IOError", ":", "\n", "                        ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "io", ".", "BytesIO", "(", "value", ")", ")", ")", "\n", "", "crop", "=", "np", ".", "min", "(", "img", ".", "shape", "[", ":", "2", "]", ")", "\n", "img", "=", "img", "[", "(", "img", ".", "shape", "[", "0", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "0", "]", "+", "crop", ")", "//", "2", ",", "(", "img", ".", "shape", "[", "1", "]", "-", "crop", ")", "//", "2", ":", "(", "img", ".", "shape", "[", "1", "]", "+", "crop", ")", "//", "2", "]", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "img", ",", "'RGB'", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "resolution", ",", "resolution", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "", "except", ":", "\n", "                    ", "print", "(", "sys", ".", "exc_info", "(", ")", "[", "1", "]", ")", "\n", "", "if", "tfr", ".", "cur_images", "==", "max_images", ":", "\n", "                    ", "break", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "", "", "def", "create_celeba", "(", "tfrecord_dir", ",", "celeba_dir", ",", "cx", "=", "89", ",", "cy", "=", "121", ")", ":", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_lsun_wide": [[438, 480], ["print", "print", "lmdb.open().begin", "int", "txn.stat", "dataset_tool.TFRecordExporter", "enumerate", "numpy.round", "lmdb.open", "txn.cursor", "numpy.log2", "int", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "np.asarray.transpose", "numpy.zeros", "tfr.add_image", "print", "cv2.imdecode", "numpy.round", "print", "numpy.fromstring", "IOError", "numpy.asarray", "PIL.Image.open", "sys.exc_info", "io.BytesIO"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.metrics.sliced_wasserstein.API.begin", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "glob_pattern", ")", ")", "\n", "expected_images", "=", "202599", "\n", "if", "len", "(", "image_filenames", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "assert", "img", ".", "shape", "==", "(", "218", ",", "178", ",", "3", ")", "\n", "img", "=", "img", "[", "cy", "-", "64", ":", "cy", "+", "64", ",", "cx", "-", "64", ":", "cx", "+", "64", "]", "\n", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_celebahq", "(", "tfrecord_dir", ",", "celeba_dir", ",", "delta_dir", ",", "num_threads", "=", "4", ",", "num_tasks", "=", "100", ")", ":", "\n", "    ", "print", "(", "'Loading CelebA from \"%s\"'", "%", "celeba_dir", ")", "\n", "expected_images", "=", "202599", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'*.jpg'", ")", ")", ")", "!=", "expected_images", ":", "\n", "        ", "error", "(", "'Expected to find %d images'", "%", "expected_images", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'Anno'", ",", "'list_landmarks_celeba.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "landmarks", "=", "[", "[", "float", "(", "value", ")", "for", "value", "in", "line", ".", "split", "(", ")", "[", "1", ":", "]", "]", "for", "line", "in", "file", ".", "readlines", "(", ")", "[", "2", ":", "]", "]", "\n", "landmarks", "=", "np", ".", "float32", "(", "landmarks", ")", ".", "reshape", "(", "-", "1", ",", "5", ",", "2", ")", "\n", "\n", "", "print", "(", "'Loading CelebA-HQ deltas from \"%s\"'", "%", "delta_dir", ")", "\n", "import", "scipy", ".", "ndimage", "\n", "import", "hashlib", "\n", "import", "bz2", "\n", "import", "zipfile", "\n", "import", "base64", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", "\n", "import", "cryptography", ".", "hazmat", ".", "backends", "\n", "import", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", "\n", "import", "cryptography", ".", "fernet", "\n", "expected_zips", "=", "30", "\n", "if", "len", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'delta*.zip'", ")", ")", ")", "!=", "expected_zips", ":", "\n", "        ", "error", "(", "'Expected to find %d zips'", "%", "expected_zips", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'image_list.txt'", ")", ",", "'rt'", ")", "as", "file", ":", "\n", "        ", "lines", "=", "[", "line", ".", "split", "(", ")", "for", "line", "in", "file", "]", "\n", "fields", "=", "dict", "(", ")", "\n", "for", "idx", ",", "field", "in", "enumerate", "(", "lines", "[", "0", "]", ")", ":", "\n", "            ", "type", "=", "int", "if", "field", ".", "endswith", "(", "'idx'", ")", "else", "str", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_celeba": [[483, 499], ["print", "os.path.join", "sorted", "glob.glob", "len", "dataset_tool.error", "dataset_tool.TFRecordExporter", "tfr.choose_shuffled_order", "range", "len", "numpy.asarray", "img.transpose.transpose", "tfr.add_image", "PIL.Image.open"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image"], ["\n", "# Must use pillow version 3.1.1 for everything to work correctly.", "\n", "if", "getattr", "(", "PIL", ",", "'PILLOW_VERSION'", ",", "''", ")", "!=", "'3.1.1'", ":", "\n", "        ", "error", "(", "'create_celebahq requires pillow version 3.1.1'", ")", "# conda install pillow=3.1.1", "\n", "\n", "# Must use libjpeg version 8d for everything to work correctly.", "\n", "", "img", "=", "np", ".", "array", "(", "PIL", ".", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "'000001.jpg'", ")", ")", ")", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "if", "md5", ".", "hexdigest", "(", ")", "!=", "'9cad8178d6cb0196b36f7b34bc5eb6d3'", ":", "\n", "        ", "error", "(", "'create_celebahq requires libjpeg version 8d'", ")", "# conda install jpeg=8d", "\n", "\n", "", "def", "rot90", "(", "v", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", "]", ")", "\n", "\n", "", "def", "process_func", "(", "idx", ")", ":", "\n", "# Load original image.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_from_images": [[502, 527], ["print", "sorted", "numpy.asarray", "glob.glob", "len", "dataset_tool.error", "PIL.Image.open", "dataset_tool.error", "dataset_tool.error", "dataset_tool.error", "dataset_tool.TFRecordExporter", "range", "os.path.join", "int", "len", "tfr.choose_shuffled_order", "numpy.arange", "numpy.asarray", "tfr.add_image", "numpy.floor", "len", "PIL.Image.open", "img.transpose.transpose", "numpy.log2"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.error", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.log2"], ["orig_path", "=", "os", ".", "path", ".", "join", "(", "celeba_dir", ",", "'img_celeba'", ",", "orig_file", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "open", "(", "orig_path", ")", "\n", "\n", "# Choose oriented crop rectangle.", "\n", "lm", "=", "landmarks", "[", "orig_idx", "]", "\n", "eye_avg", "=", "(", "lm", "[", "0", "]", "+", "lm", "[", "1", "]", ")", "*", "0.5", "+", "0.5", "\n", "mouth_avg", "=", "(", "lm", "[", "3", "]", "+", "lm", "[", "4", "]", ")", "*", "0.5", "+", "0.5", "\n", "eye_to_eye", "=", "lm", "[", "1", "]", "-", "lm", "[", "0", "]", "\n", "eye_to_mouth", "=", "mouth_avg", "-", "eye_avg", "\n", "x", "=", "eye_to_eye", "-", "rot90", "(", "eye_to_mouth", ")", "\n", "x", "/=", "np", ".", "hypot", "(", "*", "x", ")", "\n", "x", "*=", "max", "(", "np", ".", "hypot", "(", "*", "eye_to_eye", ")", "*", "2.0", ",", "np", ".", "hypot", "(", "*", "eye_to_mouth", ")", "*", "1.8", ")", "\n", "y", "=", "rot90", "(", "x", ")", "\n", "c", "=", "eye_avg", "+", "eye_to_mouth", "*", "0.1", "\n", "quad", "=", "np", ".", "stack", "(", "[", "c", "-", "x", "-", "y", ",", "c", "-", "x", "+", "y", ",", "c", "+", "x", "+", "y", ",", "c", "+", "x", "-", "y", "]", ")", "\n", "zoom", "=", "1024", "/", "(", "np", ".", "hypot", "(", "*", "x", ")", "*", "2", ")", "\n", "\n", "# Shrink.", "\n", "shrink", "=", "int", "(", "np", ".", "floor", "(", "0.5", "/", "zoom", ")", ")", "\n", "if", "shrink", ">", "1", ":", "\n", "            ", "size", "=", "(", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "0", "]", ")", "/", "shrink", ")", ")", ",", "int", "(", "np", ".", "round", "(", "float", "(", "img", ".", "size", "[", "1", "]", ")", "/", "shrink", ")", ")", ")", "\n", "img", "=", "img", ".", "resize", "(", "size", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "/=", "shrink", "\n", "zoom", "*=", "shrink", "\n", "\n", "# Crop.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.create_from_hdf5": [[530, 542], ["print", "h5py.File", "max", "dataset_tool.TFRecordExporter", "range", "os.path.isfile", "tfr.choose_shuffled_order", "numpy.arange", "tfr.add_image", "tfr.add_labels", "hdf5_file.items", "key.startswith", "os.path.splitext", "numpy.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.choose_shuffled_order", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.add_labels", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["crop", "=", "(", "max", "(", "crop", "[", "0", "]", "-", "border", ",", "0", ")", ",", "max", "(", "crop", "[", "1", "]", "-", "border", ",", "0", ")", ",", "min", "(", "crop", "[", "2", "]", "+", "border", ",", "img", ".", "size", "[", "0", "]", ")", ",", "min", "(", "crop", "[", "3", "]", "+", "border", ",", "img", ".", "size", "[", "1", "]", ")", ")", "\n", "if", "crop", "[", "2", "]", "-", "crop", "[", "0", "]", "<", "img", ".", "size", "[", "0", "]", "or", "crop", "[", "3", "]", "-", "crop", "[", "1", "]", "<", "img", ".", "size", "[", "1", "]", ":", "\n", "            ", "img", "=", "img", ".", "crop", "(", "crop", ")", "\n", "quad", "-=", "crop", "[", "0", ":", "2", "]", "\n", "\n", "# Simulate super-resolution.", "\n", "", "superres", "=", "int", "(", "np", ".", "exp2", "(", "np", ".", "ceil", "(", "np", ".", "log2", "(", "zoom", ")", ")", ")", ")", "\n", "if", "superres", ">", "1", ":", "\n", "            ", "img", "=", "img", ".", "resize", "(", "(", "img", ".", "size", "[", "0", "]", "*", "superres", ",", "img", ".", "size", "[", "1", "]", "*", "superres", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "quad", "*=", "superres", "\n", "zoom", "/=", "superres", "\n", "\n", "# Pad.", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.execute_cmdline": [[545, 638], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "dataset_tool.execute_cmdline.add_command"], "function", ["None"], ["if", "max", "(", "pad", ")", ">", "border", "-", "4", ":", "\n", "            ", "pad", "=", "np", ".", "maximum", "(", "pad", ",", "int", "(", "np", ".", "round", "(", "1024", "*", "0.3", "/", "zoom", ")", ")", ")", "\n", "img", "=", "np", ".", "pad", "(", "np", ".", "float32", "(", "img", ")", ",", "(", "(", "pad", "[", "1", "]", ",", "pad", "[", "3", "]", ")", ",", "(", "pad", "[", "0", "]", ",", "pad", "[", "2", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'reflect'", ")", "\n", "h", ",", "w", ",", "_", "=", "img", ".", "shape", "\n", "y", ",", "x", ",", "_", "=", "np", ".", "mgrid", "[", ":", "h", ",", ":", "w", ",", ":", "1", "]", "\n", "mask", "=", "1.0", "-", "np", ".", "minimum", "(", "np", ".", "minimum", "(", "np", ".", "float32", "(", "x", ")", "/", "pad", "[", "0", "]", ",", "np", ".", "float32", "(", "y", ")", "/", "pad", "[", "1", "]", ")", ",", "np", ".", "minimum", "(", "np", ".", "float32", "(", "w", "-", "1", "-", "x", ")", "/", "pad", "[", "2", "]", ",", "np", ".", "float32", "(", "h", "-", "1", "-", "y", ")", "/", "pad", "[", "3", "]", ")", ")", "\n", "blur", "=", "1024", "*", "0.02", "/", "zoom", "\n", "img", "+=", "(", "scipy", ".", "ndimage", ".", "gaussian_filter", "(", "img", ",", "[", "blur", ",", "blur", ",", "0", "]", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", "*", "3.0", "+", "1.0", ",", "0.0", ",", "1.0", ")", "\n", "img", "+=", "(", "np", ".", "median", "(", "img", ",", "axis", "=", "(", "0", ",", "1", ")", ")", "-", "img", ")", "*", "np", ".", "clip", "(", "mask", ",", "0.0", ",", "1.0", ")", "\n", "img", "=", "PIL", ".", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "np", ".", "clip", "(", "np", ".", "round", "(", "img", ")", ",", "0", ",", "255", ")", ")", ",", "'RGB'", ")", "\n", "quad", "+=", "pad", "[", "0", ":", "2", "]", "\n", "\n", "# Transform.", "\n", "", "img", "=", "img", ".", "transform", "(", "(", "4096", ",", "4096", ")", ",", "PIL", ".", "Image", ".", "QUAD", ",", "(", "quad", "+", "0.5", ")", ".", "flatten", "(", ")", ",", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "img", "=", "img", ".", "resize", "(", "(", "1024", ",", "1024", ")", ",", "PIL", ".", "Image", ".", "ANTIALIAS", ")", "\n", "img", "=", "np", ".", "asarray", "(", "img", ")", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'proc_md5'", "]", "[", "idx", "]", "\n", "\n", "# Load delta image and original JPG.", "\n", "with", "zipfile", ".", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "delta_dir", ",", "'deltas%05d.zip'", "%", "(", "idx", "-", "idx", "%", "1000", ")", ")", ",", "'r'", ")", "as", "zip", ":", "\n", "            ", "delta_bytes", "=", "zip", ".", "read", "(", "'delta%05d.dat'", "%", "idx", ")", "\n", "", "with", "open", "(", "orig_path", ",", "'rb'", ")", "as", "file", ":", "\n", "            ", "orig_bytes", "=", "file", ".", "read", "(", ")", "\n", "\n", "# Decrypt delta image, using original JPG data as decryption key.", "\n", "", "algorithm", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "hashes", ".", "SHA256", "(", ")", "\n", "backend", "=", "cryptography", ".", "hazmat", ".", "backends", ".", "default_backend", "(", ")", "\n", "salt", "=", "bytes", "(", "orig_file", ",", "'ascii'", ")", "\n", "kdf", "=", "cryptography", ".", "hazmat", ".", "primitives", ".", "kdf", ".", "pbkdf2", ".", "PBKDF2HMAC", "(", "algorithm", "=", "algorithm", ",", "length", "=", "32", ",", "salt", "=", "salt", ",", "iterations", "=", "100000", ",", "backend", "=", "backend", ")", "\n", "key", "=", "base64", ".", "urlsafe_b64encode", "(", "kdf", ".", "derive", "(", "orig_bytes", ")", ")", "\n", "delta", "=", "np", ".", "frombuffer", "(", "bz2", ".", "decompress", "(", "cryptography", ".", "fernet", ".", "Fernet", "(", "key", ")", ".", "decrypt", "(", "delta_bytes", ")", ")", ",", "dtype", "=", "np", ".", "uint8", ")", ".", "reshape", "(", "3", ",", "1024", ",", "1024", ")", "\n", "\n", "# Apply delta image.", "\n", "img", "=", "img", "+", "delta", "\n", "\n", "# Verify MD5.", "\n", "md5", "=", "hashlib", ".", "md5", "(", ")", "\n", "md5", ".", "update", "(", "img", ".", "tobytes", "(", ")", ")", "\n", "assert", "md5", ".", "hexdigest", "(", ")", "==", "fields", "[", "'final_md5'", "]", "[", "idx", "]", "\n", "return", "img", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "indices", ".", "size", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "\n", "with", "ThreadPool", "(", "num_threads", ")", "as", "pool", ":", "\n", "            ", "for", "img", "in", "pool", ".", "process_items_concurrently", "(", "indices", "[", "order", "]", ".", "tolist", "(", ")", ",", "process_func", "=", "process_func", ",", "max_items_in_flight", "=", "num_tasks", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "", "def", "create_from_images", "(", "tfrecord_dir", ",", "image_dir", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading images from \"%s\"'", "%", "image_dir", ")", "\n", "image_filenames", "=", "sorted", "(", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "image_dir", ",", "'*'", ")", ")", ")", "\n", "if", "len", "(", "image_filenames", ")", "==", "0", ":", "\n", "        ", "error", "(", "'No input images found'", ")", "\n", "\n", "", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "0", "]", ")", ")", "\n", "resolution", "=", "img", ".", "shape", "[", "0", "]", "\n", "channels", "=", "img", ".", "shape", "[", "2", "]", "if", "img", ".", "ndim", "==", "3", "else", "1", "\n", "if", "img", ".", "shape", "[", "1", "]", "!=", "resolution", ":", "\n", "        ", "error", "(", "'Input images must have the same width and height'", ")", "\n", "", "if", "resolution", "!=", "2", "**", "int", "(", "np", ".", "floor", "(", "np", ".", "log2", "(", "resolution", ")", ")", ")", ":", "\n", "        ", "error", "(", "'Input image resolution must be a power-of-two'", ")", "\n", "", "if", "channels", "not", "in", "[", "1", ",", "3", "]", ":", "\n", "        ", "error", "(", "'Input images must be stored as RGB or grayscale'", ")", "\n", "\n", "", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "len", "(", "image_filenames", ")", ")", "as", "tfr", ":", "\n", "        ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "len", "(", "image_filenames", ")", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "            ", "img", "=", "np", ".", "asarray", "(", "PIL", ".", "Image", ".", "open", "(", "image_filenames", "[", "order", "[", "idx", "]", "]", ")", ")", "\n", "if", "channels", "==", "1", ":", "\n", "                ", "img", "=", "img", "[", "np", ".", "newaxis", ",", ":", ",", ":", "]", "# HW => CHW", "\n", "", "else", ":", "\n", "                ", "img", "=", "img", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "# HWC => CHW", "\n", "", "tfr", ".", "add_image", "(", "img", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "", "", "def", "create_from_hdf5", "(", "tfrecord_dir", ",", "hdf5_filename", ",", "shuffle", ")", ":", "\n", "    ", "print", "(", "'Loading HDF5 archive from \"%s\"'", "%", "hdf5_filename", ")", "\n", "import", "h5py", "# conda install h5py", "\n", "with", "h5py", ".", "File", "(", "hdf5_filename", ",", "'r'", ")", "as", "hdf5_file", ":", "\n", "        ", "hdf5_data", "=", "max", "(", "[", "value", "for", "key", ",", "value", "in", "hdf5_file", ".", "items", "(", ")", "if", "key", ".", "startswith", "(", "'data'", ")", "]", ",", "key", "=", "lambda", "lod", ":", "lod", ".", "shape", "[", "3", "]", ")", "\n", "with", "TFRecordExporter", "(", "tfrecord_dir", ",", "hdf5_data", ".", "shape", "[", "0", "]", ")", "as", "tfr", ":", "\n", "            ", "order", "=", "tfr", ".", "choose_shuffled_order", "(", ")", "if", "shuffle", "else", "np", ".", "arange", "(", "hdf5_data", ".", "shape", "[", "0", "]", ")", "\n", "for", "idx", "in", "range", "(", "order", ".", "size", ")", ":", "\n", "                ", "tfr", ".", "add_image", "(", "hdf5_data", "[", "order", "[", "idx", "]", "]", ")", "\n", "", "npy_filename", "=", "os", ".", "path", ".", "splitext", "(", "hdf5_filename", ")", "[", "0", "]", "+", "'-labels.npy'", "\n", "if", "os", ".", "path", ".", "isfile", "(", "npy_filename", ")", ":", "\n", "                ", "tfr", ".", "add_labels", "(", "np", ".", "load", "(", "npy_filename", ")", "[", "order", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_metrics.run": [[20, 28], ["print", "dnnlib.init_tf", "pretrained_networks.get_path_or_url", "dnnlib.EasyDict", "dnnlib.EasyDict", "metrics.metric_base.MetricGroup", "metric_base.MetricGroup.run"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.get_path_or_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["def", "run_pickle", "(", "submit_config", ",", "metric_args", ",", "network_pkl", ",", "dataset_args", ",", "mirror_augment", ")", ":", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ")", "\n", "tflib", ".", "init_tf", "(", ")", "\n", "print", "(", "'Evaluating %s metric on network_pkl \"%s\"...'", "%", "(", "metric_args", ".", "name", ",", "network_pkl", ")", ")", "\n", "metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "dataset_args", "=", "dataset_args", ",", "mirror_augment", "=", "mirror_augment", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n", "print", "(", ")", "\n", "ctx", ".", "close", "(", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_metrics._str_to_bool": [[31, 40], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["\n", "", "def", "run_snapshot", "(", "submit_config", ",", "metric_args", ",", "run_id", ",", "snapshot", ")", ":", "\n", "    ", "ctx", "=", "dnnlib", ".", "RunContext", "(", "submit_config", ")", "\n", "tflib", ".", "init_tf", "(", ")", "\n", "print", "(", "'Evaluating %s metric on run_id %s, snapshot %s...'", "%", "(", "metric_args", ".", "name", ",", "run_id", ",", "snapshot", ")", ")", "\n", "run_dir", "=", "misc", ".", "locate_run_dir", "(", "run_id", ")", "\n", "network_pkl", "=", "misc", ".", "locate_network_pkl", "(", "run_dir", ",", "snapshot", ")", "\n", "metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "run_dir", "=", "run_dir", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_metrics.main": [[52, 80], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "dnnlib.SubmitConfig", "dnnlib.SubmitConfig", "vars.pop", "vars.pop", "dnnlib.submit_run", "dnnlib.submit_run", "os.path.exists", "print", "sys.exit", "x.split"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], ["metric", "=", "dnnlib", ".", "util", ".", "call_func_by_name", "(", "**", "metric_args", ")", "\n", "print", "(", ")", "\n", "for", "idx", ",", "network_pkl", "in", "enumerate", "(", "network_pkls", ")", ":", "\n", "        ", "ctx", ".", "update", "(", "''", ",", "idx", ",", "len", "(", "network_pkls", ")", ")", "\n", "metric", ".", "run", "(", "network_pkl", ",", "run_dir", "=", "run_dir", ",", "num_gpus", "=", "submit_config", ".", "num_gpus", ")", "\n", "", "print", "(", ")", "\n", "ctx", ".", "close", "(", ")", "\n", "\n", "#----------------------------------------------------------------------------", "\n", "\n", "", "def", "main", "(", ")", ":", "\n", "    ", "submit_config", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "\n", "\n", "# Which metrics to evaluate?", "\n", "metrics", "=", "[", "]", "\n", "metrics", "+=", "[", "metric_base", ".", "fid50k", "]", "\n", "#metrics += [metric_base.ppl_zfull]", "\n", "#metrics += [metric_base.ppl_wfull]", "\n", "#metrics += [metric_base.ppl_zend]", "\n", "#metrics += [metric_base.ppl_wend]", "\n", "#metrics += [metric_base.ls]", "\n", "#metrics += [metric_base.dummy]", "\n", "\n", "# Which networks to evaluate them on?", "\n", "tasks", "=", "[", "]", "\n", "tasks", "+=", "[", "EasyDict", "(", "run_func_name", "=", "'run_metrics.run_pickle'", ",", "network_pkl", "=", "'https://drive.google.com/uc?id=1MEGjdvVpUsu1jB4zrXZN7Y4kBBOzizDQ'", ",", "dataset_args", "=", "EasyDict", "(", "tfrecord_dir", "=", "'ffhq'", ",", "shuffle_mb", "=", "0", ")", ",", "mirror_augment", "=", "True", ")", "]", "# karras2019stylegan-ffhq-1024x1024.pkl", "\n", "#tasks += [EasyDict(run_func_name='run_metrics.run_snapshot', run_id=100, snapshot=25000)]", "\n", "#tasks += [EasyDict(run_func_name='run_metrics.run_all_snapshots', run_id=100)]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.get_path_or_url": [[57, 59], ["gdrive_urls.get"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["def", "get_path_or_url", "(", "path_or_gdrive_path", ")", ":", "\n", "    ", "return", "gdrive_urls", ".", "get", "(", "path_or_gdrive_path", ",", "path_or_gdrive_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.load_networks": [[64, 79], ["pretrained_networks.get_path_or_url", "dnnlib.util.is_url", "dnnlib.util.is_url", "dnnlib.init_tf", "dnnlib.util.open_url", "dnnlib.util.open_url", "open", "pickle.load"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.get_path_or_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.is_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.init_tf", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.dnnlib.util.open_url", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load"], ["def", "load_networks", "(", "path_or_gdrive_path", ")", ":", "\n", "    ", "path_or_url", "=", "get_path_or_url", "(", "path_or_gdrive_path", ")", "\n", "if", "path_or_url", "in", "_cached_networks", ":", "\n", "        ", "return", "_cached_networks", "[", "path_or_url", "]", "\n", "\n", "", "if", "dnnlib", ".", "util", ".", "is_url", "(", "path_or_url", ")", ":", "\n", "        ", "stream", "=", "dnnlib", ".", "util", ".", "open_url", "(", "path_or_url", ",", "cache_dir", "=", "'.stylegan2-cache'", ")", "\n", "", "else", ":", "\n", "        ", "stream", "=", "open", "(", "path_or_url", ",", "'rb'", ")", "\n", "\n", "", "tflib", ".", "init_tf", "(", ")", "\n", "with", "stream", ":", "\n", "        ", "G", ",", "D", ",", "Gs", "=", "pickle", ".", "load", "(", "stream", ",", "encoding", "=", "'latin1'", ")", "\n", "", "_cached_networks", "[", "path_or_url", "]", "=", "G", ",", "D", ",", "Gs", "\n", "return", "G", ",", "D", ",", "Gs", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.project_image": [[21, 31], ["set", "training.misc.save_image_grid", "proj.start", "print", "proj.get_cur_step", "print", "proj.step", "numpy.linspace", "proj.get_cur_step", "training.misc.save_image_grid", "proj.get_images", "proj.get_cur_step", "proj.get_cur_step"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.start", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_cur_step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_cur_step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image_grid", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_images", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_cur_step", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.get_cur_step"], ["def", "project_image", "(", "proj", ",", "targets", ",", "png_prefix", ",", "num_snapshots", ")", ":", "\n", "    ", "snapshot_steps", "=", "set", "(", "proj", ".", "num_steps", "-", "np", ".", "linspace", "(", "0", ",", "proj", ".", "num_steps", ",", "num_snapshots", ",", "endpoint", "=", "False", ",", "dtype", "=", "int", ")", ")", "\n", "misc", ".", "save_image_grid", "(", "targets", ",", "png_prefix", "+", "'target.png'", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ")", "\n", "proj", ".", "start", "(", "targets", ")", "\n", "while", "proj", ".", "get_cur_step", "(", ")", "<", "proj", ".", "num_steps", ":", "\n", "        ", "print", "(", "'\\r%d / %d ... '", "%", "(", "proj", ".", "get_cur_step", "(", ")", ",", "proj", ".", "num_steps", ")", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "proj", ".", "step", "(", ")", "\n", "if", "proj", ".", "get_cur_step", "(", ")", "in", "snapshot_steps", ":", "\n", "            ", "misc", ".", "save_image_grid", "(", "proj", ".", "get_images", "(", ")", ",", "png_prefix", "+", "'step%04d.png'", "%", "proj", ".", "get_cur_step", "(", ")", ",", "drange", "=", "[", "-", "1", ",", "1", "]", ")", "\n", "", "", "print", "(", "'\\r%-30s\\r'", "%", "''", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.project_generated_images": [[34, 52], ["print", "pretrained_networks.load_networks", "projector.Projector", "projector.Projector.set_network", "dnnlib.EasyDict", "dnnlib.EasyDict", "enumerate", "print", "numpy.random.RandomState", "np.random.RandomState.randn", "dnnlib.set_vars", "Gs.run", "run_projector.project_image", "Gs.components.synthesis.vars.items", "name.startswith", "np.random.RandomState.randn", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path", "len", "var.shape.as_list"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.load_networks", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.set_network", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.tfutil.set_vars", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.project_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path"], ["", "def", "project_generated_images", "(", "network_pkl", ",", "seeds", ",", "num_snapshots", ",", "truncation_psi", ")", ":", "\n", "    ", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "_G", ",", "_D", ",", "Gs", "=", "pretrained_networks", ".", "load_networks", "(", "network_pkl", ")", "\n", "proj", "=", "projector", ".", "Projector", "(", ")", "\n", "proj", ".", "set_network", "(", "Gs", ")", "\n", "noise_vars", "=", "[", "var", "for", "name", ",", "var", "in", "Gs", ".", "components", ".", "synthesis", ".", "vars", ".", "items", "(", ")", "if", "name", ".", "startswith", "(", "'noise'", ")", "]", "\n", "\n", "Gs_kwargs", "=", "dnnlib", ".", "EasyDict", "(", ")", "\n", "Gs_kwargs", ".", "randomize_noise", "=", "False", "\n", "Gs_kwargs", ".", "truncation_psi", "=", "truncation_psi", "\n", "\n", "for", "seed_idx", ",", "seed", "in", "enumerate", "(", "seeds", ")", ":", "\n", "        ", "print", "(", "'Projecting seed %d (%d/%d) ...'", "%", "(", "seed", ",", "seed_idx", ",", "len", "(", "seeds", ")", ")", ")", "\n", "rnd", "=", "np", ".", "random", ".", "RandomState", "(", "seed", ")", "\n", "z", "=", "rnd", ".", "randn", "(", "1", ",", "*", "Gs", ".", "input_shape", "[", "1", ":", "]", ")", "\n", "tflib", ".", "set_vars", "(", "{", "var", ":", "rnd", ".", "randn", "(", "*", "var", ".", "shape", ".", "as_list", "(", ")", ")", "for", "var", "in", "noise_vars", "}", ")", "\n", "images", "=", "Gs", ".", "run", "(", "z", ",", "None", ",", "**", "Gs_kwargs", ")", "\n", "project_image", "(", "proj", ",", "targets", "=", "images", ",", "png_prefix", "=", "dnnlib", ".", "make_run_dir_path", "(", "'seed%04d-'", "%", "seed", ")", ",", "num_snapshots", "=", "num_snapshots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.project_real_images": [[55, 70], ["print", "pretrained_networks.load_networks", "projector.Projector", "projector.Projector.set_network", "print", "training.dataset.load_dataset", "range", "print", "dataset.load_dataset.get_minibatch_np", "training.misc.adjust_dynamic_range", "run_projector.project_image", "dnnlib.make_run_dir_path", "dnnlib.make_run_dir_path"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.pretrained_networks.load_networks", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.projector.Projector.set_network", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.load_dataset", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.dataset.SyntheticDataset.get_minibatch_np", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.adjust_dynamic_range", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.project_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.make_run_dir_path"], ["", "", "def", "project_real_images", "(", "network_pkl", ",", "dataset_name", ",", "data_dir", ",", "num_images", ",", "num_snapshots", ")", ":", "\n", "    ", "print", "(", "'Loading networks from \"%s\"...'", "%", "network_pkl", ")", "\n", "_G", ",", "_D", ",", "Gs", "=", "pretrained_networks", ".", "load_networks", "(", "network_pkl", ")", "\n", "proj", "=", "projector", ".", "Projector", "(", ")", "\n", "proj", ".", "set_network", "(", "Gs", ")", "\n", "\n", "print", "(", "'Loading images from \"%s\"...'", "%", "dataset_name", ")", "\n", "dataset_obj", "=", "dataset", ".", "load_dataset", "(", "data_dir", "=", "data_dir", ",", "tfrecord_dir", "=", "dataset_name", ",", "max_label_size", "=", "0", ",", "repeat", "=", "False", ",", "shuffle_mb", "=", "0", ")", "\n", "assert", "dataset_obj", ".", "shape", "==", "Gs", ".", "output_shape", "[", "1", ":", "]", "\n", "\n", "for", "image_idx", "in", "range", "(", "num_images", ")", ":", "\n", "        ", "print", "(", "'Projecting image %d/%d ...'", "%", "(", "image_idx", ",", "num_images", ")", ")", "\n", "images", ",", "_labels", "=", "dataset_obj", ".", "get_minibatch_np", "(", "1", ")", "\n", "images", "=", "misc", ".", "adjust_dynamic_range", "(", "images", ",", "[", "0", ",", "255", "]", ",", "[", "-", "1", ",", "1", "]", ")", "\n", "project_image", "(", "proj", ",", "targets", "=", "images", ",", "png_prefix", "=", "dnnlib", ".", "make_run_dir_path", "(", "'image%04d-'", "%", "image_idx", ")", ",", "num_snapshots", "=", "num_snapshots", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector._parse_num_range": [[73, 82], ["re.compile", "re.compile.match", "s.split", "list", "int", "range", "int", "range_re.match.group", "int", "range_re.match.group"], "function", ["None"], ["", "", "def", "_parse_num_range", "(", "s", ")", ":", "\n", "    ", "'''Accept either a comma separated list of numbers 'a,b,c' or a range 'a-c' and return as a list of ints.'''", "\n", "\n", "range_re", "=", "re", ".", "compile", "(", "r'^(\\d+)-(\\d+)$'", ")", "\n", "m", "=", "range_re", ".", "match", "(", "s", ")", "\n", "if", "m", ":", "\n", "        ", "return", "list", "(", "range", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "int", "(", "m", ".", "group", "(", "2", ")", ")", "+", "1", ")", ")", "\n", "", "vals", "=", "s", ".", "split", "(", "','", ")", "\n", "return", "[", "int", "(", "x", ")", "for", "x", "in", "vals", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_projector.main": [[97, 142], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.parse_args", "vars", "dnnlib.SubmitConfig", "dnnlib.SubmitConfig", "vars.pop", "vars.pop", "dnnlib.submit_run", "dnnlib.submit_run", "print", "sys.exit", "range"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'''StyleGAN2 projector.\n\nRun 'python %(prog)s <subcommand> --help' for subcommand help.'''", ",", "\n", "epilog", "=", "_examples", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "help", "=", "'Sub-commands'", ",", "dest", "=", "'command'", ")", "\n", "\n", "project_generated_images_parser", "=", "subparsers", ".", "add_parser", "(", "'project-generated-images'", ",", "help", "=", "'Project generated images'", ")", "\n", "project_generated_images_parser", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'Network pickle filename'", ",", "dest", "=", "'network_pkl'", ",", "required", "=", "True", ")", "\n", "project_generated_images_parser", ".", "add_argument", "(", "'--seeds'", ",", "type", "=", "_parse_num_range", ",", "help", "=", "'List of random seeds'", ",", "default", "=", "range", "(", "3", ")", ")", "\n", "project_generated_images_parser", ".", "add_argument", "(", "'--num-snapshots'", ",", "type", "=", "int", ",", "help", "=", "'Number of snapshots (default: %(default)s)'", ",", "default", "=", "5", ")", "\n", "project_generated_images_parser", ".", "add_argument", "(", "'--truncation-psi'", ",", "type", "=", "float", ",", "help", "=", "'Truncation psi (default: %(default)s)'", ",", "default", "=", "1.0", ")", "\n", "project_generated_images_parser", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "\n", "project_real_images_parser", "=", "subparsers", ".", "add_parser", "(", "'project-real-images'", ",", "help", "=", "'Project real images'", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--network'", ",", "help", "=", "'Network pickle filename'", ",", "dest", "=", "'network_pkl'", ",", "required", "=", "True", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--data-dir'", ",", "help", "=", "'Dataset root directory'", ",", "required", "=", "True", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Training dataset'", ",", "dest", "=", "'dataset_name'", ",", "required", "=", "True", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--num-snapshots'", ",", "type", "=", "int", ",", "help", "=", "'Number of snapshots (default: %(default)s)'", ",", "default", "=", "5", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--num-images'", ",", "type", "=", "int", ",", "help", "=", "'Number of images to project (default: %(default)s)'", ",", "default", "=", "3", ")", "\n", "project_real_images_parser", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "subcmd", "=", "args", ".", "command", "\n", "if", "subcmd", "is", "None", ":", "\n", "        ", "print", "(", "'Error: missing subcommand.  Re-run with --help for usage.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "kwargs", "=", "vars", "(", "args", ")", "\n", "sc", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "\n", "sc", ".", "num_gpus", "=", "1", "\n", "sc", ".", "submit_target", "=", "dnnlib", ".", "SubmitTarget", ".", "LOCAL", "\n", "sc", ".", "local", ".", "do_not_copy_source_files", "=", "True", "\n", "sc", ".", "run_dir_root", "=", "kwargs", ".", "pop", "(", "'result_dir'", ")", "\n", "sc", ".", "run_desc", "=", "kwargs", ".", "pop", "(", "'command'", ")", "\n", "\n", "func_name_map", "=", "{", "\n", "'project-generated-images'", ":", "'run_projector.project_generated_images'", ",", "\n", "'project-real-images'", ":", "'run_projector.project_real_images'", "\n", "}", "\n", "dnnlib", ".", "submit_run", "(", "sc", ",", "func_name_map", "[", "subcmd", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_training.run": [[36, 121], ["dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.SubmitConfig", "dnnlib.EasyDict", "config_id.startswith", "dnnlib.EasyDict", "dnnlib.EasyDict.update", "dnnlib.EasyDict.update", "copy.deepcopy", "dnnlib.submit_run", "dnnlib.EasyDict", "dnnlib.EasyDict", "dnnlib.EasyDict"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.submit_run"], ["def", "run", "(", "dataset", ",", "data_dir", ",", "result_dir", ",", "config_id", ",", "num_gpus", ",", "total_kimg", ",", "gamma", ",", "mirror_augment", ",", "metrics", ")", ":", "\n", "    ", "train", "=", "EasyDict", "(", "run_func_name", "=", "'training.training_loop.training_loop'", ")", "# Options for training loop.", "\n", "G", "=", "EasyDict", "(", "func_name", "=", "'training.networks_stylegan2.G_main'", ")", "# Options for generator network.", "\n", "D", "=", "EasyDict", "(", "func_name", "=", "'training.networks_stylegan2.D_stylegan2'", ")", "# Options for discriminator network.", "\n", "G_opt", "=", "EasyDict", "(", "beta1", "=", "0.0", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", "# Options for generator optimizer.", "\n", "D_opt", "=", "EasyDict", "(", "beta1", "=", "0.0", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ")", "# Options for discriminator optimizer.", "\n", "G_loss", "=", "EasyDict", "(", "func_name", "=", "'training.loss.G_logistic_ns_pathreg'", ")", "# Options for generator loss.", "\n", "D_loss", "=", "EasyDict", "(", "func_name", "=", "'training.loss.D_logistic_r1'", ")", "# Options for discriminator loss.", "\n", "sched", "=", "EasyDict", "(", ")", "# Options for TrainingSchedule.", "\n", "grid", "=", "EasyDict", "(", "size", "=", "'8k'", ",", "layout", "=", "'random'", ")", "# Options for setup_snapshot_image_grid().", "\n", "sc", "=", "dnnlib", ".", "SubmitConfig", "(", ")", "# Options for dnnlib.submit_run().", "\n", "tf_config", "=", "{", "'rnd.np_random_seed'", ":", "1000", "}", "# Options for tflib.init_tf().", "\n", "\n", "train", ".", "data_dir", "=", "data_dir", "\n", "train", ".", "total_kimg", "=", "total_kimg", "\n", "train", ".", "mirror_augment", "=", "mirror_augment", "\n", "train", ".", "image_snapshot_ticks", "=", "train", ".", "network_snapshot_ticks", "=", "10", "\n", "sched", ".", "G_lrate_base", "=", "sched", ".", "D_lrate_base", "=", "0.002", "\n", "sched", ".", "minibatch_size_base", "=", "32", "\n", "sched", ".", "minibatch_gpu_base", "=", "4", "\n", "D_loss", ".", "gamma", "=", "10", "\n", "metrics", "=", "[", "metric_defaults", "[", "x", "]", "for", "x", "in", "metrics", "]", "\n", "desc", "=", "'stylegan2'", "\n", "\n", "desc", "+=", "'-'", "+", "dataset", "\n", "dataset_args", "=", "EasyDict", "(", "tfrecord_dir", "=", "dataset", ")", "\n", "\n", "assert", "num_gpus", "in", "[", "1", ",", "2", ",", "4", ",", "8", "]", "\n", "sc", ".", "num_gpus", "=", "num_gpus", "\n", "desc", "+=", "'-%dgpu'", "%", "num_gpus", "\n", "\n", "assert", "config_id", "in", "_valid_configs", "\n", "desc", "+=", "'-'", "+", "config_id", "\n", "\n", "# Configs A-E: Shrink networks to match original StyleGAN.", "\n", "if", "config_id", "!=", "'config-f'", ":", "\n", "        ", "G", ".", "fmap_base", "=", "D", ".", "fmap_base", "=", "8", "<<", "10", "\n", "\n", "# Config E: Set gamma to 100 and override G & D architecture.", "\n", "", "if", "config_id", ".", "startswith", "(", "'config-e'", ")", ":", "\n", "        ", "D_loss", ".", "gamma", "=", "100", "\n", "if", "'Gorig'", "in", "config_id", ":", "G", ".", "architecture", "=", "'orig'", "\n", "if", "'Gskip'", "in", "config_id", ":", "G", ".", "architecture", "=", "'skip'", "# (default)", "\n", "if", "'Gresnet'", "in", "config_id", ":", "G", ".", "architecture", "=", "'resnet'", "\n", "if", "'Dorig'", "in", "config_id", ":", "D", ".", "architecture", "=", "'orig'", "\n", "if", "'Dskip'", "in", "config_id", ":", "D", ".", "architecture", "=", "'skip'", "\n", "if", "'Dresnet'", "in", "config_id", ":", "D", ".", "architecture", "=", "'resnet'", "# (default)", "\n", "\n", "# Configs A-D: Enable progressive growing and switch to networks that support it.", "\n", "", "if", "config_id", "in", "[", "'config-a'", ",", "'config-b'", ",", "'config-c'", ",", "'config-d'", "]", ":", "\n", "        ", "sched", ".", "lod_initial_resolution", "=", "8", "\n", "sched", ".", "G_lrate_base", "=", "sched", ".", "D_lrate_base", "=", "0.001", "\n", "sched", ".", "G_lrate_dict", "=", "sched", ".", "D_lrate_dict", "=", "{", "128", ":", "0.0015", ",", "256", ":", "0.002", ",", "512", ":", "0.003", ",", "1024", ":", "0.003", "}", "\n", "sched", ".", "minibatch_size_base", "=", "32", "# (default)", "\n", "sched", ".", "minibatch_size_dict", "=", "{", "8", ":", "256", ",", "16", ":", "128", ",", "32", ":", "64", ",", "64", ":", "32", "}", "\n", "sched", ".", "minibatch_gpu_base", "=", "4", "# (default)", "\n", "sched", ".", "minibatch_gpu_dict", "=", "{", "8", ":", "32", ",", "16", ":", "16", ",", "32", ":", "8", ",", "64", ":", "4", "}", "\n", "G", ".", "synthesis_func", "=", "'G_synthesis_stylegan_revised'", "\n", "D", ".", "func_name", "=", "'training.networks_stylegan2.D_stylegan'", "\n", "\n", "# Configs A-C: Disable path length regularization.", "\n", "", "if", "config_id", "in", "[", "'config-a'", ",", "'config-b'", ",", "'config-c'", "]", ":", "\n", "        ", "G_loss", "=", "EasyDict", "(", "func_name", "=", "'training.loss.G_logistic_ns'", ")", "\n", "\n", "# Configs A-B: Disable lazy regularization.", "\n", "", "if", "config_id", "in", "[", "'config-a'", ",", "'config-b'", "]", ":", "\n", "        ", "train", ".", "lazy_regularization", "=", "False", "\n", "\n", "# Config A: Switch to original StyleGAN networks.", "\n", "", "if", "config_id", "==", "'config-a'", ":", "\n", "        ", "G", "=", "EasyDict", "(", "func_name", "=", "'training.networks_stylegan.G_style'", ")", "\n", "D", "=", "EasyDict", "(", "func_name", "=", "'training.networks_stylegan.D_basic'", ")", "\n", "\n", "", "if", "gamma", "is", "not", "None", ":", "\n", "        ", "D_loss", ".", "gamma", "=", "gamma", "\n", "\n", "", "sc", ".", "submit_target", "=", "dnnlib", ".", "SubmitTarget", ".", "LOCAL", "\n", "sc", ".", "local", ".", "do_not_copy_source_files", "=", "True", "\n", "kwargs", "=", "EasyDict", "(", "train", ")", "\n", "kwargs", ".", "update", "(", "G_args", "=", "G", ",", "D_args", "=", "D", ",", "G_opt_args", "=", "G_opt", ",", "D_opt_args", "=", "D_opt", ",", "G_loss_args", "=", "G_loss", ",", "D_loss_args", "=", "D_loss", ")", "\n", "kwargs", ".", "update", "(", "dataset_args", "=", "dataset_args", ",", "sched_args", "=", "sched", ",", "grid_args", "=", "grid", ",", "metric_arg_list", "=", "metrics", ",", "tf_config", "=", "tf_config", ")", "\n", "kwargs", ".", "submit_config", "=", "copy", ".", "deepcopy", "(", "sc", ")", "\n", "kwargs", ".", "submit_config", ".", "run_dir_root", "=", "result_dir", "\n", "kwargs", ".", "submit_config", ".", "run_desc", "=", "desc", "\n", "dnnlib", ".", "submit_run", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_training._str_to_bool": [[124, 133], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "_str_to_bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "        ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_training._parse_comma_sep": [[134, 138], ["s.split", "s.lower"], "function", ["None"], ["", "", "def", "_parse_comma_sep", "(", "s", ")", ":", "\n", "    ", "if", "s", "is", "None", "or", "s", ".", "lower", "(", ")", "==", "'none'", "or", "s", "==", "''", ":", "\n", "        ", "return", "[", "]", "\n", "", "return", "s", ".", "split", "(", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.run_training.main": [[156, 188], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_training.run", "os.path.exists", "print", "sys.exit", "print", "sys.exit", "print", "sys.exit", "vars"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Train StyleGAN2.'", ",", "\n", "epilog", "=", "_examples", ",", "\n", "formatter_class", "=", "argparse", ".", "RawDescriptionHelpFormatter", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'--result-dir'", ",", "help", "=", "'Root directory for run results (default: %(default)s)'", ",", "default", "=", "'results'", ",", "metavar", "=", "'DIR'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "help", "=", "'Dataset root directory'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "help", "=", "'Training dataset'", ",", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "help", "=", "'Training config (default: %(default)s)'", ",", "default", "=", "'config-f'", ",", "required", "=", "True", ",", "dest", "=", "'config_id'", ",", "metavar", "=", "'CONFIG'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gpus'", ",", "help", "=", "'Number of GPUs (default: %(default)s)'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ")", "\n", "parser", ".", "add_argument", "(", "'--total-kimg'", ",", "help", "=", "'Training length in thousands of images (default: %(default)s)'", ",", "metavar", "=", "'KIMG'", ",", "default", "=", "25000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "help", "=", "'R1 regularization weight (default is config dependent)'", ",", "default", "=", "None", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--mirror-augment'", ",", "help", "=", "'Mirror augment (default: %(default)s)'", ",", "default", "=", "False", ",", "metavar", "=", "'BOOL'", ",", "type", "=", "_str_to_bool", ")", "\n", "parser", ".", "add_argument", "(", "'--metrics'", ",", "help", "=", "'Comma-separated list of metrics or \"none\" (default: %(default)s)'", ",", "default", "=", "'fid50k'", ",", "type", "=", "_parse_comma_sep", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "data_dir", ")", ":", "\n", "        ", "print", "(", "'Error: dataset root directory does not exist.'", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "if", "args", ".", "config_id", "not", "in", "_valid_configs", ":", "\n", "        ", "print", "(", "'Error: --config value must be one of: '", ",", "', '", ".", "join", "(", "_valid_configs", ")", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "for", "metric", "in", "args", ".", "metrics", ":", "\n", "        ", "if", "metric", "not", "in", "metric_defaults", ":", "\n", "            ", "print", "(", "'Error: unknown metric \\'%s\\''", "%", "metric", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "", "run", "(", "**", "vars", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.TargetOptions.__init__": [[8, 10], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "do_not_copy_source_files", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.__init__": [[12, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.finalize_submit_config": [[15, 18], ["print"], "methods", ["None"], ["", "def", "finalize_submit_config", "(", "self", ",", "submit_config", ",", "host_run_dir", ")", ":", "\n", "        ", "print", "(", "'Local submit '", ",", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "submit_config", ".", "run_dir", "=", "host_run_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.internal.local.Target.submit": [[19, 23], ["print", "run_wrapper", "convert_path"], "methods", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.run_wrapper", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.submit.convert_path"], ["", "def", "submit", "(", "self", ",", "submit_config", ",", "host_run_dir", ")", ":", "\n", "        ", "from", ".", ".", "submit", "import", "run_wrapper", ",", "convert_path", "\n", "print", "(", "'- run_dir: %s'", "%", "convert_path", "(", "submit_config", ".", "run_dir", ")", ",", "flush", "=", "True", ")", "\n", "return", "run_wrapper", "(", "submit_config", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._get_plugin": [[14, 16], ["custom_ops.get_plugin", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops.get_plugin"], ["def", "_get_plugin", "(", ")", ":", "\n", "    ", "return", "custom_ops", ".", "get_plugin", "(", "os", ".", "path", ".", "splitext", "(", "__file__", ")", "[", "0", "]", "+", "'.cu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upfirdn_2d": [[19, 63], ["None"], "function", ["None"], ["", "def", "upfirdn_2d", "(", "x", ",", "k", ",", "upx", "=", "1", ",", "upy", "=", "1", ",", "downx", "=", "1", ",", "downy", "=", "1", ",", "padx0", "=", "0", ",", "padx1", "=", "0", ",", "pady0", "=", "0", ",", "pady1", "=", "0", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Pad, upsample, FIR filter, and downsample a batch of 2D images.\n\n    Accepts a batch of 2D images of the shape `[majorDim, inH, inW, minorDim]`\n    and performs the following operations for each image, batched across\n    `majorDim` and `minorDim`:\n\n    1. Pad the image with zeros by the specified number of pixels on each side\n       (`padx0`, `padx1`, `pady0`, `pady1`). Specifying a negative value\n       corresponds to cropping the image.\n\n    2. Upsample the image by inserting the zeros after each pixel (`upx`, `upy`).\n\n    3. Convolve the image with the specified 2D FIR filter (`k`), shrinking the\n       image so that the footprint of all output pixels lies within the input image.\n\n    4. Downsample the image by throwing away pixels (`downx`, `downy`).\n\n    This sequence of operations bears close resemblance to scipy.signal.upfirdn().\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:      Input tensor of the shape `[majorDim, inH, inW, minorDim]`.\n        k:      2D FIR filter of the shape `[firH, firW]`.\n        upx:    Integer upsampling factor along the X-axis (default: 1).\n        upy:    Integer upsampling factor along the Y-axis (default: 1).\n        downx:  Integer downsampling factor along the X-axis (default: 1).\n        downy:  Integer downsampling factor along the Y-axis (default: 1).\n        padx0:  Number of pixels to pad on the left side (default: 0).\n        padx1:  Number of pixels to pad on the right side (default: 0).\n        pady0:  Number of pixels to pad on the top side (default: 0).\n        pady1:  Number of pixels to pad on the bottom side (default: 0).\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[majorDim, outH, outW, minorDim]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "impl_dict", "=", "{", "\n", "'ref'", ":", "_upfirdn_2d_ref", ",", "\n", "'cuda'", ":", "_upfirdn_2d_cuda", ",", "\n", "}", "\n", "return", "impl_dict", "[", "impl", "]", "(", "x", "=", "x", ",", "k", "=", "k", ",", "upx", "=", "upx", ",", "upy", "=", "upy", ",", "downx", "=", "downx", ",", "downy", "=", "downy", ",", "padx0", "=", "padx0", ",", "padx1", "=", "padx1", ",", "pady0", "=", "pady0", ",", "pady1", "=", "pady1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._upfirdn_2d_ref": [[66, 102], ["tensorflow.convert_to_tensor", "numpy.asarray", "upfirdn_2d._shape", "tensorflow.reshape", "tensorflow.pad", "tensorflow.reshape", "tensorflow.pad", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.constant", "tensorflow.nn.conv2d", "tensorflow.reshape", "tensorflow.transpose", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "isinstance", "max", "max", "max", "max", "max", "max", "max", "max"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d"], ["", "def", "_upfirdn_2d_ref", "(", "x", ",", "k", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `upfirdn_2d()` using standard TensorFlow ops.\"\"\"", "\n", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "assert", "x", ".", "shape", ".", "rank", "==", "4", "\n", "inH", "=", "x", ".", "shape", "[", "1", "]", ".", "value", "\n", "inW", "=", "x", ".", "shape", "[", "2", "]", ".", "value", "\n", "minorDim", "=", "_shape", "(", "x", ",", "3", ")", "\n", "kernelH", ",", "kernelW", "=", "k", ".", "shape", "\n", "assert", "inW", ">=", "1", "and", "inH", ">=", "1", "\n", "assert", "kernelW", ">=", "1", "and", "kernelH", ">=", "1", "\n", "assert", "isinstance", "(", "upx", ",", "int", ")", "and", "isinstance", "(", "upy", ",", "int", ")", "\n", "assert", "isinstance", "(", "downx", ",", "int", ")", "and", "isinstance", "(", "downy", ",", "int", ")", "\n", "assert", "isinstance", "(", "padx0", ",", "int", ")", "and", "isinstance", "(", "padx1", ",", "int", ")", "\n", "assert", "isinstance", "(", "pady0", ",", "int", ")", "and", "isinstance", "(", "pady1", ",", "int", ")", "\n", "\n", "# Upsample (insert zeros).", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "inH", ",", "1", ",", "inW", ",", "1", ",", "minorDim", "]", ")", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "upy", "-", "1", "]", ",", "[", "0", ",", "0", "]", ",", "[", "0", ",", "upx", "-", "1", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "inH", "*", "upy", ",", "inW", "*", "upx", ",", "minorDim", "]", ")", "\n", "\n", "# Pad (crop if negative).", "\n", "x", "=", "tf", ".", "pad", "(", "x", ",", "[", "[", "0", ",", "0", "]", ",", "[", "max", "(", "pady0", ",", "0", ")", ",", "max", "(", "pady1", ",", "0", ")", "]", ",", "[", "max", "(", "padx0", ",", "0", ")", ",", "max", "(", "padx1", ",", "0", ")", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "x", "=", "x", "[", ":", ",", "max", "(", "-", "pady0", ",", "0", ")", ":", "x", ".", "shape", "[", "1", "]", ".", "value", "-", "max", "(", "-", "pady1", ",", "0", ")", ",", "max", "(", "-", "padx0", ",", "0", ")", ":", "x", ".", "shape", "[", "2", "]", ".", "value", "-", "max", "(", "-", "padx1", ",", "0", ")", ",", ":", "]", "\n", "\n", "# Convolve with filter.", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "1", ",", "inH", "*", "upy", "+", "pady0", "+", "pady1", ",", "inW", "*", "upx", "+", "padx0", "+", "padx1", "]", ")", "\n", "w", "=", "tf", ".", "constant", "(", "k", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", ",", "np", ".", "newaxis", ",", "np", ".", "newaxis", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x", "=", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "'NCHW'", ")", "\n", "x", "=", "tf", ".", "reshape", "(", "x", ",", "[", "-", "1", ",", "minorDim", ",", "inH", "*", "upy", "+", "pady0", "+", "pady1", "-", "kernelH", "+", "1", ",", "inW", "*", "upx", "+", "padx0", "+", "padx1", "-", "kernelW", "+", "1", "]", ")", "\n", "x", "=", "tf", ".", "transpose", "(", "x", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "# Downsample (throw away pixels).", "\n", "return", "x", "[", ":", ",", ":", ":", "downy", ",", ":", ":", "downx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._upfirdn_2d_cuda": [[105, 141], ["tensorflow.convert_to_tensor", "numpy.asarray", "tf.convert_to_tensor.shape.as_list", "tensorflow.constant", "tensorflow.constant", "upfirdn_2d._upfirdn_2d_cuda.func"], "function", ["None"], ["", "def", "_upfirdn_2d_cuda", "(", "x", ",", "k", ",", "upx", ",", "upy", ",", "downx", ",", "downy", ",", "padx0", ",", "padx1", ",", "pady0", ",", "pady1", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `upfirdn_2d()` using custom ops.\"\"\"", "\n", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "majorDim", ",", "inH", ",", "inW", ",", "minorDim", "=", "x", ".", "shape", ".", "as_list", "(", ")", "\n", "kernelH", ",", "kernelW", "=", "k", ".", "shape", "\n", "assert", "inW", ">=", "1", "and", "inH", ">=", "1", "\n", "assert", "kernelW", ">=", "1", "and", "kernelH", ">=", "1", "\n", "assert", "isinstance", "(", "upx", ",", "int", ")", "and", "isinstance", "(", "upy", ",", "int", ")", "\n", "assert", "isinstance", "(", "downx", ",", "int", ")", "and", "isinstance", "(", "downy", ",", "int", ")", "\n", "assert", "isinstance", "(", "padx0", ",", "int", ")", "and", "isinstance", "(", "padx1", ",", "int", ")", "\n", "assert", "isinstance", "(", "pady0", ",", "int", ")", "and", "isinstance", "(", "pady1", ",", "int", ")", "\n", "\n", "outW", "=", "(", "inW", "*", "upx", "+", "padx0", "+", "padx1", "-", "kernelW", ")", "//", "downx", "+", "1", "\n", "outH", "=", "(", "inH", "*", "upy", "+", "pady0", "+", "pady1", "-", "kernelH", ")", "//", "downy", "+", "1", "\n", "assert", "outW", ">=", "1", "and", "outH", ">=", "1", "\n", "\n", "kc", "=", "tf", ".", "constant", "(", "k", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "gkc", "=", "tf", ".", "constant", "(", "k", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "gpadx0", "=", "kernelW", "-", "padx0", "-", "1", "\n", "gpady0", "=", "kernelH", "-", "pady0", "-", "1", "\n", "gpadx1", "=", "inW", "*", "upx", "-", "outW", "*", "downx", "+", "padx0", "-", "upx", "+", "1", "\n", "gpady1", "=", "inH", "*", "upy", "-", "outH", "*", "downy", "+", "pady0", "-", "upy", "+", "1", "\n", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "func", "(", "x", ")", ":", "\n", "        ", "y", "=", "_get_plugin", "(", ")", ".", "up_fir_dn2d", "(", "x", "=", "x", ",", "k", "=", "kc", ",", "upx", "=", "upx", ",", "upy", "=", "upy", ",", "downx", "=", "downx", ",", "downy", "=", "downy", ",", "padx0", "=", "padx0", ",", "padx1", "=", "padx1", ",", "pady0", "=", "pady0", ",", "pady1", "=", "pady1", ")", "\n", "y", ".", "set_shape", "(", "[", "majorDim", ",", "outH", ",", "outW", ",", "minorDim", "]", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "dx", "=", "_get_plugin", "(", ")", ".", "up_fir_dn2d", "(", "x", "=", "dy", ",", "k", "=", "gkc", ",", "upx", "=", "downx", ",", "upy", "=", "downy", ",", "downx", "=", "upx", ",", "downy", "=", "upy", ",", "padx0", "=", "gpadx0", ",", "padx1", "=", "gpadx1", ",", "pady0", "=", "gpady0", ",", "pady1", "=", "gpady1", ")", "\n", "dx", ".", "set_shape", "(", "[", "majorDim", ",", "inH", ",", "inW", ",", "minorDim", "]", ")", "\n", "return", "dx", ",", "func", "\n", "", "return", "y", ",", "grad", "\n", "", "return", "func", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.filter_2d": [[144, 166], ["upfirdn_2d._simple_upfirdn_2d", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel"], ["", "def", "filter_2d", "(", "x", ",", "k", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Filter a batch of 2D images with the given FIR filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and filters each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "\n", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "1", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upsample_2d": [[169, 199], ["upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel"], ["", "def", "upsample_2d", "(", "x", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Upsample a batch of 2D images with the given filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and upsamples each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero, and the filter is padded with\n    zeros so that its shape is a multiple of the upsampling factor.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to nearest-neighbor\n                      upsampling.\n        factor:       Integer upsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H * factor, W * factor]` or\n        `[N, H * factor, W * factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "(", "gain", "*", "(", "factor", "**", "2", ")", ")", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "factor", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "up", "=", "factor", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.downsample_2d": [[202, 231], ["upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel"], ["", "def", "downsample_2d", "(", "x", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Downsample a batch of 2D images with the given filter.\n\n    Accepts a batch of 2D images of the shape `[N, C, H, W]` or `[N, H, W, C]`\n    and downsamples each image with the given filter. The filter is normalized so that\n    if the input pixels are constant, they will be scaled by the specified `gain`.\n    Pixels outside the image are assumed to be zero, and the filter is padded with\n    zeros so that its shape is a multiple of the downsampling factor.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to average pooling.\n        factor:       Integer downsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H // factor, W // factor]` or\n        `[N, H // factor, W // factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "k", ".", "shape", "[", "0", "]", "-", "factor", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "down", "=", "factor", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upsample_conv_2d": [[234, 293], ["tensorflow.convert_to_tensor", "upfirdn_2d._shape", "upfirdn_2d._shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.reshape", "tensorflow.nn.conv2d_transpose", "upfirdn_2d._simple_upfirdn_2d", "isinstance", "upfirdn_2d._setup_kernel", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape"], ["", "def", "upsample_conv_2d", "(", "x", ",", "w", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Fused `upsample_2d()` followed by `tf.nn.conv2d()`.\n\n    Padding is performed only once at the beginning, not between the operations.\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        w:            Weight tensor of the shape `[filterH, filterW, inChannels, outChannels]`.\n                      Grouped convolution can be performed by `inChannels = x.shape[0] // numGroups`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to nearest-neighbor\n                      upsampling.\n        factor:       Integer upsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H * factor, W * factor]` or\n        `[N, H * factor, W * factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "\n", "# Check weight shape.", "\n", "w", "=", "tf", ".", "convert_to_tensor", "(", "w", ")", "\n", "assert", "w", ".", "shape", ".", "rank", "==", "4", "\n", "convH", "=", "w", ".", "shape", "[", "0", "]", ".", "value", "\n", "convW", "=", "w", ".", "shape", "[", "1", "]", ".", "value", "\n", "inC", "=", "_shape", "(", "w", ",", "2", ")", "\n", "outC", "=", "_shape", "(", "w", ",", "3", ")", "\n", "assert", "convW", "==", "convH", "\n", "\n", "# Setup filter kernel.", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "(", "gain", "*", "(", "factor", "**", "2", ")", ")", "\n", "p", "=", "(", "k", ".", "shape", "[", "0", "]", "-", "factor", ")", "-", "(", "convW", "-", "1", ")", "\n", "\n", "# Determine data dimensions.", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "stride", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "output_shape", "=", "[", "_shape", "(", "x", ",", "0", ")", ",", "outC", ",", "(", "_shape", "(", "x", ",", "2", ")", "-", "1", ")", "*", "factor", "+", "convH", ",", "(", "_shape", "(", "x", ",", "3", ")", "-", "1", ")", "*", "factor", "+", "convW", "]", "\n", "num_groups", "=", "_shape", "(", "x", ",", "1", ")", "//", "inC", "\n", "", "else", ":", "\n", "        ", "stride", "=", "[", "1", ",", "factor", ",", "factor", ",", "1", "]", "\n", "output_shape", "=", "[", "_shape", "(", "x", ",", "0", ")", ",", "(", "_shape", "(", "x", ",", "1", ")", "-", "1", ")", "*", "factor", "+", "convH", ",", "(", "_shape", "(", "x", ",", "2", ")", "-", "1", ")", "*", "factor", "+", "convW", ",", "outC", "]", "\n", "num_groups", "=", "_shape", "(", "x", ",", "3", ")", "//", "inC", "\n", "\n", "# Transpose weights.", "\n", "", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "convH", ",", "convW", ",", "inC", ",", "num_groups", ",", "-", "1", "]", ")", "\n", "w", "=", "tf", ".", "transpose", "(", "w", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ",", "[", "0", ",", "1", ",", "4", ",", "3", ",", "2", "]", ")", "\n", "w", "=", "tf", ".", "reshape", "(", "w", ",", "[", "convH", ",", "convW", ",", "-", "1", ",", "num_groups", "*", "inC", "]", ")", "\n", "\n", "# Execute.", "\n", "x", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "x", ",", "w", ",", "output_shape", "=", "output_shape", ",", "strides", "=", "stride", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "return", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", "+", "factor", "-", "1", ",", "pad1", "=", "p", "//", "2", "+", "1", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.conv_downsample_2d": [[296, 333], ["tensorflow.convert_to_tensor", "tf.convert_to_tensor.shape.as_list", "upfirdn_2d._simple_upfirdn_2d", "tensorflow.nn.conv2d", "isinstance", "upfirdn_2d._setup_kernel"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.networks_progan.conv2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel"], ["", "def", "conv_downsample_2d", "(", "x", ",", "w", ",", "k", "=", "None", ",", "factor", "=", "2", ",", "gain", "=", "1", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Fused `tf.nn.conv2d()` followed by `downsample_2d()`.\n\n    Padding is performed only once at the beginning, not between the operations.\n    The fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports gradients of arbitrary order.\n\n    Args:\n        x:            Input tensor of the shape `[N, C, H, W]` or `[N, H, W, C]`.\n        w:            Weight tensor of the shape `[filterH, filterW, inChannels, outChannels]`.\n                      Grouped convolution can be performed by `inChannels = x.shape[0] // numGroups`.\n        k:            FIR filter of the shape `[firH, firW]` or `[firN]` (separable).\n                      The default is `[1] * factor`, which corresponds to average pooling.\n        factor:       Integer downsampling factor (default: 2).\n        gain:         Scaling factor for signal magnitude (default: 1.0).\n        data_format:  `'NCHW'` or `'NHWC'` (default: `'NCHW'`).\n        impl:         Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the shape `[N, C, H // factor, W // factor]` or\n        `[N, H // factor, W // factor, C]`, and same datatype as `x`.\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "factor", ",", "int", ")", "and", "factor", ">=", "1", "\n", "w", "=", "tf", ".", "convert_to_tensor", "(", "w", ")", "\n", "convH", ",", "convW", ",", "_inC", ",", "_outC", "=", "w", ".", "shape", ".", "as_list", "(", ")", "\n", "assert", "convW", "==", "convH", "\n", "if", "k", "is", "None", ":", "\n", "        ", "k", "=", "[", "1", "]", "*", "factor", "\n", "", "k", "=", "_setup_kernel", "(", "k", ")", "*", "gain", "\n", "p", "=", "(", "k", ".", "shape", "[", "0", "]", "-", "factor", ")", "+", "(", "convW", "-", "1", ")", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "s", "=", "[", "1", ",", "1", ",", "factor", ",", "factor", "]", "\n", "", "else", ":", "\n", "        ", "s", "=", "[", "1", ",", "factor", ",", "factor", ",", "1", "]", "\n", "", "x", "=", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "pad0", "=", "(", "p", "+", "1", ")", "//", "2", ",", "pad1", "=", "p", "//", "2", ",", "data_format", "=", "data_format", ",", "impl", "=", "impl", ")", "\n", "return", "tf", ".", "nn", ".", "conv2d", "(", "x", ",", "w", ",", "strides", "=", "s", ",", "padding", "=", "'VALID'", ",", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape": [[337, 343], ["tensorflow.shape"], "function", ["None"], ["", "def", "_shape", "(", "tf_expr", ",", "dim_idx", ")", ":", "\n", "    ", "if", "tf_expr", ".", "shape", ".", "rank", "is", "not", "None", ":", "\n", "        ", "dim", "=", "tf_expr", ".", "shape", "[", "dim_idx", "]", ".", "value", "\n", "if", "dim", "is", "not", "None", ":", "\n", "            ", "return", "dim", "\n", "", "", "return", "tf", ".", "shape", "(", "tf_expr", ")", "[", "dim_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._setup_kernel": [[344, 352], ["numpy.asarray", "numpy.sum", "numpy.outer"], "function", ["None"], ["", "def", "_setup_kernel", "(", "k", ")", ":", "\n", "    ", "k", "=", "np", ".", "asarray", "(", "k", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "if", "k", ".", "ndim", "==", "1", ":", "\n", "        ", "k", "=", "np", ".", "outer", "(", "k", ",", "k", ")", "\n", "", "k", "/=", "np", ".", "sum", "(", "k", ")", "\n", "assert", "k", ".", "ndim", "==", "2", "\n", "assert", "k", ".", "shape", "[", "0", "]", "==", "k", ".", "shape", "[", "1", "]", "\n", "return", "k", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._simple_upfirdn_2d": [[353, 363], ["upfirdn_2d.upfirdn_2d", "tensorflow.reshape", "tensorflow.reshape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape", "upfirdn_2d._shape"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d.upfirdn_2d", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.upfirdn_2d._shape"], ["", "def", "_simple_upfirdn_2d", "(", "x", ",", "k", ",", "up", "=", "1", ",", "down", "=", "1", ",", "pad0", "=", "0", ",", "pad1", "=", "0", ",", "data_format", "=", "'NCHW'", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "assert", "data_format", "in", "[", "'NCHW'", ",", "'NHWC'", "]", "\n", "assert", "x", ".", "shape", ".", "rank", "==", "4", "\n", "y", "=", "x", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "_shape", "(", "y", ",", "2", ")", ",", "_shape", "(", "y", ",", "3", ")", ",", "1", "]", ")", "\n", "", "y", "=", "upfirdn_2d", "(", "y", ",", "k", ",", "upx", "=", "up", ",", "upy", "=", "up", ",", "downx", "=", "down", ",", "downy", "=", "down", ",", "padx0", "=", "pad0", ",", "padx1", "=", "pad1", ",", "pady0", "=", "pad0", ",", "pady1", "=", "pad1", ",", "impl", "=", "impl", ")", "\n", "if", "data_format", "==", "'NCHW'", ":", "\n", "        ", "y", "=", "tf", ".", "reshape", "(", "y", ",", "[", "-", "1", ",", "_shape", "(", "x", ",", "1", ")", ",", "_shape", "(", "y", ",", "1", ")", ",", "_shape", "(", "y", ",", "2", ")", "]", ")", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.fused_bias_act._get_plugin": [[15, 17], ["custom_ops.get_plugin", "os.path.splitext"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.tflib.custom_ops.get_plugin"], ["def", "_get_plugin", "(", ")", ":", "\n", "    ", "return", "custom_ops", ".", "get_plugin", "(", "os", ".", "path", ".", "splitext", "(", "__file__", ")", "[", "0", "]", "+", "'.cu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.fused_bias_act.fused_bias_act": [[34, 69], ["None"], "function", ["None"], ["def", "fused_bias_act", "(", "x", ",", "b", "=", "None", ",", "axis", "=", "1", ",", "act", "=", "'linear'", ",", "alpha", "=", "None", ",", "gain", "=", "None", ",", "impl", "=", "'ref'", ")", ":", "\n", "    ", "r\"\"\"Fused bias and activation function.\n\n    Adds bias `b` to activation tensor `x`, evaluates activation function `act`,\n    and scales the result by `gain`. Each of the steps is optional. In most cases,\n    the fused op is considerably more efficient than performing the same calculation\n    using standard TensorFlow ops. It supports first and second order gradients,\n    but not third order gradients.\n\n    Args:\n        x:      Input activation tensor. Can have any shape, but if `b` is defined, the\n                dimension corresponding to `axis`, as well as the rank, must be known.\n        b:      Bias vector, or `None` to disable. Must be a 1D tensor of the same type\n                as `x`. The shape must be known, and it must match the dimension of `x`\n                corresponding to `axis`.\n        axis:   The dimension in `x` corresponding to the elements of `b`.\n                The value of `axis` is ignored if `b` is not specified.\n        act:    Name of the activation function to evaluate, or `\"linear\"` to disable.\n                Can be e.g. `\"relu\"`, `\"lrelu\"`, `\"tanh\"`, `\"sigmoid\"`, `\"swish\"`, etc.\n                See `activation_funcs` for a full list. `None` is not allowed.\n        alpha:  Shape parameter for the activation function, or `None` to use the default.\n        gain:   Scaling factor for the output tensor, or `None` to use default.\n                See `activation_funcs` for the default scaling of each activation function.\n                If unsure, consider specifying `1.0`.\n        impl:   Name of the implementation to use. Can be `\"ref\"` or `\"cuda\"` (default).\n\n    Returns:\n        Tensor of the same shape and datatype as `x`.\n    \"\"\"", "\n", "\n", "impl_dict", "=", "{", "\n", "'ref'", ":", "_fused_bias_act_ref", ",", "\n", "'cuda'", ":", "_fused_bias_act_cuda", ",", "\n", "}", "\n", "return", "impl_dict", "[", "impl", "]", "(", "x", "=", "x", ",", "b", "=", "b", ",", "axis", "=", "axis", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.fused_bias_act._fused_bias_act_ref": [[72, 97], ["tensorflow.convert_to_tensor", "act_spec.func", "tensorflow.convert_to_tensor", "tensorflow.constant", "tensorflow.reshape", "range"], "function", ["None"], ["", "def", "_fused_bias_act_ref", "(", "x", ",", "b", ",", "axis", ",", "act", ",", "alpha", ",", "gain", ")", ":", "\n", "    ", "\"\"\"Slow reference implementation of `fused_bias_act()` using standard TensorFlow ops.\"\"\"", "\n", "\n", "# Validate arguments.", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "b", "=", "tf", ".", "convert_to_tensor", "(", "b", ")", "if", "b", "is", "not", "None", "else", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "act_spec", "=", "activation_funcs", "[", "act", "]", "\n", "assert", "b", ".", "shape", ".", "rank", "==", "1", "and", "(", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "axis", "]", ")", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "0", "<=", "axis", "<", "x", ".", "shape", ".", "rank", "\n", "if", "alpha", "is", "None", ":", "\n", "        ", "alpha", "=", "act_spec", ".", "def_alpha", "\n", "", "if", "gain", "is", "None", ":", "\n", "        ", "gain", "=", "act_spec", ".", "def_gain", "\n", "\n", "# Add bias.", "\n", "", "if", "b", ".", "shape", "[", "0", "]", "!=", "0", ":", "\n", "        ", "x", "+=", "tf", ".", "reshape", "(", "b", ",", "[", "-", "1", "if", "i", "==", "axis", "else", "1", "for", "i", "in", "range", "(", "x", ".", "shape", ".", "rank", ")", "]", ")", "\n", "\n", "# Evaluate activation function.", "\n", "", "x", "=", "act_spec", ".", "func", "(", "x", ",", "alpha", "=", "alpha", ")", "\n", "\n", "# Scale by gain.", "\n", "if", "gain", "!=", "1", ":", "\n", "        ", "x", "*=", "gain", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.ops.fused_bias_act._fused_bias_act_cuda": [[100, 195], ["tensorflow.convert_to_tensor", "tensorflow.constant", "dict", "fused_bias_act._fused_bias_act_cuda.func_nonzero_2nd_grad"], "function", ["None"], ["", "def", "_fused_bias_act_cuda", "(", "x", ",", "b", ",", "axis", ",", "act", ",", "alpha", ",", "gain", ")", ":", "\n", "    ", "\"\"\"Fast CUDA implementation of `fused_bias_act()` using custom ops.\"\"\"", "\n", "\n", "# Validate arguments.", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "empty_tensor", "=", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "b", "=", "tf", ".", "convert_to_tensor", "(", "b", ")", "if", "b", "is", "not", "None", "else", "empty_tensor", "\n", "act_spec", "=", "activation_funcs", "[", "act", "]", "\n", "assert", "b", ".", "shape", ".", "rank", "==", "1", "and", "(", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "b", ".", "shape", "[", "0", "]", "==", "x", ".", "shape", "[", "axis", "]", ")", "\n", "assert", "b", ".", "shape", "[", "0", "]", "==", "0", "or", "0", "<=", "axis", "<", "x", ".", "shape", ".", "rank", "\n", "if", "alpha", "is", "None", ":", "\n", "        ", "alpha", "=", "act_spec", ".", "def_alpha", "\n", "", "if", "gain", "is", "None", ":", "\n", "        ", "gain", "=", "act_spec", ".", "def_gain", "\n", "\n", "# Special cases.", "\n", "", "if", "act", "==", "'linear'", "and", "b", "is", "None", "and", "gain", "==", "1.0", ":", "\n", "        ", "return", "x", "\n", "", "if", "act_spec", ".", "cuda_idx", "is", "None", ":", "\n", "        ", "return", "_fused_bias_act_ref", "(", "x", "=", "x", ",", "b", "=", "b", ",", "axis", "=", "axis", ",", "act", "=", "act", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n", "# CUDA kernel.", "\n", "", "cuda_kernel", "=", "_get_plugin", "(", ")", ".", "fused_bias_act", "\n", "cuda_kwargs", "=", "dict", "(", "axis", "=", "axis", ",", "act", "=", "act_spec", ".", "cuda_idx", ",", "alpha", "=", "alpha", ",", "gain", "=", "gain", ")", "\n", "\n", "# Forward pass: y = func(x, b).", "\n", "def", "func_y", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "cuda_kernel", "(", "x", "=", "x", ",", "b", "=", "b", ",", "ref", "=", "empty_tensor", ",", "grad", "=", "0", ",", "**", "cuda_kwargs", ")", "\n", "y", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "y", "\n", "\n", "# Backward pass: dx, db = grad(dy, x, y)", "\n", "", "def", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "dx", "=", "cuda_kernel", "(", "x", "=", "dy", ",", "b", "=", "empty_tensor", ",", "ref", "=", "ref", ",", "grad", "=", "1", ",", "**", "cuda_kwargs", ")", "\n", "dx", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "dx", "\n", "", "def", "grad_db", "(", "dx", ")", ":", "\n", "        ", "if", "b", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "            ", "return", "empty_tensor", "\n", "", "db", "=", "dx", "\n", "if", "axis", "<", "x", ".", "shape", ".", "rank", "-", "1", ":", "\n", "            ", "db", "=", "tf", ".", "reduce_sum", "(", "db", ",", "list", "(", "range", "(", "axis", "+", "1", ",", "x", ".", "shape", ".", "rank", ")", ")", ")", "\n", "", "if", "axis", ">", "0", ":", "\n", "            ", "db", "=", "tf", ".", "reduce_sum", "(", "db", ",", "list", "(", "range", "(", "axis", ")", ")", ")", "\n", "", "db", ".", "set_shape", "(", "b", ".", "shape", ")", "\n", "return", "db", "\n", "\n", "# Second order gradients: d_dy, d_x = grad2(d_dx, d_db, x, y)", "\n", "", "def", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "d_dy", "=", "cuda_kernel", "(", "x", "=", "d_dx", ",", "b", "=", "d_db", ",", "ref", "=", "ref", ",", "grad", "=", "1", ",", "**", "cuda_kwargs", ")", "\n", "d_dy", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "d_dy", "\n", "", "def", "grad2_d_x", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", ":", "\n", "        ", "ref", "=", "{", "'x'", ":", "x", ",", "'y'", ":", "y", "}", "[", "act_spec", ".", "ref", "]", "\n", "d_x", "=", "cuda_kernel", "(", "x", "=", "d_dx", ",", "b", "=", "d_db", ",", "ref", "=", "ref", ",", "grad", "=", "2", ",", "**", "cuda_kwargs", ")", "\n", "d_x", ".", "set_shape", "(", "x", ".", "shape", ")", "\n", "return", "d_x", "\n", "\n", "# Fast version for piecewise-linear activation funcs.", "\n", "", "@", "tf", ".", "custom_gradient", "\n", "def", "func_zero_2nd_grad", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "func_y", "(", "x", ",", "b", ")", "\n", "@", "tf", ".", "custom_gradient", "\n", "def", "grad", "(", "dy", ")", ":", "\n", "            ", "dx", "=", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", "\n", "db", "=", "grad_db", "(", "dx", ")", "\n", "def", "grad2", "(", "d_dx", ",", "d_db", ")", ":", "\n", "                ", "d_dy", "=", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "return", "d_dy", "\n", "", "return", "(", "dx", ",", "db", ")", ",", "grad2", "\n", "", "return", "y", ",", "grad", "\n", "\n", "# Slow version for general activation funcs.", "\n", "", "@", "tf", ".", "custom_gradient", "\n", "def", "func_nonzero_2nd_grad", "(", "x", ",", "b", ")", ":", "\n", "        ", "y", "=", "func_y", "(", "x", ",", "b", ")", "\n", "def", "grad_wrap", "(", "dy", ")", ":", "\n", "            ", "@", "tf", ".", "custom_gradient", "\n", "def", "grad_impl", "(", "dy", ",", "x", ")", ":", "\n", "                ", "dx", "=", "grad_dx", "(", "dy", ",", "x", ",", "y", ")", "\n", "db", "=", "grad_db", "(", "dx", ")", "\n", "def", "grad2", "(", "d_dx", ",", "d_db", ")", ":", "\n", "                    ", "d_dy", "=", "grad2_d_dy", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "d_x", "=", "grad2_d_x", "(", "d_dx", ",", "d_db", ",", "x", ",", "y", ")", "\n", "return", "d_dy", ",", "d_x", "\n", "", "return", "(", "dx", ",", "db", ")", ",", "grad2", "\n", "", "return", "grad_impl", "(", "dy", ",", "x", ")", "\n", "", "return", "y", ",", "grad_wrap", "\n", "\n", "# Which version to use?", "\n", "", "if", "act_spec", ".", "zero_2nd_grad", ":", "\n", "        ", "return", "func_zero_2nd_grad", "(", "x", ",", "b", ")", "\n", "", "return", "func_nonzero_2nd_grad", "(", "x", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args": [[17, 85], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "  ", "\"\"\"Parses arguments.\"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Synthesize images with GAN.'", ")", "\n", "parser", ".", "add_argument", "(", "'model_name'", ",", "type", "=", "str", ",", "\n", "help", "=", "'Name of the model used for synthesis.'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_id'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'GPUs to use. `all` means to use all GPUs and `-1` '", "\n", "'means to not use GPU. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'-o'", ",", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Directory to save the results. If not specified, '", "\n", "'`${MODEL_NAME}_synthesis` will be used by default.'", ")", "\n", "parser", ".", "add_argument", "(", "'-T'", ",", "'--truncation'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'Truncation of network. < 0 means to use default truncation. 1.0 means no truncation.'", ")", "\n", "parser", ".", "add_argument", "(", "'-i'", ",", "'--latent_codes_path'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'If specified, will load latent codes from given '", "\n", "'path instead of randomly sampling.'", ")", "\n", "parser", ".", "add_argument", "(", "'-N'", ",", "'--num'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "help", "=", "'Number of images to generate. This field will be '", "\n", "'ignored if `latent_codes_path` is valid. Otherwise '", "\n", "'a positive number is required. '", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--latent_space_type'", ",", "type", "=", "str", ",", "default", "=", "'z'", ",", "\n", "choices", "=", "[", "'z'", ",", "'w'", ",", "'wp'", "]", ",", "\n", "help", "=", "'Latent space used for synthesis in StyleGAN and '", "\n", "'StyleGAN2. If the latent codes are loaded from '", "\n", "'given path, they should align with the space type. '", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip_image'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, will skip generating images in '", "\n", "'StyleGAN and StyleGAN2. '", "\n", "'(default: DO generate images)'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_style'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, will generate layer-wise style codes '", "\n", "'in StyleGAN and StyleGAN2. '", "\n", "'(default: do NOT generate styles)'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_prediction'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, will predict semantics from '", "\n", "'synthesized images. (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--predictor_name'", ",", "type", "=", "str", ",", "default", "=", "'scene'", ",", "\n", "help", "=", "'Name of the predictor used for analysis. '", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_raw_synthesis'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, will save raw synthesis to the disk. '", "\n", "'(default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--generate_html'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If specified, will use html for visualization. '", "\n", "'(default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--html_row'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Number of rows of the visualization html page. If '", "\n", "'set as `0`, will be assigned based on number of '", "\n", "'samples. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--html_col'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'Number of columns of the visualization html page. '", "\n", "'If set as `0`, will be assigned based on number of '", "\n", "'samples. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--viz_size'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'Image size for visualization on html page. Active '", "\n", "'ONLY when `generate_html` is set as `True`. '", "\n", "'`None` means to use the original synthesis size. '", "\n", "'If using two elements, please use `,` to join '", "\n", "'WIDTH and HEIGHT. (default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--html_name'", ",", "type", "=", "str", ",", "default", "=", "'viz.html'", ",", "\n", "help", "=", "'Name of the html page for visualization. Active '", "\n", "'ONLY when `generate_html` is set as `True`. '", "\n", "'(default: %(default)s)'", ")", "\n", "parser", ".", "add_argument", "(", "'--logfile_name'", ",", "type", "=", "str", ",", "default", "=", "'log.txt'", ",", "\n", "help", "=", "'Name of the log file. (default: %(default)s)'", ")", "\n", "return", "parser", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.main": [[87, 155], ["synthesize.parse_args", "lib.misc.set_cuda_devices", "os.system", "models.helper.build_generator", "os.path.isfile", "collections.defaultdict", "collections.defaultdict", "tqdm.tqdm", "models.helper.build_generator.get_batch_inputs", "tqdm.tqdm.close", "collections.defaultdict.items", "numpy.load", "models.helper.build_generator.preprocess", "models.helper.build_generator.easy_sample", "predictors.helper.build_predictor", "lib.visualizer.HtmlPageVisualizer", "models.helper.build_generator.easy_synthesize", "model.easy_synthesize.items", "lib.visualizer.HtmlPageVisualizer.save", "numpy.save", "print", "predictors.helper.build_predictor.save", "ValueError", "tqdm.tqdm.update", "os.path.join", "os.path.join", "numpy.concatenate", "len", "results[].append", "predictors.helper.build_predictor.easy_predict", "predictor.easy_predict.items", "tqdm.tqdm.update", "predictions[].append", "lib.visualizer.save_image", "lib.visualizer.HtmlPageVisualizer.set_cell", "os.path.join"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.synthesize.parse_args", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.misc.set_cuda_devices", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.helper.build_generator", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.perceptual_model.PerceptualModel.get_batch_inputs", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.stylegan2_official.dataset_tool.TFRecordExporter.close", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_module.BaseModule.load", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.stylegan_generator.StyleGANGenerator.preprocess", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_sample", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.helper.build_predictor", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.models.base_generator.BaseGenerator.easy_synthesize", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.face_predictor.FacePredictor.save", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.predictors.base_predictor.BasePredictor.easy_predict", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.update", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.training.misc.save_image", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.lib.visualizer.HtmlPageVisualizer.set_cell"], ["", "def", "main", "(", ")", ":", "\n", "  ", "\"\"\"Main function.\"\"\"", "\n", "args", "=", "parse_args", "(", ")", "\n", "set_cuda_devices", "(", "args", ".", "gpu_id", ")", "\n", "work_dir", "=", "args", ".", "output_dir", "\n", "os", ".", "system", "(", "\"mkdir \"", "+", "work_dir", ")", "\n", "\n", "model", "=", "build_generator", "(", "args", ".", "model_name", ",", "\n", "truncation_psi", "=", "None", "if", "args", ".", "truncation", "<", "0", "else", "args", ".", "truncation", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "latent_codes_path", ")", ":", "\n", "    ", "latent_codes", "=", "np", ".", "load", "(", "args", ".", "latent_codes_path", ")", "\n", "latent_codes", "=", "model", ".", "preprocess", "(", "latent_codes", "=", "latent_codes", ",", "\n", "latent_space_type", "=", "args", ".", "latent_space_type", ")", "\n", "", "else", ":", "\n", "    ", "if", "args", ".", "num", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "f'Argument `num` should be specified as a positive '", "\n", "f'number since the latent code path '", "\n", "f'`{args.latent_codes_path}` does not exist!'", ")", "\n", "", "latent_codes", "=", "model", ".", "easy_sample", "(", "num", "=", "args", ".", "num", ",", "\n", "latent_space_type", "=", "args", ".", "latent_space_type", ")", "\n", "", "total_num", "=", "latent_codes", ".", "shape", "[", "0", "]", "\n", "\n", "if", "args", ".", "generate_prediction", ":", "\n", "    ", "predictor", "=", "build_predictor", "(", "args", ".", "predictor_name", ")", "\n", "\n", "", "if", "args", ".", "generate_html", ":", "\n", "    ", "visualizer", "=", "HtmlPageVisualizer", "(", "num_rows", "=", "args", ".", "html_row", ",", "\n", "num_cols", "=", "args", ".", "html_col", ",", "\n", "grid_size", "=", "total_num", ",", "\n", "viz_size", "=", "args", ".", "viz_size", ")", "\n", "\n", "", "results", "=", "defaultdict", "(", "list", ")", "\n", "predictions", "=", "defaultdict", "(", "list", ")", "\n", "pbar", "=", "tqdm", "(", "total", "=", "total_num", ",", "leave", "=", "False", ")", "\n", "for", "inputs", "in", "model", ".", "get_batch_inputs", "(", "latent_codes", ")", ":", "\n", "    ", "outputs", "=", "model", ".", "easy_synthesize", "(", "latent_codes", "=", "inputs", ",", "\n", "latent_space_type", "=", "args", ".", "latent_space_type", ",", "\n", "generate_style", "=", "args", ".", "generate_style", ",", "\n", "generate_image", "=", "not", "args", ".", "skip_image", ")", "\n", "for", "key", ",", "val", "in", "outputs", ".", "items", "(", ")", ":", "\n", "      ", "if", "key", "==", "'image'", ":", "\n", "        ", "if", "args", ".", "generate_prediction", ":", "\n", "          ", "pred_outputs", "=", "predictor", ".", "easy_predict", "(", "val", ")", "\n", "for", "pred_key", ",", "pred_val", "in", "pred_outputs", ".", "items", "(", ")", ":", "\n", "            ", "predictions", "[", "pred_key", "]", ".", "append", "(", "pred_val", ")", "\n", "", "", "for", "image", "in", "val", ":", "\n", "          ", "if", "args", ".", "save_raw_synthesis", ":", "\n", "            ", "save_image", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "f'{pbar.n:06d}.jpg'", ")", ",", "image", ")", "\n", "", "if", "args", ".", "generate_html", ":", "\n", "            ", "row_idx", "=", "pbar", ".", "n", "//", "visualizer", ".", "num_cols", "\n", "col_idx", "=", "pbar", ".", "n", "%", "visualizer", ".", "num_cols", "\n", "visualizer", ".", "set_cell", "(", "\n", "row_idx", ",", "col_idx", ",", "text", "=", "f'Sample {pbar.n:06d}'", ",", "image", "=", "image", ")", "\n", "", "pbar", ".", "update", "(", "1", ")", "\n", "", "", "else", ":", "\n", "        ", "results", "[", "key", "]", ".", "append", "(", "val", ")", "\n", "", "", "if", "'image'", "not", "in", "outputs", ":", "\n", "      ", "pbar", ".", "update", "(", "inputs", ".", "shape", "[", "0", "]", ")", "\n", "", "", "pbar", ".", "close", "(", ")", "\n", "\n", "if", "args", ".", "generate_html", ":", "\n", "    ", "visualizer", ".", "save", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "args", ".", "html_name", ")", ")", "\n", "", "for", "key", ",", "val", "in", "results", ".", "items", "(", ")", ":", "\n", "    ", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "work_dir", ",", "f'{key}.npy'", ")", ",", "np", ".", "concatenate", "(", "val", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "predictions", ":", "\n", "    ", "print", "(", "len", "(", "predictions", ")", ")", "\n", "predictor", ".", "save", "(", "predictions", ",", "work_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run": [[44, 57], ["subprocess.Popen", "subprocess.Popen.communicate", "raw_output.decode", "raw_err.decode", "collect_env.get_platform", "locale.getpreferredencoding", "raw_output.decode.strip", "raw_err.decode.strip"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform"], ["def", "run", "(", "command", ")", ":", "\n", "    ", "\"\"\"Returns (return-code, stdout, stderr)\"\"\"", "\n", "p", "=", "subprocess", ".", "Popen", "(", "command", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "\n", "stderr", "=", "subprocess", ".", "PIPE", ",", "shell", "=", "True", ")", "\n", "raw_output", ",", "raw_err", "=", "p", ".", "communicate", "(", ")", "\n", "rc", "=", "p", ".", "returncode", "\n", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "enc", "=", "'oem'", "\n", "", "else", ":", "\n", "        ", "enc", "=", "locale", ".", "getpreferredencoding", "(", ")", "\n", "", "output", "=", "raw_output", ".", "decode", "(", "enc", ")", "\n", "err", "=", "raw_err", ".", "decode", "(", "enc", ")", "\n", "return", "rc", ",", "output", ".", "strip", "(", ")", ",", "err", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_read_all": [[59, 65], ["run_lambda"], "function", ["None"], ["", "def", "run_and_read_all", "(", "run_lambda", ",", "command", ")", ":", "\n", "    ", "\"\"\"Runs command using run_lambda; reads and returns entire output if rc is 0\"\"\"", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "command", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match": [[67, 76], ["run_lambda", "re.search", "re.search.group"], "function", ["None"], ["", "def", "run_and_parse_first_match", "(", "run_lambda", ",", "command", ",", "regex", ")", ":", "\n", "    ", "\"\"\"Runs command using run_lambda, returns the first regex match if it exists\"\"\"", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "command", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "", "match", "=", "re", ".", "search", "(", "regex", ",", "out", ")", "\n", "if", "match", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "return", "match", ".", "group", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_conda_packages": [[78, 92], ["os.environ.get", "collect_env.run_and_read_all", "re.compile", "re.sub", "collect_env.get_platform", "os.environ.get", "os.path.join"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_read_all", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["", "def", "get_conda_packages", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "system_root", "=", "os", ".", "environ", ".", "get", "(", "'SYSTEMROOT'", ",", "'C:\\\\Windows'", ")", "\n", "findstr_cmd", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "'findstr'", ")", "\n", "grep_cmd", "=", "r'{} /R \"torch numpy cudatoolkit soumith mkl magma\"'", ".", "format", "(", "findstr_cmd", ")", "\n", "", "else", ":", "\n", "        ", "grep_cmd", "=", "r'grep \"torch\\|numpy\\|cudatoolkit\\|soumith\\|mkl\\|magma\"'", "\n", "", "conda", "=", "os", ".", "environ", ".", "get", "(", "'CONDA_EXE'", ",", "'conda'", ")", "\n", "out", "=", "run_and_read_all", "(", "run_lambda", ",", "conda", "+", "' list | '", "+", "grep_cmd", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "out", "\n", "# Comment starting at beginning of line", "\n", "", "comment_regex", "=", "re", ".", "compile", "(", "r'^#.*\\n'", ")", "\n", "return", "re", ".", "sub", "(", "comment_regex", ",", "''", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_gcc_version": [[94, 96], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_gcc_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'gcc --version'", ",", "r'gcc (.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_clang_version": [[97, 99], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_clang_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'clang --version'", ",", "r'clang version (.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_cmake_version": [[101, 103], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_cmake_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'cmake --version'", ",", "r'cmake (.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_nvidia_driver_version": [[105, 112], ["collect_env.get_nvidia_smi", "collect_env.run_and_parse_first_match", "collect_env.get_platform", "collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_nvidia_smi", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_nvidia_driver_version", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'darwin'", ":", "\n", "        ", "cmd", "=", "'kextstat | grep -i cuda'", "\n", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "cmd", ",", "\n", "r'com[.]nvidia[.]CUDA [(](.*?)[)]'", ")", "\n", "", "smi", "=", "get_nvidia_smi", "(", ")", "\n", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "smi", ",", "r'Driver Version: (.*?) '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_gpu_info": [[114, 126], ["collect_env.get_nvidia_smi", "re.compile", "run_lambda", "re.sub", "collect_env.get_platform", "hasattr", "torch.cuda.is_available", "torch.cuda.get_device_name"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_nvidia_smi", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform"], ["", "def", "get_gpu_info", "(", "run_lambda", ")", ":", "\n", "    ", "if", "get_platform", "(", ")", "==", "'darwin'", "or", "(", "TORCH_AVAILABLE", "and", "hasattr", "(", "torch", ".", "version", ",", "'hip'", ")", "and", "torch", ".", "version", ".", "hip", "is", "not", "None", ")", ":", "\n", "        ", "if", "TORCH_AVAILABLE", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "return", "torch", ".", "cuda", ".", "get_device_name", "(", "None", ")", "\n", "", "return", "None", "\n", "", "smi", "=", "get_nvidia_smi", "(", ")", "\n", "uuid_regex", "=", "re", ".", "compile", "(", "r' \\(UUID: .+?\\)'", ")", "\n", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "smi", "+", "' -L'", ")", "\n", "if", "rc", "!=", "0", ":", "\n", "        ", "return", "None", "\n", "# Anonymize GPUs by removing their UUID", "\n", "", "return", "re", ".", "sub", "(", "uuid_regex", ",", "''", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_running_cuda_version": [[128, 130], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_running_cuda_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'nvcc --version'", ",", "r'release .+ V(.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_cudnn_version": [[132, 167], ["run_lambda", "set", "out.split", "list", "collect_env.get_platform", "os.environ.get", "os.environ.get", "os.path.join", "os.environ.get", "os.path.realpath", "os.path.isfile", "sorted", "len", "collect_env.get_platform", "len", "os.path.isfile", "os.path.realpath", "set.add"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform"], ["", "def", "get_cudnn_version", "(", "run_lambda", ")", ":", "\n", "    ", "\"\"\"This will return a list of libcudnn.so; it's hard to tell which one is being used\"\"\"", "\n", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "system_root", "=", "os", ".", "environ", ".", "get", "(", "'SYSTEMROOT'", ",", "'C:\\\\Windows'", ")", "\n", "cuda_path", "=", "os", ".", "environ", ".", "get", "(", "'CUDA_PATH'", ",", "\"%CUDA_PATH%\"", ")", "\n", "where_cmd", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "'where'", ")", "\n", "cudnn_cmd", "=", "'{} /R \"{}\\\\bin\" cudnn*.dll'", ".", "format", "(", "where_cmd", ",", "cuda_path", ")", "\n", "", "elif", "get_platform", "(", ")", "==", "'darwin'", ":", "\n", "# CUDA libraries and drivers can be found in /usr/local/cuda/. See", "\n", "# https://docs.nvidia.com/cuda/cuda-installation-guide-mac-os-x/index.html#install", "\n", "# https://docs.nvidia.com/deeplearning/sdk/cudnn-install/index.html#installmac", "\n", "# Use CUDNN_LIBRARY when cudnn library is installed elsewhere.", "\n", "        ", "cudnn_cmd", "=", "'ls /usr/local/cuda/lib/libcudnn*'", "\n", "", "else", ":", "\n", "        ", "cudnn_cmd", "=", "'ldconfig -p | grep libcudnn | rev | cut -d\" \" -f1 | rev'", "\n", "", "rc", ",", "out", ",", "_", "=", "run_lambda", "(", "cudnn_cmd", ")", "\n", "# find will return 1 if there are permission errors or if not found", "\n", "if", "len", "(", "out", ")", "==", "0", "or", "(", "rc", "!=", "1", "and", "rc", "!=", "0", ")", ":", "\n", "        ", "l", "=", "os", ".", "environ", ".", "get", "(", "'CUDNN_LIBRARY'", ")", "\n", "if", "l", "is", "not", "None", "and", "os", ".", "path", ".", "isfile", "(", "l", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "realpath", "(", "l", ")", "\n", "", "return", "None", "\n", "", "files_set", "=", "set", "(", ")", "\n", "for", "fn", "in", "out", ".", "split", "(", "'\\n'", ")", ":", "\n", "        ", "fn", "=", "os", ".", "path", ".", "realpath", "(", "fn", ")", "# eliminate symbolic links", "\n", "if", "os", ".", "path", ".", "isfile", "(", "fn", ")", ":", "\n", "            ", "files_set", ".", "add", "(", "fn", ")", "\n", "", "", "if", "not", "files_set", ":", "\n", "        ", "return", "None", "\n", "# Alphabetize the result because the order is non-deterministic otherwise", "\n", "", "files", "=", "list", "(", "sorted", "(", "files_set", ")", ")", "\n", "if", "len", "(", "files", ")", "==", "1", ":", "\n", "        ", "return", "files", "[", "0", "]", "\n", "", "result", "=", "'\\n'", ".", "join", "(", "files", ")", "\n", "return", "'Probably one of the following:\\n{}'", ".", "format", "(", "result", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_nvidia_smi": [[169, 183], ["collect_env.get_platform", "os.environ.get", "os.environ.get", "os.path.join", "os.path.join", "os.path.exists"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get"], ["", "def", "get_nvidia_smi", "(", ")", ":", "\n", "# Note: nvidia-smi is currently available only on Windows and Linux", "\n", "    ", "smi", "=", "'nvidia-smi'", "\n", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "        ", "system_root", "=", "os", ".", "environ", ".", "get", "(", "'SYSTEMROOT'", ",", "'C:\\\\Windows'", ")", "\n", "program_files_root", "=", "os", ".", "environ", ".", "get", "(", "'PROGRAMFILES'", ",", "'C:\\\\Program Files'", ")", "\n", "legacy_path", "=", "os", ".", "path", ".", "join", "(", "program_files_root", ",", "'NVIDIA Corporation'", ",", "'NVSMI'", ",", "smi", ")", "\n", "new_path", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "smi", ")", "\n", "smis", "=", "[", "new_path", ",", "legacy_path", "]", "\n", "for", "candidate_smi", "in", "smis", ":", "\n", "            ", "if", "os", ".", "path", ".", "exists", "(", "candidate_smi", ")", ":", "\n", "                ", "smi", "=", "'\"{}\"'", ".", "format", "(", "candidate_smi", ")", "\n", "break", "\n", "", "", "", "return", "smi", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform": [[185, 196], ["sys.platform.startswith", "sys.platform.startswith", "sys.platform.startswith", "sys.platform.startswith"], "function", ["None"], ["", "def", "get_platform", "(", ")", ":", "\n", "    ", "if", "sys", ".", "platform", ".", "startswith", "(", "'linux'", ")", ":", "\n", "        ", "return", "'linux'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'win32'", ")", ":", "\n", "        ", "return", "'win32'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'cygwin'", ")", ":", "\n", "        ", "return", "'cygwin'", "\n", "", "elif", "sys", ".", "platform", ".", "startswith", "(", "'darwin'", ")", ":", "\n", "        ", "return", "'darwin'", "\n", "", "else", ":", "\n", "        ", "return", "sys", ".", "platform", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_mac_version": [[198, 200], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "", "def", "get_mac_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'sw_vers -productVersion'", ",", "r'(.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_windows_version": [[202, 207], ["os.environ.get", "os.path.join", "os.path.join", "collect_env.run_and_read_all"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.submission.run_context.RunContext.get", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_read_all"], ["", "def", "get_windows_version", "(", "run_lambda", ")", ":", "\n", "    ", "system_root", "=", "os", ".", "environ", ".", "get", "(", "'SYSTEMROOT'", ",", "'C:\\\\Windows'", ")", "\n", "wmic_cmd", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "'Wbem'", ",", "'wmic'", ")", "\n", "findstr_cmd", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "'findstr'", ")", "\n", "return", "run_and_read_all", "(", "run_lambda", ",", "'{} os get Caption | {} /v Caption'", ".", "format", "(", "wmic_cmd", ",", "findstr_cmd", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_lsb_version": [[209, 211], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "get_lsb_version", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'lsb_release -a'", ",", "r'Description:\\t(.*)'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.check_release_file": [[213, 216], ["collect_env.run_and_parse_first_match"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.run_and_parse_first_match"], ["", "def", "check_release_file", "(", "run_lambda", ")", ":", "\n", "    ", "return", "run_and_parse_first_match", "(", "run_lambda", ",", "'cat /etc/*-release'", ",", "\n", "r'PRETTY_NAME=\"(.*)\"'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_os": [[218, 246], ["collect_env.get_platform", "collect_env.get_windows_version", "collect_env.get_mac_version", "collect_env.get_lsb_version", "collect_env.check_release_file", "machine", "machine", "machine", "machine"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_platform", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_windows_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_mac_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_lsb_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.check_release_file"], ["", "def", "get_os", "(", "run_lambda", ")", ":", "\n", "    ", "from", "platform", "import", "machine", "\n", "platform", "=", "get_platform", "(", ")", "\n", "\n", "if", "platform", "==", "'win32'", "or", "platform", "==", "'cygwin'", ":", "\n", "        ", "return", "get_windows_version", "(", "run_lambda", ")", "\n", "\n", "", "if", "platform", "==", "'darwin'", ":", "\n", "        ", "version", "=", "get_mac_version", "(", "run_lambda", ")", "\n", "if", "version", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "return", "'macOS {} ({})'", ".", "format", "(", "version", ",", "machine", "(", ")", ")", "\n", "\n", "", "if", "platform", "==", "'linux'", ":", "\n", "# Ubuntu/Debian based", "\n", "        ", "desc", "=", "get_lsb_version", "(", "run_lambda", ")", "\n", "if", "desc", "is", "not", "None", ":", "\n", "            ", "return", "'{} ({})'", ".", "format", "(", "desc", ",", "machine", "(", ")", ")", "\n", "\n", "# Try reading /etc/*-release", "\n", "", "desc", "=", "check_release_file", "(", "run_lambda", ")", "\n", "if", "desc", "is", "not", "None", ":", "\n", "            ", "return", "'{} ({})'", ".", "format", "(", "desc", ",", "machine", "(", ")", ")", "\n", "\n", "", "return", "'{} ({})'", ".", "format", "(", "platform", ",", "machine", "(", ")", ")", "\n", "\n", "# Unknown platform", "\n", "", "return", "platform", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_pip_packages": [[248, 277], ["collect_env.get_pip_packages.run_with_pip"], "function", ["None"], ["", "def", "get_pip_packages", "(", "run_lambda", ")", ":", "\n", "    ", "\"\"\"Returns `pip list` output. Note: will also find conda-installed pytorch\n    and numpy packages.\"\"\"", "\n", "# People generally have `pip` as `pip` or `pip3`", "\n", "def", "run_with_pip", "(", "pip", ")", ":", "\n", "        ", "if", "get_platform", "(", ")", "==", "'win32'", ":", "\n", "            ", "system_root", "=", "os", ".", "environ", ".", "get", "(", "'SYSTEMROOT'", ",", "'C:\\\\Windows'", ")", "\n", "findstr_cmd", "=", "os", ".", "path", ".", "join", "(", "system_root", ",", "'System32'", ",", "'findstr'", ")", "\n", "grep_cmd", "=", "r'{} /R \"numpy torch\"'", ".", "format", "(", "findstr_cmd", ")", "\n", "", "else", ":", "\n", "            ", "grep_cmd", "=", "r'grep \"torch\\|numpy\"'", "\n", "", "return", "run_and_read_all", "(", "run_lambda", ",", "pip", "+", "' list --format=freeze | '", "+", "grep_cmd", ")", "\n", "\n", "# Try to figure out if the user is running pip or pip3.", "\n", "", "out2", "=", "run_with_pip", "(", "'pip'", ")", "\n", "out3", "=", "run_with_pip", "(", "'pip3'", ")", "\n", "\n", "num_pips", "=", "len", "(", "[", "x", "for", "x", "in", "[", "out2", ",", "out3", "]", "if", "x", "is", "not", "None", "]", ")", "\n", "if", "num_pips", "==", "0", ":", "\n", "        ", "return", "'pip'", ",", "out2", "\n", "\n", "", "if", "num_pips", "==", "1", ":", "\n", "        ", "if", "out2", "is", "not", "None", ":", "\n", "            ", "return", "'pip'", ",", "out2", "\n", "", "return", "'pip3'", ",", "out3", "\n", "\n", "# num_pips is 2. Return pip3 by default b/c that most likely", "\n", "# is the one associated with Python 3", "\n", "", "return", "'pip3'", ",", "out3", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_env_info": [[279, 320], ["collect_env.get_pip_packages", "SystemEnv", "str", "str", "torch.cuda.is_available", "torch._C._show_config().split", "collect_env.get_running_cuda_version", "collect_env.get_gpu_info", "collect_env.get_nvidia_driver_version", "collect_env.get_cudnn_version", "collect_env.get_conda_packages", "collect_env.get_os", "collect_env.get_gcc_version", "collect_env.get_clang_version", "collect_env.get_cmake_version", "hasattr", "torch._C._show_config", "sys.maxsize.bit_length", "s.rsplit", "s.rsplit"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_pip_packages", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_running_cuda_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_gpu_info", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_nvidia_driver_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_cudnn_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_conda_packages", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_os", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_gcc_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_clang_version", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_cmake_version"], ["", "def", "get_env_info", "(", ")", ":", "\n", "    ", "run_lambda", "=", "run", "\n", "pip_version", ",", "pip_list_output", "=", "get_pip_packages", "(", "run_lambda", ")", "\n", "\n", "if", "TORCH_AVAILABLE", ":", "\n", "        ", "version_str", "=", "torch", ".", "__version__", "\n", "debug_mode_str", "=", "str", "(", "torch", ".", "version", ".", "debug", ")", "\n", "cuda_available_str", "=", "str", "(", "torch", ".", "cuda", ".", "is_available", "(", ")", ")", "\n", "cuda_version_str", "=", "torch", ".", "version", ".", "cuda", "\n", "if", "not", "hasattr", "(", "torch", ".", "version", ",", "'hip'", ")", "or", "torch", ".", "version", ".", "hip", "is", "None", ":", "# cuda version", "\n", "            ", "hip_compiled_version", "=", "hip_runtime_version", "=", "miopen_runtime_version", "=", "'N/A'", "\n", "", "else", ":", "# HIP version", "\n", "            ", "cfg", "=", "torch", ".", "_C", ".", "_show_config", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "hip_runtime_version", "=", "[", "s", ".", "rsplit", "(", "None", ",", "1", ")", "[", "-", "1", "]", "for", "s", "in", "cfg", "if", "'HIP Runtime'", "in", "s", "]", "[", "0", "]", "\n", "miopen_runtime_version", "=", "[", "s", ".", "rsplit", "(", "None", ",", "1", ")", "[", "-", "1", "]", "for", "s", "in", "cfg", "if", "'MIOpen'", "in", "s", "]", "[", "0", "]", "\n", "cuda_version_str", "=", "'N/A'", "\n", "hip_compiled_version", "=", "torch", ".", "version", ".", "hip", "\n", "", "", "else", ":", "\n", "        ", "version_str", "=", "debug_mode_str", "=", "cuda_available_str", "=", "cuda_version_str", "=", "'N/A'", "\n", "hip_compiled_version", "=", "hip_runtime_version", "=", "miopen_runtime_version", "=", "'N/A'", "\n", "\n", "", "return", "SystemEnv", "(", "\n", "torch_version", "=", "version_str", ",", "\n", "is_debug_build", "=", "debug_mode_str", ",", "\n", "python_version", "=", "'{}.{} ({}-bit runtime)'", ".", "format", "(", "sys", ".", "version_info", "[", "0", "]", ",", "sys", ".", "version_info", "[", "1", "]", ",", "sys", ".", "maxsize", ".", "bit_length", "(", ")", "+", "1", ")", ",", "\n", "is_cuda_available", "=", "cuda_available_str", ",", "\n", "cuda_compiled_version", "=", "cuda_version_str", ",", "\n", "cuda_runtime_version", "=", "get_running_cuda_version", "(", "run_lambda", ")", ",", "\n", "nvidia_gpu_models", "=", "get_gpu_info", "(", "run_lambda", ")", ",", "\n", "nvidia_driver_version", "=", "get_nvidia_driver_version", "(", "run_lambda", ")", ",", "\n", "cudnn_version", "=", "get_cudnn_version", "(", "run_lambda", ")", ",", "\n", "hip_compiled_version", "=", "hip_compiled_version", ",", "\n", "hip_runtime_version", "=", "hip_runtime_version", ",", "\n", "miopen_runtime_version", "=", "miopen_runtime_version", ",", "\n", "pip_version", "=", "pip_version", ",", "\n", "pip_packages", "=", "pip_list_output", ",", "\n", "conda_packages", "=", "get_conda_packages", "(", "run_lambda", ")", ",", "\n", "os", "=", "get_os", "(", "run_lambda", ")", ",", "\n", "gcc_version", "=", "get_gcc_version", "(", "run_lambda", ")", ",", "\n", "clang_version", "=", "get_clang_version", "(", "run_lambda", ")", ",", "\n", "cmake_version", "=", "get_cmake_version", "(", "run_lambda", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.pretty_str": [[348, 420], ["envinfo._asdict", "collect_env.pretty_str.maybe_start_on_next_line"], "function", ["None"], ["def", "pretty_str", "(", "envinfo", ")", ":", "\n", "    ", "def", "replace_nones", "(", "dct", ",", "replacement", "=", "'Could not collect'", ")", ":", "\n", "        ", "for", "key", "in", "dct", ".", "keys", "(", ")", ":", "\n", "            ", "if", "dct", "[", "key", "]", "is", "not", "None", ":", "\n", "                ", "continue", "\n", "", "dct", "[", "key", "]", "=", "replacement", "\n", "", "return", "dct", "\n", "\n", "", "def", "replace_bools", "(", "dct", ",", "true", "=", "'Yes'", ",", "false", "=", "'No'", ")", ":", "\n", "        ", "for", "key", "in", "dct", ".", "keys", "(", ")", ":", "\n", "            ", "if", "dct", "[", "key", "]", "is", "True", ":", "\n", "                ", "dct", "[", "key", "]", "=", "true", "\n", "", "elif", "dct", "[", "key", "]", "is", "False", ":", "\n", "                ", "dct", "[", "key", "]", "=", "false", "\n", "", "", "return", "dct", "\n", "\n", "", "def", "prepend", "(", "text", ",", "tag", "=", "'[prepend]'", ")", ":", "\n", "        ", "lines", "=", "text", ".", "split", "(", "'\\n'", ")", "\n", "updated_lines", "=", "[", "tag", "+", "line", "for", "line", "in", "lines", "]", "\n", "return", "'\\n'", ".", "join", "(", "updated_lines", ")", "\n", "\n", "", "def", "replace_if_empty", "(", "text", ",", "replacement", "=", "'No relevant packages'", ")", ":", "\n", "        ", "if", "text", "is", "not", "None", "and", "len", "(", "text", ")", "==", "0", ":", "\n", "            ", "return", "replacement", "\n", "", "return", "text", "\n", "\n", "", "def", "maybe_start_on_next_line", "(", "string", ")", ":", "\n", "# If `string` is multiline, prepend a \\n to it.", "\n", "        ", "if", "string", "is", "not", "None", "and", "len", "(", "string", ".", "split", "(", "'\\n'", ")", ")", ">", "1", ":", "\n", "            ", "return", "'\\n{}\\n'", ".", "format", "(", "string", ")", "\n", "", "return", "string", "\n", "\n", "", "mutable_dict", "=", "envinfo", ".", "_asdict", "(", ")", "\n", "\n", "# If nvidia_gpu_models is multiline, start on the next line", "\n", "mutable_dict", "[", "'nvidia_gpu_models'", "]", "=", "maybe_start_on_next_line", "(", "envinfo", ".", "nvidia_gpu_models", ")", "\n", "\n", "# If the machine doesn't have CUDA, report some fields as 'No CUDA'", "\n", "dynamic_cuda_fields", "=", "[", "\n", "'cuda_runtime_version'", ",", "\n", "'nvidia_gpu_models'", ",", "\n", "'nvidia_driver_version'", ",", "\n", "]", "\n", "all_cuda_fields", "=", "dynamic_cuda_fields", "+", "[", "'cudnn_version'", "]", "\n", "all_dynamic_cuda_fields_missing", "=", "all", "(", "\n", "mutable_dict", "[", "field", "]", "is", "None", "for", "field", "in", "dynamic_cuda_fields", ")", "\n", "if", "TORCH_AVAILABLE", "and", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "all_dynamic_cuda_fields_missing", ":", "\n", "        ", "for", "field", "in", "all_cuda_fields", ":", "\n", "            ", "mutable_dict", "[", "field", "]", "=", "'No CUDA'", "\n", "", "if", "envinfo", ".", "cuda_compiled_version", "is", "None", ":", "\n", "            ", "mutable_dict", "[", "'cuda_compiled_version'", "]", "=", "'None'", "\n", "\n", "# Replace True with Yes, False with No", "\n", "", "", "mutable_dict", "=", "replace_bools", "(", "mutable_dict", ")", "\n", "\n", "# Replace all None objects with 'Could not collect'", "\n", "mutable_dict", "=", "replace_nones", "(", "mutable_dict", ")", "\n", "\n", "# If either of these are '', replace with 'No relevant packages'", "\n", "mutable_dict", "[", "'pip_packages'", "]", "=", "replace_if_empty", "(", "mutable_dict", "[", "'pip_packages'", "]", ")", "\n", "mutable_dict", "[", "'conda_packages'", "]", "=", "replace_if_empty", "(", "mutable_dict", "[", "'conda_packages'", "]", ")", "\n", "\n", "# Tag conda and pip packages with a prefix", "\n", "# If they were previously None, they'll show up as ie '[conda] Could not collect'", "\n", "if", "mutable_dict", "[", "'pip_packages'", "]", ":", "\n", "        ", "mutable_dict", "[", "'pip_packages'", "]", "=", "prepend", "(", "mutable_dict", "[", "'pip_packages'", "]", ",", "\n", "'[{}] '", ".", "format", "(", "envinfo", ".", "pip_version", ")", ")", "\n", "", "if", "mutable_dict", "[", "'conda_packages'", "]", ":", "\n", "        ", "mutable_dict", "[", "'conda_packages'", "]", "=", "prepend", "(", "mutable_dict", "[", "'conda_packages'", "]", ",", "\n", "'[conda] '", ")", "\n", "", "return", "env_info_fmt", ".", "format", "(", "**", "mutable_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_pretty_env_info": [[422, 424], ["collect_env.pretty_str", "collect_env.get_env_info"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.pretty_str", "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_env_info"], ["", "def", "get_pretty_env_info", "(", ")", ":", "\n", "    ", "return", "pretty_str", "(", "get_env_info", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.main": [[426, 441], ["print", "collect_env.get_pretty_env_info", "print", "hasattr", "hasattr", "os.path.exists", "max", "os.path.getctime", "datetime.datetime.fromtimestamp().strftime", "print", "os.path.join", "os.listdir", "datetime.datetime.fromtimestamp"], "function", ["home.repos.pwc.inspect_result.AtlantixJJ_LinearGAN.script.collect_env.get_pretty_env_info"], ["", "def", "main", "(", ")", ":", "\n", "    ", "print", "(", "\"Collecting environment information...\"", ")", "\n", "output", "=", "get_pretty_env_info", "(", ")", "\n", "print", "(", "output", ")", "\n", "\n", "if", "TORCH_AVAILABLE", "and", "hasattr", "(", "torch", ",", "'utils'", ")", "and", "hasattr", "(", "torch", ".", "utils", ",", "'_crash_handler'", ")", ":", "\n", "        ", "minidump_dir", "=", "torch", ".", "utils", ".", "_crash_handler", ".", "DEFAULT_MINIDUMP_DIR", "\n", "if", "sys", ".", "platform", "==", "\"linux\"", "and", "os", ".", "path", ".", "exists", "(", "minidump_dir", ")", ":", "\n", "            ", "dumps", "=", "[", "os", ".", "path", ".", "join", "(", "minidump_dir", ",", "dump", ")", "for", "dump", "in", "os", ".", "listdir", "(", "minidump_dir", ")", "]", "\n", "latest", "=", "max", "(", "dumps", ",", "key", "=", "os", ".", "path", ".", "getctime", ")", "\n", "ctime", "=", "os", ".", "path", ".", "getctime", "(", "latest", ")", "\n", "creation_time", "=", "datetime", ".", "datetime", ".", "fromtimestamp", "(", "ctime", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "msg", "=", "\"\\n*** Detected a minidump at {} created on {}, \"", ".", "format", "(", "latest", ",", "creation_time", ")", "+", "\"if this is related to your bug please include it when you file a report ***\"", "\n", "print", "(", "msg", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]]}