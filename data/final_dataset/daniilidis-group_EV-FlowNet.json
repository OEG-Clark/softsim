{"home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.config.configs": [[4, 77], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "configs", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Path to data directory.\"", ",", "\n", "default", "=", "'../data/mvsec_data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Path to saved model.\"", ",", "\n", "default", "=", "'../data/log/saver/'", ")", "\n", "parser", ".", "add_argument", "(", "'--training_instance'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Specific saved model to load. A new one will be generated if empty.\"", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--summary_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Path to log summaries.\"", ",", "\n", "default", "=", "'../data/log/summary/'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Training batch size.\"", ",", "\n", "default", "=", "8", ")", "\n", "parser", ".", "add_argument", "(", "'--initial_learning_rate'", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"Initial learning rate.\"", ",", "\n", "default", "=", "3e-4", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate_decay'", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Rate at which the learning rate is decayed.'", ",", "\n", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--smoothness_weight'", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "'Weight for the smoothness term in the loss function.'", ",", "\n", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--image_height'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Image height.\"", ",", "\n", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--image_width'", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Image width.\"", ",", "\n", "default", "=", "256", ")", "\n", "parser", ".", "add_argument", "(", "'--no_batch_norm'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, batch norm will not be performed at each layer'", ")", "\n", "parser", ".", "add_argument", "(", "'--count_only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, inputs will consist of the event counts only.'", ")", "\n", "parser", ".", "add_argument", "(", "'--time_only'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, inputs will consist of the latest timestamp only.'", ")", "\n", "\n", "# Args for testing only.", "\n", "parser", ".", "add_argument", "(", "'--test_sequence'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"Name of the test sequence.\"", ",", "\n", "default", "=", "'outdoor_day1'", ")", "\n", "parser", ".", "add_argument", "(", "'--gt_path'", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'Path to optical flow ground truth npz file.'", ",", "\n", "default", "=", "''", ")", "\n", "parser", ".", "add_argument", "(", "'--test_plot'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, the flow predictions will be visualized during testing.'", ")", "\n", "parser", ".", "add_argument", "(", "'--test_skip_frames'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, input images will be 4 frames apart.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_test_output'", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'If true, output flow will be saved to a npz file.'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet.__init__": [[11, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "event_img_loader", ",", "\n", "prev_img_loader", ",", "\n", "next_img_loader", ",", "\n", "n_ima", ",", "\n", "is_training", "=", "True", ",", "\n", "weight_decay_weight", "=", "1e-4", ")", ":", "\n", "        ", "self", ".", "_args", "=", "args", "\n", "\n", "self", ".", "_event_img_loader", "=", "event_img_loader", "\n", "self", ".", "_prev_img_loader", "=", "prev_img_loader", "\n", "self", ".", "_next_img_loader", "=", "next_img_loader", "\n", "\n", "self", ".", "_n_ima", "=", "n_ima", "\n", "self", ".", "_weight_decay_weight", "=", "weight_decay_weight", "\n", "self", ".", "_is_training", "=", "is_training", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet._build_graph": [[29, 77], ["tensorflow.variable_scope", "model.model.model", "tensorflow.name_scope", "range", "tensorflow.summary.scalar", "losses.compute_photometric_loss", "tensorflow.summary.scalar", "losses.warp_images_with_flow", "tensorflow.summary.scalar", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.train.exponential_decay", "tensorflow.summary.scalar", "tensorflow.name_scope", "tensorflow.get_collection", "tensorflow.add_n", "tensorflow.summary.scalar", "len", "losses.compute_smoothness_loss", "tensorflow.control_dependencies", "tensorflow.train.AdamOptimizer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.get_collection", "tensorflow.nn.l2_loss"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.model", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.compute_photometric_loss", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.warp_images_with_flow", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.compute_smoothness_loss"], ["", "def", "_build_graph", "(", "self", ",", "global_step", ")", ":", "\n", "#Model", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'vs'", ")", ":", "\n", "            ", "flow_dict", "=", "model", "(", "self", ".", "_event_img_loader", ",", "\n", "self", ".", "_is_training", ",", "\n", "do_batch_norm", "=", "not", "self", ".", "_args", ".", "no_batch_norm", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'loss'", ")", ":", "\n", "# Weight decay loss.", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'weight_decay'", ")", ":", "\n", "                ", "var", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'vs/'", ")", "\n", "for", "v", "in", "var", ":", "\n", "                    ", "wd_loss", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "v", ")", ",", "self", ".", "_weight_decay_weight", ")", "\n", "tf", ".", "add_to_collection", "(", "'wd_loss'", ",", "wd_loss", ")", "\n", "", "weight_decay_loss", "=", "tf", ".", "add_n", "(", "tf", ".", "get_collection", "(", "'wd_loss'", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'weight_decay_loss'", ",", "weight_decay_loss", ")", "\n", "\n", "# Smoothness loss.", "\n", "", "smoothness_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "flow_dict", ")", ")", ":", "\n", "                ", "smoothness_loss", "+=", "compute_smoothness_loss", "(", "flow_dict", "[", "\"flow{}\"", ".", "format", "(", "i", ")", "]", ")", "\n", "", "smoothness_loss", "*=", "self", ".", "_args", ".", "smoothness_weight", "/", "4.", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"smoothness_loss\"", ",", "smoothness_loss", ")", "\n", "\n", "# Photometric loss.", "\n", "photometric_loss", "=", "compute_photometric_loss", "(", "self", ".", "_prev_img_loader", ",", "\n", "self", ".", "_next_img_loader", ",", "\n", "self", ".", "_event_img_loader", ",", "\n", "flow_dict", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'photometric_loss'", ",", "photometric_loss", ")", "\n", "\n", "# Warped next image for debugging.", "\n", "next_image_warped", "=", "warp_images_with_flow", "(", "self", ".", "_next_img_loader", ",", "\n", "flow_dict", "[", "'flow3'", "]", ")", "\n", "\n", "loss", "=", "weight_decay_loss", "+", "photometric_loss", "+", "smoothness_loss", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_loss'", ",", "loss", ")", "\n", "", "with", "tf", ".", "name_scope", "(", "'optimizer'", ")", ":", "\n", "            ", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "self", ".", "_args", ".", "initial_learning_rate", ",", "\n", "global_step", ",", "\n", "4.", "*", "self", ".", "_n_ima", "/", "self", ".", "_args", ".", "batch_size", ",", "\n", "self", ".", "_args", ".", "learning_rate_decay", ",", "\n", "staircase", "=", "True", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'lr'", ",", "learning_rate", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "", "", "return", "flow_dict", ",", "loss", ",", "optimizer", ",", "next_image_warped", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet.train": [[78, 142], ["print", "tensorflow.train.get_or_create_global_step", "EVFlowNet.EVFlowNet._build_graph", "tensorflow.contrib.slim.learning.create_train_op", "tensorflow.summary.FileWriter", "tensorflow.logging.set_verbosity", "tensorflow.ConfigProto", "tensorflow.contrib.slim.learning.train", "tensorflow.device", "tensorflow.expand_dims", "tensorflow.reduce_max", "vis_utils.flow_viz_tf", "tensorflow.abs", "tensorflow.clip_by_value", "vis_utils.draw_color_wheel_tf", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image", "tensorflow.summary.image"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet._build_graph", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet.train", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_tf", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.draw_color_wheel_tf"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"Starting training.\"", ")", "\n", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "\n", "#load data", "\n", "flow_dict", ",", "self", ".", "_loss", ",", "self", ".", "_optimizer", ",", "next_image_warped", "=", "self", ".", "_build_graph", "(", "global_step", ")", "\n", "\n", "final_flow", "=", "flow_dict", "[", "'flow3'", "]", "\n", "\n", "train_op", "=", "tf", ".", "contrib", ".", "slim", ".", "learning", ".", "create_train_op", "(", "total_loss", "=", "self", ".", "_loss", ",", "\n", "optimizer", "=", "self", ".", "_optimizer", ",", "\n", "global_step", "=", "global_step", ")", "\n", "# Visualization for Tensorboard.", "\n", "with", "tf", ".", "device", "(", "'/cpu:0'", ")", ":", "\n", "            ", "event_img", "=", "tf", ".", "expand_dims", "(", "self", ".", "_event_img_loader", "[", ":", ",", ":", ",", ":", ",", "0", "]", "+", "self", ".", "_event_img_loader", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "axis", "=", "3", ")", "\n", "\n", "event_time_img", "=", "tf", ".", "reduce_max", "(", "self", ".", "_event_img_loader", "[", ":", ",", ":", ",", ":", ",", "2", ":", "4", "]", ",", "\n", "axis", "=", "3", ",", "\n", "keepdims", "=", "True", ")", "\n", "flow_rgb", ",", "flow_norm", ",", "flow_ang_rad", "=", "flow_viz_tf", "(", "final_flow", ")", "\n", "\n", "image_error", "=", "tf", ".", "abs", "(", "next_image_warped", "-", "self", ".", "_prev_img_loader", ")", "\n", "image_error", "=", "tf", ".", "clip_by_value", "(", "image_error", ",", "0.", ",", "20.", ")", "\n", "\n", "# Color wheel to visualize the flow directions.", "\n", "color_wheel_rgb", "=", "draw_color_wheel_tf", "(", "self", ".", "_args", ".", "image_width", ",", "self", ".", "_args", ".", "image_height", ")", "\n", "\n", "# Appending letters to each title allows us to control the order of display.", "\n", "tf", ".", "summary", ".", "image", "(", "\"a-Color wheel\"", ",", "\n", "color_wheel_rgb", ",", "\n", "max_outputs", "=", "1", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"b-Flow\"", ",", "\n", "flow_rgb", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"c-Event time image\"", ",", "event_time_img", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "tf", ".", "summary", ".", "image", "(", "'d-Warped_next_image'", ",", "next_image_warped", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"e-Prev image\"", ",", "\n", "self", ".", "_prev_img_loader", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"f-Image error\"", ",", "\n", "image_error", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "tf", ".", "summary", ".", "image", "(", "\"g-Event image\"", ",", "\n", "event_img", ",", "\n", "max_outputs", "=", "self", ".", "_args", ".", "batch_size", ")", "\n", "\n", "", "writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "self", ".", "_args", ".", "summary_path", ")", "\n", "\n", "debug_rate", "=", "5000", "\n", "tf", ".", "logging", ".", "set_verbosity", "(", "tf", ".", "logging", ".", "DEBUG", ")", "\n", "\n", "session_config", "=", "tf", ".", "ConfigProto", "(", ")", "\n", "\n", "tf", ".", "contrib", ".", "slim", ".", "learning", ".", "train", "(", "\n", "train_op", "=", "train_op", ",", "\n", "logdir", "=", "self", ".", "_args", ".", "load_path", ",", "\n", "number_of_steps", "=", "600000", ",", "\n", "log_every_n_steps", "=", "debug_rate", ",", "\n", "save_summaries_secs", "=", "240.", ",", "\n", "summary_writer", "=", "writer", ",", "\n", "save_interval_secs", "=", "240.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder.__init__": [[14, 31], ["tensorflow.convert_to_tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "items_to_features", ",", "\n", "image_width", ",", "\n", "image_height", ",", "\n", "root_path", ",", "\n", "split", ",", "\n", "skip_frames", "=", "False", ",", "\n", "time_only", "=", "False", ",", "\n", "count_only", "=", "False", ")", ":", "\n", "        ", "self", ".", "_items_to_features", "=", "items_to_features", "\n", "self", ".", "_image_width", "=", "image_width", "\n", "self", ".", "_image_height", "=", "image_height", "\n", "self", ".", "_root_path", "=", "tf", ".", "convert_to_tensor", "(", "root_path", ",", "dtype", "=", "tf", ".", "string", ")", "\n", "self", ".", "_split", "=", "split", "\n", "self", ".", "_skip_frames", "=", "skip_frames", "\n", "self", ".", "_time_only", "=", "time_only", "\n", "self", ".", "_count_only", "=", "count_only", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder.list_items": [[77, 79], ["list", "data_loader.EventDataDecoder._items_to_features.keys"], "methods", ["None"], ["", "def", "list_items", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "self", ".", "_items_to_features", ".", "keys", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder._read_events": [[39, 67], ["tensorflow.decode_raw", "tensorflow.cast", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_sum", "tensorflow.decode_raw", "tensorflow.reshape", "tensorflow.cast", "tensorflow.reduce_max", "tensorflow.reduce_max", "tensorflow.cast", "tensorflow.concat"], "methods", ["None"], ["def", "_read_events", "(", "self", ",", "data", ",", "n_frames", ")", ":", "\n", "        ", "shape", "=", "tf", ".", "decode_raw", "(", "data", "[", "'shape'", "]", ",", "tf", ".", "uint16", ")", "\n", "shape", "=", "tf", ".", "cast", "(", "shape", ",", "tf", ".", "int32", ")", "\n", "\n", "event_count_images", "=", "tf", ".", "decode_raw", "(", "data", "[", "'event_count_images'", "]", ",", "tf", ".", "uint16", ")", "\n", "event_count_images", "=", "tf", ".", "reshape", "(", "event_count_images", ",", "shape", ")", "\n", "event_count_images", "=", "tf", ".", "cast", "(", "event_count_images", ",", "tf", ".", "float32", ")", "\n", "event_count_image", "=", "event_count_images", "[", ":", "n_frames", ",", ":", ",", ":", ",", ":", "]", "\n", "event_count_image", "=", "tf", ".", "reduce_sum", "(", "event_count_image", ",", "axis", "=", "0", ")", "\n", "\n", "event_time_images", "=", "tf", ".", "decode_raw", "(", "data", "[", "'event_time_images'", "]", ",", "tf", ".", "float32", ")", "\n", "event_time_images", "=", "tf", ".", "reshape", "(", "event_time_images", ",", "shape", ")", "\n", "event_time_images", "=", "tf", ".", "cast", "(", "event_time_images", ",", "tf", ".", "float32", ")", "\n", "event_time_image", "=", "event_time_images", "[", ":", "n_frames", ",", ":", ",", ":", ",", ":", "]", "\n", "event_time_image", "=", "tf", ".", "reduce_max", "(", "event_time_image", ",", "axis", "=", "0", ")", "\n", "\n", "# Normalize timestamp image to be between 0 and 1.", "\n", "event_time_image", "/=", "tf", ".", "reduce_max", "(", "event_time_image", ")", "\n", "\n", "if", "self", ".", "_count_only", ":", "\n", "            ", "event_image", "=", "event_count_image", "\n", "", "elif", "self", ".", "_time_only", ":", "\n", "            ", "event_image", "=", "event_time_image", "\n", "", "else", ":", "\n", "            ", "event_image", "=", "tf", ".", "concat", "(", "[", "event_count_image", ",", "event_time_image", "]", ",", "2", ")", "\n", "\n", "", "event_image", "=", "tf", ".", "cast", "(", "event_image", ",", "tf", ".", "float32", ")", "\n", "return", "event_image", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder._read_image": [[71, 76], ["tensorflow.read_file", "tensorflow.image.decode_png", "tensorflow.cast"], "methods", ["None"], ["def", "_read_image", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "img_path", "=", "tf", ".", "read_file", "(", "self", ".", "_root_path", "+", "img_path", ")", "\n", "image", "=", "tf", ".", "image", ".", "decode_png", "(", "img_path", ",", "channels", "=", "1", ")", "\n", "image", "=", "tf", ".", "cast", "(", "image", ",", "tf", ".", "float32", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder.decode": [[83, 144], ["tensorflow.parse_single_example", "tensorflow.decode_raw", "data_loader.EventDataDecoder._read_events", "tensorflow.string_join", "tensorflow.string_join", "data_loader.EventDataDecoder._read_image", "data_loader.EventDataDecoder._read_image", "data_loader.EventDataDecoder._items_to_features.keys", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.random_uniform", "tensorflow.as_string", "tensorflow.as_string", "outputs.append", "outputs.append", "outputs.append", "outputs.append", "NameError"], "methods", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder._read_events", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder._read_image", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.EventDataDecoder._read_image"], ["def", "decode", "(", "self", ",", "serialized_example", ",", "items", "=", "None", ")", ":", "\n", "        ", "global", "_MAX_SKIP_FRAMES", ",", "_TEST_SKIP_FRAMES", ",", "N_SKIP", "\n", "features", "=", "{", "\n", "'image_iter'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "int64", ")", ",", "\n", "'shape'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'event_count_images'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'event_time_images'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'image_times'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'prefix'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'cam'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "}", "\n", "\n", "data", "=", "tf", ".", "parse_single_example", "(", "serialized_example", ",", "\n", "features", ")", "\n", "image_iter", "=", "data", "[", "'image_iter'", "]", "\n", "prefix", "=", "data", "[", "'prefix'", "]", "\n", "cam", "=", "data", "[", "'cam'", "]", "\n", "image_times", "=", "tf", ".", "decode_raw", "(", "data", "[", "'image_times'", "]", ",", "tf", ".", "float64", ")", "\n", "\n", "if", "self", ".", "_split", "is", "'test'", ":", "\n", "            ", "if", "self", ".", "_skip_frames", ":", "\n", "                ", "n_frames", "=", "_TEST_SKIP_FRAMES", "\n", "", "else", ":", "\n", "                ", "n_frames", "=", "1", "\n", "", "", "else", ":", "\n", "            ", "n_frames", "=", "tf", ".", "random_uniform", "(", "[", "]", ",", "1", ",", "_MAX_SKIP_FRAMES", ",", "dtype", "=", "tf", ".", "int64", ")", "*", "_N_SKIP", "\n", "\n", "", "timestamps", "=", "[", "image_times", "[", "0", "]", ",", "image_times", "[", "n_frames", "]", "]", "\n", "\n", "event_image", "=", "self", ".", "_read_events", "(", "data", ",", "n_frames", ")", "\n", "\n", "# Get paths to grayscale png files.", "\n", "prev_img_path", "=", "tf", ".", "string_join", "(", "[", "prefix", ",", "\n", "\"/\"", ",", "\n", "cam", ",", "\n", "\"_image\"", ",", "\n", "tf", ".", "as_string", "(", "image_iter", ",", "width", "=", "5", ",", "fill", "=", "'0'", ")", ",", "\n", "\".png\"", "]", ")", "\n", "next_img_path", "=", "tf", ".", "string_join", "(", "[", "prefix", ",", "\n", "\"/\"", ",", "\n", "cam", ",", "\n", "\"_image\"", ",", "\n", "tf", ".", "as_string", "(", "image_iter", "+", "n_frames", ",", "width", "=", "5", ",", "fill", "=", "'0'", ")", ",", "\n", "\".png\"", "]", ")", "\n", "prev_image", "=", "self", ".", "_read_image", "(", "prev_img_path", ")", "\n", "next_image", "=", "self", ".", "_read_image", "(", "next_img_path", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "item", "in", "self", ".", "_items_to_features", ".", "keys", "(", ")", ":", "\n", "            ", "if", "item", "==", "'event_image'", ":", "\n", "                ", "outputs", ".", "append", "(", "event_image", ")", "\n", "", "elif", "item", "==", "'prev_image'", ":", "\n", "                ", "outputs", ".", "append", "(", "prev_image", ")", "\n", "", "elif", "item", "==", "'next_image'", ":", "\n", "                ", "outputs", ".", "append", "(", "next_image", ")", "\n", "", "elif", "item", "==", "'timestamps'", ":", "\n", "                ", "outputs", ".", "append", "(", "timestamps", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NameError", "(", "\"Item {} is not valid.\"", ".", "format", "(", "item", ")", ")", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.read_file_paths": [[149, 185], ["open", "open.read().splitlines", "open.close", "isinstance", "open", "open.read", "open.close", "num_ima_file.read.split", "tfrecord_paths.append", "os.path.join", "os.path.join", "int", "os.path.join", "int", "tfrecord_paths.append", "open.read", "os.path.join"], "function", ["None"], ["def", "read_file_paths", "(", "data_folder_path", ",", "\n", "split", ",", "\n", "sequence", "=", "None", ")", ":", "\n", "    ", "tfrecord_paths", "=", "[", "]", "\n", "n_ima", "=", "0", "\n", "if", "sequence", "is", "None", ":", "\n", "        ", "bag_list_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "data_folder_path", ",", "\"{}_bags.txt\"", ".", "format", "(", "split", ")", ")", ",", "'r'", ")", "\n", "lines", "=", "bag_list_file", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "bag_list_file", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "sequence", ",", "(", "list", ",", ")", ")", ":", "\n", "            ", "lines", "=", "sequence", "\n", "", "else", ":", "\n", "            ", "lines", "=", "[", "sequence", "]", "\n", "\n", "", "", "for", "line", "in", "lines", ":", "\n", "        ", "bag_name", "=", "line", "\n", "\n", "num_ima_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "data_folder_path", ",", "bag_name", ",", "'n_images.txt'", ")", ",", "'r'", ")", "\n", "num_imas", "=", "num_ima_file", ".", "read", "(", ")", "\n", "num_ima_file", ".", "close", "(", ")", "\n", "num_imas_split", "=", "num_imas", ".", "split", "(", "' '", ")", "\n", "n_left_ima", "=", "int", "(", "num_imas_split", "[", "0", "]", ")", "-", "_MAX_SKIP_FRAMES", "\n", "n_ima", "+=", "n_left_ima", "\n", "tfrecord_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_folder_path", ",", "\n", "bag_name", ",", "\n", "\"left_event_images.tfrecord\"", ")", ")", "\n", "\n", "n_right_ima", "=", "int", "(", "num_imas_split", "[", "1", "]", ")", "-", "_MAX_SKIP_FRAMES", "\n", "if", "n_right_ima", ">", "0", "and", "not", "split", "is", "'test'", ":", "\n", "            ", "n_ima", "+=", "n_right_ima", "\n", "tfrecord_paths", ".", "append", "(", "os", ".", "path", ".", "join", "(", "data_folder_path", ",", "\n", "bag_name", ",", "\n", "\"right_event_images.tfrecord\"", ")", ")", "\n", "\n", "", "", "return", "tfrecord_paths", ",", "n_ima", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.get_loader": [[189, 311], ["print", "data_loader.read_file_paths", "data_loader.EventDataDecoder", "tensorflow.contrib.slim.dataset.Dataset", "tensorflow.contrib.slim.dataset_data_provider.DatasetDataProvider", "items_to_features.keys", "tf.contrib.slim.dataset_data_provider.DatasetDataProvider.get", "dict", "tf.image.resize_image_with_crop_or_pad.set_shape", "tf.image.resize_image_with_crop_or_pad.set_shape", "tf.image.resize_image_with_crop_or_pad.set_shape", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "tensorflow.FixedLenFeature", "zip", "tensorflow.concat", "tensorflow.image.random_flip_left_right", "tensorflow.random_uniform", "tensorflow.contrib.image.rotate", "tensorflow.random_crop", "tensorflow.split", "tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.image.resize_image_with_crop_or_pad", "tensorflow.train.shuffle_batch", "tensorflow.train.batch"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.read_file_paths"], ["def", "get_loader", "(", "root", ",", "\n", "batch_size", ",", "\n", "image_width", ",", "\n", "image_height", ",", "\n", "split", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "sequence", "=", "None", ",", "\n", "skip_frames", "=", "False", ",", "\n", "time_only", "=", "False", ",", "\n", "count_only", "=", "False", ")", ":", "\n", "    ", "print", "(", "\"Loading data!\"", ")", "\n", "if", "split", "is", "None", ":", "\n", "        ", "split", "=", "'train'", "\n", "\n", "", "tfrecord_paths_np", ",", "n_ima", "=", "read_file_paths", "(", "\n", "root", ",", "\n", "split", ",", "\n", "sequence", ")", "\n", "\n", "items_to_features", "=", "{", "\n", "'event_image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'prev_image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'next_image'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", ",", "\n", "'timestamps'", ":", "tf", ".", "FixedLenFeature", "(", "[", "]", ",", "tf", ".", "string", ")", "\n", "}", "\n", "\n", "items_to_descriptions", "=", "{", "\n", "'event_image'", ":", "'Event image'", ",", "\n", "'prev_image'", ":", "'Previous grayscale image'", ",", "\n", "'next_image'", ":", "'Next grayscale image'", ",", "\n", "'timestamps'", ":", "'Timestamps of the start and end of the time window'", "\n", "}", "\n", "\n", "event_data_decoder", "=", "EventDataDecoder", "(", "items_to_features", ",", "\n", "image_width", ",", "\n", "image_height", ",", "\n", "root", ",", "\n", "split", ",", "\n", "skip_frames", ",", "\n", "time_only", ",", "\n", "count_only", ")", "\n", "\n", "dataset", "=", "tf", ".", "contrib", ".", "slim", ".", "dataset", ".", "Dataset", "(", "\n", "data_sources", "=", "tfrecord_paths_np", ",", "\n", "reader", "=", "tf", ".", "TFRecordReader", ",", "\n", "decoder", "=", "event_data_decoder", ",", "\n", "num_samples", "=", "n_ima", ",", "\n", "items_to_descriptions", "=", "items_to_descriptions", ")", "\n", "\n", "num_epochs", "=", "None", "\n", "if", "split", "is", "'test'", ":", "\n", "        ", "num_epochs", "=", "1", "\n", "\n", "", "provider", "=", "tf", ".", "contrib", ".", "slim", ".", "dataset_data_provider", ".", "DatasetDataProvider", "(", "\n", "dataset", ",", "\n", "num_readers", "=", "4", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "common_queue_capacity", "=", "20", "*", "batch_size", ",", "\n", "common_queue_min", "=", "10", "*", "batch_size", ")", "\n", "\n", "keys", "=", "items_to_features", ".", "keys", "(", ")", "\n", "values", "=", "provider", ".", "get", "(", "keys", ")", "\n", "\n", "dict_batch", "=", "dict", "(", "zip", "(", "keys", ",", "values", ")", ")", "\n", "event_image", "=", "dict_batch", "[", "'event_image'", "]", "\n", "prev_image", "=", "dict_batch", "[", "'prev_image'", "]", "\n", "next_image", "=", "dict_batch", "[", "'next_image'", "]", "\n", "timestamps", "=", "dict_batch", "[", "'timestamps'", "]", "\n", "\n", "n_split", "=", "6", "\n", "event_size", "=", "4", "\n", "if", "time_only", "or", "count_only", ":", "\n", "        ", "n_split", "=", "4", "\n", "event_size", "=", "2", "\n", "\n", "# Do data augmentation during training. Random flipping, rotations, and cropping.", "\n", "", "if", "split", "==", "'train'", ":", "\n", "        ", "images_concat", "=", "tf", ".", "concat", "(", "[", "event_image", ",", "prev_image", ",", "next_image", "]", ",", "axis", "=", "2", ")", "\n", "images_concat", "=", "tf", ".", "image", ".", "random_flip_left_right", "(", "images_concat", ")", "\n", "\n", "random_angles", "=", "tf", ".", "random_uniform", "(", "[", "1", "]", ",", "\n", "minval", "=", "-", "30", ",", "\n", "maxval", "=", "30", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "images_rotated", "=", "tf", ".", "contrib", ".", "image", ".", "rotate", "(", "images_concat", ",", "\n", "random_angles", "*", "np", ".", "pi", "/", "180.", ",", "\n", "interpolation", "=", "'NEAREST'", ")", "\n", "image_cropped", "=", "tf", ".", "random_crop", "(", "images_rotated", ",", "\n", "[", "image_height", ",", "image_width", ",", "n_split", "]", ")", "\n", "event_image", ",", "prev_image", ",", "next_image", "=", "tf", ".", "split", "(", "image_cropped", ",", "\n", "[", "event_size", ",", "1", ",", "1", "]", ",", "\n", "axis", "=", "2", ")", "\n", "# Otherwise just centrally crop the images.", "\n", "", "else", ":", "\n", "        ", "event_image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "event_image", ",", "\n", "image_height", ",", "\n", "image_width", ")", "\n", "prev_image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "prev_image", ",", "\n", "image_height", ",", "\n", "image_width", ")", "\n", "next_image", "=", "tf", ".", "image", ".", "resize_image_with_crop_or_pad", "(", "next_image", ",", "\n", "image_height", ",", "\n", "image_width", ")", "\n", "\n", "", "event_image", ".", "set_shape", "(", "[", "image_height", ",", "image_width", ",", "event_size", "]", ")", "\n", "prev_image", ".", "set_shape", "(", "[", "image_height", ",", "image_width", ",", "1", "]", ")", "\n", "next_image", ".", "set_shape", "(", "[", "image_height", ",", "image_width", ",", "1", "]", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "values_batch", "=", "tf", ".", "train", ".", "shuffle_batch", "(", "[", "event_image", ",", "prev_image", ",", "next_image", ",", "timestamps", "]", ",", "\n", "num_threads", "=", "4", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "capacity", "=", "20000", ",", "\n", "min_after_dequeue", "=", "8000", ")", "\n", "", "else", ":", "\n", "        ", "values_batch", "=", "tf", ".", "train", ".", "batch", "(", "[", "event_image", ",", "prev_image", ",", "next_image", ",", "timestamps", "]", ",", "\n", "num_threads", "=", "4", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "capacity", "=", "10", "*", "batch_size", ")", "\n", "\n", "", "return", "values_batch", "[", "0", "]", ",", "values_batch", "[", "1", "]", ",", "values_batch", "[", "2", "]", ",", "values_batch", "[", "3", "]", ",", "n_ima", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.draw_color_wheel_tf": [[12, 24], ["tensorflow.lin_space", "tensorflow.lin_space", "tensorflow.meshgrid", "tensorflow.stack", "tensorflow.expand_dims", "vis_utils.flow_viz_tf"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_tf"], ["def", "draw_color_wheel_tf", "(", "width", ",", "height", ")", ":", "\n", "    ", "color_wheel_x", "=", "tf", ".", "lin_space", "(", "-", "width", "/", "2.", ",", "\n", "width", "/", "2.", ",", "\n", "width", ")", "\n", "color_wheel_y", "=", "tf", ".", "lin_space", "(", "-", "height", "/", "2.", ",", "\n", "height", "/", "2.", ",", "\n", "height", ")", "\n", "color_wheel_X", ",", "color_wheel_Y", "=", "tf", ".", "meshgrid", "(", "color_wheel_x", ",", "color_wheel_y", ")", "\n", "color_wheel_flow", "=", "tf", ".", "stack", "(", "[", "color_wheel_X", ",", "color_wheel_Y", "]", ",", "axis", "=", "2", ")", "\n", "color_wheel_flow", "=", "tf", ".", "expand_dims", "(", "color_wheel_flow", ",", "0", ")", "\n", "color_wheel_rgb", ",", "flow_norm", ",", "flow_ang", "=", "flow_viz_tf", "(", "color_wheel_flow", ")", "\n", "return", "color_wheel_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.draw_color_wheel_np": [[25, 35], ["numpy.linspace", "numpy.linspace", "numpy.meshgrid", "vis_utils.flow_viz_np"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_np"], ["", "def", "draw_color_wheel_np", "(", "width", ",", "height", ")", ":", "\n", "    ", "color_wheel_x", "=", "np", ".", "linspace", "(", "-", "width", "/", "2.", ",", "\n", "width", "/", "2.", ",", "\n", "width", ")", "\n", "color_wheel_y", "=", "np", ".", "linspace", "(", "-", "height", "/", "2.", ",", "\n", "height", "/", "2.", ",", "\n", "height", ")", "\n", "color_wheel_X", ",", "color_wheel_Y", "=", "np", ".", "meshgrid", "(", "color_wheel_x", ",", "color_wheel_y", ")", "\n", "color_wheel_rgb", "=", "flow_viz_np", "(", "color_wheel_X", ",", "color_wheel_Y", ")", "\n", "return", "color_wheel_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_tf": [[42, 52], ["tensorflow.norm", "tensorflow.atan2", "tensorflow.ones", "tensorflow.stack", "tensorflow.image.hsv_to_rgb", "tensorflow.shape"], "function", ["None"], ["def", "flow_viz_tf", "(", "flow", ")", ":", "\n", "    ", "flow_norm", "=", "tf", ".", "norm", "(", "flow", ",", "axis", "=", "3", ")", "\n", "\n", "flow_ang_rad", "=", "tf", ".", "atan2", "(", "flow", "[", ":", ",", ":", ",", ":", ",", "1", "]", ",", "flow", "[", ":", ",", ":", ",", ":", ",", "0", "]", ")", "\n", "flow_ang", "=", "(", "flow_ang_rad", "/", "math", ".", "pi", ")", "/", "2.", "+", "0.5", "\n", "\n", "const_mat", "=", "tf", ".", "ones", "(", "tf", ".", "shape", "(", "flow_norm", ")", ")", "\n", "hsv", "=", "tf", ".", "stack", "(", "[", "flow_ang", ",", "const_mat", ",", "flow_norm", "]", ",", "axis", "=", "3", ")", "\n", "flow_rgb", "=", "tf", ".", "image", ".", "hsv_to_rgb", "(", "hsv", ")", "\n", "return", "flow_rgb", ",", "flow_norm", ",", "flow_ang_rad", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_np": [[53, 68], ["numpy.stack", "numpy.linalg.norm", "numpy.arctan2", "ang.astype.astype", "numpy.zeros", "cv2.normalize", "cv2.cvtColor"], "function", ["None"], ["", "def", "flow_viz_np", "(", "flow_x", ",", "flow_y", ")", ":", "\n", "    ", "import", "cv2", "\n", "flows", "=", "np", ".", "stack", "(", "(", "flow_x", ",", "flow_y", ")", ",", "axis", "=", "2", ")", "\n", "mag", "=", "np", ".", "linalg", ".", "norm", "(", "flows", ",", "axis", "=", "2", ")", "\n", "\n", "ang", "=", "np", ".", "arctan2", "(", "flow_y", ",", "flow_x", ")", "\n", "ang", "+=", "np", ".", "pi", "\n", "ang", "*=", "180.", "/", "np", ".", "pi", "/", "2.", "\n", "ang", "=", "ang", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "hsv", "=", "np", ".", "zeros", "(", "[", "flow_x", ".", "shape", "[", "0", "]", ",", "flow_x", ".", "shape", "[", "1", "]", ",", "3", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "hsv", "[", ":", ",", ":", ",", "0", "]", "=", "ang", "\n", "hsv", "[", ":", ",", ":", ",", "1", "]", "=", "255", "\n", "hsv", "[", ":", ",", ":", ",", "2", "]", "=", "cv2", ".", "normalize", "(", "mag", ",", "None", ",", "0", ",", "255", ",", "cv2", ".", "NORM_MINMAX", ")", "\n", "flow_rgb", "=", "cv2", ".", "cvtColor", "(", "hsv", ",", "cv2", ".", "COLOR_HSV2BGR", ")", "\n", "return", "flow_rgb", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.train.main": [[11, 45], ["config.configs", "tensorflow.set_random_seed", "data_loader.get_loader", "print", "EVFlowNet.EVFlowNet", "EVFlowNet.EVFlowNet.train", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "datetime.datetime.now().strftime", "datetime.datetime.now().strftime", "datetime.datetime.now", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.config.configs", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.get_loader", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.EVFlowNet.EVFlowNet.train"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "configs", "(", ")", "\n", "if", "args", ".", "training_instance", ":", "\n", "        ", "args", ".", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "load_path", ",", "args", ".", "training_instance", ")", "\n", "args", ".", "summary_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "summary_path", ",", "args", ".", "training_instance", ")", "\n", "", "else", ":", "\n", "        ", "args", ".", "load_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "load_path", ",", "\n", "\"evflownet_{}\"", ".", "format", "(", "datetime", ".", "now", "(", ")", "\n", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", ")", ")", "\n", "args", ".", "summary_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "summary_path", ",", "\n", "\"evflownet_{}\"", ".", "format", "(", "datetime", ".", "now", "(", ")", "\n", ".", "strftime", "(", "\"%m%d_%H%M%S\"", ")", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "load_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "load_path", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "summary_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "summary_path", ")", "\n", "\n", "# Fix the random seed for reproducibility.", "\n", "# Remove this if you are using this code for something else!", "\n", "", "tf", ".", "set_random_seed", "(", "12345", ")", "\n", "\n", "event_img_loader", ",", "prev_img_loader", ",", "next_img_loader", ",", "_", ",", "n_ima", "=", "get_loader", "(", "\n", "args", ".", "data_path", ",", "args", ".", "batch_size", ",", "args", ".", "image_width", ",", "args", ".", "image_height", ",", "\n", "split", "=", "'train'", ",", "\n", "shuffle", "=", "True", ")", "\n", "print", "(", "\"Number of images: {}\"", ".", "format", "(", "n_ima", ")", ")", "\n", "\n", "trainer", "=", "EVFlowNet", "(", "args", ",", "\n", "event_img_loader", ",", "\n", "prev_img_loader", ",", "\n", "next_img_loader", ",", "\n", "n_ima", ",", "\n", "is_training", "=", "True", ")", "\n", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle": [[14, 24], ["cv2.putText"], "function", ["None"], ["def", "drawImageTitle", "(", "img", ",", "title", ")", ":", "\n", "    ", "cv2", ".", "putText", "(", "img", ",", "\n", "title", ",", "\n", "(", "60", ",", "20", ")", ",", "\n", "cv2", ".", "FONT_HERSHEY_SIMPLEX", ",", "\n", "0.5", ",", "\n", "(", "255", ",", "255", ",", "255", ")", ",", "\n", "thickness", "=", "2", ",", "\n", "bottomLeftOrigin", "=", "False", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.test": [[25, 215], ["tensorflow.train.get_or_create_global_step", "tensorflow.reduce_sum", "vis_utils.flow_viz_tf", "vis_utils.draw_color_wheel_np", "sess.run", "sess.run", "tensorflow.train.Saver", "tf.train.Saver.restore", "tensorflow.train.Coordinator", "tensorflow.train.start_queue_runners", "print", "tf.train.Coordinator.request_stop", "tensorflow.variable_scope", "model.model", "tensorflow.global_variables_initializer", "tensorflow.local_variables_initializer", "cv2.namedWindow", "print", "numpy.load", "print", "tf.train.Coordinator.should_stop", "time.time", "numpy.array", "numpy.squeeze", "numpy.max", "numpy.min", "numpy.sum", "numpy.squeeze", "print", "sess.run", "time.time", "output_flow_list.append", "event_image_list.append", "eval_utils.estimate_corresponding_gt_flow", "numpy.stack", "eval_utils.flow_error_dense", "AEE_list.append", "print", "print", "vis_utils.flow_viz_np", "test.drawImageTitle", "numpy.squeeze", "numpy.tile", "numpy.tile", "test.drawImageTitle", "test.drawImageTitle", "numpy.squeeze", "numpy.tile", "test.drawImageTitle", "numpy.zeros", "numpy.zeros", "test.drawImageTitle", "test.drawImageTitle", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "cat.astype.astype", "cv2.imshow", "cv2.waitKey", "print", "numpy.savez", "print", "numpy.savez", "gt_flow_list.append", "print", "numpy.amax", "numpy.linalg.norm", "numpy.tile", "vis_utils.flow_viz_np", "test.drawImageTitle", "test.drawImageTitle", "drawImageTitle.max", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "drawImageTitle.max", "drawImageTitle.max"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_tf", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.draw_color_wheel_np", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.model", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.estimate_corresponding_gt_flow", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.flow_error_dense", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_np", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.vis_utils.flow_viz_np", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.drawImageTitle"], ["", "def", "test", "(", "sess", ",", "\n", "args", ",", "\n", "event_image_loader", ",", "\n", "prev_image_loader", ",", "\n", "next_image_loader", ",", "\n", "timestamp_loader", ")", ":", "\n", "    ", "global_step", "=", "tf", ".", "train", ".", "get_or_create_global_step", "(", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'vs'", ")", ":", "\n", "        ", "flow_dict", "=", "model", "(", "event_image_loader", ",", "\n", "is_training", "=", "False", ",", "\n", "do_batch_norm", "=", "not", "args", ".", "no_batch_norm", ")", "\n", "\n", "", "event_image", "=", "tf", ".", "reduce_sum", "(", "event_image_loader", "[", ":", ",", ":", ",", ":", ",", ":", "2", "]", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "flow_rgb", ",", "flow_norm", ",", "flow_ang_rad", "=", "flow_viz_tf", "(", "flow_dict", "[", "'flow3'", "]", ")", "\n", "color_wheel_rgb", "=", "draw_color_wheel_np", "(", "args", ".", "image_width", ",", "args", ".", "image_height", ")", "\n", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "args", ".", "load_path", ")", "\n", "\n", "coord", "=", "tf", ".", "train", ".", "Coordinator", "(", ")", "\n", "threads", "=", "tf", ".", "train", ".", "start_queue_runners", "(", "sess", "=", "sess", ",", "coord", "=", "coord", ")", "\n", "\n", "max_flow_sum", "=", "0", "\n", "min_flow_sum", "=", "0", "\n", "iters", "=", "0", "\n", "\n", "if", "args", ".", "test_plot", ":", "\n", "        ", "import", "cv2", "\n", "cv2", ".", "namedWindow", "(", "'EV-FlowNet Results'", ",", "cv2", ".", "WINDOW_NORMAL", ")", "\n", "\n", "", "if", "args", ".", "gt_path", ":", "\n", "        ", "print", "(", "\"Loading ground truth {}\"", ".", "format", "(", "args", ".", "gt_path", ")", ")", "\n", "gt", "=", "np", ".", "load", "(", "args", ".", "gt_path", ")", "\n", "gt_timestamps", "=", "gt", "[", "'timestamps'", "]", "\n", "U_gt_all", "=", "gt", "[", "'x_flow_dist'", "]", "\n", "V_gt_all", "=", "gt", "[", "'y_flow_dist'", "]", "\n", "print", "(", "\"Ground truth loaded\"", ")", "\n", "\n", "AEE_sum", "=", "0.", "\n", "percent_AEE_sum", "=", "0.", "\n", "AEE_list", "=", "[", "]", "\n", "\n", "", "if", "args", ".", "save_test_output", ":", "\n", "        ", "output_flow_list", "=", "[", "]", "\n", "gt_flow_list", "=", "[", "]", "\n", "event_image_list", "=", "[", "]", "\n", "\n", "", "while", "not", "coord", ".", "should_stop", "(", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "try", ":", "\n", "            ", "flow_dict_np", ",", "prev_image", ",", "next_image", ",", "event_image", ",", "image_timestamps", "=", "sess", ".", "run", "(", "[", "flow_dict", ",", "\n", "prev_image_loader", ",", "\n", "next_image_loader", ",", "\n", "event_image_loader", ",", "\n", "timestamp_loader", "]", ")", "\n", "", "except", "tf", ".", "errors", ".", "OutOfRangeError", ":", "\n", "            ", "break", "\n", "\n", "", "network_duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "event_image", "=", "np", ".", "array", "(", "event_image", ")", "\n", "\n", "pred_flow", "=", "np", ".", "squeeze", "(", "flow_dict_np", "[", "'flow3'", "]", ")", "\n", "\n", "max_flow_sum", "+=", "np", ".", "max", "(", "pred_flow", ")", "\n", "min_flow_sum", "+=", "np", ".", "min", "(", "pred_flow", ")", "\n", "\n", "event_count_image", "=", "np", ".", "sum", "(", "event_image", "[", "...", ",", ":", "2", "]", ",", "axis", "=", "-", "1", ")", "\n", "event_count_image", "=", "(", "event_count_image", "*", "255", "/", "event_count_image", ".", "max", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "event_count_image", "=", "np", ".", "squeeze", "(", "event_count_image", ")", "\n", "\n", "if", "args", ".", "save_test_output", ":", "\n", "            ", "output_flow_list", ".", "append", "(", "pred_flow", ")", "\n", "event_image_list", ".", "append", "(", "event_count_image", ")", "\n", "\n", "", "if", "args", ".", "gt_path", ":", "\n", "            ", "U_gt", ",", "V_gt", "=", "estimate_corresponding_gt_flow", "(", "U_gt_all", ",", "V_gt_all", ",", "\n", "gt_timestamps", ",", "\n", "image_timestamps", "[", "0", "]", "[", "0", "]", ",", "\n", "image_timestamps", "[", "0", "]", "[", "1", "]", ")", "\n", "\n", "gt_flow", "=", "np", ".", "stack", "(", "(", "U_gt", ",", "V_gt", ")", ",", "axis", "=", "2", ")", "\n", "\n", "if", "args", ".", "save_test_output", ":", "\n", "                ", "gt_flow_list", ".", "append", "(", "gt_flow", ")", "\n", "\n", "", "image_size", "=", "pred_flow", ".", "shape", "\n", "full_size", "=", "gt_flow", ".", "shape", "\n", "xsize", "=", "full_size", "[", "1", "]", "\n", "ysize", "=", "full_size", "[", "0", "]", "\n", "xcrop", "=", "image_size", "[", "1", "]", "\n", "ycrop", "=", "image_size", "[", "0", "]", "\n", "xoff", "=", "(", "xsize", "-", "xcrop", ")", "//", "2", "\n", "yoff", "=", "(", "ysize", "-", "ycrop", ")", "//", "2", "\n", "\n", "gt_flow", "=", "gt_flow", "[", "yoff", ":", "-", "yoff", ",", "xoff", ":", "-", "xoff", ",", ":", "]", "\n", "\n", "# Calculate flow error.", "\n", "AEE", ",", "percent_AEE", ",", "n_points", "=", "flow_error_dense", "(", "gt_flow", ",", "\n", "pred_flow", ",", "\n", "event_count_image", ",", "\n", "'outdoor'", "in", "args", ".", "test_sequence", ")", "\n", "AEE_list", ".", "append", "(", "AEE", ")", "\n", "AEE_sum", "+=", "AEE", "\n", "percent_AEE_sum", "+=", "percent_AEE", "\n", "\n", "", "iters", "+=", "1", "\n", "if", "iters", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'-------------------------------------------------------'", ")", "\n", "print", "(", "'Iter: {}, time: {:f}, run time: {:.3f}s\\n'", "\n", "'Mean max flow: {:.2f}, mean min flow: {:.2f}'", "\n", ".", "format", "(", "iters", ",", "image_timestamps", "[", "0", "]", "[", "0", "]", ",", "network_duration", ",", "\n", "max_flow_sum", "/", "iters", ",", "min_flow_sum", "/", "iters", ")", ")", "\n", "if", "args", ".", "gt_path", ":", "\n", "                ", "print", "(", "'Mean AEE: {:.2f}, mean %AEE: {:.2f}, # pts: {:.2f}'", "\n", ".", "format", "(", "AEE_sum", "/", "iters", ",", "\n", "percent_AEE_sum", "/", "iters", ",", "\n", "n_points", ")", ")", "\n", "\n", "# Prep outputs for nice visualization.", "\n", "", "", "if", "args", ".", "test_plot", ":", "\n", "            ", "pred_flow_rgb", "=", "flow_viz_np", "(", "pred_flow", "[", "...", ",", "0", "]", ",", "pred_flow", "[", "...", ",", "1", "]", ")", "\n", "pred_flow_rgb", "=", "drawImageTitle", "(", "pred_flow_rgb", ",", "'Predicted Flow'", ")", "\n", "\n", "event_time_image", "=", "np", ".", "squeeze", "(", "np", ".", "amax", "(", "event_image", "[", "...", ",", "2", ":", "]", ",", "axis", "=", "-", "1", ")", ")", "\n", "event_time_image", "=", "(", "event_time_image", "*", "255", "/", "event_time_image", ".", "max", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "event_time_image", "=", "np", ".", "tile", "(", "event_time_image", "[", "...", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "event_count_image", "=", "np", ".", "tile", "(", "event_count_image", "[", "...", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "event_time_image", "=", "drawImageTitle", "(", "event_time_image", ",", "'Timestamp Image'", ")", "\n", "event_count_image", "=", "drawImageTitle", "(", "event_count_image", ",", "'Count Image'", ")", "\n", "\n", "prev_image", "=", "np", ".", "squeeze", "(", "prev_image", ")", "\n", "prev_image", "=", "np", ".", "tile", "(", "prev_image", "[", "...", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "\n", "prev_image", "=", "drawImageTitle", "(", "prev_image", ",", "'Grayscale Image'", ")", "\n", "\n", "gt_flow_rgb", "=", "np", ".", "zeros", "(", "pred_flow_rgb", ".", "shape", ")", "\n", "errors", "=", "np", ".", "zeros", "(", "pred_flow_rgb", ".", "shape", ")", "\n", "\n", "gt_flow_rgb", "=", "drawImageTitle", "(", "gt_flow_rgb", ",", "'GT Flow - No GT'", ")", "\n", "errors", "=", "drawImageTitle", "(", "errors", ",", "'Flow Error - No GT'", ")", "\n", "\n", "if", "args", ".", "gt_path", ":", "\n", "                ", "errors", "=", "np", ".", "linalg", ".", "norm", "(", "gt_flow", "-", "pred_flow", ",", "axis", "=", "-", "1", ")", "\n", "errors", "=", "(", "errors", "*", "255.", "/", "errors", ".", "max", "(", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "errors", "=", "np", ".", "tile", "(", "errors", "[", "...", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "errors", "[", "event_count_image", "==", "0", "]", "=", "0", "\n", "\n", "if", "'outdoor'", "in", "args", ".", "test_sequence", ":", "\n", "                    ", "errors", "[", "190", ":", ",", ":", "]", "=", "0", "\n", "\n", "", "gt_flow_rgb", "=", "flow_viz_np", "(", "gt_flow", "[", "...", ",", "0", "]", ",", "gt_flow", "[", "...", ",", "1", "]", ")", "\n", "\n", "gt_flow_rgb", "=", "drawImageTitle", "(", "gt_flow_rgb", ",", "'GT Flow'", ")", "\n", "errors", "=", "drawImageTitle", "(", "errors", ",", "'Flow Error'", ")", "\n", "\n", "", "top_cat", "=", "np", ".", "concatenate", "(", "[", "event_count_image", ",", "prev_image", ",", "pred_flow_rgb", "]", ",", "axis", "=", "1", ")", "\n", "bottom_cat", "=", "np", ".", "concatenate", "(", "[", "event_time_image", ",", "errors", ",", "gt_flow_rgb", "]", ",", "axis", "=", "1", ")", "\n", "cat", "=", "np", ".", "concatenate", "(", "[", "top_cat", ",", "bottom_cat", "]", ",", "axis", "=", "0", ")", "\n", "cat", "=", "cat", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "imshow", "(", "'EV-FlowNet Results'", ",", "cat", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n", "", "", "print", "(", "'Testing done. '", ")", "\n", "if", "args", ".", "gt_path", ":", "\n", "        ", "print", "(", "'mean AEE {:02f}, mean %AEE {:02f}'", "\n", ".", "format", "(", "AEE_sum", "/", "iters", ",", "\n", "percent_AEE_sum", "/", "iters", ")", ")", "\n", "", "if", "args", ".", "save_test_output", ":", "\n", "        ", "if", "args", ".", "gt_path", ":", "\n", "            ", "print", "(", "'Saving data to {}_output_gt.npz'", ".", "format", "(", "args", ".", "test_sequence", ")", ")", "\n", "np", ".", "savez", "(", "'{}_output_gt.npz'", ".", "format", "(", "args", ".", "test_sequence", ")", ",", "\n", "output_flows", "=", "np", ".", "stack", "(", "output_flow_list", ",", "axis", "=", "0", ")", ",", "\n", "gt_flows", "=", "np", ".", "stack", "(", "gt_flow_list", ",", "axis", "=", "0", ")", ",", "\n", "event_images", "=", "np", ".", "stack", "(", "event_image_list", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Saving data to {}_output.npz'", ".", "format", "(", "args", ".", "test_sequence", ")", ")", "\n", "np", ".", "savez", "(", "'{}_output.npz'", ".", "format", "(", "args", ".", "test_sequence", ")", ",", "\n", "output_flows", "=", "np", ".", "stack", "(", "output_flow_list", ",", "axis", "=", "0", ")", ",", "\n", "event_images", "=", "np", ".", "stack", "(", "event_image_list", ",", "axis", "=", "0", ")", ")", "\n", "\n", "", "", "coord", ".", "request_stop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.main": [[216, 245], ["config.configs", "tensorflow.train.latest_checkpoint", "tensorflow.Session", "data_loader.get_loader", "print", "test.test", "tf.Session.close", "os.path.join", "Exception"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.config.configs", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.data_loader.get_loader", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.test.test"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "configs", "(", ")", "\n", "args", ".", "load_path", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "os", ".", "path", ".", "join", "(", "args", ".", "load_path", ",", "\n", "args", ".", "training_instance", ")", ")", "\n", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "event_image_loader", ",", "prev_image_loader", ",", "next_image_loader", ",", "timestamp_loader", ",", "n_ima", "=", "get_loader", "(", "\n", "args", ".", "data_path", ",", "\n", "1", ",", "\n", "args", ".", "image_width", ",", "\n", "args", ".", "image_height", ",", "\n", "split", "=", "'test'", ",", "\n", "shuffle", "=", "False", ",", "\n", "sequence", "=", "args", ".", "test_sequence", ",", "\n", "skip_frames", "=", "args", ".", "test_skip_frames", ",", "\n", "time_only", "=", "args", ".", "time_only", ",", "\n", "count_only", "=", "args", ".", "count_only", ")", "\n", "\n", "if", "not", "args", ".", "load_path", ":", "\n", "        ", "raise", "Exception", "(", "\"You need to set `load_path` and `training_instance`.\"", ")", "\n", "\n", "", "print", "(", "\"Read {} images\"", ".", "format", "(", "n_ima", ")", ")", "\n", "test", "(", "sess", ",", "\n", "args", ",", "\n", "event_image_loader", ",", "\n", "prev_image_loader", ",", "\n", "next_image_loader", ",", "\n", "timestamp_loader", ")", "\n", "sess", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.encoder": [[8, 21], ["tensorflow.variable_scope", "range", "basic_layers.general_conv2d"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d"], ["def", "encoder", "(", "inputs", ",", "is_training", ",", "data_format", ",", "do_batch_norm", "=", "False", ")", ":", "\n", "    ", "skip_connections", "=", "{", "}", "\n", "with", "tf", ".", "variable_scope", "(", "'encoder'", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "            ", "inputs", "=", "general_conv2d", "(", "inputs", ",", "\n", "name", "=", "'conv{}'", ".", "format", "(", "i", ")", ",", "\n", "channelsout", "=", "(", "2", "**", "i", ")", "*", "_BASE_CHANNELS", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ")", "\n", "skip_connections", "[", "'skip{}'", ".", "format", "(", "i", ")", "]", "=", "inputs", "\n", "\n", "", "", "return", "inputs", ",", "skip_connections", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.transition": [[22, 32], ["tensorflow.variable_scope", "range", "basic_layers.build_resnet_block"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.build_resnet_block"], ["", "def", "transition", "(", "inputs", ",", "is_training", ",", "data_format", ",", "do_batch_norm", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'transition'", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "inputs", "=", "build_resnet_block", "(", "inputs", ",", "\n", "channelsout", "=", "8", "*", "_BASE_CHANNELS", ",", "\n", "is_training", "=", "is_training", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "\n", "data_format", "=", "data_format", ",", "\n", "name", "=", "'res{}'", ".", "format", "(", "i", ")", ")", "\n", "", "", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.decoder": [[33, 60], ["tensorflow.variable_scope", "range", "tensorflow.concat", "basic_layers.upsample_conv2d", "tensorflow.concat", "basic_layers.predict_flow", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.upsample_conv2d", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.predict_flow"], ["", "def", "decoder", "(", "inputs", ",", "skip_connection", ",", "is_training", ",", "data_format", ",", "do_batch_norm", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "'decoder'", ")", ":", "\n", "        ", "flow_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "# Skip connection.", "\n", "            ", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "skip_connection", "[", "'skip{}'", ".", "format", "(", "3", "-", "i", ")", "]", "]", ",", "\n", "axis", "=", "1", "if", "data_format", "==", "'channels_first'", "else", "-", "1", ")", "\n", "\n", "inputs", "=", "upsample_conv2d", "(", "inputs", ",", "\n", "name", "=", "'deconv{}'", ".", "format", "(", "i", ")", ",", "\n", "channelsout", "=", "(", "2", "**", "(", "2", "-", "i", ")", ")", "*", "_BASE_CHANNELS", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "flow", "=", "predict_flow", "(", "inputs", ",", "\n", "name", "=", "'flow{}'", ".", "format", "(", "i", ")", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ")", "*", "256.", "\n", "\n", "inputs", "=", "tf", ".", "concat", "(", "[", "inputs", ",", "flow", "]", ",", "axis", "=", "1", "if", "data_format", "==", "'channels_first'", "else", "-", "1", ")", "\n", "\n", "if", "data_format", "==", "'channels_first'", ":", "\n", "                ", "flow", "=", "tf", ".", "transpose", "(", "flow", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "flow_dict", "[", "'flow{}'", ".", "format", "(", "i", ")", "]", "=", "flow", "\n", "", "", "return", "flow_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.model": [[61, 79], ["tensorflow.variable_scope", "model.encoder", "model.transition", "model.decoder", "tensorflow.test.is_built_with_cuda", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.encoder", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.transition", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.model.decoder"], ["", "def", "model", "(", "event_image", ",", "is_training", "=", "True", ",", "data_format", "=", "None", ",", "do_batch_norm", "=", "False", ")", ":", "\n", "    ", "if", "data_format", "is", "None", ":", "\n", "        ", "data_format", "=", "(", "'channels_first'", "if", "tf", ".", "test", ".", "is_built_with_cuda", "(", ")", "else", "'channels_last'", ")", "\n", "\n", "", "with", "tf", ".", "variable_scope", "(", "'vs'", ")", ":", "\n", "        ", "if", "data_format", "==", "'channels_first'", ":", "\n", "            ", "inputs", "=", "tf", ".", "transpose", "(", "event_image", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "event_image", "\n", "\n", "", "inputs", ",", "skip_connections", "=", "encoder", "(", "inputs", ",", "is_training", ",", "data_format", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ")", "\n", "inputs", "=", "transition", "(", "inputs", ",", "is_training", ",", "data_format", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ")", "\n", "flow_dict", "=", "decoder", "(", "inputs", ",", "skip_connections", ",", "is_training", ",", "data_format", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ")", "\n", "\n", "", "return", "flow_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.build_resnet_block": [[4, 22], ["tensorflow.identity", "basic_layers.general_conv2d", "basic_layers.general_conv2d"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d"], ["def", "build_resnet_block", "(", "input_res", ",", "channelsout", ",", "is_training", ",", "data_format", ",", "\n", "do_batch_norm", "=", "False", ",", "name", "=", "None", ")", ":", "\n", "    ", "inputs", "=", "tf", ".", "identity", "(", "input_res", ")", "\n", "out_res_1", "=", "general_conv2d", "(", "input_res", ",", "\n", "name", "=", "name", "+", "'_res1'", ",", "\n", "channelsout", "=", "channelsout", ",", "\n", "strides", "=", "1", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ")", "\n", "out_res_2", "=", "general_conv2d", "(", "out_res_1", ",", "\n", "name", "=", "name", "+", "'_res2'", ",", "\n", "channelsout", "=", "channelsout", ",", "\n", "strides", "=", "1", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ")", "\n", "return", "out_res_2", "+", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d": [[23, 46], ["tensorflow.layers.conv2d", "tensorflow.layers.batch_normalization", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["", "def", "general_conv2d", "(", "conv", ",", "name", "=", "None", ",", "channelsout", "=", "64", ",", "ksize", "=", "3", ",", "strides", "=", "2", ",", "init_factor", "=", "0.1", ",", "\n", "padding", "=", "'SAME'", ",", "do_batch_norm", "=", "False", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "is_training", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "\n", "    ", "conv", "=", "tf", ".", "layers", ".", "conv2d", "(", "conv", ",", "\n", "channelsout", ",", "\n", "ksize", ",", "\n", "strides", "=", "strides", ",", "\n", "padding", "=", "padding", ",", "\n", "activation", "=", "activation", ",", "\n", "kernel_initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "factor", "=", "init_factor", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "if", "do_batch_norm", ":", "\n", "        ", "conv", "=", "tf", ".", "layers", ".", "batch_normalization", "(", "conv", ",", "\n", "axis", "=", "1", "if", "data_format", "==", "'channels_first'", "else", "-", "1", ",", "\n", "epsilon", "=", "1e-5", ",", "\n", "gamma_initializer", "=", "tf", ".", "constant_initializer", "(", "[", "0.01", "]", ")", ",", "\n", "name", "=", "name", "+", "'_bn'", ",", "\n", "training", "=", "is_training", ")", "\n", "", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.upsample_conv2d": [[51, 84], ["basic_layers.general_conv2d", "tensorflow.transpose", "tensorflow.shape", "tensorflow.image.resize_images", "tensorflow.pad", "tensorflow.transpose", "tensorflow.shape", "tensorflow.image.resize_images", "tensorflow.pad"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d"], ["def", "upsample_conv2d", "(", "conv", ",", "name", "=", "None", ",", "channelsout", "=", "64", ",", "ksize", "=", "3", ",", "init_factor", "=", "0.1", ",", "\n", "do_batch_norm", "=", "False", ",", "is_training", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "    ", "if", "data_format", "==", "'channels_first'", ":", "\n", "        ", "conv", "=", "tf", ".", "transpose", "(", "conv", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "shape", "=", "tf", ".", "shape", "(", "conv", ")", "\n", "conv", "=", "tf", ".", "image", ".", "resize_images", "(", "conv", ",", "size", "=", "[", "shape", "[", "1", "]", "*", "2", ",", "shape", "[", "2", "]", "*", "2", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "NEAREST_NEIGHBOR", ")", "\n", "\n", "conv", "=", "tf", ".", "pad", "(", "conv", ",", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "(", "ksize", "-", "1", ")", "/", "2", ",", "(", "ksize", "-", "1", ")", "/", "2", "]", ",", "\n", "[", "(", "ksize", "-", "1", ")", "/", "2", ",", "(", "ksize", "-", "1", ")", "/", "2", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ",", "\n", "mode", "=", "'REFLECT'", ")", "\n", "\n", "conv", "=", "tf", ".", "transpose", "(", "conv", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "        ", "shape", "=", "tf", ".", "shape", "(", "conv", ")", "\n", "conv", "=", "tf", ".", "image", ".", "resize_images", "(", "conv", ",", "size", "=", "[", "shape", "[", "1", "]", "*", "2", ",", "shape", "[", "2", "]", "*", "2", "]", ",", "\n", "method", "=", "tf", ".", "image", ".", "ResizeMethod", ".", "NEAREST_NEIGHBOR", ")", "\n", "\n", "conv", "=", "tf", ".", "pad", "(", "conv", ",", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "\n", "[", "(", "ksize", "-", "1", ")", "/", "2", ",", "(", "ksize", "-", "1", ")", "/", "2", "]", ",", "\n", "[", "(", "ksize", "-", "1", ")", "/", "2", ",", "(", "ksize", "-", "1", ")", "/", "2", "]", ",", "\n", "[", "0", ",", "0", "]", "]", ",", "\n", "mode", "=", "'REFLECT'", ")", "\n", "\n", "", "conv", "=", "general_conv2d", "(", "conv", ",", "name", "=", "name", ",", "channelsout", "=", "channelsout", ",", "ksize", "=", "ksize", ",", "strides", "=", "1", ",", "\n", "do_batch_norm", "=", "do_batch_norm", ",", "padding", "=", "'VALID'", ",", "init_factor", "=", "init_factor", ",", "\n", "is_training", "=", "is_training", ",", "data_format", "=", "data_format", ")", "\n", "\n", "return", "conv", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.predict_flow": [[85, 99], ["basic_layers.general_conv2d"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.basic_layers.general_conv2d"], ["", "def", "predict_flow", "(", "conv", ",", "name", "=", "None", ",", "channelsout", "=", "2", ",", "ksize", "=", "1", ",", "strides", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "init_factor", "=", "0.1", ",", "\n", "is_training", "=", "True", ",", "data_format", "=", "None", ")", ":", "\n", "    ", "conv", "=", "general_conv2d", "(", "conv", ",", "\n", "channelsout", "=", "channelsout", ",", "\n", "ksize", "=", "ksize", ",", "\n", "strides", "=", "strides", ",", "\n", "init_factor", "=", "init_factor", ",", "\n", "padding", "=", "padding", ",", "\n", "activation", "=", "tf", ".", "tanh", ",", "\n", "is_training", "=", "is_training", ",", "\n", "data_format", "=", "data_format", ",", "\n", "name", "=", "name", ")", "\n", "return", "conv", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.flow_error_dense": [[13, 45], ["numpy.logical_and", "numpy.squeeze", "numpy.linalg.norm", "numpy.mean", "numpy.squeeze", "numpy.logical_and", "numpy.logical_and", "float", "float", "numpy.linalg.norm", "numpy.isinf", "numpy.isinf"], "function", ["None"], ["def", "flow_error_dense", "(", "flow_gt", ",", "flow_pred", ",", "event_img", ",", "is_car", "=", "False", ")", ":", "\n", "    ", "max_row", "=", "flow_gt", ".", "shape", "[", "1", "]", "\n", "\n", "if", "is_car", ":", "\n", "        ", "max_row", "=", "190", "\n", "\n", "", "event_img_cropped", "=", "np", ".", "squeeze", "(", "event_img", ")", "[", ":", "max_row", ",", ":", "]", "\n", "flow_gt_cropped", "=", "flow_gt", "[", ":", "max_row", ",", ":", ",", ":", "]", "\n", "\n", "flow_pred_cropped", "=", "flow_pred", "[", ":", "max_row", ",", ":", ",", ":", "]", "\n", "\n", "event_mask", "=", "event_img_cropped", ">", "0", "\n", "\n", "# Only compute error over points that are valid in the GT (not inf or 0).", "\n", "flow_mask", "=", "np", ".", "logical_and", "(", "\n", "np", ".", "logical_and", "(", "~", "np", ".", "isinf", "(", "flow_gt_cropped", "[", ":", ",", ":", ",", "0", "]", ")", ",", "~", "np", ".", "isinf", "(", "flow_gt_cropped", "[", ":", ",", ":", ",", "1", "]", ")", ")", ",", "\n", "np", ".", "linalg", ".", "norm", "(", "flow_gt_cropped", ",", "axis", "=", "2", ")", ">", "0", ")", "\n", "total_mask", "=", "np", ".", "squeeze", "(", "np", ".", "logical_and", "(", "event_mask", ",", "flow_mask", ")", ")", "\n", "\n", "gt_masked", "=", "flow_gt_cropped", "[", "total_mask", ",", ":", "]", "\n", "pred_masked", "=", "flow_pred_cropped", "[", "total_mask", ",", ":", "]", "\n", "\n", "# Average endpoint error.", "\n", "EE", "=", "np", ".", "linalg", ".", "norm", "(", "gt_masked", "-", "pred_masked", ",", "axis", "=", "-", "1", ")", "\n", "n_points", "=", "EE", ".", "shape", "[", "0", "]", "\n", "AEE", "=", "np", ".", "mean", "(", "EE", ")", "\n", "\n", "# Percentage of points with EE < 3 pixels.", "\n", "thresh", "=", "3.", "\n", "percent_AEE", "=", "float", "(", "(", "EE", "<", "thresh", ")", ".", "sum", "(", ")", ")", "/", "float", "(", "EE", ".", "shape", "[", "0", "]", "+", "1e-5", ")", "\n", "\n", "return", "AEE", ",", "percent_AEE", ",", "n_points", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.prop_flow": [[51, 69], ["cv2.remap", "cv2.remap"], "function", ["None"], ["def", "prop_flow", "(", "x_flow", ",", "y_flow", ",", "x_indices", ",", "y_indices", ",", "x_mask", ",", "y_mask", ",", "scale_factor", "=", "1.0", ")", ":", "\n", "    ", "flow_x_interp", "=", "cv2", ".", "remap", "(", "x_flow", ",", "\n", "x_indices", ",", "\n", "y_indices", ",", "\n", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "flow_y_interp", "=", "cv2", ".", "remap", "(", "y_flow", ",", "\n", "x_indices", ",", "\n", "y_indices", ",", "\n", "cv2", ".", "INTER_NEAREST", ")", "\n", "\n", "x_mask", "[", "flow_x_interp", "==", "0", "]", "=", "False", "\n", "y_mask", "[", "flow_y_interp", "==", "0", "]", "=", "False", "\n", "\n", "x_indices", "+=", "flow_x_interp", "*", "scale_factor", "\n", "y_indices", "+=", "flow_y_interp", "*", "scale_factor", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.estimate_corresponding_gt_flow": [[95, 167], ["numpy.squeeze", "numpy.squeeze", "numpy.meshgrid", "x_indices.astype.astype", "y_indices.astype.astype", "numpy.copy", "numpy.copy", "numpy.ones", "numpy.ones", "eval_utils.prop_flow", "numpy.squeeze", "numpy.squeeze", "eval_utils.prop_flow", "numpy.searchsorted", "numpy.arange", "numpy.arange", "numpy.squeeze", "numpy.squeeze", "eval_utils.prop_flow"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.prop_flow", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.prop_flow", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.eval_utils.prop_flow"], ["def", "estimate_corresponding_gt_flow", "(", "x_flow_in", ",", "\n", "y_flow_in", ",", "\n", "gt_timestamps", ",", "\n", "start_time", ",", "\n", "end_time", ")", ":", "\n", "# Each gt flow at timestamp gt_timestamps[gt_iter] represents the displacement between", "\n", "# gt_iter and gt_iter+1.", "\n", "    ", "gt_iter", "=", "np", ".", "searchsorted", "(", "gt_timestamps", ",", "start_time", ",", "side", "=", "'right'", ")", "-", "1", "\n", "gt_dt", "=", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "-", "gt_timestamps", "[", "gt_iter", "]", "\n", "x_flow", "=", "np", ".", "squeeze", "(", "x_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "y_flow", "=", "np", ".", "squeeze", "(", "y_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "\n", "dt", "=", "end_time", "-", "start_time", "\n", "\n", "# No need to propagate if the desired dt is shorter than the time between gt timestamps.", "\n", "if", "gt_dt", ">", "dt", ":", "\n", "        ", "return", "x_flow", "*", "dt", "/", "gt_dt", ",", "y_flow", "*", "dt", "/", "gt_dt", "\n", "\n", "", "x_indices", ",", "y_indices", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "x_flow", ".", "shape", "[", "1", "]", ")", ",", "\n", "np", ".", "arange", "(", "x_flow", ".", "shape", "[", "0", "]", ")", ")", "\n", "x_indices", "=", "x_indices", ".", "astype", "(", "np", ".", "float32", ")", "\n", "y_indices", "=", "y_indices", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "orig_x_indices", "=", "np", ".", "copy", "(", "x_indices", ")", "\n", "orig_y_indices", "=", "np", ".", "copy", "(", "y_indices", ")", "\n", "\n", "# Mask keeps track of the points that leave the image, and zeros out the flow afterwards.", "\n", "x_mask", "=", "np", ".", "ones", "(", "x_indices", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "y_mask", "=", "np", ".", "ones", "(", "y_indices", ".", "shape", ",", "dtype", "=", "bool", ")", "\n", "\n", "scale_factor", "=", "(", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "-", "start_time", ")", "/", "gt_dt", "\n", "total_dt", "=", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "-", "start_time", "\n", "\n", "prop_flow", "(", "x_flow", ",", "y_flow", ",", "\n", "x_indices", ",", "y_indices", ",", "\n", "x_mask", ",", "y_mask", ",", "\n", "scale_factor", "=", "scale_factor", ")", "\n", "\n", "gt_iter", "+=", "1", "\n", "\n", "while", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "<", "end_time", ":", "\n", "        ", "x_flow", "=", "np", ".", "squeeze", "(", "x_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "y_flow", "=", "np", ".", "squeeze", "(", "y_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "\n", "prop_flow", "(", "x_flow", ",", "y_flow", ",", "\n", "x_indices", ",", "y_indices", ",", "\n", "x_mask", ",", "y_mask", ")", "\n", "total_dt", "+=", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "-", "gt_timestamps", "[", "gt_iter", "]", "\n", "\n", "gt_iter", "+=", "1", "\n", "\n", "", "final_dt", "=", "end_time", "-", "gt_timestamps", "[", "gt_iter", "]", "\n", "total_dt", "+=", "final_dt", "\n", "\n", "final_gt_dt", "=", "gt_timestamps", "[", "gt_iter", "+", "1", "]", "-", "gt_timestamps", "[", "gt_iter", "]", "\n", "\n", "x_flow", "=", "np", ".", "squeeze", "(", "x_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "y_flow", "=", "np", ".", "squeeze", "(", "y_flow_in", "[", "gt_iter", ",", "...", "]", ")", "\n", "\n", "scale_factor", "=", "final_dt", "/", "final_gt_dt", "\n", "\n", "prop_flow", "(", "x_flow", ",", "y_flow", ",", "\n", "x_indices", ",", "y_indices", ",", "\n", "x_mask", ",", "y_mask", ",", "\n", "scale_factor", ")", "\n", "\n", "x_shift", "=", "x_indices", "-", "orig_x_indices", "\n", "y_shift", "=", "y_indices", "-", "orig_y_indices", "\n", "x_shift", "[", "~", "x_mask", "]", "=", "0", "\n", "y_shift", "[", "~", "y_mask", "]", "=", "0", "\n", "\n", "return", "x_shift", ",", "y_shift", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.warp_images_with_flow": [[7, 19], ["tensorflow.split", "tensorflow.meshgrid", "tensorflow.concat", "tensorflow.contrib.resampler.resampler", "tensorflow.shape", "tensorflow.shape", "tensorflow.range", "tensorflow.range", "tensorflow.to_float", "tensorflow.to_float", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims"], "function", ["None"], ["def", "warp_images_with_flow", "(", "images", ",", "flow", ")", ":", "\n", "    ", "height", "=", "tf", ".", "shape", "(", "flow", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "flow", ")", "[", "2", "]", "\n", "flow_x", ",", "flow_y", "=", "tf", ".", "split", "(", "flow", ",", "[", "1", ",", "1", "]", ",", "axis", "=", "3", ")", "\n", "coord_x", ",", "coord_y", "=", "tf", ".", "meshgrid", "(", "tf", ".", "range", "(", "width", ")", ",", "tf", ".", "range", "(", "height", ")", ")", "\n", "\n", "pos_x", "=", "tf", ".", "to_float", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "coord_x", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", ")", "+", "flow_x", "\n", "pos_y", "=", "tf", ".", "to_float", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "coord_y", ",", "axis", "=", "2", ")", ",", "axis", "=", "0", ")", ")", "+", "flow_y", "\n", "warped_points", "=", "tf", ".", "concat", "(", "[", "pos_x", ",", "pos_y", "]", ",", "axis", "=", "3", ",", "name", "=", "'warped_points'", ")", "\n", "return", "tf", ".", "contrib", ".", "resampler", ".", "resampler", "(", "images", ",", "warped_points", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss": [[23, 26], ["tensorflow.reduce_mean", "tensorflow.pow", "tensorflow.square", "tensorflow.square"], "function", ["None"], ["def", "charbonnier_loss", "(", "delta", ",", "alpha", "=", "0.45", ",", "epsilon", "=", "1e-3", ")", ":", "\n", "    ", "loss", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "pow", "(", "tf", ".", "square", "(", "delta", ")", "+", "tf", ".", "square", "(", "epsilon", ")", ",", "alpha", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.compute_smoothness_loss": [[31, 49], ["losses.charbonnier_loss", "losses.charbonnier_loss", "losses.charbonnier_loss", "losses.charbonnier_loss"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss"], ["def", "compute_smoothness_loss", "(", "flow", ")", ":", "\n", "    ", "flow_ucrop", "=", "flow", "[", "...", ",", "1", ":", ",", ":", "]", "\n", "flow_dcrop", "=", "flow", "[", "...", ",", ":", "-", "1", ",", ":", "]", "\n", "flow_lcrop", "=", "flow", "[", ":", ",", "1", ":", ",", "...", "]", "\n", "flow_rcrop", "=", "flow", "[", ":", ",", ":", "-", "1", ",", "...", "]", "\n", "\n", "flow_ulcrop", "=", "flow", "[", ":", ",", "1", ":", ",", "1", ":", ",", ":", "]", "\n", "flow_drcrop", "=", "flow", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", "\n", "flow_dlcrop", "=", "flow", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "\n", "flow_urcrop", "=", "flow", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "\n", "\n", "smoothness_loss", "=", "charbonnier_loss", "(", "flow_lcrop", "-", "flow_rcrop", ")", "+", "charbonnier_loss", "(", "flow_ucrop", "-", "flow_dcrop", ")", "+", "charbonnier_loss", "(", "flow_ulcrop", "-", "flow_drcrop", ")", "+", "charbonnier_loss", "(", "flow_dlcrop", "-", "flow_urcrop", ")", "\n", "smoothness_loss", "/=", "4.", "\n", "\n", "return", "smoothness_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.compute_photometric_loss": [[53, 77], ["range", "len", "tensorflow.image.resize_images", "tensorflow.image.resize_images", "losses.warp_images_with_flow", "losses.charbonnier_loss", "tensorflow.shape", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.warp_images_with_flow", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.src.losses.charbonnier_loss"], ["def", "compute_photometric_loss", "(", "prev_images", ",", "next_images", ",", "event_images", ",", "flow_dict", ")", ":", "\n", "    ", "total_photometric_loss", "=", "0.", "\n", "loss_weight_sum", "=", "0.", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "flow_dict", ")", ")", ":", "\n", "        ", "flow", "=", "flow_dict", "[", "\"flow{}\"", ".", "format", "(", "i", ")", "]", "\n", "height", "=", "tf", ".", "shape", "(", "flow", ")", "[", "1", "]", "\n", "width", "=", "tf", ".", "shape", "(", "flow", ")", "[", "2", "]", "\n", "\n", "prev_images_resize", "=", "tf", ".", "image", ".", "resize_images", "(", "prev_images", ",", "\n", "[", "height", ",", "width", "]", ",", "\n", "align_corners", "=", "True", ")", "\n", "next_images_resize", "=", "tf", ".", "image", ".", "resize_images", "(", "next_images", ",", "\n", "[", "height", ",", "width", "]", ",", "\n", "align_corners", "=", "True", ")", "\n", "\n", "next_images_warped", "=", "warp_images_with_flow", "(", "next_images_resize", ",", "flow", ")", "\n", "\n", "photometric_loss", "=", "charbonnier_loss", "(", "next_images_warped", "-", "prev_images_resize", ")", "\n", "total_photometric_loss", "+=", "photometric_loss", "\n", "loss_weight_sum", "+=", "1.", "\n", "", "total_photometric_loss", "/=", "loss_weight_sum", "\n", "\n", "return", "total_photometric_loss", "\n", "", ""]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._int64_feature": [[15, 17], ["tensorflow.train.Feature", "tensorflow.train.Int64List"], "function", ["None"], ["def", "_int64_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "int64_list", "=", "tf", ".", "train", ".", "Int64List", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature": [[18, 20], ["tensorflow.train.Feature", "tensorflow.train.BytesList"], "function", ["None"], ["", "def", "_bytes_feature", "(", "value", ")", ":", "\n", "    ", "return", "tf", ".", "train", ".", "Feature", "(", "bytes_list", "=", "tf", ".", "train", ".", "BytesList", "(", "value", "=", "[", "value", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._save_events": [[21, 104], ["numpy.zeros", "numpy.zeros", "len", "range", "len", "event_count_images.append", "numpy.zeros", "event_time_images.append", "numpy.zeros", "event_image_times.append", "numpy.array", "image_times_out.astype.astype", "numpy.array", "numpy.clip", "numpy.array", "tensorflow.train.Example", "tf_writer.write", "image_times[].to_sec", "len", "len", "t_start_ros.to_sec", "tf.train.Example.SerializeToString", "tensorflow.train.Features", "extract_rosbag_to_tf._int64_feature", "extract_rosbag_to_tf._bytes_feature", "extract_rosbag_to_tf._bytes_feature", "extract_rosbag_to_tf._bytes_feature", "extract_rosbag_to_tf._bytes_feature", "extract_rosbag_to_tf._bytes_feature", "extract_rosbag_to_tf._bytes_feature", "np.array.tobytes", "numpy.array().tobytes", "np.clip.tobytes", "image_times_out.astype.tobytes", "prefix.encode", "cam.encode", "numpy.array"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._int64_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._bytes_feature"], ["", "def", "_save_events", "(", "events", ",", "\n", "image_times", ",", "\n", "event_count_images", ",", "\n", "event_time_images", ",", "\n", "event_image_times", ",", "\n", "rows", ",", "\n", "cols", ",", "\n", "max_aug", ",", "\n", "n_skip", ",", "\n", "event_image_iter", ",", "\n", "prefix", ",", "\n", "cam", ",", "\n", "tf_writer", ",", "\n", "t_start_ros", ")", ":", "\n", "    ", "event_iter", "=", "0", "\n", "cutoff_event_iter", "=", "0", "\n", "image_iter", "=", "0", "\n", "curr_image_time", "=", "(", "image_times", "[", "image_iter", "]", "-", "t_start_ros", ")", ".", "to_sec", "(", ")", "\n", "\n", "event_count_image", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "event_time_image", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "while", "image_iter", "<", "len", "(", "image_times", ")", "and", "events", "[", "-", "1", "]", "[", "2", "]", ">", "curr_image_time", ":", "\n", "        ", "x", "=", "events", "[", "event_iter", "]", "[", "0", "]", "\n", "y", "=", "events", "[", "event_iter", "]", "[", "1", "]", "\n", "t", "=", "events", "[", "event_iter", "]", "[", "2", "]", "\n", "\n", "if", "t", ">", "curr_image_time", ":", "\n", "            ", "event_count_images", ".", "append", "(", "event_count_image", ")", "\n", "event_count_image", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "2", ")", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "event_time_images", ".", "append", "(", "event_time_image", ")", "\n", "event_time_image", "=", "np", ".", "zeros", "(", "(", "rows", ",", "cols", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "cutoff_event_iter", "=", "event_iter", "\n", "event_image_times", ".", "append", "(", "image_times", "[", "image_iter", "]", ".", "to_sec", "(", ")", ")", "\n", "image_iter", "+=", "n_skip", "\n", "if", "(", "image_iter", "<", "len", "(", "image_times", ")", ")", ":", "\n", "                ", "curr_image_time", "=", "(", "image_times", "[", "image_iter", "]", "-", "t_start_ros", ")", ".", "to_sec", "(", ")", "\n", "\n", "", "", "if", "events", "[", "event_iter", "]", "[", "3", "]", ">", "0", ":", "\n", "            ", "event_count_image", "[", "y", ",", "x", ",", "0", "]", "+=", "1", "\n", "event_time_image", "[", "y", ",", "x", ",", "0", "]", "=", "t", "\n", "", "else", ":", "\n", "            ", "event_count_image", "[", "y", ",", "x", ",", "1", "]", "+=", "1", "\n", "event_time_image", "[", "y", ",", "x", ",", "1", "]", "=", "t", "\n", "\n", "", "event_iter", "+=", "1", "\n", "\n", "", "del", "image_times", "[", ":", "image_iter", "]", "\n", "del", "events", "[", ":", "cutoff_event_iter", "]", "\n", "\n", "if", "len", "(", "event_count_images", ")", ">=", "max_aug", ":", "\n", "        ", "n_to_save", "=", "len", "(", "event_count_images", ")", "-", "max_aug", "+", "1", "\n", "for", "i", "in", "range", "(", "n_to_save", ")", ":", "\n", "            ", "image_times_out", "=", "np", ".", "array", "(", "event_image_times", "[", "i", ":", "i", "+", "max_aug", "+", "1", "]", ")", "\n", "image_times_out", "=", "image_times_out", ".", "astype", "(", "np", ".", "float64", ")", "\n", "event_time_images_np", "=", "np", ".", "array", "(", "event_time_images", "[", "i", ":", "i", "+", "max_aug", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "event_time_images_np", "-=", "image_times_out", "[", "0", "]", "-", "t_start_ros", ".", "to_sec", "(", ")", "\n", "event_time_images_np", "=", "np", ".", "clip", "(", "event_time_images_np", ",", "a_min", "=", "0", ",", "a_max", "=", "None", ")", "\n", "image_shape", "=", "np", ".", "array", "(", "event_time_images_np", ".", "shape", ",", "dtype", "=", "np", ".", "uint16", ")", "\n", "\n", "event_image_tf", "=", "tf", ".", "train", ".", "Example", "(", "features", "=", "tf", ".", "train", ".", "Features", "(", "feature", "=", "{", "\n", "'image_iter'", ":", "_int64_feature", "(", "event_image_iter", ")", ",", "\n", "'shape'", ":", "_bytes_feature", "(", "\n", "image_shape", ".", "tobytes", "(", ")", ")", ",", "\n", "'event_count_images'", ":", "_bytes_feature", "(", "\n", "np", ".", "array", "(", "event_count_images", "[", "i", ":", "i", "+", "max_aug", "]", ",", "dtype", "=", "np", ".", "uint16", ")", ".", "tobytes", "(", ")", ")", ",", "\n", "'event_time_images'", ":", "_bytes_feature", "(", "event_time_images_np", ".", "tobytes", "(", ")", ")", ",", "\n", "'image_times'", ":", "_bytes_feature", "(", "\n", "image_times_out", ".", "tobytes", "(", ")", ")", ",", "\n", "'prefix'", ":", "_bytes_feature", "(", "\n", "prefix", ".", "encode", "(", ")", ")", ",", "\n", "'cam'", ":", "_bytes_feature", "(", "\n", "cam", ".", "encode", "(", ")", ")", "\n", "}", ")", ")", "\n", "\n", "tf_writer", ".", "write", "(", "event_image_tf", ".", "SerializeToString", "(", ")", ")", "\n", "event_image_iter", "+=", "n_skip", "\n", "\n", "", "del", "event_count_images", "[", ":", "n_to_save", "]", "\n", "del", "event_time_images", "[", ":", "n_to_save", "]", "\n", "del", "event_image_times", "[", ":", "n_to_save", "]", "\n", "", "return", "event_image_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf.filter_events": [[105, 119], ["numpy.array", "numpy.argsort", "numpy.searchsorted"], "function", ["None"], ["", "def", "filter_events", "(", "events", ",", "ts", ")", ":", "\n", "    ", "r'''Removes all events with timestamp lower than the specified one\n\n    Args:\n        events (list): the list of events in form of (x, y, t, p)\n        ts (float): the timestamp to split events\n\n    Return:\n        (list): a list of events with timestamp above the threshold\n    '''", "\n", "tss", "=", "np", ".", "array", "(", "[", "e", "[", "2", "]", "for", "e", "in", "events", "]", ")", "\n", "idx_array", "=", "np", ".", "argsort", "(", "tss", ")", "# I hope it's not needed", "\n", "i", "=", "np", ".", "searchsorted", "(", "tss", "[", "idx_array", "]", ",", "ts", ")", "\n", "return", "[", "events", "[", "k", "]", "for", "k", "in", "idx_array", "[", "i", ":", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf.main": [[120, 313], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "cv_bridge.CvBridge", "print", "rosbag.Bag", "tensorflow.python_io.TFRecordWriter", "tensorflow.python_io.TFRecordWriter", "rosbag.Bag.get_start_time", "rospy.Time", "rosbag.Bag.read_messages", "tf.python_io.TFRecordWriter.close", "tf.python_io.TFRecordWriter.close", "open", "open.write", "open.close", "os.path.join", "os.path.join", "rosbag.Bag.get_end_time", "os.path.join", "rospy.Time", "rospy.Time", "print", "print", "numpy.asarray", "numpy.reshape", "print", "cv_bridge.CvBridge.imgmsg_to_cv2", "cv2.imwrite", "cv2.imwrite", "time.to_sec", "os.path.join", "left_image_times.append", "left_event_image_times.append", "extract_rosbag_to_tf.filter_events", "os.path.join", "right_image_times.append", "right_event_image_times.append", "extract_rosbag_to_tf.filter_events", "max", "t.to_sec", "time.to_sec", "time.to_sec", "extract_rosbag_to_tf._save_events", "extract_rosbag_to_tf._save_events", "filter_events.append", "filter_events.append", "len", "len", "float"], "function", ["home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf.filter_events", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf.filter_events", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._save_events", "home.repos.pwc.inspect_result.daniilidis-group_EV-FlowNet.data.extract_rosbag_to_tf._save_events"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\"Extracts grayscale and event images from a ROS bag and \"", "\n", "\"saves them as TFRecords for training in TensorFlow.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--bag\"", ",", "dest", "=", "\"bag\"", ",", "\n", "help", "=", "\"Path to ROS bag.\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--prefix\"", ",", "dest", "=", "\"prefix\"", ",", "\n", "help", "=", "\"Output file prefix.\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_folder\"", ",", "dest", "=", "\"output_folder\"", ",", "\n", "help", "=", "\"Output folder.\"", ",", "\n", "required", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_aug\"", ",", "dest", "=", "\"max_aug\"", ",", "\n", "help", "=", "\"Maximum number of images to combine for augmentation.\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "6", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_skip\"", ",", "dest", "=", "\"n_skip\"", ",", "\n", "help", "=", "\"Maximum number of images to combine for augmentation.\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ")", "\n", "parser", ".", "add_argument", "(", "\"--start_time\"", ",", "dest", "=", "\"start_time\"", ",", "\n", "help", "=", "\"Time to start in the bag.\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--end_time\"", ",", "dest", "=", "\"end_time\"", ",", "\n", "help", "=", "\"Time to end in the bag.\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "-", "1.0", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "bridge", "=", "CvBridge", "(", ")", "\n", "\n", "n_msgs", "=", "0", "\n", "left_event_image_iter", "=", "0", "\n", "right_event_image_iter", "=", "0", "\n", "left_image_iter", "=", "0", "\n", "right_image_iter", "=", "0", "\n", "first_left_image_time", "=", "-", "1", "\n", "first_right_image_time", "=", "-", "1", "\n", "\n", "left_events", "=", "[", "]", "\n", "right_events", "=", "[", "]", "\n", "left_images", "=", "[", "]", "\n", "right_images", "=", "[", "]", "\n", "left_image_times", "=", "[", "]", "\n", "right_image_times", "=", "[", "]", "\n", "left_event_count_images", "=", "[", "]", "\n", "left_event_time_images", "=", "[", "]", "\n", "left_event_image_times", "=", "[", "]", "\n", "\n", "right_event_count_images", "=", "[", "]", "\n", "right_event_time_images", "=", "[", "]", "\n", "right_event_image_times", "=", "[", "]", "\n", "\n", "cols", "=", "346", "\n", "rows", "=", "260", "\n", "print", "(", "\"Processing bag\"", ")", "\n", "bag", "=", "Bag", "(", "args", ".", "bag", ")", "\n", "\n", "left_tf_writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_folder", ",", "args", ".", "prefix", ",", "\"left_event_images.tfrecord\"", ")", ")", "\n", "right_tf_writer", "=", "tf", ".", "python_io", ".", "TFRecordWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "output_folder", ",", "args", ".", "prefix", ",", "\"right_event_images.tfrecord\"", ")", ")", "\n", "\n", "# Get actual time for the start of the bag.", "\n", "t_start", "=", "bag", ".", "get_start_time", "(", ")", "\n", "t_start_ros", "=", "rospy", ".", "Time", "(", "t_start", ")", "\n", "# Set the time at which the bag reading should end.", "\n", "if", "args", ".", "end_time", "==", "-", "1.0", ":", "\n", "        ", "t_end", "=", "bag", ".", "get_end_time", "(", ")", "\n", "", "else", ":", "\n", "        ", "t_end", "=", "t_start", "+", "args", ".", "end_time", "\n", "\n", "", "eps", "=", "0.1", "\n", "for", "topic", ",", "msg", ",", "t", "in", "bag", ".", "read_messages", "(", "\n", "topics", "=", "[", "'/davis/left/image_raw'", ",", "\n", "'/davis/right/image_raw'", ",", "\n", "'/davis/left/events'", ",", "\n", "'/davis/right/events'", "]", ",", "\n", "start_time", "=", "rospy", ".", "Time", "(", "max", "(", "args", ".", "start_time", ",", "eps", ")", "-", "eps", "+", "t_start", ")", ",", "\n", "end_time", "=", "rospy", ".", "Time", "(", "t_end", ")", ")", ":", "\n", "# Check to make sure we're working with stereo messages.", "\n", "        ", "if", "not", "(", "'left'", "in", "topic", "or", "'right'", "in", "topic", ")", ":", "\n", "            ", "print", "(", "'ERROR: topic {} does not contain left or right, is this stereo?'", "\n", "'If not, you will need to modify the topic names in the code.'", ".", "\n", "format", "(", "topic", ")", ")", "\n", "return", "\n", "\n", "# Counter for status updates.", "\n", "", "n_msgs", "+=", "1", "\n", "if", "n_msgs", "%", "500", "==", "0", ":", "\n", "            ", "print", "(", "\"Processed {} msgs, {} images, time is {}.\"", ".", "format", "(", "n_msgs", ",", "\n", "left_event_image_iter", ",", "\n", "t", ".", "to_sec", "(", ")", "-", "t_start", ")", ")", "\n", "\n", "", "isLeft", "=", "'left'", "in", "topic", "\n", "if", "'image'", "in", "topic", ":", "\n", "            ", "width", "=", "msg", ".", "width", "\n", "height", "=", "msg", ".", "height", "\n", "if", "width", "!=", "cols", "or", "height", "!=", "rows", ":", "\n", "                ", "print", "(", "\"Image dimensions are not what we expected: set: ({} {}) vs  got:({} {})\"", "\n", ".", "format", "(", "cols", ",", "rows", ",", "width", ",", "height", ")", ")", "\n", "return", "\n", "", "time", "=", "msg", ".", "header", ".", "stamp", "\n", "if", "time", ".", "to_sec", "(", ")", "-", "t_start", "<", "args", ".", "start_time", ":", "\n", "                ", "continue", "\n", "", "image", "=", "np", ".", "asarray", "(", "bridge", ".", "imgmsg_to_cv2", "(", "msg", ",", "msg", ".", "encoding", ")", ")", "\n", "image", "=", "np", ".", "reshape", "(", "image", ",", "(", "height", ",", "width", ")", ")", "\n", "\n", "if", "isLeft", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_folder", ",", "\n", "args", ".", "prefix", ",", "\n", "\"left_image{:05d}.png\"", ".", "format", "(", "left_image_iter", ")", ")", ",", "\n", "image", ")", "\n", "if", "left_image_iter", ">", "0", ":", "\n", "                    ", "left_image_times", ".", "append", "(", "time", ")", "\n", "", "else", ":", "\n", "                    ", "first_left_image_time", "=", "time", "\n", "left_event_image_times", ".", "append", "(", "time", ".", "to_sec", "(", ")", ")", "\n", "# filter events we added previously", "\n", "left_events", "=", "filter_events", "(", "left_events", ",", "left_event_image_times", "[", "-", "1", "]", "-", "t_start", ")", "\n", "", "left_image_iter", "+=", "1", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_folder", ",", "\n", "args", ".", "prefix", ",", "\n", "\"right_image{:05d}.png\"", ".", "format", "(", "right_image_iter", ")", ")", ",", "\n", "image", ")", "\n", "if", "right_image_iter", ">", "0", ":", "\n", "                    ", "right_image_times", ".", "append", "(", "time", ")", "\n", "", "else", ":", "\n", "                    ", "first_right_image_time", "=", "time", "\n", "right_event_image_times", ".", "append", "(", "time", ".", "to_sec", "(", ")", ")", "\n", "# filter events we added previously", "\n", "right_events", "=", "filter_events", "(", "right_events", ",", "right_event_image_times", "[", "-", "1", "]", "-", "t_start", ")", "\n", "\n", "", "right_image_iter", "+=", "1", "\n", "", "", "elif", "'events'", "in", "topic", "and", "msg", ".", "events", ":", "\n", "# Add events to list.", "\n", "            ", "for", "event", "in", "msg", ".", "events", ":", "\n", "                ", "ts", "=", "event", ".", "ts", "\n", "event", "=", "[", "event", ".", "x", ",", "\n", "event", ".", "y", ",", "\n", "(", "ts", "-", "t_start_ros", ")", ".", "to_sec", "(", ")", ",", "\n", "(", "float", "(", "event", ".", "polarity", ")", "-", "0.5", ")", "*", "2", "]", "\n", "if", "isLeft", ":", "\n", "# add event if it was after the first image or we haven't seen the first image", "\n", "                    ", "if", "first_left_image_time", "==", "-", "1", "or", "ts", ">", "first_left_image_time", ":", "\n", "                        ", "left_events", ".", "append", "(", "event", ")", "\n", "", "", "elif", "first_right_image_time", "==", "-", "1", "or", "ts", ">", "first_right_image_time", ":", "\n", "                    ", "right_events", ".", "append", "(", "event", ")", "\n", "", "", "if", "isLeft", ":", "\n", "                ", "if", "len", "(", "left_image_times", ")", ">=", "args", ".", "max_aug", "and", "left_events", "[", "-", "1", "]", "[", "2", "]", ">", "(", "left_image_times", "[", "args", ".", "max_aug", "-", "1", "]", "-", "t_start_ros", ")", ".", "to_sec", "(", ")", ":", "\n", "                    ", "left_event_image_iter", "=", "_save_events", "(", "left_events", ",", "\n", "left_image_times", ",", "\n", "left_event_count_images", ",", "\n", "left_event_time_images", ",", "\n", "left_event_image_times", ",", "\n", "rows", ",", "\n", "cols", ",", "\n", "args", ".", "max_aug", ",", "\n", "args", ".", "n_skip", ",", "\n", "left_event_image_iter", ",", "\n", "args", ".", "prefix", ",", "\n", "'left'", ",", "\n", "left_tf_writer", ",", "\n", "t_start_ros", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "len", "(", "right_image_times", ")", ">=", "args", ".", "max_aug", "and", "right_events", "[", "-", "1", "]", "[", "2", "]", ">", "(", "right_image_times", "[", "args", ".", "max_aug", "-", "1", "]", "-", "t_start_ros", ")", ".", "to_sec", "(", ")", ":", "\n", "                    ", "right_event_image_iter", "=", "_save_events", "(", "right_events", ",", "\n", "right_image_times", ",", "\n", "right_event_count_images", ",", "\n", "right_event_time_images", ",", "\n", "right_event_image_times", ",", "\n", "rows", ",", "\n", "cols", ",", "\n", "args", ".", "max_aug", ",", "\n", "args", ".", "n_skip", ",", "\n", "right_event_image_iter", ",", "\n", "args", ".", "prefix", ",", "\n", "'right'", ",", "\n", "right_tf_writer", ",", "\n", "t_start_ros", ")", "\n", "\n", "", "", "", "", "left_tf_writer", ".", "close", "(", ")", "\n", "right_tf_writer", ".", "close", "(", ")", "\n", "\n", "image_counter_file", "=", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_folder", ",", "args", ".", "prefix", ",", "\"n_images.txt\"", ")", ",", "'w'", ")", "\n", "image_counter_file", ".", "write", "(", "\"{} {}\"", ".", "format", "(", "left_event_image_iter", ",", "right_event_image_iter", ")", ")", "\n", "image_counter_file", ".", "close", "(", ")", "\n", "\n"]]}