{"home.repos.pwc.inspect_result.roatienza_agmax.None.dataloaders.SingleLoader.__init__": [[20, 42], ["super().__init__", "dataloaders.SingleLoader._build", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._build"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", "=", "'./data'", ",", "\n", "batch_size", "=", "128", ",", "\n", "dataset", "=", "datasets", ".", "CIFAR10", ",", "\n", "transform", "=", "{", "'train'", ":", "transforms", ".", "ToTensor", "(", ")", ",", "'test'", ":", "transforms", ".", "ToTensor", "(", ")", "}", ",", "\n", "device", "=", "None", ",", "\n", "dataset_name", "=", "\"cifar10\"", ",", "\n", "shuffle_test", "=", "False", ",", "\n", "corruption", "=", "None", ",", "\n", "num_workers", "=", "16", ")", ":", "\n", "        ", "super", "(", "SingleLoader", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "test", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "_build", "(", "root", ",", "\n", "batch_size", ",", "\n", "dataset", ",", "\n", "transform", ",", "\n", "device", ",", "\n", "dataset_name", ",", "\n", "shuffle_test", ",", "\n", "corruption", ",", "\n", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.dataloaders.SingleLoader._build": [[44, 143], ["DataLoader", "DataLoader", "str", "print", "dataset", "dataset", "dataset", "torch.utils.data.ConcatDataset", "dataset", "dataset", "os.path.join", "range", "torch.utils.data.ConcatDataset", "dataset", "dataset", "dataset", "DataLoader", "dataset", "dataset", "os.path.join", "torchvision.ImageFolder", "torchvision.ImageFolder", "corrupt_test.append", "str"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "\n", "root", ",", "\n", "batch_size", ",", "\n", "dataset", ",", "\n", "transform", ",", "\n", "device", ",", "\n", "dataset_name", ",", "\n", "shuffle_test", ",", "\n", "corruption", ",", "\n", "num_workers", ")", ":", "\n", "        ", "DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "\n", "#workers = torch.cuda.device_count() * 4", "\n", "if", "\"cuda\"", "in", "str", "(", "device", ")", ":", "\n", "            ", "print", "(", "\"num_workers: \"", ",", "num_workers", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "{", "}", "\n", "\n", "", "if", "dataset_name", "==", "\"svhn\"", "or", "dataset_name", "==", "\"svhn-core\"", ":", "\n", "            ", "x_train", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ")", "\n", "\n", "if", "dataset_name", "==", "\"svhn\"", ":", "\n", "                ", "x_extra", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'extra'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ")", "\n", "x_train", "=", "ConcatDataset", "(", "[", "x_train", ",", "x_extra", "]", ")", "\n", "\n", "", "x_test", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'test'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "", "elif", "dataset_name", "==", "\"imagenet\"", ":", "\n", "            ", "x_train", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ")", "\n", "if", "corruption", "is", "None", ":", "\n", "                ", "x_test", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'val'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "", "else", ":", "\n", "                ", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "corruption", ")", "\n", "corrupt_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                    ", "folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "str", "(", "i", ")", ")", "\n", "x_test", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "folder", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "corrupt_test", ".", "append", "(", "x_test", ")", "\n", "", "x_test", "=", "ConcatDataset", "(", "corrupt_test", ")", "\n", "\n", "", "", "elif", "dataset_name", "==", "\"speech_commands\"", ":", "\n", "            ", "x_train", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ")", "\n", "x_val", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'valid'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "x_test", "=", "dataset", "(", "root", "=", "root", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "\n", "self", ".", "val", "=", "DataLoader", "(", "x_val", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n", "#self.train = DataLoader(x_train,", "\n", "#                        shuffle=True,", "\n", "#                        batch_size=batch_size,", "\n", "#                        **kwargs)", "\n", "\n", "#self.test = DataLoader(x_test,", "\n", "#                       shuffle=False,", "\n", "#                       batch_size=batch_size,", "\n", "#                       **kwargs)", "\n", "#return", "\n", "", "else", ":", "\n", "            ", "x_train", "=", "dataset", "(", "root", "=", "root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ")", "\n", "\n", "x_test", "=", "dataset", "(", "root", "=", "root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "\n", "", "self", ".", "train", "=", "DataLoader", "(", "x_train", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "test", "=", "DataLoader", "(", "x_test", ",", "\n", "shuffle", "=", "shuffle_test", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.dataloaders.DoubleLoader.__init__": [[147, 166], ["dataloaders.SingleLoader.__init__", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", "=", "'./data'", ",", "\n", "batch_size", "=", "128", ",", "\n", "dataset", "=", "[", "None", ",", "None", "]", ",", "\n", "transform", "=", "{", "'train'", ":", "transforms", ".", "ToTensor", "(", ")", ",", "'test'", ":", "transforms", ".", "ToTensor", "(", ")", "}", ",", "\n", "device", "=", "None", ",", "\n", "dataset_name", "=", "\"cifar10\"", ",", "\n", "shuffle_test", "=", "False", ",", "\n", "corruption", "=", "None", ",", "\n", "num_workers", "=", "16", ")", ":", "\n", "        ", "super", "(", "DoubleLoader", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "dataset", "=", "dataset", ",", "\n", "transform", "=", "transform", ",", "\n", "device", "=", "device", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "shuffle_test", "=", "shuffle_test", ",", "\n", "corruption", "=", "corruption", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.dataloaders.DoubleLoader._build": [[167, 278], ["print", "DataLoader", "DataLoader", "str", "print", "torch.utils.data.ConcatDataset", "os.path.join", "range", "torch.utils.data.ConcatDataset", "DataLoader", "os.path.join", "torchvision.ImageFolder", "torchvision.ImageFolder", "corrupt_test.append", "str"], "methods", ["None"], ["", "def", "_build", "(", "self", ",", "\n", "root", ",", "\n", "batch_size", ",", "\n", "dataset", ",", "\n", "transform", ",", "\n", "device", ",", "\n", "dataset_name", ",", "\n", "shuffle_test", ",", "\n", "corruption", ",", "\n", "num_workers", ")", ":", "\n", "        ", "print", "(", "self", ".", "__class__", ".", "__name__", ")", "\n", "DataLoader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "\n", "#workers = torch.cuda.device_count() * 4", "\n", "if", "\"cuda\"", "in", "str", "(", "device", ")", ":", "\n", "            ", "print", "(", "\"num_workers: \"", ",", "num_workers", ")", "\n", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "            ", "kwargs", "=", "{", "}", "\n", "\n", "", "if", "dataset_name", "==", "\"svhn\"", "or", "dataset_name", "==", "\"svhn-core\"", ":", "\n", "            ", "x_train", "=", "dataset", "[", "0", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ",", "\n", "siamese_transform", "=", "transform", "[", "'train'", "]", ")", "\n", "\n", "if", "dataset_name", "==", "\"svhn\"", ":", "\n", "                ", "x_extra", "=", "dataset", "[", "0", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'extra'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ",", "\n", "siamese_transform", "=", "transform", "[", "'train'", "]", ")", "\n", "x_train", "=", "ConcatDataset", "(", "[", "x_train", ",", "x_extra", "]", ")", "\n", "\n", "", "x_test", "=", "dataset", "[", "1", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'test'", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "\n", "", "elif", "dataset_name", "==", "\"imagenet\"", ":", "\n", "            ", "x_train", "=", "dataset", "[", "0", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ",", "\n", "siamese_transform", "=", "transform", "[", "'train'", "]", ")", "\n", "if", "corruption", "is", "None", ":", "\n", "                ", "x_test", "=", "dataset", "[", "1", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'val'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "", "else", ":", "\n", "                ", "root", "=", "os", ".", "path", ".", "join", "(", "root", ",", "corruption", ")", "\n", "corrupt_test", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "                    ", "folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "str", "(", "i", ")", ")", "\n", "x_test", "=", "datasets", ".", "ImageFolder", "(", "root", "=", "folder", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "corrupt_test", ".", "append", "(", "x_test", ")", "\n", "", "x_test", "=", "ConcatDataset", "(", "corrupt_test", ")", "\n", "\n", "", "", "elif", "dataset_name", "==", "\"speech_commands\"", ":", "\n", "            ", "x_train", "=", "dataset", "[", "0", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ",", "\n", "siamese_transform", "=", "transform", "[", "'train'", "]", ")", "\n", "x_val", "=", "dataset", "[", "1", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'valid'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "x_test", "=", "dataset", "[", "1", "]", "(", "root", "=", "root", ",", "\n", "split", "=", "'test'", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "self", ".", "val", "=", "DataLoader", "(", "x_val", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n", "#from torch.utils.data.sampler import WeightedRandomSampler", "\n", "#weights = x_train.make_weights_for_balanced_classes()", "\n", "#sampler = WeightedRandomSampler(weights, len(weights))", "\n", "#                        sampler=sampler,", "\n", "\n", "#self.train = DataLoader(x_train,", "\n", "#                        shuffle=True,", "\n", "#                        batch_size=batch_size,", "\n", "#                        **kwargs)", "\n", "\n", "#self.test = DataLoader(x_test,", "\n", "#                       shuffle=False,", "\n", "#                       batch_size=batch_size,", "\n", "#                       **kwargs)", "\n", "\n", "#return", "\n", "", "else", ":", "\n", "            ", "x_train", "=", "dataset", "[", "0", "]", "(", "root", "=", "root", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'train'", "]", ",", "\n", "siamese_transform", "=", "transform", "[", "'train'", "]", ")", "\n", "x_test", "=", "dataset", "[", "1", "]", "(", "root", "=", "root", ",", "\n", "train", "=", "False", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transform", "[", "'test'", "]", ")", "\n", "\n", "\n", "", "self", ".", "train", "=", "DataLoader", "(", "x_train", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "test", "=", "DataLoader", "(", "x_test", ",", "\n", "shuffle", "=", "shuffle_test", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.models.QNet.__init__": [[16, 25], ["features.extractor.BaseModule.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "n_units", ",", "\n", "n_classes", ")", ":", "\n", "        ", "super", "(", "QNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", "*", "n_classes", ",", "n_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "n_units", ",", "n_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.models.QNet.forward": [[28, 31], ["models.QNet.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "zcat", ")", ":", "\n", "        ", "zzt", "=", "self", ".", "model", "(", "zcat", ")", "\n", "return", "zzt", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.models.AgMaxNet.__init__": [[34, 47], ["features.extractor.BaseModule.__init__", "models.QNet"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "backbone", ",", "\n", "n_units", ",", "\n", "n_classes", ",", "\n", "has_mi_qnet", "=", "True", ")", ":", "\n", "        ", "super", "(", "AgMaxNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "has_mi_qnet", "=", "has_mi_qnet", "\n", "\n", "if", "has_mi_qnet", ":", "\n", "            ", "self", ".", "qnet", "=", "QNet", "(", "n_units", "=", "n_units", ",", "\n", "n_classes", "=", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.models.AgMaxNet.forward": [[49, 63], ["x.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.AgMaxNet.backbone", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.AgMaxNet.qnet"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "xt", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "cat", "(", "(", "x", ",", "xt", ")", ")", "\n", "zz", "=", "self", ".", "backbone", "(", "xx", ")", "\n", "z", "=", "zz", "[", "0", ":", "size", "]", "\n", "zt", "=", "zz", "[", "size", ":", "]", "\n", "\n", "if", "not", "self", ".", "has_mi_qnet", ":", "\n", "            ", "return", "z", ",", "zt", ",", "None", "\n", "\n", "", "zcat", "=", "torch", ".", "cat", "(", "(", "z", ",", "zt", ")", ",", "dim", "=", "1", ")", "\n", "zzt", "=", "self", ".", "qnet", "(", "zcat", ")", "\n", "\n", "return", "z", ",", "zt", ",", "zzt", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.models.AgMaxNet.init_weights": [[65, 72], ["super().init_weights", "models.AgMaxNet.qnet.init_weights", "models.AgMaxNet.backbone.init_weights"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ",", "init_backbone", "=", "True", ",", "init_extractor", "=", "False", ")", ":", "\n", "        ", "super", "(", "AgMaxNet", ",", "self", ")", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "if", "not", "self", ".", "has_mi_qnet", ":", "\n", "            ", "return", "\n", "", "self", ".", "qnet", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "if", "init_backbone", ":", "\n", "            ", "self", ".", "backbone", ".", "init_weights", "(", "std", "=", "std", ",", "init_extractor", "=", "init_extractor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.main.build_train_agmax": [[22, 33], ["classifier.build_train"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.build_train"], ["def", "build_train_agmax", "(", "args", ",", "run", ",", "all_top1", ")", ":", "\n", "    ", "values", "=", "classifier", ".", "build_train", "(", "args", ",", "run", ",", "all_top1", ")", "\n", "if", "not", "args", ".", "train", ":", "\n", "        ", "return", "\n", "", "top1", ",", "top5", ",", "model", "=", "values", "\n", "if", "top1", ">", "args", ".", "best_top1", ":", "\n", "        ", "args", ".", "best_top1", "=", "top1", "\n", "args", ".", "best_top5", "=", "top5", "\n", "args", ".", "best_model", "=", "model", "\n", "\n", "", "return", "args", ",", "top1", ",", "top5", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.main.main": [[35, 150], ["utils.misc.get_args", "configs.get_backbone_config_by", "print", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "range", "print", "print", "print", "print", "configs.is_agmax", "print", "print", "print", "print", "print", "configs.is_nesterov", "print", "print", "print", "print", "print", "configs.is_cutout", "print", "configs.is_cutmix", "print", "configs.is_mixup", "print", "configs.is_auto_augment", "print", "print", "configs.get_backbone_name", "print", "main.build_train_agmax", "configs.get_lr", "configs.get_epochs", "configs.get_weight_decay", "configs.get_batch_size", "configs.get_init_backbone", "configs.get_init_extractor", "configs.get_weights_std", "configs.get_backbone_dropout", "configs.set_backbone_dropout", "configs.has_no_basic_augment", "utils.misc.AverageMeter.update", "utils.misc.AverageMeter.update", "exit", "ValueError", "exit"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_args", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_config_by", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_agmax", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_nesterov", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_cutout", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_mixup", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_auto_augment", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_name", "home.repos.pwc.inspect_result.roatienza_agmax.None.main.build_train_agmax", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_lr", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_epochs", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_weight_decay", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_batch_size", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_init_backbone", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_init_extractor", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_weights_std", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_dropout", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.set_backbone_dropout", "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.has_no_basic_augment", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_args", "(", ")", "\n", "\n", "if", "args", ".", "config", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"%s configuration:\"", "%", "args", ".", "config", ")", "\n", "args", ".", "agmax", "=", "configs", ".", "is_agmax", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tagmax:\"", ",", "args", ".", "agmax", ")", "\n", "\n", "if", "args", ".", "lr", "is", "None", ":", "\n", "            ", "args", ".", "lr", "=", "configs", ".", "get_lr", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tlr:\"", ",", "args", ".", "lr", ")", "\n", "\n", "if", "args", ".", "epochs", "is", "None", ":", "\n", "            ", "args", ".", "epochs", "=", "configs", ".", "get_epochs", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tepochs:\"", ",", "args", ".", "epochs", ")", "\n", "\n", "if", "args", ".", "weight_decay", "is", "None", ":", "\n", "            ", "args", ".", "weight_decay", "=", "configs", ".", "get_weight_decay", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tweight_decay:\"", ",", "args", ".", "weight_decay", ")", "\n", "\n", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "            ", "args", ".", "batch_size", "=", "configs", ".", "get_batch_size", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tbatch_size:\"", ",", "args", ".", "batch_size", ")", "\n", "\n", "args", ".", "nesterov", "=", "configs", ".", "is_nesterov", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tnesterov:\"", ",", "args", ".", "nesterov", ")", "\n", "\n", "if", "args", ".", "init_backbone", "is", "None", ":", "\n", "            ", "args", ".", "init_backbone", "=", "configs", ".", "get_init_backbone", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tinit backbone:\"", ",", "args", ".", "init_backbone", ")", "\n", "\n", "if", "args", ".", "init_extractor", "is", "None", ":", "\n", "            ", "args", ".", "init_extractor", "=", "configs", ".", "get_init_extractor", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tinit extractor:\"", ",", "args", ".", "init_extractor", ")", "\n", "\n", "if", "args", ".", "weights_std", "is", "None", ":", "\n", "            ", "args", ".", "weights_std", "=", "configs", ".", "get_weights_std", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tweights_std:\"", ",", "args", ".", "weights_std", ")", "\n", "\n", "if", "args", ".", "dropout", "is", "None", ":", "\n", "            ", "args", ".", "dropout", "=", "configs", ".", "get_backbone_dropout", "(", "args", ".", "config", ")", "\n", "", "else", ":", "\n", "            ", "args", ".", "config", "=", "configs", ".", "set_backbone_dropout", "(", "args", ".", "config", ",", "args", ".", "dropout", ")", "\n", "", "print", "(", "\"\\tdropout:\"", ",", "args", ".", "dropout", ")", "\n", "\n", "args", ".", "cutout", "=", "configs", ".", "is_cutout", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tcutout:\"", ",", "args", ".", "cutout", ")", "\n", "\n", "args", ".", "cutmix", "=", "configs", ".", "is_cutmix", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tcutmix:\"", ",", "args", ".", "cutmix", ")", "\n", "\n", "args", ".", "mixup", "=", "configs", ".", "is_mixup", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tmixup:\"", ",", "args", ".", "mixup", ")", "\n", "\n", "args", ".", "auto_augment", "=", "configs", ".", "is_auto_augment", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tauto_augment:\"", ",", "args", ".", "auto_augment", ")", "\n", "\n", "if", "args", ".", "no_basic_augment", "is", "None", ":", "\n", "            ", "args", ".", "no_basic_augment", "=", "configs", ".", "has_no_basic_augment", "(", "args", ".", "config", ")", "\n", "", "print", "(", "\"\\tno_basic_augment:\"", ",", "args", ".", "no_basic_augment", ")", "\n", "\n", "args", ".", "feature_extractor", "=", "configs", ".", "get_backbone_name", "(", "args", ".", "config", ")", "\n", "print", "(", "\"\\tbackbone:\"", ",", "args", ".", "feature_extractor", ")", "\n", "\n", "\n", "", "args", ".", "backbone_config", "=", "configs", ".", "get_backbone_config_by", "(", "args", ".", "feature_extractor", ")", "\n", "args", ".", "backbone_config", "[", "'dropout'", "]", "=", "args", ".", "dropout", "\n", "\n", "if", "args", ".", "n_classes", "is", "None", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "args", ".", "n_classes", "=", "cifar", ".", "SiameseCIFAR10", ".", "n_classes", "\n", "args", ".", "backbone_config", "[", "'channels'", "]", "=", "cifar", ".", "SiameseCIFAR10", ".", "n_channels", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "args", ".", "n_classes", "=", "cifar", ".", "SiameseCIFAR100", ".", "n_classes", "\n", "args", ".", "backbone_config", "[", "'channels'", "]", "=", "cifar", ".", "SiameseCIFAR100", ".", "n_channels", "\n", "", "elif", "args", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "args", ".", "n_classes", "=", "imagenet", ".", "SiameseImageNet", ".", "n_classes", "\n", "args", ".", "backbone_config", "[", "'channels'", "]", "=", "imagenet", ".", "SiameseImageNet", ".", "n_channels", "\n", "", "elif", "args", ".", "dataset", "==", "\"speech_commands\"", ":", "\n", "            ", "import", "dataset", ".", "speech_commands_dataset", "as", "speech", "\n", "args", ".", "n_classes", "=", "speech", ".", "SpeechCommandsDataset", ".", "n_classes", "\n", "args", ".", "backbone_config", "[", "'channels'", "]", "=", "speech", ".", "SpeechCommandsDataset", ".", "n_channels", "\n", "", "else", ":", "\n", "            ", "ValueError", "(", "\"Invalid number of classes\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "", "print", "(", "\"Training on %s dataset with %d classes\"", "%", "(", "args", ".", "dataset", ",", "args", ".", "n_classes", ")", ")", "\n", "#print(\"Using seed: %d \" % args.seed)", "\n", "#random.seed(args.seed)", "\n", "#np.random.seed(args.seed)", "\n", "#torch.manual_seed(args.seed)", "\n", "#torch.cuda.manual_seed(args.seed)", "\n", "\n", "all_top1", "=", "AverageMeter", "(", ")", "\n", "all_top5", "=", "AverageMeter", "(", ")", "\n", "for", "run", "in", "range", "(", "1", ",", "args", ".", "n_runs", "+", "1", ")", ":", "\n", "        ", "values", "=", "build_train_agmax", "(", "args", ",", "run", ",", "all_top1", ")", "\n", "if", "args", ".", "train", ":", "\n", "            ", "args", ",", "top1", ",", "top5", "=", "values", "\n", "all_top1", ".", "update", "(", "top1", ")", "\n", "all_top5", ".", "update", "(", "top5", ")", "\n", "", "else", ":", "\n", "            ", "exit", "(", "0", ")", "\n", "\n", "", "", "print", "(", "\"Top 1 Avg, Min, Max: \"", ",", "all_top1", ".", "avg", ",", "all_top1", ".", "min", ",", "all_top1", ".", "max", ")", "\n", "print", "(", "\"Top 5 Avg, Min, Max: \"", ",", "all_top5", ".", "avg", ",", "all_top5", ".", "min", ",", "all_top5", ".", "max", ")", "\n", "info", "=", "\"Dataset %s, Best Top 1 %0.2f%%, Best Model %s, Avg Top 1: %0.2f%%, \"", "\n", "info", "+=", "\"Min Top 1: %0.2f%%, Max Top 1: %0.2f%%\"", "\n", "print", "(", "info", "\n", "%", "(", "args", ".", "dataset", ",", "\n", "args", ".", "best_top1", ",", "\n", "args", ".", "best_model", ",", "\n", "all_top1", ".", "avg", ",", "\n", "all_top1", ".", "min", ",", "\n", "all_top1", ".", "max", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.cross_entropy_loss": [[8, 16], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "timm.loss.LabelSmoothingCrossEntropy", "torch.CrossEntropyLoss"], "function", ["None"], ["def", "cross_entropy_loss", "(", "z", ",", "zt", ",", "ytrue", ",", "label_smoothing", "=", "0", ")", ":", "\n", "    ", "zz", "=", "torch", ".", "cat", "(", "(", "z", ",", "zt", ")", ")", "\n", "yy", "=", "torch", ".", "cat", "(", "(", "ytrue", ",", "ytrue", ")", ")", "\n", "if", "label_smoothing", ">", "0", ":", "\n", "        ", "ce", "=", "LabelSmoothingCrossEntropy", "(", "label_smoothing", ")", "(", "zz", ",", "yy", ")", "\n", "", "else", ":", "\n", "        ", "ce", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "zz", ",", "yy", ")", "\n", "", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.cross_entropy": [[17, 25], ["torch.softmax", "torch.softmax", "torch.log", "torch.log", "torch.log"], "function", ["None"], ["", "def", "cross_entropy", "(", "z", ",", "zt", ")", ":", "\n", "#eps = np.finfo(float).eps", "\n", "    ", "Pz", "=", "F", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "Pzt", "=", "F", ".", "softmax", "(", "zt", ",", "dim", "=", "1", ")", "\n", "# make sure no zero for log", "\n", "#Pz  [(Pz   < eps).data] = eps", "\n", "#Pzt [(Pzt  < eps).data] = eps", "\n", "return", "-", "(", "Pz", "*", "torch", ".", "log", "(", "Pzt", ")", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.agmax_loss": [[27, 42], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.L1Loss", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "nn.L1Loss.", "loss.entropy_loss"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.None.loss.entropy_loss"], ["", "def", "agmax_loss", "(", "y", ",", "ytrue", ",", "dl_weight", "=", "1.0", ")", ":", "\n", "    ", "z", ",", "zt", ",", "zzt", "=", "y", "\n", "Pz", "=", "F", ".", "softmax", "(", "z", ",", "dim", "=", "1", ")", "\n", "Pzt", "=", "F", ".", "softmax", "(", "zt", ",", "dim", "=", "1", ")", "\n", "Pzzt", "=", "F", ".", "softmax", "(", "zzt", ",", "dim", "=", "1", ")", "\n", "\n", "dl_loss", "=", "nn", ".", "L1Loss", "(", ")", "\n", "yy", "=", "torch", ".", "cat", "(", "(", "Pz", ",", "Pzt", ")", ")", "\n", "zz", "=", "torch", ".", "cat", "(", "(", "Pzzt", ",", "Pzzt", ")", ")", "\n", "dl", "=", "dl_loss", "(", "zz", ",", "yy", ")", "\n", "dl", "*=", "dl_weight", "\n", "\n", "# -1/3*(H(z) + H(zt) + H(z, zt)), H(x) = -E[log(x)]", "\n", "entropy", "=", "entropy_loss", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", "\n", "return", "entropy", ",", "dl", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.clamp_to_eps": [[55, 63], ["numpy.finfo"], "function", ["None"], ["", "def", "clamp_to_eps", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", ":", "\n", "    ", "eps", "=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "\n", "# make sure no zero for log", "\n", "Pz", "[", "(", "Pz", "<", "eps", ")", ".", "data", "]", "=", "eps", "\n", "Pzt", "[", "(", "Pzt", "<", "eps", ")", ".", "data", "]", "=", "eps", "\n", "Pzzt", "[", "(", "Pzzt", "<", "eps", ")", ".", "data", "]", "=", "eps", "\n", "\n", "return", "Pz", ",", "Pzt", ",", "Pzzt", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.batch_probability": [[65, 76], ["Pz.sum.sum", "Pzt.sum.sum", "Pzzt.sum.sum", "loss.clamp_to_eps", "Pz.sum.sum", "Pzt.sum.sum", "Pzzt.sum.sum"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.None.loss.clamp_to_eps"], ["", "def", "batch_probability", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", ":", "\n", "    ", "Pz", "=", "Pz", ".", "sum", "(", "dim", "=", "0", ")", "\n", "Pzt", "=", "Pzt", ".", "sum", "(", "dim", "=", "0", ")", "\n", "Pzzt", "=", "Pzzt", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "Pz", "=", "Pz", "/", "Pz", ".", "sum", "(", ")", "\n", "Pzt", "=", "Pzt", "/", "Pzt", ".", "sum", "(", ")", "\n", "Pzzt", "=", "Pzzt", "/", "Pzzt", ".", "sum", "(", ")", "\n", "\n", "#return Pz, Pzt, Pzzt", "\n", "return", "clamp_to_eps", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.entropy_loss": [[79, 87], ["loss.batch_probability", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.None.loss.batch_probability"], ["", "def", "entropy_loss", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", ":", "\n", "#negative entropy loss", "\n", "    ", "Pz", ",", "Pzt", ",", "Pzzt", "=", "batch_probability", "(", "Pz", ",", "Pzt", ",", "Pzzt", ")", "\n", "entropy", "=", "(", "Pz", "*", "torch", ".", "log", "(", "Pz", ")", ")", ".", "sum", "(", ")", "\n", "entropy", "+=", "(", "Pzt", "*", "torch", ".", "log", "(", "Pzt", ")", ")", ".", "sum", "(", ")", "\n", "entropy", "+=", "(", "Pzzt", "*", "torch", ".", "log", "(", "Pzzt", ")", ")", ".", "sum", "(", ")", "\n", "entropy", "/=", "3", "\n", "return", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.backbones.Backbone.__init__": [[76, 98], ["features.extractor.BaseModule.__init__", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "feature_extractor", ",", "n_classes", ",", "pool_size", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_extractor", "=", "feature_extractor", "\n", "self", ".", "name", "=", "self", ".", "feature_extractor", ".", "name", "\n", "\n", "n_features", "=", "feature_extractor", ".", "n_features", "\n", "if", "pool_size", "==", "0", ":", "\n", "            ", "kernel_size", "=", "8", "\n", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "kernel_size", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "n_features", ",", "n_classes", ")", "\n", "", "elif", "\"LeNet\"", "in", "self", ".", "name", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "n_features", ",", "120", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "120", ",", "84", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "84", ",", "n_classes", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "pool_size", ",", "pool_size", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "n_features", "*", "pool_size", "*", "pool_size", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.backbones.Backbone.forward": [[100, 108], ["backbones.Backbone.feature_extractor", "backbones.Backbone.pool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "backbones.Backbone.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "features", "=", "self", ".", "feature_extractor", "(", "x", ")", "\n", "if", "self", ".", "classifier", "is", "None", ":", "\n", "            ", "return", "features", "\n", "", "z", "=", "self", ".", "pool", "(", "features", ")", "\n", "z", "=", "torch", ".", "flatten", "(", "z", ",", "1", ")", "\n", "output", "=", "self", ".", "classifier", "(", "z", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.backbones.Backbone.init_weights": [[110, 114], ["super().init_weights", "backbones.Backbone.feature_extractor.init_weights"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ",", "init_extractor", "=", "False", ")", ":", "\n", "        ", "super", "(", "Backbone", ",", "self", ")", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "if", "init_extractor", ":", "\n", "            ", "self", ".", "feature_extractor", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.None.backbones.get_backbone": [[41, 72], ["backbones.Backbone", "features.wide_resnet.WideResNet", "ValueError", "exit", "features.efficientnet.EfficientNetB0", "features.efficientnet.EfficientNetB1", "features.regnet.RegNetX002", "features.regnet.RegNetY004", "features.resnet.ResNet", "features.vgg.VGG", "features.lenet.LeNet", "ValueError", "exit"], "function", ["None"], ["def", "get_backbone", "(", "dataset", ",", "n_classes", ",", "pool_size", ",", "feature_extractor", ",", "backbone_config", ")", ":", "\n", "    ", "if", "\"WideResNet\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "WideResNet", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"EfficientNetB0\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "EfficientNetB0", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"EfficientNetB1\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "EfficientNetB1", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"RegNetX002\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "RegNetX002", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"RegNetY004\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "RegNetY004", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"ResNet\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "ResNet", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"VGG\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "VGG", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "elif", "\"LeNet\"", "in", "feature_extractor", ":", "\n", "        ", "feature_extractor", "=", "LeNet", "(", "backbone_config", ",", "feature_extractor", ")", "\n", "", "else", ":", "\n", "        ", "ValueError", "(", "\"Unknown feature extractor network\"", ",", "feature_extractor", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "backbone", "=", "Backbone", "(", "feature_extractor", ",", "\n", "n_classes", "=", "n_classes", ",", "\n", "pool_size", "=", "pool_size", ")", "\n", "\n", "\n", "if", "backbone", "is", "None", ":", "\n", "        ", "ValueError", "(", "\"Invalid backbone\"", ")", "\n", "exit", "(", "0", ")", "\n", "\n", "", "return", "backbone", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.__init__": [[48, 66], ["utils.misc.get_device", "super().__init__", "classifier.Classifier._build_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier._build_model"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "backbone", ",", "\n", "dataloader", ",", "\n", "device", "=", "get_device", "(", ")", ")", ":", "\n", "        ", "super", "(", "Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "backbone", "=", "backbone", "\n", "self", ".", "dataloader", "=", "dataloader", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "best_top1", "=", "0", "\n", "self", ".", "best_top5", "=", "0", "\n", "self", ".", "best_epoch", "=", "0", "\n", "self", ".", "milestones", "=", "[", "30", ",", "60", ",", "80", "]", "\n", "\n", "\n", "self", ".", "_build_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._build_model": [[68, 75], ["classifier.Classifier._build", "print", "print", "utils.misc.count_parameters"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._build", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.count_parameters"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "backbone", "\n", "if", "self", ".", "args", ".", "summary", ":", "\n", "            ", "print", "(", "self", ".", "model", ")", "\n", "param_count", "=", "count_parameters", "(", "self", ".", "model", ")", "/", "1e6", "\n", "print", "(", "\"Model parameters: %0.1fM\"", "%", "param_count", ")", "\n", "", "self", ".", "_build", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name": [[77, 106], ["None"], "methods", ["None"], ["", "def", "get_model_name", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "agmax", ":", "\n", "            ", "model_name", "=", "self", ".", "args", ".", "dataset", "+", "\"-agmax-\"", "\n", "if", "self", ".", "args", ".", "agmax_mse", ":", "\n", "                ", "model_name", "+=", "\"mse-\"", "\n", "", "elif", "self", ".", "args", ".", "agmax_kl", ":", "\n", "                ", "model_name", "+=", "\"kl-\"", "\n", "", "elif", "self", ".", "args", ".", "agmax_ce", ":", "\n", "                ", "model_name", "+=", "\"ce-\"", "\n", "", "else", ":", "\n", "                ", "model_name", "+=", "\"mi-\"", "\n", "", "", "else", ":", "\n", "            ", "model_name", "=", "self", ".", "args", ".", "dataset", "+", "\"-standard-\"", "\n", "\n", "", "model_name", "+=", "self", ".", "backbone", ".", "name", "+", "\"-\"", "\n", "if", "self", ".", "args", ".", "cutout", ":", "\n", "            ", "model_name", "+=", "\"cutout-\"", "\n", "", "if", "self", ".", "args", ".", "cutmix", ":", "\n", "            ", "model_name", "+=", "\"cutmix-\"", "\n", "", "if", "self", ".", "args", ".", "mixup", ":", "\n", "            ", "model_name", "+=", "\"mixup-\"", "\n", "", "if", "self", ".", "args", ".", "auto_augment", ":", "\n", "            ", "model_name", "+=", "\"auto_augment-\"", "\n", "", "if", "self", ".", "args", ".", "rand_augment", ":", "\n", "            ", "model_name", "+=", "\"rand_augment-\"", "\n", "", "if", "self", ".", "args", ".", "no_basic_augment", ":", "\n", "            ", "model_name", "+=", "\"no_basic_augment-\"", "\n", "\n", "", "return", "model_name", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log_loss": [[108, 125], ["os.makedirs", "classifier.Classifier.get_model_name", "os.path.join", "open", "open.close", "logs.append", "open.write", "open.write"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name"], ["", "def", "_log_loss", "(", "self", ",", "epoch", ",", "ce", ",", "agreement", ",", "dl", ")", ":", "\n", "        ", "folder", "=", "self", ".", "args", ".", "logs_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "model_name", "=", "self", ".", "get_model_name", "(", ")", "\n", "filename", "=", "model_name", "+", "\"train-loss.log\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "filename", "=", "open", "(", "path", ",", "\"a+\"", ")", "\n", "if", "epoch", "==", "1", ":", "\n", "            ", "logs", "=", "[", "\"Epoch,CE,Entropy,L1\"", "]", "\n", "logs", ".", "append", "(", "\"%d,%f,%f,%f\"", "%", "(", "epoch", ",", "ce", ",", "agreement", ",", "dl", ")", ")", "\n", "", "else", ":", "\n", "            ", "logs", "=", "[", "\"%d,%f,%f,%f\"", "%", "(", "epoch", ",", "ce", ",", "agreement", ",", "dl", ")", "]", "\n", "\n", "", "for", "log", "in", "logs", ":", "\n", "            ", "filename", ".", "write", "(", "log", ")", "\n", "filename", ".", "write", "(", "\"\\n\"", ")", "\n", "", "filename", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log_acc": [[127, 156], ["os.makedirs", "classifier.Classifier.get_model_name", "os.path.join", "open", "open.close", "logs.append", "logs.append", "open.write", "open.write", "datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name"], ["", "def", "_log_acc", "(", "self", ",", "epoch", ",", "top1", ",", "top5", ",", "is_val", "=", "False", ",", "eps", "=", "0.", ",", "val_name", "=", "None", ")", ":", "\n", "        ", "folder", "=", "self", ".", "args", ".", "logs_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "model_name", "=", "self", ".", "get_model_name", "(", ")", "\n", "if", "is_val", ":", "\n", "            ", "filename", "=", "model_name", "+", "\"val-acc.log\"", "\n", "", "elif", "eps", ">", "0", ":", "\n", "            ", "filename", "=", "model_name", "+", "\"fgsm-acc.log\"", "\n", "", "elif", "val_name", "is", "not", "None", ":", "\n", "            ", "filename", "=", "model_name", "+", "val_name", "+", "\"-acc.log\"", "\n", "", "else", ":", "\n", "            ", "filename", "=", "model_name", "+", "\"test-acc.log\"", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "filename", "=", "open", "(", "path", ",", "\"a+\"", ")", "\n", "if", "epoch", "==", "1", ":", "\n", "            ", "logs", "=", "[", "\"---------%s--------%s---------\"", "%", "(", "model_name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "]", "\n", "logs", ".", "append", "(", "\"Epoch,Top1,Top5\"", ")", "\n", "logs", ".", "append", "(", "\"%d,%f,%f\"", "%", "(", "epoch", ",", "top1", ",", "top5", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "eps", ">", "0", ":", "\n", "                ", "logs", "=", "[", "\"FGSM Attack: Epsilon %0.2f, Top-1 %f, Top-5 %f\"", "%", "(", "eps", ",", "top1", ",", "top5", ")", "]", "\n", "", "else", ":", "\n", "                ", "logs", "=", "[", "\"%d,%f,%f\"", "%", "(", "epoch", ",", "top1", ",", "top5", ")", "]", "\n", "\n", "", "", "for", "log", "in", "logs", ":", "\n", "            ", "filename", ".", "write", "(", "log", ")", "\n", "filename", ".", "write", "(", "\"\\n\"", ")", "\n", "", "filename", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log": [[159, 256], ["os.makedirs", "classifier.Classifier.get_model_name", "os.path.join", "open", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "open.close", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "open.write", "open.write", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "print", "datetime.datetime.now", "logs.append", "logs.append", "logs.append", "logs.append", "logs.append", "datetime.datetime.now", "logs.append", "logs.append", "logs.append"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name"], ["", "def", "_log", "(", "self", ",", "top1", "=", "None", ",", "top5", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "\n", "        ", "folder", "=", "self", ".", "args", ".", "logs_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "model_name", "=", "self", ".", "get_model_name", "(", ")", "\n", "if", "top1", "is", "None", ":", "\n", "            ", "filename", "=", "model_name", "+", "\"start.log\"", "\n", "", "else", ":", "\n", "            ", "filename", "=", "model_name", "+", "\"end.log\"", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "filename", "=", "open", "(", "path", ",", "\"a+\"", ")", "\n", "logs", "=", "[", "\"---------%s--------%s---------\"", "%", "(", "model_name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", "]", "\n", "logs", ".", "append", "(", "\"Device: %s\"", "%", "self", ".", "device", ")", "\n", "logs", ".", "append", "(", "\"Dataset: %s\"", "%", "self", ".", "args", ".", "dataset", ")", "\n", "logs", ".", "append", "(", "\"Number of classes: %d\"", "%", "self", ".", "args", ".", "n_classes", ")", "\n", "mi_agreement", "=", "not", "self", ".", "args", ".", "agmax_mse", "and", "not", "self", ".", "args", ".", "agmax_kl", "and", "not", "self", ".", "args", ".", "agmax_ce", "and", "self", ".", "args", ".", "agmax", "\n", "if", "mi_agreement", ":", "\n", "            ", "logs", ".", "append", "(", "\"Agreement by MI\"", ")", "\n", "logs", ".", "append", "(", "\"Q Network 1st Dense layer # units: %d\"", "%", "self", ".", "args", ".", "n_units", ")", "\n", "logs", ".", "append", "(", "\"Q Network weights std: %f\"", "%", "self", ".", "args", ".", "weights_std", ")", "\n", "logs", ".", "append", "(", "\"Init backbone: %s\"", "%", "self", ".", "args", ".", "init_backbone", ")", "\n", "logs", ".", "append", "(", "\"Init extractor: %s\"", "%", "self", ".", "args", ".", "init_extractor", ")", "\n", "", "elif", "self", ".", "args", ".", "agmax", "and", "self", ".", "args", ".", "agmax_mse", ":", "\n", "            ", "logs", ".", "append", "(", "\"Agreement by MSE\"", ")", "\n", "", "elif", "self", ".", "args", ".", "agmax", "and", "self", ".", "args", ".", "agmax_kl", ":", "\n", "            ", "logs", ".", "append", "(", "\"Agreement by KL\"", ")", "\n", "", "elif", "self", ".", "args", ".", "agmax", "and", "self", ".", "args", ".", "agmax_ce", ":", "\n", "            ", "logs", ".", "append", "(", "\"Agreement by CE\"", ")", "\n", "\n", "", "logs", ".", "append", "(", "\"Backbone: %s\"", "%", "self", ".", "backbone", ".", "name", ")", "\n", "logs", ".", "append", "(", "\"Batch size: %d\"", "%", "self", ".", "args", ".", "batch_size", ")", "\n", "if", "self", ".", "args", ".", "adam", ":", "\n", "            ", "logs", ".", "append", "(", "\"Adam optimizer\"", ")", "\n", "", "if", "self", ".", "args", ".", "rmsprop", ":", "\n", "            ", "logs", ".", "append", "(", "\"RMSprop optimizer\"", ")", "\n", "", "else", ":", "\n", "            ", "logs", ".", "append", "(", "\"SGD optimizer momentum: %f\"", "%", "self", ".", "args", ".", "momentum", ")", "\n", "logs", ".", "append", "(", "\"Nesterov: %s\"", "%", "self", ".", "args", ".", "nesterov", ")", "\n", "", "if", "self", ".", "args", ".", "multisteplr", ":", "\n", "            ", "logs", ".", "append", "(", "\"Multistep learning rate\"", ")", "\n", "logs", ".", "append", "(", "\"Milestones: %s\"", "%", "self", ".", "milestones", ")", "\n", "", "elif", "self", ".", "args", ".", "steplr", ":", "\n", "            ", "logs", ".", "append", "(", "\"Step learning rate\"", ")", "\n", "logs", ".", "append", "(", "\"Decay epochs: %0.2f\"", "%", "self", ".", "args", ".", "decay_epochs", ")", "\n", "logs", ".", "append", "(", "\"Decay rate: %0.2f\"", "%", "self", ".", "args", ".", "decay_rate", ")", "\n", "logs", ".", "append", "(", "\"Warmup lr: %f\"", "%", "self", ".", "args", ".", "warmup_lr", ")", "\n", "logs", ".", "append", "(", "\"Warmup epochs: %f\"", "%", "self", ".", "args", ".", "warmup_epochs", ")", "\n", "", "elif", "self", ".", "args", ".", "cosinelr", ":", "\n", "            ", "logs", ".", "append", "(", "\"Cosine learning rate decay with warmup\"", ")", "\n", "logs", ".", "append", "(", "\"Warmup lr: %f\"", "%", "self", ".", "args", ".", "warmup_lr", ")", "\n", "logs", ".", "append", "(", "\"Warmup epochs: %f\"", "%", "self", ".", "args", ".", "warmup_epochs", ")", "\n", "logs", ".", "append", "(", "\"Cycle limit: %d\"", "%", "self", ".", "args", ".", "cycle_limit", ")", "\n", "", "elif", "self", ".", "args", ".", "plateau", ":", "\n", "            ", "logs", ".", "append", "(", "\"Reduce on plataeu\"", ")", "\n", "", "else", ":", "\n", "            ", "logs", ".", "append", "(", "\"Cosine learning rate decay\"", ")", "\n", "", "logs", ".", "append", "(", "\"Weight decay: %f\"", "%", "self", ".", "args", ".", "weight_decay", ")", "\n", "logs", ".", "append", "(", "\"LR: %f\"", "%", "self", ".", "args", ".", "lr", ")", "\n", "logs", ".", "append", "(", "\"Epochs: %d\"", "%", "self", ".", "args", ".", "epochs", ")", "\n", "logs", ".", "append", "(", "\"Dropout: %f\"", "%", "self", ".", "args", ".", "dropout", ")", "\n", "logs", ".", "append", "(", "\"Rand Augment: %s, Auto Augment: %s, No Basic Augment: %s, CutOut: %s, CutMix: %s, MixUp: %s, AgMax: %s, KL: %s, MSE: %s, CE: %s\"", "%", "(", "\n", "self", ".", "args", ".", "rand_augment", ",", "\n", "self", ".", "args", ".", "auto_augment", ",", "\n", "self", ".", "args", ".", "no_basic_augment", ",", "\n", "self", ".", "args", ".", "cutout", ",", "\n", "self", ".", "args", ".", "cutmix", ",", "\n", "self", ".", "args", ".", "mixup", ",", "\n", "self", ".", "args", ".", "agmax", ",", "\n", "self", ".", "args", ".", "agmax_kl", ",", "\n", "self", ".", "args", ".", "agmax_mse", ",", "\n", "self", ".", "args", ".", "agmax_ce", ")", ")", "\n", "if", "self", ".", "args", ".", "rand_augment", ":", "\n", "            ", "logs", ".", "append", "(", "\"RandAugment Mag: %s\"", "%", "self", ".", "args", ".", "rand_augment_mag", ")", "\n", "", "if", "self", ".", "args", ".", "cutmix", ":", "\n", "            ", "logs", ".", "append", "(", "\"CutMix Beta: %s\"", "%", "self", ".", "args", ".", "beta", ")", "\n", "logs", ".", "append", "(", "\"CutMix Probability: %s\"", "%", "self", ".", "args", ".", "cutmix_prob", ")", "\n", "", "if", "self", ".", "args", ".", "mixup", ":", "\n", "            ", "logs", ".", "append", "(", "\"MixUp Alpha: %s\"", "%", "self", ".", "args", ".", "alpha", ")", "\n", "", "if", "mi_agreement", ":", "\n", "            ", "logs", ".", "append", "(", "\"DL Weight: %f\"", "%", "self", ".", "args", ".", "dl_weight", ")", "\n", "logs", ".", "append", "(", "\"DL: %s\"", "%", "self", ".", "args", ".", "dl", ")", "\n", "", "if", "top1", "is", "not", "None", ":", "\n", "            ", "logs", ".", "append", "(", "\"Best top 1 accuracy: %f\"", "%", "top1", ")", "\n", "", "if", "top5", "is", "not", "None", ":", "\n", "            ", "logs", ".", "append", "(", "\"Best top 5 accuracy: %f\"", "%", "top5", ")", "\n", "\n", "", "logs", ".", "append", "(", "\"---------%s--------%s---------\"", "%", "(", "model_name", ",", "datetime", ".", "datetime", ".", "now", "(", ")", ")", ")", "\n", "\n", "for", "log", "in", "logs", ":", "\n", "            ", "filename", ".", "write", "(", "log", ")", "\n", "filename", ".", "write", "(", "\"\\n\"", ")", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "log", ")", "\n", "", "", "filename", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.assign_lr_scheduler": [[258, 290], ["torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "timm.scheduler.StepLRScheduler", "timm.scheduler.CosineLRScheduler", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.ReduceLROnPlateau", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR"], "methods", ["None"], ["", "def", "assign_lr_scheduler", "(", "self", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "multisteplr", ":", "\n", "            ", "if", "self", ".", "args", ".", "epochs", "<=", "30", ":", "\n", "                ", "self", ".", "milestones", "=", "[", "10", ",", "20", ",", "30", "]", "\n", "", "elif", "self", ".", "args", ".", "epochs", "<=", "60", ":", "\n", "                ", "self", ".", "milestones", "=", "[", "15", ",", "30", ",", "40", "]", "\n", "", "elif", "self", ".", "args", ".", "epochs", "<=", "120", ":", "\n", "                ", "self", ".", "milestones", "=", "[", "30", ",", "60", ",", "80", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "milestones", "=", "[", "75", ",", "150", ",", "225", "]", "\n", "", "self", ".", "scheduler", "=", "MultiStepLR", "(", "self", ".", "optimizer", ",", "milestones", "=", "self", ".", "milestones", ",", "gamma", "=", "0.1", ",", "last_epoch", "=", "last_epoch", ")", "\n", "", "elif", "self", ".", "args", ".", "steplr", ":", "\n", "            ", "self", ".", "scheduler", "=", "StepLRScheduler", "(", "self", ".", "optimizer", ",", "\n", "decay_t", "=", "self", ".", "args", ".", "decay_epochs", ",", "\n", "decay_rate", "=", "self", ".", "args", ".", "decay_rate", ",", "\n", "warmup_lr_init", "=", "self", ".", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "self", ".", "args", ".", "warmup_epochs", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "cosinelr", ":", "\n", "            ", "self", ".", "scheduler", "=", "CosineLRScheduler", "(", "self", ".", "optimizer", ",", "\n", "t_initial", "=", "self", ".", "args", ".", "epochs", ",", "\n", "#decay_t=self.args.decay_epochs,", "\n", "#decay_rate=self.args.decay_rate,", "\n", "cycle_limit", "=", "self", ".", "args", ".", "cycle_limit", ",", "\n", "warmup_prefix", "=", "True", ",", "\n", "warmup_lr_init", "=", "self", ".", "args", ".", "warmup_lr", ",", "\n", "warmup_t", "=", "self", ".", "args", ".", "warmup_epochs", ")", "\n", "\n", "", "elif", "self", ".", "args", ".", "plateau", ":", "\n", "            ", "self", ".", "scheduler", "=", "ReduceLROnPlateau", "(", "self", ".", "optimizer", ",", "patience", "=", "5", ",", "factor", "=", "0.1", ",", "verbose", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scheduler", "=", "CosineAnnealingLR", "(", "self", ".", "optimizer", ",", "T_max", "=", "self", ".", "args", ".", "epochs", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._build": [[292, 327], ["classifier.Classifier.model.to", "classifier.Classifier.assign_lr_scheduler", "classifier.Classifier._log", "classifier.Classifier.model.init_weights", "str", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "print", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "classifier.Classifier.model.parameters", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "classifier.Classifier.model.parameters", "classifier.Classifier.model.parameters"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.assign_lr_scheduler", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights"], ["", "", "def", "_build", "(", "self", ",", "init_weights", "=", "False", ")", ":", "\n", "        ", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# init Q net of AgMax", "\n", "if", "init_weights", "and", "self", ".", "args", ".", "weights_std", ">", "0", ":", "\n", "            ", "self", ".", "model", ".", "init_weights", "(", "std", "=", "self", ".", "args", ".", "weights_std", ",", "\n", "init_backbone", "=", "self", ".", "args", ".", "init_backbone", ",", "\n", "init_extractor", "=", "self", ".", "args", ".", "init_extractor", ")", "\n", "\n", "", "if", "\"cuda\"", "in", "str", "(", "self", ".", "device", ")", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ")", "\n", "print", "(", "\"Data parallel:\"", ",", "self", ".", "device", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "if", "self", ".", "args", ".", "adam", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "", "elif", "self", ".", "args", ".", "rmsprop", ":", "\n", "# decay (alpha or smoothing) 0.9, momentum 0.9, ", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "momentum", "=", "0.9", ",", "\n", "eps", "=", "0.001", ",", "\n", "alpha", "=", "0.9", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "self", ".", "args", ".", "lr", ",", "\n", "momentum", "=", "self", ".", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "self", ".", "args", ".", "weight_decay", ",", "\n", "nesterov", "=", "self", ".", "args", ".", "nesterov", ")", "\n", "", "self", ".", "assign_lr_scheduler", "(", ")", "\n", "self", ".", "_log", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.prepare_train": [[331, 345], ["classifier.Classifier.model.train", "print", "print", "os.getpid", "os.getpid"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier.train"], ["", "def", "prepare_train", "(", "self", ",", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ")", ":", "\n", "        ", "best_model", "=", "\"None\"", "if", "best_model", "is", "None", "else", "best_model", "\n", "info", "=", "\"\\nRun %d(%d), \"", "\n", "info", "+=", "\"Epoch %d(%d), PID %d, \"", "\n", "info", "+=", "\"Dataset: %s, Best Top 1: %0.2f%%, Best Top 5: %0.2f%% Best Model: %s\"", "\n", "if", "run", ">", "1", ":", "\n", "            ", "info", "+=", "\", Avg Top 1: %0.2f%%, Min Top 1: %0.2f%%, Max Top 1: %0.2f%%\"", "\n", "print", "(", "info", "%", "(", "run", ",", "self", ".", "args", ".", "n_runs", ",", "epoch", ",", "self", ".", "args", ".", "epochs", ",", "\n", "os", ".", "getpid", "(", ")", ",", "self", ".", "args", ".", "dataset", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "\n", "all_top1", ".", "avg", ",", "all_top1", ".", "min", ",", "all_top1", ".", "max", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "info", "%", "(", "run", ",", "self", ".", "args", ".", "n_runs", ",", "epoch", ",", "self", ".", "args", ".", "epochs", ",", "\n", "os", ".", "getpid", "(", ")", ",", "self", ".", "args", ".", "dataset", ",", "best_top1", ",", "best_top5", ",", "best_model", ")", ")", "\n", "", "self", ".", "model", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.train": [[347, 413], ["classifier.Classifier.prepare_train", "utils.misc.AverageMeter", "enumerate", "classifier.Classifier.scheduler.get_epoch_values", "timm.loss.LabelSmoothingCrossEntropy", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "image.to", "target.to.to.to", "classifier.Classifier.model", "classifier.Classifier.optimizer.zero_grad", "nn.CrossEntropyLoss.backward", "classifier.Classifier.optimizer.step", "utils.misc.AverageMeter.update", "classifier.Classifier.max", "target.to.to.size", "utils.ui.progress_bar", "classifier.Classifier.scheduler.get_last_lr", "dataset.auto_augment.cutmix", "dataset.auto_augment.cutmix", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.float().mean().item", "predicted.eq().sum().item", "len", "dataset.auto_augment.mixup", "dataset.auto_augment.mixup", "numpy.random.rand", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "nn.CrossEntropyLoss.float().mean", "predicted.eq().sum().item", "predicted.eq().sum().item", "predicted.eq().sum", "nn.CrossEntropyLoss.float", "predicted.eq().sum", "predicted.eq().sum", "predicted.eq", "predicted.eq", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.prepare_train", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup"], ["", "def", "train", "(", "self", ",", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ",", "label_smoothing", "=", "0", ")", ":", "\n", "        ", "self", ".", "prepare_train", "(", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ")", "\n", "if", "self", ".", "args", ".", "steplr", "or", "self", ".", "args", ".", "cosinelr", ":", "\n", "            ", "lr", "=", "self", ".", "scheduler", ".", "get_epoch_values", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "[", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "]", "if", "self", ".", "args", ".", "plateau", "else", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "\n", "", "lr", "=", "lr", "[", "0", "]", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "\n", "if", "label_smoothing", ">", "0", ":", "\n", "            ", "ce_loss", "=", "LabelSmoothingCrossEntropy", "(", "label_smoothing", ")", "\n", "", "else", ":", "\n", "            ", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ".", "train", ")", ":", "\n", "            ", "image", ",", "target", "=", "data", "\n", "x", "=", "image", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "is_cutmix", "=", "self", ".", "args", ".", "cutmix", "and", "(", "np", ".", "random", ".", "rand", "(", "1", ")", "[", "0", "]", "<", "self", ".", "args", ".", "cutmix_prob", ")", "\n", "is_mixup", "=", "self", ".", "args", ".", "mixup", "\n", "if", "is_cutmix", ":", "\n", "                ", "x", ",", "target_a", ",", "target_b", ",", "lam", "=", "cutmix", "(", "x", ",", "\n", "target", "=", "target", ",", "\n", "beta", "=", "self", ".", "args", ".", "beta", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "", "elif", "is_mixup", ":", "\n", "                ", "x", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup", "(", "x", ",", "\n", "target", "=", "target", ",", "\n", "alpha", "=", "self", ".", "args", ".", "alpha", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "\n", "", "y", "=", "self", ".", "model", "(", "x", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "is_cutmix", "or", "is_mixup", ":", "\n", "                ", "loss", "=", "ce_loss", "(", "y", ",", "target_a", ")", "*", "lam", "+", "ce_loss", "(", "y", ",", "target_b", ")", "*", "(", "1.", "-", "lam", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "ce_loss", "(", "y", ",", "target", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "_", ",", "predicted", "=", "y", ".", "max", "(", "1", ")", "\n", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "if", "is_mixup", ":", "\n", "                ", "correct", "+=", "(", "lam", "*", "predicted", ".", "eq", "(", "target_a", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "+", "(", "1", "-", "lam", ")", "*", "predicted", ".", "eq", "(", "target_b", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "acc", "=", "correct", "*", "100.", "/", "total", "\n", "\n", "if", "label_smoothing", ">", "0", ":", "\n", "                ", "ce_name", "=", "\"Smooth CE\"", "\n", "", "else", ":", "\n", "                ", "ce_name", "=", "\"CE\"", "\n", "", "progress_bar", "(", "i", ",", "\n", "len", "(", "self", ".", "dataloader", ".", "train", ")", ",", "\n", "'%s: %.4f | Top 1 Acc: %0.2f%% | LR: %.2e'", "\n", "%", "(", "ce_name", ",", "losses", ".", "avg", ",", "acc", ",", "lr", ")", ")", "\n", "\n", "", "return", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval": [[415, 471], ["classifier.Classifier.backbone.eval", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "classifier.Classifier._log_acc", "x.to.to.to", "target.to.to.to", "classifier.Classifier.backbone", "utils.metrics.accuracy", "utils.misc.AverageMeter.update", "utils.misc.AverageMeter.update", "utils.ui.progress_bar", "print", "utils.misc.AverageMeter.avg.float().item", "utils.misc.AverageMeter.avg.float().item", "print", "os.makedirs", "classifier.Classifier.get_model_name", "str", "os.path.join", "classifier.Classifier.save_checkpoint", "classifier.Classifier.save_checkpoint", "utils.misc.AverageMeter.avg.float().item", "utils.misc.AverageMeter.avg.float().item", "x.to.to.size", "x.to.to.size", "len", "round", "utils.misc.AverageMeter.avg.float", "utils.misc.AverageMeter.avg.float", "utils.misc.AverageMeter.avg.float", "utils.misc.AverageMeter.avg.float", "str"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log_acc", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.accuracy", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.save_checkpoint", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.save_checkpoint"], ["", "def", "eval", "(", "self", ",", "epoch", "=", "0", ",", "is_val", "=", "False", ",", "val_name", "=", "None", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "extra", "=", "\" with AgMax\"", "if", "self", ".", "args", ".", "agmax", "else", "\"\"", "\n", "if", "is_val", ":", "\n", "            ", "loader", "=", "self", ".", "dataloader", ".", "val", "\n", "dset", "=", "\"val\"", "\n", "", "else", ":", "\n", "            ", "loader", "=", "self", ".", "dataloader", ".", "test", "\n", "dset", "=", "\"test\"", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "                ", "x", ",", "target", "=", "data", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "y", "=", "self", ".", "backbone", "(", "x", ")", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "y", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "progress_bar", "(", "i", ",", "\n", "len", "(", "self", ".", "dataloader", ".", "test", ")", ",", "\n", "'%s%s %s %s accuracy: Top 1: %0.2f%%, Top 5: %0.2f%%'", "\n", "%", "(", "self", ".", "backbone", ".", "name", ",", "extra", ",", "self", ".", "args", ".", "dataset", ",", "dset", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n", "", "if", "self", ".", "best_top1", ">", "0", "and", "not", "is_val", ":", "\n", "                ", "info", "=", "\"Epoch %d top 1 accuracy: %0.2f%%\"", "\n", "info", "+=", "\", Old best top 1 accuracy: %0.2f%% at epoch %d\"", "\n", "data", "=", "(", "epoch", ",", "top1", ".", "avg", ",", "self", ".", "best_top1", ",", "self", ".", "best_epoch", ")", "\n", "print", "(", "info", "%", "data", ")", "\n", "\n", "", "if", "top1", ".", "avg", ">", "self", ".", "best_top1", "and", "not", "is_val", ":", "\n", "                ", "self", ".", "best_top1", "=", "top1", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "best_top5", "=", "top5", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "best_epoch", "=", "epoch", "\n", "info", "=", "\"New best top1: %0.2f%%, top5: %0.2f%%\"", "\n", "print", "(", "info", "%", "(", "self", ".", "best_top1", ",", "self", ".", "best_top5", ")", ")", "\n", "folder", "=", "self", ".", "args", ".", "weights_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "self", ".", "best_model", "=", "self", ".", "get_model_name", "(", ")", "\n", "self", ".", "best_model", "+=", "str", "(", "round", "(", "self", ".", "best_top1", ",", "2", ")", ")", "\n", "if", "self", ".", "args", ".", "agmax", "and", "not", "(", "self", ".", "args", ".", "agmax_mse", "or", "self", ".", "args", ".", "agmax_kl", "or", "self", ".", "args", ".", "agmax_ce", ")", ":", "\n", "                    ", "self", ".", "best_model", "+=", "\"-mlp-\"", "+", "str", "(", "self", ".", "args", ".", "n_units", ")", "+", "\".pth\"", "\n", "", "else", ":", "\n", "                    ", "self", ".", "best_model", "+=", "\".pth\"", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "self", ".", "best_model", ")", "\n", "self", ".", "save_checkpoint", "(", "epoch", ",", "path", "=", "path", ",", "is_best", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "save", ":", "\n", "                ", "self", ".", "save_checkpoint", "(", "epoch", ")", "\n", "\n", "", "self", ".", "_log_acc", "(", "epoch", ",", "top1", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", ",", "top5", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", ",", "is_val", "=", "is_val", ",", "val_name", "=", "val_name", ")", "\n", "\n", "", "return", "self", ".", "best_top1", ",", "self", ".", "best_top5", ",", "self", ".", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval_robustness": [[473, 537], ["classifier.Classifier.backbone.eval", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "enumerate", "classifier.Classifier._log_acc", "x.to.to.to", "target.to.to.to", "classifier.Classifier.backbone", "classifier.Classifier.backbone.zero_grad", "loss.backward", "utils.misc.fgsm_attack", "classifier.Classifier.backbone", "utils.metrics.accuracy", "utils.misc.AverageMeter.update", "utils.misc.AverageMeter.update", "utils.ui.progress_bar", "utils.misc.AverageMeter.avg.float().item", "utils.misc.AverageMeter.avg.float().item", "classifier.Classifier.max", "init_pred.item", "target.to.to.item", "utils.metrics.accuracy", "utils.misc.AverageMeter.update", "utils.misc.AverageMeter.update", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "x.to.to.size", "x.to.to.size", "len", "x.to.to.size", "x.to.to.size", "utils.misc.AverageMeter.avg.float", "utils.misc.AverageMeter.avg.float"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log_acc", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.fgsm_attack", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.accuracy", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.accuracy", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update"], ["", "def", "eval_robustness", "(", "self", ",", "epsilon", ",", "epoch", "=", "0", ",", "is_val", "=", "False", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "eval", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "extra", "=", "\" with AgMax\"", "if", "self", ".", "args", ".", "agmax", "else", "\"\"", "\n", "\n", "if", "is_val", ":", "\n", "            ", "loader", "=", "self", ".", "dataloader", ".", "val", "\n", "dset", "=", "\"val\"", "\n", "", "else", ":", "\n", "            ", "loader", "=", "self", ".", "dataloader", ".", "test", "\n", "dset", "=", "\"test\"", "\n", "\n", "# make sure batch size is 1", "\n", "", "for", "i", ",", "data", "in", "enumerate", "(", "loader", ")", ":", "\n", "            ", "x", ",", "target", "=", "data", "\n", "x", "=", "x", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Set requires_grad attribute of tensor. Important for Attack", "\n", "x", ".", "requires_grad", "=", "True", "\n", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Forward pass the data through the model", "\n", "y", "=", "self", ".", "backbone", "(", "x", ")", "\n", "init_pred", "=", "y", ".", "max", "(", "1", ",", "keepdim", "=", "True", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "\n", "# If the initial prediction is wrong, dont bother attacking, just move on", "\n", "if", "init_pred", ".", "item", "(", ")", "!=", "target", ".", "item", "(", ")", ":", "\n", "                ", "acc1", ",", "acc5", "=", "accuracy", "(", "y", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "continue", "\n", "\n", "# Calculate the loss", "\n", "", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "y", ",", "target", ")", "\n", "\n", "# Zero all existing gradients", "\n", "self", ".", "backbone", ".", "zero_grad", "(", ")", "\n", "\n", "# Calculate gradients of model in backward pass", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# Collect datagrad", "\n", "data_grad", "=", "x", ".", "grad", ".", "data", "\n", "\n", "# Call FGSM Attack", "\n", "perturbed_data", "=", "fgsm_attack", "(", "x", ",", "epsilon", ",", "data_grad", ")", "\n", "# Re-classify the perturbed image", "\n", "y", "=", "self", ".", "backbone", "(", "perturbed_data", ")", "\n", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "y", ",", "target", ",", "(", "1", ",", "5", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "x", ".", "size", "(", "0", ")", ")", "\n", "\n", "progress_bar", "(", "i", ",", "\n", "len", "(", "self", ".", "dataloader", ".", "test", ")", ",", "\n", "'%s%s %s %s accuracy: Eps: %0.2f, Top 1: %0.4f%%, Top 5: %0.4f%%'", "\n", "%", "(", "self", ".", "backbone", ".", "name", ",", "extra", ",", "self", ".", "args", ".", "dataset", ",", "dset", ",", "epsilon", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ")", "\n", "\n", "\n", "", "self", ".", "_log_acc", "(", "epoch", ",", "top1", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", ",", "top5", ".", "avg", ".", "float", "(", ")", ".", "item", "(", ")", ",", "is_val", "=", "is_val", ",", "eps", "=", "epsilon", ")", "\n", "\n", "return", "self", ".", "best_top1", ",", "self", ".", "best_top5", ",", "self", ".", "best_model", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.save_checkpoint": [[539, 557], ["print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.makedirs", "os.path.join", "classifier.Classifier.model.state_dict", "classifier.Classifier.optimizer.state_dict", "classifier.Classifier.scheduler.state_dict", "str", "classifier.Classifier.get_model_name"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name"], ["", "def", "save_checkpoint", "(", "self", ",", "epoch", ",", "path", "=", "None", ",", "is_best", "=", "False", ")", ":", "\n", "        ", "if", "not", "is_best", ":", "\n", "            ", "folder", "=", "self", ".", "args", ".", "checkpoints_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "self", ".", "get_model_name", "(", ")", "+", "\"epoch-\"", "+", "str", "(", "epoch", ")", "+", "\".pth\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "\n", "", "print", "(", "\"Saving checkpoint ... \"", ",", "path", ")", "\n", "checkpoint", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_top1'", ":", "self", ".", "best_top1", ",", "\n", "'best_top5'", ":", "self", ".", "best_top5", ",", "\n", "'best_epoch'", ":", "self", ".", "best_epoch", ",", "\n", "'best_model'", ":", "self", ".", "best_model", ",", "\n", "'model_state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler_state_dict'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "torch", ".", "save", "(", "checkpoint", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier.__init__": [[561, 570], ["utils.misc.get_device", "classifier.Classifier.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "args", ",", "\n", "backbone", ",", "\n", "dataloader", ",", "\n", "device", "=", "get_device", "(", ")", ")", ":", "\n", "        ", "super", "(", "AgMaxClassifier", ",", "self", ")", ".", "__init__", "(", "args", ",", "\n", "backbone", ",", "\n", "dataloader", ",", "\n", "device", "=", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier._build_model": [[571, 606], ["models.AgMaxNet().to", "classifier.AgMaxClassifier._build", "int", "print", "print", "print", "math.log10", "models.AgMaxNet", "utils.misc.count_parameters", "utils.misc.count_parameters", "print", "utils.misc.count_parameters"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._build", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.count_parameters", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.count_parameters", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.count_parameters"], ["", "def", "_build_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "n_units", "==", "0", ":", "\n", "            ", "factor", "=", "int", "(", "math", ".", "log10", "(", "self", ".", "args", ".", "n_classes", ")", ")", "\n", "factor", "=", "2", "**", "factor", "if", "factor", ">", "1", "else", "1", "\n", "self", ".", "args", ".", "n_units", "=", "128", "*", "factor", "\n", "if", "self", ".", "args", ".", "n_classes", ">=", "1000", ":", "\n", "# x2 for 2048, x4 for 4096", "\n", "#self.args.n_units *= 2", "\n", "                ", "self", ".", "args", ".", "n_units", "*=", "4", "\n", "\n", "", "", "self", ".", "not_mi", "=", "self", ".", "args", ".", "agmax_mse", "or", "self", ".", "args", ".", "agmax_kl", "or", "self", ".", "args", ".", "agmax_ce", "\n", "if", "self", ".", "not_mi", ":", "\n", "            ", "has_mi_qnet", "=", "False", "\n", "", "else", ":", "\n", "            ", "has_mi_qnet", "=", "True", "\n", "", "self", ".", "model", "=", "models", ".", "AgMaxNet", "(", "backbone", "=", "self", ".", "backbone", ",", "\n", "n_units", "=", "self", ".", "args", ".", "n_units", ",", "\n", "n_classes", "=", "self", ".", "args", ".", "n_classes", ",", "\n", "has_mi_qnet", "=", "has_mi_qnet", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "args", ".", "summary", ":", "\n", "            ", "print", "(", "self", ".", "model", ")", "\n", "param_count", "=", "count_parameters", "(", "self", ".", "model", ")", "/", "1e6", "\n", "print", "(", "\"Model parameters: %0.1fM\"", "%", "param_count", ")", "\n", "param_count", "=", "count_parameters", "(", "self", ".", "model", ".", "backbone", ")", "/", "1e6", "\n", "print", "(", "\"Backbone parameters: %0.1fM\"", "%", "param_count", ")", "\n", "if", "self", ".", "model", ".", "has_mi_qnet", ":", "\n", "                ", "param_count", "=", "count_parameters", "(", "self", ".", "model", ".", "qnet", ")", "/", "1e6", "\n", "print", "(", "\"QNet parameters: %0.1fM\"", "%", "param_count", ")", "\n", "\n", "\n", "", "", "init_weights", "=", "True", "if", "(", "self", ".", "args", ".", "init_backbone", "and", "self", ".", "args", ".", "init_extractor", ")", "else", "False", "\n", "#if self.args.init_backbone and self.args.init_extractor:", "\n", "#    init_weights = False", "\n", "\n", "self", ".", "_build", "(", "init_weights", "=", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier.train": [[608, 724], ["classifier.AgMaxClassifier.prepare_train", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "utils.misc.AverageMeter", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "enumerate", "classifier.AgMaxClassifier._log_loss", "classifier.AgMaxClassifier.scheduler.get_epoch_values", "image[].to", "image[].to", "target.to.to.to", "classifier.AgMaxClassifier.model", "classifier.AgMaxClassifier.optimizer.zero_grad", "loss.backward", "classifier.AgMaxClassifier.optimizer.step", "utils.misc.AverageMeter.update", "utils.misc.AverageMeter.update", "z.max", "target.to.to.size", "classifier.AgMaxClassifier.scheduler.get_last_lr", "dataset.auto_augment.cutmix", "dataset.auto_augment.cutmix", "dataset.auto_augment.cutmix", "dataset.auto_augment.cutmix", "loss.cross_entropy_loss", "classifier.AgMaxClassifier.scheduler.step", "classifier.AgMaxClassifier.scheduler.get_epoch_values", "loss.cross_entropy_loss.float().mean().item", "loss.cross_entropy.float().mean().item", "utils.misc.AverageMeter.update", "predicted.eq().sum().item", "utils.ui.progress_bar", "utils.ui.progress_bar", "dataset.auto_augment.mixup", "dataset.auto_augment.mixup", "dataset.auto_augment.mixup", "dataset.auto_augment.mixup", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "dl.float().mean().item", "len", "len", "numpy.random.rand", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "loss.cross_entropy", "loss.agmax_loss", "loss.cross_entropy_loss.float().mean", "loss.cross_entropy.float().mean", "predicted.eq().sum().item", "predicted.eq().sum().item", "predicted.eq().sum", "len", "dl.float().mean", "loss.cross_entropy_loss.float", "loss.cross_entropy.float", "predicted.eq().sum", "predicted.eq().sum", "predicted.eq", "dl.float", "predicted.eq", "predicted.eq"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.prepare_train", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log_loss", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix", "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.cross_entropy_loss", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup", "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.cross_entropy", "home.repos.pwc.inspect_result.roatienza_agmax.None.loss.agmax_loss"], ["", "def", "train", "(", "self", ",", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ",", "label_smoothing", "=", "0", ")", ":", "\n", "        ", "self", ".", "prepare_train", "(", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ")", "\n", "if", "self", ".", "args", ".", "steplr", "or", "self", ".", "args", ".", "cosinelr", ":", "\n", "            ", "lr", "=", "self", ".", "scheduler", ".", "get_epoch_values", "(", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "lr", "=", "[", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "]", "if", "self", ".", "args", ".", "plateau", "else", "self", ".", "scheduler", ".", "get_last_lr", "(", ")", "\n", "", "lr", "=", "lr", "[", "0", "]", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "agreement_losses", "=", "AverageMeter", "(", ")", "\n", "dl_losses", "=", "AverageMeter", "(", ")", "\n", "ce_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "ce_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "self", ".", "dataloader", ".", "train", ")", ":", "\n", "            ", "image", ",", "target", "=", "data", "\n", "x", "=", "image", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "xt", "=", "image", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "is_cutmix", "=", "self", ".", "args", ".", "cutmix", "and", "(", "np", ".", "random", ".", "rand", "(", "1", ")", "[", "0", "]", "<", "self", ".", "args", ".", "cutmix_prob", ")", "\n", "is_mixup", "=", "self", ".", "args", ".", "mixup", "\n", "if", "is_cutmix", ":", "\n", "                ", "x", ",", "target_a", ",", "target_b", ",", "lam", "=", "cutmix", "(", "x", ",", "\n", "target", "=", "target", ",", "\n", "beta", "=", "self", ".", "args", ".", "beta", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "xt", ",", "target_at", ",", "target_bt", ",", "lamt", "=", "cutmix", "(", "xt", ",", "\n", "target", "=", "target", ",", "\n", "beta", "=", "self", ".", "args", ".", "beta", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "", "elif", "is_mixup", ":", "\n", "                ", "x", ",", "target_a", ",", "target_b", ",", "lam", "=", "mixup", "(", "x", ",", "\n", "target", "=", "target", ",", "\n", "alpha", "=", "self", ".", "args", ".", "alpha", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "xt", ",", "target_at", ",", "target_bt", ",", "lamt", "=", "mixup", "(", "xt", ",", "\n", "target", "=", "target", ",", "\n", "alpha", "=", "self", ".", "args", ".", "alpha", ",", "\n", "device", "=", "self", ".", "device", ")", "\n", "\n", "", "y", "=", "self", ".", "model", "(", "x", ",", "xt", ")", "\n", "z", ",", "zt", ",", "_", "=", "y", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "is_cutmix", "or", "is_mixup", ":", "\n", "                ", "ce", "=", "ce_loss", "(", "z", ",", "target_a", ")", "*", "lam", "+", "ce_loss", "(", "z", ",", "target_b", ")", "*", "(", "1.", "-", "lam", ")", "\n", "ce", "+=", "ce_loss", "(", "zt", ",", "target_at", ")", "*", "lamt", "+", "ce_loss", "(", "zt", ",", "target_bt", ")", "*", "(", "1.", "-", "lamt", ")", "\n", "ce", "*=", "0.5", "\n", "", "else", ":", "\n", "                ", "ce", "=", "cross_entropy_loss", "(", "z", ",", "zt", ",", "target", ",", "label_smoothing", "=", "label_smoothing", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "agmax_mse", ":", "\n", "                ", "agreement_loss", "=", "nn", ".", "MSELoss", "(", ")", "(", "z", ",", "zt", ")", "\n", "", "elif", "self", ".", "args", ".", "agmax_kl", ":", "\n", "                ", "Pz", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "(", "z", ")", "\n", "Pzt", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "(", "zt", ")", "\n", "agreement_loss", "=", "nn", ".", "KLDivLoss", "(", "log_target", "=", "True", ",", "reduction", "=", "'batchmean'", ")", "(", "Pz", ",", "Pzt", ")", "\n", "", "elif", "self", ".", "args", ".", "agmax_ce", ":", "\n", "                ", "agreement_loss", "=", "cross_entropy", "(", "z", ",", "zt", ")", "\n", "", "else", ":", "\n", "                ", "agreement_loss", ",", "dl", "=", "agmax_loss", "(", "y", ",", "target", ",", "self", ".", "args", ".", "dl_weight", ")", "\n", "#loss = agreement_loss + dl + ce", "\n", "\n", "", "loss", "=", "agreement_loss", "+", "ce", "\n", "if", "not", "self", ".", "not_mi", ":", "\n", "                ", "loss", "+=", "dl", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "self", ".", "args", ".", "steplr", "or", "self", ".", "args", ".", "cosinelr", ":", "\n", "                ", "fractional_epoch", "=", "epoch", "-", "1", "+", "i", "/", "(", "1.0", "*", "len", "(", "self", ".", "dataloader", ".", "train", ")", ")", "\n", "self", ".", "scheduler", ".", "step", "(", "fractional_epoch", ")", "\n", "lr", "=", "self", ".", "scheduler", ".", "get_epoch_values", "(", "fractional_epoch", ")", "\n", "lr", "=", "lr", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "fractional_epoch", "=", "epoch", "-", "1", "\n", "\n", "\n", "", "ce_losses", ".", "update", "(", "ce", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "agreement_losses", ".", "update", "(", "agreement_loss", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "if", "not", "self", ".", "not_mi", ":", "\n", "                ", "dl_losses", ".", "update", "(", "dl", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "_", ",", "predicted", "=", "z", ".", "max", "(", "1", ")", "\n", "total", "+=", "target", ".", "size", "(", "0", ")", "\n", "if", "is_mixup", ":", "\n", "                ", "correct", "+=", "(", "lam", "*", "predicted", ".", "eq", "(", "target_a", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "+", "(", "1", "-", "lam", ")", "*", "predicted", ".", "eq", "(", "target_b", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "correct", "+=", "predicted", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "acc", "=", "correct", "*", "100.", "/", "total", "\n", "\n", "if", "self", ".", "not_mi", ":", "\n", "                ", "progress_bar", "(", "i", ",", "\n", "len", "(", "self", ".", "dataloader", ".", "train", ")", ",", "\n", "'AG: %.3f | CE: %.3f | Top1 Acc: %0.2f%% | LR: %.4e | Ep: %.1f'", "\n", "%", "(", "agreement_losses", ".", "avg", ",", "\n", "ce_losses", ".", "avg", ",", "\n", "acc", ",", "\n", "lr", ",", "\n", "fractional_epoch", ")", ")", "\n", "", "else", ":", "\n", "                ", "progress_bar", "(", "i", ",", "\n", "len", "(", "self", ".", "dataloader", ".", "train", ")", ",", "\n", "'AG: %.3f | DL: %.3f | CE: %.3f | Top1 Acc: %0.2f%% | LR: %.4e | Div: %s | DL W: %.1f'", "\n", "%", "(", "agreement_losses", ".", "avg", ",", "\n", "dl_losses", ".", "avg", ",", "\n", "ce_losses", ".", "avg", ",", "\n", "acc", ",", "\n", "lr", ",", "\n", "self", ".", "args", ".", "dl", ",", "\n", "self", ".", "args", ".", "dl_weight", ")", ")", "\n", "\n", "", "", "self", ".", "_log_loss", "(", "epoch", ",", "ce_losses", ".", "avg", ",", "agreement_losses", ".", "avg", ",", "dl_losses", ".", "avg", ")", "\n", "return", "ce_losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.build_train": [[726, 908], ["os.makedirs", "loader", "backbones.get_backbone", "net", "dataset.transform.color_jitter_transform", "os.makedirs", "validators.url", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "net.model.load_state_dict", "net.model.to", "net.optimizer.load_state_dict", "net.scheduler.load_state_dict", "net.assign_lr_scheduler", "range", "net._log", "print", "dataset.transform.random_resized_crop_transform", "dataset.transform.data_augment", "utils.misc.get_device", "utils.misc.get_device", "os.path.join", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "torch.hub.download_url_to_file", "os.path.join", "utils.misc.get_device", "net.eval", "os.makedirs", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "datetime.datetime.now", "net.train", "net.eval", "print", "print", "torchvision.ToTensor", "torchvision.ToTensor", "urllib.parse.urlparse", "os.path.split", "print", "net.model.module.backbone.feature_extractor.state_dict", "net.model.module.feature_extractor.state_dict", "net.get_model_name", "net.eval", "net.scheduler.step", "net.scheduler.step", "datetime.datetime.now", "print", "net.eval_robustness", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.None.backbones.get_backbone", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.color_jitter_transform", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.assign_lr_scheduler", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier._log", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.random_resized_crop_transform", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.data_augment", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device", "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.AgMaxClassifier.train", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.get_model_name", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval", "home.repos.pwc.inspect_result.roatienza_agmax.None.classifier.Classifier.eval_robustness"], ["", "", "def", "build_train", "(", "args", ",", "run", ",", "all_top1", ")", ":", "\n", "    ", "folder", "=", "args", ".", "weights_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "length", "=", "16", "\n", "net", "=", "Classifier", "\n", "root", "=", "'./data'", "\n", "bg_noise_dir", "=", "None", "\n", "if", "args", ".", "agmax", ":", "\n", "        ", "net", "=", "AgMaxClassifier", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "print", "(", "\"CIFAR10 agmax\"", ")", "\n", "train_dataset", "=", "cifar", ".", "SiameseCIFAR10", "\n", "test_dataset", "=", "datasets", ".", "CIFAR10", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "print", "(", "\"CIFAR100 agmax\"", ")", "\n", "train_dataset", "=", "cifar", ".", "SiameseCIFAR100", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "\n", "", "elif", "args", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "print", "(", "\"ImageNet agmax\"", ")", "\n", "train_dataset", "=", "imagenet", ".", "SiameseImageNet", "\n", "test_dataset", "=", "datasets", ".", "ImageNet", "\n", "root", "=", "args", ".", "imagenet_dir", "\n", "# fr CutMix https://arxiv.org/pdf/1905.04899.pdf", "\n", "length", "=", "112", "\n", "", "elif", "args", ".", "dataset", "==", "\"speech_commands\"", ":", "\n", "            ", "import", "dataset", ".", "speech_commands_dataset", "as", "speech", "\n", "train_dataset", "=", "speech", ".", "SiameseSpeechCommandsDataset", "\n", "test_dataset", "=", "speech", ".", "SpeechCommandsDataset", "\n", "bg_noise_dir", "=", "args", ".", "bg_noise_dir", "\n", "root", "=", "args", ".", "speech_commands_dir", "\n", "", "else", ":", "\n", "            ", "ValueError", "(", "\"Not supported dataset\"", ")", "\n", "\n", "", "dataset", "=", "[", "train_dataset", ",", "test_dataset", "]", "\n", "\n", "", "else", ":", "\n", "        ", "transform", "=", "[", "transforms", ".", "ToTensor", "(", ")", ",", "transforms", ".", "ToTensor", "(", ")", "]", ",", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "dataset", "=", "datasets", ".", "CIFAR10", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "dataset", "=", "datasets", ".", "CIFAR100", "\n", "", "elif", "args", ".", "dataset", "==", "\"svhn\"", "or", "args", ".", "dataset", "==", "\"svhn-core\"", ":", "\n", "            ", "dataset", "=", "datasets", ".", "SVHN", "\n", "length", "=", "20", "\n", "", "elif", "args", ".", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "dataset", "=", "datasets", ".", "ImageNet", "\n", "root", "=", "args", ".", "imagenet_dir", "\n", "# fr CutMix https://arxiv.org/pdf/1905.04899.pdf", "\n", "length", "=", "112", "\n", "", "elif", "args", ".", "dataset", "==", "\"speech_commands\"", ":", "\n", "            ", "import", "dataset", ".", "speech_commands_dataset", "as", "speech", "\n", "dataset", "=", "speech", ".", "SpeechCommandsDataset", "\n", "bg_noise_dir", "=", "args", ".", "bg_noise_dir", "\n", "root", "=", "args", ".", "speech_commands_dir", "\n", "", "else", ":", "\n", "            ", "ValueError", "(", "\"Not supported dataset\"", ")", "\n", "\n", "\n", "", "", "if", "args", ".", "jitter", ":", "\n", "        ", "transform", "=", "color_jitter_transform", "(", ")", "\n", "", "elif", "args", ".", "crop", ":", "\n", "        ", "transform", "=", "random_resized_crop_transform", "(", ")", "\n", "", "else", ":", "\n", "        ", "transform", "=", "data_augment", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "length", "=", "length", ",", "\n", "cutout", "=", "args", ".", "cutout", ",", "\n", "auto_augment", "=", "args", ".", "auto_augment", ",", "\n", "rand_augment", "=", "args", ".", "rand_augment", ",", "\n", "rand_augment_mag", "=", "args", ".", "rand_augment_mag", ",", "\n", "no_basic_augment", "=", "args", ".", "no_basic_augment", ",", "\n", "bg_noise_dir", "=", "bg_noise_dir", ",", "\n", "train_imagenet_size", "=", "args", ".", "train_imagenet_size", ",", "\n", "test_imagenet_size", "=", "args", ".", "test_imagenet_size", ")", "\n", "\n", "\n", "", "loader", "=", "DoubleLoader", "if", "args", ".", "agmax", "else", "SingleLoader", "\n", "\n", "dataloader", "=", "loader", "(", "root", "=", "root", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "dataset", "=", "dataset", ",", "\n", "transform", "=", "transform", ",", "\n", "device", "=", "get_device", "(", ")", ",", "\n", "dataset_name", "=", "args", ".", "dataset", ",", "\n", "shuffle_test", "=", "args", ".", "fgsm", ",", "\n", "corruption", "=", "args", ".", "corruption", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "backbone", "=", "backbones", ".", "get_backbone", "(", "dataset", "=", "args", ".", "dataset", ",", "\n", "n_classes", "=", "args", ".", "n_classes", ",", "\n", "pool_size", "=", "args", ".", "pool_size", ",", "\n", "feature_extractor", "=", "args", ".", "feature_extractor", ",", "\n", "backbone_config", "=", "args", ".", "backbone_config", ")", "\n", "\n", "\n", "classifier", "=", "net", "(", "args", ",", "\n", "backbone", "=", "backbone", ",", "\n", "dataloader", "=", "dataloader", ",", "\n", "device", "=", "get_device", "(", ")", ")", "\n", "\n", "start_epoch", "=", "1", "\n", "end_epoch", "=", "args", ".", "epochs", "+", "1", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "folder", "=", "args", ".", "checkpoints_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "if", "validators", ".", "url", "(", "args", ".", "resume", ")", ":", "\n", "            ", "path", "=", "urlparse", "(", "args", ".", "resume", ")", "[", "2", "]", "\n", "path", "=", "os", ".", "path", ".", "split", "(", "path", ")", "[", "-", "1", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "path", ")", "\n", "torch", ".", "hub", ".", "download_url_to_file", "(", "args", ".", "resume", ",", "path", ")", "\n", "", "else", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "args", ".", "resume", ")", "\n", "", "print", "(", "\"Resuming from checkpoint '%s'\"", "%", "path", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ")", "\n", "classifier", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "classifier", ".", "model", ".", "to", "(", "get_device", "(", ")", ")", "\n", "classifier", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "classifier", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "'scheduler_state_dict'", "]", ")", "\n", "last_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "classifier", ".", "assign_lr_scheduler", "(", "last_epoch", "=", "last_epoch", "-", "1", ")", "\n", "start_epoch", "=", "last_epoch", "+", "1", "\n", "args", ".", "best_top1", "=", "checkpoint", "[", "'best_top1'", "]", "\n", "args", ".", "best_top5", "=", "checkpoint", "[", "'best_top5'", "]", "\n", "args", ".", "best_model", "=", "checkpoint", "[", "'best_model'", "]", "\n", "\n", "classifier", ".", "best_top1", "=", "args", ".", "best_top1", "\n", "classifier", ".", "best_top5", "=", "args", ".", "best_top5", "\n", "classifier", ".", "best_model", "=", "args", ".", "best_model", "\n", "classifier", ".", "best_epoch", "=", "checkpoint", "[", "'best_epoch'", "]", "\n", "\n", "if", "args", ".", "eval", ":", "\n", "            ", "val_name", "=", "None", "\n", "if", "args", ".", "corruption", "is", "not", "None", ":", "\n", "                ", "val_name", "=", "args", ".", "corruption", "\n", "print", "(", "\"Corruption mode:\"", ",", "args", ".", "corruption", ")", "\n", "", "return", "classifier", ".", "eval", "(", "start_epoch", "-", "1", ",", "val_name", "=", "val_name", ")", "\n", "", "elif", "args", ".", "fgsm", ":", "\n", "            ", "epsilons", "=", "(", "0.1", ",", "0.3", ",", "0.5", ",", ")", "\n", "for", "eps", "in", "epsilons", ":", "\n", "                ", "ret", "=", "classifier", ".", "eval_robustness", "(", "eps", ",", "start_epoch", "-", "1", ")", "\n", "\n", "", "return", "ret", "\n", "\n", "#print(classifier.model.module.feature_extractor)", "\n", "#print(classifier.model.module.backbone.feature_extractor)", "\n", "", "if", "args", ".", "save_extractor", ":", "\n", "            ", "if", "args", ".", "agmax", ":", "\n", "                ", "checkpoint", "=", "classifier", ".", "model", ".", "module", ".", "backbone", ".", "feature_extractor", ".", "state_dict", "(", ")", "\n", "", "else", ":", "\n", "                ", "checkpoint", "=", "classifier", ".", "model", ".", "module", ".", "feature_extractor", ".", "state_dict", "(", ")", "\n", "", "folder", "=", "args", ".", "checkpoints_dir", "\n", "os", ".", "makedirs", "(", "folder", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "classifier", ".", "get_model_name", "(", ")", "+", "\"feature-extractor.pth\"", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "filename", ")", "\n", "torch", ".", "save", "(", "checkpoint", ",", "path", ")", "\n", "print", "(", "\"Saving feature extractor: \"", ",", "path", ")", "\n", "return", "None", ",", "None", ",", "None", "\n", "\n", "\n", "", "", "if", "args", ".", "train", ":", "\n", "        ", "best_top1", "=", "args", ".", "best_top1", "\n", "best_top5", "=", "args", ".", "best_top5", "\n", "best_model", "=", "args", ".", "best_model", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "end_epoch", ")", ":", "\n", "            ", "start_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "loss", "=", "classifier", ".", "train", "(", "run", ",", "best_top1", ",", "best_top5", ",", "best_model", ",", "all_top1", ",", "epoch", ",", "label_smoothing", "=", "args", ".", "smoothing", ")", "\n", "top1", ",", "top5", ",", "model", "=", "classifier", ".", "eval", "(", "epoch", ")", "\n", "if", "args", ".", "dataset", "==", "\"speech_commands\"", ":", "\n", "                ", "_", ",", "_", ",", "_", "=", "classifier", ".", "eval", "(", "epoch", ",", "is_val", "=", "True", ")", "\n", "", "if", "args", ".", "plateau", ":", "\n", "                ", "classifier", ".", "scheduler", ".", "step", "(", "metrics", "=", "loss", ")", "\n", "", "else", ":", "\n", "                ", "classifier", ".", "scheduler", ".", "step", "(", "epoch", ")", "\n", "", "if", "top1", ">", "best_top1", ":", "\n", "                ", "best_top1", "=", "top1", "\n", "best_top5", "=", "top5", "\n", "best_model", "=", "model", "\n", "", "elapsed_time", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "-", "start_time", "\n", "print", "(", "\"Elapsed time: %s\"", "%", "elapsed_time", ")", "\n", "", "classifier", ".", "_log", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ",", "verbose", "=", "True", ")", "\n", "return", "top1", ",", "top5", ",", "model", "\n", "", "else", ":", "\n", "        ", "return", "None", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.CrossEntropyLabelSmooth.__init__": [[28, 34], ["super().__init__", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "epsilon", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "super", "(", "CrossEntropyLabelSmooth", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "epsilon", "=", "epsilon", "\n", "self", ".", "reduction", "=", "reduction", "\n", "self", ".", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.CrossEntropyLabelSmooth.forward": [[35, 48], ["metrics.CrossEntropyLabelSmooth.logsoftmax", "torch.zeros_like().scatter_", "targets.detach.detach.detach", "target.unsqueeze", "torch.mean", "torch.zeros_like", "torch.sum", "loss.sum.sum.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "# pylint: disable=redefined-builtin", "\n", "        ", "log_probs", "=", "self", ".", "logsoftmax", "(", "input", ")", "\n", "targets", "=", "torch", ".", "zeros_like", "(", "log_probs", ")", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "if", "self", ".", "epsilon", ">", "0.0", ":", "\n", "            ", "targets", "=", "(", "1", "-", "self", ".", "epsilon", ")", "*", "targets", "+", "self", ".", "epsilon", "/", "self", ".", "num_classes", "\n", "", "targets", "=", "targets", ".", "detach", "(", ")", "\n", "loss", "=", "(", "-", "targets", "*", "log_probs", ")", "\n", "\n", "if", "self", ".", "reduction", "in", "[", "'avg'", ",", "'mean'", "]", ":", "\n", "            ", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "loss", ",", "dim", "=", "1", ")", ")", "\n", "", "elif", "self", ".", "reduction", "==", "'sum'", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.__init__": [[51, 53], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "metrics", "=", "defaultdict", "(", "lambda", ":", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.add": [[54, 56], ["None"], "methods", ["None"], ["", "def", "add", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "metrics", "[", "key", "]", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.add_dict": [[57, 60], ["dict.items", "metrics.Accumulator.add"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items", "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.add"], ["", "def", "add_dict", "(", "self", ",", "dict", ")", ":", "\n", "        ", "for", "key", ",", "value", "in", "dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "add", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.__getitem__": [[61, 63], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", ".", "metrics", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.__setitem__": [[64, 66], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "metrics", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.get_dict": [[67, 69], ["copy.deepcopy", "dict"], "methods", ["None"], ["", "def", "get_dict", "(", "self", ")", ":", "\n", "        ", "return", "copy", ".", "deepcopy", "(", "dict", "(", "self", ".", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items": [[70, 72], ["metrics.Accumulator.metrics.items"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items"], ["", "def", "items", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "metrics", ".", "items", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.__str__": [[73, 75], ["str", "dict"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "dict", "(", "self", ".", "metrics", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.__truediv__": [[76, 87], ["metrics.Accumulator", "metrics.Accumulator.items", "isinstance"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "newone", "=", "Accumulator", "(", ")", "\n", "for", "key", ",", "value", "in", "self", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "other", ",", "str", ")", ":", "\n", "                ", "if", "other", "!=", "key", ":", "\n", "                    ", "newone", "[", "key", "]", "=", "value", "/", "self", "[", "other", "]", "\n", "", "else", ":", "\n", "                    ", "newone", "[", "key", "]", "=", "value", "\n", "", "", "else", ":", "\n", "                ", "newone", "[", "key", "]", "=", "value", "/", "other", "\n", "", "", "return", "newone", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.SummaryWriterDummy.__init__": [[90, 92], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.SummaryWriterDummy.add_scalar": [[93, 95], ["None"], "methods", ["None"], ["", "def", "add_scalar", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.accuracy": [[9, 25], ["torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "#correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.progress_bar": [[17, 59], ["int", "sys.stdout.write", "range", "sys.stdout.write", "range", "sys.stdout.write", "time.time", "L.append", "L.append", "sys.stdout.write", "range", "range", "sys.stdout.write", "sys.stdout.flush", "time.time", "int", "sys.stdout.write", "sys.stdout.write", "L.append", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "sys.stdout.write", "ui.format_time", "ui.format_time", "len", "int", "int"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.format_time", "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.format_time"], ["def", "progress_bar", "(", "current", ",", "total", ",", "msg", "=", "None", ")", ":", "\n", "    ", "global", "last_time", ",", "begin_time", "\n", "if", "current", "==", "0", ":", "\n", "        ", "begin_time", "=", "time", ".", "time", "(", ")", "# Reset for new bar.", "\n", "\n", "", "cur_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "*", "current", "/", "total", ")", "\n", "rest_len", "=", "int", "(", "TOTAL_BAR_LENGTH", "-", "cur_len", ")", "-", "1", "\n", "\n", "sys", ".", "stdout", ".", "write", "(", "' ['", ")", "\n", "for", "i", "in", "range", "(", "cur_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'='", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "'>'", ")", "\n", "for", "i", "in", "range", "(", "rest_len", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'.'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "']'", ")", "\n", "\n", "cur_time", "=", "time", ".", "time", "(", ")", "\n", "step_time", "=", "cur_time", "-", "last_time", "\n", "last_time", "=", "cur_time", "\n", "tot_time", "=", "cur_time", "-", "begin_time", "\n", "\n", "L", "=", "[", "]", "\n", "L", ".", "append", "(", "'  Step: %s'", "%", "format_time", "(", "step_time", ")", ")", "\n", "L", ".", "append", "(", "' | Tot: %s'", "%", "format_time", "(", "tot_time", ")", ")", "\n", "if", "msg", ":", "\n", "        ", "L", ".", "append", "(", "' | '", "+", "msg", ")", "\n", "\n", "", "msg", "=", "''", ".", "join", "(", "L", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "msg", ")", "\n", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", ")", "-", "len", "(", "msg", ")", "-", "3", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "' '", ")", "\n", "\n", "# Go back to the center of the bar.", "\n", "", "for", "i", "in", "range", "(", "term_width", "-", "int", "(", "TOTAL_BAR_LENGTH", "/", "2", ")", "+", "2", ")", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\b'", ")", "\n", "", "sys", ".", "stdout", ".", "write", "(", "' %d/%d '", "%", "(", "current", "+", "1", ",", "total", ")", ")", "\n", "\n", "if", "current", "<", "total", "-", "1", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\r'", ")", "\n", "", "else", ":", "\n", "        ", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.ui.format_time": [[60, 91], ["int", "int", "int", "int", "int", "str", "str", "str", "str", "str"], "function", ["None"], ["", "def", "format_time", "(", "seconds", ")", ":", "\n", "    ", "days", "=", "int", "(", "seconds", "/", "3600", "/", "24", ")", "\n", "seconds", "=", "seconds", "-", "days", "*", "3600", "*", "24", "\n", "hours", "=", "int", "(", "seconds", "/", "3600", ")", "\n", "seconds", "=", "seconds", "-", "hours", "*", "3600", "\n", "minutes", "=", "int", "(", "seconds", "/", "60", ")", "\n", "seconds", "=", "seconds", "-", "minutes", "*", "60", "\n", "secondsf", "=", "int", "(", "seconds", ")", "\n", "seconds", "=", "seconds", "-", "secondsf", "\n", "millis", "=", "int", "(", "seconds", "*", "1000", ")", "\n", "\n", "f", "=", "''", "\n", "i", "=", "1", "\n", "if", "days", ">", "0", ":", "\n", "        ", "f", "+=", "str", "(", "days", ")", "+", "'D'", "\n", "i", "+=", "1", "\n", "", "if", "hours", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "hours", ")", "+", "'h'", "\n", "i", "+=", "1", "\n", "", "if", "minutes", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "minutes", ")", "+", "'m'", "\n", "i", "+=", "1", "\n", "", "if", "secondsf", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "secondsf", ")", "+", "'s'", "\n", "i", "+=", "1", "\n", "", "if", "millis", ">", "0", "and", "i", "<=", "2", ":", "\n", "        ", "f", "+=", "str", "(", "millis", ")", "+", "'ms'", "\n", "i", "+=", "1", "\n", "", "if", "f", "==", "''", ":", "\n", "        ", "f", "=", "'0ms'", "\n", "", "return", "f", "\n", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.__init__": [[19, 21], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.reset": [[22, 29], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "min", "=", "100", "\n", "self", ".", "max", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.AverageMeter.update": [[30, 39], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "if", "val", "<", "self", ".", "min", ":", "\n", "            ", "self", ".", "min", "=", "val", "\n", "", "if", "val", ">", "self", ".", "max", ":", "\n", "            ", "self", ".", "max", "=", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.count_parameters": [[14, 16], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.fgsm_attack": [[41, 50], ["data_grad.sign", "torch.clamp", "torch.clamp", "torch.clamp"], "function", ["None"], ["", "", "", "def", "fgsm_attack", "(", "image", ",", "epsilon", ",", "data_grad", ")", ":", "\n", "# Collect the element-wise sign of the data gradient", "\n", "    ", "sign_data_grad", "=", "data_grad", ".", "sign", "(", ")", "\n", "# Create the perturbed image by adjusting each pixel of the input image", "\n", "perturbed_image", "=", "image", "+", "epsilon", "*", "sign_data_grad", "\n", "# Adding clipping to maintain [0,1] range", "\n", "perturbed_image", "=", "torch", ".", "clamp", "(", "perturbed_image", ",", "0", ",", "1", ")", "\n", "# Return the perturbed image", "\n", "return", "perturbed_image", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.accuracy": [[52, 66], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "1.", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_device": [[68, 77], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.device", "torch.device", "torch.device", "print"], "function", ["None"], ["", "def", "get_device", "(", "verbose", "=", "False", ")", ":", "\n", "    ", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "#if torch.cuda.device_count() > 1:", "\n", "#    print(\"Available GPUs:\", torch.cuda.device_count())", "\n", "#    # model = nn.DataParallel(model)", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "\"Device:\"", ",", "device", ")", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_mean_and_std": [[79, 97], ["dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "print", "torch.zeros.div_", "torch.zeros.div_", "range", "len", "len", "torchvision.ToTensor", "inputs.size", "inputs[].mean", "inputs[].std"], "function", ["None"], ["", "def", "get_mean_and_std", "(", "dataset", ")", ":", "\n", "    ", "'''Compute the mean and std value of dataset.'''", "\n", "x_train", "=", "dataset", "(", "root", "=", "'./data'", ",", "\n", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "\n", "transform", "=", "transforms", ".", "ToTensor", "(", ")", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "x_train", ",", "batch_size", "=", "1", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", ")", "\n", "mean", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "std", "=", "torch", ".", "zeros", "(", "3", ")", "\n", "print", "(", "'==> Computing mean and std...'", ")", "\n", "for", "inputs", ",", "targets", "in", "dataloader", ":", "\n", "        ", "channels", "=", "inputs", ".", "size", "(", ")", "[", "1", "]", "\n", "for", "i", "in", "range", "(", "channels", ")", ":", "\n", "            ", "mean", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "mean", "(", ")", "\n", "std", "[", "i", "]", "+=", "inputs", "[", ":", ",", "i", ",", ":", ",", ":", "]", ".", "std", "(", ")", "\n", "", "", "mean", ".", "div_", "(", "len", "(", "x_train", ")", ")", "\n", "std", ".", "div_", "(", "len", "(", "x_train", ")", ")", "\n", "return", "mean", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.utils.misc.get_args": [[99, 433], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'MIMax'", ")", "\n", "parser", ".", "add_argument", "(", "'--config'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Load a pre-defined training configuration'", ")", "\n", "parser", ".", "add_argument", "(", "'--n-runs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "help", "=", "'Number of runs for MIMax training'", ")", "\n", "parser", ".", "add_argument", "(", "'--best-top1'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Best top 1 accuracy'", ")", "\n", "parser", ".", "add_argument", "(", "'--best-top5'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Best top 5 accuracy'", ")", "\n", "parser", ".", "add_argument", "(", "'--best-model'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Best Model'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--rmsprop'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use RMSprop optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--steplr'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use Step LR Scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--cosinelr'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use Cosine LR Scheduler'", ")", "\n", "parser", ".", "add_argument", "(", "'--multisteplr'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use Multi Step LR'", ")", "\n", "parser", ".", "add_argument", "(", "'--plateau'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use reduce on plataeu'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-epochs'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "2.4", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'StepLR and MultiStepLR decay epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-rate'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.97", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'StepLR decay rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Warmup learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epochs'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "5", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Warmup epochs'", ")", "\n", "parser", ".", "add_argument", "(", "'--ce-weight'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Cross-entropy weight on double classifier'", ")", "\n", "parser", ".", "add_argument", "(", "'--mi-weight'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Entropy weight on double classifier'", ")", "\n", "parser", ".", "add_argument", "(", "'--gamma'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.5", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Learning rate scheduler gamma'", ")", "\n", "parser", ".", "add_argument", "(", "'--step-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "400", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Learning rate step size'", ")", "\n", "parser", ".", "add_argument", "(", "'--cycle-limit'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Cycle limit'", ")", "\n", "parser", ".", "add_argument", "(", "'--train-imagenet-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "224", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Imagenet train image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-imagenet-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "224", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Imagenet test image size'", ")", "\n", "#parser.add_argument('--fixed-train',", "\n", "#                    default=False,", "\n", "#                    action='store_true',", "\n", "#                    help='Not both train samples are transformed')", "\n", "parser", ".", "add_argument", "(", "'--dl'", ",", "\n", "default", "=", "\"l1\"", ",", "\n", "help", "=", "'MI divergence loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--n-units'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of units of 1st layer of Q network'", ")", "\n", "parser", ".", "add_argument", "(", "'--dl-weight'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "4", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Divergence loss weight'", ")", "\n", "#parser.add_argument('--n-heads',", "\n", "#                    type=int,", "\n", "#                    default=1,", "\n", "#                    metavar='N',", "\n", "#                    help='Number of heads')", "\n", "parser", ".", "add_argument", "(", "'--pool-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Average pooling size'", ")", "\n", "parser", ".", "add_argument", "(", "'--n-channels'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of channels'", ")", "\n", "parser", ".", "add_argument", "(", "'--n-classes'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of classes'", ")", "\n", "#parser.add_argument('--head-index',", "\n", "#                    type=int,", "\n", "#                    default=0,", "\n", "#                    metavar='N',", "\n", "#                    help='Which encoder head to use')", "\n", "parser", ".", "add_argument", "(", "'--init-backbone'", ",", "\n", "default", "=", "None", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Initialize backbone'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-extractor'", ",", "\n", "default", "=", "None", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Initialize feature extractor'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights-std'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Linear layer initial weights std (0.01 for standard, 0.2 for agmax)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Optimizer weight decay'", ")", "\n", "# batch size is split across gpus unless a specific gpu is indicated", "\n", "# see https://discuss.pytorch.org/t/a-question-concerning-batchsize-and-multiple-gpus-in-pytorch/33767/2", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Batch size for training MIMax'", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Number of epochs of (270 ImageNet, 200 CIFAR, 160 SVHN)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dropout (when applicable)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use Nesterov momentum on SGD'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.9", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'SGD momentum (when applicable)'", ")", "\n", "parser", ".", "add_argument", "(", "'--rand-augment'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use random data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--rand-augment-mag'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "10.", ",", "\n", "help", "=", "'Rand Augment magnitude'", ")", "\n", "parser", ".", "add_argument", "(", "'--auto-augment'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use automatic data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutout'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use cut out data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-basic-augment'", ",", "\n", "default", "=", "None", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'No basic data augmentation (crop, flip)'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use cutmix data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use mixup data augmentation'", ")", "\n", "parser", ".", "add_argument", "(", "'--cutmix-prob'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'CutMix probability (default is for ResNet. Use 0.5 for CIFAR10/100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--alpha'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", ".2", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'MixUp Alpha (default is for ResNet ImageNet. Use 1.0 for CIFAR10/100)'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "1.0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'CutMix Beta (default is for ResNet ImageNet and WideResNet CIFAR10/100.)'", ")", "\n", "parser", ".", "add_argument", "(", "'--feature-extractor'", ",", "\n", "default", "=", "\"WideResNet28-10\"", ",", "\n", "help", "=", "'Backbone feature extractor (WideResNet28-10, WideResNet48-2)'", ")", "\n", "parser", ".", "add_argument", "(", "'--train'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Train model'", ")", "\n", "parser", ".", "add_argument", "(", "'--eval'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate a model model. args.resume required.'", ")", "\n", "parser", ".", "add_argument", "(", "'--fgsm'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate a model model under FGSM attack.'", ")", "\n", "parser", ".", "add_argument", "(", "'--jitter'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate a model model under color jitter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Evaluate a model model under random resized crop.'", ")", "\n", "parser", ".", "add_argument", "(", "'--corruption'", ",", "\n", "default", "=", "None", ",", "\n", "choices", "=", "[", "'brightness'", ",", "'contrast'", ",", "'frost'", ",", "'gaussian_noise'", ",", "'impulse_noise'", ",", "'motion_blur'", ",", "'pixelate'", ",", "'shot_noise'", ",", "'spatter'", ",", "'defocus_blur'", ",", "'elastic_transform'", ",", "'fog'", ",", "'gaussian_blur'", ",", "'glass_blur'", ",", "'jpeg_compression'", ",", "'saturate'", ",", "'snow'", ",", "'speckle_noise'", ",", "'zoom_blur'", "]", ",", "\n", "help", "=", "'Evaluate a model model using this corruption mode.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Save checkpoint file every epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--imagenet-dir'", ",", "\n", "default", "=", "\"/data/imagenet\"", ",", "\n", "help", "=", "'Folder of imagenet dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--speech-commands-dir'", ",", "\n", "default", "=", "'/data/speech/speech_commands/dataset'", ",", "\n", "help", "=", "'Folder of imagenet dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--bg-noise-dir'", ",", "\n", "default", "=", "'/data/speech/speech_commands/dataset/train/_background_noise_'", ",", "\n", "help", "=", "'Folder of speech commnds dataset bg noise'", ")", "\n", "parser", ".", "add_argument", "(", "'--weights-dir'", ",", "\n", "default", "=", "\"weights\"", ",", "\n", "help", "=", "'Folder of model weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--logs-dir'", ",", "\n", "default", "=", "\"logs\"", ",", "\n", "help", "=", "'Folder of debug logs'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoints-dir'", ",", "\n", "default", "=", "\"checkpoints\"", ",", "\n", "help", "=", "'Checkpoint for restoring model for inference/resume training'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "\n", "default", "=", "None", ",", "\n", "help", "=", "'Resume training using this weight file stored in checkpoint dir'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-extractor'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Save the feature extractor model'", ")", "\n", "parser", ".", "add_argument", "(", "'--summary'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Print model summary'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "\n", "default", "=", "\"cifar10\"", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'Dataset for training classifier'", ")", "\n", "parser", ".", "add_argument", "(", "'--agmax'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use MIMax'", ")", "\n", "parser", ".", "add_argument", "(", "'--agmax-mse'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use MIMax MSE loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--agmax-kl'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use MIMax KL Divergence loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--agmax-ce'", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Use MIMax Cross Entropy loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "1", ",", "\n", "metavar", "=", "'S'", ",", "\n", "help", "=", "'Random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-workers'", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "16", ",", "\n", "help", "=", "'Dataloader number of workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--results-dir'", ",", "\n", "default", "=", "\"results\"", ",", "\n", "help", "=", "'Folder of result files'", ")", "\n", "parser", ".", "add_argument", "(", "'--smoothing'", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'If > 0, use label smoothing'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.VGG.__init__": [[27, 37], ["extractor.BaseModule.__init__", "vgg.make_layers"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.make_layers"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "#features, num_classes=1000, init_weights=True):", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "#self.features = features", "\n", "self", ".", "name", "=", "name", "\n", "cfg", "=", "config", "[", "\"cfg\"", "]", "\n", "in_channels", "=", "config", "[", "\"channels\"", "]", "\n", "batch_norm", "=", "config", "[", "\"batch_norm\"", "]", "\n", "self", ".", "features", "=", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ",", "in_channels", "=", "in_channels", ")", "\n", "self", ".", "n_features", "=", "512", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d((7, 7))", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.VGG.forward": [[50, 56], ["vgg.VGG.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "#x = self.avgpool(x)", "\n", "#x = torch.flatten(x, 1)", "\n", "#x = self.classifier(x)", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.VGG._initialize_weights": [[58, 70], ["vgg.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.make_layers": [[72, 86], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ",", "in_channels", "=", "3", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "#in_channels = 3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "'M'", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg": [[96, 105], ["vgg.VGG", "vgg.make_layers", "load_state_dict_from_url", "VGG.load_state_dict"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.make_layers"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "'init_weights'", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg11": [[107, 116], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg11", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") from\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11'", ",", "'A'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg11_bn": [[118, 127], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg11_bn'", ",", "'A'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg13": [[129, 138], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13'", ",", "'B'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg13_bn": [[140, 149], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg13_bn'", ",", "'B'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg16": [[151, 160], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16'", ",", "'D'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg16_bn": [[162, 171], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg16_bn'", ",", "'D'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg19": [[173, 182], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19'", ",", "'E'", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.vgg.vgg19_bn": [[184, 193], ["vgg._vgg"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.vgg._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "'vgg19_bn'", ",", "'E'", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetB1.__init__": [[7, 13], ["extractor.BaseModule.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "EfficientNetB1", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "features", "=", "timm", ".", "create_model", "(", "'efficientnet_b1'", ")", "\n", "self", ".", "n_features", "=", "1280", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetB1.forward": [[14, 16], ["efficientnet.EfficientNetB1.features.forward_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", ".", "forward_features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetB0.__init__": [[18, 24], ["extractor.BaseModule.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "EfficientNetB0", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "features", "=", "timm", ".", "create_model", "(", "'efficientnet_b0'", ")", "\n", "self", ".", "n_features", "=", "1280", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetB0.forward": [[25, 27], ["efficientnet.EfficientNetB0.features.forward_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", ".", "forward_features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetV2S.__init__": [[29, 36], ["extractor.BaseModule.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "EfficientNetV2S", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "drop_rate", "=", "config", "[", "'dropout'", "]", "\n", "self", ".", "features", "=", "timm", ".", "create_model", "(", "'efficientnetv2_s'", ",", "drop_rate", "=", "drop_rate", ")", "\n", "self", ".", "n_features", "=", "0", "#FIXME: Rdit this", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.efficientnet.EfficientNetV2S.forward": [[37, 39], ["efficientnet.EfficientNetV2S.features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.features.lenet.LeNet.__init__": [[11, 24], ["extractor.BaseModule.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "in_channels", "=", "config", "[", "\"channels\"", "]", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "in_channels", ",", "\n", "out_channels", "=", "6", ",", "\n", "kernel_size", "=", "5", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "in_channels", "=", "6", ",", "\n", "out_channels", "=", "16", ",", "\n", "kernel_size", "=", "5", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ")", "\n", "self", ".", "n_features", "=", "400", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.lenet.LeNet.forward": [[25, 30], ["lenet.LeNet.relu", "lenet.LeNet.pool", "lenet.LeNet.relu", "lenet.LeNet.conv1", "lenet.LeNet.conv2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "conv1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "self", ".", "conv2", "(", "x", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BaseModule.__init__": [[8, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_features", "=", "0", "\n", "self", ".", "_name", "=", "\"BaseModule\"", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BaseModule.forward": [[13, 15], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BaseModule.name": [[20, 23], ["None"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BaseModule.init_weights": [[24, 39], ["print", "resnet_extractor.BaseModule.modules", "type", "torch.init.normal_", "torch.init.normal_", "isinstance", "type", "m.bias.data.zero_", "torch.init.constant_", "torch.init.constant_", "m.bias.data.zero_", "type", "torch.init.normal_", "torch.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ")", ":", "\n", "        ", "print", "(", "\"Initialize weights of %s with normal dist: mean=0, std=%0.2f\"", "%", "(", "type", "(", "self", ")", ",", "std", ")", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BasicBlock.__init__": [[57, 74], ["torch.Module.__init__", "resnet_extractor.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_extractor.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.BasicBlock.forward": [[75, 92], ["resnet_extractor.BasicBlock.conv1", "resnet_extractor.BasicBlock.bn1", "resnet_extractor.BasicBlock.relu", "resnet_extractor.BasicBlock.conv2", "resnet_extractor.BasicBlock.bn2", "resnet_extractor.BasicBlock.relu", "resnet_extractor.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.Bottleneck.__init__": [[103, 119], ["torch.Module.__init__", "resnet_extractor.conv1x1", "norm_layer", "resnet_extractor.conv3x3", "norm_layer", "resnet_extractor.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.Bottleneck.forward": [[120, 141], ["resnet_extractor.Bottleneck.conv1", "resnet_extractor.Bottleneck.bn1", "resnet_extractor.Bottleneck.relu", "resnet_extractor.Bottleneck.conv2", "resnet_extractor.Bottleneck.bn2", "resnet_extractor.Bottleneck.relu", "resnet_extractor.Bottleneck.conv3", "resnet_extractor.Bottleneck.bn3", "resnet_extractor.Bottleneck.relu", "resnet_extractor.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.ResNet.__init__": [[144, 206], ["resnet_extractor.BaseModule.__init__", "print", "print", "print", "torch.Conv2d", "torch.Conv2d", "resnet_extractor.ResNet._norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_extractor.ResNet._make_layer", "resnet_extractor.ResNet._make_layer", "resnet_extractor.ResNet._make_layer", "resnet_extractor.ResNet._make_layer", "resnet_extractor.ResNet.modules", "isinstance", "type", "type", "type", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "#   block, layers, num_classes=1000, zero_init_residual=False,", "\n", "#groups=1, width_per_group=64, replace_stride_with_dilation=None,", "\n", "#norm_layer=None):", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "config", "[", "\"layers\"", "]", "\n", "in_channels", "=", "config", "[", "\"channels\"", "]", "\n", "self", ".", "name", "=", "name", "\n", "print", "(", "\"%s layers: %s\"", "%", "(", "type", "(", "self", ")", ",", "layers", ")", ")", "\n", "\n", "block", "=", "Bottleneck", "\n", "self", ".", "_norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "#if replace_stride_with_dilation is None:", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "#    replace_stride_with_dilation = [False, False, False]", "\n", "#if len(replace_stride_with_dilation) != 3:", "\n", "#    raise ValueError(\"replace_stride_with_dilation should be None \"", "\n", "#                     \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))", "\n", "self", ".", "groups", "=", "config", "[", "\"groups\"", "]", "\n", "print", "(", "\"%s groups: %d\"", "%", "(", "type", "(", "self", ")", ",", "self", ".", "groups", ")", ")", "\n", "self", ".", "base_width", "=", "config", "[", "\"width_per_group\"", "]", "\n", "print", "(", "\"%s width_per_group: %d\"", "%", "(", "type", "(", "self", ")", ",", "self", ".", "base_width", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "self", ".", "_norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "n_features", "=", "512", "*", "block", ".", "expansion", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "# use default init", "\n", "#for m in self.modules():", "\n", "#    if isinstance(m, nn.Conv2d):", "\n", "#        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "#    if isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):", "\n", "#        nn.init.constant_(m.weight, 1)", "\n", "#        nn.init.constant_(m.bias, 0)", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "zero_init_residual", "=", "True", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.ResNet._make_layer": [[208, 231], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_extractor.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.ResNet._forward_impl": [[232, 250], ["resnet_extractor.ResNet.conv1", "resnet_extractor.ResNet.bn1", "resnet_extractor.ResNet.relu", "resnet_extractor.ResNet.maxpool", "resnet_extractor.ResNet.layer1", "outs.append", "resnet_extractor.ResNet.layer2", "outs.append", "resnet_extractor.ResNet.layer3", "outs.append", "resnet_extractor.ResNet.layer4", "outs.append", "tuple"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "outs", ".", "append", "(", "x", ")", "\n", "\n", "return", "tuple", "(", "outs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.ResNet.forward": [[251, 253], ["resnet_extractor.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.ResNet.init_weights": [[255, 262], ["resnet_extractor.BaseModule.init_weights", "resnet_extractor.ResNet.modules", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.conv3x3": [[43, 47], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.conv1x1": [[49, 52], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor._resnet": [[264, 271], ["resnet_extractor.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet_extractor.resnet50": [[273, 283], ["resnet_extractor._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.extractor.BaseModule.__init__": [[8, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "BaseModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_features", "=", "0", "\n", "self", ".", "_name", "=", "\"BaseModule\"", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.extractor.BaseModule.forward": [[13, 15], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.extractor.BaseModule.name": [[20, 23], ["None"], "methods", ["None"], ["", "@", "name", ".", "setter", "\n", "def", "name", "(", "self", ",", "name", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.extractor.BaseModule.init_weights": [[24, 39], ["print", "extractor.BaseModule.modules", "type", "torch.init.normal_", "torch.init.normal_", "isinstance", "type", "m.bias.data.zero_", "torch.init.constant_", "torch.init.constant_", "m.bias.data.zero_", "type", "torch.init.normal_", "torch.init.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ")", ":", "\n", "        ", "print", "(", "\"Initialize weights of %s with normal dist: mean=0, std=%0.2f\"", "%", "(", "type", "(", "self", ")", ",", "std", ")", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "type", "(", "m", ")", "==", "nn", ".", "Linear", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "type", "(", "m", ")", "==", "nn", ".", "Conv2d", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "std", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.BasicBlock.__init__": [[23, 36], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "wide_resnet.conv3x3", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "wide_resnet.conv3x3", "torch.ReLU", "torch.ReLU", "wide_resnet.conv1x1"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "inplanes", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "stride", "!=", "1", "or", "inplanes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "conv1x1", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "use_conv1x1", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "use_conv1x1", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.BasicBlock.forward": [[37, 56], ["wide_resnet.BasicBlock.bn1", "wide_resnet.BasicBlock.relu", "wide_resnet.BasicBlock.conv1", "wide_resnet.BasicBlock.bn2", "wide_resnet.BasicBlock.relu", "wide_resnet.BasicBlock.dropout", "wide_resnet.BasicBlock.conv2", "wide_resnet.BasicBlock.shortcut"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "bn1", "(", "x", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "if", "self", ".", "use_conv1x1", ":", "\n", "            ", "shortcut", "=", "self", ".", "shortcut", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "shortcut", "=", "x", "\n", "\n", "", "out", "=", "self", ".", "conv1", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "out", "+=", "shortcut", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.WideResNet.__init__": [[59, 80], ["extractor.BaseModule.__init__", "print", "wide_resnet.conv3x3", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "wide_resnet.WideResNet._make_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "type"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "name", "\n", "depth", "=", "config", "[", "\"depth\"", "]", "\n", "width", "=", "config", "[", "\"width\"", "]", "\n", "dropout", "=", "config", "[", "\"dropout\"", "]", "\n", "in_channels", "=", "config", "[", "\"channels\"", "]", "\n", "print", "(", "\"%s depth: %d, width: %d, dropout=%f\"", "%", "(", "type", "(", "self", ")", ",", "depth", ",", "width", ",", "dropout", ")", ")", "\n", "\n", "layer", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "\n", "self", ".", "inplanes", "=", "16", "\n", "self", ".", "conv", "=", "conv3x3", "(", "in_channels", ",", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "16", "*", "width", ",", "layer", ",", "dropout", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "32", "*", "width", ",", "layer", ",", "dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "64", "*", "width", ",", "layer", ",", "dropout", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "64", "*", "width", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "n_features", "=", "64", "*", "width", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d(1)", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.WideResNet._make_layer": [[88, 95], ["range", "torch.Sequential", "torch.Sequential", "layers.append", "wide_resnet.BasicBlock"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "planes", ",", "blocks", ",", "dropout", ",", "stride", "=", "1", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "BasicBlock", "(", "self", ".", "inplanes", ",", "planes", ",", "dropout", ",", "stride", "if", "i", "==", "0", "else", "1", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.WideResNet.forward": [[97, 111], ["wide_resnet.WideResNet.conv", "wide_resnet.WideResNet.layer1", "wide_resnet.WideResNet.layer2", "wide_resnet.WideResNet.layer3", "wide_resnet.WideResNet.bn", "wide_resnet.WideResNet.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "#x = self.avgpool(x)", "\n", "#x = x.view(x.size(0), -1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.conv3x3": [[10, 14], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.wide_resnet.conv1x1": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.BasicBlock.__init__": [[39, 56], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.BasicBlock.forward": [[57, 74], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.Bottleneck.__init__": [[85, 101], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.Bottleneck.forward": [[102, 123], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.__init__": [[126, 188], ["extractor.BaseModule.__init__", "print", "print", "print", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet._norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet.modules", "isinstance", "type", "type", "type", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "#   block, layers, num_classes=1000, zero_init_residual=False,", "\n", "#groups=1, width_per_group=64, replace_stride_with_dilation=None,", "\n", "#norm_layer=None):", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "layers", "=", "config", "[", "\"layers\"", "]", "\n", "in_channels", "=", "config", "[", "\"channels\"", "]", "\n", "self", ".", "name", "=", "name", "\n", "print", "(", "\"%s layers: %s\"", "%", "(", "type", "(", "self", ")", ",", "layers", ")", ")", "\n", "\n", "block", "=", "Bottleneck", "\n", "self", ".", "_norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "#if replace_stride_with_dilation is None:", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "#    replace_stride_with_dilation = [False, False, False]", "\n", "#if len(replace_stride_with_dilation) != 3:", "\n", "#    raise ValueError(\"replace_stride_with_dilation should be None \"", "\n", "#                     \"or a 3-element tuple, got {}\".format(replace_stride_with_dilation))", "\n", "self", ".", "groups", "=", "config", "[", "\"groups\"", "]", "\n", "print", "(", "\"%s groups: %d\"", "%", "(", "type", "(", "self", ")", ",", "self", ".", "groups", ")", ")", "\n", "self", ".", "base_width", "=", "config", "[", "\"width_per_group\"", "]", "\n", "print", "(", "\"%s width_per_group: %d\"", "%", "(", "type", "(", "self", ")", ",", "self", ".", "base_width", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "self", ".", "_norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "n_features", "=", "512", "*", "block", ".", "expansion", "\n", "#self.avgpool = nn.AdaptiveAvgPool2d((1, 1))", "\n", "#self.fc = nn.Linear(512 * block.expansion, num_classes)", "\n", "\n", "# use default init", "\n", "#for m in self.modules():", "\n", "#    if isinstance(m, nn.Conv2d):", "\n", "#        nn.init.kaiming_normal_(m.weight, mode='fan_out', nonlinearity='relu')", "\n", "#    if isinstance(m, (nn.BatchNorm2d, nn.GroupNorm)):", "\n", "#        nn.init.constant_(m.weight, 1)", "\n", "#        nn.init.constant_(m.bias, 0)", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "zero_init_residual", "=", "True", "\n", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._make_layer": [[190, 213], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._forward_impl": [[214, 231], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "#x = self.avgpool(x)", "\n", "#x = torch.flatten(x, 1)", "\n", "#x = self.fc(x)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.forward": [[232, 234], ["resnet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights": [[236, 243], ["super().init_weights", "resnet.ResNet.modules", "isinstance", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.ResNet.init_weights"], ["", "def", "init_weights", "(", "self", ",", "std", "=", "0.01", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "init_weights", "(", "std", "=", "std", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv3x3": [[25, 29], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.conv1x1": [[31, 34], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet": [[245, 252], ["resnet.ResNet", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnet18": [[254, 264], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnet34": [[266, 276], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnet50": [[278, 288], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnet101": [[290, 300], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnet152": [[302, 312], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnext50_32x4d": [[314, 326], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.resnext101_32x8d": [[328, 340], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.wide_resnet50_2": [[342, 358], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.resnet.wide_resnet101_2": [[360, 376], ["resnet._resnet"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.features.resnet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.features.regnet.RegNetX002.__init__": [[7, 13], ["extractor.BaseModule.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "RegNetX002", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "features", "=", "timm", ".", "create_model", "(", "'regnetx_002'", ")", "\n", "self", ".", "n_features", "=", "368", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.regnet.RegNetX002.forward": [[14, 16], ["regnet.RegNetX002.features.forward_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", ".", "forward_features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.regnet.RegNetY004.__init__": [[18, 24], ["extractor.BaseModule.__init__", "timm.create_model"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "name", ")", ":", "\n", "        ", "super", "(", "RegNetY004", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "features", "=", "timm", ".", "create_model", "(", "'regnety_004'", ")", "\n", "self", ".", "n_features", "=", "440", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.features.regnet.RegNetY004.forward": [[25, 27], ["regnet.RegNetY004.features.forward_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "features", ".", "forward_features", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR10.__init__": [[13, 24], ["torchvision.CIFAR10.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "siamese_transform", "=", "None", ",", "\n", "download", "=", "True", ")", ":", "\n", "        ", "super", "(", "SiameseCIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "download", ")", "\n", "self", ".", "siamese_transform", "=", "siamese_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR10.__getitem__": [[25, 51], ["PIL.Image.fromarray", "int", "cifar.SiameseCIFAR10.transform", "cifar.SiameseCIFAR10.siamese_transform", "cifar.SiameseCIFAR10.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "#img2 = Image.fromarray(img)", "\n", "\n", "# TODO: might save memory if only 1 image is transformed", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "siamese_transform", "is", "not", "None", ":", "\n", "            ", "img2", "=", "self", ".", "siamese_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "[", "img1", ",", "img2", "]", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR10.__len__": [[52, 54], ["torchvision.CIFAR10.__len__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "SiameseCIFAR10", ",", "self", ")", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR100.__init__": [[59, 70], ["torchvision.CIFAR100.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "\n", "siamese_transform", "=", "None", ",", "\n", "download", "=", "True", ")", ":", "\n", "        ", "super", "(", "SiameseCIFAR100", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "train", "=", "train", ",", "\n", "transform", "=", "transform", ",", "\n", "download", "=", "download", ")", "\n", "self", ".", "siamese_transform", "=", "siamese_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR100.__getitem__": [[71, 96], ["PIL.Image.fromarray", "int", "cifar.SiameseCIFAR100.transform", "cifar.SiameseCIFAR100.siamese_transform", "cifar.SiameseCIFAR100.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "targets", "[", "index", "]", ")", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "#img2 = Image.fromarray(img)", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "siamese_transform", "is", "not", "None", ":", "\n", "            ", "img2", "=", "self", ".", "siamese_transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "[", "img1", ",", "img2", "]", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.cifar.SiameseCIFAR100.__len__": [[97, 99], ["torchvision.CIFAR100.__len__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "SiameseCIFAR100", ",", "self", ")", ".", "__len__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.LoadAudio.__init__": [[19, 21], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sample_rate", "=", "16000", ")", ":", "\n", "        ", "self", ".", "sample_rate", "=", "sample_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.LoadAudio.__call__": [[22, 33], ["librosa.load", "numpy.zeros"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "path", "=", "data", "[", "'path'", "]", "\n", "if", "path", ":", "\n", "            ", "samples", ",", "sample_rate", "=", "librosa", ".", "load", "(", "path", ",", "self", ".", "sample_rate", ")", "\n", "", "else", ":", "\n", "# silence", "\n", "            ", "sample_rate", "=", "self", ".", "sample_rate", "\n", "samples", "=", "np", ".", "zeros", "(", "sample_rate", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "data", "[", "'samples'", "]", "=", "samples", "\n", "data", "[", "'sample_rate'", "]", "=", "sample_rate", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.FixAudioLength.__init__": [[37, 39], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "time", "=", "1", ")", ":", "\n", "        ", "self", ".", "time", "=", "time", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.FixAudioLength.__call__": [[40, 49], ["int", "len", "len", "numpy.pad", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "samples", "=", "data", "[", "'samples'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "length", "=", "int", "(", "self", ".", "time", "*", "sample_rate", ")", "\n", "if", "length", "<", "len", "(", "samples", ")", ":", "\n", "            ", "data", "[", "'samples'", "]", "=", "samples", "[", ":", "length", "]", "\n", "", "elif", "length", ">", "len", "(", "samples", ")", ":", "\n", "            ", "data", "[", "'samples'", "]", "=", "np", ".", "pad", "(", "samples", ",", "(", "0", ",", "length", "-", "len", "(", "samples", ")", ")", ",", "\"constant\"", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ChangeAmplitude.__init__": [[53, 55], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "amplitude_range", "=", "(", "0.7", ",", "1.1", ")", ")", ":", "\n", "        ", "self", ".", "amplitude_range", "=", "amplitude_range", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ChangeAmplitude.__call__": [[56, 62], ["transforms_wav.should_apply_transform", "random.uniform"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "data", "[", "'samples'", "]", "=", "data", "[", "'samples'", "]", "*", "random", ".", "uniform", "(", "*", "self", ".", "amplitude_range", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ChangeSpeedAndPitchAudio.__init__": [[66, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_scale", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ChangeSpeedAndPitchAudio.__call__": [[69, 79], ["random.uniform", "numpy.interp().astype", "transforms_wav.should_apply_transform", "numpy.interp", "numpy.arange", "numpy.arange", "len", "len"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "samples", "=", "data", "[", "'samples'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "scale", "=", "random", ".", "uniform", "(", "-", "self", ".", "max_scale", ",", "self", ".", "max_scale", ")", "\n", "speed_fac", "=", "1.0", "/", "(", "1", "+", "scale", ")", "\n", "data", "[", "'samples'", "]", "=", "np", ".", "interp", "(", "np", ".", "arange", "(", "0", ",", "len", "(", "samples", ")", ",", "speed_fac", ")", ",", "np", ".", "arange", "(", "0", ",", "len", "(", "samples", ")", ")", ",", "samples", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.StretchAudio.__init__": [[83, 85], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_scale", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.StretchAudio.__call__": [[86, 93], ["random.uniform", "librosa.effects.time_stretch", "transforms_wav.should_apply_transform"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "scale", "=", "random", ".", "uniform", "(", "-", "self", ".", "max_scale", ",", "self", ".", "max_scale", ")", "\n", "data", "[", "'samples'", "]", "=", "librosa", ".", "effects", ".", "time_stretch", "(", "data", "[", "'samples'", "]", ",", "1", "+", "scale", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.TimeshiftAudio.__init__": [[97, 99], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_shift_seconds", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "max_shift_seconds", "=", "max_shift_seconds", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.TimeshiftAudio.__call__": [[100, 113], ["random.randint", "max", "numpy.pad", "transforms_wav.should_apply_transform", "min", "len"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "samples", "=", "data", "[", "'samples'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "max_shift", "=", "(", "sample_rate", "*", "self", ".", "max_shift_seconds", ")", "\n", "shift", "=", "random", ".", "randint", "(", "-", "max_shift", ",", "max_shift", ")", "\n", "a", "=", "-", "min", "(", "0", ",", "shift", ")", "\n", "b", "=", "max", "(", "0", ",", "shift", ")", "\n", "samples", "=", "np", ".", "pad", "(", "samples", ",", "(", "a", ",", "b", ")", ",", "\"constant\"", ")", "\n", "data", "[", "'samples'", "]", "=", "samples", "[", ":", "len", "(", "samples", ")", "-", "a", "]", "if", "a", "else", "samples", "[", "b", ":", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.AddBackgroundNoise.__init__": [[117, 120], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bg_dataset", ",", "max_percentage", "=", "0.45", ")", ":", "\n", "        ", "self", ".", "bg_dataset", "=", "bg_dataset", "\n", "self", ".", "max_percentage", "=", "max_percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.AddBackgroundNoise.__call__": [[121, 130], ["random.uniform", "transforms_wav.should_apply_transform", "random.choice"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "samples", "=", "data", "[", "'samples'", "]", "\n", "noise", "=", "random", ".", "choice", "(", "self", ".", "bg_dataset", ")", "[", "'samples'", "]", "\n", "percentage", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "max_percentage", ")", "\n", "data", "[", "'samples'", "]", "=", "samples", "*", "(", "1", "-", "percentage", ")", "+", "noise", "*", "percentage", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ToMelSpectrogram.__init__": [[134, 136], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_mels", "=", "32", ")", ":", "\n", "        ", "self", ".", "n_mels", "=", "n_mels", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ToMelSpectrogram.__call__": [[137, 143], ["librosa.feature.melspectrogram", "librosa.power_to_db"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "samples", "=", "data", "[", "'samples'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "s", "=", "librosa", ".", "feature", ".", "melspectrogram", "(", "samples", ",", "sr", "=", "sample_rate", ",", "n_mels", "=", "self", ".", "n_mels", ")", "\n", "data", "[", "'mel_spectrogram'", "]", "=", "librosa", ".", "power_to_db", "(", "s", ",", "ref", "=", "np", ".", "max", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ToTensor.__init__": [[147, 151], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "np_name", ",", "tensor_name", ",", "normalize", "=", "None", ")", ":", "\n", "        ", "self", ".", "np_name", "=", "np_name", "\n", "self", ".", "tensor_name", "=", "tensor_name", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.ToTensor.__call__": [[152, 160], ["torch.FloatTensor"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "tensor", "=", "torch", ".", "FloatTensor", "(", "data", "[", "self", ".", "np_name", "]", ")", "\n", "if", "self", ".", "normalize", "is", "not", "None", ":", "\n", "            ", "mean", ",", "std", "=", "self", ".", "normalize", "\n", "tensor", "-=", "mean", "\n", "tensor", "/=", "std", "\n", "", "data", "[", "self", ".", "tensor_name", "]", "=", "tensor", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform": [[12, 15], ["random.random"], "function", ["None"], ["def", "should_apply_transform", "(", "prob", "=", "0.5", ")", ":", "\n", "    ", "\"\"\"Transforms are only randomly applied with the given probability.\"\"\"", "\n", "return", "random", ".", "random", "(", ")", "<", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.imagenet.SiameseImageNet.__init__": [[13, 22], ["torchvision.ImageNet.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["def", "__init__", "(", "self", ",", "\n", "root", "=", "\"/data/imagenet\"", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "\n", "siamese_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "SiameseImageNet", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "\n", "split", "=", "split", ",", "\n", "transform", "=", "transform", ")", "\n", "self", ".", "siamese_transform", "=", "siamese_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.imagenet.SiameseImageNet.__getitem__": [[23, 47], ["imagenet.SiameseImageNet.loader", "imagenet.SiameseImageNet.transform", "imagenet.SiameseImageNet.siamese_transform", "imagenet.SiameseImageNet.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "samples", "[", "index", "]", "\n", "sample", "=", "self", ".", "loader", "(", "path", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img1", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "if", "self", ".", "siamese_transform", "is", "not", "None", ":", "\n", "            ", "img2", "=", "self", ".", "siamese_transform", "(", "sample", ")", "\n", "\n", "#if self.transform is not None:", "\n", "#    sample = self.transform(sample)", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "[", "img1", ",", "img2", "]", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.imagenet.SiameseImageNet.__len__": [[49, 51], ["torchvision.ImageNet.__len__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "SiameseImageNet", ",", "self", ")", ".", "__len__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SpeechCommandsDataset.__init__": [[27, 68], ["os.path.join", "os.path.join", "os.listdir", "numpy.array", "int", "os.listdir", "range", "os.path.join", "data.append", "os.path.isdir", "len", "len", "int", "os.path.join", "os.path.join.startswith", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "\n", "root", ",", "\n", "split", ",", "\n", "transform", "=", "None", ",", "\n", "classes", "=", "CLASSES_30", ",", "\n", "silence_percentage", "=", "0.05", ",", "\n", "n_unknown_per_class", "=", "5", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "join", "(", "root", ",", "split", ")", "\n", "all_classes", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "folder", ")", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "d", ")", ")", "and", "not", "d", ".", "startswith", "(", "'_'", ")", "]", "\n", "for", "c", "in", "classes", "[", "SILENCE_INDEX", "+", "1", ":", "]", ":", "\n", "            ", "assert", "c", "in", "all_classes", "\n", "\n", "", "class_to_idx", "=", "{", "classes", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "classes", ")", ")", "}", "\n", "for", "c", "in", "all_classes", ":", "\n", "            ", "if", "c", "not", "in", "class_to_idx", ":", "\n", "                ", "class_to_idx", "[", "c", "]", "=", "0", "\n", "\n", "", "", "data", "=", "[", "]", "\n", "for", "c", "in", "all_classes", ":", "\n", "            ", "d", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "c", ")", "\n", "target", "=", "class_to_idx", "[", "c", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "d", ")", ":", "\n", "                ", "path", "=", "os", ".", "path", ".", "join", "(", "d", ",", "f", ")", "\n", "data", ".", "append", "(", "(", "path", ",", "target", ")", ")", "\n", "\n", "", "", "self", ".", "paths", "=", "np", ".", "array", "(", "data", ")", "[", ":", ",", "0", "]", "\n", "self", ".", "unknown_key", "=", "'unknown'", "\n", "# add silence", "\n", "target", "=", "class_to_idx", "[", "'silence'", "]", "\n", "data", "+=", "[", "(", "''", ",", "target", ")", "]", "*", "int", "(", "len", "(", "data", ")", "*", "silence_percentage", ")", "\n", "\n", "if", "split", "==", "'train'", ":", "\n", "# add unknown", "\n", "            ", "if", "SILENCE_INDEX", ">", "0", ":", "\n", "                ", "target", "=", "class_to_idx", "[", "self", ".", "unknown_key", "]", "\n", "data", "+=", "[", "(", "self", ".", "unknown_key", ",", "target", ")", "]", "*", "int", "(", "len", "(", "classes", ")", "*", "n_unknown_per_class", ")", "\n", "\n", "", "", "self", ".", "split", "=", "split", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "transform", "=", "transform", "\n", "#print(class_to_idx)", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SpeechCommandsDataset.__len__": [[70, 72], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SpeechCommandsDataset.__getitem__": [[73, 87], ["torch.unsqueeze", "numpy.random.randint", "speech_commands_dataset.SpeechCommandsDataset.transform", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path", ",", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "split", "==", "'train'", "and", "path", "==", "self", ".", "unknown_key", ":", "\n", "            ", "rand_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "paths", ")", ")", "\n", "path", "=", "self", ".", "paths", "[", "rand_index", "]", "\n", "\n", "", "data", "=", "{", "'path'", ":", "path", ",", "'target'", ":", "target", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "\n", "", "x", "=", "data", "[", "'input'", "]", "\n", "x", "=", "torch", ".", "unsqueeze", "(", "x", ",", "0", ")", "\n", "return", "x", ",", "data", "[", "'target'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SpeechCommandsDataset.make_weights_for_balanced_classes": [[88, 102], ["len", "numpy.zeros", "float", "numpy.zeros", "enumerate", "sum", "len"], "methods", ["None"], ["", "def", "make_weights_for_balanced_classes", "(", "self", ")", ":", "\n", "        ", "\"\"\"adopted from https://discuss.pytorch.org/t/balanced-sampling-between-classes-with-torchvision-dataloader/2703/3\"\"\"", "\n", "\n", "nclasses", "=", "len", "(", "self", ".", "classes", ")", "\n", "count", "=", "np", ".", "zeros", "(", "nclasses", ")", "\n", "for", "item", "in", "self", ".", "data", ":", "\n", "            ", "count", "[", "item", "[", "1", "]", "]", "+=", "1", "\n", "\n", "", "N", "=", "float", "(", "sum", "(", "count", ")", ")", "\n", "weight_per_class", "=", "N", "/", "count", "\n", "weight", "=", "np", ".", "zeros", "(", "len", "(", "self", ")", ")", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "self", ".", "data", ")", ":", "\n", "            ", "weight", "[", "idx", "]", "=", "weight_per_class", "[", "item", "[", "1", "]", "]", "\n", "", "return", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SiameseSpeechCommandsDataset.__init__": [[104, 113], ["speech_commands_dataset.SpeechCommandsDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__"], ["    ", "def", "__init__", "(", "self", ",", "\n", "root", "=", "\"/data/speech/speech_commands/dataset\"", ",", "\n", "split", "=", "'train'", ",", "\n", "transform", "=", "None", ",", "\n", "siamese_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "SiameseSpeechCommandsDataset", ",", "self", ")", ".", "__init__", "(", "root", "=", "root", ",", "\n", "split", "=", "split", ",", "\n", "transform", "=", "transform", ")", "\n", "self", ".", "siamese_transform", "=", "siamese_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SiameseSpeechCommandsDataset.__getitem__": [[114, 140], ["torch.unsqueeze", "torch.unsqueeze", "numpy.random.randint", "speech_commands_dataset.SiameseSpeechCommandsDataset.transform", "speech_commands_dataset.SiameseSpeechCommandsDataset.siamese_transform", "len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (sample, target) where target is class_index of the target class.\n        \"\"\"", "\n", "path", ",", "target", "=", "self", ".", "data", "[", "index", "]", "\n", "if", "self", ".", "split", "==", "'train'", "and", "path", "==", "self", ".", "unknown_key", ":", "\n", "            ", "rand_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "self", ".", "paths", ")", ")", "\n", "path", "=", "self", ".", "paths", "[", "rand_index", "]", "\n", "\n", "", "data", "=", "{", "'path'", ":", "path", ",", "'target'", ":", "target", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data1", "=", "self", ".", "transform", "(", "data", ")", "\n", "\n", "", "if", "self", ".", "siamese_transform", "is", "not", "None", ":", "\n", "            ", "data2", "=", "self", ".", "siamese_transform", "(", "data", ")", "\n", "\n", "", "x1", "=", "data1", "[", "'input'", "]", "\n", "x1", "=", "torch", ".", "unsqueeze", "(", "x1", ",", "0", ")", "\n", "x2", "=", "data2", "[", "'input'", "]", "\n", "x2", "=", "torch", ".", "unsqueeze", "(", "x2", ",", "0", ")", "\n", "return", "[", "x1", ",", "x2", "]", ",", "data1", "[", "'target'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.SiameseSpeechCommandsDataset.__len__": [[142, 144], ["speech_commands_dataset.SpeechCommandsDataset.__len__"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__len__"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "super", "(", "SiameseSpeechCommandsDataset", ",", "self", ")", ".", "__len__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__init__": [[149, 165], ["numpy.hstack", "int", "samples[].reshape", "os.path.join", "librosa.load", "numpy.hstack.append", "len", "os.listdir", "os.path.isfile", "d.endswith", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "folder", ",", "transform", "=", "None", ",", "sample_rate", "=", "16000", ",", "sample_length", "=", "1", ",", "classes", "=", "CLASSES_30", ")", ":", "\n", "        ", "audio_files", "=", "[", "d", "for", "d", "in", "os", ".", "listdir", "(", "folder", ")", "if", "os", ".", "path", ".", "isfile", "(", "os", ".", "path", ".", "join", "(", "folder", ",", "d", ")", ")", "and", "d", ".", "endswith", "(", "'.wav'", ")", "]", "\n", "samples", "=", "[", "]", "\n", "for", "f", "in", "audio_files", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f", ")", "\n", "s", ",", "sr", "=", "librosa", ".", "load", "(", "path", ",", "sample_rate", ")", "\n", "samples", ".", "append", "(", "s", ")", "\n", "\n", "", "samples", "=", "np", ".", "hstack", "(", "samples", ")", "\n", "c", "=", "int", "(", "sample_rate", "*", "sample_length", ")", "\n", "r", "=", "len", "(", "samples", ")", "//", "c", "\n", "self", ".", "samples", "=", "samples", "[", ":", "r", "*", "c", "]", ".", "reshape", "(", "-", "1", ",", "c", ")", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "classes", "=", "classes", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "path", "=", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__len__": [[166, 168], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.speech_commands_dataset.BackgroundNoiseDataset.__getitem__": [[169, 176], ["speech_commands_dataset.BackgroundNoiseDataset.transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data", "=", "{", "'samples'", ":", "self", ".", "samples", "[", "index", "]", ",", "'sample_rate'", ":", "self", ".", "sample_rate", ",", "'target'", ":", "SILENCE_INDEX", ",", "'path'", ":", "self", ".", "path", "}", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "data", "=", "self", ".", "transform", "(", "data", ")", "\n", "\n", "", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.AutoAugment.__init__": [[97, 104], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", "=", "\"cifar10\"", ")", ":", "\n", "        ", "print", "(", "\"Auto Augment policy: \"", ",", "dataset", ")", "\n", "if", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "dataset", "=", "\"cifar10\"", "\n", "", "elif", "dataset", "==", "\"svhn-core\"", ":", "\n", "            ", "dataset", "=", "\"svhn\"", "\n", "", "self", ".", "policies", "=", "policies", "[", "dataset", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.AutoAugment.__call__": [[106, 109], ["auto_augment.apply_policy", "random.randrange", "len"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.apply_policy"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "img", "=", "apply_policy", "(", "img", ",", "self", ".", "policies", "[", "random", ".", "randrange", "(", "len", "(", "self", ".", "policies", ")", ")", "]", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.RandAugment.__init__": [[136, 139], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "prob", "=", "0.5", ",", "N", "=", "2", ")", ":", "\n", "        ", "self", ".", "N", "=", "N", "\n", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.RandAugment.__call__": [[140, 144], ["auto_augment.apply_randaug_policy", "random.random"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.apply_randaug_policy"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", ">", "self", ".", "prob", ":", "\n", "            ", "return", "img", "\n", "", "return", "apply_randaug_policy", "(", "img", ",", "N", "=", "self", ".", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Cutout.__init__": [[313, 315], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Cutout.__call__": [[316, 343], ["img.size", "img.size", "numpy.ones", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "torch.from_numpy", "mask.expand_as.expand_as.expand_as"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with length x length cut out of it.\n        \"\"\"", "\n", "h", "=", "img", ".", "size", "(", "1", ")", "\n", "w", "=", "img", ".", "size", "(", "2", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Cutout_PIL.__init__": [[350, 353], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "length", "=", "16", ",", "n_holes", "=", "1", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Cutout_PIL.__call__": [[354, 379], ["numpy.array", "range", "PIL.Image.fromarray", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (H, W, C).\n        Returns:\n            Tensor: Image with length x length cut out of it.\n        \"\"\"", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "\n", "h", "=", "img", ".", "shape", "[", "0", "]", "\n", "w", "=", "img", ".", "shape", "[", "1", "]", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "img", "[", "y1", ":", "y2", ",", "x1", ":", "x2", ",", ":", "]", "=", "0.", "\n", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.EfficientNetRandomCrop.__init__": [[382, 398], ["auto_augment.EfficientNetCenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "imgsize", ",", "\n", "min_covered", "=", "0.1", ",", "\n", "aspect_ratio_range", "=", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", ",", "\n", "area_range", "=", "(", "0.08", ",", "1.0", ")", ",", "\n", "max_attempts", "=", "10", ")", ":", "\n", "        ", "assert", "0.0", "<", "min_covered", "\n", "assert", "0", "<", "aspect_ratio_range", "[", "0", "]", "<=", "aspect_ratio_range", "[", "1", "]", "\n", "assert", "0", "<", "area_range", "[", "0", "]", "<=", "area_range", "[", "1", "]", "\n", "assert", "1", "<=", "max_attempts", "\n", "\n", "self", ".", "min_covered", "=", "min_covered", "\n", "self", ".", "aspect_ratio_range", "=", "aspect_ratio_range", "\n", "self", ".", "area_range", "=", "area_range", "\n", "self", ".", "max_attempts", "=", "max_attempts", "\n", "self", ".", "_fallback", "=", "EfficientNetCenterCrop", "(", "imgsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.EfficientNetRandomCrop.__call__": [[399, 444], ["range", "auto_augment.EfficientNetRandomCrop._fallback", "random.uniform", "int", "int", "int", "int", "random.randint", "random.randint", "img.crop", "round", "round", "int", "round", "round", "auto_augment.EfficientNetRandomCrop._fallback", "math.sqrt", "math.sqrt", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# https://github.com/tensorflow/tensorflow/blob/", "\n", "# 9274bcebb31322370139467039034f8ff852b004/", "\n", "# tensorflow/core/kernels/sample_distorted_bounding_box_op.cc#L111", "\n", "        ", "original_width", ",", "original_height", "=", "img", ".", "size", "\n", "min_area", "=", "self", ".", "area_range", "[", "0", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "max_area", "=", "self", ".", "area_range", "[", "1", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "max_attempts", ")", ":", "\n", "            ", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "aspect_ratio_range", ")", "\n", "height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "min_area", "/", "aspect_ratio", ")", ")", ")", "\n", "max_height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "max_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                ", "max_height", "=", "(", "original_width", "+", "0.5", "-", "1e-7", ")", "/", "aspect_ratio", "\n", "max_height", "=", "int", "(", "max_height", ")", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                    ", "max_height", "-=", "1", "\n", "\n", "", "", "if", "max_height", ">", "original_height", ":", "\n", "                ", "max_height", "=", "original_height", "\n", "\n", "", "if", "height", ">=", "max_height", ":", "\n", "                ", "height", "=", "max_height", "\n", "\n", "", "height", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "height", ",", "max_height", ")", ")", ")", "\n", "width", "=", "int", "(", "round", "(", "height", "*", "aspect_ratio", ")", ")", "\n", "area", "=", "width", "*", "height", "\n", "\n", "if", "area", "<", "min_area", "or", "area", ">", "max_area", ":", "\n", "                ", "continue", "\n", "", "if", "width", ">", "original_width", "or", "height", ">", "original_height", ":", "\n", "                ", "continue", "\n", "", "if", "area", "<", "self", ".", "min_covered", "*", "(", "original_width", "*", "original_height", ")", ":", "\n", "                ", "continue", "\n", "", "if", "width", "==", "original_width", "and", "height", "==", "original_height", ":", "\n", "                ", "return", "self", ".", "_fallback", "(", "img", ")", "\n", "# https://github.com/tensorflow/tpu/blob/master/models/", "\n", "# official/efficientnet/preprocessing.py#L102", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "original_width", "-", "width", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "original_height", "-", "height", ")", "\n", "return", "img", ".", "crop", "(", "(", "x", ",", "y", ",", "x", "+", "width", ",", "y", "+", "height", ")", ")", "\n", "\n", "", "return", "self", ".", "_fallback", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.EfficientNetCenterCrop.__init__": [[447, 449], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgsize", ")", ":", "\n", "        ", "self", ".", "imgsize", "=", "imgsize", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.EfficientNetCenterCrop.__call__": [[450, 470], ["min", "int", "int", "img.crop", "round", "round", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Crop the given PIL Image and resize it to desired size.\n\n        Args:\n            img (PIL Image): Image to be cropped. \n                (0,0) denotes the top left corner of the image.\n            output_size (sequence or int): (height, width) of the crop box. If int,\n                it is used for both directions\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "image_short", "=", "min", "(", "image_width", ",", "image_height", ")", "\n", "\n", "crop_size", "=", "float", "(", "self", ".", "imgsize", ")", "/", "(", "self", ".", "imgsize", "+", "32", ")", "*", "image_short", "\n", "\n", "crop_height", ",", "crop_width", "=", "crop_size", ",", "crop_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_width", ",", "crop_top", "+", "crop_height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Lighting.__init__": [[474, 478], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "alphastd", ",", "eigval", ",", "eigvec", ")", ":", "\n", "        ", "self", ".", "alphastd", "=", "alphastd", "\n", "self", ".", "eigval", "=", "torch", ".", "Tensor", "(", "eigval", ")", "\n", "self", ".", "eigvec", "=", "torch", ".", "Tensor", "(", "eigvec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.Lighting.__call__": [[479, 490], ["img.new().resize_().normal_", "auto_augment.Lighting.eigvec.type_as().clone().mul().mul().sum().squeeze", "img.add", "auto_augment.Lighting.view().expand_as", "img.new().resize_", "auto_augment.Lighting.eigvec.type_as().clone().mul().mul().sum", "auto_augment.Lighting.view", "img.new", "auto_augment.Lighting.eigvec.type_as().clone().mul().mul", "auto_augment.Lighting.eigval.view().expand", "auto_augment.Lighting.eigvec.type_as().clone().mul", "img.new().resize_().normal_.view().expand", "auto_augment.Lighting.eigval.view", "auto_augment.Lighting.eigvec.type_as().clone", "img.new().resize_().normal_.view", "auto_augment.Lighting.eigvec.type_as"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.add"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "if", "self", ".", "alphastd", "==", "0", ":", "\n", "            ", "return", "img", "\n", "\n", "", "alpha", "=", "img", ".", "new", "(", ")", ".", "resize_", "(", "3", ")", ".", "normal_", "(", "0", ",", "self", ".", "alphastd", ")", "\n", "rgb", "=", "self", ".", "eigvec", ".", "type_as", "(", "img", ")", ".", "clone", "(", ")", ".", "mul", "(", "alpha", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "mul", "(", "self", ".", "eigval", ".", "view", "(", "1", ",", "3", ")", ".", "expand", "(", "3", ",", "3", ")", ")", ".", "sum", "(", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "img", ".", "add", "(", "rgb", ".", "view", "(", "3", ",", "1", ",", "1", ")", ".", "expand_as", "(", "img", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.apply_randaug_policy": [[146, 156], ["list", "numpy.random.choice", "operations.keys", "len", "numpy.random.randint"], "function", ["None"], ["", "", "def", "apply_randaug_policy", "(", "img", ",", "N", "=", "2", ")", ":", "\n", "    ", "keys", "=", "list", "(", "operations", ".", "keys", "(", ")", ")", "\n", "indexes", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "keys", ")", ",", "N", ",", "replace", "=", "True", ")", "\n", "\n", "for", "index", "in", "indexes", ":", "\n", "        ", "key", "=", "keys", "[", "index", "]", "\n", "mag", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "11", ")", "\n", "img", "=", "operations", "[", "key", "]", "(", "img", ",", "mag", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.apply_policy": [[158, 165], ["range", "random.random"], "function", ["None"], ["", "def", "apply_policy", "(", "img", ",", "policy", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "        ", "p", "=", "policy", "[", "i", "]", "\n", "if", "random", ".", "random", "(", ")", "<", "p", "[", "1", "]", ":", "\n", "            ", "img", "=", "operations", "[", "p", "[", "0", "]", "]", "(", "img", ",", "p", "[", "2", "]", ")", "\n", "\n", "", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level": [[167, 173], ["int", "random.random"], "function", ["None"], ["", "def", "level", "(", "low", ",", "high", ",", "magnitude", ",", "random_mirror", "=", "True", ",", "asint", "=", "False", ")", ":", "\n", "    ", "v", "=", "(", "magnitude", "/", "10.", ")", "*", "(", "high", "-", "low", ")", "+", "low", "\n", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "int", "(", "v", ")", "if", "asint", "else", "v", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.shear_level": [[175, 179], ["auto_augment.level"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "shear_level", "(", "magnitude", ")", ":", "\n", "    ", "low", "=", "0.", "\n", "high", "=", "0.3", "\n", "return", "level", "(", "low", ",", "high", ",", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.shear_x": [[181, 184], ["auto_augment.shear_level", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.shear_level"], ["", "def", "shear_x", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "shear_level", "(", "magnitude", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.shear_y": [[186, 189], ["auto_augment.shear_level", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.shear_level"], ["", "def", "shear_y", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "shear_level", "(", "magnitude", ")", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level": [[191, 195], ["auto_augment.level"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "translate_level", "(", "magnitude", ")", ":", "\n", "    ", "low", "=", "0.", "\n", "high", "=", "0.45", "\n", "return", "level", "(", "low", ",", "high", ",", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level_abs": [[197, 201], ["auto_augment.level"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "translate_level_abs", "(", "magnitude", ")", ":", "\n", "    ", "low", "=", "0.", "\n", "high", "=", "10.", "\n", "return", "level", "(", "low", ",", "high", ",", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_x": [[203, 207], ["auto_augment.translate_level", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level"], ["", "def", "translate_x", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "translate_level", "(", "magnitude", ")", "\n", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_x_abs": [[209, 213], ["auto_augment.translate_level_abs", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level_abs"], ["", "def", "translate_x_abs", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "translate_level_abs", "(", "magnitude", ")", "\n", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_y": [[215, 219], ["auto_augment.translate_level", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level"], ["", "def", "translate_y", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "translate_level", "(", "magnitude", ")", "\n", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_y_abs": [[221, 225], ["auto_augment.translate_level_abs", "img.transform"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.translate_level_abs"], ["", "def", "translate_y_abs", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "translate_level_abs", "(", "magnitude", ")", "\n", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rotate_level": [[227, 231], ["auto_augment.level"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "rotate_level", "(", "magnitude", ")", ":", "\n", "    ", "low", "=", "0.", "\n", "high", "=", "30.", "\n", "return", "level", "(", "low", ",", "high", ",", "magnitude", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rotate": [[233, 236], ["auto_augment.rotate_level", "img.rotate"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rotate_level", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rotate"], ["", "def", "rotate", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "v", "=", "rotate_level", "(", "magnitude", ")", "\n", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.auto_contrast": [[239, 242], ["PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "auto_contrast", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.invert": [[244, 247], ["PIL.ImageOps.invert"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.invert"], ["", "def", "invert", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "invert", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.equalize": [[249, 252], ["PIL.ImageOps.equalize"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.equalize"], ["", "def", "equalize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "img", "=", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.solarize": [[254, 258], ["auto_augment.level", "PIL.ImageOps.solarize"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.solarize"], ["", "def", "solarize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0", ",", "256", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "False", ")", "\n", "img", "=", "ImageOps", ".", "solarize", "(", "img", ",", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.solarize_add": [[259, 265], ["numpy.array", "numpy.clip().astype", "PIL.Image.fromarray", "np.array.astype", "numpy.where", "numpy.clip"], "function", ["None"], ["", "def", "solarize_add", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "threshold", "=", "128", "\n", "image", "=", "np", ".", "array", "(", "img", ")", "\n", "added_image", "=", "image", ".", "astype", "(", "np", ".", "int64", ")", "+", "magnitude", "\n", "added_image", "=", "np", ".", "clip", "(", "added_image", ",", "0", ",", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "Image", ".", "fromarray", "(", "np", ".", "where", "(", "image", "<", "threshold", ",", "added_image", ",", "image", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.posterize": [[268, 272], ["auto_augment.level", "PIL.ImageOps.posterize"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.posterize"], ["", "def", "posterize", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "4", ",", "8", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "True", ")", "\n", "img", "=", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.posterize2": [[273, 277], ["auto_augment.level", "PIL.ImageOps.posterize"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level", "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.posterize"], ["", "def", "posterize2", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0", ",", "4", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "True", ")", "\n", "img", "=", "ImageOps", ".", "posterize", "(", "img", ",", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.contrast": [[279, 283], ["auto_augment.level", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "contrast", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0.1", ",", "1.9", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "False", ")", "\n", "img", "=", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.color": [[286, 290], ["auto_augment.level", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "color", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0.1", ",", "1.9", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "False", ")", "\n", "img", "=", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.brightness": [[293, 297], ["auto_augment.level", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "brightness", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0.1", ",", "1.9", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "False", ")", "\n", "img", "=", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.sharpness": [[300, 304], ["auto_augment.level", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.level"], ["", "def", "sharpness", "(", "img", ",", "magnitude", ")", ":", "\n", "    ", "magnitude", "=", "level", "(", "0.1", ",", "1.9", ",", "magnitude", ",", "random_mirror", "=", "False", ",", "asint", "=", "False", ")", "\n", "img", "=", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "magnitude", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.cutmix": [[492, 503], ["numpy.random.beta", "torch.randperm().to", "auto_augment.rand_bbox", "x.size", "torch.randperm", "x.size", "x.size", "x.size"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rand_bbox"], ["", "", "def", "cutmix", "(", "x", ",", "target", ",", "beta", ",", "device", ")", ":", "\n", "# generate mixed sample", "\n", "        ", "lam", "=", "np", ".", "random", ".", "beta", "(", "beta", ",", "beta", ")", "\n", "rand_index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", ")", "[", "0", "]", ")", ".", "to", "(", "device", ")", "\n", "target_a", "=", "target", "\n", "target_b", "=", "target", "[", "rand_index", "]", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "x", ".", "size", "(", ")", ",", "lam", ")", "\n", "x", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "x", "[", "rand_index", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "\n", "# adjust lambda to exactly match pixel ratio", "\n", "lam", "=", "1", "-", "(", "(", "bbx2", "-", "bbx1", ")", "*", "(", "bby2", "-", "bby1", ")", "/", "(", "x", ".", "size", "(", ")", "[", "-", "1", "]", "*", "x", ".", "size", "(", ")", "[", "-", "2", "]", ")", ")", "\n", "return", "x", ",", "target_a", ",", "target_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.rand_bbox": [[506, 523], ["numpy.sqrt", "numpy.int", "numpy.int", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "function", ["None"], ["", "def", "rand_bbox", "(", "size", ",", "lam", ")", ":", "\n", "    ", "W", "=", "size", "[", "2", "]", "\n", "H", "=", "size", "[", "3", "]", "\n", "cut_rat", "=", "np", ".", "sqrt", "(", "1.", "-", "lam", ")", "\n", "cut_w", "=", "np", ".", "int", "(", "W", "*", "cut_rat", ")", "\n", "cut_h", "=", "np", ".", "int", "(", "H", "*", "cut_rat", ")", "\n", "\n", "# uniform", "\n", "cx", "=", "np", ".", "random", ".", "randint", "(", "W", ")", "\n", "cy", "=", "np", ".", "random", ".", "randint", "(", "H", ")", "\n", "\n", "bbx1", "=", "np", ".", "clip", "(", "cx", "-", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby1", "=", "np", ".", "clip", "(", "cy", "-", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "bbx2", "=", "np", ".", "clip", "(", "cx", "+", "cut_w", "//", "2", ",", "0", ",", "W", ")", "\n", "bby2", "=", "np", ".", "clip", "(", "cy", "+", "cut_h", "//", "2", ",", "0", ",", "H", ")", "\n", "\n", "return", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.auto_augment.mixup": [[525, 538], ["torch.randperm().to", "numpy.random.beta", "x.size", "torch.randperm"], "function", ["None"], ["", "def", "mixup", "(", "x", ",", "target", ",", "alpha", ",", "device", ")", ":", "\n", "    ", "'''Returns mixed inputs, pairs of targets, and lambda'''", "\n", "if", "alpha", ">", "0", ":", "\n", "        ", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "alpha", ")", "\n", "", "else", ":", "\n", "        ", "lam", "=", "1", "\n", "\n", "", "batch_size", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "index", "=", "torch", ".", "randperm", "(", "batch_size", ")", ".", "to", "(", "device", ")", "\n", "\n", "x", "=", "lam", "*", "x", "+", "(", "1", "-", "lam", ")", "*", "x", "[", "index", ",", ":", "]", "\n", "target_a", ",", "target_b", "=", "target", ",", "target", "[", "index", "]", "\n", "return", "x", ",", "target_a", ",", "target_b", ",", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.EfficientNetRandomCrop.__init__": [[189, 200], ["transform.EfficientNetCenterCrop"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgsize", ",", "min_covered", "=", "0.1", ",", "aspect_ratio_range", "=", "(", "3.", "/", "4", ",", "4.", "/", "3", ")", ",", "area_range", "=", "(", "0.08", ",", "1.0", ")", ",", "max_attempts", "=", "10", ")", ":", "\n", "        ", "assert", "0.0", "<", "min_covered", "\n", "assert", "0", "<", "aspect_ratio_range", "[", "0", "]", "<=", "aspect_ratio_range", "[", "1", "]", "\n", "assert", "0", "<", "area_range", "[", "0", "]", "<=", "area_range", "[", "1", "]", "\n", "assert", "1", "<=", "max_attempts", "\n", "\n", "self", ".", "min_covered", "=", "min_covered", "\n", "self", ".", "aspect_ratio_range", "=", "aspect_ratio_range", "\n", "self", ".", "area_range", "=", "area_range", "\n", "self", ".", "max_attempts", "=", "max_attempts", "\n", "self", ".", "_fallback", "=", "EfficientNetCenterCrop", "(", "imgsize", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.EfficientNetRandomCrop.__call__": [[201, 242], ["range", "transform.EfficientNetRandomCrop._fallback", "random.uniform", "int", "int", "int", "int", "random.randint", "random.randint", "img.crop", "round", "round", "int", "round", "round", "transform.EfficientNetRandomCrop._fallback", "math.sqrt", "math.sqrt", "random.uniform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "# https://github.com/tensorflow/tensorflow/blob/9274bcebb31322370139467039034f8ff852b004/tensorflow/core/kernels/sample_distorted_bounding_box_op.cc#L111", "\n", "        ", "original_width", ",", "original_height", "=", "img", ".", "size", "\n", "min_area", "=", "self", ".", "area_range", "[", "0", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "max_area", "=", "self", ".", "area_range", "[", "1", "]", "*", "(", "original_width", "*", "original_height", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "max_attempts", ")", ":", "\n", "            ", "aspect_ratio", "=", "random", ".", "uniform", "(", "*", "self", ".", "aspect_ratio_range", ")", "\n", "height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "min_area", "/", "aspect_ratio", ")", ")", ")", "\n", "max_height", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "max_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                ", "max_height", "=", "(", "original_width", "+", "0.5", "-", "1e-7", ")", "/", "aspect_ratio", "\n", "max_height", "=", "int", "(", "max_height", ")", "\n", "if", "max_height", "*", "aspect_ratio", ">", "original_width", ":", "\n", "                    ", "max_height", "-=", "1", "\n", "\n", "", "", "if", "max_height", ">", "original_height", ":", "\n", "                ", "max_height", "=", "original_height", "\n", "\n", "", "if", "height", ">=", "max_height", ":", "\n", "                ", "height", "=", "max_height", "\n", "\n", "", "height", "=", "int", "(", "round", "(", "random", ".", "uniform", "(", "height", ",", "max_height", ")", ")", ")", "\n", "width", "=", "int", "(", "round", "(", "height", "*", "aspect_ratio", ")", ")", "\n", "area", "=", "width", "*", "height", "\n", "\n", "if", "area", "<", "min_area", "or", "area", ">", "max_area", ":", "\n", "                ", "continue", "\n", "", "if", "width", ">", "original_width", "or", "height", ">", "original_height", ":", "\n", "                ", "continue", "\n", "", "if", "area", "<", "self", ".", "min_covered", "*", "(", "original_width", "*", "original_height", ")", ":", "\n", "                ", "continue", "\n", "", "if", "width", "==", "original_width", "and", "height", "==", "original_height", ":", "\n", "                ", "return", "self", ".", "_fallback", "(", "img", ")", "# https://github.com/tensorflow/tpu/blob/master/models/official/efficientnet/preprocessing.py#L102", "\n", "\n", "", "x", "=", "random", ".", "randint", "(", "0", ",", "original_width", "-", "width", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "original_height", "-", "height", ")", "\n", "return", "img", ".", "crop", "(", "(", "x", ",", "y", ",", "x", "+", "width", ",", "y", "+", "height", ")", ")", "\n", "\n", "", "return", "self", ".", "_fallback", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.EfficientNetCenterCrop.__init__": [[245, 247], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "imgsize", ")", ":", "\n", "        ", "self", ".", "imgsize", "=", "imgsize", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.EfficientNetCenterCrop.__call__": [[248, 267], ["min", "int", "int", "img.crop", "round", "round", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"Crop the given PIL Image and resize it to desired size.\n\n        Args:\n            img (PIL Image): Image to be cropped. (0,0) denotes the top left corner of the image.\n            output_size (sequence or int): (height, width) of the crop box. If int,\n                it is used for both directions\n        Returns:\n            PIL Image: Cropped image.\n        \"\"\"", "\n", "image_width", ",", "image_height", "=", "img", ".", "size", "\n", "image_short", "=", "min", "(", "image_width", ",", "image_height", ")", "\n", "\n", "crop_size", "=", "float", "(", "self", ".", "imgsize", ")", "/", "(", "self", ".", "imgsize", "+", "32", ")", "*", "image_short", "\n", "\n", "crop_height", ",", "crop_width", "=", "crop_size", ",", "crop_size", "\n", "crop_top", "=", "int", "(", "round", "(", "(", "image_height", "-", "crop_height", ")", "/", "2.", ")", ")", "\n", "crop_left", "=", "int", "(", "round", "(", "(", "image_width", "-", "crop_width", ")", "/", "2.", ")", ")", "\n", "return", "img", ".", "crop", "(", "(", "crop_left", ",", "crop_top", ",", "crop_left", "+", "crop_width", ",", "crop_top", "+", "crop_height", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.speech_augment": [[36, 67], ["torchvision.Compose", "speech.BackgroundNoiseDataset", "stft.AddBackgroundNoiseOnSTFT", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "wav.ChangeAmplitude", "wav.ChangeSpeedAndPitchAudio", "wav.FixAudioLength", "stft.ToSTFT", "stft.StretchAudioOnSTFT", "stft.TimeshiftAudioOnSTFT", "stft.FixSTFTDimension", "stft.ToMelSpectrogramFromSTFT", "stft.DeleteSTFT", "wav.ToTensor", "wav.LoadAudio", "wav.ToMelSpectrogram", "wav.ToTensor", "wav.LoadAudio", "wav.FixAudioLength"], "function", ["None"], ["def", "speech_augment", "(", "bg_noise_dir", ",", "\n", "n_mels", "=", "32", ")", ":", "\n", "    ", "from", ".", "import", "transforms_stft", "as", "stft", "\n", "from", ".", "import", "transforms_wav", "as", "wav", "\n", "from", ".", "import", "speech_commands_dataset", "as", "speech", "\n", "data_aug_transform", "=", "transforms", ".", "Compose", "(", "[", "wav", ".", "ChangeAmplitude", "(", ")", ",", "\n", "wav", ".", "ChangeSpeedAndPitchAudio", "(", ")", ",", "\n", "wav", ".", "FixAudioLength", "(", ")", ",", "\n", "stft", ".", "ToSTFT", "(", ")", ",", "\n", "stft", ".", "StretchAudioOnSTFT", "(", ")", ",", "\n", "stft", ".", "TimeshiftAudioOnSTFT", "(", ")", ",", "\n", "stft", ".", "FixSTFTDimension", "(", ")", "]", ")", "\n", "bg_dataset", "=", "speech", ".", "BackgroundNoiseDataset", "(", "bg_noise_dir", ",", "transform", "=", "data_aug_transform", ")", "\n", "add_bg_noise", "=", "stft", ".", "AddBackgroundNoiseOnSTFT", "(", "bg_dataset", ")", "\n", "train_feature_transform", "=", "transforms", ".", "Compose", "(", "[", "stft", ".", "ToMelSpectrogramFromSTFT", "(", "n_mels", "=", "n_mels", ")", ",", "\n", "stft", ".", "DeleteSTFT", "(", ")", ",", "\n", "wav", ".", "ToTensor", "(", "'mel_spectrogram'", ",", "'input'", ")", "]", ")", "\n", "\n", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "wav", ".", "LoadAudio", "(", ")", ",", "\n", "data_aug_transform", ",", "\n", "add_bg_noise", ",", "\n", "train_feature_transform", "]", ")", "\n", "\n", "test_feature_transform", "=", "transforms", ".", "Compose", "(", "[", "wav", ".", "ToMelSpectrogram", "(", "n_mels", "=", "n_mels", ")", ",", "\n", "wav", ".", "ToTensor", "(", "'mel_spectrogram'", ",", "'input'", ")", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "wav", ".", "LoadAudio", "(", ")", ",", "\n", "wav", ".", "FixAudioLength", "(", ")", ",", "\n", "test_feature_transform", "]", ")", "\n", "\n", "return", "{", "'train'", ":", "transform_train", ",", "'test'", ":", "transform_test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.data_augment": [[69, 160], ["torchvision.Compose", "transform.speech_augment", "print", "transforms.Compose.append", "print", "transforms.Compose.extend", "torchvision.Compose", "print", "transforms.Compose.extend", "torchvision.Compose", "print", "transforms.Compose.append", "print", "print", "auto_augment.AutoAugment", "transforms.Compose.append", "print", "auto_augment.Cutout", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "auto_augment.RandAugment", "torchvision.ColorJitter", "torchvision.ToTensor", "auto_augment.Lighting", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.speech_augment"], ["", "def", "data_augment", "(", "dataset", ",", "\n", "length", ",", "\n", "cutout", "=", "False", ",", "\n", "auto_augment", "=", "False", ",", "\n", "rand_augment", "=", "False", ",", "\n", "rand_augment_mag", "=", "5.0", ",", "\n", "no_basic_augment", "=", "False", ",", "\n", "bg_noise_dir", "=", "None", ",", "\n", "train_imagenet_size", "=", "224", ",", "\n", "test_imagenet_size", "=", "224", ")", ":", "\n", "\n", "    ", "if", "dataset", "==", "\"speech_commands\"", ":", "\n", "        ", "return", "speech_augment", "(", "bg_noise_dir", ")", "\n", "\n", "", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "normalize", "=", "imagenet_normalize", "\n", "", "elif", "dataset", "==", "\"svhn\"", ":", "\n", "        ", "normalize", "=", "svhn_normalize", "\n", "", "else", ":", "\n", "        ", "normalize", "=", "cifar_normalize", "\n", "\n", "# SVHN on Wide ResNet has no pre-processing ", "\n", "# https://arxiv.org/pdf/1605.07146.pdf", "\n", "# dropout = 0.4 is used", "\n", "#if no_basic_augment or dataset == \"svhn\" or dataset == \"svhn-core\":", "\n", "", "if", "no_basic_augment", ":", "\n", "        ", "transform_train", "=", "[", "]", "\n", "print", "(", "\"No basic augment\"", ")", "\n", "", "else", ":", "\n", "# imagenet baseline transform from: ", "\n", "# https://github.com/clovaai/CutMix-PyTorch", "\n", "        ", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "            ", "transform_train", "=", "[", "\n", "#augment.EfficientNetRandomCrop(input_size),", "\n", "#transforms.Resize((input_size, input_size), interpolation=Image.BICUBIC),", "\n", "transforms", ".", "RandomResizedCrop", "(", "train_imagenet_size", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "transform_train", "=", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "]", "\n", "print", "(", "\"RandomCrop + RandomHorizontalFlip\"", ")", "\n", "", "", "if", "auto_augment", ":", "\n", "        ", "transform_train", ".", "append", "(", "augment", ".", "AutoAugment", "(", "dataset", "=", "dataset", ")", ")", "\n", "print", "(", "\"AutoAugment\"", ")", "\n", "", "elif", "rand_augment", ":", "\n", "        ", "transform_train", ".", "append", "(", "augment", ".", "RandAugment", "(", ")", ")", "\n", "print", "(", "\"RandAugment\"", ")", "\n", "\n", "", "if", "dataset", "==", "\"imagenet\"", ":", "\n", "        ", "transform_train", ".", "extend", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "0.4", ",", "\n", "contrast", "=", "0.4", ",", "\n", "saturation", "=", "0.4", ",", "\n", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "augment", ".", "Lighting", "(", "0.1", ",", "_IMAGENET_PCA", "[", "'eigval'", "]", ",", "_IMAGENET_PCA", "[", "'eigvec'", "]", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "#EfficientNetCenterCrop(input_size),", "\n", "#transforms.Resize((input_size, input_size), interpolation=Image.BICUBIC),", "\n", "transforms", ".", "Resize", "(", "test_imagenet_size", "+", "32", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "test_imagenet_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "print", "(", "f\"Train ImageNet Size={train_imagenet_size}, Test ImageNet Size = {test_imagenet_size}\"", ")", "\n", "", "else", ":", "\n", "        ", "transform_train", ".", "extend", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "print", "(", "\"CIFAR/SVHN Train and Test Transforms\"", ")", "\n", "\n", "# cutout comes after normalize", "\n", "# if before normalize, use CutOut_PIL", "\n", "", "if", "cutout", ":", "\n", "        ", "transform_train", ".", "append", "(", "augment", ".", "Cutout", "(", "length", "=", "length", ")", ")", "\n", "print", "(", "\"CutOut: \"", ",", "length", ")", "\n", "\n", "", "transform_train", "=", "transforms", ".", "Compose", "(", "transform_train", ")", "\n", "\n", "return", "{", "'train'", ":", "transform_train", ",", "'test'", ":", "transform_test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.color_jitter_transform": [[162, 177], ["torchvision.Compose", "print", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ColorJitter", "torchvision.ToTensor"], "function", ["None"], ["", "def", "color_jitter_transform", "(", ")", ":", "\n", "    ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "\n", "brightness", "=", "1.0", ",", "\n", "contrast", "=", "1.0", ",", "\n", "saturation", "=", "1.0", ",", "\n", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "imagenet_normalize", ",", "\n", "]", ")", "\n", "print", "(", "\"ImageNet Color Jitter\"", ")", "\n", "\n", "return", "{", "'train'", ":", "transform_test", ",", "'test'", ":", "transform_test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transform.random_resized_crop_transform": [[178, 187], ["torchvision.Compose", "print", "torchvision.RandomResizedCrop", "torchvision.ToTensor"], "function", ["None"], ["", "def", "random_resized_crop_transform", "(", ")", ":", "\n", "    ", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ",", "scale", "=", "(", "0.2", ",", "1.0", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "imagenet_normalize", ",", "\n", "]", ")", "\n", "print", "(", "\"ImageNet RandomResizedCrop\"", ")", "\n", "\n", "return", "{", "'train'", ":", "transform_test", ",", "'test'", ":", "transform_test", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToSTFT.__init__": [[17, 20], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_fft", "=", "2048", ",", "hop_length", "=", "512", ")", ":", "\n", "        ", "self", ".", "n_fft", "=", "n_fft", "\n", "self", ".", "hop_length", "=", "hop_length", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToSTFT.__call__": [[21, 29], ["librosa.stft"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "samples", "=", "data", "[", "'samples'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "data", "[", "'n_fft'", "]", "=", "self", ".", "n_fft", "\n", "data", "[", "'hop_length'", "]", "=", "self", ".", "hop_length", "\n", "data", "[", "'stft'", "]", "=", "librosa", ".", "stft", "(", "samples", ",", "n_fft", "=", "self", ".", "n_fft", ",", "hop_length", "=", "self", ".", "hop_length", ")", "\n", "data", "[", "'stft_shape'", "]", "=", "data", "[", "'stft'", "]", ".", "shape", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.StretchAudioOnSTFT.__init__": [[33, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_scale", "=", "0.2", ")", ":", "\n", "        ", "self", ".", "max_scale", "=", "max_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.StretchAudioOnSTFT.__call__": [[36, 47], ["random.uniform", "librosa.core.phase_vocoder", "transforms_wav.should_apply_transform"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "stft", "=", "data", "[", "'stft'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "hop_length", "=", "data", "[", "'hop_length'", "]", "\n", "scale", "=", "random", ".", "uniform", "(", "-", "self", ".", "max_scale", ",", "self", ".", "max_scale", ")", "\n", "stft_stretch", "=", "librosa", ".", "core", ".", "phase_vocoder", "(", "stft", ",", "1", "+", "scale", ",", "hop_length", "=", "hop_length", ")", "\n", "data", "[", "'stft'", "]", "=", "stft_stretch", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.TimeshiftAudioOnSTFT.__init__": [[51, 53], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "max_shift", "=", "8", ")", ":", "\n", "        ", "self", ".", "max_shift", "=", "max_shift", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.TimeshiftAudioOnSTFT.__call__": [[54, 69], ["random.randint", "max", "numpy.pad", "transforms_wav.should_apply_transform", "min"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "stft", "=", "data", "[", "'stft'", "]", "\n", "shift", "=", "random", ".", "randint", "(", "-", "self", ".", "max_shift", ",", "self", ".", "max_shift", ")", "\n", "a", "=", "-", "min", "(", "0", ",", "shift", ")", "\n", "b", "=", "max", "(", "0", ",", "shift", ")", "\n", "stft", "=", "np", ".", "pad", "(", "stft", ",", "(", "(", "0", ",", "0", ")", ",", "(", "a", ",", "b", ")", ")", ",", "\"constant\"", ")", "\n", "if", "a", "==", "0", ":", "\n", "            ", "stft", "=", "stft", "[", ":", ",", "b", ":", "]", "\n", "", "else", ":", "\n", "            ", "stft", "=", "stft", "[", ":", ",", "0", ":", "-", "a", "]", "\n", "", "data", "[", "'stft'", "]", "=", "stft", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.AddBackgroundNoiseOnSTFT.__init__": [[73, 76], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bg_dataset", ",", "max_percentage", "=", "0.45", ")", ":", "\n", "        ", "self", ".", "bg_dataset", "=", "bg_dataset", "\n", "self", ".", "max_percentage", "=", "max_percentage", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.AddBackgroundNoiseOnSTFT.__call__": [[77, 85], ["random.uniform", "transforms_wav.should_apply_transform", "random.choice"], "methods", ["home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_wav.should_apply_transform"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "not", "should_apply_transform", "(", ")", ":", "\n", "            ", "return", "data", "\n", "\n", "", "noise", "=", "random", ".", "choice", "(", "self", ".", "bg_dataset", ")", "[", "'stft'", "]", "\n", "percentage", "=", "random", ".", "uniform", "(", "0", ",", "self", ".", "max_percentage", ")", "\n", "data", "[", "'stft'", "]", "=", "data", "[", "'stft'", "]", "*", "(", "1", "-", "percentage", ")", "+", "noise", "*", "percentage", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.FixSTFTDimension.__call__": [[89, 100], ["numpy.pad"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "stft", "=", "data", "[", "'stft'", "]", "\n", "t_len", "=", "stft", ".", "shape", "[", "1", "]", "\n", "orig_t_len", "=", "data", "[", "'stft_shape'", "]", "[", "1", "]", "\n", "if", "t_len", ">", "orig_t_len", ":", "\n", "            ", "stft", "=", "stft", "[", ":", ",", "0", ":", "orig_t_len", "]", "\n", "", "elif", "t_len", "<", "orig_t_len", ":", "\n", "            ", "stft", "=", "np", ".", "pad", "(", "stft", ",", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "orig_t_len", "-", "t_len", ")", ")", ",", "\"constant\"", ")", "\n", "\n", "", "data", "[", "'stft'", "]", "=", "stft", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__init__": [[104, 106], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_mels", "=", "32", ")", ":", "\n", "        ", "self", ".", "n_mels", "=", "n_mels", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.ToMelSpectrogramFromSTFT.__call__": [[107, 115], ["librosa.filters.mel", "numpy.dot", "librosa.power_to_db", "numpy.abs"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "stft", "=", "data", "[", "'stft'", "]", "\n", "sample_rate", "=", "data", "[", "'sample_rate'", "]", "\n", "n_fft", "=", "data", "[", "'n_fft'", "]", "\n", "mel_basis", "=", "librosa", ".", "filters", ".", "mel", "(", "sample_rate", ",", "n_fft", ",", "self", ".", "n_mels", ")", "\n", "s", "=", "np", ".", "dot", "(", "mel_basis", ",", "np", ".", "abs", "(", "stft", ")", "**", "2.0", ")", "\n", "data", "[", "'mel_spectrogram'", "]", "=", "librosa", ".", "power_to_db", "(", "s", ",", "ref", "=", "np", ".", "max", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.DeleteSTFT.__call__": [[119, 122], ["None"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "del", "data", "[", "'stft'", "]", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.dataset.transforms_stft.AudioFromSTFT.__call__": [[126, 130], ["librosa.core.istft"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "data", ")", ":", "\n", "        ", "stft", "=", "data", "[", "'stft'", "]", "\n", "data", "[", "'istft_samples'", "]", "=", "librosa", ".", "core", ".", "istft", "(", "stft", ",", "dtype", "=", "data", "[", "'samples'", "]", ".", "dtype", ")", "\n", "return", "data", "\n", "", "", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.paper.plot_accuracy.plot_line": [[203, 271], ["matplotlib.subplots", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.rc", "matplotlib.rc", "matplotlib.ylabel", "dataset.items", "ax.legend", "matplotlib.savefig", "matplotlib.show", "seaborn.color_palette", "ax.set_xscale", "ax.set_xticks", "ax.get_xaxis().set_major_formatter", "matplotlib.xlabel", "matplotlib.plot", "matplotlib.ticker.FuncFormatter", "matplotlib.ticker.FuncFormatter", "ax.set_xscale", "ax.set_xticks", "ax.get_xaxis().set_major_formatter", "matplotlib.xlabel", "matplotlib.plot", "matplotlib.plot", "ax.get_xaxis", "matplotlib.ticker.FuncFormatter", "matplotlib.ticker.FuncFormatter", "ax.set_xticklabels", "ax.grid", "matplotlib.xticks", "fig.subplots_adjust", "matplotlib.xlabel", "format", "ax.get_xaxis", "matplotlib.plot", "int", "format", "range", "len"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items"], ["def", "plot_line", "(", "dataset", ",", "filename", "=", "\"fig.png\"", ",", "ylabel", "=", "\"Top-1% Accuracy\"", ")", ":", "\n", "    ", "data", "=", "{", "}", "\n", "keys", "=", "[", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "plt", ".", "xlabel", "(", "'xlabel'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "ylabel", "(", "'ylabel'", ",", "fontsize", "=", "14", ")", "\n", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "14", ")", "\n", "plt", ".", "rc", "(", "'ytick'", ",", "labelsize", "=", "11", ")", "\n", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "markers", "=", "[", "'^'", ",", "'s'", ",", "'o'", ",", "'D'", ",", "'X'", ",", "'<'", ",", "'P'", ",", "'X'", "]", "\n", "colors", "=", "sns", ".", "color_palette", "(", ")", "[", "0", ":", "]", "\n", "i", "=", "0", "\n", "j", "=", "0", "\n", "linestyle", "=", "True", "\n", "is_aa", "=", "False", "\n", "fontsize", "=", "11", "\n", "spacing", "=", "0.8", "\n", "for", "key", ",", "val", "in", "dataset", ".", "items", "(", ")", ":", "\n", "#val = list(val)", "\n", "        ", "if", "\"Batch\"", "in", "key", ":", "\n", "            ", "xlabel", "=", "key", "\n", "xval", "=", "val", "\n", "ax", ".", "set_xscale", "(", "'log'", ",", "basex", "=", "2", ")", "\n", "ax", ".", "set_xticks", "(", "xval", ")", "\n", "ax", ".", "get_xaxis", "(", ")", ".", "set_major_formatter", "(", "matplotlib", ".", "ticker", ".", "FuncFormatter", "(", "lambda", "x", ",", "p", ":", "format", "(", "int", "(", "x", ")", ",", "','", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "key", ")", "\n", "continue", "\n", "", "elif", "\"Rate\"", "in", "key", ":", "\n", "            ", "xlabel", "=", "key", "\n", "xval", "=", "val", "\n", "ax", ".", "set_xscale", "(", "'log'", ",", "basex", "=", "2", ")", "\n", "ax", ".", "set_xticks", "(", "xval", ")", "\n", "ax", ".", "get_xaxis", "(", ")", ".", "set_major_formatter", "(", "matplotlib", ".", "ticker", ".", "FuncFormatter", "(", "lambda", "x", ",", "p", ":", "format", "(", "x", ",", "''", ")", ")", ")", "\n", "plt", ".", "xlabel", "(", "key", ")", "\n", "continue", "\n", "", "elif", "\"Data Augmentation\"", "in", "key", ":", "\n", "            ", "xlabel", "=", "key", "\n", "xval", "=", "val", "\n", "ax", ".", "set_xticklabels", "(", "xval", ",", "rotation", "=", "90", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "plt", ".", "xticks", "(", "[", "m", "for", "m", "in", "range", "(", "len", "(", "xval", ")", ")", "]", ",", "xval", ")", "\n", "linestyle", "=", "False", "\n", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ")", "\n", "plt", ".", "xlabel", "(", "''", ")", "\n", "fontsize", "=", "12", "\n", "spacing", "=", "1.5", "\n", "continue", "\n", "", "elif", "\"AA\"", "in", "key", "and", "not", "linestyle", ":", "\n", "            ", "is_aa", "=", "True", "\n", "plt", ".", "plot", "(", "xval", "[", "0", ":", "-", "2", "]", ",", "val", ",", "linewidth", "=", "2", ",", "color", "=", "colors", "[", "j", "]", ",", "marker", "=", "markers", "[", "j", "]", ",", "markersize", "=", "10", ",", "label", "=", "key", ")", "\n", "continue", "\n", "", "else", ":", "\n", "            ", "data", "[", "key", "]", "=", "val", "\n", "\n", "", "if", "i", "%", "2", ">", "0", ":", "\n", "            ", "plt", ".", "plot", "(", "xval", ",", "val", ",", "linewidth", "=", "2", ",", "color", "=", "colors", "[", "j", "]", ",", "marker", "=", "markers", "[", "j", "]", ",", "markersize", "=", "10", ",", "label", "=", "key", ")", "\n", "j", "+=", "1", "\n", "", "elif", "linestyle", ":", "\n", "            ", "plt", ".", "plot", "(", "xval", ",", "val", ",", "linewidth", "=", "2", ",", "color", "=", "colors", "[", "j", "]", ",", "marker", "=", "markers", "[", "j", "]", ",", "markersize", "=", "10", ",", "label", "=", "key", ",", "linestyle", "=", "'dashed'", ",", "fillstyle", "=", "'none'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "plot", "(", "xval", ",", "val", ",", "linewidth", "=", "2", ",", "color", "=", "colors", "[", "j", "]", ",", "marker", "=", "markers", "[", "j", "]", ",", "markersize", "=", "10", ",", "label", "=", "key", ")", "\n", "j", "+=", "1", "\n", "", "i", "+=", "1", "\n", "\n", "", "ax", ".", "legend", "(", "loc", "=", "'upper center'", ",", "fontsize", "=", "fontsize", ",", "ncol", "=", "i", "+", "1", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "1.15", ")", ",", "frameon", "=", "False", ",", "columnspacing", "=", "spacing", ",", "handletextpad", "=", "0.2", ")", "\n", "\n", "plt", ".", "savefig", "(", "filename", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.paper.plot_accuracy.plot_bar": [[272, 380], ["matplotlib.rc", "matplotlib.rc", "matplotlib.subplots", "matplotlib.ylabel", "len", "numpy.arange", "ax.set_xticks", "dataset.items", "title.replace.replace", "title.replace.replace", "matplotlib.savefig", "matplotlib.show", "matplotlib.rc", "matplotlib.rc", "matplotlib.rc", "matplotlib.xlabel", "ax.set_title", "seaborn.color_palette", "fig.subplots_adjust", "val.items", "labels.append", "ax.legend", "ax.grid", "ax.set_xticklabels", "ax.set_xticklabels", "matplotlib.ylim", "matplotlib.ylim", "isinstance", "len", "float", "ax.bar", "ax.annotate", "ax.scatter", "ax.scatter"], "function", ["home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items", "home.repos.pwc.inspect_result.roatienza_agmax.utils.metrics.Accumulator.items"], ["", "def", "plot_bar", "(", "dataset", ",", "title", ",", "ylabel", "=", "\"Top-1% Accuracy\"", ",", "xlabel", "=", "\"Data Augmentation\"", ",", "ncolors", "=", "4", ",", "vspace", "=", "0.2", ",", "is_scatter", "=", "False", ")", ":", "\n", "    ", "plt", ".", "rc", "(", "'font'", ",", "size", "=", "12", ")", "\n", "if", "not", "is_scatter", ":", "\n", "        ", "plt", ".", "rc", "(", "'axes'", ",", "labelsize", "=", "14", ")", "\n", "", "plt", ".", "rc", "(", "'axes'", ",", "titlesize", "=", "16", ")", "\n", "if", "ncolors", "==", "4", ":", "\n", "        ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "14", ")", "\n", "", "else", ":", "\n", "        ", "plt", ".", "rc", "(", "'xtick'", ",", "labelsize", "=", "11", ")", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "if", "not", "is_scatter", ":", "\n", "        ", "plt", ".", "xlabel", "(", "xlabel", ")", "\n", "", "plt", ".", "ylabel", "(", "ylabel", ")", "\n", "if", "not", "is_scatter", ":", "\n", "        ", "ax", ".", "set_title", "(", "title", ")", "\n", "", "colors", "=", "sns", ".", "color_palette", "(", ")", "[", "0", ":", "ncolors", "]", "\n", "markers", "=", "[", "'^'", ",", "'s'", ",", "'o'", ",", "'D'", ",", "'*'", "]", "\n", "\n", "xticks", "=", "len", "(", "dataset", ")", "\n", "x", "=", "np", ".", "arange", "(", "xticks", ")", "\n", "ax", ".", "set_xticks", "(", "x", ")", "\n", "if", "ncolors", "==", "4", ":", "\n", "        ", "width", "=", "0.2", "\n", "", "else", ":", "\n", "        ", "fig", ".", "subplots_adjust", "(", "bottom", "=", "0.2", ")", "\n", "width", "=", "0.1", "\n", "#ax.axhline(y=0, color='gray')", "\n", "\n", "", "i", "=", "0", "\n", "j", "=", "0", "\n", "low", "=", "100", "\n", "high", "=", "0", "\n", "labels", "=", "[", "]", "\n", "has_label", "=", "False", "\n", "for", "key", ",", "val", "in", "dataset", ".", "items", "(", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "val", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "                ", "v", "=", "float", "(", "v", ")", "\n", "color", "=", "\"gray\"", "\n", "", "else", ":", "\n", "                ", "color", "=", "colors", "[", "i", "]", "\n", "\n", "", "if", "v", "<", "low", ":", "\n", "                ", "low", "=", "v", "\n", "", "if", "v", ">", "high", ":", "\n", "                ", "high", "=", "v", "\n", "\n", "", "if", "ncolors", "==", "4", ":", "\n", "                ", "x", "=", "j", "-", "(", "(", "1", "-", "i", ")", "*", "width", "+", "width", "/", "2", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "j", "-", "(", "(", "1", "-", "i", ")", "*", "width", "+", "width", "/", "2", ")", "\n", "#x = j-(i*width - 0.2)", "\n", "\n", "#if \"Speech\" in key:", "\n", "#    tcolors = sns.color_palette()[0:5]", "\n", "#    if is_scatter:", "\n", "#        ax.scatter(j, v, marker=markers[i], s=100, color=tcolors[i+2])", "\n", "#    else:", "\n", "#        ax.bar(x, v, width, color=tcolors[i+2])", "\n", "#else:", "\n", "", "if", "is_scatter", ":", "\n", "                ", "if", "not", "has_label", ":", "\n", "                    ", "ax", ".", "scatter", "(", "j", ",", "v", ",", "marker", "=", "markers", "[", "i", "]", ",", "s", "=", "100", ",", "label", "=", "k", ",", "color", "=", "color", ")", "\n", "", "else", ":", "\n", "                    ", "ax", ".", "scatter", "(", "j", ",", "v", ",", "marker", "=", "markers", "[", "i", "]", ",", "s", "=", "100", ",", "color", "=", "color", ")", "\n", "", "", "else", ":", "\n", "                ", "ax", ".", "bar", "(", "x", ",", "v", ",", "width", ",", "color", "=", "color", ")", "\n", "\n", "", "height", "=", "v", "\n", "offset", "=", "3", "\n", "if", "v", "<", "0", ":", "\n", "                ", "height", "=", "0", "\n", "\n", "\n", "", "if", "is_scatter", "is", "False", ":", "\n", "                ", "ax", ".", "annotate", "(", "'{}'", ".", "format", "(", "k", ")", ",", "\n", "xy", "=", "(", "x", ",", "height", ")", ",", "\n", "xytext", "=", "(", "0", ",", "offset", ")", ",", "# 3 points vertical offset", "\n", "textcoords", "=", "\"offset points\"", ",", "\n", "ha", "=", "'center'", ",", "va", "=", "'bottom'", ",", "\n", "rotation", "=", "90", ")", "\n", "#ax.annotate(k, (key, v))", "\n", "", "i", "+=", "1", "\n", "i", "%=", "len", "(", "colors", ")", "\n", "\n", "", "labels", ".", "append", "(", "key", ")", "\n", "j", "+=", "1", "\n", "has_label", "=", "True", "\n", "\n", "", "if", "is_scatter", ":", "\n", "        ", "ax", ".", "legend", "(", "loc", "=", "'upper center'", ",", "ncol", "=", "ncolors", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "1.12", ")", ",", "frameon", "=", "False", ",", "columnspacing", "=", "1", ",", "handletextpad", "=", "0.0", ")", "\n", "ax", ".", "grid", "(", "True", ")", "\n", "\n", "", "if", "ncolors", "==", "4", ":", "\n", "        ", "ax", ".", "set_xticklabels", "(", "labels", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xticklabels", "(", "labels", ",", "rotation", "=", "90", ")", "\n", "", "import", "math", "\n", "if", "\"100\"", "in", "title", ":", "\n", "        ", "plt", ".", "ylim", "(", "[", "low", "-", "0.2", ",", "high", "+", "1.1", "]", ")", "\n", "", "else", ":", "\n", "# change high+k manually", "\n", "        ", "plt", ".", "ylim", "(", "[", "low", "-", "0.2", ",", "high", "+", "vspace", "]", ")", "\n", "", "title", "=", "title", ".", "replace", "(", "\" \"", ",", "\"_\"", ")", "\n", "title", "=", "title", ".", "replace", "(", "\"%\"", ",", "\"\"", ")", "\n", "plt", ".", "savefig", "(", "title", "+", "\".png\"", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_lr": [[17, 19], ["None"], "function", ["None"], ["}", "\n", ""]], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_epochs": [[20, 22], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_weight_decay": [[23, 25], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_batch_size": [[26, 28], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_nesterov": [[29, 31], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_init_backbone": [[32, 34], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_init_extractor": [[35, 37], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_weights_std": [[38, 40], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_agmax": [[41, 43], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_cutout": [[44, 46], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_auto_augment": [[47, 49], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.has_no_basic_augment": [[50, 52], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_cutmix": [[53, 55], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.is_mixup": [[56, 58], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_name": [[59, 61], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_depth": [[62, 64], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_width": [[65, 67], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_dropout": [[68, 70], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.set_backbone_dropout": [[71, 74], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_config": [[75, 77], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.roatienza_agmax.configs.configs.get_backbone_config_by": [[78, 80], ["None"], "function", ["None"], []]}