{"home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.SkipConnect.__init__": [[18, 23], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "SkipConnect", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", "=", "stride", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.SkipConnect.forward": [[24, 32], ["hasattr", "NAS_GAN.SkipConnect.conv", "NAS_GAN.SkipConnect.bn", "NAS_GAN.SkipConnect.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "'conv'", ")", ":", "\n", "            ", "out", "=", "self", ".", "conv", "(", "x", ")", "\n", "out", "=", "self", ".", "bn", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "x", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.Conv3x3.__init__": [[36, 41], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "Conv3x3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.Conv3x3.forward": [[42, 47], ["NAS_GAN.Conv3x3.conv1", "NAS_GAN.Conv3x3.bn1", "NAS_GAN.Conv3x3.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.BasicResidual.__init__": [[51, 63], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "C_out", ",", "C_out", ",", "3", ",", "1", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "C_in", "!=", "C_out", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.BasicResidual.forward": [[64, 79], ["NAS_GAN.BasicResidual.conv1", "NAS_GAN.BasicResidual.bn1", "NAS_GAN.BasicResidual.relu", "NAS_GAN.BasicResidual.conv2", "NAS_GAN.BasicResidual.bn2", "hasattr", "NAS_GAN.BasicResidual.relu", "NAS_GAN.BasicResidual.bn3", "NAS_GAN.BasicResidual.skip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "identity", "=", "self", ".", "bn3", "(", "self", ".", "skip", "(", "identity", ")", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.DwsBlock.__init__": [[83, 96], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "groups", "=", "1", ")", ":", "\n", "        ", "super", "(", "DwsBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_in", "*", "4", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "InstanceNorm2d", "(", "C_in", "*", "4", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "C_in", "*", "4", ",", "C_in", "*", "4", ",", "3", ",", "stride", ",", "padding", "=", "dilation", ",", "dilation", "=", "dilation", ",", "groups", "=", "C_in", "*", "4", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "InstanceNorm2d", "(", "C_in", "*", "4", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "C_in", "*", "4", ",", "C_out", ",", "1", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "if", "C_in", "!=", "C_out", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "1", ",", "stride", ",", "padding", "=", "0", ",", "dilation", "=", "dilation", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn4", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.DwsBlock.forward": [[97, 116], ["NAS_GAN.DwsBlock.conv1", "NAS_GAN.DwsBlock.bn1", "NAS_GAN.DwsBlock.relu", "NAS_GAN.DwsBlock.conv2", "NAS_GAN.DwsBlock.bn2", "NAS_GAN.DwsBlock.relu", "NAS_GAN.DwsBlock.conv3", "NAS_GAN.DwsBlock.bn3", "hasattr", "NAS_GAN.DwsBlock.relu", "NAS_GAN.DwsBlock.bn4", "NAS_GAN.DwsBlock.skip"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'skip'", ")", ":", "\n", "            ", "identity", "=", "self", ".", "bn4", "(", "self", ".", "skip", "(", "identity", ")", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.ConvNorm.__init__": [[130, 155], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int", "type", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ",", "\n", "width_mult_list", "=", "[", "1.", "]", ")", ":", "\n", "        ", "super", "(", "ConvNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "# assume h_out = h_in / s", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.ConvNorm.forward": [[156, 161], ["NAS_GAN.ConvNorm.conv", "NAS_GAN.ConvNorm.bn", "NAS_GAN.ConvNorm.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.Conv.__init__": [[165, 185], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "int", "type", "numpy.ceil"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "None", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "Conv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "if", "padding", "is", "None", ":", "\n", "            ", "self", ".", "padding", "=", "int", "(", "np", ".", "ceil", "(", "(", "dilation", "*", "(", "kernel_size", "-", "1", ")", "+", "1", "-", "stride", ")", "/", "2.", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "padding", "=", "padding", "\n", "", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "dilation", "=", "dilation", ",", "\n", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.Conv.forward": [[186, 189], ["NAS_GAN.Conv.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.ConvTranspose2dNorm.__init__": [[193, 212], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "type"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvTranspose2dNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "C_in", "=", "C_in", "\n", "self", ".", "C_out", "=", "C_out", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "padding", "=", "1", "\n", "self", ".", "dilation", "=", "dilation", "\n", "assert", "type", "(", "groups", ")", "==", "int", "\n", "if", "kernel_size", "==", "1", ":", "\n", "            ", "self", ".", "groups", "=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "groups", "=", "groups", "\n", "", "self", ".", "bias", "=", "bias", "\n", "self", ".", "conv", "=", "nn", ".", "ConvTranspose2d", "(", "C_in", ",", "C_out", ",", "kernel_size", ",", "stride", ",", "padding", "=", "self", ".", "padding", ",", "output_padding", "=", "1", ",", "\n", "dilation", "=", "dilation", ",", "groups", "=", "self", ".", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "InstanceNorm2d", "(", "C_out", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.ConvTranspose2dNorm.forward": [[213, 218], ["NAS_GAN.ConvTranspose2dNorm.conv", "NAS_GAN.ConvTranspose2dNorm.bn", "NAS_GAN.ConvTranspose2dNorm.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.MixedOp.__init__": [[231, 234], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "C_in", ",", "C_out", ",", "op_idx", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "MixedOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "OPS", "[", "PRIMITIVES", "[", "op_idx", "]", "]", "(", "C_in", ",", "C_out", ",", "stride", ",", "width_mult_list", "=", "[", "1.", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.MixedOp.forward": [[235, 237], ["NAS_GAN.MixedOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_op", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.SingleOp.__init__": [[241, 244], ["torch.Module.__init__", "op"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "op", ",", "C_in", ",", "C_out", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "SingleOp", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_op", "=", "op", "(", "C_in", ",", "C_out", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.SingleOp.forward": [[245, 249], ["NAS_GAN.SingleOp._op"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "result", "=", "self", ".", "_op", "(", "x", ")", "\n", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.AdaConv.__init__": [[253, 268], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", "=", "256", ",", "outp", "=", "256", ",", "groups", "=", "True", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "AdaConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inp", "=", "inp", "\n", "self", ".", "outp", "=", "outp", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "bias", "=", "bias", "\n", "outp_weight", "=", "outp", "if", "groups", "else", "outp", "**", "2", "\n", "# conv_params_predictor", "\n", "# self.shared_conv = nn.Sequential(nn.Conv2d(inp, inp, kernel_size=1), nn.ReLU(True))", "\n", "self", ".", "shared_conv", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "weight_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "outp_weight", ",", "kernel_size", "=", "1", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "kernel_size", "=", "1", ")", ",", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "outp", ",", "kernel_size", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.AdaConv.forward": [[269, 277], ["NAS_GAN.AdaConv.shared_conv", "NAS_GAN.AdaConv.weight_conv", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "NAS_GAN.AdaConv.bias_conv", "NAS_GAN.AdaConv.view", "NAS_GAN.AdaConv.view", "bias.view", "torch.conv2d", "torch.conv2d", "torch.conv2d", "x[].unsqueeze", "range"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "latent", ")", ":", "\n", "        ", "latent_", "=", "self", ".", "shared_conv", "(", "latent", ")", "\n", "weights", "=", "self", ".", "weight_conv", "(", "latent_", ")", "\n", "bias", "=", "self", ".", "bias_conv", "(", "latent_", ")", "if", "self", ".", "bias", "else", "None", "\n", "weights", "=", "weights", ".", "view", "(", "weights", ".", "shape", "[", "0", "]", ",", "self", ".", "outp", ",", "1", ",", "1", ",", "1", ")", "if", "self", ".", "groups", "else", "weights", ".", "view", "(", "weights", ".", "shape", "[", "0", "]", ",", "self", ".", "outp", ",", "self", ".", "outp", ",", "1", ",", "1", ")", "\n", "bias", "=", "bias", ".", "view", "(", "bias", ".", "shape", "[", "0", "]", ",", "self", ".", "outp", ")", "if", "self", ".", "bias", "else", "None", "\n", "out", "=", "[", "F", ".", "conv2d", "(", "x", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "weights", "[", "i", "]", ",", "bias", "[", "i", "]", ",", "groups", "=", "self", ".", "outp", "if", "self", ".", "groups", "else", "1", ")", "for", "i", "in", "range", "(", "x", ".", "shape", "[", "0", "]", ")", "]", "\n", "return", "torch", ".", "cat", "(", "out", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.NAS_GAN.__init__": [[280, 333], ["torch.Module.__init__", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.softmax().argmax", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "NAS_GAN.NAS_GAN.stem.append", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "NAS_GAN.NAS_GAN.header.append", "NAS_GAN.NAS_GAN.header.append", "NAS_GAN.NAS_GAN.header.append", "torch.Tanh", "torch.Tanh", "torch.Tanh", "NAS_GAN.SingleOp", "NAS_GAN.NAS_GAN.stem.append", "NAS_GAN.SingleOp", "NAS_GAN.SingleOp", "NAS_GAN.SingleOp", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "NAS_GAN.make_divisible", "NAS_GAN.SingleOp", "NAS_GAN.NAS_GAN.cells.append", "NAS_GAN.NAS_GAN.ada_convs.append", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.make_divisible", "NAS_GAN.MixedOp", "NAS_GAN.AdaConv", "NAS_GAN.NAS_GAN.cells.append", "NAS_GAN.NAS_GAN.ada_convs.append", "NAS_GAN.NAS_GAN.cells.append", "NAS_GAN.NAS_GAN.ada_convs.append", "NAS_GAN.MixedOp", "NAS_GAN.AdaConv", "NAS_GAN.MixedOp", "NAS_GAN.AdaConv"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible"], ["    ", "def", "__init__", "(", "self", ",", "alpha", ",", "ratio", ",", "ratio_sh", ",", "layers", ",", "width_mult_list", ",", "width_mult_list_sh", ")", ":", "\n", "        ", "super", "(", "NAS_GAN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "layers", ">=", "3", "\n", "self", ".", "layers", "=", "layers", "\n", "self", ".", "len_stem", "=", "3", "\n", "self", ".", "len_header", "=", "3", "\n", "op_idx_list", "=", "F", ".", "softmax", "(", "alpha", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "ratio_list", "=", "F", ".", "softmax", "(", "ratio", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "ratio_list_sh", "=", "F", ".", "softmax", "(", "ratio_sh", ",", "dim", "=", "-", "1", ")", ".", "argmax", "(", "-", "1", ")", "\n", "\n", "# Construct Stem", "\n", "self", ".", "stem", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "3", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "0", "]", "]", ")", ",", "7", ")", ")", "\n", "in_features", "=", "64", "\n", "out_features", "=", "in_features", "*", "2", "\n", "for", "i", "in", "range", "(", "2", ")", ":", "\n", "            ", "self", ".", "stem", ".", "append", "(", "SingleOp", "(", "ConvNorm", ",", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "]", "]", ")", ",", "\n", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "i", "+", "1", "]", "]", ")", ",", "\n", "3", ",", "stride", "=", "2", ")", ")", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "*", "2", "\n", "# Construct Blocks", "\n", "", "self", ".", "cells", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ada_convs", "=", "nn", ".", "ModuleList", "(", ")", "\n", "group", ",", "bias", "=", "True", ",", "True", "\n", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "cha", "=", "152", "\n", "if", "i", "==", "0", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "88", ",", "cha", ",", "op_idx_list", "[", "i", "]", ")", ")", "\n", "self", ".", "ada_convs", ".", "append", "(", "AdaConv", "(", "256", ",", "cha", ",", "group", ",", "bias", ")", ")", "\n", "", "elif", "i", "==", "layers", "-", "1", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "cha", ",", "128", ",", "op_idx_list", "[", "i", "]", ")", ")", "\n", "self", ".", "ada_convs", ".", "append", "(", "AdaConv", "(", "256", ",", "128", ",", "group", ",", "bias", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "cells", ".", "append", "(", "MixedOp", "(", "cha", ",", "cha", ",", "op_idx_list", "[", "i", "]", ")", ")", "\n", "self", ".", "ada_convs", ".", "append", "(", "AdaConv", "(", "256", ",", "cha", ",", "group", ",", "bias", ")", ")", "\n", "\n", "# Construct Header", "\n", "", "", "self", ".", "header", "=", "nn", ".", "ModuleList", "(", ")", "\n", "out_features", "=", "in_features", "//", "2", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "\n", "make_divisible", "(", "in_features", "*", "width_mult_list", "[", "ratio_list", "[", "self", ".", "layers", "-", "1", "]", "]", ")", ",", "\n", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "\n", "3", ",", "stride", "=", "2", ")", ")", "\n", "in_features", "=", "out_features", "\n", "out_features", "=", "in_features", "//", "2", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "ConvTranspose2dNorm", ",", "\n", "make_divisible", "(", "in_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "]", "]", ")", ",", "\n", "make_divisible", "(", "out_features", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "\n", "3", ",", "stride", "=", "2", ")", ")", "\n", "self", ".", "header", ".", "append", "(", "SingleOp", "(", "Conv", ",", "make_divisible", "(", "64", "*", "width_mult_list_sh", "[", "ratio_list_sh", "[", "self", ".", "len_stem", "+", "1", "]", "]", ")", ",", "\n", "3", ",", "7", ")", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.NAS_GAN.forward": [[334, 350], ["enumerate", "latent.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "enumerate", "enumerate", "NAS_GAN.NAS_GAN.tanh", "module", "cell", "module", "latent.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "latent", ")", ":", "\n", "        ", "out", "=", "input", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "stem", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "latent", "=", "latent", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "for", "i", ",", "cell", "in", "enumerate", "(", "self", ".", "cells", ")", ":", "\n", "            ", "out", "=", "cell", "(", "out", ")", "\n", "out", "=", "self", ".", "ada_convs", "[", "i", "]", "(", "out", ",", "latent", ")", "\n", "\n", "", "for", "i", ",", "module", "in", "enumerate", "(", "self", ".", "header", ")", ":", "\n", "            ", "out", "=", "module", "(", "out", ")", "\n", "\n", "", "out", "=", "self", ".", "tanh", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.NAS_GAN.make_divisible": [[220, 227], ["max", "int"], "function", ["None"], ["", "", "def", "make_divisible", "(", "v", ",", "divisor", "=", "8", ",", "min_value", "=", "3", ")", ":", "\n", "    ", "if", "min_value", "is", "None", ":", "\n", "        ", "min_value", "=", "divisor", "\n", "", "new_v", "=", "max", "(", "min_value", ",", "int", "(", "v", "+", "divisor", "/", "2", ")", "//", "divisor", "*", "divisor", ")", "\n", "if", "new_v", "<", "0.9", "*", "v", ":", "\n", "        ", "new_v", "+=", "divisor", "\n", "", "return", "new_v", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.NLayerDiscriminator.__init__": [[8, 34], ["torch.Module.__init__", "range", "min", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "min", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["def", "__init__", "(", "self", ",", "input_nc", "=", "3", "+", "3", ",", "ndf", "=", "64", ",", "n_layers", "=", "3", ",", "norm_layer", "=", "nn", ".", "InstanceNorm2d", ",", "use_bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "NLayerDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kw", "=", "4", "\n", "padw", "=", "1", "\n", "sequence", "=", "[", "nn", ".", "Conv2d", "(", "input_nc", ",", "ndf", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ")", ",", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "]", "\n", "nf_mult", "=", "1", "\n", "nf_mult_prev", "=", "1", "\n", "for", "n", "in", "range", "(", "1", ",", "n_layers", ")", ":", "# gradually increase the number of filters", "\n", "            ", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "2", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "", "nf_mult_prev", "=", "nf_mult", "\n", "nf_mult", "=", "min", "(", "2", "**", "n_layers", ",", "8", ")", "\n", "sequence", "+=", "[", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult_prev", ",", "ndf", "*", "nf_mult", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ",", "bias", "=", "use_bias", ")", ",", "\n", "norm_layer", "(", "ndf", "*", "nf_mult", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "True", ")", "\n", "]", "\n", "\n", "sequence", "+=", "[", "nn", ".", "Conv2d", "(", "ndf", "*", "nf_mult", ",", "1", ",", "kernel_size", "=", "kw", ",", "stride", "=", "1", ",", "padding", "=", "padw", ")", "]", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "*", "sequence", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.NLayerDiscriminator.forward": [[35, 37], ["patchgan_dis.NLayerDiscriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "model", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.ResBlock.__init__": [[40, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "out_channel", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "in_channel", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "self", ".", "skip", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "2", ",", "padding", "=", "0", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.ResBlock.forward": [[51, 59], ["patchgan_dis.ResBlock.conv1", "patchgan_dis.ResBlock.conv2", "patchgan_dis.ResBlock.skip", "math.sqrt"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "input", ")", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "\n", "skip", "=", "self", ".", "skip", "(", "input", ")", "\n", "out", "=", "(", "out", "+", "skip", ")", "/", "math", ".", "sqrt", "(", "2", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.StyleDiscriminator.__init__": [[62, 78], ["torch.Module.__init__", "convs.append", "convs.append", "convs.append", "convs.append", "convs.append", "convs.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "patchgan_dis.ResBlock", "patchgan_dis.ResBlock", "patchgan_dis.ResBlock", "patchgan_dis.ResBlock", "patchgan_dis.ResBlock", "patchgan_dis.ResBlock", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_nc", "=", "3", ",", "ndf", "=", "64", ")", ":", "\n", "        ", "super", "(", "StyleDiscriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "convs", "=", "[", "]", "\n", "convs", ".", "append", "(", "ResBlock", "(", "input_nc", ",", "ndf", "//", "2", ")", ")", "\n", "convs", ".", "append", "(", "ResBlock", "(", "ndf", "//", "2", ",", "ndf", "*", "1", ")", ")", "\n", "convs", ".", "append", "(", "ResBlock", "(", "ndf", "*", "1", ",", "ndf", "*", "2", ")", ")", "\n", "convs", ".", "append", "(", "ResBlock", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ")", ")", "\n", "convs", ".", "append", "(", "ResBlock", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ")", ")", "\n", "convs", ".", "append", "(", "ResBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "8", ")", ")", "\n", "\n", "self", ".", "convs", "=", "nn", ".", "Sequential", "(", "*", "convs", ")", "\n", "\n", "self", ".", "linears", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "ndf", "*", "8", "*", "4", "*", "4", ",", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ")", ",", "\n", "nn", ".", "Linear", "(", "ndf", "*", "8", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.patchgan_dis.StyleDiscriminator.forward": [[79, 85], ["patchgan_dis.StyleDiscriminator.convs", "x.view.view.view", "patchgan_dis.StyleDiscriminator.linears"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "convs", "(", "input", ")", "\n", "batch", ",", "channel", ",", "height", ",", "width", "=", "x", ".", "shape", "\n", "x", "=", "x", ".", "view", "(", "batch", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linears", "(", "x", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.__init__": [[7, 46], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_landmark", "=", "212", ")", ":", "\n", "        ", "super", "(", "AudioNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_landmark", "=", "num_landmark", "\n", "# audio", "\n", "self", ".", "audio1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "72", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "72", ",", "108", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "108", ",", "162", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "162", ",", "243", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "243", ",", "256", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "2", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "self", ".", "audio2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "3", ",", "1", ")", ",", "stride", "=", "(", "2", ",", "1", ")", ",", "padding", "=", "(", "1", ",", "0", ")", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "256", ",", "256", ",", "kernel_size", "=", "(", "4", ",", "1", ")", ",", "stride", "=", "(", "4", ",", "1", ")", ")", ",", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "self", ".", "trans_audio", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", "*", "2", ",", "256", ")", ")", "\n", "# pose", "\n", "self", ".", "trans_pose", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "3", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", ")", "\n", "# eye", "\n", "self", ".", "trans_eye", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "2", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", ")", "\n", "# cat", "\n", "self", ".", "trans_cat1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", "+", "64", "*", "2", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "256", ")", "\n", ")", "\n", "self", ".", "trans_cat2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "num_landmark", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.norm_1d": [[48, 56], ["torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.zeros().to.view_as", "torch.zeros().to.view_as", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().to.view_as", "torch.ones().to.view_as"], "methods", ["None"], ["", "def", "norm_1d", "(", "self", ",", "x", ")", ":", "\n", "        ", "eps", "=", "1e-5", "\n", "gamma", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "beta", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "x_mean", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x_var", "=", "torch", ".", "mean", "(", "(", "x", "-", "x_mean", ")", "**", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x_hat", "=", "(", "x", "-", "x_mean", ")", "/", "torch", ".", "sqrt", "(", "x_var", "+", "eps", ")", "\n", "return", "gamma", ".", "view_as", "(", "x_mean", ")", "*", "x_hat", "+", "beta", ".", "view_as", "(", "x_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.num_flat_features": [[57, 63], ["x.size"], "methods", ["None"], ["", "def", "num_flat_features", "(", "self", ",", "x", ")", ":", "\n", "        ", "size", "=", "x", ".", "size", "(", ")", "[", "1", ":", "]", "# all dimensions except the batch dimension", "\n", "num_features", "=", "1", "\n", "for", "s", "in", "size", ":", "\n", "            ", "num_features", "*=", "s", "\n", "", "return", "num_features", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.forward": [[64, 76], ["audio_net.AudioNet.audio1", "audio_net.AudioNet.audio2", "audio_net.AudioNet.view", "audio_net.AudioNet.trans_audio", "audio_net.AudioNet.trans_pose", "audio_net.AudioNet.trans_eye", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "audio_net.AudioNet.trans_cat1", "audio_net.AudioNet.norm_1d", "audio_net.AudioNet.trans_cat2", "audio_net.AudioNet.num_flat_features"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.norm_1d", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.model.audio_net.AudioNet.num_flat_features"], ["", "def", "forward", "(", "self", ",", "audio", ",", "pose", ",", "eye", ")", ":", "\n", "        ", "x_a", "=", "self", ".", "audio1", "(", "audio", ")", "\n", "x_a", "=", "self", ".", "audio2", "(", "x_a", ")", "\n", "x_a", "=", "x_a", ".", "view", "(", "-", "1", ",", "self", ".", "num_flat_features", "(", "x_a", ")", ")", "\n", "x_a", "=", "self", ".", "trans_audio", "(", "x_a", ")", "\n", "x_p", "=", "self", ".", "trans_pose", "(", "pose", ")", "\n", "x_e", "=", "self", ".", "trans_eye", "(", "eye", ")", "\n", "x_cat", "=", "torch", ".", "cat", "(", "[", "x_a", ",", "x_p", ",", "x_e", "]", ",", "dim", "=", "1", ")", "\n", "x_cat", "=", "self", ".", "trans_cat1", "(", "x_cat", ")", "\n", "latent", "=", "self", ".", "norm_1d", "(", "x_cat", ")", "\n", "out", "=", "self", ".", "trans_cat2", "(", "latent", ")", "\n", "return", "latent", ",", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.options.str2bool": [[3, 12], ["isinstance", "v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "       ", "return", "v", "\n", "", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'y'", ",", "'true'", ",", "'t'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'n'", ",", "'false'", ",", "'f'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.options.get_opt": [[14, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "int", "parser.parse_args.gpus.split"], "function", ["None"], ["", "", "def", "get_opt", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'audio2face'", ")", "\n", "\n", "# logging", "\n", "parser", ".", "add_argument", "(", "'--checkpoint'", ",", "type", "=", "str", ",", "default", "=", "'./checkpoints'", ",", "help", "=", "'experimental results are saved here'", ")", "\n", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "'AnnVI'", ",", "help", "=", "'experimental name'", ")", "\n", "\n", "# data", "\n", "parser", ".", "add_argument", "(", "'--data'", ",", "type", "=", "str", ",", "default", "=", "'AnnVI'", ",", "help", "=", "'AnnVI | VoxCeleb2'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_root'", ",", "type", "=", "str", ",", "default", "=", "'/media/datasets/zhangzjn/Audio2Face/AnnVI/feature'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'image size'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "default", "=", "'train'", ",", "help", "=", "'train | test'", ")", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--trainer'", ",", "type", "=", "str", ",", "default", "=", "'l2face'", ",", "help", "=", "'chooses which trainer to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--init_type'", ",", "type", "=", "str", ",", "default", "=", "'normal'", ",", "help", "=", "'normal | xavier | kaiming | orthogonal'", ")", "\n", "parser", ".", "add_argument", "(", "'--gan_mode'", ",", "type", "=", "str", ",", "default", "=", "'lsgan'", ",", "help", "=", "'vanilla | lsgan | wgangp'", ")", "\n", "# trainbeta1", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "help", "=", "'e.g. [-1:CPU | 0:gpu0 | 0,1:gpu 0 and 1]'", ")", "\n", "parser", ".", "add_argument", "(", "'--optim'", ",", "type", "=", "str", ",", "default", "=", "'Adam'", ",", "help", "=", "'Adam | SGD | RMSProp'", ")", "\n", "parser", ".", "add_argument", "(", "'--worker_number'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'worker number for loading data'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "help", "=", "'input batch size'", ")", "\n", "parser", ".", "add_argument", "(", "'--show_iters'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "'iteration'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--batch_id'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "'id number'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_img'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'image number for one id'", ")", "\n", "# test", "\n", "parser", ".", "add_argument", "(", "'--idt_test'", ",", "type", "=", "str", ",", "default", "=", "'random'", ",", "help", "=", "'which identity to test'", ")", "\n", "parser", ".", "add_argument", "(", "'--own_audio'", ",", "type", "=", "str2bool", ",", "default", "=", "True", ",", "help", "=", "'whether use onw audio'", ")", "\n", "parser", ".", "add_argument", "(", "'--non_ref'", ",", "type", "=", "str2bool", ",", "default", "=", "False", ",", "help", "=", "'whether use black image as the reference image'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ",", "help", "=", "'initial learning rate for adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_policy'", ",", "type", "=", "str", ",", "default", "=", "'linear'", ",", "help", "=", "'linear | step | plateau | cosine'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_iters'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'multiply by a gamma every lr_decay_iters iterations'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter'", ",", "type", "=", "int", ",", "default", "=", "30", ",", "help", "=", "'# of iter at starting learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--niter_decay'", ",", "type", "=", "int", ",", "default", "=", "40", ",", "help", "=", "'# of iter to linearly decay learning rate to zero'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "help", "=", "'momentum term of adam'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "'momentum term of SGD'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--record_every'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "help", "=", "'every # epochs to record the checkpoint once'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "'-r'", ",", "default", "=", "False", ",", "type", "=", "bool", ",", "help", "=", "'resume'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_name'", ",", "default", "=", "''", ",", "type", "=", "str", ",", "help", "=", "'resume name'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume_epoch'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "help", "=", "'resume epoch'", ")", "\n", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "# modify parser", "\n", "opt", ".", "gpus", "=", "[", "int", "(", "dev", ")", "for", "dev", "in", "opt", ".", "gpus", ".", "split", "(", "','", ")", "]", "\n", "return", "opt", "\n", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.logger.init_checkpoint": [[7, 18], ["os.path.exists", "os.mkdir", "os.mkdir", "time.strftime"], "function", ["None"], ["def", "init_checkpoint", "(", "opt", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "opt", ".", "checkpoint", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "opt", ".", "checkpoint", ")", "\n", "", "if", "opt", ".", "resume", ":", "\n", "        ", "opt", ".", "name_dir", "=", "opt", ".", "resume_name", "\n", "opt", ".", "logdir", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "checkpoint", ",", "opt", ".", "name_dir", ")", "\n", "", "else", ":", "\n", "        ", "opt", ".", "name_dir", "=", "'{}-{}'", ".", "format", "(", "opt", ".", "name", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ")", "\n", "opt", ".", "logdir", "=", "'{}/{}'", ".", "format", "(", "opt", ".", "checkpoint", ",", "opt", ".", "name_dir", ")", "\n", "os", ".", "mkdir", "(", "opt", ".", "logdir", ")", "\n", "", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.logger.get_logger": [[20, 28], ["logging.basicConfig", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger", "logging.getLogger.addHandler", "logging.Formatter"], "function", ["None"], ["", "def", "get_logger", "(", "opt", ")", ":", "\n", "    ", "log_format", "=", "'%(asctime)s - %(message)s'", "\n", "logging", ".", "basicConfig", "(", "stream", "=", "sys", ".", "stdout", ",", "level", "=", "logging", ".", "INFO", ",", "format", "=", "log_format", ",", "datefmt", "=", "'%m/%d %I:%M:%S %p'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "'{}/log_{}.txt'", ".", "format", "(", "opt", ".", "logdir", ",", "opt", ".", "mode", ")", ")", "\n", "fh", ".", "setFormatter", "(", "logging", ".", "Formatter", "(", "log_format", ")", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.logger.show_opt": [[30, 38], ["vars().items", "isinstance", "logger.info", "vars", "str"], "function", ["None"], ["", "def", "show_opt", "(", "opt", ",", "logger", ")", ":", "\n", "    ", "for", "key", ",", "val", "in", "vars", "(", "opt", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "list", ")", ":", "\n", "            ", "val", "=", "[", "str", "(", "v", ")", "for", "v", "in", "val", "]", "\n", "val", "=", "','", ".", "join", "(", "val", ")", "\n", "", "if", "val", "is", "None", ":", "\n", "            ", "val", "=", "'None'", "\n", "", "logger", ".", "info", "(", "'{:>20} : {:<50}'", ".", "format", "(", "key", ",", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_weights": [[8, 28], ["net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "def", "init_func", "(", "m", ")", ":", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "net", ".", "apply", "(", "init_func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_net": [[30, 36], ["torch.nn.DataParallel.to", "net_util.init_weights", "len", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_weights"], ["", "def", "init_net", "(", "net", ",", "init_type", "=", "'normal'", ",", "gpu_ids", "=", "[", "0", "]", ")", ":", "\n", "    ", "net", ".", "to", "(", "gpu_ids", "[", "0", "]", ")", "\n", "if", "len", "(", "gpu_ids", ")", ">", "0", ":", "\n", "        ", "net", "=", "torch", ".", "nn", ".", "DataParallel", "(", "net", ",", "gpu_ids", ")", "\n", "", "init_weights", "(", "net", ",", "init_type", ")", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.get_scheduler": [[38, 53], ["torch.optim.lr_scheduler.LambdaLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.ReduceLROnPlateau", "max", "float", "torch.optim.lr_scheduler.CosineAnnealingLR", "NotImplementedError"], "function", ["None"], ["", "def", "get_scheduler", "(", "optimizer", ",", "opt", ")", ":", "\n", "    ", "if", "opt", ".", "lr_policy", "==", "'linear'", ":", "\n", "        ", "def", "lambda_rule", "(", "epoch", ")", ":", "\n", "            ", "lr_l", "=", "1.0", "-", "max", "(", "0", ",", "epoch", "-", "opt", ".", "niter", ")", "/", "float", "(", "opt", ".", "niter_decay", "+", "1", ")", "\n", "return", "lr_l", "\n", "", "scheduler", "=", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", "=", "lambda_rule", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'step'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "step_size", "=", "opt", ".", "lr_decay_iters", ",", "gamma", "=", "0.1", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'plateau'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "optimizer", ",", "mode", "=", "'min'", ",", "factor", "=", "0.2", ",", "threshold", "=", "0.01", ",", "patience", "=", "5", ")", "\n", "", "elif", "opt", ".", "lr_policy", "==", "'cosine'", ":", "\n", "        ", "scheduler", "=", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "opt", ".", "niter", ",", "eta_min", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "return", "NotImplementedError", "(", "'learning rate policy {} is not implemented'", ".", "format", "(", "opt", ".", "lr_policy", ")", ")", "\n", "", "return", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.tensor2im": [[55, 68], ["np.tile.astype", "isinstance", "isinstance", "image_tensor[].cpu().float().numpy", "numpy.tile", "image_tensor[].cpu().float", "numpy.transpose", "image_tensor[].cpu"], "function", ["None"], ["", "def", "tensor2im", "(", "input_image", ",", "imtype", "=", "np", ".", "uint8", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "input_image", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "if", "isinstance", "(", "input_image", ",", "torch", ".", "Tensor", ")", ":", "# get the data from a variable", "\n", "            ", "image_tensor", "=", "input_image", ".", "data", "\n", "", "else", ":", "\n", "            ", "return", "input_image", "\n", "", "image_numpy", "=", "image_tensor", "[", "0", "]", ".", "cpu", "(", ")", ".", "float", "(", ")", ".", "numpy", "(", ")", "# convert it into a numpy array", "\n", "if", "image_numpy", ".", "shape", "[", "0", "]", "==", "1", ":", "# grayscale to RGB", "\n", "            ", "image_numpy", "=", "np", ".", "tile", "(", "image_numpy", ",", "(", "3", ",", "1", ",", "1", ")", ")", "\n", "", "image_numpy", "=", "(", "np", ".", "transpose", "(", "image_numpy", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "# post-processing: tranpose and scaling", "\n", "", "else", ":", "# if it is a numpy array, do nothing", "\n", "        ", "image_numpy", "=", "input_image", "\n", "", "return", "image_numpy", ".", "astype", "(", "imtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.print_networks": [[70, 75], ["net.parameters", "print", "param.numel"], "function", ["None"], ["", "def", "print_networks", "(", "net", ")", ":", "\n", "    ", "num_params", "=", "0", "\n", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "        ", "num_params", "+=", "param", ".", "numel", "(", ")", "\n", "", "print", "(", "'[Network G] Total number of parameters : {:.3f} M'", ".", "format", "(", "num_params", "/", "1e6", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.__init__": [[14, 37], ["model.audio_net.AudioNet", "Demo_l2face_trainer.Trainer_.netA.load_state_dict", "Demo_l2face_trainer.Trainer_.netA.to", "torch.load", "model.NAS_GAN.NAS_GAN", "util.net_util.init_net", "util.net_util.print_networks", "Demo_l2face_trainer.Trainer_.netG.eval", "torch.device", "torch.device", "torch.load", "Demo_l2face_trainer.Trainer_.netG.load_state_dict", "torch.load"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_net", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.print_networks"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "video_repeat_times", "=", "opt", ".", "video_repeat_times", "\n", "self", ".", "aud_counts", "=", "opt", ".", "aud_counts", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpus", "[", "0", "]", ")", ")", "if", "opt", ".", "gpus", "[", "0", "]", ">", "-", "1", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "# self.writer = SummaryWriter(logdir=opt.logdir, comment='') if opt.mode == 'train' else None", "\n", "# audio", "\n", "self", ".", "netA", "=", "AudioNet", "(", ")", "\n", "self", ".", "netA", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'model/pretrained/{}_best_{}.pth'", ".", "format", "(", "opt", ".", "data", ",", "opt", ".", "img_size", ")", ",", "\n", "map_location", "=", "{", "'cuda:0'", ":", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpus", "[", "0", "]", ")", "}", ")", "[", "'audio_net'", "]", ")", "\n", "self", ".", "netA", ".", "to", "(", "self", ".", "device", ")", "\n", "# G", "\n", "layers", "=", "9", "\n", "width_mult_list", "=", "[", "4.", "/", "12", ",", "6.", "/", "12", ",", "8.", "/", "12", ",", "10.", "/", "12", ",", "1.", "]", "\n", "width_mult_list_sh", "=", "[", "4", "/", "12", ",", "6.", "/", "12", ",", "8.", "/", "12", ",", "10.", "/", "12", ",", "1.", "]", "\n", "state", "=", "torch", ".", "load", "(", "'model/NAS_GAN_arch.pt'", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "netG", "=", "NAS_GAN", "(", "state", "[", "'alpha'", "]", ",", "state", "[", "'ratio'", "]", ",", "state", "[", "'ratio_sh'", "]", ",", "layers", "=", "layers", ",", "width_mult_list", "=", "width_mult_list", ",", "width_mult_list_sh", "=", "width_mult_list_sh", ")", "\n", "self", ".", "netG", "=", "init_net", "(", "self", ".", "netG", ",", "opt", ".", "init_type", ",", "opt", ".", "gpus", ")", "\n", "print_networks", "(", "self", ".", "netG", ")", "\n", "if", "opt", ".", "resume", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/{}_{}_G.pth'", ".", "format", "(", "opt", ".", "logdir", ",", "opt", ".", "resume_epoch", "if", "opt", ".", "resume_epoch", ">", "-", "1", "else", "'latest'", ",", "opt", ".", "img_size", ")", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'netG'", "]", ")", "\n", "", "self", ".", "netG", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.run": [[38, 81], ["os.path.exists", "os.makedirs", "os.mkdir", "os.mkdir", "os.mkdir", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "cv2.VideoWriter", "cv2.VideoWriter", "enumerate", "cv2.VideoWriter.release", "shutil.rmtree", "Demo_l2face_trainer.Trainer_.set_input", "Demo_l2face_trainer.Trainer_.forward", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu().numpy", "Demo_l2face_trainer.Trainer_.img1.data[].cpu().numpy", "cv2.cvtColor", "cv2.cvtColor", "img1_fake_numpy.astype.astype.astype", "img1_real_numpy.astype.astype.astype", "numpy.concatenate", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "range", "print", "cv2.VideoWriter.write", "cv2.VideoWriter.write", "cv2.VideoWriter.write", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu", "Demo_l2face_trainer.Trainer_.img1.data[].cpu", "len", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward"], ["", "def", "run", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "results_dir", "=", "self", ".", "opt", ".", "results_dir", "\n", "aud_idt", "=", "self", ".", "opt", ".", "aud_idt", "\n", "ref_idt", "=", "self", ".", "opt", ".", "ref_idt", "\n", "img_size", "=", "self", ".", "opt", ".", "img_size", "\n", "save_dir", "=", "'{}/{}-{}'", ".", "format", "(", "results_dir", ",", "aud_idt", ",", "ref_idt", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "save_dir", ")", "\n", "", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "imgs_dir", "=", "'{}/imgs'", ".", "format", "(", "save_dir", ")", "\n", "imgs_dir_ref", "=", "'{}/imgs_ref'", ".", "format", "(", "save_dir", ")", "\n", "imgs_dir_aud", "=", "'{}/imgs_aud'", ".", "format", "(", "save_dir", ")", "\n", "os", ".", "mkdir", "(", "imgs_dir", ")", "\n", "os", ".", "mkdir", "(", "imgs_dir_ref", ")", "\n", "os", ".", "mkdir", "(", "imgs_dir_aud", ")", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}-{}.avi'", ".", "format", "(", "save_dir", ",", "aud_idt", ",", "ref_idt", ")", ",", "fourcc", ",", "25.0", ",", "(", "img_size", "*", "2", ",", "img_size", ")", ")", "\n", "video_ref", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}-{}-ref.avi'", ".", "format", "(", "save_dir", ",", "aud_idt", ",", "ref_idt", ")", ",", "fourcc", ",", "25.0", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "video_aud", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}-{}-aud.avi'", ".", "format", "(", "save_dir", ",", "aud_idt", ",", "ref_idt", ")", ",", "fourcc", ",", "25.0", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "for", "batch_idx", ",", "test_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "self", ".", "set_input", "(", "test_data", ")", "\n", "self", ".", "forward", "(", ")", "\n", "img1_fake", "=", "self", ".", "img1_fake", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_real", "=", "self", ".", "img1", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_fake_numpy", "=", "(", "np", ".", "transpose", "(", "img1_fake", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "img1_real_numpy", "=", "(", "np", ".", "transpose", "(", "img1_real", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "img1_fake_numpy", "=", "cv2", ".", "cvtColor", "(", "img1_fake_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img1_real_numpy", "=", "cv2", ".", "cvtColor", "(", "img1_real_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img1_fake_numpy", "=", "img1_fake_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img1_real_numpy", "=", "img1_real_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img_cat", "=", "np", ".", "concatenate", "(", "[", "img1_fake_numpy", ",", "img1_real_numpy", "]", ",", "axis", "=", "1", ")", "\n", "# img_out = np.concatenate([img1_fake_numpy, img1_real_numpy], axis=1)", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "imgs_dir", ",", "batch_idx", ")", ",", "img_cat", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "imgs_dir_ref", ",", "batch_idx", ")", ",", "img1_fake_numpy", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "imgs_dir_aud", ",", "batch_idx", ")", ",", "img1_real_numpy", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "video_repeat_times", ")", ":", "# five times slower", "\n", "                ", "video", ".", "write", "(", "img_cat", ")", "\n", "video_ref", ".", "write", "(", "img1_fake_numpy", ")", "\n", "video_aud", ".", "write", "(", "img1_real_numpy", ")", "\n", "", "print", "(", "'\\r{}/{}'", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "dataloader", ")", ")", ",", "end", "=", "''", ")", "\n", "if", "batch_idx", "==", "self", ".", "aud_counts", "-", "1", ":", "\n", "                ", "break", "\n", "", "", "video", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.run_decoupling_pose": [[82, 114], ["os.path.exists", "os.makedirs", "enumerate", "shutil.rmtree", "enumerate", "os.makedirs", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "Demo_l2face_trainer.Trainer_.set_input", "list", "enumerate", "cv2.VideoWriter.release", "range", "Demo_l2face_trainer.Trainer_.forward", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu().numpy", "cv2.cvtColor", "img1_fake_numpy.astype.astype.astype", "cv2.imwrite", "range", "print", "cv2.VideoWriter.write", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu", "len", "len", "len", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward"], ["", "def", "run_decoupling_pose", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "results_dir", "=", "self", ".", "opt", ".", "results_dir", "\n", "if", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "results_dir", ")", "\n", "", "os", ".", "makedirs", "(", "results_dir", ",", "exist_ok", "=", "True", ")", "\n", "img_size", "=", "self", ".", "opt", ".", "img_size", "\n", "\n", "for", "batch_idx", ",", "test_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "pose_names", "=", "[", "'pitch'", ",", "'roll'", ",", "'yaw'", "]", "\n", "for", "pose_cnt", ",", "pose_name", "in", "enumerate", "(", "pose_names", ")", ":", "\n", "                ", "save_dir", "=", "'{}/{}/{}'", ".", "format", "(", "results_dir", ",", "pose_name", ",", "batch_idx", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}.avi'", ".", "format", "(", "save_dir", ",", "batch_idx", ")", ",", "fourcc", ",", "25.0", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "self", ".", "set_input", "(", "test_data", ")", "\n", "thr", "=", "60", "\n", "angles", "=", "list", "(", "range", "(", "-", "thr", ",", "thr", ",", "2", ")", ")", "\n", "for", "idx", ",", "angle", "in", "enumerate", "(", "angles", ")", ":", "\n", "                    ", "self", ".", "pose1", "[", "0", "]", "[", "pose_cnt", "]", "=", "angle", "/", "100", "\n", "self", ".", "forward", "(", ")", "\n", "img1_fake", "=", "self", ".", "img1_fake", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_fake_numpy", "=", "(", "np", ".", "transpose", "(", "img1_fake", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "img1_fake_numpy", "=", "cv2", ".", "cvtColor", "(", "img1_fake_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img1_fake_numpy", "=", "img1_fake_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "save_dir", ",", "idx", ")", ",", "img1_fake_numpy", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "video_repeat_times", ")", ":", "# five times slower", "\n", "                        ", "video", ".", "write", "(", "img1_fake_numpy", ")", "\n", "", "print", "(", "'\\rBatch: {}/{} | Pose: {}/{} | Angle: {}/{}'", ".", "format", "(", "\n", "batch_idx", "+", "1", ",", "len", "(", "dataloader", ")", ",", "pose_cnt", "+", "1", ",", "len", "(", "pose_names", ")", ",", "idx", "+", "1", ",", "len", "(", "angles", ")", ")", ",", "end", "=", "''", ")", "\n", "", "video", ".", "release", "(", ")", "\n", "", "if", "batch_idx", "==", "self", ".", "aud_counts", "-", "1", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.run_decoupling_eye": [[115, 150], ["os.path.exists", "os.makedirs", "enumerate", "shutil.rmtree", "enumerate", "os.makedirs", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "Demo_l2face_trainer.Trainer_.set_input", "list", "enumerate", "cv2.VideoWriter.release", "range", "Demo_l2face_trainer.Trainer_.forward", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu().numpy", "cv2.cvtColor", "img1_fake_numpy.astype.astype.astype", "cv2.imwrite", "range", "print", "cv2.VideoWriter.write", "Demo_l2face_trainer.Trainer_.img1_fake.data[].cpu", "len", "len", "len", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward"], ["", "", "", "def", "run_decoupling_eye", "(", "self", ",", "dataloader", ")", ":", "\n", "        ", "results_dir", "=", "self", ".", "opt", ".", "results_dir", "\n", "if", "os", ".", "path", ".", "exists", "(", "results_dir", ")", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "results_dir", ")", "\n", "", "os", ".", "makedirs", "(", "results_dir", ",", "exist_ok", "=", "True", ")", "\n", "img_size", "=", "self", ".", "opt", ".", "img_size", "\n", "\n", "for", "batch_idx", ",", "test_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "eye_names", "=", "[", "'l'", ",", "'r'", ",", "'lr'", "]", "\n", "for", "eye_cnt", ",", "eye_name", "in", "enumerate", "(", "eye_names", ")", ":", "\n", "                ", "save_dir", "=", "'{}/{}/{}'", ".", "format", "(", "results_dir", ",", "eye_name", ",", "batch_idx", ")", "\n", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}.avi'", ".", "format", "(", "save_dir", ",", "batch_idx", ")", ",", "fourcc", ",", "25.0", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "self", ".", "set_input", "(", "test_data", ")", "\n", "thr", "=", "100", "\n", "angles", "=", "list", "(", "range", "(", "-", "thr", ",", "thr", ",", "2", ")", ")", "\n", "for", "idx", ",", "angle", "in", "enumerate", "(", "angles", ")", ":", "\n", "                    ", "if", "'l'", "in", "eye_name", ":", "\n", "                        ", "self", ".", "eye1", "[", "0", "]", "[", "0", "]", "=", "angle", "/", "100", "\n", "", "if", "'r'", "in", "eye_name", ":", "\n", "                        ", "self", ".", "eye1", "[", "0", "]", "[", "1", "]", "=", "angle", "/", "100", "\n", "", "self", ".", "forward", "(", ")", "\n", "img1_fake", "=", "self", ".", "img1_fake", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_fake_numpy", "=", "(", "np", ".", "transpose", "(", "img1_fake", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "img1_fake_numpy", "=", "cv2", ".", "cvtColor", "(", "img1_fake_numpy", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img1_fake_numpy", "=", "img1_fake_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}.jpg'", ".", "format", "(", "save_dir", ",", "idx", ")", ",", "img1_fake_numpy", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "video_repeat_times", ")", ":", "# five times slower", "\n", "                        ", "video", ".", "write", "(", "img1_fake_numpy", ")", "\n", "", "print", "(", "'\\rBatch: {}/{} | Pose: {}/{} | Angle: {}/{}'", ".", "format", "(", "\n", "batch_idx", "+", "1", ",", "len", "(", "dataloader", ")", ",", "eye_cnt", "+", "1", ",", "len", "(", "eye_names", ")", ",", "idx", "+", "1", ",", "len", "(", "angles", ")", ")", ",", "end", "=", "''", ")", "\n", "", "video", ".", "release", "(", ")", "\n", "", "if", "batch_idx", "==", "self", ".", "aud_counts", "-", "1", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.set_input": [[151, 158], ["aud_feat1.to", "pose1.to", "eye1.to", "img1.to", "img2.to"], "methods", ["None"], ["", "", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "aud_feat1", ",", "pose1", ",", "eye1", ",", "img1", ",", "img2", "=", "input", "\n", "self", ".", "aud_feat1", "=", "aud_feat1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "pose1", "=", "pose1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eye1", "=", "eye1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "img1", "=", "img1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "img2", "=", "img2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.Demo_l2face_trainer.Trainer_.forward": [[159, 162], ["Demo_l2face_trainer.Trainer_.netA", "Demo_l2face_trainer.Trainer_.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "latent", ",", "landmark", "=", "self", ".", "netA", "(", "self", ".", "aud_feat1", ",", "self", ".", "pose1", ",", "self", ".", "eye1", ")", "\n", "self", ".", "img1_fake", "=", "self", ".", "netG", "(", "self", ".", "img2", ",", "latent", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.__init__": [[15, 56], ["model.audio_net.AudioNet", "l2face_trainer.Trainer_.netA.load_state_dict", "l2face_trainer.Trainer_.netA.to", "torch.load", "model.NAS_GAN.NAS_GAN", "util.net_util.init_net", "util.net_util.print_networks", "torch.device", "torch.device", "tensorboardX.SummaryWriter", "torch.load", "l2face_trainer.Trainer_.netG.load_state_dict", "model.patchgan_dis.NLayerDiscriminator", "util.net_util.init_net", "loss.ganloss.GANLoss().to", "torch.nn.L1Loss", "l2face_trainer.Trainer_.init_optim", "torch.load", "torch.load", "l2face_trainer.Trainer_.netD.load_state_dict", "loss.ganloss.GANLoss"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_net", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.print_networks", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.init_net", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.init_optim"], ["    ", "def", "__init__", "(", "self", ",", "opt", ",", "logger", ")", ":", "\n", "        ", "self", ".", "opt", "=", "opt", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "isTrain", "=", "True", "if", "opt", ".", "mode", "==", "'train'", "else", "False", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpus", "[", "0", "]", ")", ")", "if", "opt", ".", "gpus", "[", "0", "]", ">", "-", "1", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "iters", "=", "0", "\n", "self", ".", "GpD", "=", "1", "\n", "self", ".", "GpD_iters", "=", "0", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", "=", "opt", ".", "logdir", ",", "comment", "=", "''", ")", "if", "opt", ".", "mode", "==", "'train'", "else", "None", "\n", "# audio", "\n", "self", ".", "netA", "=", "AudioNet", "(", ")", "\n", "self", ".", "netA", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'model/pretrained/{}_best_{}.pth'", ".", "format", "(", "opt", ".", "data", ",", "opt", ".", "img_size", ")", ",", "\n", "map_location", "=", "{", "'cuda:0'", ":", "'cuda:{}'", ".", "format", "(", "opt", ".", "gpus", "[", "0", "]", ")", "}", ")", "[", "'audio_net'", "]", ")", "\n", "self", ".", "netA", ".", "to", "(", "self", ".", "device", ")", "\n", "# G", "\n", "# self.netG = UNet_D4XS()", "\n", "# self.netG = Resnet_kernel(n_blocks=6)", "\n", "layers", "=", "9", "\n", "width_mult_list", "=", "[", "4.", "/", "12", ",", "6.", "/", "12", ",", "8.", "/", "12", ",", "10.", "/", "12", ",", "1.", "]", "\n", "width_mult_list_sh", "=", "[", "4", "/", "12", ",", "6.", "/", "12", ",", "8.", "/", "12", ",", "10.", "/", "12", ",", "1.", "]", "\n", "state", "=", "torch", ".", "load", "(", "'model/NAS_GAN_arch.pt'", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "netG", "=", "NAS_GAN", "(", "state", "[", "'alpha'", "]", ",", "state", "[", "'ratio'", "]", ",", "state", "[", "'ratio_sh'", "]", ",", "layers", "=", "layers", ",", "width_mult_list", "=", "width_mult_list", ",", "width_mult_list_sh", "=", "width_mult_list_sh", ")", "\n", "self", ".", "netG", "=", "init_net", "(", "self", ".", "netG", ",", "opt", ".", "init_type", ",", "opt", ".", "gpus", ")", "\n", "print_networks", "(", "self", ".", "netG", ")", "\n", "if", "opt", ".", "resume", ":", "\n", "# checkpoint = torch.load('{}/{}_{}_G.pth'.format(opt.logdir, opt.resume_epoch if opt.resume_epoch > -1 else 'latest', opt.img_size), map_location={'cuda:0': 'cuda:{}'.format(opt.gpus[0])})", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/{}_{}_G.pth'", ".", "format", "(", "opt", ".", "logdir", ",", "opt", ".", "resume_epoch", "if", "opt", ".", "resume_epoch", ">", "-", "1", "else", "'latest'", ",", "opt", ".", "img_size", ")", ",", "map_location", "=", "self", ".", "device", ")", "\n", "self", ".", "netG", ".", "load_state_dict", "(", "checkpoint", "[", "'netG'", "]", ")", "\n", "self", ".", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "# D", "\n", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "netD", "=", "NLayerDiscriminator", "(", "ndf", "=", "64", ")", "\n", "self", ".", "netD", "=", "init_net", "(", "self", ".", "netD", ",", "opt", ".", "init_type", ",", "opt", ".", "gpus", ")", "\n", "if", "opt", ".", "resume", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "'{}/{}_{}_D.pth'", ".", "format", "(", "opt", ".", "logdir", ",", "opt", ".", "resume_epoch", "if", "opt", ".", "resume_epoch", ">", "-", "1", "else", "'latest'", ",", "opt", ".", "img_size", ")", ")", "\n", "self", ".", "netD", ".", "load_state_dict", "(", "checkpoint", "[", "'netD'", "]", ")", "\n", "", "", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "criterionGAN", "=", "GANLoss", "(", "opt", ".", "gan_mode", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "criterionL1", "=", "torch", ".", "nn", ".", "L1Loss", "(", ")", "\n", "self", ".", "init_optim", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.init_optim": [[57, 69], ["util.net_util.get_scheduler", "util.net_util.get_scheduler", "torch.optim.Adam", "torch.optim.Adam", "l2face_trainer.Trainer_.netG.parameters", "l2face_trainer.Trainer_.netD.parameters", "torch.optim.SGD", "torch.optim.SGD", "l2face_trainer.Trainer_.netG.parameters", "l2face_trainer.Trainer_.netD.parameters", "torch.optim.RMSprop", "torch.optim.RMSprop", "l2face_trainer.Trainer_.netG.parameters", "l2face_trainer.Trainer_.netD.parameters"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.get_scheduler", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.util.net_util.get_scheduler"], ["", "", "def", "init_optim", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "opt", ".", "optim", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", ",", "betas", "=", "(", "self", ".", "opt", ".", "beta1", ",", "0.999", ")", ")", "\n", "", "elif", "self", ".", "opt", ".", "optim", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", "*", "100", ",", "momentum", "=", "0.9", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "SGD", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", "*", "100", ",", "momentum", "=", "0.9", ")", "\n", "", "elif", "self", ".", "opt", ".", "optim", "==", "'RMSprop'", ":", "\n", "            ", "self", ".", "optimizer_G", "=", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "netG", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", "*", "100", ")", "\n", "self", ".", "optimizer_D", "=", "torch", ".", "optim", ".", "RMSprop", "(", "self", ".", "netD", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "opt", ".", "lr", "*", "100", ")", "\n", "", "self", ".", "scheduler_G", "=", "get_scheduler", "(", "self", ".", "optimizer_G", ",", "self", ".", "opt", ")", "\n", "self", ".", "scheduler_D", "=", "get_scheduler", "(", "self", ".", "optimizer_D", ",", "self", ".", "opt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.reset": [[70, 82], ["l2face_trainer.Trainer_.netA.eval", "l2face_trainer.Trainer_.netG.train", "l2face_trainer.Trainer_.netD.train", "l2face_trainer.Trainer_.netA.eval", "l2face_trainer.Trainer_.netG.eval"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "\n", "            ", "self", ".", "netA", ".", "eval", "(", ")", "\n", "self", ".", "netG", ".", "train", "(", ")", "\n", "self", ".", "netD", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "netA", ".", "eval", "(", ")", "\n", "self", ".", "netG", ".", "eval", "(", ")", "\n", "", "self", ".", "loss_log_L1", "=", "0", "\n", "self", ".", "loss_log_G", "=", "0", "\n", "self", ".", "loss_log_D_R", "=", "0", "\n", "self", ".", "loss_log_D_F", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.run": [[83, 138], ["l2face_trainer.Trainer_.reset", "l2face_trainer.Trainer_.scheduler_G.step", "l2face_trainer.Trainer_.scheduler_D.step", "enumerate", "print", "l2face_trainer.Trainer_.logger.info", "l2face_trainer.Trainer_.save", "cv2.VideoWriter_fourcc", "cv2.VideoWriter", "l2face_trainer.Trainer_.reset", "enumerate", "cv2.VideoWriter.release", "l2face_trainer.Trainer_.set_input", "l2face_trainer.Trainer_.optimize_parameters", "l2face_trainer.Trainer_.writer.add_scalar", "print", "l2face_trainer.Trainer_.save", "l2face_trainer.Trainer_.set_input", "l2face_trainer.Trainer_.forward", "l2face_trainer.Trainer_.img1_fake.data[].cpu().numpy", "l2face_trainer.Trainer_.img1.data[].cpu().numpy", "img1_fake_numpy.astype.astype.astype", "img1_real_numpy.astype.astype.astype", "numpy.concatenate", "range", "print", "l2face_trainer.Trainer_.writer.add_images", "l2face_trainer.Trainer_.writer.add_images", "l2face_trainer.Trainer_.writer.flush", "len", "time.strftime", "cv2.VideoWriter.write", "l2face_trainer.Trainer_.img1_fake.data[].cpu", "l2face_trainer.Trainer_.img1.data[].cpu", "cv2.cvtColor", "len", "numpy.transpose", "numpy.transpose"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.reset", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.save", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.reset", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.optimize_parameters", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.save", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward"], ["", "def", "run", "(", "self", ",", "dataloader", ",", "epoch", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "isTrain", ":", "# train", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "scheduler_G", ".", "step", "(", ")", "\n", "self", ".", "scheduler_D", ".", "step", "(", ")", "\n", "for", "batch_idx", ",", "train_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                ", "self", ".", "iters", "+=", "1", "\n", "self", ".", "set_input", "(", "train_data", ")", "\n", "self", ".", "optimize_parameters", "(", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "'L1'", ",", "self", ".", "loss_log_L1", "/", "(", "batch_idx", "+", "1", ")", ",", "self", ".", "iters", ")", "\n", "if", "self", ".", "iters", "%", "self", ".", "opt", ".", "show_iters", "==", "0", ":", "\n", "                    ", "self", ".", "writer", ".", "add_images", "(", "'Real_Image'", ",", "(", "self", ".", "img1", "+", "1", ")", "/", "2", ",", "self", ".", "iters", ")", "\n", "self", ".", "writer", ".", "add_images", "(", "'Fake_Image'", ",", "(", "self", ".", "img1_fake", "+", "1", ")", "/", "2", ",", "self", ".", "iters", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "", "log_string", "=", "'train --> '", "\n", "log_string", "+=", "'[epoch {} | '", ".", "format", "(", "self", ".", "epoch", ")", "\n", "log_string", "+=", "'iters {}] '", ".", "format", "(", "self", ".", "iters", ")", "\n", "log_string", "+=", "'batch {}/{} '", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "dataloader", ")", ")", "\n", "log_string", "+=", "'|loss_L1 {:.5f}'", ".", "format", "(", "self", ".", "loss_log_L1", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "log_string", "+=", "'|loss_G {:.5f}'", ".", "format", "(", "self", ".", "loss_log_G", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "log_string", "+=", "'|loss_D_R {:.5f}'", ".", "format", "(", "self", ".", "loss_log_D_R", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "log_string", "+=", "'|loss_D_F {:.5f}'", ".", "format", "(", "self", ".", "loss_log_D_F", "/", "(", "batch_idx", "+", "1", ")", ")", "\n", "print", "(", "'\\r'", "+", "log_string", ",", "end", "=", "''", ")", "\n", "", "print", "(", "'\\r'", ",", "end", "=", "''", ")", "\n", "self", ".", "logger", ".", "info", "(", "log_string", ")", "\n", "# checkpoint", "\n", "self", ".", "save", "(", "'latest'", ")", "\n", "if", "self", ".", "epoch", "%", "self", ".", "opt", ".", "record_every", "==", "0", ":", "\n", "                ", "self", ".", "save", "(", ")", "\n", "", "", "else", ":", "# test", "\n", "            ", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'XVID'", ")", "\n", "video", "=", "cv2", ".", "VideoWriter", "(", "'{}/{}_{}_{}.avi'", ".", "format", "(", "self", ".", "opt", ".", "logdir", ",", "self", ".", "opt", ".", "idt_test", ",", "self", ".", "opt", ".", "img_size", ",", "time", ".", "strftime", "(", "\"%Y%m%d-%H%M%S\"", ")", ")", ",", "fourcc", ",", "25.0", ",", "\n", "(", "self", ".", "opt", ".", "img_size", "*", "2", ",", "self", ".", "opt", ".", "img_size", ")", ")", "\n", "\n", "self", ".", "reset", "(", ")", "\n", "for", "batch_idx", ",", "test_data", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "                ", "self", ".", "set_input", "(", "test_data", ")", "\n", "self", ".", "forward", "(", ")", "\n", "img1_fake", "=", "self", ".", "img1_fake", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_real", "=", "self", ".", "img1", ".", "data", "[", "0", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "img1_fake_numpy", "=", "(", "np", ".", "transpose", "(", "img1_fake", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "img1_real_numpy", "=", "(", "np", ".", "transpose", "(", "img1_real", ",", "(", "1", ",", "2", ",", "0", ")", ")", "+", "1", ")", "/", "2.0", "*", "255.0", "\n", "# img1_fake_numpy = cv2.cvtColor(img1_fake_numpy, cv2.COLOR_RGB2BGR)", "\n", "# img1_real_numpy = cv2.cvtColor(img1_real_numpy, cv2.COLOR_RGB2BGR)", "\n", "img1_fake_numpy", "=", "img1_fake_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "img1_real_numpy", "=", "img1_real_numpy", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# cv2.imwrite('test.jpg', img1_fake_numpy)", "\n", "img_out", "=", "np", ".", "concatenate", "(", "[", "img1_fake_numpy", ",", "img1_real_numpy", "]", ",", "axis", "=", "1", ")", "\n", "for", "_", "in", "range", "(", "5", ")", ":", "# five times slower", "\n", "                    ", "video", ".", "write", "(", "cv2", ".", "cvtColor", "(", "img_out", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "", "print", "(", "'\\r{}/{}'", ".", "format", "(", "batch_idx", "+", "1", ",", "len", "(", "dataloader", ")", ")", ",", "end", "=", "''", ")", "\n", "if", "batch_idx", "==", "300", "-", "1", ":", "\n", "                    ", "break", "\n", "", "", "video", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_input": [[139, 146], ["aud_feat1.to", "pose1.to", "eye1.to", "img1.to", "img2.to"], "methods", ["None"], ["", "", "def", "set_input", "(", "self", ",", "input", ")", ":", "\n", "        ", "aud_feat1", ",", "pose1", ",", "eye1", ",", "img1", ",", "img2", "=", "input", "\n", "self", ".", "aud_feat1", "=", "aud_feat1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "pose1", "=", "pose1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "eye1", "=", "eye1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "img1", "=", "img1", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "img2", "=", "img2", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.forward": [[147, 151], ["l2face_trainer.Trainer_.netA", "l2face_trainer.Trainer_.netG"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "latent", ",", "landmark", "=", "self", ".", "netA", "(", "self", ".", "aud_feat1", ",", "self", ".", "pose1", ",", "self", ".", "eye1", ")", "\n", "# self.img1_fake, self.img1_inter = self.netG(self.img2, latent)", "\n", "self", ".", "img1_fake", "=", "self", ".", "netG", "(", "self", ".", "img2", ",", "latent", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.backward_D": [[152, 164], ["torch.cat", "l2face_trainer.Trainer_.netD", "l2face_trainer.Trainer_.criterionGAN", "torch.cat", "l2face_trainer.Trainer_.netD", "l2face_trainer.Trainer_.criterionGAN", "l2face_trainer.Trainer_.loss_D.backward", "l2face_trainer.Trainer_.loss_D_fake.item", "l2face_trainer.Trainer_.loss_D_real.item", "torch.cat.detach"], "methods", ["None"], ["", "def", "backward_D", "(", "self", ")", ":", "\n", "        ", "lambda_D", "=", "1", "\n", "fake_12", "=", "torch", ".", "cat", "(", "(", "self", ".", "img2", ",", "self", ".", "img1_fake", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_12", ".", "detach", "(", ")", ")", "\n", "self", ".", "loss_D_fake", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "False", ")", "\n", "real_12", "=", "torch", ".", "cat", "(", "(", "self", ".", "img2", ",", "self", ".", "img1", ")", ",", "1", ")", "\n", "pred_real", "=", "self", ".", "netD", "(", "real_12", ")", "\n", "self", ".", "loss_D_real", "=", "self", ".", "criterionGAN", "(", "pred_real", ",", "True", ")", "\n", "self", ".", "loss_D", "=", "(", "self", ".", "loss_D_fake", "+", "self", ".", "loss_D_real", ")", "*", "0.5", "*", "lambda_D", "\n", "self", ".", "loss_D", ".", "backward", "(", ")", "\n", "self", ".", "loss_log_D_F", "+=", "self", ".", "loss_D_fake", ".", "item", "(", ")", "\n", "self", ".", "loss_log_D_R", "+=", "self", ".", "loss_D_real", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.backward_G": [[165, 176], ["torch.cat", "l2face_trainer.Trainer_.netD", "l2face_trainer.Trainer_.loss_G.backward", "l2face_trainer.Trainer_.loss_G_GAN.item", "l2face_trainer.Trainer_.loss_G_L1.item", "l2face_trainer.Trainer_.criterionGAN", "l2face_trainer.Trainer_.criterionL1"], "methods", ["None"], ["", "def", "backward_G", "(", "self", ")", ":", "\n", "        ", "lambda_GAN", "=", "1", "\n", "lambda_L1", "=", "100", "\n", "fake_AB", "=", "torch", ".", "cat", "(", "(", "self", ".", "img2", ",", "self", ".", "img1_fake", ")", ",", "1", ")", "\n", "pred_fake", "=", "self", ".", "netD", "(", "fake_AB", ")", "\n", "self", ".", "loss_G_GAN", "=", "self", ".", "criterionGAN", "(", "pred_fake", ",", "True", ")", "*", "lambda_GAN", "\n", "self", ".", "loss_G_L1", "=", "self", ".", "criterionL1", "(", "self", ".", "img1_fake", ",", "self", ".", "img1", ")", "*", "lambda_L1", "\n", "self", ".", "loss_G", "=", "self", ".", "loss_G_GAN", "+", "self", ".", "loss_G_L1", "\n", "self", ".", "loss_G", ".", "backward", "(", ")", "\n", "self", ".", "loss_log_G", "+=", "self", ".", "loss_G_GAN", ".", "item", "(", ")", "\n", "self", ".", "loss_log_L1", "+=", "self", ".", "loss_G_L1", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.optimize_parameters": [[177, 193], ["l2face_trainer.Trainer_.forward", "l2face_trainer.Trainer_.set_requires_grad", "l2face_trainer.Trainer_.optimizer_G.zero_grad", "l2face_trainer.Trainer_.backward_G", "l2face_trainer.Trainer_.optimizer_G.step", "l2face_trainer.Trainer_.set_requires_grad", "l2face_trainer.Trainer_.optimizer_D.zero_grad", "l2face_trainer.Trainer_.backward_D", "l2face_trainer.Trainer_.optimizer_D.step"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_requires_grad", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.backward_G", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_requires_grad", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.backward_D"], ["", "def", "optimize_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "forward", "(", ")", "\n", "if", "self", ".", "GpD_iters", "==", "0", ":", "\n", "# update D", "\n", "            ", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "True", ")", "\n", "self", ".", "optimizer_D", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_D", "(", ")", "\n", "self", ".", "optimizer_D", ".", "step", "(", ")", "\n", "# update G", "\n", "", "self", ".", "set_requires_grad", "(", "self", ".", "netD", ",", "False", ")", "\n", "self", ".", "optimizer_G", ".", "zero_grad", "(", ")", "\n", "self", ".", "backward_G", "(", ")", "\n", "self", ".", "optimizer_G", ".", "step", "(", ")", "\n", "\n", "self", ".", "GpD_iters", "+=", "1", "\n", "self", ".", "GpD_iters", "=", "self", ".", "GpD_iters", "%", "self", ".", "GpD", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.set_requires_grad": [[194, 201], ["isinstance", "net.parameters"], "methods", ["None"], ["", "def", "set_requires_grad", "(", "self", ",", "nets", ",", "requires_grad", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "nets", ",", "list", ")", ":", "\n", "            ", "nets", "=", "[", "nets", "]", "\n", "", "for", "net", "in", "nets", ":", "\n", "            ", "if", "net", "is", "not", "None", ":", "\n", "                ", "for", "param", "in", "net", ".", "parameters", "(", ")", ":", "\n", "                    ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.save": [[202, 213], ["torch.save", "torch.save", "l2face_trainer.Trainer_.netA.state_dict", "l2face_trainer.Trainer_.netG.state_dict", "l2face_trainer.Trainer_.netD.state_dict"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.save", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.l2face_trainer.Trainer_.save"], ["", "", "", "", "def", "save", "(", "self", ",", "mode", "=", "None", ")", ":", "\n", "        ", "state_G", "=", "{", "\n", "'netA'", ":", "self", ".", "netA", ".", "state_dict", "(", ")", ",", "\n", "'netG'", ":", "self", ".", "netG", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "}", "\n", "state_D", "=", "{", "\n", "'netD'", ":", "self", ".", "netD", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "state_G", ",", "'{}/{}_{}_G.pth'", ".", "format", "(", "self", ".", "opt", ".", "logdir", ",", "mode", "if", "mode", "else", "self", ".", "epoch", ",", "self", ".", "opt", ".", "img_size", ")", ")", "\n", "torch", ".", "save", "(", "state_D", ",", "'{}/{}_{}_D.pth'", ".", "format", "(", "self", ".", "opt", ".", "logdir", ",", "mode", "if", "mode", "else", "self", ".", "epoch", ",", "self", ".", "opt", ".", "img_size", ")", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.trainer.__init__.get_trainer": [[5, 11], ["importlib.import_module", "trainer"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.inception.InceptionV3.__init__": [[21, 106], ["torch.Module.__init__", "sorted", "max", "torch.ModuleList", "torch.ModuleList", "torchvision.models.inception_v3", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.parameters", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "models.inception_v3.InceptionV3.blocks.append", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Sequential", "torch.Sequential"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["def", "__init__", "(", "self", ",", "\n", "output_blocks", "=", "[", "DEFAULT_BLOCK_INDEX", "]", ",", "\n", "resize_input", "=", "True", ",", "\n", "normalize_input", "=", "True", ",", "\n", "requires_grad", "=", "False", ")", ":", "\n", "        ", "\"\"\"Build pretrained InceptionV3\n\n        Parameters\n        ----------\n        output_blocks : list of int\n            Indices of blocks to return features of. Possible values are:\n                - 0: corresponds to output of first max pooling\n                - 1: corresponds to output of second max pooling\n                - 2: corresponds to output which is fed to aux classifier\n                - 3: corresponds to output of final average pooling\n        resize_input : bool\n            If true, bilinearly resizes input to width and height 299 before\n            feeding input to model. As the network without fully connected\n            layers is fully convolutional, it should be able to handle inputs\n            of arbitrary size, so resizing might not be strictly needed\n        normalize_input : bool\n            If true, scales the input from range (0, 1) to the range the\n            pretrained Inception network expects, namely (-1, 1)\n        requires_grad : bool\n            If true, parameters of the model require gradient. Possibly useful\n            for finetuning the network\n        \"\"\"", "\n", "super", "(", "InceptionV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resize_input", "=", "resize_input", "\n", "self", ".", "normalize_input", "=", "normalize_input", "\n", "self", ".", "output_blocks", "=", "sorted", "(", "output_blocks", ")", "\n", "self", ".", "last_needed_block", "=", "max", "(", "output_blocks", ")", "\n", "\n", "assert", "self", ".", "last_needed_block", "<=", "3", ",", "'Last possible output block index is 3'", "\n", "\n", "self", ".", "blocks", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "inception", "=", "models", ".", "inception_v3", "(", "pretrained", "=", "True", ")", "\n", "\n", "# Block 0: input to maxpool1", "\n", "block0", "=", "[", "\n", "inception", ".", "Conv2d_1a_3x3", ",", "\n", "inception", ".", "Conv2d_2a_3x3", ",", "\n", "inception", ".", "Conv2d_2b_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block0", ")", ")", "\n", "\n", "# Block 1: maxpool1 to maxpool2", "\n", "if", "self", ".", "last_needed_block", ">=", "1", ":", "\n", "            ", "block1", "=", "[", "\n", "inception", ".", "Conv2d_3b_1x1", ",", "\n", "inception", ".", "Conv2d_4a_3x3", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block1", ")", ")", "\n", "\n", "# Block 2: maxpool2 to aux classifier", "\n", "", "if", "self", ".", "last_needed_block", ">=", "2", ":", "\n", "            ", "block2", "=", "[", "\n", "inception", ".", "Mixed_5b", ",", "\n", "inception", ".", "Mixed_5c", ",", "\n", "inception", ".", "Mixed_5d", ",", "\n", "inception", ".", "Mixed_6a", ",", "\n", "inception", ".", "Mixed_6b", ",", "\n", "inception", ".", "Mixed_6c", ",", "\n", "inception", ".", "Mixed_6d", ",", "\n", "inception", ".", "Mixed_6e", ",", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block2", ")", ")", "\n", "\n", "# Block 3: aux classifier to final avgpool", "\n", "", "if", "self", ".", "last_needed_block", ">=", "3", ":", "\n", "            ", "block3", "=", "[", "\n", "inception", ".", "Mixed_7a", ",", "\n", "inception", ".", "Mixed_7b", ",", "\n", "inception", ".", "Mixed_7c", ",", "\n", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "]", "\n", "self", ".", "blocks", ".", "append", "(", "nn", ".", "Sequential", "(", "*", "block3", ")", ")", "\n", "\n", "", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "requires_grad", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.inception.InceptionV3.forward": [[107, 142], ["enumerate", "torch.interpolate", "torch.interpolate", "block", "outp.append"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "\"\"\"Get Inception feature maps\n\n        Parameters\n        ----------\n        inp : torch.autograd.Variable\n            Input tensor of shape Bx3xHxW. Values are expected to be in\n            range (0, 1)\n\n        Returns\n        -------\n        List of torch.autograd.Variable, corresponding to the selected output\n        block, sorted ascending by index\n        \"\"\"", "\n", "outp", "=", "[", "]", "\n", "x", "=", "inp", "\n", "\n", "if", "self", ".", "resize_input", ":", "\n", "            ", "x", "=", "F", ".", "interpolate", "(", "x", ",", "\n", "size", "=", "(", "299", ",", "299", ")", ",", "\n", "mode", "=", "'bilinear'", ",", "\n", "align_corners", "=", "False", ")", "\n", "\n", "", "if", "self", ".", "normalize_input", ":", "\n", "            ", "x", "=", "2", "*", "x", "-", "1", "# Scale from range (0, 1) to range (-1, 1)", "\n", "\n", "", "for", "idx", ",", "block", "in", "enumerate", "(", "self", ".", "blocks", ")", ":", "\n", "            ", "x", "=", "block", "(", "x", ")", "\n", "if", "idx", "in", "self", ".", "output_blocks", ":", "\n", "                ", "outp", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "idx", "==", "self", ".", "last_needed_block", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "outp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.get_activations": [[68, 135], ["model.eval", "numpy.empty", "tqdm", "print", "len", "print", "len", "len", "range", "numpy.array", "images.transpose.transpose", "torch.from_numpy().type", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy().reshape", "print", "len", "print", "batch.cuda.cuda", "model", "torch.nn.functional.adaptive_avg_pool2d", "imageio.imread().astype", "torch.from_numpy", "torch.nn.functional.adaptive_avg_pool2d.cpu().data.numpy", "imageio.imread", "str", "torch.nn.functional.adaptive_avg_pool2d.cpu"], "function", ["None"], ["def", "get_activations", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "dims", "=", "2048", ",", "\n", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculates the activations of the pool_3 layer for all images.\n\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : Batch size of images for the model to process at once.\n                     Make sure that the number of samples is a multiple of\n                     the batch size, otherwise some samples are ignored. This\n                     behavior is retained to match the original FID score\n                     implementation.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the number\n                     of calculated batches is reported.\n    Returns:\n    -- A numpy array of dimension (num images, dims) that contains the\n       activations of the given tensor when feeding inception with the\n       query tensor.\n    \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "if", "len", "(", "files", ")", "%", "batch_size", "!=", "0", ":", "\n", "        ", "print", "(", "(", "'Warning: number of images is not a multiple of the '", "\n", "'batch size. Some samples are going to be ignored.'", ")", ")", "\n", "", "if", "batch_size", ">", "len", "(", "files", ")", ":", "\n", "        ", "print", "(", "(", "'Warning: batch size is bigger than the data size. '", "\n", "'Setting batch size to data size'", ")", ")", "\n", "batch_size", "=", "len", "(", "files", ")", "\n", "\n", "", "n_batches", "=", "len", "(", "files", ")", "//", "batch_size", "\n", "n_used_imgs", "=", "n_batches", "*", "batch_size", "\n", "\n", "pred_arr", "=", "np", ".", "empty", "(", "(", "n_used_imgs", ",", "dims", ")", ")", "\n", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "n_batches", ")", ")", ":", "\n", "        ", "if", "verbose", ":", "\n", "            ", "print", "(", "'\\rPropagating batch %d/%d'", "%", "(", "i", "+", "1", ",", "n_batches", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "", "start", "=", "i", "*", "batch_size", "\n", "end", "=", "start", "+", "batch_size", "\n", "\n", "images", "=", "np", ".", "array", "(", "[", "imread", "(", "str", "(", "f", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "f", "in", "files", "[", "start", ":", "end", "]", "]", ")", "\n", "\n", "# Reshape to (n_images, 3, height, width)", "\n", "images", "=", "images", ".", "transpose", "(", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "images", "/=", "255", "\n", "\n", "batch", "=", "torch", ".", "from_numpy", "(", "images", ")", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "if", "cuda", ":", "\n", "            ", "batch", "=", "batch", ".", "cuda", "(", ")", "\n", "\n", "", "pred", "=", "model", "(", "batch", ")", "[", "0", "]", "\n", "\n", "# If model output is not scalar, apply global spatial average pooling.", "\n", "# This happens if you choose a dimensionality not equal 2048.", "\n", "if", "pred", ".", "shape", "[", "2", "]", "!=", "1", "or", "pred", ".", "shape", "[", "3", "]", "!=", "1", ":", "\n", "            ", "pred", "=", "adaptive_avg_pool2d", "(", "pred", ",", "output_size", "=", "(", "1", ",", "1", ")", ")", "\n", "\n", "", "pred_arr", "[", "start", ":", "end", "]", "=", "pred", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ".", "reshape", "(", "batch_size", ",", "-", "1", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "' done'", ")", "\n", "\n", "", "return", "pred_arr", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.calculate_frechet_distance": [[137, 192], ["numpy.atleast_1d", "numpy.atleast_1d", "numpy.atleast_2d", "numpy.atleast_2d", "scipy.linalg.sqrtm", "numpy.iscomplexobj", "numpy.trace", "np.atleast_2d.dot", "numpy.isfinite().all", "print", "scipy.linalg.sqrtm", "numpy.eye", "numpy.allclose", "numpy.max", "ValueError", "numpy.trace", "numpy.isfinite", "numpy.abs", "diff.dot", "numpy.trace", "numpy.diagonal"], "function", ["None"], ["", "def", "calculate_frechet_distance", "(", "mu1", ",", "sigma1", ",", "mu2", ",", "sigma2", ",", "eps", "=", "1e-6", ")", ":", "\n", "    ", "\"\"\"Numpy implementation of the Frechet Distance.\n    The Frechet distance between two multivariate Gaussians X_1 ~ N(mu_1, C_1)\n    and X_2 ~ N(mu_2, C_2) is\n            d^2 = ||mu_1 - mu_2||^2 + Tr(C_1 + C_2 - 2*sqrt(C_1*C_2)).\n\n    Stable version by Dougal J. Sutherland.\n\n    Params:\n    -- mu1   : Numpy array containing the activations of a layer of the\n               inception net (like returned by the function 'get_predictions')\n               for generated samples.\n    -- mu2   : The sample mean over activations, precalculated on an\n               representative data set.\n    -- sigma1: The covariance matrix over activations for generated samples.\n    -- sigma2: The covariance matrix over activations, precalculated on an\n               representative data set.\n\n    Returns:\n    --   : The Frechet Distance.\n    \"\"\"", "\n", "\n", "mu1", "=", "np", ".", "atleast_1d", "(", "mu1", ")", "\n", "mu2", "=", "np", ".", "atleast_1d", "(", "mu2", ")", "\n", "\n", "sigma1", "=", "np", ".", "atleast_2d", "(", "sigma1", ")", "\n", "sigma2", "=", "np", ".", "atleast_2d", "(", "sigma2", ")", "\n", "\n", "assert", "mu1", ".", "shape", "==", "mu2", ".", "shape", ",", "'Training and test mean vectors have different lengths'", "\n", "assert", "sigma1", ".", "shape", "==", "sigma2", ".", "shape", ",", "'Training and test covariances have different dimensions'", "\n", "\n", "diff", "=", "mu1", "-", "mu2", "\n", "\n", "# Product might be almost singular", "\n", "covmean", ",", "_", "=", "linalg", ".", "sqrtm", "(", "sigma1", ".", "dot", "(", "sigma2", ")", ",", "disp", "=", "False", ")", "\n", "if", "not", "np", ".", "isfinite", "(", "covmean", ")", ".", "all", "(", ")", ":", "\n", "        ", "msg", "=", "(", "'fid calculation produces singular product; '", "\n", "'adding %s to diagonal of cov estimates'", ")", "%", "eps", "\n", "print", "(", "msg", ")", "\n", "offset", "=", "np", ".", "eye", "(", "sigma1", ".", "shape", "[", "0", "]", ")", "*", "eps", "\n", "covmean", "=", "linalg", ".", "sqrtm", "(", "(", "sigma1", "+", "offset", ")", ".", "dot", "(", "sigma2", "+", "offset", ")", ")", "\n", "\n", "# Numerical error might give slight imaginary component", "\n", "", "if", "np", ".", "iscomplexobj", "(", "covmean", ")", ":", "\n", "        ", "if", "not", "np", ".", "allclose", "(", "np", ".", "diagonal", "(", "covmean", ")", ".", "imag", ",", "0", ",", "atol", "=", "1e-3", ")", ":", "\n", "            ", "m", "=", "np", ".", "max", "(", "np", ".", "abs", "(", "covmean", ".", "imag", ")", ")", "\n", "raise", "ValueError", "(", "'Imaginary component {}'", ".", "format", "(", "m", ")", ")", "\n", "", "covmean", "=", "covmean", ".", "real", "\n", "\n", "", "tr_covmean", "=", "np", ".", "trace", "(", "covmean", ")", "\n", "\n", "return", "(", "diff", ".", "dot", "(", "diff", ")", "+", "np", ".", "trace", "(", "sigma1", ")", "+", "\n", "np", ".", "trace", "(", "sigma2", ")", "-", "2", "*", "tr_covmean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.calculate_activation_statistics": [[194, 217], ["fid_score.get_activations", "numpy.mean", "numpy.cov"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.get_activations"], ["", "def", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", "=", "50", ",", "\n", "dims", "=", "2048", ",", "cuda", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculation of the statistics used by the FID.\n    Params:\n    -- files       : List of image files paths\n    -- model       : Instance of inception model\n    -- batch_size  : The images numpy array is split into batches with\n                     batch size batch_size. A reasonable batch size\n                     depends on the hardware.\n    -- dims        : Dimensionality of features returned by Inception\n    -- cuda        : If set to True, use GPU\n    -- verbose     : If set to True and parameter out_step is given, the\n                     number of calculated batches is reported.\n    Returns:\n    -- mu    : The mean over samples of the activations of the pool_3 layer of\n               the inception model.\n    -- sigma : The covariance matrix of the activations of the pool_3 layer of\n               the inception model.\n    \"\"\"", "\n", "act", "=", "get_activations", "(", "files", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ",", "verbose", ")", "\n", "mu", "=", "np", ".", "mean", "(", "act", ",", "axis", "=", "0", ")", "\n", "sigma", "=", "np", ".", "cov", "(", "act", ",", "rowvar", "=", "False", ")", "\n", "return", "mu", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score._compute_statistics_of_path": [[219, 231], ["pathlib.Path.endswith", "numpy.load", "np.load.close", "pathlib.Path", "fid_score.calculate_activation_statistics", "list", "list", "pathlib.Path.glob", "pathlib.Path.glob"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.calculate_activation_statistics"], ["", "def", "_compute_statistics_of_path", "(", "path", ",", "model", ",", "batch_size", ",", "dims", ",", "cuda", ")", ":", "\n", "    ", "if", "path", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "        ", "f", "=", "np", ".", "load", "(", "path", ")", "\n", "m", ",", "s", "=", "f", "[", "'mu'", "]", "[", ":", "]", ",", "f", "[", "'sigma'", "]", "[", ":", "]", "\n", "f", ".", "close", "(", ")", "\n", "", "else", ":", "\n", "        ", "path", "=", "pathlib", ".", "Path", "(", "path", ")", "\n", "files", "=", "list", "(", "path", ".", "glob", "(", "'*.jpg'", ")", ")", "+", "list", "(", "path", ".", "glob", "(", "'*.png'", ")", ")", "\n", "m", ",", "s", "=", "calculate_activation_statistics", "(", "files", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "\n", "", "return", "m", ",", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.calculate_fid_given_paths": [[233, 252], ["inception.InceptionV3", "fid_score._compute_statistics_of_path", "fid_score._compute_statistics_of_path", "fid_score.calculate_frechet_distance", "inception.InceptionV3.cuda", "os.path.exists", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score._compute_statistics_of_path", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.fid.fid_score.calculate_frechet_distance"], ["", "def", "calculate_fid_given_paths", "(", "paths", ",", "batch_size", ",", "cuda", ",", "dims", ")", ":", "\n", "    ", "\"\"\"Calculates the FID of two paths\"\"\"", "\n", "for", "p", "in", "paths", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "p", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Invalid path: %s'", "%", "p", ")", "\n", "\n", "", "", "block_idx", "=", "InceptionV3", ".", "BLOCK_INDEX_BY_DIM", "[", "dims", "]", "\n", "\n", "model", "=", "InceptionV3", "(", "[", "block_idx", "]", ")", "\n", "if", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "\n", "", "m1", ",", "s1", "=", "_compute_statistics_of_path", "(", "paths", "[", "0", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "m2", ",", "s2", "=", "_compute_statistics_of_path", "(", "paths", "[", "1", "]", ",", "model", ",", "batch_size", ",", "\n", "dims", ",", "cuda", ")", "\n", "fid_value", "=", "calculate_frechet_distance", "(", "m1", ",", "s1", ",", "m2", ",", "s2", ")", "\n", "\n", "return", "fid_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.__init__": [[40, 46], ["super().__init__", "__init__.create_window"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.create_window"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.SSIM.forward": [[47, 64], ["img1.size", "__init__._ssim", "__init__.create_window", "window.cuda.cuda.type_as", "__init__.SSIM.window.data.type", "img1.data.type", "window.cuda.cuda.cuda", "img1.get_device"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__._ssim", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.create_window"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.gaussian": [[7, 10], ["torch.Tensor", "torch.Tensor", "torch.Tensor.sum", "math.exp", "range", "float"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.create_window": [[11, 16], ["gaussian().unsqueeze", "gaussian().unsqueeze.mm().float().unsqueeze().unsqueeze", "torch.autograd.Variable", "_1D_window.mm().float().unsqueeze().unsqueeze.expand().contiguous", "__init__.gaussian", "gaussian().unsqueeze.mm().float().unsqueeze", "_1D_window.mm().float().unsqueeze().unsqueeze.expand", "gaussian().unsqueeze.mm().float", "gaussian().unsqueeze.mm", "gaussian().unsqueeze.t"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.gaussian"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__._ssim": [[17, 38], ["torch.conv2d", "torch.conv2d", "F.conv2d.pow", "F.conv2d.pow", "torch.conv2d", "torch.conv2d", "torch.conv2d", "ssim_map.mean", "ssim_map.mean().mean().mean", "ssim_map.mean().mean", "ssim_map.mean"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.ssim": [[65, 74], ["img1.size", "__init__.create_window", "window.cuda.type_as", "__init__._ssim", "window.cuda.cuda", "img1.get_device"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__.create_window", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.ssim.__init__._ssim"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.sampler.VCSampler.__init__": [[7, 17], ["torch.utils.data.sampler.Sampler.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "batch_id", ",", "batch_img", ")", ":", "\n", "        ", "super", "(", "VCSampler", ",", "self", ")", ".", "__init__", "(", "data_source", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "self", ".", "batch_id", "=", "batch_id", "\n", "self", ".", "batch_img", "=", "batch_img", "\n", "\n", "self", ".", "idts", "=", "data_source", ".", "idts", "\n", "self", ".", "data_all", "=", "data_source", ".", "data_all", "\n", "self", ".", "idt2idxes", "=", "data_source", ".", "idt2idxes", "\n", "self", ".", "idt_valid", "=", "len", "(", "self", ".", "idts", ")", "//", "self", ".", "batch_id", "*", "self", ".", "batch_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.sampler.VCSampler.__iter__": [[18, 24], ["random.shuffle", "range", "iter", "imgs.extend", "torch.utils.data.sampler.VCSampler._sample"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.shuffle", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.sampler.VCSampler._sample"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "random", ".", "shuffle", "(", "self", ".", "idts", ")", "\n", "imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "idt_valid", ")", ":", "\n", "            ", "imgs", ".", "extend", "(", "self", ".", "_sample", "(", "self", ".", "idt2idxes", "[", "self", ".", "idts", "[", "i", "]", "]", ",", "self", ".", "batch_img", ")", ")", "\n", "", "return", "iter", "(", "imgs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.sampler.VCSampler.__len__": [[25, 27], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "idt_valid", "*", "self", ".", "batch_img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.sampler.VCSampler._sample": [[28, 33], ["random.sample", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_sample", "(", "population", ",", "k", ")", ":", "\n", "        ", "if", "len", "(", "population", ")", "<", "k", ":", "\n", "            ", "population", "=", "population", "*", "k", "\n", "", "return", "random", ".", "sample", "(", "population", ",", "k", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.Demo_ann.Dataset_.__init__": [[11, 56], ["os.listdir", "os.listdir.sort", "torchvision.Compose", "Demo_ann.Dataset_.find_ref", "data_all.sort", "os.listdir.remove", "torch.load", "range", "torchvision.ToTensor", "torchvision.Normalize", "len", "data_all.append", "int", "[].split", "x[].split"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.Demo_ann.Dataset_.find_ref", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "opt", ".", "data_root", "\n", "self", ".", "img_size", "=", "opt", ".", "img_size", "\n", "\n", "self", ".", "ref_idt", "=", "opt", ".", "ref_idt", "\n", "self", ".", "aud_idt", "=", "opt", ".", "aud_idt", "\n", "self", ".", "own_audio", "=", "opt", ".", "own_audio", "\n", "self", ".", "non_ref", "=", "opt", ".", "non_ref", "\n", "\n", "idts", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "\n", "self", ".", "data_all", "=", "{", "}", "\n", "exclusion", "=", "[", "'jaime'", ",", "'256_feature'", "]", "\n", "for", "ex", "in", "exclusion", ":", "\n", "            ", "if", "ex", "in", "idts", ":", "\n", "                ", "idts", ".", "remove", "(", "ex", ")", "\n", "", "", "idts", ".", "sort", "(", ")", "\n", "for", "idt", "in", "idts", ":", "\n", "            ", "data_all", "=", "[", "]", "\n", "idt_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "data_root", ",", "idt", ")", "\n", "for", "mode", "in", "[", "'train'", ",", "'test'", "]", ":", "\n", "                ", "idt_pack", "=", "'{}/{}_{}.t7'", ".", "format", "(", "idt_path", ",", "self", ".", "img_size", ",", "mode", ")", "\n", "idt_files", "=", "torch", ".", "load", "(", "idt_pack", ")", "\n", "img_paths", "=", "idt_files", "[", "'img_paths'", "]", "\n", "aud_feats", "=", "idt_files", "[", "'audio_features'", "]", "\n", "lands", "=", "idt_files", "[", "'lands'", "]", "\n", "poses", "=", "idt_files", "[", "'poses'", "]", "\n", "eyes", "=", "idt_files", "[", "'eyes'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_paths", ")", ")", ":", "\n", "                    ", "img_abs_path", "=", "'{}/{}'", ".", "format", "(", "idt_path", ",", "img_paths", "[", "i", "]", "[", "0", "]", ")", "# [image, landmark]", "\n", "aud_feature", "=", "aud_feats", "[", "i", "]", "\n", "land", "=", "lands", "[", "i", "]", "\n", "pose", "=", "poses", "[", "i", "]", "\n", "eye", "=", "eyes", "[", "i", "]", "\n", "data_all", ".", "append", "(", "[", "img_abs_path", ",", "aud_feature", ",", "land", ",", "pose", ",", "eye", "]", ")", "\n", "", "", "data_all", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "# random.shuffle(data_all)", "\n", "self", ".", "data_all", "[", "idt", "]", "=", "data_all", "\n", "\n", "", "self", ".", "transforms_image", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "\n", "idt2ref", "=", "{", "'man1'", ":", "'323.jpg'", ",", "'man2'", ":", "'155.jpg'", ",", "'man3'", ":", "'80.jpg'", ",", "\n", "'woman1'", ":", "'261.jpg'", ",", "'woman2'", ":", "'1932.jpg'", ",", "'woman3'", ":", "'86.jpg'", "}", "\n", "\n", "self", ".", "data2", "=", "self", ".", "find_ref", "(", "idt2ref", "[", "self", ".", "ref_idt", "]", ",", "self", ".", "data_all", "[", "self", ".", "ref_idt", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.Demo_ann.Dataset_.find_ref": [[57, 62], ["data_[].split"], "methods", ["None"], ["", "def", "find_ref", "(", "self", ",", "img_name", ",", "data_all", ")", ":", "\n", "        ", "for", "data_", "in", "data_all", ":", "\n", "            ", "if", "data_", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "==", "img_name", ":", "\n", "                ", "return", "data_", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.Demo_ann.Dataset_.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_all", "[", "self", ".", "aud_idt", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.Demo_ann.Dataset_.__getitem__": [[68, 81], ["PIL.Image.open().convert", "PIL.Image.open().convert", "Demo_ann.Dataset_.transforms_image", "Demo_ann.Dataset_.transforms_image", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "PIL.Image.open", "PIL.Image.open", "torch.tensor"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "data1", "=", "self", ".", "data_all", "[", "self", ".", "aud_idt", "]", "[", "index", "]", "\n", "data2", "=", "self", ".", "data2", "\n", "img_path1", ",", "aud_feat1", ",", "land1", ",", "pose1", ",", "eye1", "=", "data1", "\n", "img_path2", ",", "aud_feat2", ",", "land2", ",", "pose2", ",", "eye2", "=", "data2", "\n", "img1", "=", "Image", ".", "open", "(", "img_path1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "img_path2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img1", "=", "self", ".", "transforms_image", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transforms_image", "(", "img2", ")", "\n", "aud_feat1", "=", "torch", ".", "tensor", "(", "aud_feat1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "pose1", "=", "torch", ".", "tensor", "(", "pose1", ")", "\n", "eye1", "=", "torch", ".", "tensor", "(", "eye1", ")", "\n", "return", "[", "aud_feat1", ",", "pose1", ",", "eye1", ",", "img1", ",", "img2", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.__init__.get_dataset": [[5, 26], ["importlib.import_module", "dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader"], "function", ["None"], []], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.__init__": [[10, 56], ["os.listdir", "ann_dataset.Dataset_.idts.sort", "torchvision.Compose", "list", "torch.load", "range", "ann_dataset.Dataset_.shuffle", "ann_dataset.Dataset_.idts.remove", "len", "ann_dataset.Dataset_.data_all.append", "list.append", "torchvision.ToTensor", "torchvision.Normalize", "random.sample", "random.sample"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.shuffle"], ["    ", "def", "__init__", "(", "self", ",", "opt", ")", ":", "\n", "        ", "self", ".", "data_root", "=", "opt", ".", "data_root", "\n", "self", ".", "mode", "=", "opt", ".", "mode", "\n", "self", ".", "idt_test", "=", "opt", ".", "idt_test", "\n", "self", ".", "img_size", "=", "opt", ".", "img_size", "\n", "self", ".", "own_audio", "=", "opt", ".", "own_audio", "\n", "self", ".", "non_ref", "=", "opt", ".", "non_ref", "\n", "\n", "self", ".", "idts", "=", "os", ".", "listdir", "(", "self", ".", "data_root", ")", "\n", "self", ".", "data_all", ",", "self", ".", "idt2idxes", "=", "[", "]", ",", "{", "}", "\n", "exclusion", "=", "[", "'jaime'", ",", "'256_feature'", "]", "\n", "for", "ex", "in", "exclusion", ":", "\n", "            ", "if", "ex", "in", "self", ".", "idts", ":", "\n", "                ", "self", ".", "idts", ".", "remove", "(", "ex", ")", "\n", "", "", "self", ".", "idts", ".", "sort", "(", ")", "\n", "cnt", "=", "0", "\n", "for", "idt", "in", "self", ".", "idts", ":", "\n", "            ", "idxes", "=", "list", "(", ")", "\n", "idt_path", "=", "'{}/{}'", ".", "format", "(", "self", ".", "data_root", ",", "idt", ")", "\n", "idt_pack", "=", "'{}/{}_{}.t7'", ".", "format", "(", "idt_path", ",", "self", ".", "img_size", ",", "self", ".", "mode", ")", "\n", "idt_files", "=", "torch", ".", "load", "(", "idt_pack", ")", "\n", "img_paths", "=", "idt_files", "[", "'img_paths'", "]", "\n", "aud_feats", "=", "idt_files", "[", "'audio_features'", "]", "\n", "lands", "=", "idt_files", "[", "'lands'", "]", "\n", "poses", "=", "idt_files", "[", "'poses'", "]", "\n", "eyes", "=", "idt_files", "[", "'eyes'", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_paths", ")", ")", ":", "\n", "                ", "img_abs_path", "=", "'{}/{}'", ".", "format", "(", "idt_path", ",", "img_paths", "[", "i", "]", "[", "0", "]", ")", "# [image, landmark]", "\n", "aud_feature", "=", "aud_feats", "[", "i", "]", "\n", "land", "=", "lands", "[", "i", "]", "\n", "pose", "=", "poses", "[", "i", "]", "\n", "eye", "=", "eyes", "[", "i", "]", "\n", "self", ".", "data_all", ".", "append", "(", "[", "img_abs_path", ",", "aud_feature", ",", "land", ",", "pose", ",", "eye", "]", ")", "\n", "idxes", ".", "append", "(", "cnt", ")", "\n", "cnt", "+=", "1", "\n", "", "self", ".", "idt2idxes", "[", "idt", "]", "=", "idxes", "\n", "\n", "", "self", ".", "transforms_image", "=", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.5", ",", "0.5", ",", "0.5", ")", ",", "(", "0.5", ",", "0.5", ",", "0.5", ")", ")", "]", ")", "\n", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "self", ".", "shuffle", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "idt_test", "==", "'random'", ":", "\n", "                ", "self", ".", "idt_test", "=", "random", ".", "sample", "(", "self", ".", "idts", ",", "1", ")", "[", "0", "]", "\n", "", "index_", "=", "random", ".", "sample", "(", "self", ".", "idt2idxes", "[", "self", ".", "idt_test", "]", ",", "1", ")", "[", "0", "]", "\n", "self", ".", "data2", "=", "self", ".", "data_all", "[", "index_", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.shuffle": [[57, 64], ["list", "random.shuffle", "ann_dataset.Dataset_.idt2idxes.items", "range", "len", "range", "list.index", "len"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.shuffle"], ["", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "idxes", "=", "list", "(", "range", "(", "len", "(", "self", ".", "data_all", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "idxes", ")", "\n", "self", ".", "data_all", "=", "[", "self", ".", "data_all", "[", "idxes", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "idxes", ")", ")", "]", "\n", "for", "idt", ",", "idt2idxes", "in", "self", ".", "idt2idxes", ".", "items", "(", ")", ":", "\n", "            ", "idt2idxes", "=", "[", "idxes", ".", "index", "(", "idx", ")", "for", "idx", "in", "idt2idxes", "]", "\n", "self", ".", "idt2idxes", "[", "idt", "]", "=", "idt2idxes", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort": [[65, 71], ["ann_dataset.Dataset_.data_all.sort", "ann_dataset.Dataset_.data_all.sort", "int", "int", "int", "[].split", "[].split", "[].split", "x[].split", "[].split", "[].split", "x[].split", "x[].split"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort", "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.sort"], ["", "", "def", "sort", "(", "self", ")", ":", "\n", "        ", "if", "'man'", "in", "','", ".", "join", "(", "self", ".", "idts", ")", ":", "# AnnVI", "\n", "            ", "self", ".", "data_all", ".", "sort", "(", "key", "=", "lambda", "x", ":", "int", "(", "x", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "else", ":", "# AnnXXX", "\n", "            ", "self", ".", "data_all", ".", "sort", "(", "key", "=", "lambda", "x", ":", "(", "int", "(", "x", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", ",", "\n", "int", "(", "x", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.get_idt": [[72, 75], ["img_path.strip().split", "img_path.strip"], "methods", ["None"], ["", "", "def", "get_idt", "(", "self", ",", "img_path", ")", ":", "\n", "        ", "img_idt", "=", "img_path", ".", "strip", "(", ")", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "return", "img_idt", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.__len__": [[76, 81], ["len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "return", "len", "(", "self", ".", "data_all", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "idt2idxes", "[", "self", ".", "idt_test", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.__getitem__": [[82, 123], ["PIL.Image.open().convert", "PIL.Image.open().convert", "ann_dataset.Dataset_.transforms_image", "ann_dataset.Dataset_.transforms_image", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "random.sample", "PIL.Image.open().convert", "PIL.Image.open().convert", "ann_dataset.Dataset_.transforms_image", "ann_dataset.Dataset_.transforms_image", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "PIL.Image.open().convert", "PIL.Image.open().convert", "ann_dataset.Dataset_.transforms_image", "ann_dataset.Dataset_.transforms_image", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "PIL.Image.open", "PIL.Image.open", "torch.tensor", "random.sample", "random.sample", "PIL.Image.open", "PIL.Image.open", "torch.tensor", "PIL.Image.open", "PIL.Image.open", "torch.tensor", "ann_dataset.Dataset_.get_idt"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.data.ann_dataset.Dataset_.get_idt"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "mode", "==", "'train'", ":", "\n", "            ", "data1", "=", "self", ".", "data_all", "[", "index", "]", "\n", "index_data2", "=", "random", ".", "sample", "(", "self", ".", "idt2idxes", "[", "self", ".", "get_idt", "(", "data1", "[", "0", "]", ")", "]", ",", "1", ")", "[", "0", "]", "\n", "data2", "=", "self", ".", "data_all", "[", "index_data2", "]", "\n", "img_path1", ",", "aud_feat1", ",", "land1", ",", "pose1", ",", "eye1", "=", "data1", "\n", "img_path2", ",", "aud_feat2", ",", "land2", ",", "pose2", ",", "eye2", "=", "data2", "\n", "img1", "=", "Image", ".", "open", "(", "img_path1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "img_path2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img1", "=", "self", ".", "transforms_image", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transforms_image", "(", "img2", ")", "\n", "aud_feat1", "=", "torch", ".", "tensor", "(", "aud_feat1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "pose1", "=", "torch", ".", "tensor", "(", "pose1", ")", "\n", "eye1", "=", "torch", ".", "tensor", "(", "eye1", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "own_audio", ":", "\n", "                ", "index_data1", "=", "self", ".", "idt2idxes", "[", "self", ".", "idt_test", "]", "[", "index", "]", "\n", "data1", "=", "self", ".", "data_all", "[", "index_data1", "]", "\n", "img_path1", ",", "aud_feat1", ",", "land1", ",", "pose1", ",", "eye1", "=", "data1", "\n", "img_path2", ",", "aud_feat2", ",", "land2", ",", "pose2", ",", "eye2", "=", "self", ".", "data2", "\n", "img1", "=", "Image", ".", "open", "(", "img_path1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "img_path2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img1", "=", "self", ".", "transforms_image", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transforms_image", "(", "img2", ")", "\n", "aud_feat1", "=", "torch", ".", "tensor", "(", "aud_feat1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "pose1", "=", "torch", ".", "tensor", "(", "pose1", ")", "\n", "eye1", "=", "torch", ".", "tensor", "(", "eye1", ")", "\n", "", "else", ":", "\n", "                ", "idt1", "=", "random", ".", "sample", "(", "self", ".", "idts", ",", "1", ")", "[", "0", "]", "\n", "index_data1", "=", "random", ".", "sample", "(", "self", ".", "idt2idxes", "[", "idt1", "]", ",", "1", ")", "[", "0", "]", "\n", "data1", "=", "self", ".", "data_all", "[", "index_data1", "]", "\n", "img_path1", ",", "aud_feat1", ",", "land1", ",", "pose1", ",", "eye1", "=", "data1", "\n", "img_path2", ",", "aud_feat2", ",", "land2", ",", "pose2", ",", "eye2", "=", "self", ".", "data2", "\n", "img1", "=", "Image", ".", "open", "(", "img_path1", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img2", "=", "Image", ".", "open", "(", "img_path2", ")", ".", "convert", "(", "'RGB'", ")", "\n", "img1", "=", "self", ".", "transforms_image", "(", "img1", ")", "\n", "img2", "=", "self", ".", "transforms_image", "(", "img2", ")", "\n", "aud_feat1", "=", "torch", ".", "tensor", "(", "aud_feat1", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "\n", "pose1", "=", "torch", ".", "tensor", "(", "pose1", ")", "\n", "eye1", "=", "torch", ".", "tensor", "(", "eye1", ")", "\n", "", "", "return", "[", "aud_feat1", ",", "pose1", ",", "eye1", ",", "img1", ",", "img2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.tuple_shape": [[10, 15], ["r_data.append"], "function", ["None"], ["def", "tuple_shape", "(", "shape", ")", ":", "\n", "    ", "r_data", "=", "[", "]", "\n", "for", "p", "in", "shape", ":", "\n", "        ", "r_data", ".", "append", "(", "[", "p", ".", "x", ",", "p", ".", "y", "]", ")", "\n", "", "return", "r_data", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.drawCircle": [[16, 21], ["enumerate", "cv2.circle", "int", "int"], "function", ["None"], ["", "def", "drawCircle", "(", "img", ",", "shape", ",", "radius", "=", "1", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "1", ")", ":", "\n", "    ", "for", "i", ",", "p", "in", "enumerate", "(", "shape", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "circle", "(", "img", ",", "(", "int", "(", "p", "[", "0", "]", ")", ",", "int", "(", "p", "[", "1", "]", ")", ")", ",", "radius", ",", "color", ",", "thickness", ")", "\n", "# img = cv2.putText(img, '{}'.format(i), (int(p[0]), int(p[1])), cv2.FONT_HERSHEY_COMPLEX, 1, (0,0,255), 1)", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.drawPoint": [[22, 27], ["enumerate", "int", "int"], "function", ["None"], ["", "def", "drawPoint", "(", "img", ",", "shape", ")", ":", "\n", "    ", "for", "i", ",", "p", "in", "enumerate", "(", "shape", ")", ":", "\n", "# img[int(p[0]), int(p[1])] = (255, 255, 255)", "\n", "        ", "img", "[", "int", "(", "p", "[", "1", "]", ")", ",", "int", "(", "p", "[", "0", "]", ")", "]", "=", "(", "255", ",", "255", ",", "255", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.fillPoly": [[28, 39], ["range", "range", "cv2.fillPoly", "cv2.dilate", "shape_poly.append", "shape_poly.append", "numpy.array", "numpy.ones", "int", "int", "int", "int"], "function", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.fillPoly"], ["", "def", "fillPoly", "(", "img", ",", "shape", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", ":", "\n", "    ", "shape_poly", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "33", ")", ":", "\n", "        ", "p", "=", "shape", "[", "i", "]", "\n", "shape_poly", ".", "append", "(", "[", "int", "(", "p", "[", "0", "]", ")", ",", "int", "(", "p", "[", "1", "]", ")", "]", ")", "\n", "", "for", "i", "in", "range", "(", "41", ",", "33", ",", "-", "1", ")", ":", "\n", "        ", "p", "=", "shape", "[", "i", "]", "\n", "shape_poly", ".", "append", "(", "[", "int", "(", "p", "[", "0", "]", ")", ",", "int", "(", "p", "[", "1", "]", ")", "]", ")", "\n", "", "img", "=", "cv2", ".", "fillPoly", "(", "img", ",", "np", ".", "array", "(", "[", "shape_poly", "]", ",", "dtype", "=", "np", ".", "int32", ")", ",", "color", ")", "\n", "img", "=", "cv2", ".", "dilate", "(", "img", ",", "np", ".", "ones", "(", "(", "5", ",", "5", ")", ",", "np", ".", "uint8", ")", ",", "iterations", "=", "10", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.str_landmark": [[41, 53], ["None"], "function", ["None"], ["", "def", "str_landmark", "(", "land_in", ",", "name", ",", "img_size", ",", "pose", ",", "eye", ")", ":", "\n", "    ", "out_landmark", "=", "''", "\n", "out_landmark", "+=", "'{}'", ".", "format", "(", "name", ")", "\n", "out_landmark", "+=", "' {}-{}'", ".", "format", "(", "img_size", "[", "0", "]", ",", "img_size", "[", "1", "]", ")", "\n", "for", "p", "in", "land_in", ":", "\n", "        ", "out_landmark", "+=", "' {}-{}'", ".", "format", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", "\n", "", "for", "p", "in", "pose", ":", "\n", "        ", "out_landmark", "+=", "' {}'", ".", "format", "(", "p", ")", "\n", "", "for", "p", "in", "eye", ":", "\n", "        ", "out_landmark", "+=", "' {}'", ".", "format", "(", "p", ")", "\n", "", "out_landmark", "+=", "'\\n'", "\n", "return", "out_landmark", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.str_landmark_only": [[54, 60], ["None"], "function", ["None"], ["", "def", "str_landmark_only", "(", "land_in", ",", "name", ",", "img_size", ")", ":", "\n", "    ", "out_landmark", "=", "''", "\n", "for", "p", "in", "land_in", ":", "\n", "        ", "out_landmark", "+=", "'{}-{} '", ".", "format", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", "\n", "", "out_landmark", "+=", "'\\n'", "\n", "return", "out_landmark", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.str_landmark_only1": [[61, 67], ["None"], "function", ["None"], ["", "def", "str_landmark_only1", "(", "land_in", ",", "name", ",", "img_size", ")", ":", "\n", "    ", "out_landmark", "=", "''", "\n", "for", "p", "in", "land_in", ":", "\n", "        ", "out_landmark", "+=", "'{} {} '", ".", "format", "(", "p", "[", "0", "]", ",", "p", "[", "1", "]", ")", "\n", "", "out_landmark", "+=", "'\\n'", "\n", "return", "out_landmark", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.crop_and_generate_landmark_img": [[69, 152], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "data_utils.crop_and_generate_landmark_img.generate"], "function", ["None"], ["", "def", "crop_and_generate_landmark_img", "(", "base", ")", ":", "\n", "\n", "    ", "def", "xy", "(", "shape", ")", ":", "\n", "        ", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "shape", "[", "0", "]", "[", "0", "]", ",", "shape", "[", "0", "]", "[", "0", "]", ",", "shape", "[", "0", "]", "[", "1", "]", ",", "shape", "[", "0", "]", "[", "1", "]", "\n", "for", "p", "in", "shape", ":", "\n", "            ", "x_min", "=", "min", "(", "[", "x_min", ",", "p", "[", "0", "]", "]", ")", "\n", "x_max", "=", "max", "(", "[", "x_max", ",", "p", "[", "0", "]", "]", ")", "\n", "y_min", "=", "min", "(", "[", "y_min", ",", "p", "[", "1", "]", "]", ")", "\n", "y_max", "=", "max", "(", "[", "y_max", ",", "p", "[", "1", "]", "]", ")", "\n", "", "return", "(", "x_min", "+", "x_max", ")", "/", "2", ",", "(", "y_min", "+", "y_max", ")", "/", "2", ",", "max", "(", "[", "(", "x_max", "-", "x_min", ")", "/", "2", ",", "(", "y_max", "-", "y_min", ")", "/", "2", "]", ")", "\n", "\n", "", "def", "generate", "(", ")", ":", "\n", "        ", "labs_", "=", "open", "(", "land_txt", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "f", "=", "open", "(", "land_norm_txt", ",", "'w'", ")", "\n", "for", "_", ",", "l", "in", "enumerate", "(", "labs_", ")", ":", "\n", "            ", "print", "(", "'\\r{} {}/{}'", ".", "format", "(", "land_txt", ",", "_", "+", "1", ",", "len", "(", "labs_", ")", ")", ",", "end", "=", "''", ")", "\n", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "name", "=", "l", "[", "0", "]", "\n", "w_ori", ",", "h_ori", "=", "[", "int", "(", "_", ")", "for", "_", "in", "l", "[", "1", "]", ".", "split", "(", "'-'", ")", "]", "\n", "shape", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "2", ":", "108", "]", ":", "\n", "                ", "w", ",", "h", "=", "[", "float", "(", "_", ")", "for", "_", "in", "l_", ".", "split", "(", "'-'", ")", "]", "\n", "shape", ".", "append", "(", "[", "w", ",", "h", "]", ")", "\n", "", "pose", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "108", ":", "111", "]", ":", "\n", "                ", "pose", ".", "append", "(", "float", "(", "l_", ")", ")", "\n", "", "eye", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "111", ":", "113", "]", ":", "\n", "                ", "eye", ".", "append", "(", "float", "(", "l_", ")", ")", "\n", "", "img_size", "=", "512", "\n", "p", "=", "1.4", "\n", "x_c", ",", "y_c", ",", "r", "=", "xy", "(", "shape", ")", "\n", "ll", "=", "r", "*", "p", "\n", "zoom_p", "=", "(", "2", "*", "ll", ")", "/", "img_size", "\n", "x_o", ",", "y_o", "=", "x_c", "-", "ll", ",", "y_c", "-", "ll", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "image_path", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "                ", "print", "(", "'img {} not exists'", ".", "format", "(", "img_path", ")", ")", "\n", "continue", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "img_roi", "=", "img", "[", "int", "(", "y_o", ")", ":", "int", "(", "y_o", "+", "2", "*", "ll", ")", ",", "int", "(", "x_o", ")", ":", "int", "(", "x_o", "+", "2", "*", "ll", ")", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", ":", "\n", "                ", "s", "=", "shape", "[", "i", "]", "\n", "shape", "[", "i", "]", "=", "[", "(", "s", "[", "0", "]", "-", "x_o", ")", "/", "zoom_p", ",", "(", "s", "[", "1", "]", "-", "y_o", ")", "/", "zoom_p", "]", "\n", "", "if", "img_roi", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "img_crop", "=", "cv2", ".", "resize", "(", "img_roi", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "lab_template", "=", "np", ".", "zeros", "(", "(", "img_size", ",", "img_size", ",", "3", ")", ")", "\n", "img_show", "=", "drawCircle", "(", "img_crop", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "land_show", "=", "drawCircle", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "1", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "land_crop_thick", "=", "drawCircle", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "2", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "land_crop_thin", "=", "drawPoint", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ")", "\n", "land_fill", "=", "fillPoly", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "\n", "f", ".", "write", "(", "str_landmark", "(", "shape", ",", "name", ",", "(", "img_size", ",", "img_size", ")", ",", "pose", ",", "eye", ")", ")", "\n", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "image_path_crop", ",", "name", ")", ",", "img_crop", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "image_path_show", ",", "name", ")", ",", "img_show", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "land_path_show", ",", "name", ")", ",", "land_show", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "land_path_show_thick", ",", "name", ")", ",", "land_crop_thick", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "land_path_show_thin", ",", "name", ")", ",", "land_crop_thin", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "land_path_fill", ",", "name", ")", ",", "land_fill", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "", "image_path", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'image'", ")", "\n", "image_path_crop", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'image_crop'", ")", "\n", "image_path_show", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'image_show'", ")", "\n", "land_path_show", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark_crop'", ")", "\n", "land_path_show_thick", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark_crop_thick'", ")", "\n", "land_path_show_thin", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark_crop_thin'", ")", "\n", "land_path_fill", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark_fill'", ")", "\n", "land_txt", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark.txt'", ")", "\n", "land_norm_txt", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'landmark_crop.txt'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "image_path_crop", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "image_path_crop", ")", "\n", "os", ".", "mkdir", "(", "image_path_show", ")", "\n", "os", ".", "mkdir", "(", "land_path_show", ")", "\n", "os", ".", "mkdir", "(", "land_path_fill", ")", "\n", "os", ".", "mkdir", "(", "land_path_show_thick", ")", "\n", "os", ".", "mkdir", "(", "land_path_show_thin", ")", "\n", "", "generate", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.AnnScripts.data_utils.crop_and_generate_landmark_img_two_size": [[154, 247], ["data_utils.crop_and_generate_landmark_img.generate"], "function", ["None"], ["", "def", "crop_and_generate_landmark_img_two_size", "(", "base", ",", "landmark_path", ")", ":", "\n", "\n", "    ", "def", "xy", "(", "shape", ")", ":", "\n", "        ", "x_min", ",", "x_max", ",", "y_min", ",", "y_max", "=", "shape", "[", "0", "]", "[", "0", "]", ",", "shape", "[", "0", "]", "[", "0", "]", ",", "shape", "[", "0", "]", "[", "1", "]", ",", "shape", "[", "0", "]", "[", "1", "]", "\n", "for", "p", "in", "shape", ":", "\n", "            ", "x_min", "=", "min", "(", "[", "x_min", ",", "p", "[", "0", "]", "]", ")", "\n", "x_max", "=", "max", "(", "[", "x_max", ",", "p", "[", "0", "]", "]", ")", "\n", "y_min", "=", "min", "(", "[", "y_min", ",", "p", "[", "1", "]", "]", ")", "\n", "y_max", "=", "max", "(", "[", "y_max", ",", "p", "[", "1", "]", "]", ")", "\n", "", "return", "(", "x_min", "+", "x_max", ")", "/", "2", ",", "(", "y_min", "+", "y_max", ")", "/", "2", ",", "max", "(", "[", "(", "x_max", "-", "x_min", ")", "/", "2", ",", "(", "y_max", "-", "y_min", ")", "/", "2", "]", ")", "\n", "# return x_min, y_min, max([(x_max - x_min) / 2, (y_max - y_min) / 2])", "\n", "\n", "", "def", "generate", "(", "img_size", "=", "512", ",", "thin_only", "=", "False", ")", ":", "\n", "        ", "image_path", "=", "os", ".", "path", ".", "join", "(", "base", ",", "'image'", ")", "\n", "image_crop_path", "=", "'{}/{}_image_crop'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "image_show_path", "=", "'{}/{}_image_show'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "landmark_crop_path", "=", "'{}/{}_landmark_crop'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "landmark_crop_thick_path", "=", "'{}/{}_landmark_crop_thick'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "landmark_crop_thin_path", "=", "'{}/{}_landmark_crop_thin'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "landmark_fill_path", "=", "'{}/{}_landmark_fill'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "# landmark_txt = '{}/landmark.txt'.format(base)", "\n", "landmark_txt", "=", "landmark_path", "\n", "landmark_crop_txt", "=", "'{}/{}_landmark_crop.txt'", ".", "format", "(", "base", ",", "img_size", ")", "\n", "if", "not", "thin_only", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "image_crop_path", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "image_crop_path", ")", "\n", "os", ".", "mkdir", "(", "image_show_path", ")", "\n", "os", ".", "mkdir", "(", "landmark_crop_path", ")", "\n", "os", ".", "mkdir", "(", "landmark_crop_thick_path", ")", "\n", "os", ".", "mkdir", "(", "landmark_fill_path", ")", "\n", "os", ".", "mkdir", "(", "landmark_crop_thin_path", ")", "\n", "", "", "else", ":", "\n", "            ", "os", ".", "mkdir", "(", "image_crop_path", ")", "\n", "os", ".", "mkdir", "(", "landmark_crop_thin_path", ")", "\n", "", "labs_", "=", "open", "(", "landmark_txt", ",", "'r'", ")", ".", "readlines", "(", ")", "\n", "f", "=", "open", "(", "landmark_crop_txt", ",", "'w'", ")", "\n", "for", "_", ",", "l", "in", "enumerate", "(", "labs_", ")", ":", "\n", "            ", "print", "(", "'\\r{} {}/{}'", ".", "format", "(", "landmark_txt", ",", "_", "+", "1", ",", "len", "(", "labs_", ")", ")", ",", "end", "=", "''", ")", "\n", "l", "=", "l", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "name", "=", "l", "[", "0", "]", "\n", "w_ori", ",", "h_ori", "=", "[", "int", "(", "_", ")", "for", "_", "in", "l", "[", "1", "]", ".", "split", "(", "'-'", ")", "]", "\n", "shape", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "2", ":", "108", "]", ":", "\n", "                ", "w", ",", "h", "=", "[", "float", "(", "_", ")", "for", "_", "in", "l_", ".", "split", "(", "'-'", ")", "]", "\n", "shape", ".", "append", "(", "[", "w", ",", "h", "]", ")", "\n", "", "pose", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "108", ":", "111", "]", ":", "\n", "                ", "pose", ".", "append", "(", "float", "(", "l_", ")", ")", "\n", "", "eye", "=", "[", "]", "\n", "for", "l_", "in", "l", "[", "111", ":", "113", "]", ":", "\n", "                ", "eye", ".", "append", "(", "float", "(", "l_", ")", ")", "\n", "# img_size = 512", "\n", "", "p", "=", "1.4", "\n", "x_c", ",", "y_c", ",", "r", "=", "xy", "(", "shape", ")", "\n", "ll", "=", "r", "*", "p", "\n", "zoom_p", "=", "(", "2", "*", "ll", ")", "/", "img_size", "\n", "x_o", ",", "y_o", "=", "x_c", "-", "ll", ",", "y_c", "-", "ll", "\n", "img_path", "=", "os", ".", "path", ".", "join", "(", "image_path", ",", "name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "img_path", ")", ":", "\n", "                ", "print", "(", "'img {} not exists'", ".", "format", "(", "img_path", ")", ")", "\n", "continue", "\n", "", "img", "=", "cv2", ".", "imread", "(", "img_path", ")", "\n", "\n", "img_roi", "=", "img", "[", "int", "(", "y_o", ")", ":", "int", "(", "y_o", "+", "2", "*", "ll", ")", ",", "int", "(", "x_o", ")", ":", "int", "(", "x_o", "+", "2", "*", "ll", ")", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "shape", ")", ")", ":", "\n", "                ", "s", "=", "shape", "[", "i", "]", "\n", "shape", "[", "i", "]", "=", "[", "(", "s", "[", "0", "]", "-", "x_o", ")", "/", "zoom_p", ",", "(", "s", "[", "1", "]", "-", "y_o", ")", "/", "zoom_p", "]", "\n", "", "if", "img_roi", ".", "size", "==", "0", ":", "\n", "                ", "continue", "\n", "", "img_crop", "=", "cv2", ".", "resize", "(", "img_roi", ",", "(", "img_size", ",", "img_size", ")", ")", "\n", "lab_template", "=", "np", ".", "zeros", "(", "(", "img_size", ",", "img_size", ",", "3", ")", ")", "\n", "img_show", "=", "drawCircle", "(", "img_crop", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "2", ",", "color", "=", "(", "0", ",", "0", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "land_crop", "=", "drawCircle", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "1", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "landmark_crop_thick", "=", "drawCircle", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "radius", "=", "2", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", "=", "8", ")", "\n", "landmark_crop_thin", "=", "drawPoint", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ")", "\n", "landmark_fill", "=", "fillPoly", "(", "lab_template", ".", "copy", "(", ")", ",", "shape", ",", "color", "=", "(", "255", ",", "255", ",", "255", ")", ")", "\n", "\n", "f", ".", "write", "(", "str_landmark", "(", "shape", ",", "name", ",", "(", "img_size", ",", "img_size", ")", ",", "pose", ",", "eye", ")", ")", "\n", "if", "not", "thin_only", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "image_crop_path", ",", "name", ")", ",", "img_crop", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "image_show_path", ",", "name", ")", ",", "img_show", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "landmark_crop_path", ",", "name", ")", ",", "land_crop", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "landmark_crop_thick_path", ",", "name", ")", ",", "landmark_crop_thick", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "landmark_crop_thin_path", ",", "name", ")", ",", "landmark_crop_thin", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "landmark_fill_path", ",", "name", ")", ",", "landmark_fill", ")", "\n", "", "else", ":", "\n", "                ", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "image_crop_path", ",", "name", ")", ",", "img_crop", ")", "\n", "cv2", ".", "imwrite", "(", "'{}/{}'", ".", "format", "(", "landmark_crop_thin_path", ",", "name", ")", ",", "landmark_crop_thin", ")", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n", "", "generate", "(", "img_size", "=", "512", ")", "\n", "generate", "(", "img_size", "=", "256", ",", "thin_only", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__": [[6, 19], ["torch.Module.__init__", "ganloss.GANLoss.register_buffer", "ganloss.GANLoss.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.MSELoss", "torch.MSELoss", "torch.BCEWithLogitsLoss", "torch.BCEWithLogitsLoss", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gan_mode", ",", "target_real_label", "=", "1.0", ",", "target_fake_label", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "GANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "register_buffer", "(", "'real_label'", ",", "torch", ".", "tensor", "(", "target_real_label", ")", ")", "\n", "self", ".", "register_buffer", "(", "'fake_label'", ",", "torch", ".", "tensor", "(", "target_fake_label", ")", ")", "\n", "self", ".", "gan_mode", "=", "gan_mode", "\n", "if", "gan_mode", "==", "'lsgan'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "gan_mode", "==", "'vanilla'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "", "elif", "gan_mode", "in", "[", "'wgangp'", "]", ":", "\n", "            ", "self", ".", "loss", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'gan mode %s not implemented'", "%", "gan_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.get_target_tensor": [[20, 26], ["target_tensor.expand_as"], "methods", ["None"], ["", "", "def", "get_target_tensor", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "if", "target_is_real", ":", "\n", "            ", "target_tensor", "=", "self", ".", "real_label", "\n", "", "else", ":", "\n", "            ", "target_tensor", "=", "self", ".", "fake_label", "\n", "", "return", "target_tensor", ".", "expand_as", "(", "prediction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.__call__": [[27, 38], ["ganloss.GANLoss.get_target_tensor", "ganloss.GANLoss.loss", "prediction.mean", "prediction.mean"], "methods", ["home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.get_target_tensor"], ["", "def", "__call__", "(", "self", ",", "prediction", ",", "target_is_real", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "if", "self", ".", "gan_mode", "in", "[", "'lsgan'", ",", "'vanilla'", "]", ":", "\n", "            ", "target_tensor", "=", "self", ".", "get_target_tensor", "(", "prediction", ",", "target_is_real", ")", "\n", "loss", "=", "self", ".", "loss", "(", "prediction", ",", "target_tensor", ")", "\n", "", "elif", "self", ".", "gan_mode", "==", "'wgangp'", ":", "\n", "            ", "if", "target_is_real", ":", "\n", "                ", "loss", "=", "-", "prediction", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "prediction", ".", "mean", "(", ")", "\n", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.zhangzjn_APB2FaceV2.loss.ganloss.GANLoss.cal_gradient_penalty": [[39, 63], ["interpolatesv.requires_grad_", "netD", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "gradients[].view", "real_data.size", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.rand", "torch.rand", "torch.rand", "torch.rand", "alpha.to.to.expand().contiguous().view", "alpha.to.to.to", "NotImplementedError", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "alpha.to.to.expand().contiguous", "netD.size", "alpha.to.to.expand", "real_data.nelement"], "methods", ["None"], ["", "def", "cal_gradient_penalty", "(", "self", ",", "netD", ",", "real_data", ",", "fake_data", ",", "device", ",", "type", "=", "'mixed'", ",", "constant", "=", "1.0", ",", "lambda_gp", "=", "10.0", ")", ":", "\n", "        ", "if", "lambda_gp", ">", "0.0", ":", "\n", "            ", "if", "type", "==", "'real'", ":", "# either use real images, fake images, or a linear interpolation of two.", "\n", "                ", "interpolatesv", "=", "real_data", "\n", "", "elif", "type", "==", "'fake'", ":", "\n", "                ", "interpolatesv", "=", "fake_data", "\n", "", "elif", "type", "==", "'mixed'", ":", "\n", "                ", "alpha", "=", "torch", ".", "rand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "1", ")", "\n", "alpha", "=", "alpha", ".", "expand", "(", "real_data", ".", "shape", "[", "0", "]", ",", "real_data", ".", "nelement", "(", ")", "//", "real_data", ".", "shape", "[", "0", "]", ")", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "*", "real_data", ".", "shape", ")", "\n", "alpha", "=", "alpha", ".", "to", "(", "device", ")", "\n", "interpolatesv", "=", "alpha", "*", "real_data", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_data", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'{} not implemented'", ".", "format", "(", "type", ")", ")", "\n", "", "interpolatesv", ".", "requires_grad_", "(", "True", ")", "\n", "disc_interpolates", "=", "netD", "(", "interpolatesv", ")", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "outputs", "=", "disc_interpolates", ",", "inputs", "=", "interpolatesv", ",", "\n", "grad_outputs", "=", "torch", ".", "ones", "(", "disc_interpolates", ".", "size", "(", ")", ")", ".", "to", "(", "device", ")", ",", "\n", "create_graph", "=", "True", ",", "retain_graph", "=", "True", ",", "only_inputs", "=", "True", ")", "\n", "gradients", "=", "gradients", "[", "0", "]", ".", "view", "(", "real_data", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# flat the data", "\n", "gradient_penalty", "=", "(", "(", "(", "gradients", "+", "1e-16", ")", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "constant", ")", "**", "2", ")", ".", "mean", "(", ")", "*", "lambda_gp", "# added eps", "\n", "return", "gradient_penalty", ",", "gradients", "\n", "", "else", ":", "\n", "            ", "return", "0.0", ",", "None", "", "", "", "", ""]]}