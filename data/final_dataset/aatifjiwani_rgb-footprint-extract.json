{"home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.main": [[11, 100], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "run_deeplab.run_deeplab"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.run_deeplab"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"DeeplabV3+ And Evaluation\"", ")", "\n", "\n", "# model parameters", "\n", "\n", "parser", ".", "add_argument", "(", "'--backbone'", ",", "type", "=", "str", ",", "default", "=", "'resnet'", ",", "\n", "choices", "=", "[", "'resnet'", ",", "'xception'", ",", "'drn'", ",", "'mobilenet'", ",", "'drn_c42'", "]", ",", "\n", "help", "=", "'backbone name (default: resnet)'", ")", "\n", "parser", ".", "add_argument", "(", "'--out-stride'", ",", "type", "=", "int", ",", "default", "=", "16", ",", "\n", "help", "=", "'network output stride (default: 8)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'urban3d'", ",", "\n", "choices", "=", "[", "'urban3d'", ",", "'spaceNet'", ",", "'crowdAI'", ",", "'combined'", "]", ",", "\n", "help", "=", "'dataset name (default: urban3d)'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-root'", ",", "type", "=", "str", ",", "default", "=", "'/data/'", ",", "\n", "help", "=", "'datasets root path'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "type", "=", "int", ",", "default", "=", "4", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'dataloader threads'", ")", "\n", "parser", ".", "add_argument", "(", "'--sync-bn'", ",", "type", "=", "bool", ",", "default", "=", "None", ",", "\n", "help", "=", "'whether to use sync bn (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--freeze-bn'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether to freeze bn parameters (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-type'", ",", "type", "=", "str", ",", "default", "=", "'ce_dice'", ",", "\n", "choices", "=", "[", "'ce'", ",", "'ce_dice'", ",", "'wce_dice'", "]", ",", "\n", "help", "=", "'loss func type (default: ce)'", ")", "\n", "parser", ".", "add_argument", "(", "'--fbeta'", ",", "type", "=", "float", ",", "default", "=", "1", ",", "help", "=", "'beta for FBeta-Measure'", ")", "\n", "parser", ".", "add_argument", "(", "'--loss-weights'", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "1.0", ",", "1.0", "]", ",", "\n", "help", "=", "'loss weighting'", ")", "\n", "parser", ".", "add_argument", "(", "\"--num-classes\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of classes to predict (2 for binary mask)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "0.1", ",", "0.5", "]", ",", "\n", "help", "=", "'dropout values'", ")", "\n", "\n", "# training hyper params", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of epochs to train (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'start epochs (default:0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                training (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--test-batch-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "metavar", "=", "'N'", ",", "help", "=", "'input batch size for \\\n                                testing (default: auto)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'learning rate (default: auto)'", ")", "\n", "# optimizer params", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'momentum (default: 0.9)'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "type", "=", "float", ",", "default", "=", "5e-4", ",", "\n", "metavar", "=", "'M'", ",", "help", "=", "'w-decay (default: 5e-4)'", ")", "\n", "parser", ".", "add_argument", "(", "'--nesterov'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'whether use nesterov (default: False)'", ")", "\n", "\n", "# cuda, seed and logging", "\n", "parser", ".", "add_argument", "(", "'--no-cuda'", ",", "action", "=", "'store_true'", ",", "default", "=", "\n", "False", ",", "help", "=", "'disables CUDA training'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu-ids'", ",", "type", "=", "str", ",", "default", "=", "'0'", ",", "\n", "help", "=", "'use which gpu to train, must be a \\\n                        comma-separated list of integers only (default=0)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'S'", ",", "\n", "help", "=", "'random seed (default: 1)'", ")", "\n", "# name", "\n", "parser", ".", "add_argument", "(", "'--checkname'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'set the checkpoint name'", ")", "\n", "\n", "# evaluation option", "\n", "parser", ".", "add_argument", "(", "'--no-val'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'skip validation during training'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-wandb'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'experiment to load'", ")", "\n", "parser", ".", "add_argument", "(", "\"--evaluate\"", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--best-miou'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "# inference options (includes some evaluation options)", "\n", "parser", ".", "add_argument", "(", "'--inference'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--input-filename'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to an input file to run inference on'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-filename'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'path to where predicted segmentation mask will be written'", ")", "\n", "parser", ".", "add_argument", "(", "'--window-size'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"the size of grid blocks to sample from the input, use if encountering OOM issues\"", ")", "\n", "parser", ".", "add_argument", "(", "'--stride'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"the stride at which to sample grid blocks, recommended value is equal to `window_size`\"", ")", "\n", "\n", "#boundaries", "\n", "parser", ".", "add_argument", "(", "'--incl-bounds'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'includes boundaries of masks in loss function'", ")", "\n", "parser", ".", "add_argument", "(", "'--bounds-kernel-size'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'kernel size for calculating boundary'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "run_deeplab", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.run_deeplab": [[101, 135], ["torch.manual_seed", "torch.cuda.is_available", "ValueError", "run_deeplab.handle_inference", "len", "str", "run_deeplab.handle_evaluate", "run_deeplab.handle_training", "int", "ValueError", "len", "args.gpu_ids.split"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_inference", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_evaluate", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_training"], ["", "def", "run_deeplab", "(", "args", ")", ":", "\n", "    ", "args", ".", "cuda", "=", "not", "args", ".", "no_cuda", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "args", ".", "cuda", ":", "\n", "        ", "try", ":", "\n", "            ", "args", ".", "gpu_ids", "=", "[", "int", "(", "s", ")", "for", "s", "in", "args", ".", "gpu_ids", ".", "split", "(", "','", ")", "]", "\n", "", "except", "ValueError", ":", "\n", "            ", "raise", "ValueError", "(", "'Argument --gpu_ids must be a comma-separated list of integers only'", ")", "\n", "\n", "", "", "if", "args", ".", "sync_bn", "is", "None", ":", "\n", "        ", "if", "args", ".", "cuda", "and", "len", "(", "args", ".", "gpu_ids", ")", ">", "1", ":", "\n", "            ", "args", ".", "sync_bn", "=", "True", "\n", "", "else", ":", "\n", "            ", "args", ".", "sync_bn", "=", "False", "\n", "\n", "# default settings for epochs, batch_size and lr", "\n", "", "", "if", "args", ".", "epochs", "is", "None", ":", "\n", "        ", "raise", "ValueError", "(", "\"epochs must be specified\"", ")", "\n", "\n", "", "if", "args", ".", "batch_size", "is", "None", ":", "\n", "        ", "args", ".", "batch_size", "=", "4", "*", "len", "(", "args", ".", "gpu_ids", ")", "\n", "\n", "", "if", "args", ".", "test_batch_size", "is", "None", ":", "\n", "        ", "args", ".", "test_batch_size", "=", "args", ".", "batch_size", "\n", "\n", "", "if", "args", ".", "checkname", "is", "None", ":", "\n", "        ", "args", ".", "checkname", "=", "'deeplab-'", "+", "str", "(", "args", ".", "backbone", ")", "\n", "\n", "", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "if", "args", ".", "inference", ":", "\n", "        ", "handle_inference", "(", "args", ")", "\n", "", "elif", "args", ".", "evaluate", ":", "\n", "        ", "handle_evaluate", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "handle_training", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_inference": [[136, 162], ["models.deeplab.evaluate.Tester", "print", "models.deeplab.evaluate.Tester.infer", "get_ext", "get_ext", "len", "PIL.Image.fromarray().save", "input_formats.keys", "np.save", "os.path.splitext", "os.path.splitext", "PIL.Image.fromarray", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.evaluate.Tester.infer"], ["", "", "def", "handle_inference", "(", "args", ")", ":", "\n", "# Validate arguments", "\n", "    ", "input_formats", ",", "output_formats", "=", "{", "\".npy\"", ":", "\"numpy\"", "}", ",", "[", "\".npy\"", ",", "\".png\"", ",", "\".tiff\"", "]", "\n", "\n", "get_ext", "=", "lambda", "filename", ":", "os", ".", "path", ".", "splitext", "(", "filename", ")", "[", "-", "1", "]", "if", "filename", "else", "None", "\n", "input_ext", ",", "output_ext", "=", "get_ext", "(", "args", ".", "input_filename", ")", ",", "get_ext", "(", "args", ".", "output_filename", ")", "\n", "assert", "args", ".", "input_filename", "and", "input_ext", "in", "input_formats", ",", "f\"Accepted input file formats: {input_formats.keys()}\"", "\n", "assert", "args", ".", "output_filename", "and", "output_ext", "in", "output_formats", ",", "f\"Accepted output formats: {output_formats}\"", "\n", "\n", "if", "args", ".", "window_size", "or", "args", ".", "stride", ":", "\n", "        ", "assert", "args", ".", "window_size", "and", "args", ".", "stride", ",", "\"Both `window_size` and `stride` must be set.\"", "\n", "\n", "", "args", ".", "dataset", "=", "input_formats", "[", "os", ".", "path", ".", "splitext", "(", "args", ".", "input_filename", ")", "[", "-", "1", "]", "]", "\n", "args", ".", "test_batch_size", "=", "1", "\n", "tester", "=", "Tester", "(", "args", ")", "\n", "print", "(", "\"Inference starting on {}...\"", ".", "format", "(", "args", ".", "input_filename", ")", ")", "\n", "\n", "final_output", "=", "tester", ".", "infer", "(", ")", "\n", "assert", "len", "(", "final_output", ".", "shape", ")", "==", "2", "\n", "\n", "if", "output_ext", "==", "\".png\"", ":", "\n", "        ", "Image", ".", "fromarray", "(", "(", "final_output", "*", "255", ")", ")", ".", "save", "(", "args", ".", "output_filename", ")", "\n", "", "elif", "output_ext", "==", "\".npy\"", ":", "\n", "        ", "np", ".", "save", "(", "args", ".", "output_filename", ",", "final_output", ")", "\n", "", "elif", "output_ext", "==", "\".tiff\"", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"TIFF output support is coming soon.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_evaluate": [[163, 168], ["models.deeplab.evaluate.Tester", "print", "models.deeplab.evaluate.Tester.test"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.evaluate.Tester.test"], ["", "", "def", "handle_evaluate", "(", "args", ")", ":", "\n", "    ", "tester", "=", "Tester", "(", "args", ")", "\n", "print", "(", "\"Experiment {} instantiated. Evaluation starting...\"", ".", "format", "(", "args", ".", "checkname", ")", ")", "\n", "\n", "tester", ".", "test", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.None.run_deeplab.handle_training": [[169, 180], ["models.deeplab.train.Trainer", "print", "print", "print", "print", "range", "models.deeplab.train.Trainer.training", "models.deeplab.train.Trainer.validation"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.train.Trainer.training", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.train.Trainer.validation"], ["", "def", "handle_training", "(", "args", ")", ":", "\n", "    ", "trainer", "=", "Trainer", "(", "args", ")", "\n", "\n", "print", "(", "\"Learning rate: {}; L2 factor: {}\"", ".", "format", "(", "args", ".", "lr", ",", "args", ".", "weight_decay", ")", ")", "\n", "print", "(", "\"Experiment {} instantiated. Training starting...\"", ".", "format", "(", "args", ".", "checkname", ")", ")", "\n", "print", "(", "\"Training for {} epochs\"", ".", "format", "(", "trainer", ".", "args", ".", "epochs", ")", ")", "\n", "print", "(", "\"Batch size: {}; Test Batch Size: {}\"", ".", "format", "(", "args", ".", "batch_size", ",", "args", ".", "test_batch_size", ")", ")", "\n", "for", "epoch", "in", "range", "(", "trainer", ".", "args", ".", "start_epoch", ",", "trainer", ".", "args", ".", "epochs", ")", ":", "\n", "        ", "trainer", ".", "training", "(", "epoch", ")", "\n", "if", "not", "trainer", ".", "args", ".", "no_val", ":", "\n", "            ", "trainer", ".", "validation", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CombinedDataset.CombinedDataset.__init__": [[14, 54], ["datasets.Urban3dDataset", "datasets.SpaceNetDataset", "datasets.CrowdAIDataset", "int", "numpy.random.shuffle", "iter", "iter", "iter", "models.utils.collate_fn.generate_split_collate_fn", "print", "print", "models.utils.custom_transforms.tensor_resize", "models.utils.custom_transforms.tensor_resize", "os.path.join", "os.path.join", "os.path.join", "numpy.ceil", "len", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.generate_split_collate_fn", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.custom_transforms.tensor_resize", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.custom_transforms.tensor_resize"], ["    ", "def", "__init__", "(", "self", ",", "data_root", ",", "boundary", "=", "False", ",", "train", "=", "True", ")", ":", "\n", "        ", "self", ".", "mode", "=", "\"train\"", "if", "train", "else", "\"val\"", "\n", "self", ".", "use_boundary", "=", "boundary", "\n", "\n", "# Urban3d / SpaceNet transform", "\n", "us_transform", "=", "[", "tensor_resize", "(", "512", ")", "]", "\n", "\n", "# AI Crowd transform", "\n", "ai_transform", "=", "[", "tensor_resize", "(", "256", ")", "]", "\n", "\n", "# Initialize datasets", "\n", "self", ".", "data_root", "=", "data_root", "\n", "self", ".", "urban3d", "=", "Urban3dDataset", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"Urban3D/\"", ",", "self", ".", "mode", ")", ",", "boundary", ",", "False", ",", "None", ")", "\n", "self", ".", "spaceNet", "=", "SpaceNetDataset", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"SpaceNet/Vegas/\"", ",", "self", ".", "mode", ")", ",", "boundary", ",", "us_transform", ")", "\n", "self", ".", "aiCrowd", "=", "CrowdAIDataset", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_root", ",", "\"AICrowd/\"", ",", "self", ".", "mode", ")", ",", "boundary", ",", "ai_transform", ",", "data_slice", "=", "0.1", ")", "\n", "\n", "\"\"\"\n        Urban3D -> 2048 x 2048 -> 512 x 512 -> 4 splits of 256 x 256 (64) \n        SpaceNet -> 650 x 650 -> 512 x 512 -> 4 splits of 256 x 256 (4)\n        CrowdAI -> 300 x 300 -> 256 x 256\n        \"\"\"", "\n", "\n", "# Input list", "\n", "self", ".", "inputs", "=", "[", "self", ".", "urban3d", "]", "*", "len", "(", "self", ".", "urban3d", ")", "+", "[", "self", ".", "spaceNet", "]", "*", "len", "(", "self", ".", "spaceNet", ")", "\n", "\n", "# Truncate CrowdAI to use batch size of 4", "\n", "self", ".", "ai_len", "=", "4", "\n", "len_ai", "=", "int", "(", "np", ".", "ceil", "(", "len", "(", "self", ".", "aiCrowd", ")", "/", "self", ".", "ai_len", ")", ")", "# Train with batches of 4", "\n", "self", ".", "inputs", "+=", "[", "self", ".", "aiCrowd", "]", "*", "len_ai", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "inputs", ")", "\n", "\n", "self", ".", "urban3d_iter", "=", "iter", "(", "self", ".", "urban3d", ")", "\n", "self", ".", "spaceNet_iter", "=", "iter", "(", "self", ".", "spaceNet", ")", "\n", "self", ".", "aiCrowd_iter", "=", "iter", "(", "self", ".", "aiCrowd", ")", "\n", "\n", "self", ".", "split_fn", "=", "generate_split_collate_fn", "(", "512", ",", "2", ",", "self", ".", "use_boundary", ")", "\n", "\n", "print", "(", "\"Combined Dataset with mode {}\"", ".", "format", "(", "self", ".", "mode", ")", ")", "\n", "print", "(", "\"CrowdAI: {}; Urban3D: {}; SpaceNet: {}\"", ".", "format", "(", "len_ai", ",", "len", "(", "self", ".", "urban3d", ")", ",", "len", "(", "self", ".", "spaceNet", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CombinedDataset.CombinedDataset.__len__": [[55, 57], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CombinedDataset.CombinedDataset.__getitem__": [[58, 79], ["next", "CombinedDataset.CombinedDataset.split_fn", "next", "CombinedDataset.CombinedDataset.split_fn", "range", "CombinedDataset.CombinedDataset.combined_collate_fn", "next", "samples.append"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CombinedDataset.CombinedDataset.combined_collate_fn"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "curr_dataset", "=", "self", ".", "inputs", "[", "index", "]", "\n", "\n", "if", "curr_dataset", "==", "self", ".", "urban3d", ":", "# urban3d", "\n", "            ", "inputs", "=", "next", "(", "self", ".", "urban3d_iter", ")", "\n", "inputs", "[", "\"name\"", "]", "[", "0", "]", "+=", "\"_urban3d\"", "\n", "batch", "=", "self", ".", "split_fn", "(", "[", "inputs", "]", ")", "\n", "", "elif", "curr_dataset", "==", "self", ".", "spaceNet", ":", "#space net", "\n", "            ", "inputs", "=", "next", "(", "self", ".", "spaceNet_iter", ")", "\n", "inputs", "[", "\"name\"", "]", "[", "0", "]", "+=", "\"_spaceNet\"", "\n", "batch", "=", "self", ".", "split_fn", "(", "[", "inputs", "]", ")", "\n", "", "else", ":", "# ai crowd", "\n", "            ", "samples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "self", ".", "ai_len", ")", ":", "\n", "                ", "next_input", "=", "next", "(", "self", ".", "aiCrowd_iter", ")", "\n", "next_input", "[", "\"name\"", "]", "[", "0", "]", "+=", "\"_crowdAI\"", "\n", "samples", ".", "append", "(", "next_input", ")", "\n", "\n", "", "batch", "=", "self", ".", "combined_collate_fn", "(", "samples", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CombinedDataset.CombinedDataset.combined_collate_fn": [[80, 95], ["images.append", "masks.append", "names.append", "torch.stack", "torch.stack", "torch.stack", "boundaries.append"], "methods", ["None"], ["", "def", "combined_collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "images", ",", "masks", ",", "names", ",", "boundaries", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "sample", "in", "samples", ":", "\n", "            ", "images", ".", "append", "(", "sample", "[", "\"image\"", "]", ")", "\n", "masks", ".", "append", "(", "sample", "[", "\"mask\"", "]", ")", "\n", "names", ".", "append", "(", "sample", "[", "\"name\"", "]", ")", "\n", "\n", "if", "self", ".", "use_boundary", ":", "\n", "                ", "boundaries", ".", "append", "(", "sample", "[", "\"boundary\"", "]", ")", "\n", "\n", "", "", "batch", "=", "{", "'image'", ":", "torch", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", ",", "'mask'", ":", "torch", ".", "stack", "(", "masks", ",", "axis", "=", "0", ")", ",", "'name'", ":", "names", "}", "\n", "if", "self", ".", "use_boundary", ":", "\n", "            ", "batch", "[", "\"boundary\"", "]", "=", "torch", ".", "stack", "(", "boundaries", ",", "axis", "=", "0", ")", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CrowdAIDataset.CrowdAIDataset.__init__": [[10, 29], ["list", "numpy.random.shuffle", "os.listdir", "int", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "\n", "boundary_kernel_size", "=", "None", ",", "\n", "transforms", "=", "None", ",", "\n", "data_slice", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "inputs", "=", "list", "(", "os", ".", "listdir", "(", "f\"{self.root_dir}/images/\"", ")", ")", "\n", "\n", "# Temporary strategy", "\n", "np", ".", "random", ".", "shuffle", "(", "self", ".", "inputs", ")", "\n", "if", "data_slice", "is", "not", "None", ":", "\n", "            ", "self", ".", "inputs", "=", "self", ".", "inputs", "[", ":", "int", "(", "len", "(", "self", ".", "inputs", ")", "*", "data_slice", ")", "]", "\n", "\n", "", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "generate_boundary", "=", "boundary_kernel_size", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CrowdAIDataset.CrowdAIDataset.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CrowdAIDataset.CrowdAIDataset.__getitem__": [[33, 66], ["skimage.imread", "numpy.load", "transform.squeeze", "torch.ceil().squeeze", "os.path.join", "torch.Tensor().permute", "os.path.join", "torch.Tensor", "transform.float", "CrowdAIDataset.CrowdAIDataset.process_boundary", "transform", "transform", "torch.ceil", "image_filename.replace", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.process_boundary"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "inputs", "[", "index", "]", "\n", "\n", "# Load image", "\n", "image", "=", "io", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"images\"", ",", "image_filename", ")", ")", "\n", "image", "=", "torch", ".", "Tensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "##Converts to 1,C,H,W", "\n", "\n", "# Load masks", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"masks\"", ",", "image_filename", "+", "\"_mask.npy\"", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "mask", "=", "torch", ".", "Tensor", "(", "mask", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", "##1, 1, H, W", "\n", "\n", "# Apply transforms if any", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "                ", "image", "=", "transform", "(", "image", ")", "\n", "mask", "=", "transform", "(", "mask", ")", "\n", "\n", "# Convert image to [0 1] and C, H, W", "\n", "", "", "image", "=", "image", ".", "squeeze", "(", ")", "\n", "image", "=", "image", ".", "float", "(", ")", "/", "255.0", "# Converts image from [0 255] to [0 1] fp", "\n", "\n", "# Mask of shape H, W", "\n", "mask", "=", "torch", ".", "ceil", "(", "mask", ")", ".", "squeeze", "(", ")", "\n", "\n", "batch", "=", "{", "'image'", ":", "image", ",", "'mask'", ":", "mask", ",", "'name'", ":", "[", "image_filename", ".", "replace", "(", "\".jpg\"", ",", "\"\"", ")", "]", "}", "\n", "\n", "# Generate boundary if specified", "\n", "if", "self", ".", "generate_boundary", ":", "\n", "            ", "mask_wt", "=", "self", ".", "process_boundary", "(", "image_filename", ")", "\n", "batch", "[", "'boundary'", "]", "=", "mask_wt", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.CrowdAIDataset.CrowdAIDataset.process_boundary": [[67, 76], ["numpy.load", "torch.tensor", "os.path.join", "numpy.load.astype", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "process_boundary", "(", "self", ",", "image_filename", ")", ":", "\n", "        ", "mask_wt", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"masks_wt\"", ",", "image_filename", "+", "\"_mask_wt.npy\"", ")", ")", "\n", "maskwt_tensor", "=", "torch", ".", "tensor", "(", "mask_wt", ".", "astype", "(", "float", ")", ")", "\n", "\n", "if", "torch", ".", "max", "(", "maskwt_tensor", ")", ">", "0", ":", "\n", "            ", "maskwt_tensor", "=", "maskwt_tensor", "/", "torch", ".", "max", "(", "maskwt_tensor", ")", "\n", "\n", "# Convert mask weights to a scale of 0 - 1", "\n", "", "return", "maskwt_tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.SpaceNetDataset.SpaceNetDataset.__init__": [[8, 20], ["list", "os.listdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "\n", "boundary_kernel_size", "=", "None", ",", "\n", "transforms", "=", "None", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "inputs", "=", "list", "(", "os", ".", "listdir", "(", "f\"{self.root_dir}/images/\"", ")", ")", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "generate_boundary", "=", "boundary_kernel_size", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.SpaceNetDataset.SpaceNetDataset.__len__": [[21, 23], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ",", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.SpaceNetDataset.SpaceNetDataset.__getitem__": [[24, 57], ["numpy.load", "numpy.load", "transform.squeeze", "torch.ceil().squeeze", "os.path.join", "torch.Tensor().permute", "os.path.join", "torch.Tensor", "transform.float", "SpaceNetDataset.SpaceNetDataset.process_boundary", "image_filename.replace", "transform", "transform", "torch.ceil", "image_filename.replace", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.process_boundary"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image_filename", "=", "self", ".", "inputs", "[", "index", "]", "\n", "\n", "# Load image", "\n", "image", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"images\"", ",", "image_filename", ")", ")", "\n", "image", "=", "torch", ".", "Tensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "##Converts to 1,C,H,W", "\n", "\n", "# Load masks", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"masks\"", ",", "image_filename", ".", "replace", "(", "\".npy\"", ",", "\"_mask.npy\"", ")", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "mask", "=", "torch", ".", "Tensor", "(", "mask", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", "##1, 1, H, W", "\n", "\n", "# Apply transforms if any", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "                ", "image", "=", "transform", "(", "image", ")", "\n", "mask", "=", "transform", "(", "mask", ")", "\n", "\n", "# Convert image to [0 1] and C, H, W", "\n", "", "", "image", "=", "image", ".", "squeeze", "(", ")", "\n", "image", "=", "image", ".", "float", "(", ")", "/", "255.0", "# Converts image from [0 255] to [0 1] fp", "\n", "\n", "# Mask of shape H, W", "\n", "mask", "=", "torch", ".", "ceil", "(", "mask", ")", ".", "squeeze", "(", ")", "\n", "\n", "batch", "=", "{", "'image'", ":", "image", ",", "'mask'", ":", "mask", ",", "'name'", ":", "[", "image_filename", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "]", "}", "\n", "\n", "# Generate boundary if specified", "\n", "if", "self", ".", "generate_boundary", ":", "\n", "            ", "mask_wt", "=", "self", ".", "process_boundary", "(", "image_filename", ")", "\n", "batch", "[", "'boundary'", "]", "=", "mask_wt", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.SpaceNetDataset.SpaceNetDataset.process_boundary": [[58, 64], ["numpy.load", "torch.tensor", "os.path.join", "numpy.load.astype", "torch.max", "image_filename.replace"], "methods", ["None"], ["", "def", "process_boundary", "(", "self", ",", "image_filename", ")", ":", "\n", "        ", "mask_wt", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"masks_wt\"", ",", "image_filename", ".", "replace", "(", "\".npy\"", ",", "\"_mask_wt.npy\"", ")", ")", ")", "\n", "maskwt_tensor", "=", "torch", ".", "tensor", "(", "mask_wt", ".", "astype", "(", "float", ")", ")", "\n", "\n", "# Convert mask weights to a scale of 0 - 1", "\n", "return", "maskwt_tensor", "/", "torch", ".", "max", "(", "maskwt_tensor", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.NumpyDataset.NumpyDataset.__init__": [[11, 40], ["numpy.load", "set", "len", "set", "list", "NumpyDataset.NumpyDataset.grid_coordinates.append", "range", "list", "range"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ",", "window_size", "=", "None", ",", "stride", "=", "None", ",", "transforms", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        Args:\n            filename: The path to the numpy array\n            window_size : If the numpy array to too big to fit onto the GPU, then perform grid slicing where each grid block is of size `window_size`\n            stride: The stride at which to perform grid slicing. `window_size` and `stride` must be set together. \n            transform: Transforms to apply to each image.\n\n        If `window_size` doesn't divide the height of the array evenly (which is what is likely to happen) then we will sample an additional row of blocks that are aligned to the bottom of the array.\n        We do a similar operation if `window_size` doesn't divide the width of the array evenly -- by appending an additional column.\n        \"\"\"", "\n", "\n", "self", ".", "filename", "=", "filename", "\n", "self", ".", "transforms", "=", "transforms", "\n", "self", ".", "is_grid_sampling", "=", "window_size", "and", "stride", "\n", "self", ".", "window_size", "=", "window_size", "\n", "\n", "np_array", "=", "np", ".", "load", "(", "self", ".", "filename", ",", "mmap_mode", "=", "'r'", ")", "\n", "self", ".", "height", ",", "self", ".", "width", ",", "_", "=", "np_array", ".", "shape", "\n", "\n", "self", ".", "grid_coordinates", ",", "self", ".", "num_points", "=", "None", ",", "1", "\n", "if", "self", ".", "is_grid_sampling", ":", "\n", "            ", "self", ".", "grid_coordinates", "=", "[", "]", "# upper left coordinate (y,x), of each block that this Dataset will return", "\n", "\n", "for", "y", "in", "set", "(", "list", "(", "range", "(", "0", ",", "self", ".", "height", "-", "self", ".", "window_size", ",", "stride", ")", ")", "+", "[", "self", ".", "height", "-", "self", ".", "window_size", "]", ")", ":", "\n", "                ", "for", "x", "in", "set", "(", "list", "(", "range", "(", "0", ",", "self", ".", "width", "-", "self", ".", "window_size", ",", "stride", ")", ")", "+", "[", "self", ".", "width", "-", "self", ".", "window_size", "]", ")", ":", "\n", "                    ", "self", ".", "grid_coordinates", ".", "append", "(", "(", "y", ",", "x", ")", ")", "\n", "", "", "self", ".", "num_points", "=", "len", "(", "self", ".", "grid_coordinates", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.NumpyDataset.NumpyDataset.__len__": [[41, 43], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_points", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.NumpyDataset.NumpyDataset.__getitem__": [[44, 58], ["numpy.load", "torch.Tensor().permute", "torch.Tensor", "transform", "transform.float", "numpy.array"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "image", "=", "np", ".", "load", "(", "self", ".", "filename", ")", "\n", "if", "self", ".", "is_grid_sampling", ":", "\n", "            ", "row", ",", "col", "=", "self", ".", "grid_coordinates", "[", "index", "]", "\n", "image", "=", "image", "[", "row", ":", "row", "+", "self", ".", "window_size", ",", "col", ":", "col", "+", "self", ".", "window_size", ",", ":", "]", "\n", "\n", "", "image", "=", "torch", ".", "Tensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "                ", "image", "=", "transform", "(", "image", ")", "\n", "\n", "", "", "return", "{", "\n", "\"image\"", ":", "image", ".", "float", "(", ")", "/", "255.0", ",", "\n", "\"coord\"", ":", "np", ".", "array", "(", "self", ".", "grid_coordinates", "[", "index", "]", ")", "if", "self", ".", "is_grid_sampling", "else", "(", "0", ",", "0", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.__init__": [[19, 40], ["int", "Urban3dDataset.Urban3dDataset.inputs.extend", "os.listdir", "range"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root_dir", ",", "\n", "boundary_kernel_size", "=", "None", ",", "\n", "transforms", "=", "None", ",", "\n", "resize", "=", "2048", ",", "\n", "split", "=", "2", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "root", "=", "root_dir", "\n", "self", ".", "filenames", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "f\"{self.root}/images/\"", ")", "if", "'D'", "not", "in", "file", "]", "\n", "self", ".", "transforms", "=", "transforms", "\n", "\n", "self", ".", "generate_boundary", "=", "boundary_kernel_size", "is", "not", "None", "\n", "\n", "# num 512 images", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "num_512", "=", "int", "(", "resize", "/", "512", ")", "**", "2", "\n", "self", ".", "inputs", "=", "[", "]", "\n", "for", "filename", "in", "self", ".", "filenames", ":", "\n", "            ", "self", ".", "inputs", ".", "extend", "(", "[", "(", "filename", ",", "i", "*", "512", ")", "for", "i", "in", "range", "(", "self", ".", "num_512", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.__getitem__": [[44, 77], ["numpy.load", "filename.replace", "numpy.load", "transform.squeeze", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "torch.ceil", "type", "os.path.join", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "torch.Tensor().permute", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "transform.float", "transform.squeeze", "Urban3dDataset.Urban3dDataset.process_boundary", "int", "transform", "transform", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "str"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.process_boundary"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "filename", ",", "index", "=", "self", ".", "inputs", "[", "index", "]", "\n", "assert", "type", "(", "filename", ")", "!=", "list", ",", "\"Data-loader only supports one request at a time\"", "\n", "row_index", ",", "col_index", "=", "int", "(", "index", "/", "self", ".", "resize", ")", "*", "512", ",", "index", "%", "self", ".", "resize", "\n", "\n", "image", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"images\"", ",", "filename", ")", ")", "\n", "maskname", "=", "filename", ".", "replace", "(", "\".npy\"", ",", "\"_mask.npy\"", ")", "\n", "\n", "# slice image and mask", "\n", "image", "=", "image", "[", "row_index", ":", "row_index", "+", "512", ",", "col_index", ":", "col_index", "+", "512", ",", ":", "]", "\n", "image", "=", "torch", ".", "Tensor", "(", "image", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "[", "None", ",", ":", ",", ":", ",", ":", "]", "##Converts to 1,C,H,W", "\n", "\n", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"masks\"", ",", "maskname", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "mask", "=", "mask", "[", "row_index", ":", "row_index", "+", "512", ",", "col_index", ":", "col_index", "+", "512", "]", "\n", "mask", "=", "torch", ".", "Tensor", "(", "mask", ")", "[", "None", ",", "None", ",", ":", ",", ":", "]", "##1, 1, H, W", "\n", "\n", "if", "self", ".", "transforms", "is", "not", "None", ":", "\n", "            ", "for", "transform", "in", "self", ".", "transforms", ":", "\n", "                ", "image", "=", "transform", "(", "image", ")", "\n", "mask", "=", "transform", "(", "mask", ")", "\n", "\n", "", "", "image", "=", "image", ".", "squeeze", "(", ")", "\n", "image", "=", "image", ".", "float", "(", ")", "/", "255.0", "# Converts image from [0 255] to [0 1] fp", "\n", "mask", "=", "torch", ".", "ceil", "(", "mask", ")", "\n", "\n", "batch", "=", "{", "'image'", ":", "image", ",", "'mask'", ":", "mask", ".", "squeeze", "(", ")", ",", "'name'", ":", "[", "filename", "+", "str", "(", "index", "//", "512", ")", "]", "}", "\n", "\n", "if", "self", ".", "generate_boundary", ":", "\n", "            ", "mask_wt", "=", "self", ".", "process_boundary", "(", "filename", ",", "row_index", ",", "col_index", ")", "\n", "batch", "[", "'boundary'", "]", "=", "mask_wt", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.Urban3dDataset.Urban3dDataset.process_boundary": [[78, 88], ["numpy.load", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "os.path.join", "numpy.load.astype", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "image_filename.replace", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["", "def", "process_boundary", "(", "self", ",", "image_filename", ",", "row_index", ",", "col_index", ")", ":", "\n", "        ", "mask_wt", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "\"masks_wt\"", ",", "image_filename", ".", "replace", "(", "\".npy\"", ",", "\"_mask_wt.npy\"", ")", ")", ")", "\n", "mask_wt", "=", "mask_wt", "[", "row_index", ":", "row_index", "+", "512", ",", "col_index", ":", "col_index", "+", "512", "]", "\n", "maskwt_tensor", "=", "torch", ".", "tensor", "(", "mask_wt", ".", "astype", "(", "float", ")", ")", "\n", "\n", "if", "torch", ".", "max", "(", "maskwt_tensor", ")", ">", "0", ":", "\n", "            ", "maskwt_tensor", "=", "maskwt_tensor", "/", "torch", ".", "max", "(", "maskwt_tensor", ")", "\n", "\n", "# Convert mask weights to a scale of 0 - 1", "\n", "", "return", "maskwt_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.__init__.build_dataloader": [[9, 36], ["Urban3dDataset.Urban3dDataset", "Urban3dDataset.Urban3dDataset", "os.path.join", "os.path.join", "SpaceNetDataset.SpaceNetDataset", "SpaceNetDataset.SpaceNetDataset", "os.path.join", "os.path.join", "CrowdAIDataset.CrowdAIDataset", "CrowdAIDataset.CrowdAIDataset", "os.path.join", "os.path.join", "CombinedDataset.CombinedDataset", "CombinedDataset.CombinedDataset", "NotImplementedError"], "function", ["None"], ["def", "build_dataloader", "(", "dataset", ",", "data_root", ",", "boundary_ks", ",", "transforms", ",", "resize", "=", "2048", ",", "split", "=", "2", ")", ":", "\n", "    ", "if", "dataset", "==", "\"urban3d\"", ":", "\n", "        ", "train", "=", "Urban3dDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"Urban3D/train\"", ")", ",", "\n", "boundary_kernel_size", "=", "boundary_ks", ",", "\n", "transforms", "=", "transforms", ",", "\n", "resize", "=", "resize", ",", "split", "=", "split", "\n", ")", "\n", "val", "=", "Urban3dDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"Urban3D/val\"", ")", ",", "\n", "boundary_kernel_size", "=", "boundary_ks", ",", "\n", "transforms", "=", "transforms", ",", "\n", "resize", "=", "resize", ",", "split", "=", "split", "\n", ")", "\n", "", "elif", "dataset", "==", "\"spaceNet\"", ":", "\n", "        ", "train", "=", "SpaceNetDataset", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"SpaceNet/Vegas/train\"", ")", ",", "boundary_ks", ",", "transforms", ")", "\n", "val", "=", "SpaceNetDataset", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"SpaceNet/Vegas/val\"", ")", ",", "boundary_ks", ",", "transforms", ")", "\n", "", "elif", "dataset", "==", "\"crowdAI\"", ":", "\n", "        ", "train", "=", "CrowdAIDataset", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"AICrowd/train\"", ")", ",", "boundary_ks", ",", "transforms", ",", "data_slice", "=", "0.15", ")", "\n", "val", "=", "CrowdAIDataset", "(", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"AICrowd/val\"", ")", ",", "boundary_ks", ",", "transforms", ",", "data_slice", "=", "0.15", ")", "\n", "", "elif", "dataset", "==", "\"combined\"", ":", "\n", "        ", "train", "=", "CombinedDataset", "(", "data_root", ",", "boundary", "=", "(", "boundary_ks", "is", "not", "None", ")", ")", "\n", "val", "=", "CombinedDataset", "(", "data_root", ",", "boundary", "=", "(", "boundary_ks", "is", "not", "None", ")", ",", "train", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "return", "train", ",", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.__init__.build_test_dataloader": [[37, 48], ["Urban3dDataset.Urban3dDataset", "os.path.join", "SpaceNetDataset.SpaceNetDataset", "os.path.join", "CrowdAIDataset.CrowdAIDataset", "os.path.join", "NumpyDataset.NumpyDataset", "NotImplementedError"], "function", ["None"], ["", "def", "build_test_dataloader", "(", "args", ",", "transforms", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "\"urban3d\"", ":", "\n", "        ", "return", "Urban3dDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "\"Urban3D/test\"", ")", ",", "boundary_kernel_size", "=", "None", ",", "transforms", "=", "transforms", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"spaceNet\"", ":", "\n", "        ", "return", "SpaceNetDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "\"SpaceNet/Vegas/test\"", ")", ",", "None", ",", "transforms", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"crowdAI\"", ":", "\n", "        ", "return", "CrowdAIDataset", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_root", ",", "\"AICrowd/test\"", ")", ",", "None", ",", "transforms", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"numpy\"", ":", "\n", "        ", "return", "NumpyDataset", "(", "args", ".", "input_filename", ",", "args", ".", "window_size", ",", "args", ".", "stride", ",", "transforms", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.urban3dDataConverter.Urban3dDataConverter.__init__": [[24, 33], ["os.listdir", "os.mkdir", "os.listdir", "os.mkdir", "os.listdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "rootDir", ")", ":", "\n", "        ", "self", ".", "rootDir", "=", "rootDir", "\n", "self", ".", "buildingNames", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "f\"{self.rootDir}/gtl/\"", ")", "if", "'_GTL.tif'", "in", "file", "]", "\n", "\n", "if", "'masks'", "not", "in", "os", ".", "listdir", "(", "rootDir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f\"{rootDir}/masks\"", ")", "\n", "\n", "", "if", "'images'", "not", "in", "os", ".", "listdir", "(", "rootDir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f\"{rootDir}/images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.urban3dDataConverter.Urban3dDataConverter.convertAllToInput": [[34, 36], ["urban3dDataConverter.Urban3dDataConverter.convertToInput", "len"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.convertToInput"], ["", "", "def", "convertAllToInput", "(", "self", ")", ":", "\n", "        ", "self", ".", "convertToInput", "(", "0", ",", "len", "(", "self", ".", "buildingNames", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.urban3dDataConverter.Urban3dDataConverter.convertToInput": [[37, 61], ["tqdm.tqdm.tqdm", "print", "building.replace", "PIL.Image.open", "numpy.array", "georaster.SingleBandRaster", "georaster.SingleBandRaster", "numpy.save", "numpy.save", "numpy.save", "georaster.SingleBandRaster", "building.replace", "building.replace", "building.replace", "building.replace.index", "building.replace.index", "building.replace.index"], "methods", ["None"], ["", "def", "convertToInput", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "        ", "for", "building", "in", "tqdm", "(", "self", ".", "buildingNames", ")", ":", "\n", "\n", "            ", "imgFile", "=", "building", ".", "replace", "(", "\"_GTL\"", ",", "\"\"", ")", "\n", "\n", "## Saving mask", "\n", "mask", "=", "(", "georaster", ".", "SingleBandRaster", "(", "f\"{self.rootDir}/gtl/{building}\"", ")", ".", "r", "-", "2", ")", "/", "4", "\n", "\n", "## Saving input files", "\n", "im", "=", "Image", ".", "open", "(", "f\"{self.rootDir}/raw_tif/{building.replace('GTL', 'RGB')}\"", ")", "\n", "numpyImage", "=", "np", ".", "array", "(", "im", ")", "\n", "\n", "numpyDSM", "=", "georaster", ".", "SingleBandRaster", "(", "f\"{self.rootDir}/raw_tif/{building.replace('GTL', 'DSM')}\"", ")", "\n", "numpyDTM", "=", "georaster", ".", "SingleBandRaster", "(", "f\"{self.rootDir}/raw_tif/{building.replace('GTL', 'DTM')}\"", ")", "\n", "numpyNormDSM", "=", "(", "numpyDSM", ".", "r", "-", "numpyDTM", ".", "r", ")", "\n", "\n", "mask_dir", "=", "\"masks\"", "\n", "img_dir", "=", "\"images\"", "\n", "\n", "np", ".", "save", "(", "f\"{self.rootDir}/masks/{imgFile[0:imgFile.index('.')]}_mask\"", ",", "mask", ")", "\n", "np", ".", "save", "(", "f\"{self.rootDir}/images/{imgFile[0:imgFile.index('.')]}\"", ",", "numpyImage", ")", "\n", "np", ".", "save", "(", "f\"{self.rootDir}/{img_dir}/{imgFile[0:imgFile.index('.')]}_NormDSM\"", ",", "numpyNormDSM", "/", "2048", ")", "\n", "\n", "", "print", "(", "\"Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.cocoAnnotationToMask.COCOAnnotationToMask.__init__": [[19, 29], ["pycocotools.coco.COCO", "cocoAnnotationToMask.COCOAnnotationToMask.coco_client.getCatIds", "cocoAnnotationToMask.COCOAnnotationToMask.coco_client.getImgIds", "os.path.join", "os.listdir", "os.mkdir"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "coco_client", "=", "COCO", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "'annotation.json'", ")", ")", "\n", "\n", "self", ".", "category_ids", "=", "self", ".", "coco_client", ".", "getCatIds", "(", "catNms", "=", "[", "'building'", "]", ")", "\n", "self", ".", "image_ids", "=", "self", ".", "coco_client", ".", "getImgIds", "(", "catIds", "=", "self", ".", "category_ids", ")", "\n", "\n", "self", ".", "save_dir", "=", "root_dir", "\n", "if", "'masks'", "not", "in", "os", ".", "listdir", "(", "root_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f\"{root_dir}/masks\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.cocoAnnotationToMask.COCOAnnotationToMask.convert": [[30, 47], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "cocoAnnotationToMask.COCOAnnotationToMask.generate_mask", "mask.astype.astype.astype", "numpy.save", "cocoAnnotationToMask.COCOAnnotationToMask.coco_client.loadImgs", "tqdm.tqdm.tqdm.set_description", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.cocoAnnotationToMask.COCOAnnotationToMask.generate_mask"], ["", "", "def", "convert", "(", "self", ")", ":", "\n", "        ", "no_annotations", "=", "0", "\n", "pbar", "=", "tqdm", "(", "self", ".", "image_ids", ")", "\n", "pbar", ".", "set_description", "(", "\"{} samples have no annotations\"", ".", "format", "(", "no_annotations", ")", ")", "\n", "\n", "for", "img_id", "in", "pbar", ":", "\n", "            ", "meta", "=", "self", ".", "coco_client", ".", "loadImgs", "(", "ids", "=", "[", "img_id", "]", ")", "[", "0", "]", "\n", "\n", "# image = io.imread(os.path.join(self.root_dir, \"images\", meta['file_name']))", "\n", "mask", "=", "self", ".", "generate_mask", "(", "meta", ")", "\n", "if", "mask", "is", "None", ":", "\n", "                ", "no_annotations", "+=", "1", "\n", "pbar", ".", "set_description", "(", "\"{} samples have no annotations\"", ".", "format", "(", "no_annotations", ")", ")", "\n", "continue", "\n", "\n", "", "mask", "=", "mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"masks\"", ",", "meta", "[", "'file_name'", "]", "+", "\"_mask\"", ")", ",", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.cocoAnnotationToMask.COCOAnnotationToMask.generate_mask": [[48, 60], ["cocoAnnotationToMask.COCOAnnotationToMask.coco_client.getAnnIds", "cocoAnnotationToMask.COCOAnnotationToMask.coco_client.loadAnns", "numpy.zeros", "numpy.maximum", "len", "cocoAnnotationToMask.COCOAnnotationToMask.coco_client.annToMask"], "methods", ["None"], ["", "", "def", "generate_mask", "(", "self", ",", "meta", ")", ":", "\n", "        ", "annotation_ids", "=", "self", ".", "coco_client", ".", "getAnnIds", "(", "imgIds", "=", "meta", "[", "'id'", "]", ",", "catIds", "=", "self", ".", "category_ids", ")", "\n", "annotations", "=", "self", ".", "coco_client", ".", "loadAnns", "(", "annotation_ids", ")", "\n", "\n", "mask", "=", "np", ".", "zeros", "(", "(", "meta", "[", "'height'", "]", ",", "meta", "[", "'width'", "]", ")", ")", "\n", "for", "ann", "in", "annotations", ":", "\n", "            ", "mask", "[", ":", ",", ":", "]", "=", "np", ".", "maximum", "(", "mask", "[", ":", ",", ":", "]", ",", "self", ".", "coco_client", ".", "annToMask", "(", "ann", ")", ")", "\n", "\n", "", "if", "len", "(", "annotations", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.__init__": [[22, 39], ["os.listdir", "os.path.join", "os.listdir", "os.mkdir", "os.listdir", "os.mkdir", "g.index", "g.index"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "root_dir", ",", "save_dir", ",", "aoi_id", ",", "location", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "aoi_id", "=", "aoi_id", "\n", "self", ".", "location", "=", "location", "\n", "\n", "self", ".", "image_prefix", "=", "\"RGB-PanSharpen_AOI_{}_{}_img\"", ".", "format", "(", "self", ".", "aoi_id", ",", "self", ".", "location", ")", "\n", "self", ".", "mask_prefix", "=", "\"buildings_AOI_{}_{}_img\"", ".", "format", "(", "self", ".", "aoi_id", ",", "self", ".", "location", ")", "\n", "\n", "geojson_files", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "'geojson/buildings'", ")", ")", "\n", "self", ".", "ids", "=", "[", "g", "[", "g", ".", "index", "(", "'img'", ")", "+", "3", ":", "g", ".", "index", "(", "'.'", ")", "]", "for", "g", "in", "geojson_files", "]", "\n", "\n", "if", "'masks'", "not", "in", "os", ".", "listdir", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f\"{save_dir}/masks\"", ")", "\n", "\n", "", "if", "'images'", "not", "in", "os", ".", "listdir", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "f\"{save_dir}/images\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.convertAllToInput": [[40, 42], ["spaceNetDataConverter.SpaceNetDataConverter.convertToInput", "len"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.convertToInput"], ["", "", "def", "convertAllToInput", "(", "self", ")", ":", "\n", "        ", "self", ".", "convertToInput", "(", "0", ",", "len", "(", "self", ".", "ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.convertToInput": [[43, 71], ["tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "print", "os.path.join", "georaster.MultiBandRaster", "os.path.join", "spaceNetDataConverter.SpaceNetDataConverter.geoJsonToMask", "mask.astype.astype.astype", "numpy.save", "numpy.save", "open", "json.load", "tqdm.tqdm.tqdm.set_description", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.geoJsonToMask"], ["", "def", "convertToInput", "(", "self", ",", "start", ",", "end", ")", ":", "\n", "        ", "num_blank", "=", "0", "\n", "pbar", "=", "tqdm", "(", "self", ".", "ids", ")", "\n", "\n", "pbar", ".", "set_description", "(", "\"{} samples are blank\"", ".", "format", "(", "num_blank", ")", ")", "\n", "for", "img_id", "in", "pbar", ":", "\n", "            ", "tiff_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"RGB-PanSharpen\"", ",", "self", ".", "image_prefix", "+", "img_id", "+", "\".tif\"", ")", "\n", "tiff", "=", "georaster", ".", "MultiBandRaster", "(", "tiff_file", ")", "\n", "\n", "geojson_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "\"geojson/buildings\"", ",", "self", ".", "mask_prefix", "+", "img_id", "+", "\".geojson\"", ")", "\n", "with", "open", "(", "geojson_file", ")", "as", "gf", ":", "\n", "                ", "geojson", "=", "json", ".", "load", "(", "gf", ")", "\n", "\n", "", "image", "=", "tiff", ".", "r", "/", "2048.0", "\n", "mask", "=", "self", ".", "geoJsonToMask", "(", "geojson", ",", "tiff", ")", "\n", "if", "mask", "is", "None", ":", "\n", "                ", "num_blank", "+=", "1", "\n", "pbar", ".", "set_description", "(", "\"{} samples are blank\"", ".", "format", "(", "num_blank", ")", ")", "\n", "continue", "\n", "\n", "", "mask", "=", "mask", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image", "=", "(", "image", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "# save images", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"images\"", ",", "img_id", ")", ",", "image", ")", "\n", "# save masks", "\n", "np", ".", "save", "(", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"masks\"", ",", "img_id", "+", "\"_mask\"", ")", ",", "mask", ")", "\n", "\n", "", "print", "(", "\"Finished!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.SpaceNetDataConverter.geoJsonToMask": [[72, 97], ["numpy.zeros", "enumerate", "len", "numpy.array", "tiff.coord_to_px", "skimage.draw.polygon", "numpy.sum", "numpy.max", "numpy.min"], "methods", ["None"], ["", "def", "geoJsonToMask", "(", "self", ",", "geojson", ",", "tiff", ")", ":", "\n", "        ", "polyMasks", "=", "np", ".", "zeros", "(", "(", "650", ",", "650", ")", ")", "\n", "for", "i", ",", "bldg", "in", "enumerate", "(", "geojson", "[", "'features'", "]", ")", ":", "\n", "            ", "feature_type", "=", "bldg", "[", "'geometry'", "]", "[", "'type'", "]", "\n", "if", "'Polygon'", "not", "in", "feature_type", ":", "\n", "                ", "continue", "\n", "\n", "", "polygons", "=", "[", "bldg", "[", "'geometry'", "]", "[", "'coordinates'", "]", "]", "if", "feature_type", "==", "\"Polygon\"", "else", "bldg", "[", "'geometry'", "]", "[", "'coordinates'", "]", "\n", "\n", "for", "mask", "in", "polygons", ":", "\n", "                ", "rasteredPolygon", "=", "np", ".", "array", "(", "mask", "[", "0", "]", ")", "\n", "xs", ",", "ys", "=", "tiff", ".", "coord_to_px", "(", "rasteredPolygon", "[", ":", ",", "0", "]", ",", "rasteredPolygon", "[", ":", ",", "1", "]", ",", "latlon", "=", "True", ")", "\n", "\n", "cc", ",", "rr", "=", "polygon", "(", "xs", ",", "ys", ")", "\n", "polyMasks", "[", "rr", ",", "cc", "]", "=", "1", "\n", "\n", "\n", "", "", "if", "len", "(", "geojson", "[", "'features'", "]", ")", ">", "0", ":", "\n", "            ", "assert", "np", ".", "max", "(", "polyMasks", ")", "==", "1", "and", "np", ".", "min", "(", "polyMasks", ")", "==", "0", "\n", "if", "np", ".", "sum", "(", "polyMasks", ")", "<=", "5", ":", "\n", "                ", "return", "None", "\n", "", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "polyMasks", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.spaceNetDataConverter.train_val_split": [[99, 109], ["list", "numpy.random.shuffle", "int", "tqdm.tqdm", "os.listdir", "shutil.move", "shutil.move", "os.path.join", "len", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "img.replace"], "function", ["None"], ["", "", "def", "train_val_split", "(", "root_dir", ",", "save_dir", ",", "train_percent", ")", ":", "\n", "    ", "all_images", "=", "list", "(", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"images\"", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "all_images", ")", "\n", "\n", "num_train", "=", "int", "(", "len", "(", "all_images", ")", "*", "train_percent", ")", "\n", "val_images", "=", "all_images", "[", "num_train", ":", "]", "\n", "\n", "for", "img", "in", "tqdm", "(", "val_images", ")", ":", "\n", "        ", "shutil", ".", "move", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"images\"", ",", "img", ")", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"images\"", ")", ")", "\n", "shutil", ".", "move", "(", "os", ".", "path", ".", "join", "(", "root_dir", ",", "\"masks\"", ",", "img", ".", "replace", "(", "\".npy\"", ",", "\"_mask.npy\"", ")", ")", ",", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"masks\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.__init__": [[9, 22], ["os.path.join", "os.path.join", "os.path.exists", "os.mkdir"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_path", ",", "w0", ",", "sigma", ",", "inc", ",", "resize", "=", "None", ",", "start", "=", "None", ")", ":", "\n", "        ", "self", ".", "root_path", "=", "root_path", "\n", "self", ".", "masks_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\"masks\"", ")", "\n", "\n", "self", ".", "masks_wt_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_path", ",", "\"masks_wt\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "masks_wt_path", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "self", ".", "masks_wt_path", ")", "\n", "\n", "\n", "", "self", ".", "w0", ",", "self", ".", "sigma", "=", "w0", ",", "sigma", "\n", "self", ".", "inc", "=", "inc", "\n", "self", ".", "resize", "=", "resize", "\n", "self", ".", "start", "=", "start", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.process": [[23, 54], ["tqdm.tqdm.tqdm", "os.listdir", "print", "tqdm.tqdm.tqdm", "numpy.load", "numpy.expand_dims", "int", "range", "numpy.save", "os.path.join", "weighted_boundary_processor.Processor.resize_mask().squeeze().astype", "numpy.ceil", "range", "os.path.join", "numpy.expand_dims.astype().squeeze", "list", "min", "mask_path.replace", "os.listdir", "weighted_boundary_processor.Processor.resize_mask().squeeze", "min", "len", "weighted_boundary_processor.Processor.make_weight_map", "numpy.expand_dims.astype", "numpy.unique", "weighted_boundary_processor.Processor.resize_mask"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.make_weight_map", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.resize_mask"], ["", "def", "process", "(", "self", ",", ")", ":", "\n", "        ", "pbar", "=", "tqdm", "(", "os", ".", "listdir", "(", "self", ".", "masks_path", ")", ")", "\n", "if", "self", ".", "start", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Starting at {}\"", ".", "format", "(", "self", ".", "start", ")", ")", "\n", "pbar", "=", "tqdm", "(", "list", "(", "os", ".", "listdir", "(", "self", ".", "masks_path", ")", ")", "[", "self", ".", "start", ":", "]", ")", "\n", "\n", "", "for", "mask_path", "in", "pbar", ":", "\n", "            ", "mask", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "masks_path", ",", "mask_path", ")", ")", "\n", "mask", "=", "(", "mask", ">", "0", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "if", "self", ".", "resize", "is", "not", "None", ":", "\n", "                ", "mask", "=", "self", ".", "resize_mask", "(", "mask", ")", ".", "squeeze", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "", "mask_weight", "=", "np", ".", "expand_dims", "(", "mask", ",", "axis", "=", "0", ")", "\n", "endpoint", "=", "mask", ".", "shape", "[", "0", "]", "\n", "max_step", "=", "int", "(", "np", ".", "ceil", "(", "endpoint", "/", "self", ".", "inc", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "max_step", ")", ":", "\n", "                ", "si", ",", "ei", "=", "i", "*", "self", ".", "inc", ",", "min", "(", "endpoint", ",", "i", "*", "self", ".", "inc", "+", "self", ".", "inc", ")", "\n", "\n", "for", "j", "in", "range", "(", "max_step", ")", ":", "\n", "                    ", "sj", ",", "ej", "=", "j", "*", "self", ".", "inc", ",", "min", "(", "endpoint", ",", "j", "*", "self", ".", "inc", "+", "self", ".", "inc", ")", "\n", "\n", "if", "len", "(", "np", ".", "unique", "(", "mask", "[", "si", ":", "ei", ",", "sj", ":", "ej", "]", ")", ")", ">", "1", ":", "\n", "                        ", "mask_weight", "[", ":", ",", "si", ":", "ei", ",", "sj", ":", "ej", "]", "=", "self", ".", "make_weight_map", "(", "mask_weight", "[", ":", ",", "si", ":", "ei", ",", "sj", ":", "ej", "]", ")", "\n", "", "else", ":", "\n", "                        ", "mask_weight", "[", ":", ",", "si", ":", "ei", ",", "sj", ":", "ej", "]", "=", "0", "\n", "\n", "", "", "", "np", ".", "save", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "masks_wt_path", ",", "mask_path", ".", "replace", "(", "\"_mask.npy\"", ",", "\"_mask_wt.npy\"", ")", ")", ",", "\n", "mask_weight", ".", "astype", "(", "np", ".", "uint8", ")", ".", "squeeze", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.resize_mask": [[56, 58], ["torch.nn.functional.interpolate().detach().numpy", "torch.nn.functional.interpolate().detach", "torch.nn.functional.interpolate", "torch.tensor().unsqueeze().unsqueeze().float", "torch.tensor().unsqueeze().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor"], "methods", ["None"], ["", "", "def", "resize_mask", "(", "self", ",", "mask", ")", ":", "\n", "        ", "return", "interpolate", "(", "torch", ".", "tensor", "(", "mask", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "float", "(", ")", ",", "size", "=", "self", ".", "resize", ",", "mode", "=", "\"nearest\"", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.converters.weighted_boundary_processor.Processor.make_weight_map": [[59, 111], ["numpy.zeros", "numpy.meshgrid", "enumerate", "numpy.arange", "numpy.zeros", "numpy.zeros", "numpy.arange", "numpy.arange", "skimage.segmentation.find_boundaries", "numpy.nonzero", "numpy.sqrt().min", "numpy.zeros.ravel", "numpy.exp", "numpy.exp", "masks.sum", "X2.reshape", "X1.reshape", "Y2.reshape", "Y1.reshape", "numpy.sqrt", "masks.sum", "masks.sum", "X1.ravel", "Y1.ravel", "numpy.argpartition", "numpy.argpartition"], "methods", ["None"], ["", "def", "make_weight_map", "(", "self", ",", "masks", ")", ":", "\n", "        ", "\"\"\"\n        Generate the weight maps as specified in the UNet paper\n        for a set of binary masks.\n        \n        Parameters\n        ----------\n        masks: array-like\n            A 3D array of shape (n_masks, image_height, image_width),\n            where each slice of the matrix along the 0th axis represents one binary mask.\n\n        Returns\n        -------\n        array-like\n            A 2D array of shape (image_height, image_width)\n        \n        \"\"\"", "\n", "nrows", ",", "ncols", "=", "masks", ".", "shape", "[", "1", ":", "]", "\n", "masks", "=", "(", "masks", ">", "0", ")", ".", "astype", "(", "int", ")", "\n", "distMap", "=", "np", ".", "zeros", "(", "(", "nrows", "*", "ncols", ",", "masks", ".", "shape", "[", "0", "]", ")", ")", "\n", "X1", ",", "Y1", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "nrows", ")", ",", "np", ".", "arange", "(", "ncols", ")", ")", "\n", "X1", ",", "Y1", "=", "np", ".", "c_", "[", "X1", ".", "ravel", "(", ")", ",", "Y1", ".", "ravel", "(", ")", "]", ".", "T", "\n", "for", "i", ",", "mask", "in", "enumerate", "(", "masks", ")", ":", "\n", "# find the boundary of each mask,", "\n", "# compute the distance of each pixel from this boundary", "\n", "            ", "bounds", "=", "find_boundaries", "(", "mask", ",", "mode", "=", "'inner'", ")", "\n", "X2", ",", "Y2", "=", "np", ".", "nonzero", "(", "bounds", ")", "\n", "xSum", "=", "(", "X2", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "X1", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "**", "2", "\n", "ySum", "=", "(", "Y2", ".", "reshape", "(", "-", "1", ",", "1", ")", "-", "Y1", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "**", "2", "\n", "distMap", "[", ":", ",", "i", "]", "=", "np", ".", "sqrt", "(", "xSum", "+", "ySum", ")", ".", "min", "(", "axis", "=", "0", ")", "\n", "", "ix", "=", "np", ".", "arange", "(", "distMap", ".", "shape", "[", "0", "]", ")", "\n", "if", "distMap", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "            ", "d1", "=", "distMap", ".", "ravel", "(", ")", "\n", "border_loss_map", "=", "self", ".", "w0", "*", "np", ".", "exp", "(", "(", "-", "1", "*", "(", "d1", ")", "**", "2", ")", "/", "(", "2", "*", "(", "self", ".", "sigma", "**", "2", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "distMap", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "                ", "d1_ix", ",", "d2_ix", "=", "np", ".", "argpartition", "(", "distMap", ",", "1", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "2", "]", ".", "T", "\n", "", "else", ":", "\n", "                ", "d1_ix", ",", "d2_ix", "=", "np", ".", "argpartition", "(", "distMap", ",", "2", ",", "axis", "=", "1", ")", "[", ":", ",", ":", "2", "]", ".", "T", "\n", "", "d1", "=", "distMap", "[", "ix", ",", "d1_ix", "]", "\n", "d2", "=", "distMap", "[", "ix", ",", "d2_ix", "]", "\n", "border_loss_map", "=", "self", ".", "w0", "*", "np", ".", "exp", "(", "(", "-", "1", "*", "(", "d1", "+", "d2", ")", "**", "2", ")", "/", "(", "2", "*", "(", "self", ".", "sigma", "**", "2", ")", ")", ")", "\n", "", "xBLoss", "=", "np", ".", "zeros", "(", "(", "nrows", ",", "ncols", ")", ")", "\n", "xBLoss", "[", "X1", ",", "Y1", "]", "=", "border_loss_map", "\n", "# class weight map", "\n", "loss", "=", "np", ".", "zeros", "(", "(", "nrows", ",", "ncols", ")", ")", "\n", "w_1", "=", "1", "-", "masks", ".", "sum", "(", ")", "/", "loss", ".", "size", "\n", "w_0", "=", "1", "-", "w_1", "\n", "loss", "[", "masks", ".", "sum", "(", "0", ")", "==", "1", "]", "=", "w_1", "\n", "loss", "[", "masks", ".", "sum", "(", "0", ")", "==", "0", "]", "=", "w_0", "\n", "ZZ", "=", "xBLoss", "+", "loss", "\n", "return", "ZZ", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.__init__": [[4, 7], ["numpy.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "num_class", ")", ":", "\n", "        ", "self", ".", "num_class", "=", "num_class", "\n", "self", ".", "confusion_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_class", ",", ")", "*", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.pixelAcc_manual": [[8, 26], ["len", "numpy.unique", "numpy.sum", "numpy.sum", "numpy.logical_and"], "methods", ["None"], ["", "def", "pixelAcc_manual", "(", "self", ",", "gt_image", ",", "pred_image", ")", ":", "\n", "        ", "len_batch", "=", "len", "(", "gt_image", ")", "\n", "classes", "=", "np", ".", "unique", "(", "gt_image", ")", "\n", "\n", "sum_overlap", "=", "0", "\n", "sum_n_gt", "=", "0", "\n", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "curr_gt", ",", "curr_pred", "=", "(", "gt_image", "==", "c", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "(", "pred_image", "==", "c", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "overlap", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_gt", ",", "curr_pred", ")", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "curr_gt", ")", "\n", "\n", "sum_overlap", "+=", "overlap", "\n", "sum_n_gt", "+=", "n_gt", "\n", "\n", "", "pixel_acc", "=", "sum_overlap", "/", "sum_n_gt", "\n", "return", "pixel_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.mIOU_manual": [[27, 64], ["len", "numpy.unique", "numpy.sum", "numpy.sum", "numpy.sum", "mIOU.append", "sum", "len", "numpy.logical_and"], "methods", ["None"], ["", "def", "mIOU_manual", "(", "self", ",", "gt_image", ",", "pred_image", ")", ":", "\n", "        ", "len_batch", "=", "len", "(", "gt_image", ")", "\n", "classes", "=", "np", ".", "unique", "(", "gt_image", ")", "\n", "\n", "mIOU", "=", "[", "]", "\n", "\n", "\"\"\"\n\n        IOU = overlap / union \n            union = (gt + pred - overlap)\n\n        GT       CLASS 0 \n                c = 0\n\n        0 0 0\n        0 0 0\n        0 0 1\n\n        1 1 1  1 1 0\n        1 1 1  0 0 0 \n        1 1 0  1 1 0\n\n        \"\"\"", "\n", "\n", "for", "c", "in", "classes", ":", "\n", "            ", "curr_gt", ",", "curr_pred", "=", "(", "gt_image", "==", "c", ")", ".", "astype", "(", "np", ".", "int32", ")", ",", "(", "pred_image", "==", "c", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "overlap", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "curr_gt", ",", "curr_pred", ")", ")", "\n", "n_gt", "=", "np", ".", "sum", "(", "curr_gt", ")", "\n", "n_pred", "=", "np", ".", "sum", "(", "curr_pred", ")", "\n", "\n", "iou", "=", "(", "overlap", ")", "/", "(", "n_gt", "+", "n_pred", "-", "overlap", ")", "\n", "\n", "mIOU", ".", "append", "(", "iou", ")", "\n", "\n", "", "mIOU", "=", "sum", "(", "mIOU", ")", "/", "len", "(", "classes", ")", "\n", "return", "mIOU", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.f1score_manual": [[65, 83], ["len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "methods", ["None"], ["", "def", "f1score_manual", "(", "self", ",", "gt_image", ",", "pred_image", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "gt_image", ")", "\n", "\n", "if", "np", ".", "sum", "(", "gt_image", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "tp", "=", "np", ".", "sum", "(", "pred_image", "*", "gt_image", ")", "\n", "fp", "=", "np", ".", "sum", "(", "pred_image", "*", "(", "gt_image", "==", "0", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "(", "pred_image", "==", "0", ")", "*", "gt_image", ")", "\n", "\n", "precision", "=", "(", "tp", "/", "(", "tp", "+", "fp", ")", ")", "\n", "recall", "=", "(", "tp", "/", "(", "tp", "+", "fn", ")", ")", "\n", "\n", "\n", "numerator", "=", "2", "*", "precision", "*", "recall", "\n", "denominator", "=", "precision", "+", "recall", "+", "1e-7", "\n", "\n", "return", "numerator", "/", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.f1score_manual_full": [[84, 106], ["len", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "float", "float", "numpy.isnan", "numpy.isnan"], "methods", ["None"], ["", "def", "f1score_manual_full", "(", "self", ",", "gt_image", ",", "pred_image", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "gt_image", ")", "\n", "\n", "if", "np", ".", "sum", "(", "gt_image", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "tp", "=", "np", ".", "sum", "(", "pred_image", "*", "gt_image", ")", "\n", "fp", "=", "np", ".", "sum", "(", "pred_image", "*", "(", "gt_image", "==", "0", ")", ")", "\n", "fn", "=", "np", ".", "sum", "(", "(", "pred_image", "==", "0", ")", "*", "gt_image", ")", "\n", "\n", "precision", "=", "(", "tp", "/", "(", "tp", "+", "fp", ")", ")", "\n", "recall", "=", "(", "tp", "/", "(", "tp", "+", "fn", ")", ")", "\n", "\n", "if", "(", "precision", "==", "float", "(", "'inf'", ")", "or", "recall", "==", "float", "(", "'inf'", ")", ")", ":", "\n", "            ", "return", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "", "elif", "(", "np", ".", "isnan", "(", "precision", ")", "or", "np", ".", "isnan", "(", "recall", ")", ")", ":", "\n", "            ", "return", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "\n", "", "numerator", "=", "2", "*", "precision", "*", "recall", "\n", "denominator", "=", "precision", "+", "recall", "+", "1e-7", "\n", "\n", "return", "(", "numerator", "/", "denominator", ")", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.__init__": [[7, 15], ["print", "sum", "sum"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "beta", "=", "1", ",", "weight", "=", "None", ",", "cuda", "=", "False", ")", ":", "\n", "        ", "self", ".", "weight", "=", "weight", "\n", "self", ".", "beta", "=", "beta", "\n", "assert", "self", ".", "weight", "is", "None", "or", "sum", "(", "self", ".", "weight", ")", "==", "2", "or", "sum", "(", "self", ".", "weight", ")", "==", "3", "\n", "print", "(", "\"Using loss weights: \"", ",", "self", ".", "weight", ")", "\n", "\n", "self", ".", "cuda", "=", "cuda", "\n", "self", ".", "verbose", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.build_loss": [[16, 27], ["print"], "methods", ["None"], ["", "def", "build_loss", "(", "self", ",", "mode", "=", "'ce'", ")", ":", "\n", "        ", "print", "(", "\"Using {} loss with {} beta\"", ".", "format", "(", "mode", ",", "self", ".", "beta", ")", ")", "\n", "\n", "if", "mode", "==", "'ce'", ":", "\n", "            ", "return", "self", ".", "CrossEntropyLoss", "\n", "", "elif", "mode", "==", "'ce_dice'", ":", "\n", "            ", "return", "self", ".", "CE_DICELoss", "\n", "", "elif", "mode", "==", "'wce_dice'", ":", "\n", "            ", "return", "self", ".", "WCE_DICELoss", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.CrossEntropyLoss": [[28, 37], ["logit.permute().reshape.permute().reshape.size", "logit.permute().reshape.permute().reshape.permute().reshape", "target.reshape.reshape.reshape", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "torch.nn.functional.cross_entropy", "logit.permute().reshape.permute().reshape.permute"], "methods", ["None"], ["", "", "def", "CrossEntropyLoss", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "\n", "logit", "=", "logit", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ".", "reshape", "(", "-", "1", ",", "c", ")", "\n", "target", "=", "target", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "loss", "=", "torch", ".", "nn", ".", "functional", ".", "cross_entropy", "(", "logit", ",", "target", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.CrossEntropyLoss_Manual": [[38, 60], ["logit.size", "torch.log_softmax().float", "torch.log_softmax().float", "torch.log_softmax().float", "torch.log_softmax().float.gather", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "weights.unsqueeze.unsqueeze.unsqueeze", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "weights_exp.size", "F.log_softmax().float.gather.size", "logits_weighted_log_probs.sum", "weights_exp.view().sum", "weighted_loss.mean", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "target.view().long", "weights_exp.view", "target.view"], "methods", ["None"], ["", "def", "CrossEntropyLoss_Manual", "(", "self", ",", "logit", ",", "target", ",", "weights", "=", "None", ")", ":", "\n", "        ", "n", ",", "c", ",", "h", ",", "w", "=", "logit", ".", "size", "(", ")", "\n", "# Calculate log probabilities", "\n", "logits_log_softmax", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", ".", "float", "(", ")", "\n", "logits_log_probs", "=", "logits_log_softmax", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "target", ".", "view", "(", "n", ",", "1", ",", "h", ",", "w", ")", ".", "long", "(", ")", ")", "#n, 1, h, w", "\n", "\n", "# Multiply by exp(weights) [ weights on scale of 0-1, but taking exponent gives 1-e]", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "weights", "=", "torch", ".", "zeros_like", "(", "logits_log_probs", ")", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", ".", "unsqueeze", "(", "1", ")", "# weights arrive as n, h, w", "\n", "\n", "", "weights_exp", "=", "torch", ".", "exp", "(", "weights", ")", "**", "2", "# [0 - 1] --> [1 e**3=20]", "\n", "# print(torch.unique(weights_exp))", "\n", "assert", "weights_exp", ".", "size", "(", ")", "==", "logits_log_probs", ".", "size", "(", ")", "\n", "logits_weighted_log_probs", "=", "(", "logits_log_probs", "*", "weights_exp", ")", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "\n", "# Rescale the weights so loss is in approximately the same interval (distribution of weights may have a lot of variance)", "\n", "weighted_loss", "=", "logits_weighted_log_probs", ".", "sum", "(", "1", ")", "/", "weights_exp", ".", "view", "(", "n", ",", "-", "1", ")", ".", "sum", "(", "1", ")", "\n", "\n", "# Return mini-batch mean", "\n", "return", "-", "1", "*", "weighted_loss", ".", "mean", "(", ")", "# log probs are negative for incorrect predictions and 0 for perfect. need to minimize not maximize", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.DICELoss": [[62, 73], ["logit.exp.exp.exp", "encoded_target.scatter_", "loss.SegmentationLosses.calc_dice", "len", "len", "logit.exp.exp.detach", "target.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.calc_dice"], ["", "def", "DICELoss", "(", "self", ",", "logit", ",", "target", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "logit", "=", "logit", ".", "exp", "(", ")", "\n", "\n", "assert", "len", "(", "logit", ".", "shape", ")", "==", "4", "\n", "assert", "len", "(", "target", ".", "shape", ")", "==", "3", "\n", "\n", "eps", "=", "0.0001", "\n", "encoded_target", "=", "logit", ".", "detach", "(", ")", "*", "0", "\n", "encoded_target", ".", "scatter_", "(", "1", ",", "target", ".", "unsqueeze", "(", "1", ")", ",", "1", ")", "\n", "\n", "return", "self", ".", "calc_dice", "(", "logit", ",", "encoded_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.calc_dice": [[74, 83], ["intersection.sum().sum().sum", "loss_per_channel.sum", "logit.size", "denominator.sum().sum().sum", "intersection.sum().sum", "denominator.sum().sum", "intersection.sum", "denominator.sum"], "methods", ["None"], ["", "def", "calc_dice", "(", "self", ",", "logit", ",", "encoded_target", ",", "eps", "=", "1e-7", ")", ":", "\n", "        ", "intersection", "=", "logit", "*", "encoded_target", "\n", "numerator", "=", "(", "1", "+", "self", ".", "beta", "**", "2", ")", "*", "intersection", ".", "sum", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "\n", "denominator", "=", "logit", "+", "encoded_target", "\n", "\n", "denominator", "=", "(", "self", ".", "beta", "**", "2", ")", "*", "denominator", ".", "sum", "(", "0", ")", ".", "sum", "(", "1", ")", ".", "sum", "(", "1", ")", "+", "eps", "\n", "loss_per_channel", "=", "(", "1", "-", "(", "numerator", "/", "denominator", ")", ")", "\n", "\n", "return", "loss_per_channel", ".", "sum", "(", ")", "/", "logit", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.CE_DICELoss": [[84, 89], ["loss.SegmentationLosses.CrossEntropyLoss", "loss.SegmentationLosses.DICELoss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.CrossEntropyLoss", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.DICELoss"], ["", "def", "CE_DICELoss", "(", "self", ",", "logit", ",", "target", ")", ":", "\n", "        ", "cross_entropy", "=", "self", ".", "CrossEntropyLoss", "(", "logit", ",", "target", ")", "\n", "dice_loss", "=", "self", ".", "DICELoss", "(", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", ",", "target", ")", "\n", "\n", "return", "self", ".", "weight", "[", "0", "]", "*", "cross_entropy", "+", "self", ".", "weight", "[", "1", "]", "*", "dice_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.WCE_DICELoss": [[90, 95], ["loss.SegmentationLosses.CrossEntropyLoss_Manual", "loss.SegmentationLosses.DICELoss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.CrossEntropyLoss_Manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.DICELoss"], ["", "def", "WCE_DICELoss", "(", "self", ",", "logit", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "wce", "=", "self", ".", "CrossEntropyLoss_Manual", "(", "logit", ",", "target", ",", "weight", ")", "\n", "dice_loss", "=", "self", ".", "DICELoss", "(", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "1", ")", ",", "target", ")", "\n", "\n", "return", "self", ".", "weight", "[", "0", "]", "*", "wce", "+", "self", ".", "weight", "[", "1", "]", "*", "dice_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.generate_split_collate_fn": [[9, 67], ["range", "stacked_split_samples.append", "stacked_split_masks.append", "torch.cat", "torch.cat", "torch.cat", "range", "scrolling_window"], "function", ["None"], ["def", "generate_split_collate_fn", "(", "original_size", ",", "factor", ",", "incl_boundary", "=", "False", ")", ":", "\n", "\n", "    ", "def", "split_grid_collate_fn", "(", "current_batch", ")", ":", "\n", "\n", "# split image/mask into blocks of size", "\n", "        ", "def", "scrolling_window", "(", "image", ",", "mask", ",", "size", ",", "boundary", "=", "None", ")", ":", "\n", "            ", "split_images", ",", "split_masks", "=", "[", "]", ",", "[", "]", "\n", "split_boundaries", "=", "[", "]", "\n", "\n", "curr_size", "=", "image", ".", "shape", "[", "1", "]", "\n", "iterations", "=", "curr_size", "//", "size", "\n", "\n", "for", "x_stride", "in", "range", "(", "iterations", ")", ":", "\n", "                ", "for", "y_stride", "in", "range", "(", "iterations", ")", ":", "\n", "\n", "                    ", "x_bound_1", ",", "x_bound_2", "=", "(", "x_stride", "*", "size", ")", ",", "(", "x_stride", "+", "1", ")", "*", "size", "\n", "y_bound_1", ",", "y_bound_2", "=", "(", "y_stride", "*", "size", ")", ",", "(", "y_stride", "+", "1", ")", "*", "size", "\n", "\n", "split_images", ".", "append", "(", "image", "[", ":", ",", "x_bound_1", ":", "x_bound_2", ",", "y_bound_1", ":", "y_bound_2", "]", ")", "\n", "split_masks", ".", "append", "(", "mask", "[", "x_bound_1", ":", "x_bound_2", ",", "y_bound_1", ":", "y_bound_2", "]", ")", "\n", "\n", "if", "boundary", "is", "not", "None", ":", "\n", "                        ", "split_boundaries", ".", "append", "(", "boundary", "[", "x_bound_1", ":", "x_bound_2", ",", "y_bound_1", ":", "y_bound_2", "]", ")", "\n", "\n", "", "", "", "return", "split_images", ",", "split_masks", ",", "split_boundaries", "\n", "\n", "", "stacked_split_samples", "=", "[", "]", "\n", "stacked_split_masks", "=", "[", "]", "\n", "stacked_split_boundaries", "=", "[", "]", "\n", "all_filenames", "=", "[", "]", "\n", "\n", "for", "batch", "in", "current_batch", ":", "\n", "            ", "sample", ",", "masks", ",", "name", "=", "batch", "[", "'image'", "]", ",", "batch", "[", "'mask'", "]", ",", "batch", "[", "'name'", "]", "\n", "if", "incl_boundary", ":", "\n", "                ", "boundary", "=", "batch", "[", "'boundary'", "]", "\n", "split_sample", ",", "split_mask", ",", "split_boundary", "=", "scrolling_window", "(", "sample", ",", "masks", ",", "original_size", "//", "factor", ",", "boundary", "=", "boundary", ")", "# List of N elements of size C, 512, 512", "\n", "stacked_split_boundaries", ".", "append", "(", "torch", ".", "stack", "(", "split_boundary", ")", ")", "\n", "", "else", ":", "\n", "                ", "split_sample", ",", "split_mask", ",", "_", "=", "scrolling_window", "(", "sample", ",", "masks", ",", "original_size", "//", "factor", ")", "# List of N elements of size C, 512, 512", "\n", "\n", "", "stacked_split_samples", ".", "append", "(", "torch", ".", "stack", "(", "split_sample", ")", ")", "# create tensor (N, C, 512, 512)", "\n", "stacked_split_masks", ".", "append", "(", "torch", ".", "stack", "(", "split_mask", ")", ")", "# create tensor (N, 512, 512)", "\n", "\n", "all_filenames", "+=", "name", "*", "len", "(", "split_sample", ")", "# duplicate the file name. Could be used for matching purposes", "\n", "\n", "\n", "", "collate_batch", "=", "{", "\n", "'image'", ":", "torch", ".", "cat", "(", "stacked_split_samples", ")", ",", "\n", "'mask'", ":", "torch", ".", "cat", "(", "stacked_split_masks", ")", ",", "\n", "'name'", ":", "all_filenames", "\n", "}", "\n", "\n", "if", "incl_boundary", ":", "\n", "            ", "collate_batch", "[", "'boundary'", "]", "=", "torch", ".", "cat", "(", "stacked_split_boundaries", ")", "\n", "\n", "", "return", "collate_batch", "\n", "\n", "", "return", "split_grid_collate_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_concatenation": [[68, 84], ["print", "collate_fn.handle_splits", "collate_fn.handle_splits", "collate_fn.handle_normal", "collate_fn.handle_normal", "Exception", "type"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_splits", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_splits", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_normal", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_normal"], ["", "def", "handle_concatenation", "(", "is_combined", ",", "is_split", ",", "image", ",", "pred", ",", "target", ",", "names", ")", ":", "\n", "    ", "if", "is_combined", ":", "\n", "        ", "test_name", "=", "names", "[", "0", "]", "[", "0", "]", "#List of 1 len tuples", "\n", "print", "(", "test_name", ")", "\n", "if", "\"urban3d\"", "in", "test_name", "or", "\"spaceNet\"", "in", "test_name", ":", "\n", "            ", "names", "=", "[", "n", "[", "0", "]", "if", "type", "(", "n", ")", "==", "tuple", "else", "n", "for", "n", "in", "names", "]", "\n", "return", "handle_splits", "(", "2", ",", "image", ",", "pred", ",", "target", ",", "names", ")", "\n", "", "elif", "\"crowdAI\"", "in", "test_name", "[", "0", "]", ":", "# or \"spaceNet\" in test_name[0]:", "\n", "            ", "names", "=", "[", "n", "[", "0", "]", "[", "0", "]", "for", "n", "in", "names", "]", "\n", "return", "handle_normal", "(", "image", ",", "pred", ",", "target", ",", "names", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"something went wrong in handle_concat or data loading from combined\"", ")", "\n", "", "", "elif", "is_split", "is", "not", "None", ":", "\n", "        ", "return", "handle_splits", "(", "is_split", ",", "image", ",", "pred", ",", "target", ",", "names", ")", "\n", "", "else", ":", "\n", "        ", "return", "handle_normal", "(", "image", ",", "pred", ",", "target", ",", "names", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_normal": [[85, 94], ["numpy.random.choice().item", "image[].permute().cpu().numpy", "numpy.random.choice", "image[].permute().cpu", "image[].permute"], "function", ["None"], ["", "", "def", "handle_normal", "(", "image", ",", "pred", ",", "target", ",", "names", ")", ":", "\n", "    ", "random_index", "=", "np", ".", "random", ".", "choice", "(", "image", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "item", "(", ")", "\n", "\n", "filename", "=", "names", "[", "0", "]", "[", "random_index", "]", "# names is a list of tuples with the list len being 1 and the tuple len being the batch size", "\n", "image", "=", "image", "[", "random_index", ",", ":", ",", ":", ",", ":", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "# C, H, W", "\n", "pred", "=", "pred", "[", "random_index", ",", ":", ",", ":", "]", "# H, W", "\n", "target", "=", "target", "[", "random_index", ",", ":", ",", ":", "]", "#H, W", "\n", "\n", "return", "filename", ",", "image", ",", "pred", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_splits": [[95, 110], ["numpy.random.choice().item", "image[].cpu().numpy", "collate_fn.concatenate_images", "collate_fn.concatenate_images", "collate_fn.concatenate_images", "numpy.random.choice", "image[].cpu"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.concatenate_images", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.concatenate_images", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.concatenate_images"], ["", "def", "handle_splits", "(", "split_factor", ",", "image", ",", "pred", ",", "target", ",", "names", ")", ":", "\n", "    ", "num_splits", "=", "split_factor", "**", "2", "\n", "random_index", "=", "np", ".", "random", ".", "choice", "(", "image", ".", "shape", "[", "0", "]", "//", "num_splits", ",", "1", ")", ".", "item", "(", ")", "\n", "\n", "random_index_adj", "=", "random_index", "*", "num_splits", "\n", "filename", "=", "names", "[", "random_index_adj", "]", "\n", "split_image", "=", "image", "[", "random_index_adj", ":", "random_index_adj", "+", "num_splits", ",", ":", ",", ":", ",", ":", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "split_pred", "=", "pred", "[", "random_index_adj", ":", "random_index_adj", "+", "num_splits", ",", ":", ",", ":", "]", "\n", "split_target", "=", "target", "[", "random_index_adj", ":", "random_index_adj", "+", "num_splits", ",", ":", ",", ":", "]", "\n", "\n", "image", "=", "concatenate_images", "(", "split_image", ",", "split_factor", ")", "\n", "pred", "=", "concatenate_images", "(", "split_pred", ",", "split_factor", ")", "\n", "target", "=", "concatenate_images", "(", "split_target", ",", "split_factor", ")", "\n", "\n", "return", "filename", ",", "image", ",", "pred", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.concatenate_images": [[111, 155], ["numpy.split", "numpy.block().squeeze", "len", "numpy.transpose", "len", "len", "numpy.block", "len", "len", "range"], "function", ["None"], ["", "def", "concatenate_images", "(", "split_tensor", ",", "split_factor", ")", ":", "\n", "    ", "\"\"\"\n    input: n-split tensor where n is a power of 2\n    4, 256, 256\n        w - 256, 256\n        x - 256, 256\n        y - 256, 256\n        z - 256\n    Desired\n    [\n        w x \n        y z\n    ]\n\n    2D array X (n, x)\n    2D array Y (n, y)\n\n    [X Y] (n, x+y)\n\n    2D array Z (x, x)\n    [Z Z]\n    [Z Z]\n    create array of shape (2X, 2X)\n\n    Traditional:\n    np.reshape(input, 512, 512)\n\n    \"\"\"", "\n", "\n", "assert", "len", "(", "split_tensor", ".", "shape", ")", "==", "3", "or", "len", "(", "split_tensor", ".", "shape", ")", "==", "4", "\n", "assert", "split_tensor", ".", "shape", "[", "0", "]", "==", "split_factor", "**", "2", "\n", "\n", "num_splits", "=", "split_tensor", ".", "shape", "[", "0", "]", "\n", "splits", "=", "np", ".", "split", "(", "split_tensor", ",", "num_splits", ",", "axis", "=", "0", ")", "\n", "\n", "joined_image", "=", "np", ".", "block", "(", "[", "splits", "[", "i", ":", "i", "+", "split_factor", "]", "for", "i", "in", "range", "(", "0", ",", "num_splits", ",", "split_factor", ")", "]", ")", ".", "squeeze", "(", ")", "\n", "if", "len", "(", "joined_image", ".", "shape", ")", "==", "3", ":", "\n", "        ", "assert", "split_tensor", ".", "shape", "[", "-", "1", "]", "*", "split_factor", "==", "joined_image", ".", "shape", "[", "-", "1", "]", "\n", "joined_image", "=", "np", ".", "transpose", "(", "joined_image", ",", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "joined_image", ".", "shape", ")", "==", "2", "or", "len", "(", "joined_image", ".", "shape", ")", "==", "3", "\n", "assert", "split_tensor", ".", "shape", "[", "1", "]", "*", "split_factor", "==", "joined_image", ".", "shape", "[", "0", "]", "\n", "\n", "", "return", "joined_image", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.save_and_test_images": [[157, 165], ["print", "sample.detach().numpy", "enumerate", "os.getcwd", "print", "print", "print", "matplotlib.image.imsave", "matplotlib.image.imsave", "sample.detach", "split_img.max", "split_img.min"], "function", ["None"], ["", "def", "save_and_test_images", "(", "sample", ",", "prefix", ")", ":", "\n", "    ", "print", "(", "os", ".", "getcwd", "(", ")", ")", "\n", "numpy_sample", "=", "sample", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "for", "i", ",", "split_img", "in", "enumerate", "(", "numpy_sample", ")", ":", "\n", "        ", "print", "(", "split_img", ".", "shape", ")", "\n", "print", "(", "split_img", ".", "max", "(", ")", ")", "\n", "print", "(", "split_img", ".", "min", "(", ")", ")", "\n", "matplotlib", ".", "image", ".", "imsave", "(", "'models/utils/testing/{}_{}.png'", ".", "format", "(", "prefix", ",", "i", ")", ",", "split_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.custom_transforms.tensor_resize": [[4, 9], ["torch.interpolate"], "function", ["None"], ["def", "tensor_resize", "(", "size", ")", ":", "\n", "    ", "def", "fn", "(", "tensor", ")", ":", "\n", "        ", "return", "F", ".", "interpolate", "(", "tensor", ",", "size", "=", "size", ",", "mode", "=", "\"nearest\"", ")", "\n", "\n", "", "return", "fn", "\n", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.__init__": [[12, 32], ["os.path.join", "os.path.join", "float", "float", "wandb.init", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "vars"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "directory", "=", "os", ".", "path", ".", "join", "(", "'run'", ",", "args", ".", "dataset", ",", "args", ".", "checkname", ")", "\n", "self", ".", "save_directory", "=", "os", ".", "path", ".", "join", "(", "'weights'", ",", "args", ".", "checkname", ")", "\n", "if", "args", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "init", "(", "\n", "entity", "=", "\"<entity>\"", ",", "\n", "project", "=", "\"<project>\"", ",", "\n", "name", "=", "args", ".", "dataset", "+", "args", ".", "checkname", ",", "\n", "config", "=", "vars", "(", "args", ")", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "directory", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "save_directory", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "save_directory", ")", "\n", "\n", "", "self", ".", "images", "=", "0", "\n", "self", ".", "best_loss", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "best_miou", "=", "float", "(", "'-inf'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.plot_and_save_image": [[33, 41], ["matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "matplotlib.image.imsave", "os.path.join", "os.makedirs", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "plot_and_save_image", "(", "self", ",", "filename", ",", "input_type", ",", "image_array", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}_{}'", ".", "format", "(", "filename", ",", "self", ".", "images", ")", ")", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n", "", "matplotlib", ".", "image", ".", "imsave", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'{}_{}/{}.png'", ".", "format", "(", "filename", ",", "self", ".", "images", ",", "input_type", ")", ")", ",", "image_array", ")", "\n", "return", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "\"{}_{}/{}.png\"", ".", "format", "(", "filename", ",", "self", ".", "images", ",", "input_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb_image": [[42, 59], ["filename.replace.replace.replace", "saver.Saver.plot_and_save_image", "saver.Saver.plot_and_save_image", "saver.Saver.plot_and_save_image", "wandb.log", "len", "len", "len", "len", "wandb.Image", "wandb.Image", "wandb.Image"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.plot_and_save_image", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.plot_and_save_image", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.plot_and_save_image"], ["", "def", "log_wandb_image", "(", "self", ",", "filename", ",", "input_image", ",", "pred_mask", ",", "gt_mask", ")", ":", "\n", "        ", "assert", "len", "(", "input_image", ".", "shape", ")", "==", "3", "and", "len", "(", "pred_mask", ".", "shape", ")", "==", "len", "(", "gt_mask", ".", "shape", ")", "and", "len", "(", "pred_mask", ".", "shape", ")", "==", "2", "\n", "\n", "filename", "=", "filename", ".", "replace", "(", "\".npy\"", ",", "\"\"", ")", "\n", "\n", "input_saved", "=", "self", ".", "plot_and_save_image", "(", "filename", ",", "\"input_image\"", ",", "input_image", ")", "\n", "pred_saved", "=", "self", ".", "plot_and_save_image", "(", "filename", ",", "\"pred_mask\"", ",", "pred_mask", ")", "\n", "gt_saved", "=", "self", ".", "plot_and_save_image", "(", "filename", ",", "\"gt_mask\"", ",", "gt_mask", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "\n", "\"{}_input_{}\"", ".", "format", "(", "filename", ",", "self", ".", "images", ")", ":", "wandb", ".", "Image", "(", "input_saved", ")", ",", "\n", "\"{}_pred_{}\"", ".", "format", "(", "filename", ",", "self", ".", "images", ")", ":", "wandb", ".", "Image", "(", "pred_saved", ")", ",", "\n", "\"{}_gt_{}\"", ".", "format", "(", "filename", ",", "self", ".", "images", ")", ":", "wandb", ".", "Image", "(", "gt_saved", ")", ",", "\n", "}", ")", "\n", "\n", "", "self", ".", "images", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb": [[61, 68], ["saver.Saver.save_metrics", "wandb.log"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_metrics"], ["", "def", "log_wandb", "(", "self", ",", "epoch", ",", "step", ",", "metrics", ")", ":", "\n", "        ", "self", ".", "save_metrics", "(", "epoch", ",", "metrics", ")", "\n", "\n", "if", "self", ".", "args", ".", "use_wandb", ":", "\n", "            ", "if", "epoch", ":", "\n", "                ", "metrics", "[", "\"epoch\"", "]", "=", "epoch", "\n", "", "wandb", ".", "log", "(", "metrics", ",", "step", "=", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_metrics": [[69, 79], ["jsonlines.open", "metrics.items", "f.write", "os.path.join"], "methods", ["None"], ["", "", "def", "save_metrics", "(", "self", ",", "epoch", ",", "metrics", ")", ":", "\n", "        ", "with", "jsonlines", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "\"metrics.jsonl\"", ")", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "metrics_str", "=", "\"Epoch {};\"", ".", "format", "(", "epoch", ")", "\n", "for", "k", ",", "v", "in", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "metrics_str", "=", "\"{} {}: {};\"", ".", "format", "(", "metrics_str", ",", "k", ",", "v", ")", "\n", "\n", "", "metrics", "[", "\"epoch\"", "]", "=", "epoch", "\n", "\n", "f", ".", "write", "(", "metrics", ")", "\n", "return", "metrics_str", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_checkpoint": [[80, 91], ["print", "torch.save", "print", "torch.save", "os.path.join", "os.path.join"], "methods", ["None"], ["", "", "def", "save_checkpoint", "(", "self", ",", "state", ",", "val_loss", ",", "val_miou", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "        ", "\"\"\"Saves checkpoint to disk\"\"\"", "\n", "if", "val_loss", "<", "self", ".", "best_loss", ":", "\n", "            ", "print", "(", "\"Saving best loss checkpoint\"", ")", "\n", "self", ".", "best_loss", "=", "val_loss", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "'best_loss_{}'", ".", "format", "(", "filename", ")", ")", ")", "\n", "\n", "", "if", "val_miou", ">", "self", ".", "best_miou", ":", "\n", "            ", "print", "(", "\"Saving best mIOU checkpoint\"", ")", "\n", "self", ".", "best_miou", "=", "val_miou", "\n", "torch", ".", "save", "(", "state", ",", "os", ".", "path", ".", "join", "(", "self", ".", "save_directory", ",", "'best_miou_{}'", ".", "format", "(", "filename", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_experiment_config": [[93, 101], ["os.path.join", "open", "vars().items", "open.close", "open.write", "vars", "str"], "methods", ["None"], ["", "", "def", "save_experiment_config", "(", "self", ")", ":", "\n", "        ", "logfile", "=", "os", ".", "path", ".", "join", "(", "self", ".", "directory", ",", "'parameters.txt'", ")", "\n", "log_file", "=", "open", "(", "logfile", ",", "'w'", ")", "\n", "\n", "for", "key", ",", "val", "in", "vars", "(", "self", ".", "args", ")", ".", "items", "(", ")", ":", "\n", "            ", "log_file", ".", "write", "(", "key", "+", "':'", "+", "str", "(", "val", ")", "+", "'\\n'", ")", "\n", "\n", "", "log_file", ".", "close", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loader.load_model": [[5, 40], ["os.path.join", "print", "torch.load", "torch.nn.DataParallel", "models.deeplab.modeling.sync_batchnorm.replicate.patch_replication_callback", "model.cuda.cuda", "model.cuda.load_state_dict", "model.cuda.load_state_dict", "OrderedDict", "torch.load.items", "model.cuda.load_state_dict"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.patch_replication_callback"], ["def", "load_model", "(", "model", ",", "resume_dataset", "=", "None", ",", "best_miou", "=", "False", ",", "is_cuda", "=", "False", ",", "gpu_ids", "=", "None", ")", ":", "\n", "# Load state_dict, if any", "\n", "    ", "model_checkpoint", "=", "None", "\n", "if", "resume_dataset", "is", "not", "None", ":", "\n", "        ", "checkpoint_name", "=", "\"best_miou_checkpoint.pth.tar\"", "if", "best_miou", "else", "\"best_loss_checkpoint.pth.tar\"", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "\"weights\"", ",", "resume_dataset", ",", "checkpoint_name", ")", "\n", "print", "(", "\"Resuming from {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "\n", "model_checkpoint", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "\n", "# Load model onto GPUs", "\n", "", "if", "is_cuda", ":", "\n", "        ", "assert", "gpu_ids", "is", "not", "None", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ",", "device_ids", "=", "gpu_ids", ")", "\n", "patch_replication_callback", "(", "model", ")", "\n", "model", "=", "model", ".", "cuda", "(", ")", "\n", "\n", "\n", "if", "model_checkpoint", "is", "not", "None", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "model_checkpoint", ")", "\n", "", "", "elif", "model_checkpoint", "is", "not", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "model_checkpoint", ")", "\n", "", "except", "RuntimeError", ":", "\n", "# The model is currently on the CPU, and does not have DataParallel wrapper", "\n", "# Need to remove the \"module.\" prefix from all keys in state_dict", "\n", "            ", "from", "collections", "import", "OrderedDict", "\n", "new_checkpoint", "=", "OrderedDict", "(", ")", "\n", "for", "module_name", ",", "parameters", "in", "model_checkpoint", ".", "items", "(", ")", ":", "\n", "                ", "name", "=", "module_name", "[", "7", ":", "]", "\n", "new_checkpoint", "[", "name", "]", "=", "parameters", "\n", "", "model_checkpoint", "=", "new_checkpoint", "\n", "model", ".", "load_state_dict", "(", "model_checkpoint", ")", "\n", "\n", "", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.evaluate.Tester.__init__": [[23, 57], ["models.utils.saver.Saver", "evaluate.Tester.saver.save_experiment_config", "datasets.build_test_dataloader", "print", "torch.utils.data.DataLoader", "print", "DeepLab", "models.utils.loader.load_model", "evaluate.Tester.model.eval", "models.utils.metrics.Evaluator", "len"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_experiment_config", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.__init__.build_test_dataloader", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loader.load_model"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "# Define Saver", "\n", "self", ".", "saver", "=", "Saver", "(", "args", ")", "\n", "self", ".", "saver", ".", "save_experiment_config", "(", ")", "\n", "\n", "# Define Dataloader. Also, define any transforms here", "\n", "test_dataset", "=", "build_test_dataloader", "(", "args", ",", "transforms", "=", "None", ")", "\n", "\n", "print", "(", "\"Testing on {} samples\"", ".", "format", "(", "len", "(", "test_dataset", ")", ")", ")", "\n", "self", ".", "test_loader", "=", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", ")", "\n", "self", ".", "nclass", "=", "args", ".", "num_classes", "\n", "\n", "# Define network", "\n", "print", "(", "\"Using backbone {} with output stride {} and dropout values {}, {}\"", ".", "format", "(", "args", ".", "backbone", ",", "args", ".", "out_stride", ",", "args", ".", "dropout", "[", "0", "]", ",", "args", ".", "dropout", "[", "1", "]", ")", ")", "\n", "self", ".", "model", "=", "DeepLab", "(", "num_classes", "=", "self", ".", "nclass", ",", "\n", "backbone", "=", "args", ".", "backbone", ",", "\n", "output_stride", "=", "args", ".", "out_stride", ",", "\n", "sync_bn", "=", "args", ".", "sync_bn", ",", "\n", "freeze_bn", "=", "args", ".", "freeze_bn", ",", "\n", "dropout_low", "=", "args", ".", "dropout", "[", "0", "]", ",", "\n", "dropout_high", "=", "args", ".", "dropout", "[", "1", "]", ",", "\n", ")", "\n", "\n", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "args", ".", "resume", ",", "args", ".", "best_miou", ",", "args", ".", "cuda", ",", "args", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "self", ".", "nclass", ")", "\n", "self", ".", "curr_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.evaluate.Tester.infer": [[58, 88], ["tqdm.tqdm.tqdm", "numpy.zeros", "numpy.zeros", "enumerate", "final_output.argmax().astype.argmax().astype.argmax().astype", "image.cuda.cuda.cuda", "torch.no_grad", "evaluate.Tester.model", "torch.nn.functional.softmax().cpu().numpy().squeeze", "len", "coord.squeeze", "final_output.argmax().astype.argmax().astype.argmax", "torch.nn.functional.softmax().cpu().numpy", "torch.nn.functional.softmax().cpu", "torch.nn.functional.softmax"], "methods", ["None"], ["", "def", "infer", "(", "self", ",", ")", ":", "\n", "        ", "assert", "self", ".", "test_loader", ".", "dataset", ".", "__class__", ".", "__name__", "in", "[", "\"NumpyDataset\"", "]", "\n", "height", ",", "width", "=", "self", ".", "test_loader", ".", "dataset", ".", "height", ",", "self", ".", "test_loader", ".", "dataset", ".", "width", "\n", "\n", "tbar", "=", "tqdm", "(", "self", ".", "test_loader", ")", "\n", "final_output", "=", "np", ".", "zeros", "(", "(", "2", ",", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "counts", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "coord", "=", "sample", "[", "\"image\"", "]", ",", "sample", "[", "\"coord\"", "]", "\n", "assert", "image", ".", "shape", "[", "0", "]", "==", "1", ",", "\"Inference on multiple images simulatenously is not supported\"", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "pred", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "len", "(", "self", ".", "test_loader", ")", "==", "1", ":", "\n", "                ", "final_output", "=", "pred", "\n", "counts", "[", ":", "]", "=", "1", "\n", "", "else", ":", "\n", "                ", "row", ",", "col", "=", "coord", ".", "squeeze", "(", ")", "\n", "\n", "final_output", "[", ":", ",", "row", ":", "row", "+", "self", ".", "args", ".", "window_size", ",", "col", ":", "col", "+", "self", ".", "args", ".", "window_size", "]", "+=", "pred", "\n", "counts", "[", "row", ":", "row", "+", "self", ".", "args", ".", "window_size", ",", "col", ":", "col", "+", "self", ".", "args", ".", "window_size", "]", "+=", "1", "\n", "\n", "", "", "final_output", "/=", "counts", "\n", "final_output", "=", "final_output", ".", "argmax", "(", "axis", "=", "0", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.evaluate.Tester.test": [[89, 134], ["tqdm.tqdm.tqdm", "enumerate", "print", "torch.nn.functional.softmax", "numpy.argmax.data.cpu().numpy", "numpy.argmax", "mask.cpu().numpy", "total_pixelAcc.append", "total_mIOU.append", "evaluate.Tester.evaluator.f1score_manual_full", "sample[].long", "torch.no_grad", "evaluate.Tester.model", "evaluate.Tester.evaluator.pixelAcc_manual", "evaluate.Tester.evaluator.mIOU_manual", "total_f1.append", "total_precision.append", "total_recall.append", "total_f1.append", "total_precision.append", "total_recall.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "image.cuda", "mask.cuda", "numpy.argmax.data.cpu", "mask.cpu", "numpy.isnan", "numpy.isnan", "numpy.isnan"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.f1score_manual_full", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.pixelAcc_manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.mIOU_manual"], ["", "def", "test", "(", "self", ",", ")", ":", "\n", "        ", "tbar", "=", "tqdm", "(", "self", ".", "test_loader", ")", "\n", "\n", "total_pixelAcc", "=", "[", "]", "\n", "total_mIOU", "=", "[", "]", "\n", "total_dice", "=", "[", "]", "\n", "total_f1", "=", "[", "]", "\n", "total_precision", ",", "total_recall", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", ".", "long", "(", ")", "\n", "names", "=", "sample", "[", "'name'", "]", "\n", "\n", "# cuda enable image/mask", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "mask", "=", "image", ".", "cuda", "(", ")", ",", "mask", ".", "cuda", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "\n", "", "pred", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "\n", "target", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_pixelAcc", ".", "append", "(", "self", ".", "evaluator", ".", "pixelAcc_manual", "(", "target", ",", "pred", ")", ")", "\n", "total_mIOU", ".", "append", "(", "self", ".", "evaluator", ".", "mIOU_manual", "(", "target", ",", "pred", ")", ")", "\n", "f1", ",", "pre", ",", "rec", "=", "self", ".", "evaluator", ".", "f1score_manual_full", "(", "target", ",", "pred", ")", "\n", "\n", "if", "(", "not", "np", ".", "isnan", "(", "f1", ")", "and", "not", "np", ".", "isnan", "(", "pre", ")", "and", "not", "np", ".", "isnan", "(", "rec", ")", ")", ":", "\n", "                ", "total_f1", ".", "append", "(", "f1", ")", "\n", "total_precision", ".", "append", "(", "pre", ")", "\n", "total_recall", ".", "append", "(", "rec", ")", "\n", "", "else", ":", "\n", "                ", "total_f1", ".", "append", "(", "0", ")", "\n", "total_precision", ".", "append", "(", "0", ")", "\n", "total_recall", ".", "append", "(", "0", ")", "\n", "\n", "", "", "print", "(", "{", "\n", "\"test_mIOU\"", ":", "np", ".", "mean", "(", "total_mIOU", ")", ",", "\n", "\"test_pixel_acc\"", ":", "np", ".", "mean", "(", "total_pixelAcc", ")", ",", "\n", "\"test_f1\"", ":", "np", ".", "mean", "(", "total_f1", ")", ",", "\n", "\"test_ap\"", ":", "np", ".", "mean", "(", "total_precision", ")", ",", "\n", "\"test_ar\"", ":", "np", ".", "mean", "(", "total_recall", ")", ",", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.train.Trainer.__init__": [[26, 91], ["models.utils.saver.Saver", "train.Trainer.saver.save_experiment_config", "datasets.build_dataloader", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "DeepLab", "torch.optim.SGD", "models.utils.loss.SegmentationLosses().build_loss", "models.utils.loader.load_model", "models.utils.metrics.Evaluator", "wandb.watch", "len", "len", "DeepLab.get_1x_lr_params", "DeepLab.get_10x_lr_params", "models.utils.loss.SegmentationLosses"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_experiment_config", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.datasets.__init__.build_dataloader", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loss.SegmentationLosses.build_loss", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.loader.load_model", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.get_1x_lr_params", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.get_10x_lr_params"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "# Define Saver", "\n", "self", ".", "saver", "=", "Saver", "(", "args", ")", "\n", "self", ".", "saver", ".", "save_experiment_config", "(", ")", "\n", "\n", "# Define transforms and Dataloader", "\n", "boundary_ks", "=", "args", ".", "bounds_kernel_size", "if", "args", ".", "incl_bounds", "else", "None", "\n", "deeplab_collate_fn", "=", "None", "\n", "transform", "=", "None", "\n", "\n", "resize", "=", "2048", "\n", "split", "=", "2", "\n", "train_dataset", ",", "val_dataset", "=", "build_dataloader", "(", "args", ".", "dataset", ",", "args", ".", "data_root", ",", "boundary_ks", ",", "transform", ",", "resize", ",", "split", ")", "\n", "\n", "print", "(", "\"Training on {} samples, Validating on {} samples\"", ".", "format", "(", "len", "(", "train_dataset", ")", ",", "len", "(", "val_dataset", ")", ")", ")", "\n", "self", ".", "validation_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "collate_fn", "=", "deeplab_collate_fn", "\n", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "collate_fn", "=", "deeplab_collate_fn", "\n", ")", "\n", "\n", "self", ".", "nclass", "=", "args", ".", "num_classes", "\n", "\n", "# Define network", "\n", "print", "(", "\"Using backbone {} with output stride {} and dropout values {}, {}\"", ".", "format", "(", "args", ".", "backbone", ",", "args", ".", "out_stride", ",", "args", ".", "dropout", "[", "0", "]", ",", "args", ".", "dropout", "[", "1", "]", ")", ")", "\n", "model", "=", "DeepLab", "(", "num_classes", "=", "self", ".", "nclass", ",", "\n", "backbone", "=", "args", ".", "backbone", ",", "\n", "output_stride", "=", "args", ".", "out_stride", ",", "\n", "sync_bn", "=", "args", ".", "sync_bn", ",", "\n", "freeze_bn", "=", "args", ".", "freeze_bn", ",", "\n", "dropout_low", "=", "args", ".", "dropout", "[", "0", "]", ",", "\n", "dropout_high", "=", "args", ".", "dropout", "[", "1", "]", ",", "\n", ")", "\n", "\n", "train_params", "=", "[", "{", "'params'", ":", "model", ".", "get_1x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "}", ",", "\n", "{", "'params'", ":", "model", ".", "get_10x_lr_params", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "*", "10", "}", "]", "\n", "\n", "# Define Optimizer", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "train_params", ",", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "nesterov", "=", "args", ".", "nesterov", ")", "\n", "\n", "if", "args", ".", "incl_bounds", ":", "\n", "            ", "assert", "args", ".", "loss_type", "in", "[", "\"wce_dice\"", "]", "\n", "\n", "", "self", ".", "criterion", "=", "SegmentationLosses", "(", "beta", "=", "args", ".", "fbeta", ",", "weight", "=", "args", ".", "loss_weights", ",", "cuda", "=", "args", ".", "cuda", ")", ".", "build_loss", "(", "mode", "=", "args", ".", "loss_type", ")", "\n", "self", ".", "model", ",", "self", ".", "optimizer", "=", "model", ",", "optimizer", "\n", "\n", "if", "args", ".", "use_wandb", ":", "\n", "            ", "wandb", ".", "watch", "(", "self", ".", "model", ")", "\n", "\n", "", "self", ".", "model", "=", "load_model", "(", "self", ".", "model", ",", "args", ".", "resume", ",", "args", ".", "best_miou", ",", "args", ".", "cuda", ",", "args", ".", "gpu_ids", ")", "\n", "\n", "self", ".", "evaluator", "=", "Evaluator", "(", "self", ".", "nclass", ")", "\n", "self", ".", "curr_step", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.train.Trainer.training": [[92, 146], ["time.time", "train.Trainer.model.train", "tqdm.tqdm.tqdm", "print", "enumerate", "train.Trainer.saver.log_wandb", "train.Trainer.optimizer.zero_grad", "train.Trainer.model", "train.Trainer.backward", "train.Trainer.optimizer.step", "train.Trainer.item", "tqdm.tqdm.tqdm.set_description", "train.Trainer.saver.log_wandb", "time.time", "sample[].long", "sample[].to", "train.Trainer.criterion", "train.Trainer.criterion", "torch.no_grad", "torch.nn.functional.softmax", "numpy.argmax.data.cpu().numpy", "numpy.argmax", "mask.cpu().numpy", "train.Trainer.evaluator.pixelAcc_manual", "train.Trainer.evaluator.mIOU_manual", "train.Trainer.evaluator.f1score_manual", "image.cuda", "mask.cuda", "image.squeeze", "mask.squeeze", "numpy.argmax.data.cpu", "mask.cpu"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.pixelAcc_manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.mIOU_manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.f1score_manual"], ["", "def", "training", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "train_loader", ")", "\n", "\n", "print", "(", "\"Curr Learning Rate x1: {}; Learning Rate x10: {}\"", ".", "format", "(", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", ",", "self", ".", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", ")", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", ".", "long", "(", ")", "\n", "\n", "# cuda enable image/mask", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "mask", "=", "image", ".", "cuda", "(", ")", ",", "mask", ".", "cuda", "(", ")", "\n", "\n", "# need to squeeze if combined dataset", "\n", "", "if", "self", ".", "args", ".", "dataset", "==", "\"combined\"", ":", "\n", "                ", "image", ",", "mask", "=", "image", ".", "squeeze", "(", ")", ",", "mask", ".", "squeeze", "(", ")", "\n", "\n", "# get output, calculate loss, perform backprop", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "\n", "if", "self", ".", "args", ".", "incl_bounds", ":", "\n", "                ", "boundary_weights", "=", "sample", "[", "'boundary'", "]", ".", "to", "(", "image", ".", "device", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "mask", ",", "boundary_weights", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output", ",", "mask", ")", "\n", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "train_loss", "=", "loss", ".", "item", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "pred", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "\n", "target", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pixel_acc", "=", "self", ".", "evaluator", ".", "pixelAcc_manual", "(", "target", ",", "pred", ")", "\n", "mIOU", "=", "self", ".", "evaluator", ".", "mIOU_manual", "(", "target", ",", "pred", ")", "\n", "f1_score", "=", "self", ".", "evaluator", ".", "f1score_manual", "(", "target", ",", "pred", ")", "\n", "\n", "", "tbar", ".", "set_description", "(", "'Train loss: %.3f'", "%", "(", "train_loss", ")", ")", "\n", "metrics", "=", "{", "\"train_loss\"", ":", "train_loss", ",", "\"mIOU\"", ":", "mIOU", ",", "\"pixel_acc\"", ":", "pixel_acc", "}", "\n", "metrics", "[", "\"f1\"", "]", "=", "f1_score", "if", "f1_score", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "saver", ".", "log_wandb", "(", "epoch", ",", "self", ".", "curr_step", ",", "metrics", ")", "\n", "self", ".", "curr_step", "+=", "1", "\n", "\n", "", "total_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "self", ".", "saver", ".", "log_wandb", "(", "None", ",", "self", ".", "curr_step", ",", "{", "\"time\"", ":", "total_time", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.deeplab.train.Trainer.validation": [[147, 216], ["train.Trainer.model.eval", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.set_description", "enumerate", "train.Trainer.saver.log_wandb", "train.Trainer.saver.save_checkpoint", "models.utils.collate_fn.handle_concatenation", "train.Trainer.saver.log_wandb_image", "total_loss.append", "torch.nn.functional.softmax", "numpy.argmax.data.cpu().numpy", "numpy.argmax", "mask.cpu().numpy", "total_pixelAcc.append", "total_mIOU.append", "train.Trainer.evaluator.f1score_manual", "train.Trainer.model.state_dict", "numpy.mean", "numpy.mean", "sample[].long", "torch.no_grad", "train.Trainer.model", "sample[].to", "train.Trainer.criterion", "train.Trainer.criterion", "train.Trainer.item", "train.Trainer.evaluator.pixelAcc_manual", "train.Trainer.evaluator.mIOU_manual", "total_f1.append", "total_f1.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "image.cuda", "mask.cuda", "image.squeeze", "mask.squeeze", "numpy.argmax.data.cpu", "mask.cpu"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.save_checkpoint", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.collate_fn.handle_concatenation", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.saver.Saver.log_wandb_image", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.f1score_manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.pixelAcc_manual", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.utils.metrics.Evaluator.mIOU_manual"], ["", "def", "validation", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "tbar", "=", "tqdm", "(", "self", ".", "validation_loader", ")", "\n", "tbar", ".", "set_description", "(", "\"[Epoch {}] Validation\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "total_loss", "=", "[", "]", "\n", "total_pixelAcc", "=", "[", "]", "\n", "total_mIOU", "=", "[", "]", "\n", "total_f1", "=", "[", "]", "\n", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "tbar", ")", ":", "\n", "            ", "image", ",", "mask", "=", "sample", "[", "'image'", "]", ",", "sample", "[", "'mask'", "]", ".", "long", "(", ")", "\n", "names", "=", "sample", "[", "'name'", "]", "\n", "\n", "# cuda enable image/mask", "\n", "if", "self", ".", "args", ".", "cuda", ":", "\n", "                ", "image", ",", "mask", "=", "image", ".", "cuda", "(", ")", ",", "mask", ".", "cuda", "(", ")", "\n", "\n", "# need to squeeze if combined dataset", "\n", "", "if", "self", ".", "args", ".", "dataset", "==", "\"combined\"", ":", "\n", "                ", "image", ",", "mask", "=", "image", ".", "squeeze", "(", ")", ",", "mask", ".", "squeeze", "(", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "output", "=", "self", ".", "model", "(", "image", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "incl_bounds", ":", "\n", "                ", "boundary_weights", "=", "sample", "[", "'boundary'", "]", ".", "to", "(", "image", ".", "device", ")", "\n", "\n", "loss", "=", "self", ".", "criterion", "(", "output", ",", "mask", ",", "boundary_weights", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "self", ".", "criterion", "(", "output", ",", "mask", ")", "\n", "\n", "", "total_loss", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "pred", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "pred", "=", "pred", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred", "=", "np", ".", "argmax", "(", "pred", ",", "axis", "=", "1", ")", "\n", "\n", "target", "=", "mask", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "total_pixelAcc", ".", "append", "(", "self", ".", "evaluator", ".", "pixelAcc_manual", "(", "target", ",", "pred", ")", ")", "\n", "total_mIOU", ".", "append", "(", "self", ".", "evaluator", ".", "mIOU_manual", "(", "target", ",", "pred", ")", ")", "\n", "f1", "=", "self", ".", "evaluator", ".", "f1score_manual", "(", "target", ",", "pred", ")", "\n", "if", "f1", "is", "not", "None", ":", "\n", "                ", "total_f1", ".", "append", "(", "f1", ")", "\n", "", "else", ":", "\n", "                ", "total_f1", ".", "append", "(", "0", ")", "\n", "\n", "\n", "", "", "self", ".", "saver", ".", "log_wandb", "(", "epoch", ",", "self", ".", "curr_step", ",", "{", "\n", "\"val_loss\"", ":", "np", ".", "mean", "(", "total_loss", ")", ",", "\n", "\"val_mIOU\"", ":", "np", ".", "mean", "(", "total_mIOU", ")", ",", "\n", "\"val_pixel_acc\"", ":", "np", ".", "mean", "(", "total_pixelAcc", ")", ",", "\n", "\"val_f1\"", ":", "np", ".", "mean", "(", "total_f1", ")", ",", "\n", "}", ")", "\n", "self", ".", "saver", ".", "save_checkpoint", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "np", ".", "mean", "(", "total_loss", ")", ",", "np", ".", "mean", "(", "total_mIOU", ")", ")", "\n", "\n", "# select random image and log it to WandB", "\n", "filename", ",", "image", ",", "pred", ",", "target", "=", "handle_concatenation", "(", "\n", "self", ".", "args", ".", "dataset", "==", "\"combined\"", ",", "\n", "self", ".", "args", ".", "split", ",", "\n", "image", ",", "\n", "pred", ",", "\n", "target", ",", "\n", "names", "\n", ")", "\n", "\n", "self", ".", "saver", ".", "log_wandb_image", "(", "filename", ",", "image", ",", "pred", ",", "target", ")", "\n", "self", ".", "curr_step", "+=", "1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp._ASPPModule.__init__": [[8, 16], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "aspp._ASPPModule._init_weight"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", ",", "padding", ",", "dilation", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "_ASPPModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "atrous_conv", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "kernel_size", ",", "\n", "stride", "=", "1", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp._ASPPModule.forward": [[17, 22], ["aspp._ASPPModule.atrous_conv", "aspp._ASPPModule.bn", "aspp._ASPPModule.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "atrous_conv", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "\n", "return", "self", ".", "relu", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp._ASPPModule._init_weight": [[23, 33], ["aspp._ASPPModule.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp.ASPP.__init__": [[35, 65], ["torch.Module.__init__", "aspp._ASPPModule", "aspp._ASPPModule", "aspp._ASPPModule", "aspp._ASPPModule", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "aspp.ASPP._init_weight", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "backbone", ",", "output_stride", ",", "BatchNorm", ",", "dropout", ")", ":", "\n", "        ", "super", "(", "ASPP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'drn'", "in", "backbone", ":", "\n", "            ", "inplanes", "=", "512", "\n", "", "elif", "backbone", "==", "'mobilenet'", ":", "\n", "            ", "inplanes", "=", "320", "\n", "", "else", ":", "\n", "            ", "inplanes", "=", "2048", "\n", "\n", "", "if", "output_stride", "==", "16", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "6", ",", "12", ",", "18", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "dilations", "=", "[", "1", ",", "12", ",", "24", ",", "36", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "aspp1", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "1", ",", "padding", "=", "0", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp2", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp3", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "aspp4", "=", "_ASPPModule", "(", "inplanes", ",", "256", ",", "3", ",", "padding", "=", "dilations", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "self", ".", "global_avg_pool", "=", "nn", ".", "Sequential", "(", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", ",", "\n", "nn", ".", "Conv2d", "(", "inplanes", ",", "256", ",", "1", ",", "stride", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "1280", ",", "256", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "256", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp.ASPP.forward": [[66, 80], ["aspp.ASPP.aspp1", "aspp.ASPP.aspp2", "aspp.ASPP.aspp3", "aspp.ASPP.aspp4", "aspp.ASPP.global_avg_pool", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "aspp.ASPP.conv1", "aspp.ASPP.bn1", "aspp.ASPP.relu", "aspp.ASPP.dropout", "aspp.ASPP.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x1", "=", "self", ".", "aspp1", "(", "x", ")", "\n", "x2", "=", "self", ".", "aspp2", "(", "x", ")", "\n", "x3", "=", "self", ".", "aspp3", "(", "x", ")", "\n", "x4", "=", "self", ".", "aspp4", "(", "x", ")", "\n", "x5", "=", "self", ".", "global_avg_pool", "(", "x", ")", "\n", "x5", "=", "F", ".", "interpolate", "(", "x5", ",", "size", "=", "x4", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x1", ",", "x2", ",", "x3", ",", "x4", ",", "x5", ")", ",", "dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "self", ".", "dropout", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp.ASPP._init_weight": [[81, 93], ["aspp.ASPP.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp.build_aspp": [[95, 97], ["aspp.ASPP"], "function", ["None"], ["", "", "", "", "def", "build_aspp", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ",", "dropout", ")", ":", "\n", "    ", "return", "ASPP", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ",", "dropout", ")", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.__init__": [[10, 27], ["torch.Module.__init__", "models.deeplab.modeling.backbone.build_backbone", "models.deeplab.modeling.aspp.build_aspp", "models.deeplab.modeling.decoder.build_decoder"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.__init__.build_backbone", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.aspp.build_aspp", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.decoder.build_decoder"], ["    ", "def", "__init__", "(", "self", ",", "backbone", "=", "'resnet'", ",", "output_stride", "=", "16", ",", "num_classes", "=", "21", ",", "\n", "sync_bn", "=", "True", ",", "freeze_bn", "=", "False", ",", "dropout_low", "=", "0.1", ",", "dropout_high", "=", "0.5", ")", ":", "\n", "\n", "        ", "super", "(", "DeepLab", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "'drn'", "in", "backbone", ":", "\n", "            ", "output_stride", "=", "8", "\n", "\n", "", "if", "sync_bn", "==", "True", ":", "\n", "            ", "BatchNorm", "=", "SynchronizedBatchNorm2d", "\n", "", "else", ":", "\n", "            ", "BatchNorm", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "", "self", ".", "backbone", "=", "build_backbone", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ")", "\n", "self", ".", "aspp", "=", "build_aspp", "(", "backbone", ",", "output_stride", ",", "BatchNorm", ",", "dropout_high", ")", "\n", "self", ".", "decoder", "=", "build_decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ",", "dropout_low", ",", "dropout_high", ")", "\n", "\n", "self", ".", "freeze_bn", "=", "freeze_bn", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.forward": [[28, 36], ["deeplab.DeepLab.backbone", "deeplab.DeepLab.aspp", "deeplab.DeepLab.decoder", "torch.interpolate", "torch.interpolate", "torch.interpolate", "input.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", ",", "low_level_feat", "=", "self", ".", "backbone", "(", "input", ")", "\n", "\n", "x", "=", "self", ".", "aspp", "(", "x", ")", "\n", "x", "=", "self", ".", "decoder", "(", "x", ",", "low_level_feat", ")", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "input", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.freeze_bn": [[37, 43], ["deeplab.DeepLab.modules", "isinstance", "m.eval", "isinstance", "m.eval"], "methods", ["None"], ["", "def", "freeze_bn", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.get_1x_lr_params": [[44, 59], ["range", "len", "modules[].named_modules", "isinstance", "m[].parameters", "isinstance", "isinstance", "isinstance", "m[].parameters"], "methods", ["None"], ["", "", "", "def", "get_1x_lr_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "backbone", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "m", "in", "modules", "[", "i", "]", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "self", ".", "freeze_bn", ":", "\n", "                    ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                        ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                            ", "if", "p", ".", "requires_grad", ":", "\n", "                                ", "yield", "p", "\n", "", "", "", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                            ", "if", "p", ".", "requires_grad", ":", "\n", "                                ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.deeplab.DeepLab.get_10x_lr_params": [[60, 75], ["range", "len", "modules[].named_modules", "isinstance", "m[].parameters", "isinstance", "isinstance", "isinstance", "m[].parameters"], "methods", ["None"], ["", "", "", "", "", "", "", "def", "get_10x_lr_params", "(", "self", ")", ":", "\n", "        ", "modules", "=", "[", "self", ".", "aspp", ",", "self", ".", "decoder", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "modules", ")", ")", ":", "\n", "            ", "for", "m", "in", "modules", "[", "i", "]", ".", "named_modules", "(", ")", ":", "\n", "                ", "if", "self", ".", "freeze_bn", ":", "\n", "                    ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                        ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                            ", "if", "p", ".", "requires_grad", ":", "\n", "                                ", "yield", "p", "\n", "", "", "", "", "else", ":", "\n", "                    ", "if", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "SynchronizedBatchNorm2d", ")", "or", "isinstance", "(", "m", "[", "1", "]", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                        ", "for", "p", "in", "m", "[", "1", "]", ".", "parameters", "(", ")", ":", "\n", "                            ", "if", "p", ".", "requires_grad", ":", "\n", "                                ", "yield", "p", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.decoder.Decoder.__init__": [[8, 35], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decoder.Decoder._init_weight", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "backbone", ",", "BatchNorm", ",", "dropout_low", ",", "dropout_high", ")", ":", "\n", "        ", "super", "(", "Decoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "backbone", "==", "'resnet'", "or", "backbone", "==", "'drn'", ":", "\n", "            ", "low_level_inplanes", "=", "256", "\n", "", "elif", "backbone", "==", "'drn_c42'", ":", "\n", "            ", "low_level_inplanes", "=", "64", "\n", "", "elif", "backbone", "==", "'xception'", ":", "\n", "            ", "low_level_inplanes", "=", "128", "\n", "", "elif", "backbone", "==", "'mobilenet'", ":", "\n", "            ", "low_level_inplanes", "=", "24", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "low_level_inplanes", ",", "48", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "48", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "last_conv", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv2d", "(", "304", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout_high", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout_low", ")", ",", "\n", "nn", ".", "Conv2d", "(", "64", ",", "num_classes", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ")", ")", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.decoder.Decoder.forward": [[37, 47], ["decoder.Decoder.conv1", "decoder.Decoder.bn1", "decoder.Decoder.relu", "torch.interpolate", "torch.interpolate", "torch.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.Decoder.last_conv", "decoder.Decoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "low_level_feat", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "conv1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "bn1", "(", "low_level_feat", ")", "\n", "low_level_feat", "=", "self", ".", "relu", "(", "low_level_feat", ")", "\n", "\n", "x", "=", "F", ".", "interpolate", "(", "x", ",", "size", "=", "low_level_feat", ".", "size", "(", ")", "[", "2", ":", "]", ",", "mode", "=", "'bilinear'", ",", "align_corners", "=", "True", ")", "\n", "x", "=", "torch", ".", "cat", "(", "(", "x", ",", "low_level_feat", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "self", ".", "last_conv", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.decoder.Decoder._init_weight": [[48, 58], ["decoder.Decoder.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.modeling.decoder.build_decoder": [[59, 61], ["decoder.Decoder"], "function", ["None"], ["", "", "", "", "def", "build_decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ",", "dlow", ",", "dhigh", ")", ":", "\n", "    ", "return", "Decoder", "(", "num_classes", ",", "backbone", ",", "BatchNorm", ",", "dlow", ",", "dhigh", ")", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.DataParallelWithCallback.replicate": [[59, 63], ["super().replicate", "replicate.execute_replication_callbacks"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.DataParallelWithCallback.replicate", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.execute_replication_callbacks"], ["def", "replicate", "(", "self", ",", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "super", "(", "DataParallelWithCallback", ",", "self", ")", ".", "replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.execute_replication_callbacks": [[27, 45], ["len", "enumerate", "list", "replicate.CallbackContext", "enumerate", "master_copy.modules", "range", "module.modules", "hasattr", "m.__data_parallel_replicate__"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__"], ["", "def", "execute_replication_callbacks", "(", "modules", ")", ":", "\n", "    ", "\"\"\"\n    Execute an replication callback `__data_parallel_replicate__` on each module created by original replication.\n    The callback will be invoked with arguments `__data_parallel_replicate__(ctx, copy_id)`\n    Note that, as all modules are isomorphism, we assign each sub-module with a context\n    (shared among multiple copies of this module on different devices).\n    Through this context, different copies can share some information.\n    We guarantee that the callback on the master copy (the first copy) will be called ahead of calling the callback\n    of any slave copies.\n    \"\"\"", "\n", "master_copy", "=", "modules", "[", "0", "]", "\n", "nr_modules", "=", "len", "(", "list", "(", "master_copy", ".", "modules", "(", ")", ")", ")", "\n", "ctxs", "=", "[", "CallbackContext", "(", ")", "for", "_", "in", "range", "(", "nr_modules", ")", "]", "\n", "\n", "for", "i", ",", "module", "in", "enumerate", "(", "modules", ")", ":", "\n", "        ", "for", "j", ",", "m", "in", "enumerate", "(", "module", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'__data_parallel_replicate__'", ")", ":", "\n", "                ", "m", ".", "__data_parallel_replicate__", "(", "ctxs", "[", "j", "]", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.patch_replication_callback": [[65, 89], ["isinstance", "functools.wraps", "old_replicate", "replicate.execute_replication_callbacks"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.replicate.execute_replication_callbacks"], ["", "", "def", "patch_replication_callback", "(", "data_parallel", ")", ":", "\n", "    ", "\"\"\"\n    Monkey-patch an existing `DataParallel` object. Add the replication callback.\n    Useful when you have customized `DataParallel` implementation.\n    Examples:\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallel(sync_bn, device_ids=[0, 1])\n        > patch_replication_callback(sync_bn)\n        # this is equivalent to\n        > sync_bn = SynchronizedBatchNorm1d(10, eps=1e-5, affine=False)\n        > sync_bn = DataParallelWithCallback(sync_bn, device_ids=[0, 1])\n    \"\"\"", "\n", "\n", "assert", "isinstance", "(", "data_parallel", ",", "DataParallel", ")", "\n", "\n", "old_replicate", "=", "data_parallel", ".", "replicate", "\n", "\n", "@", "functools", ".", "wraps", "(", "old_replicate", ")", "\n", "def", "new_replicate", "(", "module", ",", "device_ids", ")", ":", "\n", "        ", "modules", "=", "old_replicate", "(", "module", ",", "device_ids", ")", "\n", "execute_replication_callbacks", "(", "modules", ")", "\n", "return", "modules", "\n", "\n", "", "data_parallel", ".", "replicate", "=", "new_replicate", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.__init__": [[21, 25], ["threading.Lock", "threading.Condition"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_result", "=", "None", "\n", "self", ".", "_lock", "=", "threading", ".", "Lock", "(", ")", "\n", "self", ".", "_cond", "=", "threading", ".", "Condition", "(", "self", ".", "_lock", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.put": [[26, 31], ["comm.FutureResult._cond.notify"], "methods", ["None"], ["", "def", "put", "(", "self", ",", "result", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "assert", "self", ".", "_result", "is", "None", ",", "'Previous result has\\'t been fetched.'", "\n", "self", ".", "_result", "=", "result", "\n", "self", ".", "_cond", ".", "notify", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.get": [[32, 40], ["comm.FutureResult._cond.wait"], "methods", ["None"], ["", "", "def", "get", "(", "self", ")", ":", "\n", "        ", "with", "self", ".", "_lock", ":", "\n", "            ", "if", "self", ".", "_result", "is", "None", ":", "\n", "                ", "self", ".", "_cond", ".", "wait", "(", ")", "\n", "\n", "", "res", "=", "self", ".", "_result", "\n", "self", ".", "_result", "=", "None", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SlavePipe.run_slave": [[49, 54], ["comm.SlavePipe.queue.put", "comm.SlavePipe.result.get", "comm.SlavePipe.queue.put"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.put"], ["def", "run_slave", "(", "self", ",", "msg", ")", ":", "\n", "        ", "self", ".", "queue", ".", "put", "(", "(", "self", ".", "identifier", ",", "msg", ")", ")", "\n", "ret", "=", "self", ".", "result", ".", "get", "(", ")", "\n", "self", ".", "queue", ".", "put", "(", "True", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.__init__": [[66, 75], ["queue.Queue", "collections.OrderedDict"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "master_callback", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            master_callback: a callback to be invoked after having collected messages from slave devices.\n        \"\"\"", "\n", "self", ".", "_master_callback", "=", "master_callback", "\n", "self", ".", "_queue", "=", "queue", ".", "Queue", "(", ")", "\n", "self", ".", "_registry", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "self", ".", "_activated", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.__getstate__": [[76, 78], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "{", "'master_callback'", ":", "self", ".", "_master_callback", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.__setstate__": [[79, 81], ["comm.SyncMaster.__init__"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__init__", "(", "state", "[", "'master_callback'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.register_slave": [[82, 96], ["comm.FutureResult", "_MasterRegistry", "comm.SlavePipe", "comm.SyncMaster._queue.empty", "comm.SyncMaster._registry.clear"], "methods", ["None"], ["", "def", "register_slave", "(", "self", ",", "identifier", ")", ":", "\n", "        ", "\"\"\"\n        Register an slave device.\n        Args:\n            identifier: an identifier, usually is the device id.\n        Returns: a `SlavePipe` object which can be used to communicate with the master device.\n        \"\"\"", "\n", "if", "self", ".", "_activated", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "empty", "(", ")", ",", "'Queue is not clean before next initialization.'", "\n", "self", ".", "_activated", "=", "False", "\n", "self", ".", "_registry", ".", "clear", "(", ")", "\n", "", "future", "=", "FutureResult", "(", ")", "\n", "self", ".", "_registry", "[", "identifier", "]", "=", "_MasterRegistry", "(", "future", ")", "\n", "return", "SlavePipe", "(", "identifier", ",", "self", ".", "_queue", ",", "future", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.run_master": [[97, 126], ["range", "comm.SyncMaster._master_callback", "range", "intermediates.append", "comm.SyncMaster._registry[].result.put", "comm.SyncMaster._queue.get", "comm.SyncMaster._queue.get"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.put", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.get", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.FutureResult.get"], ["", "def", "run_master", "(", "self", ",", "master_msg", ")", ":", "\n", "        ", "\"\"\"\n        Main entry for the master device in each forward pass.\n        The messages were first collected from each devices (including the master device), and then\n        an callback will be invoked to compute the message to be sent back to each devices\n        (including the master device).\n        Args:\n            master_msg: the message that the master want to send to itself. This will be placed as the first\n            message when calling `master_callback`. For detailed usage, see `_SynchronizedBatchNorm` for an example.\n        Returns: the message to be sent back to the master device.\n        \"\"\"", "\n", "self", ".", "_activated", "=", "True", "\n", "\n", "intermediates", "=", "[", "(", "0", ",", "master_msg", ")", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "intermediates", ".", "append", "(", "self", ".", "_queue", ".", "get", "(", ")", ")", "\n", "\n", "", "results", "=", "self", ".", "_master_callback", "(", "intermediates", ")", "\n", "assert", "results", "[", "0", "]", "[", "0", "]", "==", "0", ",", "'The first result should belongs to the master.'", "\n", "\n", "for", "i", ",", "res", "in", "results", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "continue", "\n", "", "self", ".", "_registry", "[", "i", "]", ".", "result", ".", "put", "(", "res", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nr_slaves", ")", ":", "\n", "            ", "assert", "self", ".", "_queue", ".", "get", "(", ")", "is", "True", "\n", "\n", "", "return", "results", "[", "0", "]", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.nr_slaves": [[127, 130], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "nr_slaves", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_registry", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.unittest.TorchTestCase.assertTensorClose": [[24, 29], ["unittest.TorchTestCase.assertTrue", "unittest.as_numpy", "unittest.as_numpy", "numpy.allclose", "numpy.abs().max", "numpy.abs().max", "numpy.abs", "numpy.abs", "numpy.fmax"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.unittest.as_numpy", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.unittest.as_numpy"], ["    ", "def", "assertTensorClose", "(", "self", ",", "a", ",", "b", ",", "atol", "=", "1e-3", ",", "rtol", "=", "1e-3", ")", ":", "\n", "        ", "npa", ",", "npb", "=", "as_numpy", "(", "a", ")", ",", "as_numpy", "(", "b", ")", "\n", "self", ".", "assertTrue", "(", "\n", "np", ".", "allclose", "(", "npa", ",", "npb", ",", "atol", "=", "atol", ")", ",", "\n", "'Tensor close check failed\\n{}\\n{}\\nadiff={}, rdiff={}'", ".", "format", "(", "a", ",", "b", ",", "np", ".", "abs", "(", "npa", "-", "npb", ")", ".", "max", "(", ")", ",", "np", ".", "abs", "(", "(", "npa", "-", "npb", ")", "/", "np", ".", "fmax", "(", "npa", ",", "1e-5", ")", ")", ".", "max", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.unittest.as_numpy": [[17, 21], ["isinstance", "v.cpu().numpy", "v.cpu"], "function", ["None"], ["def", "as_numpy", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Variable", ")", ":", "\n", "        ", "v", "=", "v", ".", "data", "\n", "", "return", "v", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__init__": [[39, 47], ["torch.nn.modules.batchnorm._BatchNorm.__init__", "comm.SyncMaster"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_features", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.1", ",", "affine", "=", "True", ")", ":", "\n", "        ", "super", "(", "_SynchronizedBatchNorm", ",", "self", ")", ".", "__init__", "(", "num_features", ",", "eps", "=", "eps", ",", "momentum", "=", "momentum", ",", "affine", "=", "affine", ")", "\n", "\n", "self", ".", "_sync_master", "=", "SyncMaster", "(", "self", ".", "_data_parallel_master", ")", "\n", "\n", "self", ".", "_is_parallel", "=", "False", "\n", "self", ".", "_parallel_id", "=", "None", "\n", "self", ".", "_slave_pipe", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm.forward": [[48, 79], ["input.view.view.size", "input.view.view.view", "batchnorm._sum_ft", "batchnorm._sum_ft", "output.view", "torch.batch_norm", "torch.batch_norm", "input.view.view.size", "input.view.view.size", "input.view.view.size", "batchnorm._SynchronizedBatchNorm._sync_master.run_master", "batchnorm._SynchronizedBatchNorm._slave_pipe.run_slave", "_ChildMessage", "_ChildMessage", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft", "batchnorm._unsqueeze_ft"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._sum_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.run_master", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SlavePipe.run_slave", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "# If it is not parallel computation or is in evaluation mode, use PyTorch's implementation.", "\n", "        ", "if", "not", "(", "self", ".", "_is_parallel", "and", "self", ".", "training", ")", ":", "\n", "            ", "return", "F", ".", "batch_norm", "(", "\n", "input", ",", "self", ".", "running_mean", ",", "self", ".", "running_var", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "\n", "self", ".", "training", ",", "self", ".", "momentum", ",", "self", ".", "eps", ")", "\n", "\n", "# Resize the input to (B, C, -1).", "\n", "", "input_shape", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "num_features", ",", "-", "1", ")", "\n", "\n", "# Compute the sum and square-sum.", "\n", "sum_size", "=", "input", ".", "size", "(", "0", ")", "*", "input", ".", "size", "(", "2", ")", "\n", "input_sum", "=", "_sum_ft", "(", "input", ")", "\n", "input_ssum", "=", "_sum_ft", "(", "input", "**", "2", ")", "\n", "\n", "# Reduce-and-broadcast the statistics.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_sync_master", ".", "run_master", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "mean", ",", "inv_std", "=", "self", ".", "_slave_pipe", ".", "run_slave", "(", "_ChildMessage", "(", "input_sum", ",", "input_ssum", ",", "sum_size", ")", ")", "\n", "\n", "# Compute the output.", "\n", "", "if", "self", ".", "affine", ":", "\n", "# MJY:: Fuse the multiplication for speed.", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", "*", "self", ".", "weight", ")", "+", "_unsqueeze_ft", "(", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "(", "input", "-", "_unsqueeze_ft", "(", "mean", ")", ")", "*", "_unsqueeze_ft", "(", "inv_std", ")", "\n", "\n", "# Reshape it.", "\n", "", "return", "output", ".", "view", "(", "input_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm.__data_parallel_replicate__": [[80, 89], ["ctx.sync_master.register_slave"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.comm.SyncMaster.register_slave"], ["", "def", "__data_parallel_replicate__", "(", "self", ",", "ctx", ",", "copy_id", ")", ":", "\n", "        ", "self", ".", "_is_parallel", "=", "True", "\n", "self", ".", "_parallel_id", "=", "copy_id", "\n", "\n", "# parallel_id == 0 means master device.", "\n", "if", "self", ".", "_parallel_id", "==", "0", ":", "\n", "            ", "ctx", ".", "sync_master", "=", "self", ".", "_sync_master", "\n", "", "else", ":", "\n", "            ", "self", ".", "_slave_pipe", "=", "ctx", ".", "sync_master", ".", "register_slave", "(", "copy_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm._data_parallel_master": [[90, 112], ["sorted", "sum", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "torch.nn.parallel._functions.ReduceAddCoalesced.apply", "batchnorm._SynchronizedBatchNorm._compute_mean_std", "torch.nn.parallel._functions.Broadcast.apply", "torch.nn.parallel._functions.Broadcast.apply", "enumerate", "i[].sum.get_device", "outputs.append", "i[].sum.get_device", "_MasterMessage"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std"], ["", "", "def", "_data_parallel_master", "(", "self", ",", "intermediates", ")", ":", "\n", "        ", "\"\"\"Reduce the sum and square-sum, compute the statistics, and broadcast it.\"\"\"", "\n", "\n", "# Always using same \"device order\" makes the ReduceAdd operation faster.", "\n", "# Thanks to:: Tete Xiao (http://tetexiao.com/)", "\n", "intermediates", "=", "sorted", "(", "intermediates", ",", "key", "=", "lambda", "i", ":", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", ")", "\n", "\n", "to_reduce", "=", "[", "i", "[", "1", "]", "[", ":", "2", "]", "for", "i", "in", "intermediates", "]", "\n", "to_reduce", "=", "[", "j", "for", "i", "in", "to_reduce", "for", "j", "in", "i", "]", "# flatten", "\n", "target_gpus", "=", "[", "i", "[", "1", "]", ".", "sum", ".", "get_device", "(", ")", "for", "i", "in", "intermediates", "]", "\n", "\n", "sum_size", "=", "sum", "(", "[", "i", "[", "1", "]", ".", "sum_size", "for", "i", "in", "intermediates", "]", ")", "\n", "sum_", ",", "ssum", "=", "ReduceAddCoalesced", ".", "apply", "(", "target_gpus", "[", "0", "]", ",", "2", ",", "*", "to_reduce", ")", "\n", "mean", ",", "inv_std", "=", "self", ".", "_compute_mean_std", "(", "sum_", ",", "ssum", ",", "sum_size", ")", "\n", "\n", "broadcasted", "=", "Broadcast", ".", "apply", "(", "target_gpus", ",", "mean", ",", "inv_std", ")", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "intermediates", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "(", "rec", "[", "0", "]", ",", "_MasterMessage", "(", "*", "broadcasted", "[", "i", "*", "2", ":", "i", "*", "2", "+", "2", "]", ")", ")", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._SynchronizedBatchNorm._compute_mean_std": [[113, 126], ["bias_var.clamp"], "methods", ["None"], ["", "def", "_compute_mean_std", "(", "self", ",", "sum_", ",", "ssum", ",", "size", ")", ":", "\n", "        ", "\"\"\"Compute the mean and standard-deviation with sum and square-sum. This method\n        also maintains the moving average on the master device.\"\"\"", "\n", "assert", "size", ">", "1", ",", "'BatchNorm computes unbiased standard-deviation, which requires size > 1.'", "\n", "mean", "=", "sum_", "/", "size", "\n", "sumvar", "=", "ssum", "-", "sum_", "*", "mean", "\n", "unbias_var", "=", "sumvar", "/", "(", "size", "-", "1", ")", "\n", "bias_var", "=", "sumvar", "/", "size", "\n", "\n", "self", ".", "running_mean", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_mean", "+", "self", ".", "momentum", "*", "mean", ".", "data", "\n", "self", ".", "running_var", "=", "(", "1", "-", "self", ".", "momentum", ")", "*", "self", ".", "running_var", "+", "self", ".", "momentum", "*", "unbias_var", ".", "data", "\n", "\n", "return", "mean", ",", "bias_var", ".", "clamp", "(", "self", ".", "eps", ")", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm1d._check_input_dim": [[173, 178], ["super()._check_input_dim", "ValueError", "input.dim", "input.dim", "input.dim"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "2", "and", "input", ".", "dim", "(", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 2D or 3D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm1d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm2d._check_input_dim": [[225, 230], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 4D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm2d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim": [[278, 283], ["super()._check_input_dim", "input.dim", "ValueError", "input.dim"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm.SynchronizedBatchNorm3d._check_input_dim"], ["def", "_check_input_dim", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", "!=", "5", ":", "\n", "            ", "raise", "ValueError", "(", "'expected 5D input (got {}D input)'", "\n", ".", "format", "(", "input", ".", "dim", "(", ")", ")", ")", "\n", "", "super", "(", "SynchronizedBatchNorm3d", ",", "self", ")", ".", "_check_input_dim", "(", "input", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._sum_ft": [[24, 27], ["tensor.sum().sum", "tensor.sum"], "function", ["None"], ["def", "_sum_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"sum over the first and last dimention\"\"\"", "\n", "return", "tensor", ".", "sum", "(", "dim", "=", "0", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.sync_batchnorm.batchnorm._unsqueeze_ft": [[29, 32], ["tensor.unsqueeze().unsqueeze", "tensor.unsqueeze"], "function", ["None"], ["", "def", "_unsqueeze_ft", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"add new dementions at the front and the tail\"\"\"", "\n", "return", "tensor", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.InvertedResidual.__init__": [[26, 59], ["torch.Module.__init__", "round", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.ReLU6", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inp", ",", "oup", ",", "stride", ",", "dilation", ",", "expand_ratio", ",", "BatchNorm", ")", ":", "\n", "        ", "super", "(", "InvertedResidual", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "stride", "=", "stride", "\n", "assert", "stride", "in", "[", "1", ",", "2", "]", "\n", "\n", "hidden_dim", "=", "round", "(", "inp", "*", "expand_ratio", ")", "\n", "self", ".", "use_res_connect", "=", "self", ".", "stride", "==", "1", "and", "inp", "==", "oup", "\n", "self", ".", "kernel_size", "=", "3", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n", "if", "expand_ratio", "==", "1", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "0", ",", "dilation", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Sequential", "(", "\n", "# pw", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "hidden_dim", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# dw", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "hidden_dim", ",", "3", ",", "stride", ",", "0", ",", "dilation", ",", "groups", "=", "hidden_dim", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "hidden_dim", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", ",", "\n", "# pw-linear", "\n", "nn", ".", "Conv2d", "(", "hidden_dim", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.InvertedResidual.forward": [[61, 68], ["mobilenet.fixed_padding", "mobilenet.InvertedResidual.conv", "mobilenet.InvertedResidual.conv"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.fixed_padding"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_pad", "=", "fixed_padding", "(", "x", ",", "self", ".", "kernel_size", ",", "dilation", "=", "self", ".", "dilation", ")", "\n", "if", "self", ".", "use_res_connect", ":", "\n", "            ", "x", "=", "x", "+", "self", ".", "conv", "(", "x_pad", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "conv", "(", "x_pad", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.MobileNetV2.__init__": [[71, 117], ["torch.Module.__init__", "int", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mobilenet.MobileNetV2._initialize_weights", "mobilenet.conv_bn", "int", "range", "mobilenet.MobileNetV2._load_pretrained_model", "mobilenet.MobileNetV2.features.append", "mobilenet.MobileNetV2.features.append", "block", "block"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.MobileNetV2._initialize_weights", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.conv_bn", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._load_pretrained_model"], ["    ", "def", "__init__", "(", "self", ",", "output_stride", "=", "8", ",", "BatchNorm", "=", "None", ",", "width_mult", "=", "1.", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "block", "=", "InvertedResidual", "\n", "input_channel", "=", "32", "\n", "current_stride", "=", "1", "\n", "rate", "=", "1", "\n", "interverted_residual_setting", "=", "[", "\n", "# t, c, n, s", "\n", "[", "1", ",", "16", ",", "1", ",", "1", "]", ",", "\n", "[", "6", ",", "24", ",", "2", ",", "2", "]", ",", "\n", "[", "6", ",", "32", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "64", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "96", ",", "3", ",", "1", "]", ",", "\n", "[", "6", ",", "160", ",", "3", ",", "2", "]", ",", "\n", "[", "6", ",", "320", ",", "1", ",", "1", "]", ",", "\n", "]", "\n", "\n", "# building first layer", "\n", "input_channel", "=", "int", "(", "input_channel", "*", "width_mult", ")", "\n", "self", ".", "features", "=", "[", "conv_bn", "(", "3", ",", "input_channel", ",", "2", ",", "BatchNorm", ")", "]", "\n", "current_stride", "*=", "2", "\n", "# building inverted residual blocks", "\n", "for", "t", ",", "c", ",", "n", ",", "s", "in", "interverted_residual_setting", ":", "\n", "            ", "if", "current_stride", "==", "output_stride", ":", "\n", "                ", "stride", "=", "1", "\n", "dilation", "=", "rate", "\n", "rate", "*=", "s", "\n", "", "else", ":", "\n", "                ", "stride", "=", "s", "\n", "dilation", "=", "1", "\n", "current_stride", "*=", "s", "\n", "", "output_channel", "=", "int", "(", "c", "*", "width_mult", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "stride", ",", "dilation", ",", "t", ",", "BatchNorm", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "features", ".", "append", "(", "block", "(", "input_channel", ",", "output_channel", ",", "1", ",", "dilation", ",", "t", ",", "BatchNorm", ")", ")", "\n", "", "input_channel", "=", "output_channel", "\n", "", "", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "features", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n", "", "self", ".", "low_level_features", "=", "self", ".", "features", "[", "0", ":", "4", "]", "\n", "self", ".", "high_level_features", "=", "self", ".", "features", "[", "4", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.MobileNetV2.forward": [[118, 122], ["mobilenet.MobileNetV2.low_level_features", "mobilenet.MobileNetV2.high_level_features"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "low_level_feat", "=", "self", ".", "low_level_features", "(", "x", ")", "\n", "x", "=", "self", ".", "high_level_features", "(", "low_level_feat", ")", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.MobileNetV2._load_pretrained_model": [[123, 132], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "mobilenet.MobileNetV2.state_dict", "torch.load_url.items", "mobilenet.MobileNetV2.update", "mobilenet.MobileNetV2.load_state_dict"], "methods", ["None"], ["", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'http://jeff95.me/models/mobilenet_v2-6a65762b.pth'", ")", "\n", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state_dict", ":", "\n", "                ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.MobileNetV2._initialize_weights": [[133, 145], ["mobilenet.MobileNetV2.modules", "isinstance", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "# n = m.kernel_size[0] * m.kernel_size[1] * m.out_channels", "\n", "# m.weight.data.normal_(0, math.sqrt(2. / n))", "\n", "                ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.conv_bn": [[8, 13], ["torch.Sequential", "torch.Conv2d", "BatchNorm", "torch.ReLU6"], "function", ["None"], ["def", "conv_bn", "(", "inp", ",", "oup", ",", "stride", ",", "BatchNorm", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU6", "(", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.mobilenet.fixed_padding": [[16, 23], ["torch.pad"], "function", ["None"], ["", "def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "padded_inputs", "=", "F", ".", "pad", "(", "inputs", ",", "(", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", ")", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.Bottleneck.__init__": [[9, 22], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "downsample", "=", "None", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "dilation", "=", "dilation", ",", "padding", "=", "dilation", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "dilation", "=", "dilation", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.Bottleneck.forward": [[23, 44], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet.__init__": [[47, 76], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_MG_unit", "resnet.ResNet._init_weight", "resnet.ResNet._load_pretrained_model"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet._make_MG_unit", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._load_pretrained_model"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "blocks", "=", "[", "1", ",", "2", ",", "4", "]", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "1", ",", "1", ",", "2", "]", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "strides", "=", "[", "1", ",", "2", ",", "1", ",", "1", "]", "\n", "dilations", "=", "[", "1", ",", "1", ",", "2", ",", "4", "]", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "# Modules", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "stride", "=", "strides", "[", "0", "]", ",", "dilation", "=", "dilations", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "strides", "[", "1", "]", ",", "dilation", "=", "dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "strides", "[", "2", "]", ",", "dilation", "=", "dilations", "[", "2", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_MG_unit", "(", "block", ",", "512", ",", "blocks", "=", "blocks", ",", "stride", "=", "strides", "[", "3", "]", ",", "dilation", "=", "dilations", "[", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "# self.layer4 = self._make_layer(block, 512, layers[3], stride=strides[3], dilation=dilations[3], BatchNorm=BatchNorm)", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet._make_layer": [[77, 93], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", ",", "downsample", ",", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "dilation", "=", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet._make_MG_unit": [[94, 112], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "len", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "def", "_make_MG_unit", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "dilation", "=", "blocks", "[", "0", "]", "*", "dilation", ",", "\n", "downsample", "=", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "blocks", ")", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "blocks", "[", "i", "]", "*", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet.forward": [[113, 125], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "input", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet._init_weight": [[126, 137], ["resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet._load_pretrained_model": [[138, 147], ["torch.load_url", "torch.load_url", "resnet.ResNet.state_dict", "torch.load_url.items", "resnet.ResNet.update", "resnet.ResNet.load_state_dict"], "methods", ["None"], ["", "", "", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'https://download.pytorch.org/models/resnet101-5d3b4d8f.pth'", ")", "\n", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state_dict", ":", "\n", "                ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet101": [[148, 155], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "ResNet101", "(", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "output_stride", ",", "BatchNorm", ",", "pretrained", "=", "pretrained", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.BasicBlock.__init__": [[32, 45], ["torch.Module.__init__", "drn.conv3x3", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.conv3x3", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.conv3x3", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ",", "\n", "padding", "=", "dilation", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "residual", "=", "residual", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.BasicBlock.forward": [[46, 63], ["drn.BasicBlock.conv1", "drn.BasicBlock.bn1", "drn.BasicBlock.relu", "drn.BasicBlock.conv2", "drn.BasicBlock.bn2", "drn.BasicBlock.relu", "drn.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "out", "+=", "residual", "\n", "", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.Bottleneck.__init__": [[68, 82], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", "[", "1", "]", ",", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", "[", "1", "]", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.Bottleneck.forward": [[83, 104], ["drn.Bottleneck.conv1", "drn.Bottleneck.bn1", "drn.Bottleneck.relu", "drn.Bottleneck.conv2", "drn.Bottleneck.bn2", "drn.Bottleneck.relu", "drn.Bottleneck.conv3", "drn.Bottleneck.bn3", "drn.Bottleneck.relu", "drn.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN.__init__": [[108, 162], ["torch.Module.__init__", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._init_weight", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_layer", "drn.DRN._make_layer", "drn.DRN._make_layer", "torch.Sequential", "torch.Sequential", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers", "drn.DRN._make_layer", "drn.DRN._make_layer", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "drn.DRN._make_conv_layers", "drn.DRN._make_conv_layers"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_conv_layers", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_conv_layers"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "arch", "=", "'D'", ",", "\n", "channels", "=", "(", "16", ",", "32", ",", "64", ",", "128", ",", "256", ",", "512", ",", "512", ",", "512", ")", ",", "\n", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "DRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "channels", "[", "0", "]", "\n", "self", ".", "out_dim", "=", "channels", "[", "-", "1", "]", "\n", "self", ".", "arch", "=", "arch", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "\n", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "channels", "[", "0", "]", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "BasicBlock", ",", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer0", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "channels", "[", "0", "]", ",", "kernel_size", "=", "7", ",", "stride", "=", "1", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "channels", "[", "0", "]", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", ")", "\n", "\n", "self", ".", "layer1", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "0", "]", ",", "layers", "[", "0", "]", ",", "stride", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_conv_layers", "(", "\n", "channels", "[", "1", "]", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "2", "]", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "3", "]", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer5", "=", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "4", "]", ",", "layers", "[", "4", "]", ",", "\n", "dilation", "=", "2", ",", "new_level", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer6", "=", "None", "if", "layers", "[", "5", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "block", ",", "channels", "[", "5", "]", ",", "layers", "[", "5", "]", ",", "dilation", "=", "4", ",", "\n", "new_level", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "if", "arch", "==", "'C'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_layer", "(", "BasicBlock", ",", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "False", ",", "residual", "=", "False", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "", "elif", "arch", "==", "'D'", ":", "\n", "            ", "self", ".", "layer7", "=", "None", "if", "layers", "[", "6", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "6", "]", ",", "layers", "[", "6", "]", ",", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer8", "=", "None", "if", "layers", "[", "7", "]", "==", "0", "else", "self", ".", "_make_conv_layers", "(", "channels", "[", "7", "]", ",", "layers", "[", "7", "]", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._init_weight": [[163, 174], ["drn.DRN.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_layer": [[176, 199], ["list", "list.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "list.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "\n", "new_level", "=", "True", ",", "residual", "=", "True", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "assert", "dilation", "==", "1", "or", "dilation", "%", "2", "==", "0", "\n", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "list", "(", ")", "\n", "layers", ".", "append", "(", "block", "(", "\n", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "dilation", "=", "(", "1", ",", "1", ")", "if", "dilation", "==", "1", "else", "(", "\n", "dilation", "//", "2", "if", "new_level", "else", "dilation", ",", "dilation", ")", ",", "\n", "residual", "=", "residual", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "residual", "=", "residual", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ")", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN._make_conv_layers": [[200, 211], ["range", "torch.Sequential", "torch.Sequential", "modules.extend", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU"], "methods", ["None"], ["", "def", "_make_conv_layers", "(", "self", ",", "channels", ",", "convs", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "modules", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "convs", ")", ":", "\n", "            ", "modules", ".", "extend", "(", "[", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "channels", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", "if", "i", "==", "0", "else", "1", ",", "\n", "padding", "=", "dilation", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", ",", "\n", "BatchNorm", "(", "channels", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "channels", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN.forward": [[212, 239], ["drn.DRN.layer1", "drn.DRN.layer2", "drn.DRN.layer3", "drn.DRN.layer4", "drn.DRN.layer5", "drn.DRN.conv1", "drn.DRN.bn1", "drn.DRN.relu", "drn.DRN.layer6", "drn.DRN.layer7", "drn.DRN.layer8", "drn.DRN.layer0"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "arch", "==", "'C'", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "elif", "self", ".", "arch", "==", "'D'", ":", "\n", "            ", "x", "=", "self", ".", "layer0", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "\n", "if", "self", ".", "layer6", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer6", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer7", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer7", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer8", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer8", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A.__init__": [[243, 260], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._make_layer", "drn.DRN_A._init_weight"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "DRN_A", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_dim", "=", "512", "*", "block", ".", "expansion", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ",", "\n", "dilation", "=", "4", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._init_weight": [[261, 272], ["drn.DRN_A.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A._make_layer": [[273, 290], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BatchNorm", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "dilation", "=", "(", "dilation", ",", "dilation", ",", ")", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.DRN_A.forward": [[291, 303], ["drn.DRN_A.conv1", "drn.DRN_A.bn1", "drn.DRN_A.relu", "drn.DRN_A.maxpool", "drn.DRN_A.layer1", "drn.DRN_A.layer2", "drn.DRN_A.layer3", "drn.DRN_A.layer4"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.conv3x3": [[24, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_a_50": [[304, 309], ["drn.DRN_A", "DRN_A.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "def", "drn_a_50", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN_A", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_c_26": [[311, 319], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_26", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-26'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_c_42": [[321, 329], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_42", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-42'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_c_58": [[331, 339], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_c_58", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'C'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-c-58'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_22": [[341, 349], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_22", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-22'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_24": [[351, 359], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_24", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-24'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_38": [[361, 369], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_38", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-38'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_40": [[371, 379], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_40", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "BasicBlock", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "2", ",", "2", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-40'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_54": [[381, 389], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_54", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "6", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-54'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_105": [[391, 399], ["drn.DRN", "torch.load_url", "DRN.load_state_dict"], "function", ["None"], ["", "def", "drn_d_105", "(", "BatchNorm", ",", "pretrained", "=", "True", ")", ":", "\n", "    ", "model", "=", "DRN", "(", "Bottleneck", ",", "[", "1", ",", "1", ",", "3", ",", "4", ",", "23", ",", "3", ",", "1", ",", "1", "]", ",", "arch", "=", "'D'", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'drn-d-105'", "]", ")", "\n", "del", "pretrained", "[", "'fc.weight'", "]", "\n", "del", "pretrained", "[", "'fc.bias'", "]", "\n", "model", ".", "load_state_dict", "(", "pretrained", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.SeparableConv2d.__init__": [[18, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "bias", "=", "False", ",", "BatchNorm", "=", "None", ")", ":", "\n", "        ", "super", "(", "SeparableConv2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "inplanes", ",", "kernel_size", ",", "stride", ",", "0", ",", "dilation", ",", "\n", "groups", "=", "inplanes", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "BatchNorm", "(", "inplanes", ")", "\n", "self", ".", "pointwise", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "1", ",", "0", ",", "1", ",", "1", ",", "bias", "=", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.SeparableConv2d.forward": [[26, 32], ["xception.fixed_padding", "xception.SeparableConv2d.conv1", "xception.SeparableConv2d.bn", "xception.SeparableConv2d.pointwise"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.fixed_padding"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "fixed_padding", "(", "x", ",", "self", ".", "conv1", ".", "kernel_size", "[", "0", "]", ",", "dilation", "=", "self", ".", "conv1", ".", "dilation", "[", "0", "]", ")", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "x", "=", "self", ".", "pointwise", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.Block.__init__": [[35, 79], ["torch.Module.__init__", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "rep.append", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "reps", ",", "stride", "=", "1", ",", "dilation", "=", "1", ",", "BatchNorm", "=", "None", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "planes", "!=", "inplanes", "or", "stride", "!=", "1", ":", "\n", "            ", "self", ".", "skip", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "self", ".", "skipbn", "=", "BatchNorm", "(", "planes", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "skip", "=", "None", "\n", "\n", "", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "rep", "=", "[", "]", "\n", "\n", "filters", "=", "inplanes", "\n", "if", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "filters", "=", "planes", "\n", "\n", "", "for", "i", "in", "range", "(", "reps", "-", "1", ")", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "filters", ",", "filters", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "filters", ")", ")", "\n", "\n", "", "if", "not", "grow_first", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "inplanes", ",", "planes", ",", "3", ",", "1", ",", "dilation", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "stride", "!=", "1", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "2", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "stride", "==", "1", "and", "is_last", ":", "\n", "            ", "rep", ".", "append", "(", "self", ".", "relu", ")", "\n", "rep", ".", "append", "(", "SeparableConv2d", "(", "planes", ",", "planes", ",", "3", ",", "1", ",", "BatchNorm", "=", "BatchNorm", ")", ")", "\n", "rep", ".", "append", "(", "BatchNorm", "(", "planes", ")", ")", "\n", "\n", "", "if", "not", "start_with_relu", ":", "\n", "            ", "rep", "=", "rep", "[", "1", ":", "]", "\n", "\n", "", "self", ".", "rep", "=", "nn", ".", "Sequential", "(", "*", "rep", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.Block.forward": [[80, 92], ["xception.Block.rep", "xception.Block.skip", "xception.Block.skipbn"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "x", "=", "self", ".", "rep", "(", "inp", ")", "\n", "\n", "if", "self", ".", "skip", "is", "not", "None", ":", "\n", "            ", "skip", "=", "self", ".", "skip", "(", "inp", ")", "\n", "skip", "=", "self", ".", "skipbn", "(", "skip", ")", "\n", "", "else", ":", "\n", "            ", "skip", "=", "inp", "\n", "\n", "", "x", "=", "x", "+", "skip", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__": [[98, 181], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "BatchNorm", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.Block", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.SeparableConv2d", "BatchNorm", "xception.AlignedXception._init_weight", "xception.AlignedXception._load_pretrained_model"], "methods", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.__init__", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._load_pretrained_model"], ["def", "__init__", "(", "self", ",", "output_stride", ",", "BatchNorm", ",", "\n", "pretrained", "=", "True", ")", ":", "\n", "        ", "super", "(", "AlignedXception", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "output_stride", "==", "16", ":", "\n", "            ", "entry_block3_stride", "=", "2", "\n", "middle_block_dilation", "=", "1", "\n", "exit_block_dilations", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "output_stride", "==", "8", ":", "\n", "            ", "entry_block3_stride", "=", "1", "\n", "middle_block_dilation", "=", "2", "\n", "exit_block_dilations", "=", "(", "2", ",", "4", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "\n", "# Entry flow", "\n", "", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "32", ",", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BatchNorm", "(", "32", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BatchNorm", "(", "64", ")", "\n", "\n", "self", ".", "block1", "=", "Block", "(", "64", ",", "128", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "False", ")", "\n", "self", ".", "block2", "=", "Block", "(", "128", ",", "256", ",", "reps", "=", "2", ",", "stride", "=", "2", ",", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "False", ",", "\n", "grow_first", "=", "True", ")", "\n", "self", ".", "block3", "=", "Block", "(", "256", ",", "728", ",", "reps", "=", "2", ",", "stride", "=", "entry_block3_stride", ",", "BatchNorm", "=", "BatchNorm", ",", "\n", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ",", "is_last", "=", "True", ")", "\n", "\n", "# Middle flow", "\n", "self", ".", "block4", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block5", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block6", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block7", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block8", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block9", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block10", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block11", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block12", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block13", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block14", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block15", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block16", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block17", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block18", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "self", ".", "block19", "=", "Block", "(", "728", ",", "728", ",", "reps", "=", "3", ",", "stride", "=", "1", ",", "dilation", "=", "middle_block_dilation", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "True", ")", "\n", "\n", "# Exit flow", "\n", "self", ".", "block20", "=", "Block", "(", "728", ",", "1024", ",", "reps", "=", "2", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "0", "]", ",", "\n", "BatchNorm", "=", "BatchNorm", ",", "start_with_relu", "=", "True", ",", "grow_first", "=", "False", ",", "is_last", "=", "True", ")", "\n", "\n", "self", ".", "conv3", "=", "SeparableConv2d", "(", "1024", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn3", "=", "BatchNorm", "(", "1536", ")", "\n", "\n", "self", ".", "conv4", "=", "SeparableConv2d", "(", "1536", ",", "1536", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn4", "=", "BatchNorm", "(", "1536", ")", "\n", "\n", "self", ".", "conv5", "=", "SeparableConv2d", "(", "1536", ",", "2048", ",", "3", ",", "stride", "=", "1", ",", "dilation", "=", "exit_block_dilations", "[", "1", "]", ",", "BatchNorm", "=", "BatchNorm", ")", "\n", "self", ".", "bn5", "=", "BatchNorm", "(", "2048", ")", "\n", "\n", "# Init weights", "\n", "self", ".", "_init_weight", "(", ")", "\n", "\n", "# Load pretrained model", "\n", "if", "pretrained", ":", "\n", "            ", "self", ".", "_load_pretrained_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception.forward": [[182, 233], ["xception.AlignedXception.conv1", "xception.AlignedXception.bn1", "xception.AlignedXception.relu", "xception.AlignedXception.conv2", "xception.AlignedXception.bn2", "xception.AlignedXception.relu", "xception.AlignedXception.block1", "xception.AlignedXception.relu", "xception.AlignedXception.block2", "xception.AlignedXception.block3", "xception.AlignedXception.block4", "xception.AlignedXception.block5", "xception.AlignedXception.block6", "xception.AlignedXception.block7", "xception.AlignedXception.block8", "xception.AlignedXception.block9", "xception.AlignedXception.block10", "xception.AlignedXception.block11", "xception.AlignedXception.block12", "xception.AlignedXception.block13", "xception.AlignedXception.block14", "xception.AlignedXception.block15", "xception.AlignedXception.block16", "xception.AlignedXception.block17", "xception.AlignedXception.block18", "xception.AlignedXception.block19", "xception.AlignedXception.block20", "xception.AlignedXception.relu", "xception.AlignedXception.conv3", "xception.AlignedXception.bn3", "xception.AlignedXception.relu", "xception.AlignedXception.conv4", "xception.AlignedXception.bn4", "xception.AlignedXception.relu", "xception.AlignedXception.conv5", "xception.AlignedXception.bn5", "xception.AlignedXception.relu"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# Entry flow", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "bn2", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "block1", "(", "x", ")", "\n", "# add relu here", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "low_level_feat", "=", "x", "\n", "x", "=", "self", ".", "block2", "(", "x", ")", "\n", "x", "=", "self", ".", "block3", "(", "x", ")", "\n", "\n", "# Middle flow", "\n", "x", "=", "self", ".", "block4", "(", "x", ")", "\n", "x", "=", "self", ".", "block5", "(", "x", ")", "\n", "x", "=", "self", ".", "block6", "(", "x", ")", "\n", "x", "=", "self", ".", "block7", "(", "x", ")", "\n", "x", "=", "self", ".", "block8", "(", "x", ")", "\n", "x", "=", "self", ".", "block9", "(", "x", ")", "\n", "x", "=", "self", ".", "block10", "(", "x", ")", "\n", "x", "=", "self", ".", "block11", "(", "x", ")", "\n", "x", "=", "self", ".", "block12", "(", "x", ")", "\n", "x", "=", "self", ".", "block13", "(", "x", ")", "\n", "x", "=", "self", ".", "block14", "(", "x", ")", "\n", "x", "=", "self", ".", "block15", "(", "x", ")", "\n", "x", "=", "self", ".", "block16", "(", "x", ")", "\n", "x", "=", "self", ".", "block17", "(", "x", ")", "\n", "x", "=", "self", ".", "block18", "(", "x", ")", "\n", "x", "=", "self", ".", "block19", "(", "x", ")", "\n", "\n", "# Exit flow", "\n", "x", "=", "self", ".", "block20", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "bn3", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "bn4", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "\n", "return", "x", ",", "low_level_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._init_weight": [[234, 245], ["xception.AlignedXception.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_init_weight", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "SynchronizedBatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.AlignedXception._load_pretrained_model": [[247, 279], ["torch.load_url", "torch.load_url", "torch.load_url", "torch.load_url", "xception.AlignedXception.state_dict", "torch.load_url.items", "xception.AlignedXception.update", "xception.AlignedXception.load_state_dict", "k.startswith", "v.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze().unsqueeze", "k.startswith", "k.startswith", "v.unsqueeze().unsqueeze.unsqueeze().unsqueeze.unsqueeze", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.startswith", "k.replace", "k.startswith", "k.replace", "k.replace", "k.replace"], "methods", ["None"], ["", "", "", "def", "_load_pretrained_model", "(", "self", ")", ":", "\n", "        ", "pretrain_dict", "=", "model_zoo", ".", "load_url", "(", "'http://data.lip6.fr/cadene/pretrainedmodels/xception-b5690688.pth'", ")", "\n", "model_dict", "=", "{", "}", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "state_dict", ":", "\n", "                ", "if", "'pointwise'", "in", "k", ":", "\n", "                    ", "v", "=", "v", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "if", "k", ".", "startswith", "(", "'block11'", ")", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block12'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block13'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block14'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block15'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block16'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block17'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block18'", ")", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'block11'", ",", "'block19'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'block12'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'block12'", ",", "'block20'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'bn3'", ")", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "model_dict", "[", "k", ".", "replace", "(", "'bn3'", ",", "'bn4'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'conv4'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'conv4'", ",", "'conv5'", ")", "]", "=", "v", "\n", "", "elif", "k", ".", "startswith", "(", "'bn4'", ")", ":", "\n", "                    ", "model_dict", "[", "k", ".", "replace", "(", "'bn4'", ",", "'bn5'", ")", "]", "=", "v", "\n", "", "else", ":", "\n", "                    ", "model_dict", "[", "k", "]", "=", "v", "\n", "", "", "", "state_dict", ".", "update", "(", "model_dict", ")", "\n", "self", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.xception.fixed_padding": [[8, 15], ["torch.pad"], "function", ["None"], ["def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "dilation", ")", ":", "\n", "    ", "kernel_size_effective", "=", "kernel_size", "+", "(", "kernel_size", "-", "1", ")", "*", "(", "dilation", "-", "1", ")", "\n", "pad_total", "=", "kernel_size_effective", "-", "1", "\n", "pad_beg", "=", "pad_total", "//", "2", "\n", "pad_end", "=", "pad_total", "-", "pad_beg", "\n", "padded_inputs", "=", "F", ".", "pad", "(", "inputs", ",", "(", "pad_beg", ",", "pad_end", ",", "pad_beg", ",", "pad_end", ")", ")", "\n", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.__init__.build_backbone": [[3, 16], ["models.deeplab.modeling.backbone.resnet.ResNet101", "models.deeplab.modeling.backbone.xception.AlignedXception", "models.deeplab.modeling.backbone.drn.drn_d_54", "models.deeplab.modeling.backbone.drn.drn_c_42", "models.deeplab.modeling.backbone.mobilenet.MobileNetV2"], "function", ["home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.resnet.ResNet101", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_d_54", "home.repos.pwc.inspect_result.aatifjiwani_rgb-footprint-extract.backbone.drn.drn_c_42"], ["from", ".", "SpaceNetDataset", "import", "SpaceNetDataset", "\n", "from", ".", "CombinedDataset", "import", "CombinedDataset", "\n", "from", ".", "NumpyDataset", "import", "NumpyDataset", "\n", "import", "os", "\n", "\n", "\n", "def", "build_dataloader", "(", "dataset", ",", "data_root", ",", "boundary_ks", ",", "transforms", ",", "resize", "=", "2048", ",", "split", "=", "2", ")", ":", "\n", "    ", "if", "dataset", "==", "\"urban3d\"", ":", "\n", "        ", "train", "=", "Urban3dDataset", "(", "\n", "os", ".", "path", ".", "join", "(", "data_root", ",", "\"Urban3D/train\"", ")", ",", "\n", "boundary_kernel_size", "=", "boundary_ks", ",", "\n", "transforms", "=", "transforms", ",", "\n", "resize", "=", "resize", ",", "split", "=", "split", "\n", ")", "\n"]]}