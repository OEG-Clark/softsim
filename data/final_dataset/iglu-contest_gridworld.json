{"home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Actions.__init__": [[12, 25], ["gym.Wrapper.__init__", "gym.spaces.Discrete", "len"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ":", "Env", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "action_map", "=", "[", "\n", "# from new idx to old ones", "\n", "0", ",", "# noop", "\n", "1", ",", "2", ",", "3", ",", "4", ",", "\n", "5", ",", "# jump", "\n", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "# hotbar", "\n", "12", ",", "13", ",", "14", ",", "15", ",", "\n", "16", ",", "# break", "\n", "# 17, # place", "\n", "]", "\n", "self", ".", "action_space", "=", "Discrete", "(", "len", "(", "self", ".", "action_map", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Actions.step": [[27, 33], ["wrappers.Actions.env.step"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "# 0 noop; 1 forward; 2 back; 3 left; 4 right; 5 jump; 6-11 hotbar; 12 camera left;", "\n", "# 13 camera right; 14 camera up; 15 camera down; 16 attack; 17 use;", "\n", "# if action >= 6:", "\n", "#     action += 6", "\n", "        ", "return", "self", ".", "env", ".", "step", "(", "self", ".", "action_map", "[", "action", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.debug.__init__": [[36, 42], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "total_reward", "=", "0", "\n", "self", ".", "turn", "=", "None", "\n", "self", ".", "turn_goal", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.debug.step": [[43, 56], ["wrappers.debug.actions.append", "super().step", "print", "os.path.exists", "os.makedirs", "open", "pickle.dump", "uuid.uuid4().hex", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.dump"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "self", ".", "total_reward", "+=", "reward", "\n", "if", "done", ":", "\n", "            ", "import", "pickle", "\n", "if", "self", ".", "total_reward", ">", "(", "18", "-", "(", "self", ".", "turn", "-", "1", ")", "*", "3", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "'wrong_actions'", ")", ":", "\n", "                    ", "os", ".", "makedirs", "(", "'wrong_actions'", ",", "exist_ok", "=", "True", ")", "\n", "", "with", "open", "(", "f'wrong_actions/{uuid4().hex()[:10]}.pkl'", ",", "'wb'", ")", "as", "f", ":", "\n", "                    ", "pickle", ".", "dump", "(", "(", "self", ".", "actions", ",", "self", ".", "total_reward", ",", "self", ".", "turn", ",", "self", ".", "turn_goal", ")", ",", "f", ")", "\n", "", "print", "(", "f'reward of {self.total_reward} at turn {self.turn}'", ")", "\n", "", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.debug.reset": [[57, 64], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "total_reward", "=", "0", "\n", "self", ".", "turn", "=", "self", ".", "unwrapped", ".", "task", ".", "task_start", "\n", "self", ".", "turn_goal", "=", "self", ".", "unwrapped", ".", "task", ".", "task_goal", "\n", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.__init__": [[67, 77], ["gym.Wrapper.__init__", "cv2.VideoWriter_fourcc", "collections.defaultdict"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ":", "Env", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "fourcc", "=", "cv2", ".", "VideoWriter_fourcc", "(", "*", "'mp4v'", ")", "\n", "self", ".", "data", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "actions", "=", "[", "]", "\n", "self", ".", "desc", "=", "''", "\n", "self", ".", "logging", "=", "False", "\n", "self", ".", "turned_off", "=", "True", "\n", "self", ".", "glob_step", "=", "0", "\n", "self", ".", "path", "=", "'episodes'", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.turn_on": [[78, 81], ["None"], "methods", ["None"], ["", "def", "turn_on", "(", "self", ")", ":", "\n", "        ", "self", ".", "turned_off", "=", "False", "\n", "self", ".", "logging", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.set_path": [[82, 84], ["None"], "methods", ["None"], ["", "def", "set_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "path", "=", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.set_desc": [[85, 88], ["None"], "methods", ["None"], ["", "def", "set_desc", "(", "self", ",", "desc", ",", "glob_step", ")", ":", "\n", "        ", "self", ".", "desc", "=", "desc", "\n", "self", ".", "glob_step", "=", "glob_step", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.step": [[89, 122], ["super().step", "wrappers.Logged.data[].append", "wrappers.Logged.data[].append", "wrappers.Logged.data[].append", "wrappers.Logged.actions.append", "wrappers.Logged.data.keys", "numpy.savez_compressed", "os.system", "collections.defaultdict", "wrappers.Logged.env.render", "wrappers.Logged.data[].append", "os.path.exists", "os.makedirs", "open", "len", "cv2.VideoWriter", "cv2.VideoWriter.release", "numpy.stack", "f.write", "cv2.VideoWriter.write", "str", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "if", "self", ".", "logging", ":", "\n", "            ", "pov", "=", "self", ".", "env", ".", "render", "(", ")", "[", "...", ",", ":", "-", "1", "]", "\n", "for", "key", "in", "obs", ":", "\n", "                ", "self", ".", "data", "[", "key", "]", ".", "append", "(", "obs", "[", "key", "]", ")", "\n", "", "self", ".", "data", "[", "'reward'", "]", ".", "append", "(", "reward", ")", "\n", "self", ".", "data", "[", "'done'", "]", ".", "append", "(", "done", ")", "\n", "self", ".", "data", "[", "'pov'", "]", ".", "append", "(", "pov", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "self", ".", "actions", ".", "append", "(", "action", ")", "\n", "", "if", "done", "and", "self", ".", "logging", "and", "self", ".", "unwrapped", ".", "step_no", "!=", "0", ":", "\n", "            ", "path", "=", "f'{self.path}/step{self.glob_step}'", "\n", "# raise", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "", "for", "k", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "                ", "if", "k", "!=", "'pov'", ":", "\n", "                    ", "self", ".", "data", "[", "k", "]", "=", "np", ".", "stack", "(", "self", ".", "data", "[", "k", "]", ",", "axis", "=", "0", ")", "\n", "", "", "fname", "=", "f'ep_{self.desc}_{str(uuid4().hex)[:6]}'", "\n", "np", ".", "savez_compressed", "(", "f'{path}/{fname}.npz'", ",", "**", "self", ".", "data", ")", "\n", "with", "open", "(", "f'{path}/{fname}.csv'", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "for", "action", "in", "self", ".", "actions", ":", "\n", "                    ", "f", ".", "write", "(", "f'{action}\\n'", ")", "\n", "", "", "if", "len", "(", "self", ".", "data", "[", "'pov'", "]", ")", ">", "1", ":", "\n", "                ", "w", "=", "cv2", ".", "VideoWriter", "(", "f'{path}/{fname}.mp4'", ",", "self", ".", "fourcc", ",", "20", ",", "(", "64", ",", "64", ")", ")", "\n", "for", "pov", "in", "self", ".", "data", "[", "'pov'", "]", ":", "\n", "                    ", "w", ".", "write", "(", "pov", ")", "\n", "", "w", ".", "release", "(", ")", "\n", "", "os", ".", "system", "(", "f'ffmpeg -y -hide_banner -loglevel error -i {path}/{fname}.mp4 -vcodec libx264 {path}/{fname}1.mp4 '", "\n", "f'&& mv {path}/{fname}1.mp4 {path}/{fname}.mp4'", ")", "\n", "self", ".", "data", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "actions", "=", "[", "]", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.reset": [[123, 131], ["super().reset", "wrappers.Logged.data[].append", "wrappers.Logged.env.render", "wrappers.Logged.data[].append"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "obs", "=", "super", "(", ")", ".", "reset", "(", ")", "\n", "if", "not", "self", ".", "turned_off", ":", "\n", "            ", "pov", "=", "self", ".", "env", ".", "render", "(", ")", "[", "...", ",", ":", "-", "1", "]", "\n", "self", ".", "data", "[", "'pov'", "]", ".", "append", "(", "pov", "[", "...", ",", ":", ":", "-", "1", "]", ")", "\n", "for", "k", "in", "obs", ":", "\n", "                ", "self", ".", "data", "[", "k", "]", ".", "append", "(", "obs", "[", "k", "]", ")", "\n", "", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.wrappers.Logged.enable_renderer": [[132, 135], ["wrappers.Logged.env.enable_renderer"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.enable_renderer"], ["", "def", "enable_renderer", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "enable_renderer", "(", ")", "\n", "self", ".", "logging", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.__init__": [[11, 24], ["gridworld.core.world.World", "gridworld.core.world.Agent", "render.Renderer.__init__", "pyglet.graphics.vertex_list"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "overlay", "=", "True", ",", "**", "kwargs", ")", "->", "None", ":", "\n", "        ", "self", ".", "exclusive", "=", "False", "\n", "self", ".", "world", "=", "World", "(", ")", "\n", "self", ".", "agent", "=", "Agent", "(", "sustain", "=", "True", ")", "\n", "super", "(", ")", ".", "__init__", "(", "model", "=", "self", ".", "world", ",", "agent", "=", "self", ".", "agent", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "overlay", "=", "overlay", "\n", "self", ".", "num_keys", "=", "[", "\n", "key", ".", "_1", ",", "key", ".", "_2", ",", "key", ".", "_3", ",", "key", ".", "_4", ",", "key", ".", "_5", ",", "\n", "key", ".", "_6", ",", "key", ".", "_7", ",", "key", ".", "_8", ",", "key", ".", "_9", ",", "key", ".", "_0", "]", "\n", "x", ",", "y", "=", "self", ".", "width", "//", "2", ",", "self", ".", "height", "//", "2", "\n", "n", "=", "10", "\n", "self", ".", "reticle", "=", "vertex_list", "(", "4", ",", "\n", "(", "'v2i'", ",", "(", "x", "-", "n", ",", "y", ",", "x", "+", "n", ",", "y", ",", "x", ",", "y", "-", "n", ",", "x", ",", "y", "+", "n", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.on_mouse_press": [[26, 50], ["viewer.Viewer.set_exclusive_mouse", "viewer.Viewer.world.place_or_remove_block"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.set_exclusive_mouse", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.place_or_remove_block"], ["", "def", "on_mouse_press", "(", "self", ",", "x", ",", "y", ",", "button", ",", "modifiers", ")", ":", "\n", "        ", "\"\"\" Called when a mouse button is pressed. See pyglet docs for button\n        amd modifier mappings.\n\n        Parameters\n        ----------\n        x, y : int\n            The coordinates of the mouse click. Always center of the screen if\n            the mouse is captured.\n        button : int\n            Number representing mouse button that was clicked. 1 = left button,\n            4 = right button.\n        modifiers : int\n            Number representing any modifying keys that were pressed when the\n            mouse button was clicked.\n\n        \"\"\"", "\n", "if", "self", ".", "exclusive", ":", "\n", "            ", "right_click", "=", "(", "button", "==", "mouse", ".", "RIGHT", ")", "or", "(", "(", "button", "==", "mouse", ".", "LEFT", ")", "and", "(", "modifiers", "&", "key", ".", "MOD_CTRL", ")", ")", "\n", "left_click", "=", "button", "==", "mouse", ".", "LEFT", "\n", "if", "right_click", "or", "left_click", ":", "\n", "                ", "self", ".", "world", ".", "place_or_remove_block", "(", "self", ".", "agent", ",", "remove", "=", "left_click", ",", "place", "=", "right_click", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "set_exclusive_mouse", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.on_mouse_motion": [[51, 66], ["viewer.Viewer.world.move_camera"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.move_camera"], ["", "", "def", "on_mouse_motion", "(", "self", ",", "x", ",", "y", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "\"\"\" Called when the player moves the mouse.\n\n        Parameters\n        ----------\n        x, y : int\n            The coordinates of the mouse click. Always center of the screen if\n            the mouse is captured.\n        dx, dy : float\n            The movement of the mouse.\n\n        \"\"\"", "\n", "if", "self", ".", "exclusive", ":", "\n", "            ", "m", "=", "0.15", "\n", "self", ".", "world", ".", "move_camera", "(", "self", ".", "agent", ",", "dx", "*", "m", ",", "dy", "*", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.set_exclusive_mouse": [[67, 74], ["super().set_exclusive_mouse"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.set_exclusive_mouse"], ["", "", "def", "set_exclusive_mouse", "(", "self", ",", "exclusive", ")", ":", "\n", "        ", "\"\"\" If `exclusive` is True, the game will capture the mouse, if False\n        the game will ignore the mouse.\n\n        \"\"\"", "\n", "super", "(", ")", ".", "set_exclusive_mouse", "(", "exclusive", ")", "\n", "self", ".", "exclusive", "=", "exclusive", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.on_key_press": [[75, 108], ["viewer.Viewer.world.movement", "viewer.Viewer.set_exclusive_mouse", "len"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.movement", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.set_exclusive_mouse"], ["", "def", "on_key_press", "(", "self", ",", "symbol", ",", "modifiers", ")", ":", "\n", "        ", "\"\"\" Called when the player presses a key. See pyglet docs for key\n        mappings.\n\n        Parameters\n        ----------\n        symbol : int\n            Number representing the key that was pressed.\n        modifiers : int\n            Number representing any modifying keys that were pressed.\n\n        \"\"\"", "\n", "strafe", "=", "[", "0", ",", "0", "]", "\n", "jump", "=", "False", "\n", "inventory", "=", "None", "\n", "if", "symbol", "==", "key", ".", "W", ":", "\n", "            ", "strafe", "[", "0", "]", "-=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "S", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "A", ":", "\n", "            ", "strafe", "[", "1", "]", "-=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "D", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "SPACE", ":", "\n", "            ", "jump", "=", "True", "\n", "", "elif", "symbol", "==", "key", ".", "ESCAPE", ":", "\n", "            ", "self", ".", "set_exclusive_mouse", "(", "False", ")", "\n", "", "elif", "symbol", "==", "key", ".", "TAB", ":", "\n", "            ", "self", ".", "agent", ".", "flying", "=", "not", "self", ".", "agent", ".", "flying", "\n", "", "elif", "symbol", "in", "self", ".", "num_keys", ":", "\n", "            ", "index", "=", "(", "symbol", "-", "self", ".", "num_keys", "[", "0", "]", ")", "%", "len", "(", "self", ".", "agent", ".", "inventory", ")", "+", "1", "\n", "inventory", "=", "index", "\n", "", "self", ".", "world", ".", "movement", "(", "self", ".", "agent", ",", "strafe", ",", "jump", ",", "inventory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.on_key_release": [[109, 131], ["viewer.Viewer.world.movement"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.movement"], ["", "def", "on_key_release", "(", "self", ",", "symbol", ",", "modifiers", ")", ":", "\n", "        ", "\"\"\" Called when the player releases a key. See pyglet docs for key\n        mappings.\n\n        Parameters\n        ----------\n        symbol : int\n            Number representing the key that was pressed.\n        modifiers : int\n            Number representing any modifying keys that were pressed.\n\n        \"\"\"", "\n", "strafe", "=", "[", "0", ",", "0", "]", "\n", "if", "symbol", "==", "key", ".", "W", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "S", ":", "\n", "            ", "strafe", "[", "0", "]", "-=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "A", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "1", "\n", "", "elif", "symbol", "==", "key", ".", "D", ":", "\n", "            ", "strafe", "[", "1", "]", "-=", "1", "\n", "", "self", ".", "world", ".", "movement", "(", "self", ".", "agent", ",", "strafe", ",", "jump", "=", "False", ",", "inventory", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.viewer.Viewer.on_resize": [[132, 145], ["pyglet.graphics.vertex_list", "viewer.Viewer.reticle.delete"], "methods", ["None"], ["", "def", "on_resize", "(", "self", ",", "width", ",", "height", ")", ":", "\n", "        ", "\"\"\" Called when the window is resized to a new `width` and `height`.\n\n        \"\"\"", "\n", "# label", "\n", "self", ".", "label", ".", "y", "=", "height", "-", "10", "\n", "# reticle", "\n", "if", "self", ".", "reticle", ":", "\n", "            ", "self", ".", "reticle", ".", "delete", "(", ")", "\n", "", "x", ",", "y", "=", "self", ".", "width", "//", "2", ",", "self", ".", "height", "//", "2", "\n", "n", "=", "10", "\n", "self", ".", "reticle", "=", "vertex_list", "(", "4", ",", "\n", "(", "'v2i'", ",", "(", "x", "-", "n", ",", "y", ",", "x", "+", "n", ",", "y", ",", "x", ",", "y", "-", "n", ",", "x", ",", "y", "+", "n", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.__init__": [[42, 60], ["pyglet.window.Window.__init__", "render.Renderer.model.add_callback", "render.Renderer.model.add_callback", "pyglet.graphics.Batch", "os.path.dirname", "os.path.join", "pyglet.text.Label", "render.Renderer.model._initialize", "pyglet.image.get_buffer_manager", "filelock.FileLock", "pyglet.graphics.TextureGroup", "pyglet.image.load().get_texture", "pyglet.image.load"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_callback", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_callback", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World._initialize", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.load"], ["def", "__init__", "(", "self", ",", "model", ",", "agent", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "agent", "=", "agent", "\n", "self", ".", "model", ".", "add_callback", "(", "'on_add'", ",", "self", ".", "add_block", ")", "\n", "self", ".", "model", ".", "add_callback", "(", "'on_remove'", ",", "self", ".", "remove_block", ")", "\n", "self", ".", "batch", "=", "Batch", "(", ")", "\n", "dir_path", "=", "os", ".", "path", ".", "dirname", "(", "gridworld", ".", "__file__", ")", "\n", "TEXTURE_PATH", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "Renderer", ".", "TEXTURE_PATH", ")", "\n", "with", "FileLock", "(", "f'/tmp/mylock'", ")", ":", "\n", "            ", "self", ".", "texture_group", "=", "TextureGroup", "(", "image", ".", "load", "(", "TEXTURE_PATH", ")", ".", "get_texture", "(", ")", ")", "\n", "", "self", ".", "overlay", "=", "False", "\n", "self", ".", "_shown", "=", "{", "}", "\n", "self", ".", "label", "=", "pyglet", ".", "text", ".", "Label", "(", "''", ",", "font_name", "=", "'Arial'", ",", "font_size", "=", "18", ",", "\n", "x", "=", "10", ",", "y", "=", "self", ".", "height", "-", "10", ",", "anchor_x", "=", "'left'", ",", "anchor_y", "=", "'top'", ",", "\n", "color", "=", "(", "0", ",", "0", ",", "0", ",", "255", ")", ")", "\n", "self", ".", "model", ".", "_initialize", "(", ")", "\n", "self", ".", "buffer_manager", "=", "pyglet", ".", "image", ".", "get_buffer_manager", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.set_2d": [[61, 74], ["render.Renderer.get_size", "glDisable", "render.Renderer.get_viewport_size", "glViewport", "glMatrixMode", "glLoadIdentity", "glOrtho", "glMatrixMode", "glLoadIdentity", "max", "max", "max", "max"], "methods", ["None"], ["", "def", "set_2d", "(", "self", ")", ":", "\n", "        ", "\"\"\" Configure OpenGL to draw in 2d.\n\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "get_size", "(", ")", "\n", "glDisable", "(", "GL_DEPTH_TEST", ")", "\n", "viewport", "=", "self", ".", "get_viewport_size", "(", ")", "\n", "glViewport", "(", "0", ",", "0", ",", "max", "(", "1", ",", "viewport", "[", "0", "]", ")", ",", "max", "(", "1", ",", "viewport", "[", "1", "]", ")", ")", "\n", "glMatrixMode", "(", "GL_PROJECTION", ")", "\n", "glLoadIdentity", "(", ")", "\n", "glOrtho", "(", "0", ",", "max", "(", "1", ",", "width", ")", ",", "0", ",", "max", "(", "1", ",", "height", ")", ",", "-", "1", ",", "1", ")", "\n", "glMatrixMode", "(", "GL_MODELVIEW", ")", "\n", "glLoadIdentity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.set_3d": [[75, 95], ["render.Renderer.get_size", "glEnable", "render.Renderer.get_viewport_size", "glViewport", "glMatrixMode", "glLoadIdentity", "gluPerspective", "glMatrixMode", "glLoadIdentity", "glRotatef", "glRotatef", "glTranslatef", "max", "max", "math.cos", "math.sin", "float", "math.radians", "math.radians"], "methods", ["None"], ["", "def", "set_3d", "(", "self", ")", ":", "\n", "        ", "\"\"\" Configure OpenGL to draw in 3d.\n\n        \"\"\"", "\n", "width", ",", "height", "=", "self", ".", "get_size", "(", ")", "\n", "glEnable", "(", "GL_DEPTH_TEST", ")", "\n", "# glEnable(GL_LIGHTING)", "\n", "# glEnable(GL_LIGHT0)", "\n", "viewport", "=", "self", ".", "get_viewport_size", "(", ")", "\n", "glViewport", "(", "0", ",", "0", ",", "max", "(", "1", ",", "viewport", "[", "0", "]", ")", ",", "max", "(", "1", ",", "viewport", "[", "1", "]", ")", ")", "\n", "glMatrixMode", "(", "GL_PROJECTION", ")", "\n", "glLoadIdentity", "(", ")", "\n", "gluPerspective", "(", "120.0", ",", "width", "/", "float", "(", "height", ")", ",", "0.1", ",", "30.0", ")", "\n", "glMatrixMode", "(", "GL_MODELVIEW", ")", "\n", "glLoadIdentity", "(", ")", "\n", "x", ",", "y", "=", "self", ".", "agent", ".", "rotation", "\n", "glRotatef", "(", "x", ",", "0", ",", "1", ",", "0", ")", "\n", "glRotatef", "(", "-", "y", ",", "math", ".", "cos", "(", "math", ".", "radians", "(", "x", ")", ")", ",", "0", ",", "math", ".", "sin", "(", "math", ".", "radians", "(", "x", ")", ")", ")", "\n", "x", ",", "y", ",", "z", "=", "self", ".", "agent", ".", "position", "\n", "glTranslatef", "(", "-", "x", ",", "-", "y", ",", "-", "z", ")", "\n", "# glLightfv(GL_LIGHT0, GL_POSITION, (GLfloat*4)(0.0,9,0.0,1))", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.on_draw": [[100, 114], ["render.Renderer.clear", "render.Renderer.set_3d", "glColor3d", "render.Renderer.batch.draw", "render.Renderer.draw_focused_block", "render.Renderer.set_2d", "render.Renderer.draw_label", "render.Renderer.draw_reticle"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.set_3d", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_focused_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.set_2d", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_label", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_reticle"], ["", "def", "on_draw", "(", "self", ")", ":", "\n", "        ", "\"\"\" Called by pyglet to draw the canvas.\n\n        \"\"\"", "\n", "self", ".", "clear", "(", ")", "\n", "self", ".", "set_3d", "(", ")", "\n", "glColor3d", "(", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "batch", ".", "draw", "(", ")", "\n", "\n", "if", "self", ".", "overlay", ":", "\n", "            ", "self", ".", "draw_focused_block", "(", ")", "\n", "self", ".", "set_2d", "(", ")", "\n", "self", ".", "draw_label", "(", ")", "\n", "self", ".", "draw_reticle", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.render": [[115, 124], ["render.Renderer.on_draw", "render.Renderer.get_size", "numpy.asanyarray().reshape", "numpy.asanyarray", "render.Renderer.buffer_manager.get_color_buffer().get_image_data().get_data", "render.Renderer.buffer_manager.get_color_buffer().get_image_data", "render.Renderer.buffer_manager.get_color_buffer"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.on_draw"], ["", "", "def", "render", "(", "self", ")", ":", "\n", "        ", "self", ".", "on_draw", "(", ")", "\n", "width", ",", "height", "=", "self", ".", "get_size", "(", ")", "\n", "return", "np", ".", "asanyarray", "(", "\n", "self", ".", "buffer_manager", "\n", ".", "get_color_buffer", "(", ")", "\n", ".", "get_image_data", "(", ")", "\n", ".", "get_data", "(", ")", "\n", ")", ".", "reshape", "(", "(", "width", ",", "height", ",", "4", ")", ")", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.add_block": [[125, 136], ["utils.cube_vertices", "list", "render.Renderer.batch.add"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.cube_vertices"], ["", "def", "add_block", "(", "self", ",", "position", ",", "texture_id", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "y", ",", "z", "=", "position", "\n", "top_only", "=", "texture_id", "in", "[", "WHITE", ",", "GREY", "]", "\n", "texture", "=", "(", "id2top_texture", "if", "top_only", "else", "id2texture", ")", "[", "texture_id", "]", "\n", "vertex_data", "=", "cube_vertices", "(", "x", ",", "y", ",", "z", ",", "0.5", ",", "top_only", "=", "top_only", ")", "\n", "texture_data", "=", "list", "(", "texture", ")", "\n", "# create vertex list", "\n", "# FIXME Maybe `add_indexed()` should be used instead", "\n", "self", ".", "_shown", "[", "position", "]", "=", "self", ".", "batch", ".", "add", "(", "4", "if", "top_only", "else", "24", ",", "GL_QUADS", ",", "self", ".", "texture_group", ",", "\n", "(", "'v3f/static'", ",", "vertex_data", ")", ",", "\n", "(", "'t2f/static'", ",", "texture_data", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.remove_block": [[138, 141], ["render.Renderer._shown.pop().delete", "render.Renderer._shown.pop"], "methods", ["None"], ["", "def", "remove_block", "(", "self", ",", "position", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "position", "in", "self", ".", "_shown", ":", "\n", "            ", "self", ".", "_shown", ".", "pop", "(", "position", ")", ".", "delete", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_focused_block": [[142, 155], ["render.Renderer.model.get_focused_block", "utils.cube_vertices", "glColor3d", "glPolygonMode", "pyglet.graphics.draw", "glPolygonMode"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_focused_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.cube_vertices"], ["", "", "def", "draw_focused_block", "(", "self", ")", ":", "\n", "        ", "\"\"\" Draw black edges around the block that is currently under the\n        crosshairs.\n\n        \"\"\"", "\n", "block", "=", "self", ".", "model", ".", "get_focused_block", "(", "self", ".", "agent", ")", "\n", "if", "block", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "block", "\n", "vertex_data", "=", "cube_vertices", "(", "x", ",", "y", ",", "z", ",", "0.51", ")", "\n", "glColor3d", "(", "0", ",", "0", ",", "0", ")", "\n", "glPolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_LINE", ")", "\n", "pyglet", ".", "graphics", ".", "draw", "(", "24", ",", "GL_QUADS", ",", "(", "'v3f/static'", ",", "vertex_data", ")", ")", "\n", "glPolygonMode", "(", "GL_FRONT_AND_BACK", ",", "GL_FILL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_label": [[156, 166], ["render.Renderer.label.draw", "int", "len", "len", "pyglet.clock.get_fps"], "methods", ["None"], ["", "", "def", "draw_label", "(", "self", ")", ":", "\n", "        ", "\"\"\" Draw the label in the top left of the screen.\n\n        \"\"\"", "\n", "x", ",", "y", ",", "z", "=", "self", ".", "agent", ".", "position", "\n", "i", "=", "self", ".", "agent", ".", "inventory", "\n", "self", ".", "label", ".", "text", "=", "f'{int(pyglet.clock.get_fps()):02d} ({x:.2f}, {y:.2f}, {z:.2f}) '", "f'{len(self._shown)} / {len(self.model.world)} '", "f'({i[0]}, {i[1]}, {i[2]}, {i[3]}, {i[4]}, {i[5]})'", "\n", "self", ".", "label", ".", "draw", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.Renderer.draw_reticle": [[167, 173], ["glColor3d", "render.Renderer.reticle.draw"], "methods", ["None"], ["", "def", "draw_reticle", "(", "self", ")", ":", "\n", "        ", "\"\"\" Draw the crosshairs in the center of the screen.\n\n        \"\"\"", "\n", "glColor3d", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "reticle", ".", "draw", "(", "GL_LINES", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.setup_fog": [[17, 26], ["glEnable", "glFogfv", "glHint", "glFogi", "glFogf", "glFogf"], "function", ["None"], ["def", "setup_fog", "(", ")", ":", "\n", "    ", "\"\"\" Configure the OpenGL fog properties.\n    \"\"\"", "\n", "glEnable", "(", "GL_FOG", ")", "\n", "glFogfv", "(", "GL_FOG_COLOR", ",", "(", "GLfloat", "*", "4", ")", "(", "0.5", ",", "0.69", ",", "1.0", ",", "1", ")", ")", "\n", "glHint", "(", "GL_FOG_HINT", ",", "GL_DONT_CARE", ")", "\n", "glFogi", "(", "GL_FOG_MODE", ",", "GL_LINEAR", ")", "\n", "glFogf", "(", "GL_FOG_START", ",", "25.0", ")", "\n", "glFogf", "(", "GL_FOG_END", ",", "30.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.setup": [[28, 36], ["glClearColor", "glEnable", "glTexParameteri", "glTexParameteri"], "function", ["None"], ["", "def", "setup", "(", ")", ":", "\n", "    ", "\"\"\" Basic OpenGL configuration.\n\n    \"\"\"", "\n", "glClearColor", "(", "0.5", ",", "0.69", ",", "1.0", ",", "1", ")", "\n", "glEnable", "(", "GL_CULL_FACE", ")", "\n", "glTexParameteri", "(", "GL_TEXTURE_2D", ",", "GL_TEXTURE_MIN_FILTER", ",", "GL_NEAREST", ")", "\n", "glTexParameteri", "(", "GL_TEXTURE_2D", ",", "GL_TEXTURE_MAG_FILTER", ",", "GL_NEAREST", ")", "\n", "# setup_fog()", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.cube_vertices": [[26, 41], ["None"], "function", ["None"], ["def", "cube_vertices", "(", "x", ",", "y", ",", "z", ",", "n", ",", "top_only", "=", "False", ")", ":", "\n", "    ", "\"\"\" Return the vertices of the cube at position x, y, z with size 2*n.\n\n    \"\"\"", "\n", "if", "top_only", ":", "\n", "        ", "return", "[", "\n", "x", "-", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "# top", "\n", "]", "\n", "", "return", "[", "\n", "x", "-", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "# top", "\n", "x", "-", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "+", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "+", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "x", "-", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "# bottom", "\n", "x", "-", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "-", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "# left", "\n", "x", "+", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "# right", "\n", "x", "-", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "-", "n", ",", "z", "+", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "+", "n", ",", "# front", "\n", "x", "+", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "-", "n", ",", "y", "-", "n", ",", "z", "-", "n", ",", "x", "-", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "x", "+", "n", ",", "y", "+", "n", ",", "z", "-", "n", ",", "# back", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.cube_normals": [[43, 55], ["None"], "function", ["None"], ["", "def", "cube_normals", "(", "top_only", "=", "False", ")", ":", "\n", "    ", "if", "top_only", ":", "\n", "        ", "return", "[", "\n", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "# top", "\n", "]", "\n", "", "return", "[", "\n", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "# top", "\n", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "# bottom", "\n", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "# left", "\n", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "# right", "\n", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "1", ",", "# front", "\n", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "0", ",", "0", ",", "-", "1", ",", "# back", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.normalize": [[57, 74], ["int", "int", "int", "round", "round", "round"], "function", ["None"], ["", "@", "numba", ".", "jit", "\n", "def", "normalize", "(", "position", ")", ":", "\n", "    ", "\"\"\" Accepts `position` of arbitrary precision and returns the block\n    containing that position.\n\n    Parameters\n    ----------\n    position : tuple of len 3\n\n    Returns\n    -------\n    block_position : tuple of ints of len 3\n\n    \"\"\"", "\n", "x", ",", "y", ",", "z", "=", "position", "\n", "x", ",", "y", ",", "z", "=", "(", "int", "(", "round", "(", "x", ")", ")", ",", "int", "(", "round", "(", "y", ")", ")", ",", "int", "(", "round", "(", "z", ")", ")", ")", "\n", "return", "(", "x", ",", "y", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord": [[75, 99], ["None"], "function", ["None"], ["", "def", "tex_coord", "(", "x", ",", "y", ",", "n", "=", "4", ",", "split", "=", "False", ",", "side_n", "=", "0", ")", ":", "\n", "    ", "\"\"\" Return the bounding vertices of the texture square.\n\n    \"\"\"", "\n", "m", "=", "1.0", "/", "n", "\n", "m1", "=", "1.0", "/", "n", "/", "(", "2", "if", "split", "else", "1", ")", "\n", "if", "split", ":", "\n", "        ", "if", "side_n", "==", "0", ":", "\n", "            ", "cx", ",", "cy", "=", "0", ",", "0", "\n", "", "elif", "side_n", "==", "1", ":", "\n", "            ", "cx", ",", "cy", "=", "0", ",", "0.125", "\n", "", "elif", "side_n", "==", "2", ":", "\n", "            ", "cx", ",", "cy", "=", "0.125", ",", "0", "\n", "", "elif", "side_n", "==", "3", ":", "\n", "            ", "cx", ",", "cy", "=", "0.125", ",", "0.125", "\n", "", "", "else", ":", "\n", "        ", "cx", ",", "cy", "=", "0", ",", "0", "\n", "", "dx", "=", "x", "*", "m", "\n", "dy", "=", "y", "*", "m", "\n", "return", "(", "\n", "cx", "+", "dx", ",", "cy", "+", "dy", ",", "\n", "cx", "+", "dx", "+", "m1", ",", "cy", "+", "dy", ",", "\n", "cx", "+", "dx", "+", "m1", ",", "cy", "+", "dy", "+", "m1", ",", "\n", "cx", "+", "dx", ",", "cy", "+", "dy", "+", "m1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coords": [[102, 123], ["utils.tex_coord", "range", "utils.tex_coord", "utils.tex_coord", "utils.tex_coord", "utils.tex_coord", "utils.tex_coord", "utils.tex_coord", "result.extend"], "function", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.tex_coord"], ["", "def", "tex_coords", "(", "*", "side", ",", "top_only", "=", "False", ",", "split", "=", "False", ")", ":", "\n", "    ", "\"\"\" Return a list of the texture squares for the top, bottom and side.\n\n    \"\"\"", "\n", "result", "=", "[", "]", "\n", "if", "split", ":", "\n", "        ", "if", "top_only", ":", "\n", "            ", "return", "side", "\n", "", "else", ":", "\n", "# for _ in range(6):", "\n", "            ", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "1", ")", "\n", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "2", ")", "\n", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "0", ")", "\n", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "0", ")", "\n", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "3", ")", "\n", "result", "+=", "tex_coord", "(", "*", "side", ",", "split", "=", "split", ",", "side_n", "=", "3", ")", "\n", "", "", "else", ":", "\n", "        ", "side", "=", "tex_coord", "(", "*", "side", ")", "\n", "for", "_", "in", "range", "(", "1", "if", "top_only", "else", "6", ")", ":", "\n", "            ", "result", ".", "extend", "(", "side", ")", "\n", "", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.String.__init__": [[17, 19], ["gym.spaces.Space.__init__"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["    ", "def", "__init__", "(", "self", ",", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "shape", "=", "(", ")", ",", "dtype", "=", "np", ".", "object_", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.String.sample": [[20, 22], ["None"], "methods", ["None"], ["", "def", "sample", "(", "self", ")", ":", "\n", "        ", "return", "''", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.String.contains": [[23, 25], ["isinstance"], "methods", ["None"], ["", "def", "contains", "(", "self", ",", "obj", ")", ":", "\n", "        ", "return", "isinstance", "(", "obj", ",", "str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.Wrapper.__getattr__": [[28, 30], ["getattr"], "methods", ["None"], ["    ", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "env", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.__init__": [[33, 102], ["gridworld.core.world.Agent", "gridworld.core.world.World", "numpy.zeros", "env.GridWorld.world.add_callback", "env.GridWorld.world.add_callback", "gym.spaces.Dict", "gym.spaces.Discrete", "gym.spaces.Dict", "gym.spaces.Box", "gym.spaces.Box", "env.String", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gym.spaces.Box", "gridworld.render.Renderer", "gridworld.render.setup", "env.GridWorld.world._initialize", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Discrete", "gym.spaces.Box", "gym.spaces.Discrete", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_callback", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_callback", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.setup", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World._initialize"], ["    ", "def", "__init__", "(", "\n", "self", ",", "render", "=", "True", ",", "max_steps", "=", "250", ",", "select_and_place", "=", "False", ",", "\n", "discretize", "=", "False", ",", "right_placement_scale", "=", "1.", ",", "wrong_placement_scale", "=", "0.1", ",", "\n", "render_size", "=", "(", "64", ",", "64", ")", ",", "target_in_obs", "=", "False", ",", "\n", "vector_state", "=", "True", ",", "name", "=", "''", ")", "->", "None", ":", "\n", "        ", "self", ".", "agent", "=", "Agent", "(", "sustain", "=", "False", ")", "\n", "self", ".", "world", "=", "World", "(", ")", "\n", "self", ".", "grid", "=", "np", ".", "zeros", "(", "(", "9", ",", "11", ",", "11", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "self", ".", "_task", "=", "None", "\n", "self", ".", "_task_generator", "=", "None", "\n", "self", ".", "step_no", "=", "0", "\n", "self", ".", "right_placement_scale", "=", "right_placement_scale", "\n", "self", ".", "wrong_placement_scale", "=", "wrong_placement_scale", "\n", "self", ".", "max_steps", "=", "max_steps", "\n", "self", ".", "world", ".", "add_callback", "(", "'on_add'", ",", "self", ".", "_add_block", ")", "\n", "self", ".", "world", ".", "add_callback", "(", "'on_remove'", ",", "self", ".", "_remove_block", ")", "\n", "self", ".", "right_placement", "=", "0", "\n", "self", ".", "wrong_placement", "=", "0", "\n", "self", ".", "render_size", "=", "render_size", "\n", "self", ".", "select_and_place", "=", "select_and_place", "\n", "self", ".", "target_in_obs", "=", "target_in_obs", "\n", "self", ".", "vector_state", "=", "vector_state", "\n", "self", ".", "discretize", "=", "discretize", "\n", "self", ".", "starting_grid", "=", "None", "\n", "self", ".", "_overwrite_starting_grid", "=", "None", "\n", "self", ".", "initial_position", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "initial_rotation", "=", "(", "0", ",", "0", ")", "\n", "if", "discretize", ":", "\n", "            ", "self", ".", "action_space", "=", "Discrete", "(", "18", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "action_space", "=", "Dict", "(", "{", "\n", "'forward'", ":", "Discrete", "(", "2", ")", ",", "\n", "'back'", ":", "Discrete", "(", "2", ")", ",", "\n", "'left'", ":", "Discrete", "(", "2", ")", ",", "\n", "'right'", ":", "Discrete", "(", "2", ")", ",", "\n", "'jump'", ":", "Discrete", "(", "2", ")", ",", "\n", "'attack'", ":", "Discrete", "(", "2", ")", ",", "\n", "'use'", ":", "Discrete", "(", "2", ")", ",", "\n", "'camera'", ":", "Box", "(", "low", "=", "-", "5", ",", "high", "=", "5", ",", "shape", "=", "(", "2", ",", ")", ")", ",", "\n", "'hotbar'", ":", "Discrete", "(", "7", ")", "\n", "}", ")", "\n", "", "self", ".", "observation_space", "=", "{", "\n", "'inventory'", ":", "Box", "(", "low", "=", "0", ",", "high", "=", "20", ",", "shape", "=", "(", "6", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'compass'", ":", "Box", "(", "low", "=", "-", "180", ",", "high", "=", "180", ",", "shape", "=", "(", "1", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'dialog'", ":", "String", "(", ")", "\n", "}", "\n", "if", "vector_state", ":", "\n", "            ", "self", ".", "observation_space", "[", "'agentPos'", "]", "=", "Box", "(", "\n", "low", "=", "np", ".", "array", "(", "[", "-", "8", ",", "-", "2", ",", "-", "8", ",", "-", "90", ",", "0", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "high", "=", "np", ".", "array", "(", "[", "8", ",", "12", ",", "8", ",", "90", ",", "360", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "shape", "=", "(", "5", ",", ")", "\n", ")", "\n", "self", ".", "observation_space", "[", "'grid'", "]", "=", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "7", ",", "shape", "=", "(", "9", ",", "11", ",", "11", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "target_in_obs", ":", "\n", "            ", "self", ".", "observation_space", "[", "'target_grid'", "]", "=", "Box", "(", "low", "=", "-", "1", ",", "high", "=", "7", ",", "shape", "=", "(", "9", ",", "11", ",", "11", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "", "if", "render", ":", "\n", "            ", "self", ".", "observation_space", "[", "'pov'", "]", "=", "Box", "(", "low", "=", "0", ",", "high", "=", "255", ",", "shape", "=", "(", "*", "self", ".", "render_size", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "", "self", ".", "observation_space", "=", "Dict", "(", "self", ".", "observation_space", ")", "\n", "self", ".", "max_int", "=", "0", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "do_render", "=", "render", "\n", "if", "render", ":", "\n", "            ", "self", ".", "renderer", "=", "Renderer", "(", "self", ".", "world", ",", "self", ".", "agent", ",", "\n", "width", "=", "self", ".", "render_size", "[", "0", "]", ",", "height", "=", "self", ".", "render_size", "[", "1", "]", ",", "\n", "caption", "=", "'Pyglet'", ",", "resizable", "=", "False", ")", "\n", "setup", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "renderer", "=", "None", "\n", "self", ".", "world", ".", "_initialize", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.enable_renderer": [[103, 112], ["env.GridWorld.reset", "env.GridWorld.world.deinit", "gridworld.render.Renderer", "gridworld.render.setup"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.deinit", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.render.setup"], ["", "", "def", "enable_renderer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "renderer", "is", "None", ":", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "self", ".", "world", ".", "deinit", "(", ")", "\n", "self", ".", "renderer", "=", "Renderer", "(", "self", ".", "world", ",", "self", ".", "agent", ",", "\n", "width", "=", "self", ".", "render_size", "[", "0", "]", ",", "height", "=", "self", ".", "render_size", "[", "0", "]", ",", "\n", "caption", "=", "'Pyglet'", ",", "resizable", "=", "False", ")", "\n", "setup", "(", ")", "\n", "self", ".", "do_render", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld._add_block": [[113, 120], ["None"], "methods", ["None"], ["", "", "def", "_add_block", "(", "self", ",", "position", ",", "kind", ",", "build_zone", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "world", ".", "initialized", "and", "build_zone", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "position", "\n", "x", "+=", "5", "\n", "z", "+=", "5", "\n", "y", "+=", "1", "\n", "self", ".", "grid", "[", "y", ",", "x", ",", "z", "]", "=", "kind", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld._remove_block": [[121, 131], ["ValueError", "env.GridWorld.grid.nonzero"], "methods", ["None"], ["", "", "def", "_remove_block", "(", "self", ",", "position", ",", "build_zone", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "world", ".", "initialized", "and", "build_zone", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "position", "\n", "x", "+=", "5", "\n", "z", "+=", "5", "\n", "y", "+=", "1", "\n", "if", "self", ".", "grid", "[", "y", ",", "x", ",", "z", "]", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "f'Removal of non-existing block. address: y={y}, x={x}, z={z}; '", "\n", "f'grid state: {self.grid.nonzero()[0]};'", ")", "\n", "", "self", ".", "grid", "[", "y", ",", "x", ",", "z", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.set_task": [[132, 144], ["env.GridWorld.reset", "warnings.warn"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "", "def", "set_task", "(", "self", ",", "task", ":", "Task", ")", ":", "\n", "        ", "\"\"\"\n        Assigns provided task into the environment. On each .reset, the env\n        Queries the .reset method for the task object. This method should drop\n        the task state to the initial one.\n        Note that the env can only work with non-None task or task generator.\n        \"\"\"", "\n", "if", "self", ".", "_task_generator", "is", "not", "None", ":", "\n", "            ", "warnings", ".", "warn", "(", "\"The .set_task method has no effect with an initialized tasks generator. \"", "\n", "\"Drop it using .set_tasks_generator(None) after calling .set_task\"", ")", "\n", "", "self", ".", "_task", "=", "task", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.set_task_generator": [[145, 153], ["env.GridWorld.reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "def", "set_task_generator", "(", "self", ",", "task_generator", ":", "Tasks", ")", ":", "\n", "        ", "\"\"\"\n        Sets task generator for the current environment. On each .reset, the environment\n        queries the .reset method of generator which returns the next task according to the generator.\n        Note that the env can only work with non-None task or task generator.\n        \"\"\"", "\n", "self", ".", "_task_generator", "=", "task_generator", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.initialize_world": [[154, 165], ["warnings.warn", "tuple", "tuple", "env.GridWorld.reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "def", "initialize_world", "(", "self", ",", "starting_grid", ",", "initial_poisition", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "_overwrite_starting_grid", "=", "starting_grid", "\n", "warnings", ".", "warn", "(", "\n", "'Default task starting grid is overwritten using .initialize_world method. '", "\n", "'Use .deinitialize_world to restore the original state.'", "\n", ")", "\n", "self", ".", "initial_position", "=", "tuple", "(", "initial_poisition", "[", ":", "3", "]", ")", "\n", "self", ".", "initial_rotation", "=", "tuple", "(", "initial_poisition", "[", "3", ":", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.deinitialize_world": [[166, 171], ["env.GridWorld.reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "def", "deinitialize_world", "(", "self", ")", ":", "\n", "        ", "self", ".", "_overwrite_starting_grid", "=", "None", "\n", "self", ".", "initial_position", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "initial_rotation", "=", "(", "0", ",", "0", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.task": [[172, 182], ["env.GridWorld._task_generator.reset", "ValueError"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "@", "property", "\n", "def", "task", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_task", "is", "None", ":", "\n", "            ", "if", "self", ".", "_task_generator", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Task is not initialized! Initialize task before working with'", "\n", "' the environment using .set_task method OR set tasks distribution using '", "\n", "'.set_task_generator method'", ")", "\n", "", "self", ".", "_task", "=", "self", ".", "_task_generator", ".", "reset", "(", ")", "\n", "self", ".", "starting_grid", "=", "self", ".", "_task", ".", "starting_grid", "\n", "", "return", "self", ".", "_task", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.reset": [[183, 226], ["env.GridWorld._task.reset", "set", "env.GridWorld._task.maximal_intersection", "len", "env.GridWorld.world.remove_block", "numpy.array", "numpy.array", "env.GridWorld.grid.copy().astype", "numpy.array", "env.GridWorld._task.target_grid.copy().astype", "ValueError", "env.GridWorld._task_generator.reset", "env.GridWorld._task_generator.reset", "env.GridWorld.world.add_block", "env.GridWorld.grid.nonzero", "range", "env.GridWorld.render", "env.GridWorld.grid.copy", "env.GridWorld._task.target_grid.copy"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.maximal_intersection", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_task", "is", "None", ":", "\n", "            ", "if", "self", ".", "_task_generator", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Task is not initialized! Initialize task before working with'", "\n", "' the environment using .set_task method OR set tasks distribution using '", "\n", "'.set_task_generator method'", ")", "\n", "", "else", ":", "\n", "# yield new task", "\n", "                ", "self", ".", "_task", "=", "self", ".", "_task_generator", ".", "reset", "(", ")", "\n", "", "", "elif", "self", ".", "_task_generator", "is", "not", "None", ":", "\n", "            ", "self", ".", "_task", "=", "self", ".", "_task_generator", ".", "reset", "(", ")", "\n", "", "self", ".", "step_no", "=", "0", "\n", "self", ".", "_task", ".", "reset", "(", ")", "\n", "if", "self", ".", "_overwrite_starting_grid", "is", "not", "None", ":", "\n", "            ", "self", ".", "starting_grid", "=", "self", ".", "_overwrite_starting_grid", "\n", "", "else", ":", "\n", "            ", "self", ".", "starting_grid", "=", "self", ".", "_task", ".", "starting_grid", "\n", "", "for", "block", "in", "set", "(", "self", ".", "world", ".", "placed", ")", ":", "\n", "            ", "self", ".", "world", ".", "remove_block", "(", "block", ")", "\n", "", "if", "self", ".", "starting_grid", "is", "not", "None", ":", "\n", "            ", "for", "x", ",", "y", ",", "z", ",", "bid", "in", "self", ".", "starting_grid", ":", "\n", "                ", "self", ".", "world", ".", "add_block", "(", "(", "x", ",", "y", ",", "z", ")", ",", "bid", ")", "\n", "", "", "self", ".", "agent", ".", "position", "=", "self", ".", "initial_position", "\n", "self", ".", "agent", ".", "rotation", "=", "self", ".", "initial_rotation", "\n", "self", ".", "max_int", "=", "self", ".", "_task", ".", "maximal_intersection", "(", "self", ".", "grid", ")", "\n", "self", ".", "prev_grid_size", "=", "len", "(", "self", ".", "grid", ".", "nonzero", "(", ")", "[", "0", "]", ")", "\n", "self", ".", "agent", ".", "inventory", "=", "[", "20", "for", "_", "in", "range", "(", "6", ")", "]", "\n", "if", "self", ".", "starting_grid", "is", "not", "None", ":", "\n", "            ", "for", "_", ",", "_", ",", "_", ",", "color", "in", "self", ".", "starting_grid", ":", "\n", "                ", "self", ".", "agent", ".", "inventory", "[", "color", "-", "1", "]", "-=", "1", "\n", "", "", "obs", "=", "{", "\n", "'inventory'", ":", "np", ".", "array", "(", "self", ".", "agent", ".", "inventory", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'compass'", ":", "np", ".", "array", "(", "[", "0.", "]", ",", "dtype", "=", "np", ".", "float32", ")", ",", "\n", "'dialog'", ":", "self", ".", "_task", ".", "chat", "\n", "}", "\n", "if", "self", ".", "vector_state", ":", "\n", "            ", "obs", "[", "'grid'", "]", "=", "self", ".", "grid", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "obs", "[", "'agentPos'", "]", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", ",", "0.", ",", "0.", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "if", "self", ".", "target_in_obs", ":", "\n", "            ", "obs", "[", "'target_grid'", "]", "=", "self", ".", "_task", ".", "target_grid", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "self", ".", "do_render", ":", "\n", "            ", "obs", "[", "'pov'", "]", "=", "self", ".", "render", "(", ")", "[", "...", ",", ":", "-", "1", "]", "\n", "", "return", "obs", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render": [[227, 231], ["env.GridWorld.renderer.render", "ValueError"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render"], ["", "def", "render", "(", "self", ",", ")", ":", "\n", "        ", "if", "not", "self", ".", "do_render", ":", "\n", "            ", "raise", "ValueError", "(", "'create env with render=True'", ")", "\n", "", "return", "self", ".", "renderer", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.parse_action": [[232, 251], ["bool", "bool", "bool"], "methods", ["None"], ["", "def", "parse_action", "(", "self", ",", "action", ")", ":", "\n", "        ", "strafe", "=", "[", "0", ",", "0", "]", "\n", "if", "action", "[", "'forward'", "]", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "-", "1", "\n", "", "if", "action", "[", "'back'", "]", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "1", "\n", "", "if", "action", "[", "'left'", "]", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "-", "1", "\n", "", "if", "action", "[", "'right'", "]", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "1", "\n", "", "jump", "=", "bool", "(", "action", "[", "'jump'", "]", ")", "\n", "if", "action", "[", "'hotbar'", "]", "==", "0", ":", "\n", "            ", "inventory", "=", "None", "\n", "", "else", ":", "\n", "            ", "inventory", "=", "action", "[", "'hotbar'", "]", "\n", "", "camera", "=", "action", "[", "'camera'", "]", "\n", "remove", "=", "bool", "(", "action", "[", "'attack'", "]", ")", "\n", "add", "=", "bool", "(", "action", "[", "'use'", "]", ")", "\n", "return", "strafe", ",", "jump", ",", "inventory", ",", "camera", ",", "remove", ",", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.step": [[252, 282], ["env.GridWorld.world.step", "numpy.array", "numpy.array", "env.GridWorld._task.step_intersection", "copy.copy.copy", "env.GridWorld.grid.copy().astype", "numpy.array", "env.GridWorld._task.target_grid.copy().astype", "ValueError", "ValueError", "env.GridWorld.render", "env.GridWorld.grid.copy", "env.GridWorld._task.target_grid.copy"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.step_intersection", "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.GridWorld.render"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "self", ".", "_task", "is", "None", ":", "\n", "            ", "if", "self", ".", "_task_generator", "is", "None", ":", "\n", "                ", "raise", "ValueError", "(", "'Task is not initialized! Initialize task before working with'", "\n", "' the environment using .set_task method OR set tasks distribution using '", "\n", "'.set_task_generator method'", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Task is not initialized! Run .reset() first.'", ")", "\n", "", "", "self", ".", "step_no", "+=", "1", "\n", "self", ".", "world", ".", "step", "(", "self", ".", "agent", ",", "action", ",", "select_and_place", "=", "self", ".", "select_and_place", ")", "\n", "x", ",", "y", ",", "z", "=", "self", ".", "agent", ".", "position", "\n", "yaw", ",", "pitch", "=", "self", ".", "agent", ".", "rotation", "\n", "obs", "=", "{", "}", "\n", "obs", "[", "'inventory'", "]", "=", "np", ".", "array", "(", "copy", "(", "self", ".", "agent", ".", "inventory", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obs", "[", "'compass'", "]", "=", "np", ".", "array", "(", "[", "yaw", "-", "180.", ",", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "obs", "[", "'dialog'", "]", "=", "self", ".", "_task", ".", "chat", "\n", "if", "self", ".", "vector_state", ":", "\n", "            ", "obs", "[", "'grid'", "]", "=", "self", ".", "grid", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "obs", "[", "'agentPos'", "]", "=", "np", ".", "array", "(", "[", "x", ",", "y", ",", "z", ",", "pitch", ",", "yaw", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "right_placement", ",", "wrong_placement", ",", "done", "=", "self", ".", "_task", ".", "step_intersection", "(", "self", ".", "grid", ")", "\n", "done", "=", "done", "or", "(", "self", ".", "step_no", "==", "self", ".", "max_steps", ")", "\n", "if", "right_placement", "==", "0", ":", "\n", "            ", "reward", "=", "wrong_placement", "*", "self", ".", "wrong_placement_scale", "\n", "", "else", ":", "\n", "            ", "reward", "=", "right_placement", "*", "self", ".", "right_placement_scale", "\n", "", "if", "self", ".", "target_in_obs", ":", "\n", "            ", "obs", "[", "'target_grid'", "]", "=", "self", ".", "_task", ".", "target_grid", ".", "copy", "(", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "if", "self", ".", "do_render", ":", "\n", "            ", "obs", "[", "'pov'", "]", "=", "self", ".", "render", "(", ")", "[", "...", ",", ":", "-", "1", "]", "\n", "", "return", "obs", ",", "reward", ",", "done", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.SizeReward.__init__": [[285, 288], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__"], ["  ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "    ", "super", "(", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.SizeReward.reset": [[289, 292], ["super().reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "    ", "self", ".", "size", "=", "0", "\n", "return", "super", "(", ")", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.SizeReward.step": [[293, 300], ["super().step", "max", "min", "max"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "    ", "obs", ",", "reward", ",", "done", ",", "info", "=", "super", "(", ")", ".", "step", "(", "action", ")", "\n", "intersection", "=", "self", ".", "unwrapped", ".", "max_int", "\n", "reward", "=", "max", "(", "intersection", ",", "self", ".", "size", ")", "-", "self", ".", "size", "\n", "self", ".", "size", "=", "max", "(", "intersection", ",", "self", ".", "size", ")", "\n", "reward", "+=", "min", "(", "self", ".", "unwrapped", ".", "wrong_placement", "*", "0.02", ",", "0", ")", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.env.create_env": [[302, 319], ["env.GridWorld", "env.SizeReward"], "function", ["None"], ["", "", "def", "create_env", "(", "\n", "render", "=", "True", ",", "discretize", "=", "True", ",", "size_reward", "=", "True", ",", "select_and_place", "=", "True", ",", "\n", "right_placement_scale", "=", "1", ",", "render_size", "=", "(", "64", ",", "64", ")", ",", "target_in_obs", "=", "False", ",", "\n", "vector_state", "=", "False", ",", "max_steps", "=", "250", ",", "\n", "wrong_placement_scale", "=", "0.1", ",", "name", "=", "''", "\n", ")", ":", "\n", "    ", "env", "=", "GridWorld", "(", "\n", "render", "=", "render", ",", "select_and_place", "=", "select_and_place", ",", "\n", "discretize", "=", "discretize", ",", "right_placement_scale", "=", "right_placement_scale", ",", "\n", "wrong_placement_scale", "=", "wrong_placement_scale", ",", "name", "=", "name", ",", "\n", "render_size", "=", "render_size", ",", "target_in_obs", "=", "target_in_obs", ",", "\n", "vector_state", "=", "vector_state", ",", "max_steps", "=", "max_steps", ",", "\n", ")", "\n", "if", "size_reward", ":", "\n", "        ", "env", "=", "SizeReward", "(", "env", ")", "\n", "# env = Actions(env)", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.CustomTasks.__init__": [[31, 42], ["task.Tasks.__init__", "list", "task_set.CustomTasks.reset", "str", "task.Task", "task_set.CustomTasks.tasks.keys", "task_set.CustomTasks.to_dense", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_dense"], ["def", "__init__", "(", "self", ",", "goals", ":", "List", "[", "Tuple", "[", "str", ",", "np", ".", "ndarray", "]", "]", ",", "task_kwargs", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "task_kwargs", "is", "None", ":", "\n", "            ", "task_kwargs", "=", "{", "}", "\n", "", "self", ".", "task_kwargs", "=", "task_kwargs", "\n", "self", ".", "tasks", "=", "{", "\n", "str", "(", "uuid", ".", "uuid4", "(", ")", ".", "hex", ")", ":", "Task", "(", "conversation", ",", "self", ".", "to_dense", "(", "grid", ")", ",", "**", "self", ".", "task_kwargs", ")", "\n", "for", "conversation", ",", "grid", "in", "goals", "\n", "}", "\n", "self", ".", "task_ids", "=", "list", "(", "self", ".", "tasks", ".", "keys", "(", ")", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.CustomTasks.__getattr__": [[43, 45], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "current", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.CustomTasks.__len__": [[46, 48], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "task_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.CustomTasks.__iter__": [[49, 52], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "task_id", ",", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "yield", "from", "iter", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.CustomTasks.reset": [[53, 57], ["numpy.random.choice", "task_set.CustomTasks.tasks[].reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "", "def", "reset", "(", "self", ")", "->", "Task", ":", "\n", "        ", "task_id", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "task_ids", ")", "\n", "self", ".", "current", "=", "self", ".", "tasks", "[", "task_id", "]", ".", "reset", "(", ")", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.__init__": [[72, 89], ["range", "task_set.RandomTasks.reset", "str", "task_set.RandomTasks.sample_task", "uuid.uuid4"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.sample_task"], ["def", "__init__", "(", "\n", "self", ",", "max_blocks", "=", "4", ",", "\n", "height_levels", "=", "1", ",", "allow_float", "=", "False", ",", "max_dist", "=", "2", ",", "\n", "num_colors", "=", "1", ",", "max_cache", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "height_levels", "=", "height_levels", "\n", "self", ".", "max_blocks", "=", "max_blocks", "\n", "self", ".", "allow_float", "=", "allow_float", "\n", "self", ".", "max_dist", "=", "max_dist", "\n", "self", ".", "num_colors", "=", "num_colors", "\n", "self", ".", "max_cache", "=", "max_cache", "\n", "self", ".", "tasks", "=", "{", "}", "\n", "self", ".", "current", "=", "None", "\n", "for", "_", "in", "range", "(", "self", ".", "max_cache", ")", ":", "\n", "            ", "uid", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ".", "hex", ")", "\n", "self", ".", "tasks", "[", "uid", "]", "=", "self", ".", "sample_task", "(", ")", "\n", "", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.__getattr__": [[90, 92], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "current", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.dump": [[93, 96], ["open", "pickle.dump", "task_set.RandomTasks.tasks.items"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.dump"], ["", "def", "dump", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "{", "uid", ":", "t", ".", "target_grid", "for", "uid", ",", "t", "in", "self", ".", "tasks", ".", "items", "(", ")", "}", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.load": [[97, 101], ["open", "pickle.load", "task.Task", "pickle.load.items"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.load"], ["", "", "def", "load", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "grids", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "tasks", "=", "{", "uid", ":", "Task", "(", "''", ",", "g", ")", "for", "uid", ",", "g", "in", "grids", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.__len__": [[102, 104], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "max_cache", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.__iter__": [[105, 108], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "task", "in", "self", ".", "tasks", ":", "\n", "            ", "yield", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.__repr__": [[109, 120], ["dict", "dict.items"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "hps", "=", "dict", "(", "\n", "max_blocks", "=", "self", ".", "max_blocks", ",", "\n", "height_levels", "=", "self", ".", "height_levels", ",", "\n", "allow_float", "=", "self", ".", "allow_float", ",", "\n", "max_dist", "=", "self", ".", "max_dist", ",", "\n", "num_colors", "=", "self", ".", "num_colors", ",", "\n", "max_cache", "=", "self", ".", "max_cache", ",", "\n", ")", "\n", "hp_str", "=", "', '", ".", "join", "(", "f'{k}={v}'", "for", "k", ",", "v", "in", "hps", ".", "items", "(", ")", ")", "\n", "return", "f'RandomTasks({hp_str})'", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.reset": [[121, 130], ["numpy.random.choice", "task_set.RandomTasks.sample_task", "list", "task_set.RandomTasks.tasks.keys"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.sample_task"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "max_cache", ">", "0", ":", "\n", "            ", "sample", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "self", ".", "tasks", ".", "keys", "(", ")", ")", ")", "\n", "self", ".", "current", "=", "self", ".", "tasks", "[", "sample", "]", "\n", "self", ".", "current_id", "=", "sample", "\n", "return", "self", ".", "current", "\n", "", "else", ":", "\n", "            ", "self", ".", "current", "=", "self", ".", "sample_task", "(", ")", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.set_task": [[131, 134], ["None"], "methods", ["None"], ["", "", "def", "set_task", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "current", "=", "self", ".", "tasks", "[", "task_id", "]", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.sample_task": [[135, 158], ["numpy.zeros", "range", "task.Task", "numpy.random.choice", "numpy.random.choice", "range", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "sample_task", "(", "self", ")", ":", "\n", "        ", "chat", "=", "''", "\n", "target_grid", "=", "np", ".", "zeros", "(", "BUILD_ZONE_SIZE", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "height", "in", "range", "(", "self", ".", "height_levels", ")", ":", "\n", "            ", "shape", "=", "target_grid", "[", "height", "]", ".", "shape", "\n", "block_x", "=", "np", ".", "random", ".", "choice", "(", "BUILD_ZONE_SIZE_X", ")", "\n", "block_z", "=", "np", ".", "random", ".", "choice", "(", "BUILD_ZONE_SIZE_Z", ")", "\n", "color", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_colors", ")", "+", "1", "\n", "target_grid", "[", "height", ",", "block_x", ",", "block_z", "]", "=", "color", "\n", "for", "_", "in", "range", "(", "self", ".", "max_blocks", "-", "1", ")", ":", "\n", "                ", "block_delta_x", ",", "block_delta_z", "=", "0", ",", "0", "\n", "while", "block_delta_x", "==", "0", "and", "block_delta_z", "==", "0", "or", "block_x", "+", "block_delta_x", ">=", "BUILD_ZONE_SIZE_X", "or", "block_z", "+", "block_delta_z", ">=", "BUILD_ZONE_SIZE_Z", "or", "block_x", "+", "block_delta_x", "<", "0", "or", "block_z", "+", "block_delta_z", "<", "0", "or", "target_grid", "[", "height", ",", "block_x", "+", "block_delta_x", ",", "block_z", "+", "block_delta_z", "]", "!=", "0", ":", "\n", "                    ", "block_delta_x", "=", "np", ".", "random", ".", "choice", "(", "2", "*", "self", ".", "max_dist", "+", "1", ")", "-", "self", ".", "max_dist", "\n", "block_delta_z", "=", "np", ".", "random", ".", "choice", "(", "2", "*", "self", ".", "max_dist", "+", "1", ")", "-", "self", ".", "max_dist", "\n", "color", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "num_colors", ")", "+", "1", "\n", "", "target_grid", "[", "height", ",", "block_x", "+", "block_delta_x", ",", "block_z", "+", "block_delta_z", "]", "=", "color", "\n", "\n", "", "", "return", "Task", "(", "chat", ",", "target_grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.__init__": [[9, 53], ["range", "task.Task.target_grids.append", "full_grids.append", "range", "range", "range", "numpy.zeros", "numpy.zeros", "range", "range", "range", "task.Task.admissible[].append", "max", "max", "min", "min"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "chat", ",", "target_grid", ",", "last_instruction", "=", "None", ",", "starting_grid", "=", "None", ",", "full_grid", "=", "None", ",", "invariant", "=", "True", ")", ":", "\n", "        ", "self", ".", "chat", "=", "chat", "\n", "self", ".", "starting_grid", "=", "starting_grid", "\n", "self", ".", "last_instruction", "=", "last_instruction", "\n", "self", ".", "full_grid", "=", "full_grid", "\n", "self", ".", "admissible", "=", "[", "[", "]", "for", "_", "in", "range", "(", "4", ")", "]", "\n", "self", ".", "target_size", "=", "(", "target_grid", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "self", ".", "full_size", "=", "self", ".", "target_size", "\n", "if", "full_grid", "is", "not", "None", ":", "\n", "            ", "self", ".", "full_size", "=", "(", "full_grid", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "self", ".", "target_grid", "=", "target_grid", "\n", "self", ".", "target_grids", "=", "[", "target_grid", "]", "\n", "full_grids", "=", "[", "full_grid", "]", "\n", "self", ".", "max_int", "=", "0", "\n", "self", ".", "prev_grid_size", "=", "0", "\n", "self", ".", "right_placement", "=", "0", "\n", "self", ".", "wrong_placement", "=", "0", "\n", "# fill self.target_grids with four rotations of the original grid around the vertical axis", "\n", "for", "_", "in", "range", "(", "3", ")", ":", "\n", "            ", "self", ".", "target_grids", ".", "append", "(", "np", ".", "zeros", "(", "target_grid", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "full_grids", ".", "append", "(", "np", ".", "zeros", "(", "target_grid", ".", "shape", ",", "dtype", "=", "np", ".", "int32", ")", ")", "\n", "for", "x", "in", "range", "(", "BUILD_ZONE_SIZE_X", ")", ":", "\n", "                ", "for", "z", "in", "range", "(", "BUILD_ZONE_SIZE_Z", ")", ":", "\n", "                    ", "self", ".", "target_grids", "[", "-", "1", "]", "[", ":", ",", "z", ",", "BUILD_ZONE_SIZE_X", "-", "x", "-", "1", "]", "=", "self", ".", "target_grids", "[", "-", "2", "]", "[", ":", ",", "x", ",", "z", "]", "\n", "if", "full_grid", "is", "not", "None", ":", "\n", "                        ", "full_grids", "[", "-", "1", "]", "[", ":", ",", "z", ",", "BUILD_ZONE_SIZE_X", "-", "x", "-", "1", "]", "=", "full_grids", "[", "-", "2", "]", "[", ":", ",", "x", ",", "z", "]", "\n", "# (dx, dz) is admissible iff the translation of target grid by (dx, dz) preserve (== doesn't cut)", "\n", "# target structure within original (unshifted) target grid", "\n", "", "", "", "", "if", "not", "invariant", ":", "\n", "            ", "self", ".", "admissible", "=", "[", "[", "(", "0", ",", "0", ")", "]", "]", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "if", "full_grid", "is", "not", "None", ":", "\n", "                    ", "grid", "=", "full_grids", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "grid", "=", "self", ".", "target_grids", "[", "i", "]", "\n", "", "for", "dx", "in", "range", "(", "-", "BUILD_ZONE_SIZE_X", "+", "1", ",", "BUILD_ZONE_SIZE_X", ")", ":", "\n", "                    ", "for", "dz", "in", "range", "(", "-", "BUILD_ZONE_SIZE_Z", "+", "1", ",", "BUILD_ZONE_SIZE_Z", ")", ":", "\n", "                        ", "sls_target", "=", "grid", "[", ":", ",", "max", "(", "dx", ",", "0", ")", ":", "BUILD_ZONE_SIZE_X", "+", "min", "(", "dx", ",", "0", ")", ",", "\n", "max", "(", "dz", ",", "0", ")", ":", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "dz", ",", "0", ")", ":", "]", "\n", "if", "(", "sls_target", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "self", ".", "full_size", ":", "\n", "                            ", "self", ".", "admissible", "[", "i", "]", ".", "append", "(", "(", "dx", ",", "dz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.reset": [[54, 67], ["task.Task.maximal_intersection", "len", "task.Tasks.to_dense"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.maximal_intersection", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_dense"], ["", "", "", "", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        placeholder method to have uniform interface with `Tasks` class.\n        Resets all fields at initialization of the new episode.\n        \"\"\"", "\n", "if", "self", ".", "starting_grid", "is", "not", "None", ":", "\n", "            ", "self", ".", "max_int", "=", "self", ".", "maximal_intersection", "(", "Tasks", ".", "to_dense", "(", "self", ".", "starting_grid", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_int", "=", "0", "\n", "", "self", ".", "prev_grid_size", "=", "len", "(", "self", ".", "starting_grid", ")", "if", "self", ".", "starting_grid", "is", "not", "None", "else", "0", "\n", "self", ".", "right_placement", "=", "0", "\n", "self", ".", "wrong_placement", "=", "0", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.__len__": [[70, 72], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.__iter__": [[73, 75], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "yield", "self", "\n", "###", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.step_intersection": [[77, 94], ["task.Task.maximal_intersection"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.maximal_intersection"], ["", "def", "step_intersection", "(", "self", ",", "grid", ")", ":", "\n", "        ", "\"\"\"\n        Calculates the difference between the maximal intersection at previous step and the current one.\n        Note that the method updates object fields to save the grid size.\n\n        Args (grid): current grid\n        \"\"\"", "\n", "grid_size", "=", "(", "grid", "!=", "0", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "wrong_placement", "=", "(", "self", ".", "prev_grid_size", "-", "grid_size", ")", "\n", "max_int", "=", "self", ".", "maximal_intersection", "(", "grid", ")", "if", "wrong_placement", "!=", "0", "else", "self", ".", "max_int", "\n", "done", "=", "max_int", "==", "self", ".", "target_size", "\n", "self", ".", "prev_grid_size", "=", "grid_size", "\n", "right_placement", "=", "(", "max_int", "-", "self", ".", "max_int", ")", "\n", "self", ".", "max_int", "=", "max_int", "\n", "self", ".", "right_placement", "=", "right_placement", "\n", "self", ".", "wrong_placement", "=", "wrong_placement", "\n", "return", "right_placement", ",", "wrong_placement", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.argmax_intersection": [[95, 111], ["enumerate", "slice", "slice", "slice", "slice", "max", "max", "max", "max", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "argmax_intersection", "(", "self", ",", "grid", ")", ":", "\n", "        ", "max_int", ",", "argmax", "=", "0", ",", "(", "0", ",", "0", ",", "0", ")", "\n", "for", "i", ",", "admissible", "in", "enumerate", "(", "self", ".", "admissible", ")", ":", "\n", "            ", "for", "dx", ",", "dz", "in", "admissible", ":", "\n", "                ", "x_sls", "=", "slice", "(", "max", "(", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "dz", ",", "0", ")", ")", "\n", "sls_target", "=", "self", ".", "target_grids", "[", "i", "]", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "\n", "x_sls", "=", "slice", "(", "max", "(", "-", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "-", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "-", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "-", "dz", ",", "0", ")", ")", "\n", "sls_grid", "=", "grid", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "intersection", "=", "(", "(", "sls_target", "==", "sls_grid", ")", "&", "(", "sls_target", "!=", "0", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "intersection", ">", "max_int", ":", "\n", "                    ", "max_int", "=", "intersection", "\n", "argmax", "=", "(", "dx", ",", "dz", ",", "i", ")", "\n", "", "", "", "return", "argmax", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.get_intersection": [[112, 120], ["slice", "slice", "slice", "slice", "max", "max", "max", "max", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "get_intersection", "(", "self", ",", "grid", ",", "dx", ",", "dz", ",", "rot", ")", ":", "\n", "        ", "x_sls", "=", "slice", "(", "max", "(", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "dz", ",", "0", ")", ")", "\n", "sls_target", "=", "self", ".", "target_grids", "[", "rot", "]", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "x_sls", "=", "slice", "(", "max", "(", "-", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "-", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "-", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "-", "dz", ",", "0", ")", ")", "\n", "sls_grid", "=", "grid", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "return", "(", "(", "sls_target", "==", "sls_grid", ")", "&", "(", "sls_target", "!=", "0", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Task.maximal_intersection": [[121, 136], ["enumerate", "slice", "slice", "slice", "slice", "max", "max", "max", "max", "min", "min", "min", "min"], "methods", ["None"], ["", "def", "maximal_intersection", "(", "self", ",", "grid", ")", ":", "\n", "        ", "max_int", "=", "0", "\n", "for", "i", ",", "admissible", "in", "enumerate", "(", "self", ".", "admissible", ")", ":", "\n", "            ", "for", "dx", ",", "dz", "in", "admissible", ":", "\n", "                ", "x_sls", "=", "slice", "(", "max", "(", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "dz", ",", "0", ")", ")", "\n", "sls_target", "=", "self", ".", "target_grids", "[", "i", "]", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "\n", "x_sls", "=", "slice", "(", "max", "(", "-", "dx", ",", "0", ")", ",", "BUILD_ZONE_SIZE_X", "+", "min", "(", "-", "dx", ",", "0", ")", ")", "\n", "z_sls", "=", "slice", "(", "max", "(", "-", "dz", ",", "0", ")", ",", "BUILD_ZONE_SIZE_Z", "+", "min", "(", "-", "dz", ",", "0", ")", ")", "\n", "sls_grid", "=", "grid", "[", ":", ",", "x_sls", ",", "z_sls", "]", "\n", "intersection", "=", "(", "(", "sls_target", "==", "sls_grid", ")", "&", "(", "sls_target", "!=", "0", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "intersection", ">", "max_int", ":", "\n", "                    ", "max_int", "=", "intersection", "\n", "", "", "", "return", "max_int", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_dense": [[141, 150], ["isinstance", "all", "numpy.zeros", "isinstance"], "methods", ["None"], ["@", "classmethod", "\n", "def", "to_dense", "(", "cls", ",", "blocks", ")", ":", "\n", "        ", "if", "isinstance", "(", "blocks", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "if", "all", "(", "isinstance", "(", "b", ",", "(", "list", ",", "tuple", ")", ")", "for", "b", "in", "blocks", ")", ":", "\n", "                ", "grid", "=", "np", ".", "zeros", "(", "BUILD_ZONE_SIZE", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "x", ",", "y", ",", "z", ",", "block_id", "in", "blocks", ":", "\n", "                    ", "grid", "[", "y", "+", "1", ",", "x", "+", "BUILD_ZONE_SIZE_X", "//", "2", ",", "z", "+", "BUILD_ZONE_SIZE_Z", "//", "2", "]", "=", "block_id", "\n", "", "blocks", "=", "grid", "\n", "", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_sparse": [[151, 162], ["isinstance", "blocks.nonzero", "new_blocks.append", "zip", "zip"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "to_sparse", "(", "cls", ",", "blocks", ")", ":", "\n", "        ", "if", "isinstance", "(", "blocks", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "idx", "=", "blocks", ".", "nonzero", "(", ")", "\n", "types", "=", "[", "blocks", "[", "i", "]", "for", "i", "in", "zip", "(", "*", "idx", ")", "]", "\n", "blocks", "=", "[", "(", "*", "i", ",", "t", ")", "for", "*", "i", ",", "t", "in", "zip", "(", "*", "idx", ",", "types", ")", "]", "\n", "new_blocks", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "z", ",", "bid", "in", "blocks", ":", "\n", "                ", "new_blocks", ".", "append", "(", "(", "x", "-", "BUILD_ZONE_SIZE_X", "//", "2", ",", "y", "-", "1", ",", "z", "-", "BUILD_ZONE_SIZE_Z", "//", "2", ",", "bid", ")", ")", "\n", "", "blocks", "=", "new_blocks", "\n", "", "return", "blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.reset": [[163, 165], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", "->", "Task", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.__len__": [[166, 168], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.__iter__": [[169, 171], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.set_task": [[172, 174], ["None"], "methods", ["None"], ["", "def", "set_task", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.get_target": [[175, 177], ["None"], "methods", ["None"], ["", "def", "get_target", "(", "self", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.set_task_obj": [[178, 180], ["None"], "methods", ["None"], ["", "def", "set_task_obj", "(", "self", ",", "task", ":", "Task", ")", ":", "\n", "        ", "return", "NotImplemented", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.__init__": [[185, 196], ["task.Subtasks.to_dense", "task.Subtasks.reset"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_dense", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["def", "__init__", "(", "self", ",", "dialog", ",", "structure_seq", ",", "invariant", "=", "False", ",", "progressive", "=", "True", ")", "->", "None", ":", "\n", "        ", "self", ".", "dialog", "=", "dialog", "\n", "self", ".", "invariant", "=", "invariant", "\n", "self", ".", "progressive", "=", "progressive", "\n", "self", ".", "structure_seq", "=", "structure_seq", "\n", "self", ".", "next", "=", "None", "\n", "self", ".", "full", "=", "False", "\n", "self", ".", "task_start", "=", "0", "\n", "self", ".", "task_goal", "=", "0", "\n", "self", ".", "full_structure", "=", "self", ".", "to_dense", "(", "self", ".", "structure_seq", "[", "-", "1", "]", ")", "\n", "self", ".", "current", "=", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.__getattr__": [[197, 199], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "current", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.reset": [[200, 219], ["task.Subtasks.create_task", "len", "numpy.random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.create_task"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Randomly selects a random task within the task sequence. \n        Each task is sampled with some non-trilial context (prior dialogs and\n        starting structure) and one utterance goal instruction\n        \"\"\"", "\n", "if", "self", ".", "next", "is", "None", ":", "\n", "            ", "if", "len", "(", "self", ".", "structure_seq", ")", "==", "1", ":", "\n", "                ", "turn", "=", "0", "\n", "", "else", ":", "\n", "                ", "turn", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "structure_seq", ")", ")", "\n", "", "turn_goal", "=", "turn", "+", "1", "\n", "", "else", ":", "\n", "            ", "turn", "=", "self", ".", "next", "\n", "turn_goal", "=", "self", ".", "next", "+", "1", "\n", "", "self", ".", "task_start", "=", "turn", "\n", "self", ".", "task_goal", "=", "turn_goal", "\n", "self", ".", "current", "=", "self", ".", "create_task", "(", "self", ".", "task_start", ",", "self", ".", "task_goal", ")", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.__len__": [[220, 222], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "len", "(", "self", ".", "structure_seq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.__iter__": [[223, 226], ["range", "len", "task.Subtasks.create_task"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.create_task"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "yield", "self", ".", "create_task", "(", "i", "-", "1", ",", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.create_task": [[227, 254], ["Task.Task", "Task.Task.reset", "isinstance", "min", "Task.Subtasks.to_dense", "Task.Subtasks.to_sparse", "len", "len"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_dense", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Tasks.to_sparse"], ["", "", "def", "create_task", "(", "self", ",", "turn_start", ":", "int", ",", "turn_goal", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Returns a task with context defined by `turn_start` and goal defined \n        by `turn_goal`\n\n        \"\"\"", "\n", "dialog", "=", "''", "\n", "for", "turn", "in", "self", ".", "dialog", "[", ":", "turn_goal", "+", "1", "]", ":", "\n", "            ", "if", "isinstance", "(", "turn", ",", "list", ")", ":", "\n", "                ", "turn", "=", "'\\n'", ".", "join", "(", "turn", ")", "\n", "", "dialog", "+=", "'\\n'", "+", "turn", "if", "len", "(", "dialog", ")", ">", "0", "else", "turn", "\n", "# dialog = '\\n'.join([utt for utt in self.dialog[:turn_goal] if utt is not None])", "\n", "", "if", "turn_start", "==", "-", "1", ":", "\n", "            ", "initial_blocks", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "initial_blocks", "=", "self", ".", "structure_seq", "[", "turn_start", "]", "\n", "", "tid", "=", "min", "(", "turn_goal", ",", "len", "(", "self", ".", "structure_seq", ")", "-", "1", ")", "if", "not", "self", ".", "full", "else", "-", "1", "\n", "target_grid", "=", "self", ".", "structure_seq", "[", "tid", "]", "\n", "task", "=", "Task", "(", "\n", "dialog", ",", "target_grid", "=", "self", ".", "to_dense", "(", "target_grid", ")", ",", "\n", "starting_grid", "=", "self", ".", "to_sparse", "(", "initial_blocks", ")", ",", "\n", "full_grid", "=", "self", ".", "full_structure", ",", "\n", "last_instruction", "=", "'\\n'", ".", "join", "(", "self", ".", "dialog", "[", "tid", "]", ")", "\n", ")", "\n", "# To properly init max_int and prev_grid_size fields", "\n", "task", ".", "reset", "(", ")", "\n", "return", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.step_intersection": [[255, 266], ["task.Subtasks.current.step_intersection", "task.Subtasks.create_task", "task.Subtasks.current.step_intersection", "len"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.step_intersection", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.create_task", "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.step_intersection"], ["", "def", "step_intersection", "(", "self", ",", "grid", ")", ":", "\n", "        ", "\"\"\"\n        \n        \"\"\"", "\n", "right_placement", ",", "wrong_placement", ",", "done", "=", "self", ".", "current", ".", "step_intersection", "(", "grid", ")", "\n", "if", "done", "and", "len", "(", "self", ".", "structure_seq", ")", ">", "self", ".", "task_goal", "and", "self", ".", "progressive", ":", "\n", "            ", "self", ".", "task_goal", "+=", "1", "\n", "self", ".", "current", "=", "self", ".", "create_task", "(", "self", ".", "task_start", ",", "self", ".", "task_goal", ")", "\n", "self", ".", "current", ".", "prev_grid_size", "=", "0", "\n", "_", ",", "_", ",", "done", "=", "self", ".", "current", ".", "step_intersection", "(", "grid", ")", "# to initialize things properly", "\n", "", "return", "right_placement", ",", "wrong_placement", ",", "done", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.set_task": [[267, 271], ["task.Subtasks.create_task"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.create_task"], ["", "def", "set_task", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "task_id", "=", "task_id", "\n", "self", ".", "current", "=", "self", ".", "create_task", "(", "task_id", ")", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task.Subtasks.set_task_obj": [[272, 276], ["None"], "methods", ["None"], ["", "def", "set_task_obj", "(", "self", ",", "task", ":", "Task", ")", ":", "\n", "        ", "self", ".", "task_id", "=", "None", "\n", "self", ".", "current", "=", "task", "\n", "return", "self", ".", "current", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.__init__": [[94, 110], ["pandas.read_csv", "collections.defaultdict", "iglu_dataset.IGLUDataset.parse_tasks", "load.download", "os.path.exists", "zipfile.ZipFile", "zfile.extractall"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.parse_tasks", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.download"], ["def", "__init__", "(", "self", ",", "task_kwargs", "=", "None", ",", "force_download", "=", "False", ")", "->", "None", ":", "\n", "        ", "if", "task_kwargs", "is", "None", ":", "\n", "            ", "task_kwargs", "=", "{", "}", "\n", "", "self", ".", "task_kwargs", "=", "task_kwargs", "\n", "path", "=", "f'{DATA_PREFIX}/iglu_dataset.zip'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f'{DATA_PREFIX}/dialogs.csv'", ")", "or", "force_download", ":", "\n", "            ", "download", "(", "\n", "url", "=", "IGLUDataset", ".", "URL", ",", "\n", "destination", "=", "path", ",", "\n", "data_prefix", "=", "DATA_PREFIX", "\n", ")", "\n", "with", "ZipFile", "(", "path", ")", "as", "zfile", ":", "\n", "                ", "zfile", ".", "extractall", "(", "DATA_PREFIX", ")", "\n", "", "", "dialogs", "=", "pd", ".", "read_csv", "(", "f'{DATA_PREFIX}/dialogs.csv'", ")", "\n", "self", ".", "tasks", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "parse_tasks", "(", "dialogs", ",", "DATA_PREFIX", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.process": [[111, 113], ["re.sub"], "methods", ["None"], ["", "def", "process", "(", "self", ",", "s", ")", ":", "\n", "        ", "return", "re", ".", "sub", "(", "r'\\$+'", ",", "'\\n'", ",", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.parse_tasks": [[114, 161], ["dialogs.groupby", "gr.sort_values().reset_index().iterrows", "os.path.exists", "len", "len", "len", "tasks.task.Subtasks", "iglu_dataset.IGLUDataset.tasks[].append", "gr.structureId.unique", "gr.sort_values().reset_index", "isinstance", "isinstance", "blocks.append", "len", "utt_seq.append", "utt_seq[].append", "isinstance", "utt_seq[].append", "os.path.exists", "open", "json.load", "block_colour_map.get", "blocks[].append", "gr.sort_values", "utt_seq[].append", "len", "iglu_dataset.IGLUDataset.process", "iglu_dataset.IGLUDataset.process", "iglu_dataset.IGLUDataset.process"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.load", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.process", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.process", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.process"], ["", "def", "parse_tasks", "(", "self", ",", "dialogs", ",", "path", ")", ":", "\n", "        ", "for", "sess_id", ",", "gr", "in", "dialogs", ".", "groupby", "(", "'PartitionKey'", ")", ":", "\n", "            ", "utt_seq", "=", "[", "]", "\n", "blocks", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "f'{path}/builder-data/{sess_id}'", ")", ":", "\n", "                ", "continue", "\n", "", "assert", "len", "(", "gr", ".", "structureId", ".", "unique", "(", ")", ")", "==", "1", "\n", "structure_id", "=", "gr", ".", "structureId", ".", "values", "[", "0", "]", "\n", "for", "i", ",", "row", "in", "gr", ".", "sort_values", "(", "'StepId'", ")", ".", "reset_index", "(", "drop", "=", "True", ")", ".", "iterrows", "(", ")", ":", "\n", "                ", "if", "row", ".", "StepId", "%", "2", "==", "1", ":", "\n", "                    ", "if", "isinstance", "(", "row", ".", "instruction", ",", "str", ")", ":", "\n", "                        ", "utt_seq", ".", "append", "(", "[", "]", ")", "\n", "utt_seq", "[", "-", "1", "]", ".", "append", "(", "f'<Architect> {self.process(row.instruction)}'", ")", "\n", "", "elif", "isinstance", "(", "row", ".", "Answer4ClarifyingQuestion", ",", "str", ")", ":", "\n", "                        ", "utt_seq", "[", "-", "1", "]", ".", "append", "(", "f'<Architect> {self.process(row.Answer4ClarifyingQuestion)}'", ")", "\n", "", "", "else", ":", "\n", "                    ", "if", "not", "row", ".", "IsHITQualified", ":", "\n", "                        ", "continue", "\n", "", "if", "isinstance", "(", "row", ".", "ClarifyingQuestion", ",", "str", ")", ":", "\n", "                        ", "utt_seq", "[", "-", "1", "]", ".", "append", "(", "f'<Builder> {self.process(row.ClarifyingQuestion)}'", ")", "\n", "continue", "\n", "", "blocks", ".", "append", "(", "[", "]", ")", "\n", "curr_step", "=", "f'{path}/builder-data/{sess_id}/step-{row.StepId}'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "curr_step", ")", ":", "\n", "                        ", "break", "\n", "# TODO: in this case the multiturn collection was likely ", "\n", "# \"reset\" so we need to stop parsing this session. Need to check that.", "\n", "", "with", "open", "(", "curr_step", ")", "as", "f", ":", "\n", "                        ", "step_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "for", "x", ",", "y", ",", "z", ",", "bid", "in", "step_data", "[", "'worldEndingState'", "]", "[", "'blocks'", "]", ":", "\n", "                        ", "y", "=", "y", "-", "VOXELWORLD_GROUND_LEVEL", "-", "1", "\n", "bid", "=", "block_colour_map", ".", "get", "(", "bid", ",", "5", ")", "# TODO: some blocks have id 1, check why", "\n", "blocks", "[", "-", "1", "]", ".", "append", "(", "(", "x", ",", "y", ",", "z", ",", "bid", ")", ")", "\n", "", "", "", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "blocks", ")", ":", "\n", "                ", "if", "len", "(", "blocks", "[", "i", "]", ")", "==", "0", ":", "\n", "                    ", "if", "i", "==", "len", "(", "blocks", ")", "-", "1", ":", "\n", "                        ", "blocks", "=", "blocks", "[", ":", "i", "]", "\n", "utt_seq", "=", "utt_seq", "[", ":", "i", "]", "\n", "", "else", ":", "\n", "                        ", "blocks", "=", "blocks", "[", ":", "i", "]", "+", "blocks", "[", "i", "+", "1", ":", "]", "\n", "utt_seq", "[", "i", "]", "=", "utt_seq", "[", "i", "]", "+", "utt_seq", "[", "i", "+", "1", "]", "\n", "utt_seq", "=", "utt_seq", "[", ":", "i", "+", "1", "]", "+", "utt_seq", "[", "i", "+", "2", ":", "]", "\n", "", "", "i", "+=", "1", "\n", "", "if", "len", "(", "blocks", ")", ">", "0", ":", "\n", "                ", "task", "=", "Subtasks", "(", "utt_seq", ",", "blocks", ",", "**", "self", ".", "task_kwargs", ")", "\n", "self", ".", "tasks", "[", "structure_id", "]", ".", "append", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.reset": [[162, 167], ["numpy.random.choice", "numpy.random.choice", "iglu_dataset.IGLUDataset.current.reset", "list", "len", "iglu_dataset.IGLUDataset.tasks.keys"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "sample", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "self", ".", "tasks", ".", "keys", "(", ")", ")", ")", "\n", "sess_id", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "tasks", "[", "sample", "]", ")", ")", "\n", "self", ".", "current", "=", "self", ".", "tasks", "[", "sample", "]", "[", "sess_id", "]", "\n", "return", "self", ".", "current", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.__len__": [[168, 170], ["sum", "len", "sum", "iglu_dataset.IGLUDataset.tasks.values"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "len", "(", "sess", ".", "structure_seq", ")", "for", "sess", "in", "sum", "(", "self", ".", "tasks", ".", "values", "(", ")", ",", "[", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.IGLUDataset.__iter__": [[171, 176], ["iglu_dataset.IGLUDataset.tasks.items", "enumerate", "enumerate"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "task_id", ",", "tasks", "in", "self", ".", "tasks", ".", "items", "(", ")", ":", "\n", "            ", "for", "j", ",", "task", "in", "enumerate", "(", "tasks", ")", ":", "\n", "                ", "for", "k", ",", "subtask", "in", "enumerate", "(", "task", ")", ":", "\n", "                    ", "yield", "task_id", ",", "j", ",", "k", ",", "subtask", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.fix_xyz": [[31, 53], ["None"], "function", ["None"], ["def", "fix_xyz", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "XMAX", "=", "11", "\n", "YMAX", "=", "9", "\n", "ZMAX", "=", "11", "\n", "COORD_SHIFT", "=", "[", "5", ",", "-", "63", ",", "5", "]", "\n", "\n", "x", "+=", "COORD_SHIFT", "[", "0", "]", "\n", "y", "+=", "COORD_SHIFT", "[", "1", "]", "\n", "z", "+=", "COORD_SHIFT", "[", "2", "]", "\n", "\n", "index", "=", "z", "+", "y", "*", "YMAX", "+", "x", "*", "YMAX", "*", "ZMAX", "\n", "new_x", "=", "index", "//", "(", "YMAX", "*", "ZMAX", ")", "\n", "index", "%=", "(", "YMAX", "*", "ZMAX", ")", "\n", "new_y", "=", "index", "//", "ZMAX", "\n", "index", "%=", "ZMAX", "\n", "new_z", "=", "index", "%", "ZMAX", "\n", "\n", "new_x", "-=", "COORD_SHIFT", "[", "0", "]", "\n", "new_y", "-=", "COORD_SHIFT", "[", "1", "]", "\n", "new_z", "-=", "COORD_SHIFT", "[", "2", "]", "\n", "\n", "return", "new_x", ",", "new_y", ",", "new_z", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.fix_log": [[54, 85], ["log_string.splitlines", "line.split", "iglu_dataset.fix_xyz", "str", "lines.append", "lines.append", "eval", "lines.append"], "function", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.iglu_dataset.fix_xyz"], ["", "def", "fix_log", "(", "log_string", ")", ":", "\n", "    ", "\"\"\"\n    log_string: str\n        log_string should be a string of the full log.\n        It should be multiple lines, each corresponded to a timestamp,\n        and should be separated by newline character.    \n    \"\"\"", "\n", "\n", "lines", "=", "[", "]", "\n", "\n", "for", "line", "in", "log_string", ".", "splitlines", "(", ")", ":", "\n", "\n", "        ", "if", "\"block_change\"", "in", "line", ":", "\n", "            ", "line_splits", "=", "line", ".", "split", "(", "\" \"", ",", "2", ")", "\n", "try", ":", "\n", "                ", "info", "=", "eval", "(", "line_splits", "[", "2", "]", ")", "\n", "", "except", ":", "\n", "                ", "lines", ".", "append", "(", "line", ")", "\n", "continue", "\n", "", "x", ",", "y", ",", "z", "=", "info", "[", "0", "]", ",", "info", "[", "1", "]", ",", "info", "[", "2", "]", "\n", "new_x", ",", "new_y", ",", "new_z", "=", "fix_xyz", "(", "x", ",", "y", ",", "z", ")", "\n", "new_info", "=", "(", "new_x", ",", "new_y", ",", "new_z", ",", "info", "[", "3", "]", ",", "info", "[", "4", "]", ")", "\n", "line_splits", "[", "2", "]", "=", "str", "(", "new_info", ")", "\n", "fixed_line", "=", "\" \"", ".", "join", "(", "line_splits", ")", "\n", "# logging.info(f\"Fixed {line} to {fixed_line}\")", "\n", "\n", "lines", ".", "append", "(", "fixed_line", ")", "\n", "", "else", ":", "\n", "            ", "lines", ".", "append", "(", "line", ")", "\n", "\n", "", "", "return", "\"\\n\"", ".", "join", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.__init__": [[28, 37], ["os.getenv", "ContainerClient.from_container_url", "ImportError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "local_blob_path", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "azure", ".", "storage", ".", "blob", "import", "ContainerClient", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'please install azure blob storage via pip: pip install azure-storage-blob'", ")", "\n", "", "self", ".", "sas_token", "=", "os", ".", "getenv", "(", "\"IGLU_SAS_TOKEN\"", ")", "\n", "self", ".", "sas_url", "=", "\"https://igludatacollection.blob.core.windows.net/iglu-data-task-2?\"", "+", "self", ".", "sas_token", "\n", "self", ".", "container_client", "=", "ContainerClient", ".", "from_container_url", "(", "self", ".", "sas_url", ")", "\n", "self", ".", "local_blob_path", "=", "local_blob_path", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.list_blobs": [[38, 42], ["load.BlobFileDownloader.container_client.list_blobs", "print"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.list_blobs"], ["", "def", "list_blobs", "(", "self", ")", ":", "\n", "        ", "blob_list", "=", "self", ".", "container_client", ".", "list_blobs", "(", ")", "\n", "for", "blob", "in", "blob_list", ":", "\n", "            ", "print", "(", "blob", ".", "name", "+", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.__save_blob__": [[43, 50], ["os.path.join", "os.makedirs", "os.path.dirname", "open", "file.write"], "methods", ["None"], ["", "", "def", "__save_blob__", "(", "self", ",", "file_name", ",", "file_content", ")", ":", "\n", "# Get full path to the file", "\n", "        ", "download_file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "local_blob_path", ",", "file_name", ")", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "download_file_path", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "with", "open", "(", "download_file_path", ",", "\"wb\"", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "file_content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.download_blobs_in_container": [[51, 64], ["load.BlobFileDownloader.container_client.list_blobs", "tqdm.tqdm.tqdm", "ValueError", "str().startswith", "load.BlobFileDownloader.container_client.get_blob_client().download_blob().readall", "load.BlobFileDownloader.__save_blob__", "to_download.append", "str", "load.BlobFileDownloader.container_client.get_blob_client().download_blob", "load.BlobFileDownloader.container_client.get_blob_client"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.list_blobs", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.__save_blob__"], ["", "", "def", "download_blobs_in_container", "(", "self", ",", "prefix", ")", ":", "\n", "        ", "if", "self", ".", "local_blob_path", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'Download path should be not none'", ")", "\n", "", "blob_list", "=", "self", ".", "container_client", ".", "list_blobs", "(", ")", "\n", "to_download", "=", "[", "]", "\n", "for", "blob", "in", "blob_list", ":", "\n", "            ", "if", "str", "(", "blob", ".", "name", ")", ".", "startswith", "(", "prefix", ")", ":", "\n", "                ", "to_download", ".", "append", "(", "blob", ")", "\n", "", "", "for", "blob", "in", "tqdm", "(", "to_download", ",", "desc", "=", "'downloading dataset'", ")", ":", "\n", "# TODO: download by chunks to visualize", "\n", "# TODO: cache chunks to disk", "\n", "            ", "content", "=", "self", ".", "container_client", ".", "get_blob_client", "(", "blob", ")", ".", "download_blob", "(", ")", ".", "readall", "(", ")", "\n", "self", ".", "__save_blob__", "(", "blob", ".", "name", ",", "content", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.download": [[9, 21], ["os.makedirs", "requests.get", "int", "requests.get.headers.get", "open", "tqdm.tqdm", "requests.get.iter_content", "f.write", "pbar.update"], "function", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.update"], ["def", "download", "(", "url", ",", "destination", ",", "data_prefix", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "data_prefix", ",", "exist_ok", "=", "True", ")", "\n", "r", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "CHUNK_SIZE", "=", "1048576", "\n", "total_length", "=", "int", "(", "r", ".", "headers", ".", "get", "(", "'content-length'", ")", ")", "\n", "with", "open", "(", "destination", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "with", "tqdm", "(", "desc", "=", "f'downloading task dataset into {data_prefix}'", ",", "\n", "total", "=", "(", "total_length", "//", "CHUNK_SIZE", ")", "+", "1", ")", "as", "pbar", ":", "\n", "            ", "for", "chunk", "in", "r", ".", "iter_content", "(", "chunk_size", "=", "CHUNK_SIZE", ")", ":", "\n", "                ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "                    ", "f", ".", "write", "(", "chunk", ")", "\n", "pbar", ".", "update", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.download_azure": [[66, 79], ["logger.info", "load.BlobFileDownloader", "BlobFileDownloader.download_blobs_in_container", "logger.info", "os.path.join", "tarfile.open", "tf.extractall"], "function", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.BlobFileDownloader.download_blobs_in_container"], ["", "", "", "def", "download_azure", "(", "directory", "=", "None", ",", "raw_data", "=", "False", ")", ":", "\n", "    ", "logger", ".", "info", "(", "f'downloading data into {directory}'", ")", "\n", "downloader", "=", "BlobFileDownloader", "(", "directory", ")", "\n", "if", "raw_data", ":", "\n", "        ", "prefix", "=", "'raw'", "\n", "", "else", ":", "\n", "        ", "prefix", "=", "'train'", "\n", "", "downloader", ".", "download_blobs_in_container", "(", "prefix", "=", "prefix", ")", "\n", "logger", ".", "info", "(", "'Extracting files...'", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "directory", ",", "f'{prefix}.tar.gz'", ")", "\n", "with", "tarfile", ".", "open", "(", "path", ",", "mode", "=", "\"r:*\"", ")", "as", "tf", ":", "\n", "        ", "tf", ".", "extractall", "(", "path", "=", "directory", ")", "\n", "", "return", "directory", "", "", ""]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.__init__": [[51, 68], ["cdm_dataset.CDMDataset._load_data", "collections.defaultdict", "cdm_dataset.CDMDataset.task_index.groupby", "task_sessions.iterrows", "len", "os.path.join", "tasks.task.Task", "cdm_dataset.CDMDataset.tasks[].append", "os.environ.get", "cdm_dataset.CDMDataset._parse_task", "task_id.lower"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset._load_data", "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset._parse_task"], ["def", "__init__", "(", "self", ",", "task_kwargs", "=", "None", ")", ":", "\n", "        ", "self", ".", "task_index", "=", "None", "\n", "if", "task_kwargs", "is", "None", ":", "\n", "            ", "task_kwargs", "=", "{", "}", "\n", "", "self", ".", "_load_data", "(", "\n", "force_download", "=", "os", ".", "environ", ".", "get", "(", "'IGLU_FORCE_DOWNLOAD'", ",", "'0'", ")", "==", "'1'", ",", "\n", ")", "\n", "self", ".", "task_kwargs", "=", "task_kwargs", "\n", "self", ".", "tasks", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "current", "=", "None", "\n", "for", "task_id", ",", "task_sessions", "in", "self", ".", "task_index", ".", "groupby", "(", "'structure_id'", ")", ":", "\n", "            ", "if", "len", "(", "task_sessions", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "for", "_", ",", "session", "in", "task_sessions", ".", "iterrows", "(", ")", ":", "\n", "                ", "task_path", "=", "os", ".", "path", ".", "join", "(", "DATA_PREFIX", ",", "session", ".", "group", ",", "'logs'", ",", "session", ".", "session_id", ")", "\n", "task", "=", "Task", "(", "*", "self", ".", "_parse_task", "(", "task_path", ",", "task_id", ")", ",", "**", "self", ".", "task_kwargs", ")", "\n", "self", ".", "tasks", "[", "task_id", ".", "lower", "(", ")", "]", ".", "append", "(", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.reset": [[69, 74], ["numpy.random.choice", "numpy.random.choice", "list", "len", "cdm_dataset.CDMDataset.tasks.keys"], "methods", ["None"], ["", "", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "sample", "=", "np", ".", "random", ".", "choice", "(", "list", "(", "self", ".", "tasks", ".", "keys", "(", ")", ")", ")", "\n", "sess_id", "=", "np", ".", "random", ".", "choice", "(", "len", "(", "self", ".", "tasks", "[", "sample", "]", ")", ")", "\n", "self", ".", "current", "=", "self", ".", "tasks", "[", "sample", "]", "[", "sess_id", "]", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.__len__": [[75, 77], ["len", "cdm_dataset.CDMDataset.tasks.values"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "t", "for", "ts", "in", "self", ".", "tasks", ".", "values", "(", ")", "for", "t", "in", "ts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.__iter__": [[78, 82], ["cdm_dataset.CDMDataset.tasks.values"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "ts", "in", "self", ".", "tasks", ".", "values", "(", ")", ":", "\n", "            ", "for", "t", "in", "ts", ":", "\n", "                ", "yield", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.set_task": [[83, 86], ["None"], "methods", ["None"], ["", "", "", "def", "set_task", "(", "self", ",", "task_id", ")", ":", "\n", "        ", "self", ".", "current", "=", "self", ".", "tasks", "[", "task_id", "]", "\n", "return", "self", ".", "current", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset._load_data": [[87, 114], ["os.path.split", "pandas.read_csv", "dict", "os.path.join", "pandas.read_csv", "shutil.rmtree", "os.path.join", "pandas.read_csv.to_records", "os.path.exists", "os.makedirs", "len", "pandas.read_csv", "shutil.rmtree", "os.listdir", "load.download", "os.path.join", "list", "os.path.join", "dir_.startswith", "os.path.exists", "zipfile.ZipFile", "zfile.extractall", "filter", "shutil.rmtree", "os.listdir", "os.path.join", "x.startswith"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.data.load.download"], ["", "def", "_load_data", "(", "self", ",", "force_download", "=", "False", ")", ":", "\n", "        ", "path", "=", "sys", ".", "modules", "[", "__name__", "]", ".", "__file__", "\n", "path_dir", ",", "_", "=", "os", ".", "path", ".", "split", "(", "path", ")", "\n", "tasks", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "path_dir", ",", "'task_names.txt'", ")", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "'task_id'", ",", "'name'", "]", ")", "\n", "CDMDataset", ".", "ALL", "=", "dict", "(", "tasks", ".", "to_records", "(", "index", "=", "False", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "DATA_PREFIX", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "DATA_PREFIX", ",", "exist_ok", "=", "True", ")", "\n", "", "path", "=", "os", ".", "path", ".", "join", "(", "DATA_PREFIX", ",", "'data.zip'", ")", "\n", "done", "=", "len", "(", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "startswith", "(", "'data-'", ")", ",", "os", ".", "listdir", "(", "DATA_PREFIX", ")", ")", ")", ")", "==", "16", "\n", "if", "done", "and", "not", "force_download", ":", "\n", "            ", "self", ".", "task_index", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "DATA_PREFIX", ",", "'index.csv'", ")", ")", "\n", "shutil", ".", "rmtree", "(", "path", ",", "ignore_errors", "=", "True", ")", "\n", "return", "\n", "", "if", "force_download", ":", "\n", "            ", "for", "dir_", "in", "os", ".", "listdir", "(", "DATA_PREFIX", ")", ":", "\n", "                ", "if", "dir_", ".", "startswith", "(", "'data-'", ")", ":", "\n", "                    ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "DATA_PREFIX", ",", "dir_", ")", ",", "ignore_errors", "=", "True", ")", "\n", "", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", "or", "force_download", ":", "\n", "            ", "download", "(", "\n", "url", "=", "CDMDataset", ".", "URL", ",", "\n", "destination", "=", "path", ",", "\n", "data_prefix", "=", "DATA_PREFIX", "\n", ")", "\n", "with", "ZipFile", "(", "path", ")", "as", "zfile", ":", "\n", "                ", "zfile", ".", "extractall", "(", "DATA_PREFIX", ")", "\n", "", "", "self", ".", "task_index", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "DATA_PREFIX", ",", "'index.csv'", ")", ")", "\n", "shutil", ".", "rmtree", "(", "path", ",", "ignore_errors", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset._parse_task": [[115, 144], ["numpy.zeros", "os.path.exists", "open", "json.load", "len", "os.path.split", "zipfile.ZipFile", "zfile.extractall", "os.path.join", "numpy.unique", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.tasks.task_set.RandomTasks.load"], ["", "def", "_parse_task", "(", "self", ",", "path", ",", "task_id", ",", "update_task_dict", "=", "False", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "# try to unzip logs.zip", "\n", "            ", "path_prefix", ",", "top", "=", "path", ",", "''", "\n", "while", "top", "!=", "'logs'", ":", "\n", "                ", "path_prefix", ",", "top", "=", "os", ".", "path", ".", "split", "(", "path_prefix", ")", "\n", "", "with", "ZipFile", "(", "os", ".", "path", ".", "join", "(", "path_prefix", ",", "'logs.zip'", ")", ")", "as", "zfile", ":", "\n", "                ", "zfile", ".", "extractall", "(", "path_prefix", ")", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'postprocessed-observations.json'", ")", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "data", "=", "data", "[", "'WorldStates'", "]", "[", "-", "1", "]", "\n", "chat", "=", "'\\n'", ".", "join", "(", "data", "[", "'ChatHistory'", "]", ")", "\n", "target_grid", "=", "np", ".", "zeros", "(", "BUILD_ZONE_SIZE", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "total_blocks", "=", "0", "\n", "for", "block", "in", "data", "[", "'BlocksInGrid'", "]", ":", "\n", "            ", "coord", "=", "block", "[", "'AbsoluteCoordinates'", "]", "\n", "x", ",", "y", ",", "z", "=", "coord", "[", "'X'", "]", ",", "coord", "[", "'Y'", "]", ",", "coord", "[", "'Z'", "]", "\n", "if", "not", "(", "-", "5", "<=", "x", "<=", "5", "and", "-", "5", "<=", "z", "<=", "5", "and", "0", "<=", "y", "<=", "8", ")", ":", "\n", "                ", "continue", "\n", "", "target_grid", "[", "\n", "coord", "[", "'Y'", "]", "-", "1", ",", "\n", "coord", "[", "'X'", "]", "+", "5", ",", "\n", "coord", "[", "'Z'", "]", "+", "5", "\n", "]", "=", "CDMDataset", ".", "block_map", "[", "block", "[", "'Type'", "]", "]", "\n", "total_blocks", "+=", "1", "\n", "", "if", "update_task_dict", ":", "\n", "            ", "colors", "=", "len", "(", "np", ".", "unique", "(", "[", "b", "[", "'Type'", "]", "for", "b", "in", "data", "[", "'BlocksInGrid'", "]", "]", ")", ")", "\n", "CDMDataset", ".", "ALL", "[", "task_id", "]", "=", "f'{CDMDataset.ALL[task_id]} ({total_blocks} blocks, {colors} colors)'", "\n", "", "return", "chat", ",", "target_grid", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.__repr__": [[145, 148], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "tasks", "=", "\", \"", ".", "join", "(", "f'\"{t}\"'", "for", "t", "in", "self", ".", "task_ids", ")", "\n", "return", "f'TaskSet({tasks})'", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.data.cdm_dataset.CDMDataset.subset": [[149, 152], ["CDMDataset.ALL.items"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "subset", "(", "task_set", ")", ":", "\n", "        ", "return", "{", "k", ":", "v", "for", "k", ",", "v", "in", "CDMDataset", ".", "ALL", ".", "items", "(", ")", "if", "k", "in", "task_set", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.Agent.__init__": [[12, 30], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sustain", "=", "False", ")", "->", "None", ":", "\n", "# When flying gravity has no effect and speed is increased.", "\n", "        ", "self", ".", "flying", "=", "False", "\n", "self", ".", "strafe", "=", "[", "0", ",", "0", "]", "\n", "self", ".", "position", "=", "(", "0", ",", "0", ",", "0", ")", "\n", "self", ".", "rotation", "=", "(", "0", ",", "0", ")", "\n", "self", ".", "reticle", "=", "None", "\n", "\n", "# actions are long-lasting state switches", "\n", "self", ".", "sustain", "=", "sustain", "\n", "\n", "# Velocity in the y (upward) direction.", "\n", "self", ".", "dy", "=", "0", "\n", "self", ".", "time_int_steps", "=", "2", "\n", "self", ".", "inventory", "=", "[", "\n", "20", ",", "20", ",", "20", ",", "20", ",", "20", ",", "20", "\n", "]", "\n", "self", ".", "active_block", "=", "BLUE", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.__init__": [[33, 42], ["set"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "world", "=", "{", "}", "\n", "self", ".", "shown", "=", "{", "}", "\n", "self", ".", "placed", "=", "set", "(", ")", "\n", "self", ".", "callbacks", "=", "{", "\n", "'on_add'", ":", "[", "]", ",", "\n", "'on_remove'", ":", "[", "]", "\n", "}", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_callback": [[43, 45], ["world.World.callbacks[].append"], "methods", ["None"], ["", "def", "add_callback", "(", "self", ",", "name", ",", "func", ")", ":", "\n", "        ", "self", ".", "callbacks", "[", "name", "]", ".", "append", "(", "func", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.deinit": [[47, 56], ["list", "list", "set", "world.World.remove_block", "world.World.world.keys", "world.World.remove_block"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block"], ["", "def", "deinit", "(", "self", ")", ":", "\n", "        ", "for", "block", "in", "list", "(", "self", ".", "placed", ")", ":", "\n", "            ", "self", ".", "remove_block", "(", "block", ")", "\n", "", "self", ".", "initialized", "=", "False", "\n", "for", "block", "in", "list", "(", "self", ".", "world", ".", "keys", "(", ")", ")", ":", "\n", "            ", "self", ".", "remove_block", "(", "block", ")", "\n", "", "self", ".", "world", "=", "{", "}", "\n", "self", ".", "shown", "=", "{", "}", "\n", "self", ".", "placed", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone": [[57, 59], ["None"], "methods", ["None"], ["", "def", "build_zone", "(", "self", ",", "x", ",", "y", ",", "z", ",", "pad", "=", "0", ")", ":", "\n", "        ", "return", "-", "5", "-", "pad", "<=", "x", "<=", "5", "+", "pad", "and", "-", "5", "-", "pad", "<=", "z", "<=", "5", "+", "pad", "and", "-", "1", "-", "pad", "<=", "y", "<", "8", "+", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World._initialize": [[60, 72], ["range", "range", "world.World.add_block", "world.World.build_zone"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone"], ["", "def", "_initialize", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize the world by placing all the blocks.\n\n        \"\"\"", "\n", "n", "=", "18", "# 1/2 width and height of world", "\n", "s", "=", "1", "# step size", "\n", "y", "=", "0", "# initial y height", "\n", "for", "x", "in", "range", "(", "-", "n", ",", "n", "+", "1", ",", "s", ")", ":", "\n", "            ", "for", "z", "in", "range", "(", "-", "n", ",", "n", "+", "1", ",", "s", ")", ":", "\n", "                ", "color", "=", "GREY", "if", "not", "self", ".", "build_zone", "(", "x", ",", "y", ",", "z", ")", "else", "WHITE", "\n", "self", ".", "add_block", "(", "(", "x", ",", "y", "-", "2", ",", "z", ")", ",", "color", ")", "\n", "", "", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.hit_test": [[73, 100], ["range", "utils.normalize"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.normalize"], ["", "def", "hit_test", "(", "self", ",", "position", ",", "vector", ",", "max_distance", "=", "8", ")", ":", "\n", "        ", "\"\"\"\n        Line of sight search from current position. If a block is\n        intersected it is returned, along with the block previously in the line\n        of sight. If no block is found, return None, None.\n\n        Parameters\n        ----------\n        position : tuple of len 3\n            The (x, y, z) position to check visibility from.\n        vector : tuple of len 3\n            The line of sight vector.\n        max_distance : int\n            How many blocks away to search for a hit.\n\n        \"\"\"", "\n", "m", "=", "5", "\n", "x", ",", "y", ",", "z", "=", "position", "\n", "dx", ",", "dy", ",", "dz", "=", "vector", "\n", "previous", "=", "None", "\n", "for", "_", "in", "range", "(", "max_distance", "*", "m", ")", ":", "\n", "            ", "key", "=", "normalize", "(", "(", "x", ",", "y", ",", "z", ")", ")", "\n", "if", "key", "!=", "previous", "and", "key", "in", "self", ".", "world", ":", "\n", "                ", "return", "key", ",", "previous", "\n", "", "previous", "=", "key", "\n", "x", ",", "y", ",", "z", "=", "x", "+", "dx", "/", "m", ",", "y", "+", "dy", "/", "m", ",", "z", "+", "dz", "/", "m", "\n", "", "return", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_block": [[101, 123], ["world.World.remove_block", "cb", "world.World.placed.add", "world.World.build_zone"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone"], ["", "def", "add_block", "(", "self", ",", "position", ",", "texture", ")", ":", "\n", "        ", "\"\"\" Add a block with the given `texture` and `position` to the world.\n\n        Parameters\n        ----------\n        position : tuple of len 3\n            The (x, y, z) position of the block to add.\n        texture : list of len 3\n            The coordinates of the texture squares. Use `tex_coords()` to\n            generate.\n        immediate : bool\n            Whether or not to draw the block immediately.\n\n        \"\"\"", "\n", "if", "position", "in", "self", ".", "world", ":", "\n", "            ", "self", ".", "remove_block", "(", "position", ")", "\n", "", "self", ".", "world", "[", "position", "]", "=", "texture", "\n", "self", ".", "shown", "[", "position", "]", "=", "texture", "\n", "for", "cb", "in", "self", ".", "callbacks", "[", "'on_add'", "]", ":", "\n", "            ", "cb", "(", "position", ",", "texture", ",", "build_zone", "=", "self", ".", "build_zone", "(", "*", "position", ")", ")", "\n", "", "if", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "placed", ".", "add", "(", "position", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block": [[124, 142], ["world.World.shown.pop", "world.World.placed.remove", "cb", "world.World.build_zone"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone"], ["", "", "def", "remove_block", "(", "self", ",", "position", ")", ":", "\n", "        ", "\"\"\" Remove the block at the given `position`.\n\n        Parameters\n        ----------\n        position : tuple of len 3\n            The (x, y, z) position of the block to remove.\n        immediate : bool\n            Whether or not to immediately remove block from canvas.\n\n        \"\"\"", "\n", "del", "self", ".", "world", "[", "position", "]", "\n", "if", "position", "in", "self", ".", "shown", ":", "\n", "            ", "self", ".", "shown", ".", "pop", "(", "position", ")", "\n", "for", "cb", "in", "self", ".", "callbacks", "[", "'on_remove'", "]", ":", "\n", "                ", "cb", "(", "position", ",", "build_zone", "=", "self", ".", "build_zone", "(", "*", "position", ")", ")", "\n", "", "", "if", "self", ".", "initialized", ":", "\n", "            ", "self", ".", "placed", ".", "remove", "(", "position", ")", "\n", "### END BLOCKS RELATED METHODS", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_sight_vector": [[145, 162], ["math.cos", "math.sin", "math.radians", "math.radians", "math.cos", "math.sin", "math.radians", "math.radians"], "methods", ["None"], ["", "", "def", "get_sight_vector", "(", "self", ",", "agent", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current line of sight vector indicating the direction\n        the player is looking.\n\n        \"\"\"", "\n", "x", ",", "y", "=", "agent", ".", "rotation", "\n", "# y ranges from -90 to 90, or -pi/2 to pi/2, so m ranges from 0 to 1 and", "\n", "# is 1 when looking ahead parallel to the ground and 0 when looking", "\n", "# straight up or down.", "\n", "m", "=", "math", ".", "cos", "(", "math", ".", "radians", "(", "y", ")", ")", "\n", "# dy ranges from -1 to 1 and is -1 when looking straight down and 1 when", "\n", "# looking straight up.", "\n", "dy", "=", "math", ".", "sin", "(", "math", ".", "radians", "(", "y", ")", ")", "\n", "dx", "=", "math", ".", "cos", "(", "math", ".", "radians", "(", "x", "-", "90", ")", ")", "*", "m", "\n", "dz", "=", "math", ".", "sin", "(", "math", ".", "radians", "(", "x", "-", "90", ")", ")", "*", "m", "\n", "return", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_motion_vector": [[163, 202], ["any", "math.degrees", "math.radians", "math.radians", "math.atan2", "math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin"], "methods", ["None"], ["", "def", "get_motion_vector", "(", "self", ",", "agent", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current motion vector indicating the velocity of the\n        player.\n\n        Returns\n        -------\n        vector : tuple of len 3\n            Tuple containing the velocity in x, y, and z respectively.\n\n        \"\"\"", "\n", "if", "any", "(", "agent", ".", "strafe", ")", ":", "\n", "            ", "x", ",", "y", "=", "agent", ".", "rotation", "\n", "strafe", "=", "math", ".", "degrees", "(", "math", ".", "atan2", "(", "*", "agent", ".", "strafe", ")", ")", "\n", "y_angle", "=", "math", ".", "radians", "(", "y", ")", "\n", "x_angle", "=", "math", ".", "radians", "(", "x", "+", "strafe", ")", "\n", "if", "agent", ".", "flying", ":", "\n", "                ", "m", "=", "math", ".", "cos", "(", "y_angle", ")", "\n", "dy", "=", "math", ".", "sin", "(", "y_angle", ")", "\n", "if", "agent", ".", "strafe", "[", "1", "]", ":", "\n", "# Moving left or right.", "\n", "                    ", "dy", "=", "0.0", "\n", "m", "=", "1", "\n", "", "if", "agent", ".", "strafe", "[", "0", "]", ">", "0", ":", "\n", "# Moving backwards.", "\n", "                    ", "dy", "*=", "-", "1", "\n", "# When you are flying up or down, you have less left and right", "\n", "# motion.", "\n", "", "dx", "=", "math", ".", "cos", "(", "x_angle", ")", "*", "m", "\n", "dz", "=", "math", ".", "sin", "(", "x_angle", ")", "*", "m", "\n", "", "else", ":", "\n", "                ", "dy", "=", "0.0", "\n", "dx", "=", "math", ".", "cos", "(", "x_angle", ")", "\n", "dz", "=", "math", ".", "sin", "(", "x_angle", ")", "\n", "", "", "else", ":", "\n", "            ", "dy", "=", "0.0", "\n", "dx", "=", "0.0", "\n", "dz", "=", "0.0", "\n", "", "return", "(", "dx", ",", "dy", ",", "dz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.update": [[203, 219], ["min", "range", "world.World._update"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World._update"], ["", "def", "update", "(", "self", ",", "agent", ",", "dt", "=", "1.0", "/", "5", ")", ":", "\n", "        ", "\"\"\" This method is scheduled to be called repeatedly by the pyglet\n        clock.\n\n        Parameters\n        ----------\n        dt : float\n            The change in time since the last call.\n\n        \"\"\"", "\n", "m", "=", "agent", ".", "time_int_steps", "\n", "dt", "=", "min", "(", "dt", ",", "0.2", ")", "\n", "for", "_", "in", "range", "(", "m", ")", ":", "\n", "            ", "self", ".", "_update", "(", "agent", ",", "dt", "/", "m", ")", "\n", "", "if", "not", "agent", ".", "sustain", ":", "\n", "            ", "agent", ".", "strafe", "=", "[", "0", ",", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World._update": [[220, 261], ["world.World.get_motion_vector", "world.World.build_zone", "max", "world.World.collide", "world.World.collide"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_motion_vector", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.collide", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.collide"], ["", "", "def", "_update", "(", "self", ",", "agent", ",", "dt", ")", ":", "\n", "        ", "\"\"\"\n        Private implementation of the `update()` method. This is where most\n        of the motion logic lives, along with gravity and collision detection.\n\n        Parameters\n        ----------\n        dt : float\n            The change in time since the last call.\n\n        \"\"\"", "\n", "# walking", "\n", "speed", "=", "FLYING_SPEED", "if", "agent", ".", "flying", "else", "WALKING_SPEED", "\n", "d", "=", "dt", "*", "speed", "# distance covered this tick.", "\n", "dx", ",", "dy", ",", "dz", "=", "self", ".", "get_motion_vector", "(", "agent", ")", "\n", "# New position in space, before accounting for gravity.", "\n", "dx", ",", "dy", ",", "dz", "=", "dx", "*", "d", ",", "dy", "*", "d", ",", "dz", "*", "d", "\n", "# gravity", "\n", "if", "not", "agent", ".", "flying", ":", "\n", "# Update your vertical speed: if you are falling, speed up until you", "\n", "# hit terminal velocity; if you are jumping, slow down until you", "\n", "# start falling.", "\n", "            ", "agent", ".", "dy", "-=", "dt", "*", "GRAVITY", "\n", "if", "agent", ".", "dy", "<", "-", "14", ":", "\n", "                ", "agent", ".", "time_int_steps", "=", "12", "\n", "", "elif", "agent", ".", "dy", "<", "-", "10", ":", "\n", "                ", "agent", ".", "time_int_steps", "=", "8", "\n", "", "elif", "agent", ".", "dy", "<", "-", "5", ":", "\n", "                ", "agent", ".", "time_int_steps", "=", "4", "\n", "", "else", ":", "\n", "                ", "agent", ".", "time_int_steps", "=", "2", "\n", "", "agent", ".", "dy", "=", "max", "(", "agent", ".", "dy", ",", "-", "TERMINAL_VELOCITY", ")", "\n", "dy", "+=", "agent", ".", "dy", "*", "dt", "\n", "# collisions", "\n", "", "x", ",", "y", ",", "z", "=", "agent", ".", "position", "\n", "cand", "=", "(", "x", "+", "dx", ",", "y", "+", "dy", ",", "z", "+", "dz", ")", "\n", "if", "self", ".", "build_zone", "(", "*", "cand", ",", "pad", "=", "2", ")", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "self", ".", "collide", "(", "agent", ",", "cand", ",", "PLAYER_HEIGHT", ")", "\n", "", "elif", "not", "agent", ".", "flying", ":", "\n", "            ", "x", ",", "y", ",", "z", "=", "self", ".", "collide", "(", "agent", ",", "(", "x", ",", "y", "+", "dy", ",", "z", ")", ",", "PLAYER_HEIGHT", ")", "\n", "", "agent", ".", "position", "=", "(", "x", ",", "y", ",", "z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.collide": [[262, 309], ["list", "utils.normalize", "tuple", "range", "range", "list", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.gridworld.utils.normalize"], ["", "def", "collide", "(", "self", ",", "agent", ",", "position", ",", "height", ",", "new_blocks", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Checks to see if the player at the given `position` and `height`\n        is colliding with any blocks in the world.\n\n        Parameters\n        ----------\n        position : tuple of len 3\n            The (x, y, z) position to check for collisions at.\n        height : int or float\n            The height of the player.\n\n        Returns\n        -------\n        position : tuple of len 3\n            The new position of the player taking into account collisions.\n\n        \"\"\"", "\n", "# How much overlap with a dimension of a surrounding block you need to", "\n", "# have to count as a collision. If 0, touching terrain at all counts as", "\n", "# a collision. If .49, you sink into the ground, as if walking through", "\n", "# tall grass. If >= .5, you'll fall through the ground.", "\n", "pad", "=", "Agent", ".", "PAD", "\n", "p", "=", "list", "(", "position", ")", "\n", "np", "=", "normalize", "(", "position", ")", "\n", "for", "face", "in", "FACES", ":", "# check all surrounding blocks", "\n", "            ", "for", "i", "in", "range", "(", "3", ")", ":", "# check each dimension independently", "\n", "                ", "if", "not", "face", "[", "i", "]", ":", "\n", "                    ", "continue", "\n", "# How much overlap you have with this dimension.", "\n", "", "d", "=", "(", "p", "[", "i", "]", "-", "np", "[", "i", "]", ")", "*", "face", "[", "i", "]", "\n", "if", "d", "<", "pad", ":", "\n", "                    ", "continue", "\n", "", "for", "dy", "in", "range", "(", "height", ")", ":", "# check each height", "\n", "                    ", "op", "=", "list", "(", "np", ")", "\n", "op", "[", "1", "]", "-=", "dy", "\n", "op", "[", "i", "]", "+=", "face", "[", "i", "]", "\n", "if", "tuple", "(", "op", ")", "not", "in", "self", ".", "world", "and", "(", "new_blocks", "is", "None", "or", "tuple", "(", "op", ")", "not", "in", "new_blocks", ")", ":", "\n", "                        ", "continue", "\n", "", "p", "[", "i", "]", "-=", "(", "d", "-", "pad", ")", "*", "face", "[", "i", "]", "\n", "if", "face", "==", "(", "0", ",", "-", "1", ",", "0", ")", "or", "face", "==", "(", "0", ",", "1", ",", "0", ")", ":", "\n", "# You are colliding with the ground or ceiling, so stop", "\n", "# falling / rising.", "\n", "                        ", "agent", ".", "dy", "=", "0", "\n", "", "break", "\n", "", "", "", "return", "tuple", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.place_or_remove_block": [[310, 331], ["world.World.get_sight_vector", "world.World.hit_test", "world.World.remove_block", "world.World.build_zone", "world.World.add_block"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_sight_vector", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.hit_test", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.remove_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.build_zone", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.add_block"], ["", "def", "place_or_remove_block", "(", "self", ",", "agent", ",", "remove", ":", "bool", ",", "place", ":", "bool", ")", ":", "\n", "        ", "if", "place", "and", "remove", "or", "not", "place", "and", "not", "remove", ":", "return", "\n", "vector", "=", "self", ".", "get_sight_vector", "(", "agent", ")", "\n", "block", ",", "previous", "=", "self", ".", "hit_test", "(", "agent", ".", "position", ",", "vector", ")", "\n", "if", "place", ":", "\n", "            ", "if", "previous", ":", "\n", "                ", "if", "agent", ".", "inventory", "[", "agent", ".", "active_block", "-", "1", "]", ">", "0", "and", "self", ".", "build_zone", "(", "*", "previous", ")", ":", "\n", "                    ", "x", ",", "y", ",", "z", "=", "agent", ".", "position", "\n", "y", "=", "y", "-", "(", "PLAYER_HEIGHT", "-", "1", ")", "+", "Agent", ".", "PAD", "\n", "bx", ",", "by", ",", "bz", "=", "previous", "\n", "bx", "-=", "0.5", "\n", "bz", "-=", "0.5", "\n", "if", "not", "(", "bx", "<=", "x", "<=", "bx", "+", "1", "and", "bz", "<=", "z", "<=", "bz", "+", "1", "\n", "and", "(", "by", "<=", "y", "<=", "by", "+", "1", "or", "by", "<=", "(", "y", "+", "1", ")", "<=", "by", "+", "1", ")", ")", ":", "\n", "                        ", "self", ".", "add_block", "(", "previous", ",", "agent", ".", "active_block", ")", "\n", "agent", ".", "inventory", "[", "agent", ".", "active_block", "-", "1", "]", "-=", "1", "\n", "", "", "", "", "if", "remove", "and", "block", ":", "\n", "            ", "texture", "=", "self", ".", "world", "[", "block", "]", "\n", "if", "texture", "!=", "GREY", "and", "texture", "!=", "WHITE", ":", "\n", "                ", "self", ".", "remove_block", "(", "block", ")", "\n", "agent", ".", "inventory", "[", "texture", "-", "1", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_focused_block": [[332, 335], ["world.World.get_sight_vector", "world.World.hit_test"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.get_sight_vector", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.hit_test"], ["", "", "", "def", "get_focused_block", "(", "self", ",", "agent", ")", ":", "\n", "        ", "vector", "=", "self", ".", "get_sight_vector", "(", "agent", ")", "\n", "return", "self", ".", "hit_test", "(", "agent", ".", "position", ",", "vector", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.move_camera": [[336, 341], ["max", "min"], "methods", ["None"], ["", "def", "move_camera", "(", "self", ",", "agent", ",", "dx", ",", "dy", ")", ":", "\n", "        ", "x", ",", "y", "=", "agent", ".", "rotation", "\n", "x", ",", "y", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "y", "=", "max", "(", "-", "90", ",", "min", "(", "90", ",", "y", ")", ")", "\n", "agent", ".", "rotation", "=", "(", "x", ",", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.movement": [[342, 351], ["ValueError"], "methods", ["None"], ["", "def", "movement", "(", "self", ",", "agent", ",", "strafe", ":", "list", ",", "jump", ":", "bool", ",", "inventory", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "agent", ".", "strafe", "[", "0", "]", "+=", "strafe", "[", "0", "]", "\n", "agent", ".", "strafe", "[", "1", "]", "+=", "strafe", "[", "1", "]", "\n", "if", "jump", "and", "agent", ".", "dy", "==", "0", ":", "\n", "            ", "agent", ".", "dy", "=", "JUMP_SPEED", "\n", "", "if", "inventory", "is", "not", "None", ":", "\n", "            ", "if", "inventory", "<", "1", "or", "inventory", ">", "6", ":", "\n", "                ", "raise", "ValueError", "(", "f'Bad inventory id: {inventory}'", ")", "\n", "", "agent", ".", "active_block", "=", "inventory", "\n", "### END AGENT CONTROL", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.parse_action": [[354, 389], ["None"], "methods", ["None"], ["", "", "def", "parse_action", "(", "self", ",", "action", ")", ":", "\n", "# 0 noop; 1 forward; 2 back; 3 left; 4 right; 5 jump; 6-11 hotbar; 12 camera left;", "\n", "# 13 camera right; 14 camera up; 15 camera down; 16 attack; 17 use;", "\n", "# action = list(action).index(1)", "\n", "        ", "strafe", "=", "[", "0", ",", "0", "]", "\n", "camera", "=", "[", "0", ",", "0", "]", "\n", "jump", "=", "False", "\n", "inventory", "=", "None", "\n", "remove", "=", "False", "\n", "add", "=", "False", "\n", "if", "action", "==", "1", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "-", "1", "\n", "", "elif", "action", "==", "2", ":", "\n", "            ", "strafe", "[", "0", "]", "+=", "1", "\n", "", "elif", "action", "==", "3", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "-", "1", "\n", "", "elif", "action", "==", "4", ":", "\n", "            ", "strafe", "[", "1", "]", "+=", "1", "\n", "", "elif", "action", "==", "5", ":", "\n", "            ", "jump", "=", "True", "\n", "", "elif", "6", "<=", "action", "<=", "11", ":", "\n", "            ", "inventory", "=", "action", "-", "5", "\n", "", "elif", "action", "==", "12", ":", "\n", "            ", "camera", "[", "0", "]", "=", "-", "5", "\n", "", "elif", "action", "==", "13", ":", "\n", "            ", "camera", "[", "0", "]", "=", "5", "\n", "", "elif", "action", "==", "14", ":", "\n", "            ", "camera", "[", "1", "]", "=", "-", "5", "\n", "", "elif", "action", "==", "15", ":", "\n", "            ", "camera", "[", "1", "]", "=", "5", "\n", "", "elif", "action", "==", "16", ":", "\n", "            ", "remove", "=", "True", "\n", "", "elif", "action", "==", "17", ":", "\n", "            ", "add", "=", "True", "\n", "", "return", "strafe", ",", "jump", ",", "inventory", ",", "camera", ",", "remove", ",", "add", "\n", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.step": [[390, 405], ["world.World.parse_action", "world.World.movement", "world.World.move_camera", "world.World.place_or_remove_block", "world.World.update"], "methods", ["home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.parse_action", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.movement", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.move_camera", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.place_or_remove_block", "home.repos.pwc.inspect_result.iglu-contest_gridworld.core.world.World.update"], ["", "def", "step", "(", "self", ",", "agent", ",", "action", ",", "select_and_place", "=", "False", ")", ":", "\n", "        ", "strafe", ",", "jump", ",", "inventory", ",", "camera", ",", "remove", ",", "add", "=", "self", ".", "parse_action", "(", "action", ")", "\n", "if", "select_and_place", "and", "inventory", "is", "not", "None", ":", "\n", "            ", "add", "=", "True", "\n", "remove", "=", "False", "\n", "", "self", ".", "movement", "(", "agent", ",", "strafe", "=", "strafe", ",", "jump", "=", "jump", ",", "inventory", "=", "inventory", ")", "\n", "self", ".", "move_camera", "(", "agent", ",", "*", "camera", ")", "\n", "self", ".", "place_or_remove_block", "(", "agent", ",", "remove", "=", "remove", ",", "place", "=", "add", ")", "\n", "self", ".", "update", "(", "agent", ",", "dt", "=", "1", "/", "20.", ")", "\n", "yaw", ",", "pitch", "=", "agent", ".", "rotation", "\n", "while", "yaw", ">", "360.", ":", "\n", "            ", "yaw", "-=", "360.", "\n", "", "while", "yaw", "<", "0.0", ":", "\n", "            ", "yaw", "+=", "360.0", "\n", "", "agent", ".", "rotation", "=", "(", "yaw", ",", "pitch", ")", "\n", "### END UNIFIED AGENT CONTROL", "\n"]], "home.repos.pwc.inspect_result.iglu-contest_gridworld.renders.render_iglu_dataset.put_multiline_text": [[19, 40], ["lines.split.split", "numpy.copy", "tuple", "int", "PIL.Image.fromarray", "PIL.ImageDraw.Draw", "PIL.ImageFont.truetype", "numpy.mean", "int", "ImageDraw.Draw.multiline_text", "numpy.array", "math.ceil", "numpy.ones", "textwrap.fill", "text.append", "int", "int", "tuple", "tuple", "ImageFont.truetype.getsize", "set"], "function", ["None"], ["def", "put_multiline_text", "(", "lines", ",", "height", ",", "width", ",", "text_frac", "=", "0.6", ")", ":", "\n", "    ", "global", "rendered_texts", "\n", "lines", "=", "lines", ".", "split", "(", "'\\n'", ")", "\n", "if", "tuple", "(", "lines", ")", "not", "in", "rendered_texts", ":", "\n", "        ", "width", "=", "int", "(", "math", ".", "ceil", "(", "width", "*", "text_frac", ")", ")", "\n", "canvas", "=", "np", ".", "ones", "(", "(", "height", ",", "width", ",", "3", ")", ",", "dtype", "=", "np", ".", "uint8", ")", "*", "255", "\n", "canvas", "=", "Image", ".", "fromarray", "(", "canvas", ")", "\n", "draw", "=", "ImageDraw", ".", "Draw", "(", "canvas", ")", "\n", "fnt", "=", "ImageFont", ".", "truetype", "(", "\"FreeMono.ttf\"", ",", "18", ")", "\n", "char_width", "=", "np", ".", "mean", "(", "[", "fnt", ".", "getsize", "(", "char", ")", "[", "0", "]", "for", "char", "in", "set", "(", "' '", ".", "join", "(", "[", "l", "for", "l", "in", "lines", "if", "l", "is", "not", "None", "]", ")", ")", "]", ")", "\n", "chars", "=", "int", "(", "0.9", "*", "canvas", ".", "size", "[", "0", "]", "/", "char_width", ")", "\n", "text", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "line", "is", "None", ":", "continue", "\n", "lined", "=", "textwrap", ".", "fill", "(", "line", ",", "width", "=", "chars", ")", "\n", "text", ".", "append", "(", "lined", ")", "\n", "", "text", "=", "'\\n'", ".", "join", "(", "text", ")", "\n", "pos", "=", "(", "int", "(", "0.05", "*", "canvas", ".", "size", "[", "0", "]", ")", ",", "int", "(", "0.03", "*", "canvas", ".", "size", "[", "1", "]", ")", ")", "\n", "draw", ".", "multiline_text", "(", "pos", ",", "text", ",", "font", "=", "fnt", ",", "fill", "=", "(", "0", ",", "0", ",", "0", ",", "0", ")", ",", "stroke_width", "=", "0", ")", "\n", "rendered_texts", "[", "tuple", "(", "lines", ")", "]", "=", "np", ".", "array", "(", "canvas", ")", "\n", "", "return", "np", ".", "copy", "(", "rendered_texts", "[", "tuple", "(", "lines", ")", "]", ")", "\n", "\n"]]}