{"home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.__init__": [[35, 41], ["tensorflow.Graph", "tensorflow.GPUOptions", "tensorflow.ConfigProto", "tensorflow.Session"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "gpu_options", "=", "tf", ".", "GPUOptions", "(", "allow_growth", "=", "True", ")", "\n", "tf_config", "=", "tf", ".", "ConfigProto", "(", "gpu_options", "=", "gpu_options", ",", "\n", "allow_soft_placement", "=", "True", ",", "log_device_placement", "=", "False", ")", "\n", "self", ".", "sess", "=", "tf", ".", "Session", "(", "graph", "=", "self", ".", "graph", ",", "config", "=", "tf_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.initialize": [[42, 116], ["imp.load_source.Network.graph.as_default", "imp.load_source.Network.sess.as_default", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.Variable", "imp.load_source", "imp.load_source.inference", "imp.load_source", "imp.load_source.inference", "tensorflow.identity", "tensorflow.identity", "utils.tflib.mutual_likelihood_score_loss", "loss_list.append", "tensorflow.reduce_sum", "loss_list.append", "tensorflow.add_n", "tensorflow.gradients", "tensorflow.train.MomentumOptimizer", "tensorflow.train.MomentumOptimizer.apply_gradients", "tensorflow.get_collection", "train_ops.extend", "train_ops.append", "tensorflow.group", "imp.load_source.Network.watch_list.items", "tensorflow.summary.scalar", "tensorflow.summary.merge_all", "imp.load_source.Network.sess.run", "imp.load_source.Network.sess.run", "tensorflow.train.Saver", "tensorflow.exp", "tensorflow.get_collection", "list", "tensorflow.assign_add", "tensorflow.summary.scalar", "tensorflow.local_variables_initializer", "tensorflow.global_variables_initializer", "tensorflow.trainable_variables", "zip"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.inference", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.inference", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.tflib.mutual_likelihood_score_loss", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.trainable_variables"], ["", "def", "initialize", "(", "self", ",", "config", ",", "num_classes", "=", "None", ")", ":", "\n", "        ", "'''\n            Initialize the graph from scratch according to config.\n        '''", "\n", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "with", "self", ".", "sess", ".", "as_default", "(", ")", ":", "\n", "# Set up placeholders", "\n", "                ", "h", ",", "w", "=", "config", ".", "image_size", "\n", "channels", "=", "config", ".", "channels", "\n", "self", ".", "images", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "h", ",", "w", ",", "channels", "]", ",", "name", "=", "'images'", ")", "\n", "self", ".", "labels", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "[", "None", "]", ",", "name", "=", "'labels'", ")", "\n", "\n", "self", ".", "learning_rate", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'learning_rate'", ")", "\n", "self", ".", "keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'keep_prob'", ")", "\n", "self", ".", "phase_train", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "'phase_train'", ")", "\n", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "trainable", "=", "False", ",", "dtype", "=", "tf", ".", "int32", ",", "name", "=", "'global_step'", ")", "\n", "\n", "# Initialialize the backbone network", "\n", "network", "=", "imp", ".", "load_source", "(", "'embedding_network'", ",", "config", ".", "embedding_network", ")", "\n", "mu", ",", "conv_final", "=", "network", ".", "inference", "(", "self", ".", "images", ",", "config", ".", "embedding_size", ")", "\n", "\n", "# Initialize the uncertainty module", "\n", "uncertainty_module", "=", "imp", ".", "load_source", "(", "'uncertainty_module'", ",", "config", ".", "uncertainty_module", ")", "\n", "log_sigma_sq", "=", "uncertainty_module", ".", "inference", "(", "conv_final", ",", "config", ".", "embedding_size", ",", "\n", "phase_train", "=", "self", ".", "phase_train", ",", "weight_decay", "=", "config", ".", "weight_decay", ",", "\n", "scope", "=", "'UncertaintyModule'", ")", "\n", "\n", "self", ".", "mu", "=", "tf", ".", "identity", "(", "mu", ",", "name", "=", "'mu'", ")", "\n", "self", ".", "sigma_sq", "=", "tf", ".", "identity", "(", "tf", ".", "exp", "(", "log_sigma_sq", ")", ",", "name", "=", "'sigma_sq'", ")", "\n", "\n", "# Build all losses", "\n", "loss_list", "=", "[", "]", "\n", "self", ".", "watch_list", "=", "{", "}", "\n", "\n", "\n", "MLS_loss", "=", "mutual_likelihood_score_loss", "(", "self", ".", "labels", ",", "mu", ",", "log_sigma_sq", ")", "\n", "loss_list", ".", "append", "(", "MLS_loss", ")", "\n", "self", ".", "watch_list", "[", "'loss'", "]", "=", "MLS_loss", "\n", "\n", "\n", "# Collect all losses", "\n", "reg_loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ",", "name", "=", "'reg_loss'", ")", "\n", "loss_list", ".", "append", "(", "reg_loss", ")", "\n", "self", ".", "watch_list", "[", "'reg_loss'", "]", "=", "reg_loss", "\n", "\n", "\n", "total_loss", "=", "tf", ".", "add_n", "(", "loss_list", ",", "name", "=", "'total_loss'", ")", "\n", "grads", "=", "tf", ".", "gradients", "(", "total_loss", ",", "self", ".", "trainable_variables", ")", "\n", "\n", "\n", "# Training Operaters", "\n", "train_ops", "=", "[", "]", "\n", "\n", "opt", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "self", ".", "learning_rate", ",", "momentum", "=", "0.9", ")", "\n", "apply_gradient_op", "=", "opt", ".", "apply_gradients", "(", "list", "(", "zip", "(", "grads", ",", "self", ".", "trainable_variables", ")", ")", ")", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "train_ops", ".", "extend", "(", "[", "apply_gradient_op", "]", "+", "update_ops", ")", "\n", "\n", "train_ops", ".", "append", "(", "tf", ".", "assign_add", "(", "self", ".", "global_step", ",", "1", ")", ")", "\n", "self", ".", "train_op", "=", "tf", ".", "group", "(", "*", "train_ops", ")", "\n", "\n", "# Collect TF summary", "\n", "for", "k", ",", "v", "in", "self", ".", "watch_list", ".", "items", "(", ")", ":", "\n", "                    ", "tf", ".", "summary", ".", "scalar", "(", "'losses/'", "+", "k", ",", "v", ")", "\n", "", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "self", ".", "learning_rate", ")", "\n", "self", ".", "summary_op", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "# Initialize variables", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "local_variables_initializer", "(", ")", ")", "\n", "self", ".", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ",", "max_to_keep", "=", "99", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.trainable_variables": [[117, 120], ["tensorflow.get_collection"], "methods", ["None"], ["", "@", "property", "\n", "def", "trainable_variables", "(", "self", ")", ":", "\n", "        ", "return", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "'UncertaintyModule'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.save_model": [[121, 131], ["network.Network.sess.graph.as_default", "os.path.join", "os.path.join", "print", "network.Network.saver.save", "os.path.exists", "print", "network.Network.saver.export_meta_graph"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "model_dir", ",", "global_step", ")", ":", "\n", "        ", "with", "self", ".", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'ckpt'", ")", "\n", "metagraph_path", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'graph.meta'", ")", "\n", "\n", "print", "(", "'Saving variables...'", ")", "\n", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "checkpoint_path", ",", "global_step", "=", "global_step", ",", "write_meta_graph", "=", "False", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "metagraph_path", ")", ":", "\n", "                ", "print", "(", "'Saving metagraph...'", ")", "\n", "self", ".", "saver", ".", "export_meta_graph", "(", "metagraph_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.restore_model": [[132, 143], ["network.Network.graph.get_collection", "network.Network.sess.graph.as_default", "os.path.expanduser", "tensorflow.train.latest_checkpoint", "print", "tensorflow.train.Saver", "tensorflow.train.Saver.restore", "len", "any"], "methods", ["None"], ["", "", "", "def", "restore_model", "(", "self", ",", "model_dir", ",", "restore_scopes", "=", "None", ")", ":", "\n", "        ", "var_list", "=", "self", ".", "graph", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ")", "\n", "with", "self", ".", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "if", "restore_scopes", "is", "not", "None", ":", "\n", "                ", "var_list", "=", "[", "var", "for", "var", "in", "var_list", "if", "any", "(", "[", "scope", "in", "var", ".", "name", "for", "scope", "in", "restore_scopes", "]", ")", "]", "\n", "", "model_dir", "=", "os", ".", "path", ".", "expanduser", "(", "model_dir", ")", "\n", "ckpt_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_dir", ")", "\n", "\n", "print", "(", "'Restoring {} variables from {} ...'", ".", "format", "(", "len", "(", "var_list", ")", ",", "ckpt_file", ")", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "ckpt_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.load_model": [[144, 166], ["network.Network.sess.graph.as_default", "os.path.expanduser", "os.path.join", "tensorflow.train.latest_checkpoint", "print", "print", "tensorflow.train.import_meta_graph", "tensorflow.train.import_meta_graph.restore", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "network.Network.graph.get_tensor_by_name", "imp.load_source", "len", "os.path.join", "os.listdir", "file.endswith"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ",", "model_path", ",", "scope", "=", "None", ")", ":", "\n", "        ", "with", "self", ".", "sess", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "model_path", "=", "os", ".", "path", ".", "expanduser", "(", "model_path", ")", "\n", "\n", "# Load grapha and variables separatedly.", "\n", "meta_files", "=", "[", "file", "for", "file", "in", "os", ".", "listdir", "(", "model_path", ")", "if", "file", ".", "endswith", "(", "'.meta'", ")", "]", "\n", "assert", "len", "(", "meta_files", ")", "==", "1", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "meta_files", "[", "0", "]", ")", "\n", "ckpt_file", "=", "tf", ".", "train", ".", "latest_checkpoint", "(", "model_path", ")", "\n", "\n", "print", "(", "'Metagraph file: %s'", "%", "meta_file", ")", "\n", "print", "(", "'Checkpoint file: %s'", "%", "ckpt_file", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "meta_file", ",", "clear_devices", "=", "True", ",", "import_scope", "=", "scope", ")", "\n", "saver", ".", "restore", "(", "self", ".", "sess", ",", "ckpt_file", ")", "\n", "\n", "# Setup the I/O Tensors", "\n", "self", ".", "images", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'images:0'", ")", "\n", "self", ".", "phase_train", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'phase_train:0'", ")", "\n", "self", ".", "keep_prob", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'keep_prob:0'", ")", "\n", "self", ".", "mu", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'mu:0'", ")", "\n", "self", ".", "sigma_sq", "=", "self", ".", "graph", ".", "get_tensor_by_name", "(", "'sigma_sq:0'", ")", "\n", "self", ".", "config", "=", "imp", ".", "load_source", "(", "'network_config'", ",", "os", ".", "path", ".", "join", "(", "model_path", ",", "'config.py'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.train": [[169, 180], ["network.Network.sess.run", "network.Network.sess.run"], "methods", ["None"], ["", "", "def", "train", "(", "self", ",", "images_batch", ",", "labels_batch", ",", "learning_rate", ",", "keep_prob", ")", ":", "\n", "        ", "feed_dict", "=", "{", "self", ".", "images", ":", "images_batch", ",", "\n", "self", ".", "labels", ":", "labels_batch", ",", "\n", "self", ".", "learning_rate", ":", "learning_rate", ",", "\n", "self", ".", "keep_prob", ":", "keep_prob", ",", "\n", "self", ".", "phase_train", ":", "True", ",", "}", "\n", "_", ",", "wl", ",", "sm", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "train_op", ",", "self", ".", "watch_list", ",", "self", ".", "summary_op", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "step", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "global_step", ")", "\n", "\n", "return", "wl", ",", "sm", ",", "step", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.extract_feature": [[181, 203], ["len", "numpy.ndarray", "numpy.ndarray", "time.time", "range", "min", "network.Network.sess.run", "print", "time.strftime", "sys.stdout.write", "proc_func", "time.gmtime", "time.time"], "methods", ["None"], ["", "def", "extract_feature", "(", "self", ",", "images", ",", "batch_size", ",", "proc_func", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "num_images", "=", "len", "(", "images", ")", "\n", "num_features", "=", "self", ".", "mu", ".", "shape", "[", "1", "]", "\n", "mu", "=", "np", ".", "ndarray", "(", "(", "num_images", ",", "num_features", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "sigma_sq", "=", "np", ".", "ndarray", "(", "(", "num_images", ",", "num_features", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "start_idx", "in", "range", "(", "0", ",", "num_images", ",", "batch_size", ")", ":", "\n", "            ", "if", "verbose", ":", "\n", "                ", "elapsed_time", "=", "time", ".", "strftime", "(", "'%H:%M:%S'", ",", "time", ".", "gmtime", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", ")", "\n", "sys", ".", "stdout", ".", "write", "(", "'# of images: %d Current image: %d Elapsed time: %s \\t\\r'", "\n", "%", "(", "num_images", ",", "start_idx", ",", "elapsed_time", ")", ")", "\n", "", "end_idx", "=", "min", "(", "num_images", ",", "start_idx", "+", "batch_size", ")", "\n", "images_batch", "=", "images", "[", "start_idx", ":", "end_idx", "]", "\n", "if", "proc_func", ":", "\n", "                ", "images_batch", "=", "proc_func", "(", "images_batch", ")", "\n", "", "feed_dict", "=", "{", "self", ".", "images", ":", "images_batch", ",", "\n", "self", ".", "phase_train", ":", "False", ",", "\n", "self", ".", "keep_prob", ":", "1.0", "}", "\n", "mu", "[", "start_idx", ":", "end_idx", "]", ",", "sigma_sq", "[", "start_idx", ":", "end_idx", "]", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "mu", ",", "self", ".", "sigma_sq", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "print", "(", "''", ")", "\n", "", "return", "mu", ",", "sigma_sq", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.train.main": [[39, 88], ["imp.load_source", "utils.dataset.Dataset", "network.Network", "network.Network.initialize", "utils.utils.create_log_dir", "tensorflow.summary.FileWriter", "utils.dataset.Dataset.start_batch_queue", "print", "time.time", "range", "network.Network.restore_model", "utils.imageprocessing.preprocess", "range", "network.Network.save_model", "utils.utils.get_updated_learning_rate", "utils.dataset.Dataset.pop_batch_queue", "network.Network.train", "time.time", "utils.utils.display_info", "tf.summary.FileWriter.add_summary", "time.time"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.initialize", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.create_log_dir", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.start_batch_queue", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.restore_model", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.preprocess", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.save_model", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.get_updated_learning_rate", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.pop_batch_queue", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.train", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.display_info"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "# I/O", "\n", "    ", "config_file", "=", "args", ".", "config_file", "\n", "config", "=", "imp", ".", "load_source", "(", "'config'", ",", "config_file", ")", "\n", "if", "args", ".", "name", ":", "\n", "        ", "config", ".", "name", "=", "args", ".", "name", "\n", "\n", "", "trainset", "=", "Dataset", "(", "config", ".", "train_dataset_path", ")", "\n", "\n", "network", "=", "Network", "(", ")", "\n", "network", ".", "initialize", "(", "config", ",", "trainset", ".", "num_classes", ")", "\n", "\n", "# Initalization for running", "\n", "log_dir", "=", "utils", ".", "create_log_dir", "(", "config", ",", "config_file", ")", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "log_dir", ",", "network", ".", "graph", ")", "\n", "if", "config", ".", "restore_model", ":", "\n", "        ", "network", ".", "restore_model", "(", "config", ".", "restore_model", ",", "config", ".", "restore_scopes", ")", "\n", "\n", "", "proc_func", "=", "lambda", "images", ":", "preprocess", "(", "images", ",", "config", ",", "True", ")", "\n", "trainset", ".", "start_batch_queue", "(", "config", ".", "batch_format", ",", "proc_func", "=", "proc_func", ")", "\n", "\n", "\n", "# Main Loop", "\n", "print", "(", "'\\nStart Training\\nname: {}\\n# epochs: {}\\nepoch_size: {}\\nbatch_size: {}\\n'", ".", "format", "(", "\n", "config", ".", "name", ",", "config", ".", "num_epochs", ",", "config", ".", "epoch_size", ",", "config", ".", "batch_format", "[", "'size'", "]", ")", ")", "\n", "global_step", "=", "0", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "config", ".", "num_epochs", ")", ":", "\n", "\n", "# Training", "\n", "        ", "for", "step", "in", "range", "(", "config", ".", "epoch_size", ")", ":", "\n", "# Prepare input", "\n", "            ", "learning_rate", "=", "utils", ".", "get_updated_learning_rate", "(", "global_step", ",", "config", ")", "\n", "batch", "=", "trainset", ".", "pop_batch_queue", "(", ")", "\n", "\n", "wl", ",", "sm", ",", "global_step", "=", "network", ".", "train", "(", "batch", "[", "'image'", "]", ",", "batch", "[", "'label'", "]", ",", "learning_rate", ",", "config", ".", "keep_prob", ")", "\n", "\n", "wl", "[", "'lr'", "]", "=", "learning_rate", "\n", "\n", "# Display", "\n", "if", "step", "%", "config", ".", "summary_interval", "==", "0", ":", "\n", "                ", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "utils", ".", "display_info", "(", "epoch", ",", "step", ",", "duration", ",", "wl", ")", "\n", "summary_writer", ".", "add_summary", "(", "sm", ",", "global_step", "=", "global_step", ")", "\n", "\n", "# Save the model", "\n", "", "", "network", ".", "save_model", "(", "log_dir", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.tflib.negative_MLS": [[26, 54], ["tensorflow.name_scope", "tensorflow.transpose", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reduce_sum", "tensorflow.square", "tensorflow.square", "tensorflow.log", "tensorflow.log", "tensorflow.square"], "function", ["None"], ["def", "negative_MLS", "(", "X", ",", "Y", ",", "sigma_sq_X", ",", "sigma_sq_Y", ",", "mean", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'negative_MLS'", ")", ":", "\n", "        ", "if", "mean", ":", "\n", "            ", "D", "=", "X", ".", "shape", "[", "1", "]", ".", "value", "\n", "\n", "Y", "=", "tf", ".", "transpose", "(", "Y", ")", "\n", "XX", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "X", ")", ",", "1", ",", "keep_dims", "=", "True", ")", "\n", "YY", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "Y", ")", ",", "0", ",", "keep_dims", "=", "True", ")", "\n", "XY", "=", "tf", ".", "matmul", "(", "X", ",", "Y", ")", "\n", "diffs", "=", "XX", "+", "YY", "-", "2", "*", "XY", "\n", "\n", "sigma_sq_Y", "=", "tf", ".", "transpose", "(", "sigma_sq_Y", ")", "\n", "sigma_sq_X", "=", "tf", ".", "reduce_mean", "(", "sigma_sq_X", ",", "axis", "=", "1", ",", "keep_dims", "=", "True", ")", "\n", "sigma_sq_Y", "=", "tf", ".", "reduce_mean", "(", "sigma_sq_Y", ",", "axis", "=", "0", ",", "keep_dims", "=", "True", ")", "\n", "sigma_sq_fuse", "=", "sigma_sq_X", "+", "sigma_sq_Y", "\n", "\n", "diffs", "=", "diffs", "/", "(", "1e-8", "+", "sigma_sq_fuse", ")", "+", "D", "*", "tf", ".", "log", "(", "sigma_sq_fuse", ")", "\n", "\n", "return", "diffs", "\n", "", "else", ":", "\n", "            ", "D", "=", "X", ".", "shape", "[", "1", "]", ".", "value", "\n", "X", "=", "tf", ".", "reshape", "(", "X", ",", "[", "-", "1", ",", "1", ",", "D", "]", ")", "\n", "Y", "=", "tf", ".", "reshape", "(", "Y", ",", "[", "1", ",", "-", "1", ",", "D", "]", ")", "\n", "sigma_sq_X", "=", "tf", ".", "reshape", "(", "sigma_sq_X", ",", "[", "-", "1", ",", "1", ",", "D", "]", ")", "\n", "sigma_sq_Y", "=", "tf", ".", "reshape", "(", "sigma_sq_Y", ",", "[", "1", ",", "-", "1", ",", "D", "]", ")", "\n", "sigma_sq_fuse", "=", "sigma_sq_X", "+", "sigma_sq_Y", "\n", "diffs", "=", "tf", ".", "square", "(", "X", "-", "Y", ")", "/", "(", "1e-10", "+", "sigma_sq_fuse", ")", "+", "tf", ".", "log", "(", "sigma_sq_fuse", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "diffs", ",", "axis", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.tflib.mutual_likelihood_score_loss": [[55, 73], ["tensorflow.name_scope", "tensorflow.eye", "tensorflow.logical_not", "tensorflow.exp", "tflib.negative_MLS", "tensorflow.equal", "tensorflow.logical_and", "tensorflow.boolean_mask", "tensorflow.reduce_mean", "tensorflow.shape"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.tflib.negative_MLS"], ["", "", "", "def", "mutual_likelihood_score_loss", "(", "labels", ",", "mu", ",", "log_sigma_sq", ")", ":", "\n", "\n", "    ", "with", "tf", ".", "name_scope", "(", "'MLS_Loss'", ")", ":", "\n", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "mu", ")", "[", "0", "]", "\n", "\n", "diag_mask", "=", "tf", ".", "eye", "(", "batch_size", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "non_diag_mask", "=", "tf", ".", "logical_not", "(", "diag_mask", ")", "\n", "\n", "sigma_sq", "=", "tf", ".", "exp", "(", "log_sigma_sq", ")", "\n", "loss_mat", "=", "negative_MLS", "(", "mu", ",", "mu", ",", "sigma_sq", ",", "sigma_sq", ")", "\n", "\n", "label_mat", "=", "tf", ".", "equal", "(", "labels", "[", ":", ",", "None", "]", ",", "labels", "[", "None", ",", ":", "]", ")", "\n", "label_mask_pos", "=", "tf", ".", "logical_and", "(", "non_diag_mask", ",", "label_mat", ")", "\n", "\n", "loss_pos", "=", "tf", ".", "boolean_mask", "(", "loss_mat", ",", "label_mask_pos", ")", "\n", "\n", "return", "tf", ".", "reduce_mean", "(", "loss_pos", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.__init__": [[40, 51], ["dataset.Dataset.init_from_path", "pandas.DataFrame"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_path"], ["    ", "def", "__init__", "(", "self", ",", "path", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "\n", "        ", "if", "path", "is", "not", "None", ":", "\n", "            ", "self", ".", "init_from_path", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "pd", ".", "DataFrame", "(", "[", "]", ",", "columns", "=", "[", "'path'", ",", "'abspath'", ",", "'label'", ",", "'name'", "]", ")", "\n", "\n", "", "self", ".", "prefix", "=", "prefix", "\n", "self", ".", "base_seed", "=", "0", "\n", "self", ".", "batch_queue", "=", "None", "\n", "self", ".", "batch_workers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.__getitem__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.__setitem__": [[56, 59], ["None"], "methods", ["None"], ["", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "self", ".", "data", "[", "key", "]", "=", "value", "\n", "return", "self", ".", "data", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset._delitem": [[60, 62], ["dataset.Dataset.data.__delitem__"], "methods", ["None"], ["", "def", "_delitem", "(", "self", ",", "key", ")", ":", "\n", "        ", "self", ".", "data", ".", "__delitem__", "(", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.num_classes": [[63, 66], ["len", "dataset.Dataset.data[].unique"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_classes", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "'label'", "]", ".", "unique", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.classes": [[67, 70], ["dataset.Dataset.data[].unique"], "methods", ["None"], ["", "@", "property", "\n", "def", "classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "'label'", "]", ".", "unique", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size": [[71, 74], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.loc": [[75, 78], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "loc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "loc", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.iloc": [[79, 82], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iloc", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "iloc", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_path": [[83, 93], ["os.path.expanduser", "os.path.splitext", "os.path.isdir", "dataset.Dataset.init_from_folder", "dataset.Dataset.init_from_list", "ValueError"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_folder", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_list"], ["", "def", "init_from_path", "(", "self", ",", "path", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "expanduser", "(", "path", ")", "\n", "_", ",", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "path", ")", ":", "\n", "            ", "self", ".", "init_from_folder", "(", "path", ")", "\n", "", "elif", "ext", "==", "'.txt'", ":", "\n", "            ", "self", ".", "init_from_list", "(", "path", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Cannot initialize dataset from path: %s\\n\\\n                It should be either a folder, .txt or .hdf5 file'", "%", "path", ")", "\n", "# print('%d images of %d classes loaded' % (len(self.images), self.num_classes))", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_folder": [[95, 115], ["os.path.abspath", "os.listdir", "os.listdir.sort", "enumerate", "pandas.DataFrame", "os.path.expanduser", "os.path.join", "os.path.isdir", "os.path.join", "os.listdir", "os.listdir.sort", "paths.extend", "labels.extend", "names.extend", "os.path.join", "len", "len"], "methods", ["None"], ["", "", "def", "init_from_folder", "(", "self", ",", "folder", ")", ":", "\n", "        ", "folder", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "expanduser", "(", "folder", ")", ")", "\n", "class_names", "=", "os", ".", "listdir", "(", "folder", ")", "\n", "class_names", ".", "sort", "(", ")", "\n", "paths", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "names", "=", "[", "]", "\n", "for", "label", ",", "class_name", "in", "enumerate", "(", "class_names", ")", ":", "\n", "            ", "classdir", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "class_name", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "classdir", ")", ":", "\n", "                ", "images_class", "=", "os", ".", "listdir", "(", "classdir", ")", "\n", "images_class", ".", "sort", "(", ")", "\n", "images_class", "=", "[", "os", ".", "path", ".", "join", "(", "class_name", ",", "img", ")", "for", "img", "in", "images_class", "]", "\n", "paths", ".", "extend", "(", "images_class", ")", "\n", "labels", ".", "extend", "(", "len", "(", "images_class", ")", "*", "[", "label", "]", ")", "\n", "names", ".", "extend", "(", "len", "(", "images_class", ")", "*", "[", "class_name", "]", ")", "\n", "", "", "abspaths", "=", "[", "os", ".", "path", ".", "join", "(", "folder", ",", "p", ")", "for", "p", "in", "paths", "]", "\n", "self", ".", "data", "=", "pd", ".", "DataFrame", "(", "{", "'path'", ":", "paths", ",", "'abspath'", ":", "abspaths", ",", "\n", "'label'", ":", "labels", ",", "'name'", ":", "names", "}", ")", "\n", "self", ".", "prefix", "=", "folder", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.init_from_list": [[118, 137], ["pandas.DataFrame", "open", "f.readlines", "line.strip().split", "os.path.abspath", "len", "abspaths[].split", "int", "str", "len", "numpy.unique", "ValueError", "line.strip", "p.split", "p.split"], "methods", ["None"], ["", "def", "init_from_list", "(", "self", ",", "filename", ",", "folder_depth", "=", "2", ")", ":", "\n", "        ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "lines", "=", "[", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "for", "line", "in", "lines", "]", "\n", "abspaths", "=", "[", "os", ".", "path", ".", "abspath", "(", "line", "[", "0", "]", ")", "for", "line", "in", "lines", "]", "\n", "paths", "=", "[", "'/'", ".", "join", "(", "p", ".", "split", "(", "'/'", ")", "[", "-", "folder_depth", ":", "]", ")", "for", "p", "in", "abspaths", "]", "\n", "if", "len", "(", "lines", "[", "0", "]", ")", "==", "2", ":", "\n", "            ", "labels", "=", "[", "int", "(", "line", "[", "1", "]", ")", "for", "line", "in", "lines", "]", "\n", "names", "=", "[", "str", "(", "lb", ")", "for", "lb", "in", "labels", "]", "\n", "", "elif", "len", "(", "lines", "[", "0", "]", ")", "==", "1", ":", "\n", "            ", "names", "=", "[", "p", ".", "split", "(", "'/'", ")", "[", "-", "folder_depth", "]", "for", "p", "in", "abspaths", "]", "\n", "_", ",", "labels", "=", "np", ".", "unique", "(", "names", ",", "return_inverse", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'List file must be in format: \"fullpath(str) \\\n                                        label(int)\" or just \"fullpath(str)\"'", ")", "\n", "\n", "", "self", ".", "data", "=", "pd", ".", "DataFrame", "(", "{", "'path'", ":", "paths", ",", "'abspath'", ":", "abspaths", ",", "\n", "'label'", ":", "labels", ",", "'name'", ":", "names", "}", ")", "\n", "self", ".", "prefix", "=", "abspaths", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", ":", "-", "folder_depth", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.set_base_seed": [[143, 145], ["None"], "methods", ["None"], ["", "def", "set_base_seed", "(", "self", ",", "base_seed", "=", "0", ")", ":", "\n", "        ", "self", ".", "base_seed", "=", "base_seed", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.random_samples_from_class": [[146, 161], ["list", "int", "range", "list", "list.remove", "numpy.ceil", "numpy.random.permutation", "list.append", "numpy.where", "len", "numpy.concatenate", "len"], "methods", ["None"], ["", "def", "random_samples_from_class", "(", "self", ",", "label", ",", "num_samples", ",", "exception", "=", "None", ")", ":", "\n", "# indices_temp = self.class_indices[label]", "\n", "        ", "indices_temp", "=", "list", "(", "np", ".", "where", "(", "self", ".", "data", "[", "'label'", "]", ".", "values", "==", "label", ")", "[", "0", "]", ")", "\n", "\n", "if", "exception", "is", "not", "None", ":", "\n", "            ", "indices_temp", ".", "remove", "(", "exception", ")", "\n", "assert", "len", "(", "indices_temp", ")", ">", "0", "\n", "# Sample indices multiple times when more samples are required than present.", "\n", "", "indices", "=", "[", "]", "\n", "iterations", "=", "int", "(", "np", ".", "ceil", "(", "1.0", "*", "num_samples", "/", "len", "(", "indices_temp", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "            ", "sample_indices", "=", "np", ".", "random", ".", "permutation", "(", "indices_temp", ")", "\n", "indices", ".", "append", "(", "sample_indices", ")", "\n", "", "indices", "=", "list", "(", "np", ".", "concatenate", "(", "indices", ",", "axis", "=", "0", ")", "[", ":", "num_samples", "]", ")", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.get_batch_indices": [[162, 176], ["numpy.random.permutation", "indices_batch.extend", "dataset.Dataset.random_samples_from_class"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.random_samples_from_class"], ["", "def", "get_batch_indices", "(", "self", ",", "batch_format", ")", ":", "\n", "        ", "''' Get the indices from index queue and fetch the data with indices.'''", "\n", "indices_batch", "=", "[", "]", "\n", "batch_size", "=", "batch_format", "[", "'size'", "]", "\n", "\n", "num_classes", "=", "batch_format", "[", "'num_classes'", "]", "\n", "assert", "batch_size", "%", "num_classes", "==", "0", "\n", "num_samples_per_class", "=", "batch_size", "//", "num_classes", "\n", "idx_classes", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "classes", ")", "[", ":", "num_classes", "]", "\n", "indices_batch", "=", "[", "]", "\n", "for", "c", "in", "idx_classes", ":", "\n", "            ", "indices_batch", ".", "extend", "(", "self", ".", "random_samples_from_class", "(", "c", ",", "num_samples_per_class", ")", ")", "\n", "\n", "", "return", "indices_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.get_batch": [[177, 185], ["dataset.Dataset.get_batch_indices"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.get_batch_indices"], ["", "def", "get_batch", "(", "self", ",", "batch_format", ")", ":", "\n", "\n", "        ", "indices", "=", "self", ".", "get_batch_indices", "(", "batch_format", ")", "\n", "batch", "=", "{", "}", "\n", "for", "column", "in", "self", ".", "data", ".", "columns", ":", "\n", "            ", "batch", "[", "column", "]", "=", "self", ".", "data", "[", "column", "]", ".", "values", "[", "indices", "]", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.start_batch_queue": [[188, 205], ["multiprocessing.Queue", "range", "numpy.random.seed", "multiprocessing.Process", "multiprocessing.Process.start", "dataset.Dataset.batch_workers.append", "dataset.Dataset.get_batch", "dataset.Dataset.batch_queue.put", "proc_func"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.get_batch"], ["", "def", "start_batch_queue", "(", "self", ",", "batch_format", ",", "proc_func", "=", "None", ",", "maxsize", "=", "1", ",", "num_threads", "=", "3", ")", ":", "\n", "\n", "        ", "self", ".", "batch_queue", "=", "Queue", "(", "maxsize", "=", "maxsize", ")", "\n", "def", "batch_queue_worker", "(", "seed", ")", ":", "\n", "            ", "np", ".", "random", ".", "seed", "(", "seed", "+", "self", ".", "base_seed", ")", "\n", "while", "True", ":", "\n", "                ", "batch", "=", "self", ".", "get_batch", "(", "batch_format", ")", "\n", "if", "proc_func", "is", "not", "None", ":", "\n", "                    ", "batch", "[", "'image'", "]", "=", "proc_func", "(", "batch", "[", "'abspath'", "]", ")", "\n", "", "self", ".", "batch_queue", ".", "put", "(", "batch", ")", "\n", "\n", "", "", "self", ".", "batch_workers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_threads", ")", ":", "\n", "            ", "worker", "=", "Process", "(", "target", "=", "batch_queue_worker", ",", "args", "=", "(", "i", ",", ")", ")", "\n", "worker", ".", "daemon", "=", "True", "\n", "worker", ".", "start", "(", ")", "\n", "self", ".", "batch_workers", ".", "append", "(", "worker", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.pop_batch_queue": [[206, 208], ["dataset.Dataset.batch_queue.get"], "methods", ["None"], ["", "", "def", "pop_batch_queue", "(", "self", ",", "timeout", "=", "queue_timeout", ")", ":", "\n", "        ", "return", "self", ".", "batch_queue", ".", "get", "(", "block", "=", "True", ",", "timeout", "=", "timeout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.release_queue": [[209, 223], ["dataset.Dataset.index_queue.close", "dataset.Dataset.batch_queue.close", "dataset.Dataset.index_worker.terminate", "w.terminate"], "methods", ["None"], ["", "def", "release_queue", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "index_queue", "is", "not", "None", ":", "\n", "            ", "self", ".", "index_queue", ".", "close", "(", ")", "\n", "", "if", "self", ".", "batch_queue", "is", "not", "None", ":", "\n", "            ", "self", ".", "batch_queue", ".", "close", "(", ")", "\n", "", "if", "self", ".", "index_worker", "is", "not", "None", ":", "\n", "            ", "self", ".", "index_worker", ".", "terminate", "(", ")", "\n", "del", "self", ".", "index_worker", "\n", "self", ".", "index_worker", "=", "None", "\n", "", "if", "self", ".", "batch_workers", "is", "not", "None", ":", "\n", "            ", "for", "w", "in", "self", ".", "batch_workers", ":", "\n", "                ", "w", ".", "terminate", "(", ")", "\n", "del", "w", "\n", "", "self", ".", "batch_workers", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape": [[34, 44], ["list", "tuple", "tuple"], "function", ["None"], ["def", "get_new_shape", "(", "images", ",", "size", "=", "None", ",", "n", "=", "None", ")", ":", "\n", "    ", "shape", "=", "list", "(", "images", ".", "shape", ")", "\n", "if", "size", "is", "not", "None", ":", "\n", "        ", "h", ",", "w", "=", "tuple", "(", "size", ")", "\n", "shape", "[", "1", "]", "=", "h", "\n", "shape", "[", "2", "]", "=", "w", "\n", "", "if", "n", "is", "not", "None", ":", "\n", "        ", "shape", "[", "0", "]", "=", "n", "\n", "", "shape", "=", "tuple", "(", "shape", ")", "\n", "return", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.random_crop": [[45, 60], ["tuple", "imageprocessing.get_new_shape", "numpy.ndarray", "numpy.random.randint", "numpy.random.randint", "range"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape"], ["", "def", "random_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "h", ",", "w", "=", "tuple", "(", "size", ")", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ")", "\n", "assert", "(", "_h", ">=", "h", "and", "_w", ">=", "w", ")", "\n", "\n", "images_new", "=", "np", ".", "ndarray", "(", "shape_new", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "\n", "y", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "_h", "-", "h", "+", "1", ",", "size", "=", "(", "n", ")", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "_w", "-", "w", "+", "1", ",", "size", "=", "(", "n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "images", "[", "i", ",", "y", "[", "i", "]", ":", "y", "[", "i", "]", "+", "h", ",", "x", "[", "i", "]", ":", "x", "[", "i", "]", "+", "w", "]", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.center_crop": [[61, 72], ["tuple", "int", "int", "round", "round"], "function", ["None"], ["", "def", "center_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "h", ",", "w", "=", "tuple", "(", "size", ")", "\n", "assert", "(", "_h", ">=", "h", "and", "_w", ">=", "w", ")", "\n", "\n", "y", "=", "int", "(", "round", "(", "0.5", "*", "(", "_h", "-", "h", ")", ")", ")", "\n", "x", "=", "int", "(", "round", "(", "0.5", "*", "(", "_w", "-", "w", ")", ")", ")", "\n", "\n", "images_new", "=", "images", "[", ":", ",", "y", ":", "y", "+", "h", ",", "x", ":", "x", "+", "w", "]", "\n", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.random_flip": [[73, 82], ["images.copy", "range", "numpy.random.rand", "numpy.fliplr"], "function", ["None"], ["", "def", "random_flip", "(", "images", ")", ":", "\n", "    ", "images_new", "=", "images", ".", "copy", "(", ")", "\n", "flips", "=", "np", ".", "random", ".", "rand", "(", "images_new", ".", "shape", "[", "0", "]", ")", ">=", "0.5", "\n", "\n", "for", "i", "in", "range", "(", "images_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "if", "flips", "[", "i", "]", ":", "\n", "            ", "images_new", "[", "i", "]", "=", "np", ".", "fliplr", "(", "images", "[", "i", "]", ")", "\n", "\n", "", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.flip": [[83, 89], ["images.copy", "range", "numpy.fliplr"], "function", ["None"], ["", "def", "flip", "(", "images", ")", ":", "\n", "    ", "images_new", "=", "images", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "images_new", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "np", ".", "fliplr", "(", "images", "[", "i", "]", ")", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.resize": [[90, 101], ["tuple", "imageprocessing.get_new_shape", "numpy.ndarray", "range", "scipy.misc.imresize"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape"], ["", "def", "resize", "(", "images", ",", "size", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "h", ",", "w", "=", "tuple", "(", "size", ")", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ")", "\n", "\n", "images_new", "=", "np", ".", "ndarray", "(", "shape_new", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "misc", ".", "imresize", "(", "images", "[", "i", "]", ",", "(", "h", ",", "w", ")", ")", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.padding": [[102, 116], ["imageprocessing.get_new_shape", "numpy.zeros", "len", "tuple"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape"], ["", "def", "padding", "(", "images", ",", "padding", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "if", "len", "(", "padding", ")", "==", "2", ":", "\n", "        ", "pad_t", "=", "pad_b", "=", "padding", "[", "0", "]", "\n", "pad_l", "=", "pad_r", "=", "padding", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "pad_t", ",", "pad_b", ",", "pad_l", ",", "pad_r", "=", "tuple", "(", "padding", ")", "\n", "\n", "", "size_new", "=", "(", "_h", "+", "pad_t", "+", "pad_b", ",", "_w", "+", "pad_l", "+", "pad_b", ")", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size_new", ")", "\n", "images_new", "=", "np", ".", "zeros", "(", "shape_new", ",", "dtype", "=", "images", ".", "dtype", ")", "\n", "images_new", "[", ":", ",", "pad_t", ":", "pad_t", "+", "_h", ",", "pad_l", ":", "pad_l", "+", "_w", "]", "=", "images", "\n", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.standardize_images": [[117, 127], ["images.astype"], "function", ["None"], ["", "def", "standardize_images", "(", "images", ",", "standard", ")", ":", "\n", "    ", "if", "standard", "==", "'mean_scale'", ":", "\n", "        ", "mean", "=", "127.5", "\n", "std", "=", "128.0", "\n", "", "elif", "standard", "==", "'scale'", ":", "\n", "        ", "mean", "=", "0.0", "\n", "std", "=", "255.0", "\n", "", "images_new", "=", "images", ".", "astype", "(", "np", ".", "float32", ")", "\n", "images_new", "=", "(", "images_new", "-", "mean", ")", "/", "std", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.random_shift": [[130, 145], ["imageprocessing.padding", "images.copy", "range", "int", "int", "numpy.random.rand", "numpy.random.rand"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.padding"], ["", "def", "random_shift", "(", "images", ",", "max_ratio", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "pad_x", "=", "int", "(", "_w", "*", "max_ratio", ")", "+", "1", "\n", "pad_y", "=", "int", "(", "_h", "*", "max_ratio", ")", "+", "1", "\n", "images_temp", "=", "padding", "(", "images", ",", "(", "pad_x", ",", "pad_y", ")", ")", "\n", "images_new", "=", "images", ".", "copy", "(", ")", "\n", "\n", "shift_x", "=", "(", "_w", "*", "max_ratio", "*", "np", ".", "random", ".", "rand", "(", "n", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "shift_y", "=", "(", "_h", "*", "max_ratio", "*", "np", ".", "random", ".", "rand", "(", "n", ")", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "images_new", "[", "i", "]", "=", "images_temp", "[", "i", ",", "pad_y", "+", "shift_y", "[", "i", "]", ":", "pad_y", "+", "shift_y", "[", "i", "]", "+", "_h", ",", "\n", "pad_x", "+", "shift_x", "[", "i", "]", ":", "pad_x", "+", "shift_x", "[", "i", "]", "+", "_w", "]", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.random_downsample": [[147, 159], ["images.copy", "range", "int", "int", "scipy.misc.imresize", "scipy.misc.imresize", "numpy.random.rand", "round", "round"], "function", ["None"], ["", "def", "random_downsample", "(", "images", ",", "min_ratio", ")", ":", "\n", "    ", "n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "images_new", "=", "images", ".", "copy", "(", ")", "\n", "ratios", "=", "min_ratio", "+", "(", "1", "-", "min_ratio", ")", "*", "np", ".", "random", ".", "rand", "(", "n", ")", "\n", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "w", "=", "int", "(", "round", "(", "ratios", "[", "i", "]", "*", "_w", ")", ")", "\n", "h", "=", "int", "(", "round", "(", "ratios", "[", "i", "]", "*", "_h", ")", ")", "\n", "images_new", "[", "i", ",", ":", "h", ",", ":", "w", "]", "=", "misc", ".", "imresize", "(", "images", "[", "i", "]", ",", "(", "h", ",", "w", ")", ")", "\n", "images_new", "[", "i", "]", "=", "misc", ".", "imresize", "(", "images_new", "[", "i", ",", ":", "h", ",", ":", "w", "]", ",", "(", "_h", ",", "_w", ")", ")", "\n", "\n", "", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.random_interpolate": [[160, 172], ["int", "numpy.random.rand", "images_new.astype.astype", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "random_interpolate", "(", "images", ")", ":", "\n", "    ", "_n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "nd", "=", "images", ".", "ndim", "-", "1", "\n", "assert", "_n", "%", "2", "==", "0", "\n", "n", "=", "int", "(", "_n", "/", "2", ")", "\n", "\n", "ratios", "=", "np", ".", "random", ".", "rand", "(", "n", ",", "*", "(", "[", "1", "]", "*", "nd", ")", ")", "\n", "images_left", ",", "images_right", "=", "(", "images", "[", "np", ".", "arange", "(", "n", ")", "*", "2", "]", ",", "images", "[", "np", ".", "arange", "(", "n", ")", "*", "2", "+", "1", "]", ")", "\n", "images_new", "=", "ratios", "*", "images_left", "+", "(", "1", "-", "ratios", ")", "*", "images_right", "\n", "images_new", "=", "images_new", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.expand_flip": [[173, 180], ["imageprocessing.get_new_shape", "numpy.stack", "images_new.reshape.reshape", "imageprocessing.flip"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.flip"], ["", "def", "expand_flip", "(", "images", ")", ":", "\n", "    ", "'''Flip each image in the array and insert it after the original image.'''", "\n", "_n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "n", "=", "2", "*", "_n", ")", "\n", "images_new", "=", "np", ".", "stack", "(", "[", "images", ",", "flip", "(", "images", ")", "]", ",", "axis", "=", "1", ")", "\n", "images_new", "=", "images_new", ".", "reshape", "(", "shape_new", ")", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.five_crop": [[181, 195], ["tuple", "imageprocessing.get_new_shape", "np.stack().reshape.append", "np.stack().reshape.append", "np.stack().reshape.append", "np.stack().reshape.append", "np.stack().reshape.append", "numpy.stack().reshape", "imageprocessing.center_crop", "numpy.stack"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.center_crop"], ["", "def", "five_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "_n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "h", ",", "w", "=", "tuple", "(", "size", ")", "\n", "assert", "h", "<=", "_h", "and", "w", "<=", "_w", "\n", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ",", "n", "=", "5", "*", "_n", ")", "\n", "images_new", "=", "[", "]", "\n", "images_new", ".", "append", "(", "images", "[", ":", ",", ":", "h", ",", ":", "w", "]", ")", "\n", "images_new", ".", "append", "(", "images", "[", ":", ",", ":", "h", ",", "-", "w", ":", "]", ")", "\n", "images_new", ".", "append", "(", "images", "[", ":", ",", "-", "h", ":", ",", ":", "w", "]", ")", "\n", "images_new", ".", "append", "(", "images", "[", ":", ",", "-", "h", ":", ",", "-", "w", ":", "]", ")", "\n", "images_new", ".", "append", "(", "center_crop", "(", "images", ",", "size", ")", ")", "\n", "images_new", "=", "np", ".", "stack", "(", "images_new", ",", "axis", "=", "1", ")", ".", "reshape", "(", "shape_new", ")", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.ten_crop": [[196, 204], ["imageprocessing.get_new_shape", "imageprocessing.five_crop", "imageprocessing.five_crop", "numpy.stack", "images_new.reshape.reshape", "imageprocessing.flip"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.get_new_shape", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.five_crop", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.five_crop", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.flip"], ["", "def", "ten_crop", "(", "images", ",", "size", ")", ":", "\n", "    ", "_n", ",", "_h", ",", "_w", "=", "images", ".", "shape", "[", ":", "3", "]", "\n", "shape_new", "=", "get_new_shape", "(", "images", ",", "size", ",", "n", "=", "10", "*", "_n", ")", "\n", "images_", "=", "five_crop", "(", "images", ",", "size", ")", "\n", "images_flip_", "=", "five_crop", "(", "flip", "(", "images", ")", ",", "size", ")", "\n", "images_new", "=", "np", ".", "stack", "(", "[", "images_", ",", "images_flip_", "]", ",", "axis", "=", "1", ")", "\n", "images_new", "=", "images_new", ".", "reshape", "(", "shape_new", ")", "\n", "return", "images_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.preprocess": [[222, 247], ["type", "numpy.stack", "len", "np.stack.append", "type", "scipy.misc.imread"], "function", ["None"], ["def", "preprocess", "(", "images", ",", "config", ",", "is_training", "=", "False", ")", ":", "\n", "# Load images first if they are file paths", "\n", "    ", "if", "type", "(", "images", "[", "0", "]", ")", "==", "str", ":", "\n", "        ", "image_paths", "=", "images", "\n", "images", "=", "[", "]", "\n", "assert", "(", "config", ".", "channels", "==", "1", "or", "config", ".", "channels", "==", "3", ")", "\n", "mode", "=", "'RGB'", "if", "config", ".", "channels", "==", "3", "else", "'I'", "\n", "for", "image_path", "in", "image_paths", ":", "\n", "            ", "images", ".", "append", "(", "misc", ".", "imread", "(", "image_path", ",", "mode", "=", "mode", ")", ")", "\n", "", "images", "=", "np", ".", "stack", "(", "images", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "assert", "type", "(", "images", ")", "==", "np", ".", "ndarray", "\n", "assert", "images", ".", "ndim", "==", "4", "\n", "\n", "# Process images", "\n", "", "proc_funcs", "=", "config", ".", "preprocess_train", "if", "is_training", "else", "config", ".", "preprocess_test", "\n", "\n", "for", "proc", "in", "proc_funcs", ":", "\n", "        ", "proc_name", ",", "proc_args", "=", "proc", "[", "0", "]", ",", "proc", "[", "1", ":", "]", "\n", "assert", "proc_name", "in", "register", ",", "\"Not a registered preprocessing function: {}\"", ".", "format", "(", "proc_name", ")", "\n", "images", "=", "register", "[", "proc_name", "]", "(", "images", ",", "*", "proc_args", ")", "\n", "", "if", "len", "(", "images", ".", "shape", ")", "==", "3", ":", "\n", "        ", "images", "=", "images", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "return", "images", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.create_log_dir": [[35, 43], ["datetime.datetime.strftime", "os.path.join", "shutil.copyfile", "datetime.datetime.now", "os.path.expanduser", "os.path.isdir", "os.makedirs", "os.path.join"], "function", ["None"], ["def", "create_log_dir", "(", "config", ",", "config_file", ")", ":", "\n", "    ", "subdir", "=", "datetime", ".", "strftime", "(", "datetime", ".", "now", "(", ")", ",", "'%Y%m%d-%H%M%S'", ")", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "config", ".", "log_base_dir", ")", ",", "config", ".", "name", ",", "subdir", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "log_dir", ")", ":", "# Create the log directory if it doesn't exist", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "shutil", ".", "copyfile", "(", "config_file", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'config.py'", ")", ")", "\n", "\n", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.get_updated_learning_rate": [[45, 76], ["config.learning_rate_schedule.items", "ValueError", "math.floor", "ValueError", "math.cos", "float"], "function", ["None"], ["", "def", "get_updated_learning_rate", "(", "global_step", ",", "config", ")", ":", "\n", "    ", "if", "config", ".", "learning_rate_strategy", "==", "'step'", ":", "\n", "        ", "max_step", "=", "-", "1", "\n", "learning_rate", "=", "0.0", "\n", "for", "step", ",", "lr", "in", "config", ".", "learning_rate_schedule", ".", "items", "(", ")", ":", "\n", "            ", "if", "global_step", ">=", "step", "and", "step", ">", "max_step", ":", "\n", "                ", "learning_rate", "=", "lr", "\n", "max_step", "=", "step", "\n", "", "", "if", "max_step", "==", "-", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'cannot find learning rate for step %d'", "%", "global_step", ")", "\n", "", "", "elif", "config", ".", "learning_rate_strategy", "==", "'cosine'", ":", "\n", "        ", "initial", "=", "config", ".", "learning_rate_schedule", "[", "'initial'", "]", "\n", "interval", "=", "config", ".", "learning_rate_schedule", "[", "'interval'", "]", "\n", "end_step", "=", "config", ".", "learning_rate_schedule", "[", "'end_step'", "]", "\n", "step", "=", "math", ".", "floor", "(", "float", "(", "global_step", ")", "/", "interval", ")", "*", "interval", "\n", "assert", "step", "<=", "end_step", "\n", "learning_rate", "=", "initial", "*", "0.5", "*", "(", "math", ".", "cos", "(", "math", ".", "pi", "*", "step", "/", "end_step", ")", "+", "1", ")", "\n", "", "elif", "config", ".", "learning_rate_strategy", "==", "'linear'", ":", "\n", "        ", "initial", "=", "config", ".", "learning_rate_schedule", "[", "'initial'", "]", "\n", "start", "=", "config", ".", "learning_rate_schedule", "[", "'start'", "]", "\n", "end_step", "=", "config", ".", "learning_rate_schedule", "[", "'end_step'", "]", "\n", "assert", "global_step", "<=", "end_step", "\n", "assert", "start", "<", "end_step", "\n", "if", "global_step", "<", "start", ":", "\n", "            ", "learning_rate", "=", "initial", "\n", "", "else", ":", "\n", "            ", "learning_rate", "=", "1.0", "*", "initial", "*", "(", "end_step", "-", "global_step", ")", "/", "(", "end_step", "-", "start", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Unkown learning rate strategy!\"", ")", "\n", "\n", "", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.display_info": [[77, 85], ["sys.stdout.write", "watch_list.items", "sys.stdout.write", "type", "sys.stdout.write", "type", "sys.stdout.write"], "function", ["None"], ["", "def", "display_info", "(", "epoch", ",", "step", ",", "duration", ",", "watch_list", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "'[%d][%d] time: %2.2f'", "%", "(", "epoch", "+", "1", ",", "step", "+", "1", ",", "duration", ")", ")", "\n", "for", "item", "in", "watch_list", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "item", "[", "1", "]", ")", "in", "[", "float", ",", "np", ".", "float32", ",", "np", ".", "float64", "]", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'   %s: %2.3f'", "%", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "elif", "type", "(", "item", "[", "1", "]", ")", "in", "[", "int", ",", "bool", ",", "np", ".", "int32", ",", "np", ".", "int64", ",", "np", ".", "bool", "]", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'   %s: %d'", "%", "(", "item", "[", "0", "]", ",", "item", "[", "1", "]", ")", ")", "\n", "", "", "sys", ".", "stdout", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.l2_normalize": [[86, 89], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "l2_normalize", "(", "x", ",", "axis", "=", "None", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "x", "=", "x", "/", "(", "eps", "+", "np", ".", "linalg", ".", "norm", "(", "x", ",", "axis", "=", "axis", ")", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.pair_euc_score": [[90, 94], ["numpy.sum", "numpy.array", "numpy.array", "numpy.square"], "function", ["None"], ["", "def", "pair_euc_score", "(", "x1", ",", "x2", ")", ":", "\n", "    ", "x1", ",", "x2", "=", "np", ".", "array", "(", "x1", ")", ",", "np", ".", "array", "(", "x2", ")", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "x1", "-", "x2", ")", ",", "axis", "=", "1", ")", "\n", "return", "-", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.pair_MLS_score": [[95, 109], ["numpy.sum", "int", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.log", "numpy.square"], "function", ["None"], ["", "def", "pair_MLS_score", "(", "x1", ",", "x2", ",", "sigma_sq1", "=", "None", ",", "sigma_sq2", "=", "None", ")", ":", "\n", "    ", "if", "sigma_sq1", "is", "None", ":", "\n", "        ", "x1", ",", "x2", "=", "np", ".", "array", "(", "x1", ")", ",", "np", ".", "array", "(", "x2", ")", "\n", "assert", "sigma_sq2", "is", "None", ",", "'either pass in concated features, or mu, sigma_sq for both!'", "\n", "D", "=", "int", "(", "x1", ".", "shape", "[", "1", "]", "/", "2", ")", "\n", "mu1", ",", "sigma_sq1", "=", "x1", "[", ":", ",", ":", "D", "]", ",", "x1", "[", ":", ",", "D", ":", "]", "\n", "mu2", ",", "sigma_sq2", "=", "x2", "[", ":", ",", ":", "D", "]", ",", "x2", "[", ":", ",", "D", ":", "]", "\n", "", "else", ":", "\n", "        ", "x1", ",", "x2", "=", "np", ".", "array", "(", "x1", ")", ",", "np", ".", "array", "(", "x2", ")", "\n", "sigma_sq1", ",", "sigma_sq2", "=", "np", ".", "array", "(", "sigma_sq1", ")", ",", "np", ".", "array", "(", "sigma_sq2", ")", "\n", "mu1", ",", "mu2", "=", "x1", ",", "x2", "\n", "", "sigma_sq_mutual", "=", "sigma_sq1", "+", "sigma_sq2", "\n", "dist", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "mu1", "-", "mu2", ")", "/", "sigma_sq_mutual", "+", "np", ".", "log", "(", "sigma_sq_mutual", ")", ",", "axis", "=", "1", ")", "\n", "return", "-", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.aggregate_PFE": [[111, 130], ["numpy.sum", "numpy.min", "int", "numpy.sum", "utils.l2_normalize", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.l2_normalize"], ["", "def", "aggregate_PFE", "(", "x", ",", "sigma_sq", "=", "None", ",", "normalize", "=", "True", ",", "concatenate", "=", "False", ")", ":", "\n", "    ", "if", "sigma_sq", "is", "None", ":", "\n", "        ", "D", "=", "int", "(", "x", ".", "shape", "[", "1", "]", "/", "2", ")", "\n", "mu", ",", "sigma_sq", "=", "x", "[", ":", ",", ":", "D", "]", ",", "x", "[", ":", ",", "D", ":", "]", "\n", "", "else", ":", "\n", "        ", "mu", "=", "x", "\n", "", "attention", "=", "1.", "/", "sigma_sq", "\n", "attention", "=", "attention", "/", "np", ".", "sum", "(", "attention", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "mu_new", "=", "np", ".", "sum", "(", "mu", "*", "attention", ",", "axis", "=", "0", ")", "\n", "sigma_sq_new", "=", "np", ".", "min", "(", "sigma_sq", ",", "axis", "=", "0", ")", "\n", "\n", "if", "normalize", ":", "\n", "        ", "mu_new", "=", "l2_normalize", "(", "mu_new", ")", "\n", "\n", "", "if", "concatenate", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "[", "mu_new", ",", "sigma_sq_new", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "mu_new", ",", "sigma_sq_new", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.square_bbox": [[18, 28], ["tuple", "max"], "function", ["None"], ["def", "square_bbox", "(", "bbox", ")", ":", "\n", "    ", "'''Output a square-like bounding box. But because all the numbers are float, \n    it is not guaranteed to really be a square.'''", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "tuple", "(", "bbox", ")", "\n", "cx", "=", "x", "+", "0.5", "*", "w", "\n", "cy", "=", "y", "+", "0.5", "*", "h", "\n", "_w", "=", "_h", "=", "max", "(", "w", ",", "h", ")", "\n", "_x", "=", "cx", "-", "0.5", "*", "_w", "\n", "_y", "=", "cy", "-", "0.5", "*", "_h", "\n", "return", "(", "_x", ",", "_y", ",", "_w", ",", "_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.pad_bbox": [[29, 34], ["tuple"], "function", ["None"], ["", "def", "pad_bbox", "(", "bbox", ",", "padding_ratio", ")", ":", "\n", "    ", "x", ",", "y", ",", "w", ",", "h", "=", "tuple", "(", "bbox", ")", "\n", "pad_x", "=", "padding_ratio", "*", "w", "\n", "pad_y", "=", "padding_ratio", "*", "h", "\n", "return", "(", "x", "-", "pad_x", ",", "y", "-", "pad_y", ",", "w", "+", "2", "*", "pad_x", ",", "h", "+", "2", "*", "pad_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.crop": [[35, 43], ["tuple", "max", "numpy.zeros", "int", "map", "round"], "function", ["None"], ["", "def", "crop", "(", "image", ",", "bbox", ")", ":", "\n", "    ", "rint", "=", "lambda", "a", ":", "int", "(", "round", "(", "a", ")", ")", "\n", "x", ",", "y", ",", "w", ",", "h", "=", "tuple", "(", "map", "(", "rint", ",", "bbox", ")", ")", "\n", "safe_pad", "=", "max", "(", "0", ",", "-", "x", ",", "-", "y", ",", "x", "+", "w", "-", "image", ".", "shape", "[", "1", "]", ",", "y", "+", "h", "-", "image", ".", "shape", "[", "0", "]", ")", "\n", "img", "=", "np", ".", "zeros", "(", "(", "image", ".", "shape", "[", "0", "]", "+", "2", "*", "safe_pad", ",", "image", ".", "shape", "[", "1", "]", "+", "2", "*", "safe_pad", ",", "image", ".", "shape", "[", "2", "]", ")", ")", "\n", "img", "[", "safe_pad", ":", "safe_pad", "+", "image", ".", "shape", "[", "0", "]", ",", "safe_pad", ":", "safe_pad", "+", "image", ".", "shape", "[", "1", "]", ",", ":", "]", "=", "image", "\n", "img", "=", "img", "[", "safe_pad", "+", "y", ":", "safe_pad", "+", "y", "+", "h", ",", "safe_pad", "+", "x", ":", "safe_pad", "+", "x", "+", "w", ",", ":", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.main": [[45, 109], ["os.listdir", "os.listdir", "enumerate", "print", "print", "open", "fr.readlines", "os.path.splitext", "os.path.splitext", "line.split", "os.path.join", "os.path.join", "cv2.imread", "print", "len", "parts[].replace", "print", "os.path.isfile", "print", "tuple", "crop_ijba.pad_bbox", "crop_ijba.crop", "os.path.join", "cv2.imwrite", "os.path.splitext", "print", "map", "crop_ijba.square_bbox", "os.path.isdir", "os.makedirs", "cv2.resize", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.pad_bbox", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.crop", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.square_bbox", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.resize"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "meta_file", ",", "'r'", ")", "as", "fr", ":", "\n", "        ", "lines", "=", "fr", ".", "readlines", "(", ")", "\n", "\n", "# Some files have different extensions in the meta file,", "\n", "# record their oroginal name for reading", "\n", "", "files_img", "=", "os", ".", "listdir", "(", "args", ".", "prefix", "+", "'/img/'", ")", "\n", "files_frames", "=", "os", ".", "listdir", "(", "args", ".", "prefix", "+", "'/frame/'", ")", "\n", "dict_path", "=", "{", "}", "\n", "for", "img", "in", "files_img", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "img", ")", "[", "0", "]", "\n", "dict_path", "[", "'img/'", "+", "basename", "]", "=", "args", ".", "prefix", "+", "'/img/'", "+", "img", "\n", "", "for", "img", "in", "files_frames", ":", "\n", "        ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "img", ")", "[", "0", "]", "\n", "dict_path", "[", "'frame/'", "+", "basename", "]", "=", "args", ".", "prefix", "+", "'/frame/'", "+", "img", "\n", "\n", "", "count_success", "=", "0", "\n", "count_fail", "=", "0", "\n", "dict_name", "=", "{", "}", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "i", ">", "0", ":", "\n", "            ", "parts", "=", "line", ".", "split", "(", "','", ")", "\n", "label", "=", "parts", "[", "0", "]", "\n", "impath", "=", "os", ".", "path", ".", "join", "(", "args", ".", "prefix", ",", "parts", "[", "2", "]", ")", "\n", "imname", "=", "os", ".", "path", ".", "join", "(", "label", ",", "parts", "[", "2", "]", ".", "replace", "(", "'/'", ",", "'_'", ")", ")", "\n", "\n", "# Check name duplication", "\n", "if", "imname", "in", "dict_name", ":", "\n", "                ", "print", "(", "'image %s at line %d collision with  line %d'", "%", "(", "imname", ",", "i", ",", "dict_name", "[", "imname", "]", ")", ")", "\n", "", "dict_name", "[", "imname", "]", "=", "i", "\n", "\n", "# Check extention difference", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "impath", ")", ":", "\n", "                ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "parts", "[", "2", "]", ")", "[", "0", "]", "\n", "if", "basename", "in", "dict_path", ":", "\n", "                    ", "impath", "=", "dict_path", "[", "basename", "]", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'%s not found in the input directory, skipped'", "%", "(", "impath", ")", ")", "\n", "continue", "\n", "\n", "", "", "img", "=", "cv2", ".", "imread", "(", "impath", ",", "flags", "=", "1", ")", "\n", "\n", "if", "img", ".", "ndim", "==", "0", ":", "\n", "                ", "print", "(", "'Invalid image: %s'", "%", "impath", ")", "\n", "count_fail", "+=", "1", "\n", "", "else", ":", "\n", "                ", "bbox", "=", "tuple", "(", "map", "(", "float", ",", "parts", "[", "6", ":", "10", "]", ")", ")", "\n", "if", "square_crop", ":", "\n", "                    ", "bbox", "=", "square_bbox", "(", "bbox", ")", "\n", "", "bbox", "=", "pad_bbox", "(", "bbox", ",", "padding_ratio", ")", "\n", "img", "=", "crop", "(", "img", ",", "bbox", ")", "\n", "\n", "impath_new", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_prefix", ",", "imname", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "dirname", "(", "impath_new", ")", ")", "==", "False", ":", "\n", "                    ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "impath_new", ")", ")", "\n", "", "if", "target_size", ":", "\n", "                    ", "img", "=", "cv2", ".", "resize", "(", "img", ",", "target_size", ")", "\n", "", "cv2", ".", "imwrite", "(", "impath_new", ",", "img", ")", "\n", "count_success", "+=", "1", "\n", "", "", "if", "i", "%", "100", "==", "0", ":", "\n", "            ", "print", "(", "'cropping %dth image'", "%", "(", "i", "+", "1", ")", ")", "\n", "\n", "", "", "print", "(", "'%d images cropped, %d images failed'", "%", "(", "count_success", ",", "count_fail", ")", ")", "\n", "print", "(", "'%d image names created'", "%", "len", "(", "dict_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.crop_ijba.parse_arguments": [[111, 117], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'meta_file'", ",", "type", "=", "str", ",", "help", "=", "'Path to metadata file.'", ")", "\n", "parser", ".", "add_argument", "(", "'prefix'", ",", "type", "=", "str", ",", "help", "=", "'Path to the folder containing the original images of IJB-A.'", ")", "\n", "parser", ".", "add_argument", "(", "'save_prefix'", ",", "type", "=", "str", ",", "help", "=", "'Directory for output images.'", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.align_dataset.align": [[40, 62], ["tuple", "numpy.array().astype().reshape", "align.matlab_cp2tform.get_similarity_transform_for_cv2", "cv2.warpAffine", "numpy.concatenate", "numpy.matmul", "tfm.reshape.reshape", "max", "numpy.array", "np.matmul.reshape", "np.matmul.T.reshape", "numpy.array().astype", "numpy.array().astype", "np.array().astype().reshape.reshape", "np.array().astype().reshape.reshape", "numpy.ones", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.get_similarity_transform_for_cv2"], ["def", "align", "(", "src_img", ",", "src_pts", ",", "ref_pts", ",", "image_size", ",", "scale", "=", "1.0", ",", "transpose_input", "=", "False", ")", ":", "\n", "    ", "w", ",", "h", "=", "image_size", "=", "tuple", "(", "image_size", ")", "\n", "\n", "# Actual offset = new center - old center (scaled)", "\n", "scale_", "=", "max", "(", "w", ",", "h", ")", "*", "scale", "\n", "cx_ref", "=", "cy_ref", "=", "0.", "\n", "offset_x", "=", "0.5", "*", "w", "-", "cx_ref", "*", "scale_", "\n", "offset_y", "=", "0.5", "*", "h", "-", "cy_ref", "*", "scale_", "\n", "\n", "s", "=", "np", ".", "array", "(", "src_pts", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "r", "=", "np", ".", "array", "(", "ref_pts", ")", ".", "astype", "(", "np", ".", "float32", ")", "*", "scale_", "+", "np", ".", "array", "(", "[", "[", "offset_x", ",", "offset_y", "]", "]", ")", "\n", "if", "transpose_input", ":", "\n", "        ", "s", "=", "s", ".", "reshape", "(", "[", "2", ",", "-", "1", "]", ")", ".", "T", "\n", "\n", "", "tfm", "=", "get_similarity_transform_for_cv2", "(", "s", ",", "r", ")", "\n", "dst_img", "=", "cv2", ".", "warpAffine", "(", "src_img", ",", "tfm", ",", "image_size", ")", "\n", "\n", "s_new", "=", "np", ".", "concatenate", "(", "[", "s", ".", "reshape", "(", "[", "2", ",", "-", "1", "]", ")", ",", "np", ".", "ones", "(", "(", "1", ",", "s", ".", "shape", "[", "0", "]", ")", ")", "]", ")", "\n", "s_new", "=", "np", ".", "matmul", "(", "tfm", ",", "s_new", ")", "\n", "s_new", "=", "s_new", ".", "reshape", "(", "[", "-", "1", "]", ")", "if", "transpose_input", "else", "s_new", ".", "T", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "tfm", "=", "tfm", ".", "reshape", "(", "[", "-", "1", "]", ")", "\n", "return", "dst_img", ",", "s_new", ",", "tfm", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.align_dataset.main": [[64, 108], ["numpy.array", "enumerate", "open", "f.readlines", "line.strip.strip", "line.strip.split", "scipy.misc.imread", "align_dataset.align", "float", "os.path.join", "matplotlib.imshow", "matplotlib.show", "os.path.basename", "os.path.join", "os.path.join", "scipy.misc.imsave", "os.path.isdir", "os.makedirs", "print", "os.path.join.split"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.align_dataset.align"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "input_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "ref_pts", "=", "np", ".", "array", "(", "[", "[", "-", "1.58083929e-01", ",", "-", "3.84258929e-02", "]", ",", "\n", "[", "1.56533929e-01", ",", "-", "4.01660714e-02", "]", ",", "\n", "[", "2.25000000e-04", ",", "1.40505357e-01", "]", ",", "\n", "[", "-", "1.29024107e-01", ",", "3.24691964e-01", "]", ",", "\n", "[", "1.31516964e-01", ",", "3.23250893e-01", "]", "]", ")", "\n", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "items", "=", "line", ".", "split", "(", ")", "\n", "img_path", "=", "items", "[", "0", "]", "\n", "src_pts", "=", "[", "float", "(", "item", ")", "for", "item", "in", "items", "[", "1", ":", "]", "]", "\n", "\n", "# Transform", "\n", "if", "args", ".", "prefix", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "prefix", ",", "img_path", ")", "\n", "", "img", "=", "misc", ".", "imread", "(", "img_path", ")", "\n", "img_new", ",", "new_pts", ",", "tfm", "=", "align", "(", "img", ",", "src_pts", ",", "ref_pts", ",", "args", ".", "image_size", ",", "args", ".", "scale", ",", "args", ".", "transpose_input", ")", "\n", "\n", "# Visulize", "\n", "if", "args", ".", "visualize", ":", "\n", "            ", "plt", ".", "imshow", "(", "img_new", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "\n", "# Output", "\n", "", "if", "args", ".", "output_dir", ":", "\n", "            ", "file_name", "=", "os", ".", "path", ".", "basename", "(", "img_path", ")", "\n", "sub_dir", "=", "[", "d", "for", "d", "in", "img_path", ".", "split", "(", "'/'", ")", "if", "d", "!=", "''", "]", "\n", "sub_dir", "=", "'/'", ".", "join", "(", "sub_dir", "[", "-", "args", ".", "dir_depth", ":", "-", "1", "]", ")", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "sub_dir", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dir_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "dir_path", ")", "\n", "", "img_path_new", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file_name", ")", "\n", "misc", ".", "imsave", "(", "img_path_new", ",", "img_new", ")", "\n", "if", "i", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "img_path_new", ")", "\n", "\n", "\n", "", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.align_dataset.parse_arguments": [[112, 128], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "parse_arguments", "(", "argv", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'input_file'", ",", "type", "=", "str", ",", "help", "=", "'A list file of image paths and landmarks.'", ")", "\n", "parser", ".", "add_argument", "(", "'output_dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory with aligned face thumbnails.'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--prefix'", ",", "type", "=", "str", ",", "help", "=", "'The prefix of the image files in the input_file.'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--image_size'", ",", "type", "=", "int", ",", "nargs", "=", "2", ",", "\n", "help", "=", "'Image size (height, width) in pixels.'", ",", "default", "=", "[", "112", ",", "112", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "type", "=", "float", ",", "\n", "help", "=", "'Scale the face size in the target image.'", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--dir_depth'", ",", "type", "=", "int", ",", "\n", "help", "=", "'When writing into new directory, how many layers of the dir tree should be kept.'", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--transpose_input'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Set true if the input landmarks is in the format x1 x2 ... y1 y2 ...'", ")", "\n", "parser", ".", "add_argument", "(", "'--visualize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Visualize the aligned images.'", ")", "\n", "return", "parser", ".", "parse_args", "(", "argv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.MatlabCp2tormException.__str__": [[170, 173], ["super.__str__"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.MatlabCp2tormException.__str__"], ["    ", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'In File {}:{}'", ".", "format", "(", "\n", "__file__", ",", "super", ".", "__str__", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.tformfwd": [[174, 198], ["numpy.hstack", "numpy.dot", "numpy.ones"], "function", ["None"], ["", "", "def", "tformfwd", "(", "trans", ",", "uv", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        apply affine transform 'trans' to uv\n\n    Parameters:\n    ----------\n        @trans: 3x3 np.array\n            transform matrix\n        @uv: Kx2 np.array\n            each row is a pair of coordinates (x, y)\n\n    Returns:\n    ----------\n        @xy: Kx2 np.array\n            each row is a pair of transformed coordinates (x, y)\n    \"\"\"", "\n", "uv", "=", "np", ".", "hstack", "(", "(", "\n", "uv", ",", "np", ".", "ones", "(", "(", "uv", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", ")", ")", "\n", "xy", "=", "np", ".", "dot", "(", "uv", ",", "trans", ")", "\n", "xy", "=", "xy", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "return", "xy", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.tforminv": [[200, 221], ["numpy.linalg.inv", "matlab_cp2tform.tformfwd"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.tformfwd"], ["", "def", "tforminv", "(", "trans", ",", "uv", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        apply the inverse of affine transform 'trans' to uv\n\n    Parameters:\n    ----------\n        @trans: 3x3 np.array\n            transform matrix\n        @uv: Kx2 np.array\n            each row is a pair of coordinates (x, y)\n\n    Returns:\n    ----------\n        @xy: Kx2 np.array\n            each row is a pair of inverse-transformed coordinates (x, y)\n    \"\"\"", "\n", "Tinv", "=", "inv", "(", "trans", ")", "\n", "xy", "=", "tformfwd", "(", "Tinv", ",", "uv", ")", "\n", "return", "xy", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findNonreflectiveSimilarity": [[223, 338], ["xy[].reshape", "xy[].reshape", "numpy.hstack", "numpy.hstack", "numpy.vstack", "uv[].reshape", "uv[].reshape", "numpy.vstack", "numpy.array", "numpy.linalg.inv", "numpy.array", "numpy.linalg.matrix_rank", "numpy.linalg.lstsq", "numpy.squeeze", "Exception", "numpy.ones", "numpy.zeros", "numpy.zeros", "numpy.ones"], "function", ["None"], ["", "def", "findNonreflectiveSimilarity", "(", "uv", ",", "xy", ",", "options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        Find Non-reflective Similarity Transform Matrix 'trans':\n            u = uv[:, 0]\n            v = uv[:, 1]\n            x = xy[:, 0]\n            y = xy[:, 1]\n            [x, y, 1] = [u, v, 1] * trans\n\n    Parameters:\n    ----------\n        @uv: Kx2 np.array\n            source points each row is a pair of coordinates (x, y)\n        @xy: Kx2 np.array\n            each row is a pair of inverse-transformed\n        @option: not used, keep it as None\n\n    Returns:\n        @trans: 3x3 np.array\n            transform matrix from uv to xy\n        @trans_inv: 3x3 np.array\n            inverse of trans, transform matrix from xy to uv\n\n    Matlab:\n    ----------\n    % For a nonreflective similarity:\n    %\n    % let sc = s*cos(theta)\n    % let ss = s*sin(theta)\n    %\n    %                   [ sc -ss\n    % [u v] = [x y 1] *   ss  sc\n    %                     tx  ty]\n    %\n    % There are 4 unknowns: sc,ss,tx,ty.\n    %\n    % Another way to write this is:\n    %\n    % u = [x y 1 0] * [sc\n    %                  ss\n    %                  tx\n    %                  ty]\n    %\n    % v = [y -x 0 1] * [sc\n    %                   ss\n    %                   tx\n    %                   ty]\n    %\n    % With 2 or more correspondence points we can combine the u equations and\n    % the v equations for one linear system to solve for sc,ss,tx,ty.\n    %\n    % [ u1  ] = [ x1  y1  1  0 ] * [sc]\n    % [ u2  ]   [ x2  y2  1  0 ]   [ss]\n    % [ ... ]   [ ...          ]   [tx]\n    % [ un  ]   [ xn  yn  1  0 ]   [ty]\n    % [ v1  ]   [ y1 -x1  0  1 ]\n    % [ v2  ]   [ y2 -x2  0  1 ]\n    % [ ... ]   [ ...          ]\n    % [ vn  ]   [ yn -xn  0  1 ]\n    %\n    % Or rewriting the above matrix equation:\n    % U = X * r, where r = [sc ss tx ty]'\n    % so r = X\\ U.\n    %\n    \"\"\"", "\n", "options", "=", "{", "'K'", ":", "2", "}", "\n", "\n", "K", "=", "options", "[", "'K'", "]", "\n", "M", "=", "xy", ".", "shape", "[", "0", "]", "\n", "x", "=", "xy", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# use reshape to keep a column vector", "\n", "y", "=", "xy", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# use reshape to keep a column vector", "\n", "# print '--->x, y:\\n', x, y", "\n", "\n", "tmp1", "=", "np", ".", "hstack", "(", "(", "x", ",", "y", ",", "np", ".", "ones", "(", "(", "M", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "M", ",", "1", ")", ")", ")", ")", "\n", "tmp2", "=", "np", ".", "hstack", "(", "(", "y", ",", "-", "x", ",", "np", ".", "zeros", "(", "(", "M", ",", "1", ")", ")", ",", "np", ".", "ones", "(", "(", "M", ",", "1", ")", ")", ")", ")", "\n", "X", "=", "np", ".", "vstack", "(", "(", "tmp1", ",", "tmp2", ")", ")", "\n", "# print '--->X.shape: ', X.shape", "\n", "# print 'X:\\n', X", "\n", "\n", "u", "=", "uv", "[", ":", ",", "0", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# use reshape to keep a column vector", "\n", "v", "=", "uv", "[", ":", ",", "1", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", "# use reshape to keep a column vector", "\n", "U", "=", "np", ".", "vstack", "(", "(", "u", ",", "v", ")", ")", "\n", "# print '--->U.shape: ', U.shape", "\n", "# print 'U:\\n', U", "\n", "\n", "# We know that X * r = U", "\n", "if", "rank", "(", "X", ")", ">=", "2", "*", "K", ":", "\n", "        ", "r", ",", "_", ",", "_", ",", "_", "=", "lstsq", "(", "X", ",", "U", ")", "\n", "r", "=", "np", ".", "squeeze", "(", "r", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'cp2tform:twoUniquePointsReq'", ")", "\n", "\n", "# print '--->r:\\n', r", "\n", "\n", "", "sc", "=", "r", "[", "0", "]", "\n", "ss", "=", "r", "[", "1", "]", "\n", "tx", "=", "r", "[", "2", "]", "\n", "ty", "=", "r", "[", "3", "]", "\n", "\n", "Tinv", "=", "np", ".", "array", "(", "[", "\n", "[", "sc", ",", "-", "ss", ",", "0", "]", ",", "\n", "[", "ss", ",", "sc", ",", "0", "]", ",", "\n", "[", "tx", ",", "ty", ",", "1", "]", "\n", "]", ")", "\n", "\n", "# print '--->Tinv:\\n', Tinv", "\n", "\n", "T", "=", "inv", "(", "Tinv", ")", "\n", "# print '--->T:\\n', T", "\n", "\n", "T", "[", ":", ",", "2", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "\n", "return", "T", ",", "Tinv", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findSimilarity": [[340, 433], ["matlab_cp2tform.findNonreflectiveSimilarity", "matlab_cp2tform.findNonreflectiveSimilarity", "numpy.array", "numpy.dot", "matlab_cp2tform.tformfwd", "numpy.linalg.norm", "matlab_cp2tform.tformfwd", "numpy.linalg.norm", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findNonreflectiveSimilarity", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findNonreflectiveSimilarity", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.tformfwd", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.tformfwd"], ["", "def", "findSimilarity", "(", "uv", ",", "xy", ",", "options", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        Find Reflective Similarity Transform Matrix 'trans':\n            u = uv[:, 0]\n            v = uv[:, 1]\n            x = xy[:, 0]\n            y = xy[:, 1]\n            [x, y, 1] = [u, v, 1] * trans\n\n    Parameters:\n    ----------\n        @uv: Kx2 np.array\n            source points each row is a pair of coordinates (x, y)\n        @xy: Kx2 np.array\n            each row is a pair of inverse-transformed\n        @option: not used, keep it as None\n\n    Returns:\n    ----------\n        @trans: 3x3 np.array\n            transform matrix from uv to xy\n        @trans_inv: 3x3 np.array\n            inverse of trans, transform matrix from xy to uv\n\n    Matlab:\n    ----------\n    % The similarities are a superset of the nonreflective similarities as they may\n    % also include reflection.\n    %\n    % let sc = s*cos(theta)\n    % let ss = s*sin(theta)\n    %\n    %                   [ sc -ss\n    % [u v] = [x y 1] *   ss  sc\n    %                     tx  ty]\n    %\n    %          OR\n    %\n    %                   [ sc  ss\n    % [u v] = [x y 1] *   ss -sc\n    %                     tx  ty]\n    %\n    % Algorithm:\n    % 1) Solve for trans1, a nonreflective similarity.\n    % 2) Reflect the xy data across the Y-axis,\n    %    and solve for trans2r, also a nonreflective similarity.\n    % 3) Transform trans2r to trans2, undoing the reflection done in step 2.\n    % 4) Use TFORMFWD to transform uv using both trans1 and trans2,\n    %    and compare the results, Returnsing the transformation corresponding\n    %    to the smaller L2 norm.\n\n    % Need to reset options.K to prepare for calls to findNonreflectiveSimilarity.\n    % This is safe because we already checked that there are enough point pairs.\n    \"\"\"", "\n", "options", "=", "{", "'K'", ":", "2", "}", "\n", "\n", "#    uv = np.array(uv)", "\n", "#    xy = np.array(xy)", "\n", "\n", "# Solve for trans1", "\n", "trans1", ",", "trans1_inv", "=", "findNonreflectiveSimilarity", "(", "uv", ",", "xy", ",", "options", ")", "\n", "\n", "# Solve for trans2", "\n", "\n", "# manually reflect the xy data across the Y-axis", "\n", "xyR", "=", "xy", "\n", "xyR", "[", ":", ",", "0", "]", "=", "-", "1", "*", "xyR", "[", ":", ",", "0", "]", "\n", "\n", "trans2r", ",", "trans2r_inv", "=", "findNonreflectiveSimilarity", "(", "uv", ",", "xyR", ",", "options", ")", "\n", "\n", "# manually reflect the tform to undo the reflection done on xyR", "\n", "TreflectY", "=", "np", ".", "array", "(", "[", "\n", "[", "-", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "\n", "]", ")", "\n", "\n", "trans2", "=", "np", ".", "dot", "(", "trans2r", ",", "TreflectY", ")", "\n", "\n", "# Figure out if trans1 or trans2 is better", "\n", "xy1", "=", "tformfwd", "(", "trans1", ",", "uv", ")", "\n", "norm1", "=", "norm", "(", "xy1", "-", "xy", ")", "\n", "\n", "xy2", "=", "tformfwd", "(", "trans2", ",", "uv", ")", "\n", "norm2", "=", "norm", "(", "xy2", "-", "xy", ")", "\n", "\n", "if", "norm1", "<=", "norm2", ":", "\n", "        ", "return", "trans1", ",", "trans1_inv", "\n", "", "else", ":", "\n", "        ", "trans2_inv", "=", "inv", "(", "trans2", ")", "\n", "return", "trans2", ",", "trans2_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.get_similarity_transform": [[435, 473], ["matlab_cp2tform.findSimilarity", "matlab_cp2tform.findNonreflectiveSimilarity"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findSimilarity", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.findNonreflectiveSimilarity"], ["", "", "def", "get_similarity_transform", "(", "src_pts", ",", "dst_pts", ",", "reflective", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        Find Similarity Transform Matrix 'trans':\n            u = src_pts[:, 0]\n            v = src_pts[:, 1]\n            x = dst_pts[:, 0]\n            y = dst_pts[:, 1]\n            [x, y, 1] = [u, v, 1] * trans\n\n    Parameters:\n    ----------\n        @src_pts: Kx2 np.array\n            source points, each row is a pair of coordinates (x, y)\n        @dst_pts: Kx2 np.array\n            destination points, each row is a pair of transformed\n            coordinates (x, y)\n        @reflective: True or False\n            if True:\n                use reflective similarity transform\n            else:\n                use non-reflective similarity transform\n\n    Returns:\n    ----------\n       @trans: 3x3 np.array\n            transform matrix from uv to xy\n        trans_inv: 3x3 np.array\n            inverse of trans, transform matrix from xy to uv\n    \"\"\"", "\n", "\n", "if", "reflective", ":", "\n", "        ", "trans", ",", "trans_inv", "=", "findSimilarity", "(", "src_pts", ",", "dst_pts", ")", "\n", "", "else", ":", "\n", "        ", "trans", ",", "trans_inv", "=", "findNonreflectiveSimilarity", "(", "src_pts", ",", "dst_pts", ")", "\n", "\n", "", "return", "trans", ",", "trans_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.cvt_tform_mat_for_cv2": [[475, 501], ["None"], "function", ["None"], ["", "def", "cvt_tform_mat_for_cv2", "(", "trans", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        Convert Transform Matrix 'trans' into 'cv2_trans' which could be\n        directly used by cv2.warpAffine():\n            u = src_pts[:, 0]\n            v = src_pts[:, 1]\n            x = dst_pts[:, 0]\n            y = dst_pts[:, 1]\n            [x, y].T = cv_trans * [u, v, 1].T\n\n    Parameters:\n    ----------\n        @trans: 3x3 np.array\n            transform matrix from uv to xy\n\n    Returns:\n    ----------\n        @cv2_trans: 2x3 np.array\n            transform matrix from src_pts to dst_pts, could be directly used\n            for cv2.warpAffine()\n    \"\"\"", "\n", "cv2_trans", "=", "trans", "[", ":", ",", "0", ":", "2", "]", ".", "T", "\n", "\n", "return", "cv2_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.get_similarity_transform_for_cv2": [[503, 538], ["matlab_cp2tform.get_similarity_transform", "matlab_cp2tform.cvt_tform_mat_for_cv2"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.get_similarity_transform", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.align.matlab_cp2tform.cvt_tform_mat_for_cv2"], ["", "def", "get_similarity_transform_for_cv2", "(", "src_pts", ",", "dst_pts", ",", "reflective", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Function:\n    ----------\n        Find Similarity Transform Matrix 'cv2_trans' which could be\n        directly used by cv2.warpAffine():\n            u = src_pts[:, 0]\n            v = src_pts[:, 1]\n            x = dst_pts[:, 0]\n            y = dst_pts[:, 1]\n            [x, y].T = cv_trans * [u, v, 1].T\n\n    Parameters:\n    ----------\n        @src_pts: Kx2 np.array\n            source points, each row is a pair of coordinates (x, y)\n        @dst_pts: Kx2 np.array\n            destination points, each row is a pair of transformed\n            coordinates (x, y)\n        reflective: True or False\n            if True:\n                use reflective similarity transform\n            else:\n                use non-reflective similarity transform\n\n    Returns:\n    ----------\n        @cv2_trans: 2x3 np.array\n            transform matrix from src_pts to dst_pts, could be directly used\n            for cv2.warpAffine()\n    \"\"\"", "\n", "trans", ",", "trans_inv", "=", "get_similarity_transform", "(", "src_pts", ",", "dst_pts", ",", "reflective", ")", "\n", "cv2_trans", "=", "cvt_tform_mat_for_cv2", "(", "trans", ")", "\n", "\n", "return", "cv2_trans", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.uncertainty_module.scale_and_shift": [[27, 40], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.constant_initializer", "tensorflow.l2_regularizer", "tensorflow.constant_initializer"], "function", ["None"], ["def", "scale_and_shift", "(", "x", ",", "gamma_init", "=", "1.0", ",", "beta_init", "=", "0.0", ")", ":", "\n", "    ", "num_channels", "=", "x", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "with", "tf", ".", "variable_scope", "(", "'scale_and_shift'", ")", ":", "\n", "        ", "gamma", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "gamma_init", ")", ",", "\n", "regularizer", "=", "slim", ".", "l2_regularizer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "beta", "=", "tf", ".", "get_variable", "(", "'gamma'", ",", "(", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "beta_init", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "x", "=", "gamma", "*", "x", "+", "beta", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.uncertainty_module.inference": [[42, 70], ["tensorflow.arg_scope", "tensorflow.variable_scope", "tensorflow.l2_regularizer", "tensorflow.arg_scope", "print", "tensorflow.flatten", "tensorflow.fully_connected", "tensorflow.fully_connected", "uncertainty_module.scale_and_shift", "tensorflow.log", "tensorflow.exp"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.uncertainty_module.scale_and_shift"], ["", "", "def", "inference", "(", "inputs", ",", "embedding_size", ",", "phase_train", ",", "\n", "weight_decay", "=", "5e-4", ",", "reuse", "=", "None", ",", "scope", "=", "'UncertaintyModule'", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "weight_decay", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "[", "inputs", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "            ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "\n", "is_training", "=", "phase_train", ")", ":", "\n", "                ", "print", "(", "'UncertaintyModule input shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "inputs", ".", "shape", "]", ")", "\n", "\n", "net", "=", "slim", ".", "flatten", "(", "inputs", ")", "\n", "\n", "net", "=", "slim", ".", "fully_connected", "(", "net", ",", "embedding_size", ",", "scope", "=", "'fc1'", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "normalizer_params", "=", "batch_norm_params", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "\n", "\n", "log_sigma_sq", "=", "slim", ".", "fully_connected", "(", "net", ",", "embedding_size", ",", "scope", "=", "'fc_log_sigma_sq'", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "normalizer_params", "=", "batch_norm_params_sigma", ",", "\n", "activation_fn", "=", "None", ")", "\n", "\n", "# Share the gamma and beta for all dimensions", "\n", "log_sigma_sq", "=", "scale_and_shift", "(", "log_sigma_sq", ",", "1e-4", ",", "-", "7.0", ")", "\n", "\n", "# Add epsilon for sigma_sq for numerical stableness                ", "\n", "log_sigma_sq", "=", "tf", ".", "log", "(", "1e-6", "+", "tf", ".", "exp", "(", "log_sigma_sq", ")", ")", "\n", "\n", "", "", "", "return", "log_sigma_sq", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.parametric_relu": [[27, 34], ["tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.nn.relu", "tensorflow.constant_initializer", "tensorflow.minimum"], "function", ["None"], ["def", "parametric_relu", "(", "x", ")", ":", "\n", "    ", "num_channels", "=", "x", ".", "shape", "[", "-", "1", "]", ".", "value", "\n", "with", "tf", ".", "variable_scope", "(", "'p_re_lu'", ")", ":", "\n", "        ", "alpha", "=", "tf", ".", "get_variable", "(", "'alpha'", ",", "(", "1", ",", "1", ",", "num_channels", ")", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "x", ")", "+", "alpha", "*", "tf", ".", "minimum", "(", "0.0", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.se_module": [[35, 54], ["tensorflow.variable_scope", "tuple", "int", "tensorflow.avg_pool2d", "tensorflow.flatten", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.reshape", "tensorflow.xavier_initializer", "tensorflow.xavier_initializer"], "function", ["None"], ["", "", "def", "se_module", "(", "input_net", ",", "ratio", "=", "16", ",", "reuse", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'SE'", ",", "[", "input_net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "h", ",", "w", ",", "c", "=", "tuple", "(", "[", "dim", ".", "value", "for", "dim", "in", "input_net", ".", "shape", "[", "1", ":", "4", "]", "]", ")", "\n", "assert", "c", "%", "ratio", "==", "0", "\n", "hidden_units", "=", "int", "(", "c", "/", "ratio", ")", "\n", "squeeze", "=", "slim", ".", "avg_pool2d", "(", "input_net", ",", "[", "h", ",", "w", "]", ",", "padding", "=", "'VALID'", ")", "\n", "excitation", "=", "slim", ".", "flatten", "(", "squeeze", ")", "\n", "excitation", "=", "slim", ".", "fully_connected", "(", "excitation", ",", "hidden_units", ",", "scope", "=", "'se_fc1'", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "excitation", "=", "slim", ".", "fully_connected", "(", "excitation", ",", "c", ",", "scope", "=", "'se_fc2'", ",", "\n", "weights_regularizer", "=", "None", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "sigmoid", ")", "\n", "excitation", "=", "tf", ".", "reshape", "(", "excitation", ",", "[", "-", "1", ",", "1", ",", "1", ",", "c", "]", ")", "\n", "output_net", "=", "input_net", "*", "excitation", "\n", "\n", "return", "output_net", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.conv_module": [[55, 74], ["tensorflow.variable_scope", "tensorflow.conv2d", "range", "tensorflow.conv2d", "tensorflow.conv2d", "print", "tensorflow.xavier_initializer", "sphere_net_PFE.se_module", "tensorflow.truncated_normal_initializer", "tensorflow.truncated_normal_initializer"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.se_module"], ["", "", "def", "conv_module", "(", "net", ",", "num_res_layers", ",", "num_kernels", ",", "trans_kernel_size", "=", "3", ",", "trans_stride", "=", "2", ",", "\n", "use_se", "=", "False", ",", "reuse", "=", "None", ",", "scope", "=", "None", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "'conv'", ",", "[", "net", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "        ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "trans_kernel_size", ",", "stride", "=", "trans_stride", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ")", "\n", "shortcut", "=", "net", "\n", "for", "i", "in", "range", "(", "num_res_layers", ")", ":", "\n", "            ", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.01", ")", ",", "\n", "biases_initializer", "=", "None", ")", "\n", "net", "=", "slim", ".", "conv2d", "(", "net", ",", "num_kernels", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "'SAME'", ",", "\n", "weights_initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "0.01", ")", ",", "\n", "biases_initializer", "=", "None", ")", "\n", "print", "(", "'| ---- block_%d'", "%", "i", ")", "\n", "if", "use_se", ":", "\n", "                ", "net", "=", "se_module", "(", "net", ")", "\n", "", "net", "=", "net", "+", "shortcut", "\n", "shortcut", "=", "net", "\n", "", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.inference": [[75, 116], ["tensorflow.arg_scope", "tensorflow.variable_scope", "tensorflow.l2_regularizer", "tensorflow.arg_scope", "print", "sphere_net_PFE.conv_module", "print", "sphere_net_PFE.conv_module", "print", "sphere_net_PFE.conv_module", "print", "sphere_net_PFE.conv_module", "print", "tensorflow.flatten", "tensorflow.fully_connected", "tensorflow.nn.l2_normalize", "tensorflow.xavier_initializer"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.conv_module", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.conv_module", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.conv_module", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.models.sphere_net_PFE.conv_module", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.l2_normalize"], ["", "def", "inference", "(", "images", ",", "embedding_size", "=", "512", ",", "reuse", "=", "None", ",", "scope", "=", "'SphereNet'", ")", ":", "\n", "    ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "conv2d", ",", "slim", ".", "fully_connected", "]", ",", "\n", "weights_regularizer", "=", "slim", ".", "l2_regularizer", "(", "0.0", ")", ",", "\n", "normalizer_fn", "=", "None", ",", "\n", "normalizer_params", "=", "None", ",", "\n", "activation_fn", "=", "parametric_relu", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "'SphereNet'", ",", "[", "images", "]", ",", "reuse", "=", "reuse", ")", ":", "\n", "# Fix the moving mean and std when training PFE ", "\n", "            ", "with", "slim", ".", "arg_scope", "(", "[", "slim", ".", "batch_norm", ",", "slim", ".", "dropout", "]", ",", "is_training", "=", "False", ")", ":", "\n", "\n", "                ", "print", "(", "'SphereNet input shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "images", ".", "shape", "]", ")", "\n", "\n", "model_version", "=", "'64'", "\n", "num_layers", ",", "num_kernels", "=", "model_params", "[", "model_version", "]", "\n", "\n", "\n", "net", "=", "conv_module", "(", "images", ",", "num_layers", "[", "0", "]", ",", "num_kernels", "[", "0", "]", ",", "scope", "=", "'conv1'", ")", "\n", "print", "(", "'module_1 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "1", "]", ",", "num_kernels", "[", "1", "]", ",", "scope", "=", "'conv2'", ")", "\n", "print", "(", "'module_2 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "2", "]", ",", "num_kernels", "[", "2", "]", ",", "scope", "=", "'conv3'", ")", "\n", "print", "(", "'module_3 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net", "=", "conv_module", "(", "net", ",", "num_layers", "[", "3", "]", ",", "num_kernels", "[", "3", "]", ",", "scope", "=", "'conv4'", ")", "\n", "print", "(", "'module_4 shape:'", ",", "[", "dim", ".", "value", "for", "dim", "in", "net", ".", "shape", "]", ")", "\n", "\n", "net_", "=", "net", "\n", "net", "=", "slim", ".", "flatten", "(", "net", ")", "\n", "\n", "mu", "=", "slim", ".", "fully_connected", "(", "net", ",", "embedding_size", ",", "scope", "=", "'Bottleneck'", ",", "\n", "weights_initializer", "=", "slim", ".", "xavier_initializer", "(", ")", ",", "\n", "normalizer_fn", "=", "slim", ".", "batch_norm", ",", "normalizer_params", "=", "batch_norm_params_last", ",", "\n", "activation_fn", "=", "None", ")", "\n", "\n", "# Output used for PFE", "\n", "mu", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "mu", ",", "axis", "=", "1", ")", "\n", "conv_final", "=", "net", "\n", "\n", "", "", "", "return", "mu", ",", "conv_final", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.aggregate_templates": [[42, 59], ["enumerate", "print", "len", "sys.stdout.write", "utils.utils.l2_normalize", "utils.utils.aggregate_PFE", "numpy.concatenate", "numpy.mean", "hasattr", "utils.utils.aggregate_PFE", "len"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.l2_normalize", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.aggregate_PFE", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.aggregate_PFE"], ["def", "aggregate_templates", "(", "templates", ",", "features", ",", "method", ")", ":", "\n", "    ", "for", "i", ",", "t", "in", "enumerate", "(", "templates", ")", ":", "\n", "        ", "if", "len", "(", "t", ".", "indices", ")", ">", "0", ":", "\n", "            ", "if", "method", "==", "'mean'", ":", "\n", "                ", "t", ".", "feature", "=", "utils", ".", "l2_normalize", "(", "np", ".", "mean", "(", "features", "[", "t", ".", "indices", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "if", "method", "==", "'PFE_fuse'", ":", "\n", "                ", "t", ".", "mu", ",", "t", ".", "sigma_sq", "=", "utils", ".", "aggregate_PFE", "(", "features", "[", "t", ".", "indices", "]", ",", "normalize", "=", "True", ",", "concatenate", "=", "False", ")", "\n", "t", ".", "feature", "=", "t", ".", "mu", "\n", "", "if", "method", "==", "'PFE_fuse_match'", ":", "\n", "                ", "if", "not", "hasattr", "(", "t", ",", "'mu'", ")", ":", "\n", "                    ", "t", ".", "mu", ",", "t", ".", "sigma_sq", "=", "utils", ".", "aggregate_PFE", "(", "features", "[", "t", ".", "indices", "]", ",", "normalize", "=", "True", ",", "concatenate", "=", "False", ")", "\n", "", "t", ".", "feature", "=", "np", ".", "concatenate", "(", "[", "t", ".", "mu", ",", "t", ".", "sigma_sq", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "t", ".", "feature", "=", "None", "\n", "", "if", "i", "%", "1000", "==", "0", ":", "\n", "            ", "sys", ".", "stdout", ".", "write", "(", "'Fusing templates {}/{}...\\t\\r'", ".", "format", "(", "i", ",", "len", "(", "templates", ")", ")", ")", "\n", "", "", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.force_compare": [[61, 75], ["numpy.zeros", "range", "len", "len", "print", "sys.stdout.write", "len", "utils.utils.pair_euc_score", "utils.utils.pair_euc_score", "utils.utils.pair_MLS_score"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.pair_euc_score", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.pair_euc_score", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.utils.pair_MLS_score"], ["", "def", "force_compare", "(", "compare_func", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "def", "compare", "(", "t1", ",", "t2", ")", ":", "\n", "        ", "score_vec", "=", "np", ".", "zeros", "(", "len", "(", "t1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "t1", ")", ")", ":", "\n", "            ", "if", "t1", "[", "i", "]", "is", "None", "or", "t2", "[", "i", "]", "is", "None", ":", "\n", "                ", "score_vec", "[", "i", "]", "=", "-", "9999", "\n", "", "else", ":", "\n", "                ", "score_vec", "[", "i", "]", "=", "compare_func", "(", "t1", "[", "i", "]", "[", "None", "]", ",", "t2", "[", "i", "]", "[", "None", "]", ")", "\n", "", "if", "verbose", "and", "i", "%", "1000", "==", "0", ":", "\n", "                ", "sys", ".", "stdout", ".", "write", "(", "'Matching pair {}/{}...\\t\\r'", ".", "format", "(", "i", ",", "len", "(", "t1", ")", ")", ")", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "''", ")", "\n", "", "return", "score_vec", "\n", "", "return", "compare", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.main": [[77, 115], ["network.Network", "network.Network.load_model", "utils.dataset.Dataset", "network.Network.extract_feature", "numpy.concatenate", "print", "eval_ijb.aggregate_templates", "evaluation.ijbc.IJBCTest.test_verification", "range", "print", "eval_ijb.aggregate_templates", "evaluation.ijbc.IJBCTest.test_verification", "range", "print", "eval_ijb.aggregate_templates", "evaluation.ijbc.IJBCTest.test_verification", "range", "utils.imageprocessing.preprocess", "evaluation.ijba.IJBATest", "evaluation.ijbc.IJBCTest.init_proto", "eval_ijb.force_compare", "len", "print", "eval_ijb.force_compare", "len", "print", "eval_ijb.force_compare", "len", "print", "evaluation.ijbc.IJBCTest", "evaluation.ijbc.IJBCTest.init_proto", "ValueError"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.load_model", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.extract_feature", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.aggregate_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.aggregate_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.aggregate_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.preprocess", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_proto", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.force_compare", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.force_compare", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_ijb.force_compare", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_proto"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "network", "=", "Network", "(", ")", "\n", "network", ".", "load_model", "(", "args", ".", "model_dir", ")", "\n", "proc_func", "=", "lambda", "x", ":", "preprocess", "(", "x", ",", "network", ".", "config", ",", "False", ")", "\n", "\n", "testset", "=", "Dataset", "(", "args", ".", "dataset_path", ")", "\n", "if", "args", ".", "protocol", "==", "'ijba'", ":", "\n", "        ", "tester", "=", "IJBATest", "(", "testset", "[", "'abspath'", "]", ".", "values", ")", "\n", "tester", ".", "init_proto", "(", "args", ".", "protocol_path", ")", "\n", "", "elif", "args", ".", "protocol", "==", "'ijbc'", ":", "\n", "        ", "tester", "=", "IJBCTest", "(", "testset", "[", "'abspath'", "]", ".", "values", ")", "\n", "tester", ".", "init_proto", "(", "args", ".", "protocol_path", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unkown protocol. Only accept \"ijba\" or \"ijbc\".'", ")", "\n", "\n", "\n", "", "mu", ",", "sigma_sq", "=", "network", ".", "extract_feature", "(", "tester", ".", "image_paths", ",", "args", ".", "batch_size", ",", "proc_func", "=", "proc_func", ",", "verbose", "=", "True", ")", "\n", "features", "=", "np", ".", "concatenate", "(", "[", "mu", ",", "sigma_sq", "]", ",", "axis", "=", "1", ")", "\n", "\n", "print", "(", "'---- Average pooling'", ")", "\n", "aggregate_templates", "(", "tester", ".", "verification_templates", ",", "features", ",", "'mean'", ")", "\n", "TARs", ",", "std", ",", "FARs", "=", "tester", ".", "test_verification", "(", "force_compare", "(", "utils", ".", "pair_euc_score", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "TARs", ")", ")", ":", "\n", "        ", "print", "(", "'TAR: {:.5} +- {:.5} FAR: {:.5}'", ".", "format", "(", "TARs", "[", "i", "]", ",", "std", "[", "i", "]", ",", "FARs", "[", "i", "]", ")", ")", "\n", "\n", "", "print", "(", "'---- Uncertainty pooling'", ")", "\n", "aggregate_templates", "(", "tester", ".", "verification_templates", ",", "features", ",", "'PFE_fuse'", ")", "\n", "TARs", ",", "std", ",", "FARs", "=", "tester", ".", "test_verification", "(", "force_compare", "(", "utils", ".", "pair_euc_score", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "TARs", ")", ")", ":", "\n", "        ", "print", "(", "'TAR: {:.5} +- {:.5} FAR: {:.5}'", ".", "format", "(", "TARs", "[", "i", "]", ",", "std", "[", "i", "]", ",", "FARs", "[", "i", "]", ")", ")", "\n", "\n", "\n", "", "print", "(", "'---- MLS comparison'", ")", "\n", "aggregate_templates", "(", "tester", ".", "verification_templates", ",", "features", ",", "'PFE_fuse_match'", ")", "\n", "TARs", ",", "std", ",", "FARs", "=", "tester", ".", "test_verification", "(", "force_compare", "(", "utils", ".", "pair_MLS_score", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "TARs", ")", ")", ":", "\n", "        ", "print", "(", "'TAR: {:.5} +- {:.5} FAR: {:.5}'", ".", "format", "(", "TARs", "[", "i", "]", ",", "std", "[", "i", "]", ",", "FARs", "[", "i", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.__init__": [[34, 41], ["numpy.array().astype().flatten", "numpy.array().astype", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "np", ".", "array", "(", "image_paths", ")", ".", "astype", "(", "np", ".", "object", ")", ".", "flatten", "(", ")", "\n", "self", ".", "images", "=", "None", "\n", "self", ".", "labels", "=", "None", "\n", "self", ".", "standard_folds", "=", "None", "\n", "self", ".", "blufr_folds", "=", "None", "\n", "self", ".", "queue_idx", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.init_standard_proto": [[42, 75], ["enumerate", "range", "os.path.splitext", "open", "numpy.zeros", "numpy.zeros", "numpy.array", "range", "StandardFold", "lfw.LFWTest.standard_folds.append", "os.path.basename", "f.readlines", "line.strip().split", "pairs.append", "line.strip", "len", "len", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "init_standard_proto", "(", "self", ",", "lfw_pairs_file", ")", ":", "\n", "        ", "index_dict", "=", "{", "}", "\n", "for", "i", ",", "image_path", "in", "enumerate", "(", "self", ".", "image_paths", ")", ":", "\n", "            ", "image_name", ",", "image_ext", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "image_path", ")", ")", "\n", "index_dict", "[", "image_name", "]", "=", "i", "\n", "\n", "", "pairs", "=", "[", "]", "\n", "with", "open", "(", "lfw_pairs_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ".", "readlines", "(", ")", "[", "1", ":", "]", ":", "\n", "                ", "pair", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "pairs", ".", "append", "(", "pair", ")", "\n", "\n", "# 10 folds", "\n", "", "", "self", ".", "standard_folds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "indices1", "=", "np", ".", "zeros", "(", "600", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "indices2", "=", "np", ".", "zeros", "(", "600", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "labels", "=", "np", ".", "array", "(", "[", "True", "]", "*", "300", "+", "[", "False", "]", "*", "300", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "# 300 positive pairs, 300 negative pairs in order", "\n", "for", "j", "in", "range", "(", "600", ")", ":", "\n", "                ", "pair", "=", "pairs", "[", "600", "*", "i", "+", "j", "]", "\n", "if", "j", "<", "300", ":", "\n", "                    ", "assert", "len", "(", "pair", ")", "==", "3", "\n", "img1", "=", "pair", "[", "0", "]", "+", "'_'", "+", "'%04d'", "%", "int", "(", "pair", "[", "1", "]", ")", "\n", "img2", "=", "pair", "[", "0", "]", "+", "'_'", "+", "'%04d'", "%", "int", "(", "pair", "[", "2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "len", "(", "pair", ")", "==", "4", "\n", "img1", "=", "pair", "[", "0", "]", "+", "'_'", "+", "'%04d'", "%", "int", "(", "pair", "[", "1", "]", ")", "\n", "img2", "=", "pair", "[", "2", "]", "+", "'_'", "+", "'%04d'", "%", "int", "(", "pair", "[", "3", "]", ")", "\n", "", "indices1", "[", "j", "]", "=", "index_dict", "[", "img1", "]", "\n", "indices2", "[", "j", "]", "=", "index_dict", "[", "img2", "]", "\n", "", "fold", "=", "StandardFold", "(", "indices1", ",", "indices2", ",", "labels", ")", "\n", "self", ".", "standard_folds", ".", "append", "(", "fold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.test_standard_proto": [[76, 109], ["numpy.zeros", "numpy.zeros", "range", "numpy.mean", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "compare_func", "evaluation.metrics.accuracy", "compare_func", "evaluation.metrics.accuracy", "numpy.mean", "numpy.array", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.accuracy", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.accuracy"], ["", "", "def", "test_standard_proto", "(", "self", ",", "features", ",", "compare_func", ")", ":", "\n", "\n", "        ", "assert", "self", ".", "standard_folds", "is", "not", "None", "\n", "\n", "accuracies", "=", "np", ".", "zeros", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "thresholds", "=", "np", ".", "zeros", "(", "10", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n", "features1", "=", "[", "]", "\n", "features2", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "# Training", "\n", "            ", "train_indices1", "=", "np", ".", "concatenate", "(", "[", "self", ".", "standard_folds", "[", "j", "]", ".", "indices1", "for", "j", "in", "range", "(", "10", ")", "if", "j", "!=", "i", "]", ")", "\n", "train_indices2", "=", "np", ".", "concatenate", "(", "[", "self", ".", "standard_folds", "[", "j", "]", ".", "indices2", "for", "j", "in", "range", "(", "10", ")", "if", "j", "!=", "i", "]", ")", "\n", "train_labels", "=", "np", ".", "concatenate", "(", "[", "self", ".", "standard_folds", "[", "j", "]", ".", "labels", "for", "j", "in", "range", "(", "10", ")", "if", "j", "!=", "i", "]", ")", "\n", "\n", "train_features1", "=", "features", "[", "train_indices1", ",", ":", "]", "\n", "train_features2", "=", "features", "[", "train_indices2", ",", ":", "]", "\n", "\n", "train_score", "=", "compare_func", "(", "train_features1", ",", "train_features2", ")", "\n", "_", ",", "thresholds", "[", "i", "]", "=", "metrics", ".", "accuracy", "(", "train_score", ",", "train_labels", ")", "\n", "\n", "# Testing", "\n", "fold", "=", "self", ".", "standard_folds", "[", "i", "]", "\n", "test_features1", "=", "features", "[", "fold", ".", "indices1", ",", ":", "]", "\n", "test_features2", "=", "features", "[", "fold", ".", "indices2", ",", ":", "]", "\n", "\n", "test_score", "=", "compare_func", "(", "test_features1", ",", "test_features2", ")", "\n", "accuracies", "[", "i", "]", ",", "_", "=", "metrics", ".", "accuracy", "(", "test_score", ",", "fold", ".", "labels", ",", "np", ".", "array", "(", "[", "thresholds", "[", "i", "]", "]", ")", ")", "\n", "\n", "", "accuracy", "=", "np", ".", "mean", "(", "accuracies", ")", "\n", "threshold", "=", "-", "np", ".", "mean", "(", "thresholds", ")", "\n", "return", "accuracy", ",", "threshold", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.Template.__init__": [[20, 25], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "template_id", ",", "label", ",", "indices", ",", "medias", ")", ":", "\n", "        ", "self", ".", "template_id", "=", "template_id", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "self", ".", "medias", "=", "np", ".", "array", "(", "medias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.IJBCTest.__init__": [[89, 96], ["ijbc.build_subject_dict"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_subject_dict"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "subject_dict", "=", "build_subject_dict", "(", "image_paths", ")", "\n", "self", ".", "verification_folds", "=", "None", "\n", "self", ".", "verification_templates", "=", "None", "\n", "self", ".", "verification_G1_templates", "=", "None", "\n", "self", ".", "verification_G2_templates", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.IJBCTest.init_verification_proto": [[97, 127], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "ijbc.build_templates", "build_templates.extend", "build_templates.extend", "ijbc.read_pairs", "numpy.array", "numpy.array", "numpy.concatenate", "print", "ijbc.build_templates", "ijbc.build_templates", "ijbc.IJBCTest.verification_G1_templates.append", "ijbc.IJBCTest.verification_G2_templates.append", "len"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.read_pairs", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates"], ["", "def", "init_verification_proto", "(", "self", ",", "protofolder", ")", ":", "\n", "        ", "self", ".", "verification_folds", "=", "[", "]", "\n", "self", ".", "verification_templates", "=", "[", "]", "\n", "\n", "meta_gallery1", "=", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'ijbc_1N_gallery_G1.csv'", ")", "\n", "meta_gallery2", "=", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'ijbc_1N_gallery_G2.csv'", ")", "\n", "meta_probe", "=", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'ijbc_1N_probe_mixed.csv'", ")", "\n", "pair_file", "=", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'ijbc_11_G1_G2_matches.csv'", ")", "\n", "\n", "gallery_templates", "=", "build_templates", "(", "self", ".", "subject_dict", ",", "meta_gallery1", ")", "\n", "gallery_templates", ".", "extend", "(", "build_templates", "(", "self", ".", "subject_dict", ",", "meta_gallery2", ")", ")", "\n", "gallery_templates", ".", "extend", "(", "build_templates", "(", "self", ".", "subject_dict", ",", "meta_probe", ")", ")", "\n", "\n", "# Build pairs", "\n", "template_dict", "=", "{", "}", "\n", "for", "t", "in", "gallery_templates", ":", "\n", "            ", "template_dict", "[", "t", ".", "template_id", "]", "=", "t", "\n", "", "pairs", "=", "read_pairs", "(", "pair_file", ")", "\n", "self", ".", "verification_G1_templates", "=", "[", "]", "\n", "self", ".", "verification_G2_templates", "=", "[", "]", "\n", "for", "p", "in", "pairs", ":", "\n", "            ", "self", ".", "verification_G1_templates", ".", "append", "(", "template_dict", "[", "p", "[", "0", "]", "]", ")", "\n", "self", ".", "verification_G2_templates", ".", "append", "(", "template_dict", "[", "p", "[", "1", "]", "]", ")", "\n", "\n", "", "self", ".", "verification_G1_templates", "=", "np", ".", "array", "(", "self", ".", "verification_G1_templates", ",", "dtype", "=", "np", ".", "object", ")", "\n", "self", ".", "verification_G2_templates", "=", "np", ".", "array", "(", "self", ".", "verification_G2_templates", ",", "dtype", "=", "np", ".", "object", ")", "\n", "\n", "self", ".", "verification_templates", "=", "np", ".", "concatenate", "(", "[", "\n", "self", ".", "verification_G1_templates", ",", "self", ".", "verification_G2_templates", "]", ")", "\n", "print", "(", "'{} templates are initialized.'", ".", "format", "(", "len", "(", "self", ".", "verification_templates", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.IJBCTest.init_proto": [[129, 131], ["ijbc.IJBCTest.init_verification_proto"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_verification_proto"], ["", "def", "init_proto", "(", "self", ",", "protofolder", ")", ":", "\n", "        ", "self", ".", "init_verification_proto", "(", "protofolder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.IJBCTest.test_verification": [[132, 153], ["numpy.array", "numpy.array", "compare_func", "evaluation.metrics.ROC"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC"], ["", "def", "test_verification", "(", "self", ",", "compare_func", ",", "FARs", "=", "None", ")", ":", "\n", "\n", "        ", "FARs", "=", "[", "1e-5", ",", "1e-4", ",", "1e-3", ",", "1e-2", "]", "if", "FARs", "is", "None", "else", "FARs", "\n", "\n", "templates1", "=", "self", ".", "verification_G1_templates", "\n", "templates2", "=", "self", ".", "verification_G2_templates", "\n", "\n", "features1", "=", "[", "t", ".", "feature", "for", "t", "in", "templates1", "]", "\n", "features2", "=", "[", "t", ".", "feature", "for", "t", "in", "templates2", "]", "\n", "labels1", "=", "np", ".", "array", "(", "[", "t", ".", "label", "for", "t", "in", "templates1", "]", ")", "\n", "labels2", "=", "np", ".", "array", "(", "[", "t", ".", "label", "for", "t", "in", "templates2", "]", ")", "\n", "\n", "score_vec", "=", "compare_func", "(", "features1", ",", "features2", ")", "\n", "label_vec", "=", "labels1", "==", "labels2", "\n", "\n", "tars", ",", "fars", ",", "thresholds", "=", "metrics", ".", "ROC", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "FARs", ")", "\n", "\n", "# There is no std for IJB-C", "\n", "std", "=", "[", "0.", "for", "t", "in", "tars", "]", "\n", "\n", "return", "tars", ",", "std", ",", "fars", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.build_subject_dict": [[27, 39], ["enumerate", "tuple", "int", "os.path.splitext", "image.replace.replace", "line.split"], "function", ["None"], ["", "", "def", "build_subject_dict", "(", "image_list", ")", ":", "\n", "    ", "subject_dict", "=", "{", "}", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "image_list", ")", ":", "\n", "        ", "subject_id", ",", "image", "=", "tuple", "(", "line", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "if", "subject_id", "==", "'NaN'", ":", "continue", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "image", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image", ")", "\n", "image", "=", "image", ".", "replace", "(", "'_'", ",", "'/'", ",", "1", ")", "# Recover filenames ", "\n", "if", "not", "subject_id", "in", "subject_dict", ":", "\n", "            ", "subject_dict", "[", "subject_id", "]", "=", "{", "}", "\n", "", "subject_dict", "[", "subject_id", "]", "[", "image", "]", "=", "i", "\n", "", "return", "subject_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.build_templates": [[40, 78], ["templates.append", "open", "f.readlines", "tuple", "int", "int", "os.path.splitext", "ijbc.Template", "template_indices.append", "template_medias.append", "x.split", "line.split", "templates.append", "ijbc.Template"], "function", ["None"], ["", "def", "build_templates", "(", "subject_dict", ",", "meta_file", ")", ":", "\n", "    ", "with", "open", "(", "meta_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "meta_list", "=", "f", ".", "readlines", "(", ")", "\n", "meta_list", "=", "[", "x", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "for", "x", "in", "meta_list", "]", "\n", "meta_list", "=", "meta_list", "[", "1", ":", "]", "\n", "\n", "", "templates", "=", "[", "]", "\n", "template_id", "=", "None", "\n", "template_label", "=", "None", "\n", "template_indices", "=", "None", "\n", "template_medias", "=", "None", "\n", "count", "=", "0", "\n", "for", "line", "in", "meta_list", ":", "\n", "        ", "temp_id", ",", "subject_id", ",", "image", ",", "media", "=", "tuple", "(", "line", ".", "split", "(", "','", ")", "[", "0", ":", "4", "]", ")", "\n", "temp_id", "=", "int", "(", "temp_id", ")", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "image", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image", ")", "\n", "if", "subject_id", "in", "subject_dict", "and", "image", "in", "subject_dict", "[", "subject_id", "]", ":", "\n", "            ", "index", "=", "subject_dict", "[", "subject_id", "]", "[", "image", "]", "\n", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "index", "=", "None", "\n", "\n", "", "if", "temp_id", "!=", "template_id", ":", "\n", "            ", "if", "template_id", "is", "not", "None", ":", "\n", "                ", "templates", ".", "append", "(", "Template", "(", "template_id", ",", "template_label", ",", "template_indices", ",", "template_medias", ")", ")", "\n", "", "template_id", "=", "temp_id", "\n", "template_label", "=", "subject_id", "\n", "template_indices", "=", "[", "]", "\n", "template_medias", "=", "[", "]", "\n", "\n", "", "if", "index", "is", "not", "None", ":", "\n", "            ", "template_indices", ".", "append", "(", "index", ")", "\n", "template_medias", ".", "append", "(", "media", ")", "\n", "\n", "# last template", "\n", "", "", "templates", ".", "append", "(", "Template", "(", "template_id", ",", "template_label", ",", "template_indices", ",", "template_medias", ")", ")", "\n", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijbc.read_pairs": [[79, 86], ["open", "f.readlines", "pair.split", "x.split", "int", "int"], "function", ["None"], ["", "def", "read_pairs", "(", "pair_file", ")", ":", "\n", "    ", "with", "open", "(", "pair_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "pairs", "=", "f", ".", "readlines", "(", ")", "\n", "pairs", "=", "[", "x", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "for", "x", "in", "pairs", "]", "\n", "pairs", "=", "[", "pair", ".", "split", "(", "','", ")", "for", "pair", "in", "pairs", "]", "\n", "pairs", "=", "[", "(", "int", "(", "pair", "[", "0", "]", ")", ",", "int", "(", "pair", "[", "1", "]", ")", ")", "for", "pair", "in", "pairs", "]", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.find_thresholds_by_FAR": [[31, 60], ["score_neg[].sort", "len", "len", "numpy.unique", "numpy.insert", "numpy.insert", "numpy.array", "numpy.round().astype", "numpy.array", "np.array.append", "numpy.round"], "function", ["None"], ["def", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "None", ",", "epsilon", "=", "1e-8", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "score_neg", "=", "score_vec", "[", "~", "label_vec", "]", "\n", "score_neg", "[", ":", ":", "-", "1", "]", ".", "sort", "(", ")", "\n", "# score_neg = np.sort(score_neg)[::-1] # score from high to low", "\n", "num_neg", "=", "len", "(", "score_neg", ")", "\n", "\n", "assert", "num_neg", ">=", "1", "\n", "\n", "if", "FARs", "is", "None", ":", "\n", "        ", "thresholds", "=", "np", ".", "unique", "(", "score_neg", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "0", ",", "thresholds", "[", "0", "]", "+", "epsilon", ")", "\n", "thresholds", "=", "np", ".", "insert", "(", "thresholds", ",", "thresholds", ".", "size", ",", "thresholds", "[", "-", "1", "]", "-", "epsilon", ")", "\n", "", "else", ":", "\n", "        ", "FARs", "=", "np", ".", "array", "(", "FARs", ")", "\n", "num_false_alarms", "=", "np", ".", "round", "(", "num_neg", "*", "FARs", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "\n", "thresholds", "=", "[", "]", "\n", "for", "num_false_alarm", "in", "num_false_alarms", ":", "\n", "            ", "if", "num_false_alarm", "==", "0", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "0", "]", "+", "epsilon", "\n", "", "else", ":", "\n", "                ", "threshold", "=", "score_neg", "[", "num_false_alarm", "-", "1", "]", "\n", "", "thresholds", ".", "append", "(", "threshold", ")", "\n", "", "thresholds", "=", "np", ".", "array", "(", "thresholds", ")", "\n", "\n", "", "return", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC": [[63, 94], ["numpy.zeros", "numpy.zeros", "enumerate", "metrics.find_thresholds_by_FAR", "len", "numpy.size", "warnings.warn", "numpy.mean", "numpy.mean", "false_accept_indices.append", "false_reject_indices.append", "numpy.size", "numpy.argwhere().flatten", "numpy.argwhere().flatten", "numpy.argwhere", "numpy.argwhere"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.find_thresholds_by_FAR", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size"], ["", "def", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "''' Compute Receiver operating characteristic (ROC) with a score and label vector.\n    '''", "\n", "assert", "score_vec", ".", "ndim", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "thresholds", "=", "find_thresholds_by_FAR", "(", "score_vec", ",", "label_vec", ",", "FARs", "=", "FARs", ")", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warn", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "# FARs would be check again", "\n", "", "TARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "thresholds", ".", "shape", "[", "0", "]", ")", "\n", "false_accept_indices", "=", "[", "]", "\n", "false_reject_indices", "=", "[", "]", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "accept", "=", "score_vec", ">=", "threshold", "\n", "TARs", "[", "i", "]", "=", "np", ".", "mean", "(", "accept", "[", "label_vec", "]", ")", "\n", "FARs", "[", "i", "]", "=", "np", ".", "mean", "(", "accept", "[", "~", "label_vec", "]", ")", "\n", "if", "get_false_indices", ":", "\n", "            ", "false_accept_indices", ".", "append", "(", "np", ".", "argwhere", "(", "accept", "&", "(", "~", "label_vec", ")", ")", ".", "flatten", "(", ")", ")", "\n", "false_reject_indices", ".", "append", "(", "np", ".", "argwhere", "(", "(", "~", "accept", ")", "&", "label_vec", ")", ".", "flatten", "(", ")", ")", "\n", "\n", "", "", "if", "get_false_indices", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "\n", "", "else", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC_by_mat": [[95, 136], ["numpy.triu_indices", "score_mat.flatten", "label_mat.flatten", "metrics.ROC", "metrics.ROC", "numpy.meshgrid", "numpy.stack", "range", "numpy.arange", "numpy.arange", "rc.reshape.reshape", "len"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC"], ["", "", "def", "ROC_by_mat", "(", "score_mat", ",", "label_mat", ",", "thresholds", "=", "None", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ",", "triu_k", "=", "None", ")", ":", "\n", "    ", "''' Compute ROC using a pairwise score matrix and a corresponding label matrix.\n        A wapper of ROC function.\n    '''", "\n", "assert", "score_mat", ".", "ndim", "==", "2", "\n", "assert", "score_mat", ".", "shape", "==", "label_mat", ".", "shape", "\n", "assert", "label_mat", ".", "dtype", "==", "np", ".", "bool", "\n", "\n", "# Convert into vectors", "\n", "m", ",", "n", "=", "score_mat", ".", "shape", "\n", "if", "triu_k", "is", "not", "None", ":", "\n", "        ", "assert", "m", "==", "n", ",", "\"If using triu for ROC, the score matrix must be a sqaure matrix!\"", "\n", "triu_indices", "=", "np", ".", "triu_indices", "(", "m", ",", "triu_k", ")", "\n", "score_vec", "=", "score_mat", "[", "triu_indices", "]", "\n", "label_vec", "=", "label_mat", "[", "triu_indices", "]", "\n", "", "else", ":", "\n", "        ", "score_vec", "=", "score_mat", ".", "flatten", "(", ")", "\n", "label_vec", "=", "label_mat", ".", "flatten", "(", ")", "\n", "\n", "# Compute ROC", "\n", "", "if", "get_false_indices", ":", "\n", "        ", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "=", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", ",", "FARs", ",", "True", ")", "\n", "", "else", ":", "\n", "        ", "TARs", ",", "FARs", ",", "thresholds", "=", "ROC", "(", "score_vec", ",", "label_vec", ",", "thresholds", ",", "FARs", ",", "False", ")", "\n", "\n", "# Convert false accept/reject indices into [row, col] indices", "\n", "", "if", "get_false_indices", ":", "\n", "        ", "rows", ",", "cols", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "m", ")", ",", "np", ".", "arange", "(", "n", ")", ",", "indexing", "=", "'ij'", ")", "\n", "rc", "=", "np", ".", "stack", "(", "[", "rows", ",", "cols", "]", ",", "axis", "=", "2", ")", "\n", "if", "triu_k", "is", "not", "None", ":", "\n", "            ", "rc", "=", "rc", "[", "triu_indices", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "rc", "=", "rc", ".", "reshape", "(", "[", "-", "1", ",", "2", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "FARs", ")", ")", ":", "\n", "            ", "false_accept_indices", "[", "i", "]", "=", "rc", "[", "false_accept_indices", "[", "i", "]", "]", "\n", "false_reject_indices", "[", "i", "]", "=", "rc", "[", "false_reject_indices", "[", "i", "]", "]", "\n", "", "return", "TARs", ",", "FARs", ",", "thresholds", ",", "false_accept_indices", ",", "false_reject_indices", "\n", "", "else", ":", "\n", "        ", "return", "TARs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.DIR_FAR": [[140, 206], ["numpy.all", "label_mat.astype().any", "print", "numpy.max", "numpy.zeros", "numpy.argsort", "numpy.ndarray", "range", "numpy.zeros", "numpy.zeros", "enumerate", "metrics.find_thresholds_by_FAR", "enumerate", "DIRs.flatten.flatten", "label_mat.astype().sum", "label_mat.astype", "len", "len", "len", "len", "sorted_label_mat_m[].any", "numpy.logical_not", "numpy.logical_not", "numpy.min", "label_mat.astype"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.find_thresholds_by_FAR"], ["", "", "def", "DIR_FAR", "(", "score_mat", ",", "label_mat", ",", "ranks", "=", "[", "1", "]", ",", "FARs", "=", "[", "1.0", "]", ",", "get_false_indices", "=", "False", ")", ":", "\n", "    ", "''' Closed/Open-set Identification. \n        A general case of Cummulative Match Characteristic (CMC) \n        where thresholding is allowed for open-set identification.\n    args:\n        score_mat:            a P x G matrix, P is number of probes, G is size of gallery\n        label_mat:            a P x G matrix, bool\n        ranks:                a list of integers\n        FARs:                 false alarm rates, if 1.0, closed-set identification (CMC)\n        get_false_indices:    not implemented yet\n    return:\n        DIRs:                 an F x R matrix, F is the number of FARs, R is the number of ranks, \n                              flatten into a vector if F=1 or R=1.\n        FARs:                 an vector of length = F.\n        thredholds:           an vector of length = F.\n    '''", "\n", "assert", "score_mat", ".", "shape", "==", "label_mat", ".", "shape", "\n", "assert", "np", ".", "all", "(", "label_mat", ".", "astype", "(", "np", ".", "float32", ")", ".", "sum", "(", "axis", "=", "1", ")", "<=", "1", ")", "\n", "# Split the matrix for match probes and non-match probes", "\n", "# subfix _m: match, _nm: non-match", "\n", "# For closed set, we only use the match probes", "\n", "match_indices", "=", "label_mat", ".", "astype", "(", "np", ".", "bool", ")", ".", "any", "(", "axis", "=", "1", ")", "\n", "score_mat_m", "=", "score_mat", "[", "match_indices", ",", ":", "]", "\n", "label_mat_m", "=", "label_mat", "[", "match_indices", ",", ":", "]", "\n", "score_mat_nm", "=", "score_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "label_mat_nm", "=", "label_mat", "[", "np", ".", "logical_not", "(", "match_indices", ")", ",", ":", "]", "\n", "\n", "print", "(", "'mate probes: %d, non mate probes: %d'", "%", "(", "score_mat_m", ".", "shape", "[", "0", "]", ",", "score_mat_nm", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "# Find the thresholds for different FARs", "\n", "max_score_nm", "=", "np", ".", "max", "(", "score_mat_nm", ",", "axis", "=", "1", ")", "\n", "label_temp", "=", "np", ".", "zeros", "(", "max_score_nm", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "if", "len", "(", "FARs", ")", "==", "1", "and", "FARs", "[", "0", "]", ">=", "1.0", ":", "\n", "# If only testing closed-set identification, use the minimum score as threshold", "\n", "# in case there is no non-mate probes", "\n", "        ", "thresholds", "=", "[", "np", ".", "min", "(", "score_mat", ")", "-", "1e-10", "]", "\n", "", "else", ":", "\n", "# If there is open-set identification, find the thresholds by FARs.", "\n", "        ", "assert", "score_mat_nm", ".", "shape", "[", "0", "]", ">", "0", ",", "\"For open-set identification (FAR<1.0), there should be at least one non-mate probe!\"", "\n", "thresholds", "=", "find_thresholds_by_FAR", "(", "max_score_nm", ",", "label_temp", ",", "FARs", "=", "FARs", ")", "\n", "\n", "# Sort the labels row by row according to scores", "\n", "", "sort_idx_mat_m", "=", "np", ".", "argsort", "(", "score_mat_m", ",", "axis", "=", "1", ")", "\n", "sorted_label_mat_m", "=", "np", ".", "ndarray", "(", "label_mat_m", ".", "shape", ",", "dtype", "=", "np", ".", "bool", ")", "\n", "for", "row", "in", "range", "(", "label_mat_m", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "sort_idx", "=", "(", "sort_idx_mat_m", "[", "row", ",", ":", "]", ")", "[", ":", ":", "-", "1", "]", "\n", "sorted_label_mat_m", "[", "row", ",", ":", "]", "=", "label_mat_m", "[", "row", ",", "sort_idx", "]", "\n", "\n", "# Calculate DIRs for different FARs and ranks", "\n", "", "gt_score_m", "=", "score_mat_m", "[", "label_mat_m", "]", "\n", "assert", "gt_score_m", ".", "size", "==", "score_mat_m", ".", "shape", "[", "0", "]", "\n", "\n", "DIRs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", ",", "len", "(", "ranks", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "FARs", "=", "np", ".", "zeros", "(", "[", "len", "(", "FARs", ")", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "for", "j", ",", "rank", "in", "enumerate", "(", "ranks", ")", ":", "\n", "            ", "score_rank", "=", "gt_score_m", ">=", "threshold", "\n", "retrieval_rank", "=", "sorted_label_mat_m", "[", ":", ",", "0", ":", "rank", "]", ".", "any", "(", "axis", "=", "1", ")", "\n", "DIRs", "[", "i", ",", "j", "]", "=", "(", "score_rank", "&", "retrieval_rank", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "", "if", "score_mat_nm", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "            ", "FARs", "[", "i", "]", "=", "(", "max_score_nm", ">=", "threshold", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "mean", "(", ")", "\n", "\n", "", "", "if", "DIRs", ".", "shape", "[", "0", "]", "==", "1", "or", "DIRs", ".", "shape", "[", "1", "]", "==", "1", ":", "\n", "        ", "DIRs", "=", "DIRs", ".", "flatten", "(", ")", "\n", "\n", "", "return", "DIRs", ",", "FARs", ",", "thresholds", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.accuracy": [[207, 236], ["numpy.zeros", "enumerate", "numpy.argmax", "numpy.mean", "len", "len", "len", "numpy.size", "warnings.warn", "numpy.size", "numpy.mean", "numpy.sort", "numpy.size"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.dataset.Dataset.size"], ["", "def", "accuracy", "(", "score_vec", ",", "label_vec", ",", "thresholds", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "score_vec", ".", "shape", ")", "==", "1", "\n", "assert", "len", "(", "label_vec", ".", "shape", ")", "==", "1", "\n", "assert", "score_vec", ".", "shape", "==", "label_vec", ".", "shape", "\n", "assert", "label_vec", ".", "dtype", "==", "np", ".", "bool", "\n", "# find thresholds by TAR", "\n", "if", "thresholds", "is", "None", ":", "\n", "        ", "score_pos", "=", "score_vec", "[", "label_vec", "==", "True", "]", "\n", "thresholds", "=", "np", ".", "sort", "(", "score_pos", ")", "[", ":", ":", "1", "]", "\n", "\n", "", "assert", "len", "(", "thresholds", ".", "shape", ")", "==", "1", "\n", "if", "np", ".", "size", "(", "thresholds", ")", ">", "10000", ":", "\n", "        ", "warn", "(", "'number of thresholds (%d) very large, computation may take a long time!'", "%", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "\n", "# Loop Computation", "\n", "", "accuracies", "=", "np", ".", "zeros", "(", "np", ".", "size", "(", "thresholds", ")", ")", "\n", "for", "i", ",", "threshold", "in", "enumerate", "(", "thresholds", ")", ":", "\n", "        ", "pred_vec", "=", "score_vec", ">=", "threshold", "\n", "accuracies", "[", "i", "]", "=", "np", ".", "mean", "(", "pred_vec", "==", "label_vec", ")", "\n", "\n", "# Matrix Computation, Each column is a threshold", "\n", "# predictions = score_vec[:,None] >= thresholds[None,:]", "\n", "# accuracies = np.mean(predictions==label_vec[:,None], axis=0)", "\n", "\n", "", "argmax", "=", "np", ".", "argmax", "(", "accuracies", ")", "\n", "accuracy", "=", "accuracies", "[", "argmax", "]", "\n", "threshold", "=", "np", ".", "mean", "(", "thresholds", "[", "accuracies", "==", "accuracy", "]", ")", "\n", "\n", "return", "accuracy", ",", "threshold", "\n", "", ""]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.Template.__init__": [[37, 42], ["numpy.array", "numpy.array"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "subject_id", ",", "label", ",", "indices", ",", "medias", ")", ":", "\n", "        ", "self", ".", "subject_id", "=", "subject_id", "\n", "self", ".", "label", "=", "label", "\n", "self", ".", "indices", "=", "np", ".", "array", "(", "indices", ")", "\n", "self", ".", "medias", "=", "np", ".", "array", "(", "medias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.__init__": [[104, 109], ["ijba.build_subject_dict"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_subject_dict"], ["    ", "def", "__init__", "(", "self", ",", "image_paths", ")", ":", "\n", "        ", "self", ".", "image_paths", "=", "image_paths", "\n", "self", ".", "subject_dict", "=", "build_subject_dict", "(", "image_paths", ")", "\n", "self", ".", "verification_folds", "=", "None", "\n", "self", ".", "verification_templates", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_verification_proto": [[110, 145], ["range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "ijba.build_templates", "list", "ijba.build_templates", "list", "ijba.read_pairs", "numpy.array", "numpy.array", "numpy.array", "ijba.IJBATest.verification_folds.append", "ijba.IJBATest.verification_templates.extend", "ijba.IJBATest.verification_templates.extend", "ijba.IJBATest.verification_templates.extend", "numpy.unique().astype", "numpy.unique().astype", "numpy.array.append", "numpy.array.append", "VerificationFold", "numpy.unique", "numpy.unique", "numpy.concatenate", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.read_pairs"], ["", "def", "init_verification_proto", "(", "self", ",", "protofolder", ")", ":", "\n", "        ", "self", ".", "verification_folds", "=", "[", "]", "\n", "self", ".", "verification_templates", "=", "[", "]", "\n", "for", "split", "in", "range", "(", "10", ")", ":", "\n", "            ", "splitfolder", "=", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'split%d'", "%", "(", "split", "+", "1", ")", ")", "\n", "train_file", "=", "os", ".", "path", ".", "join", "(", "splitfolder", ",", "'train_%d.csv'", "%", "(", "split", "+", "1", ")", ")", "\n", "meta_file", "=", "os", ".", "path", ".", "join", "(", "splitfolder", ",", "'verify_metadata_%d.csv'", "%", "(", "split", "+", "1", ")", ")", "\n", "pair_file", "=", "os", ".", "path", ".", "join", "(", "splitfolder", ",", "'verify_comparisons_%d.csv'", "%", "(", "split", "+", "1", ")", ")", "\n", "\n", "train_templates", "=", "build_templates", "(", "self", ".", "subject_dict", ",", "train_file", ")", "\n", "train_indices", "=", "list", "(", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "[", "t", ".", "indices", "for", "t", "in", "train_templates", "]", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "\n", "test_templates", "=", "build_templates", "(", "self", ".", "subject_dict", ",", "meta_file", ")", "\n", "test_indices", "=", "list", "(", "np", ".", "unique", "(", "np", ".", "concatenate", "(", "[", "t", ".", "indices", "for", "t", "in", "test_templates", "]", ")", ")", ".", "astype", "(", "int", ")", ")", "\n", "template_dict", "=", "{", "}", "\n", "for", "t", "in", "test_templates", ":", "\n", "                ", "template_dict", "[", "t", ".", "subject_id", "]", "=", "t", "\n", "", "pairs", "=", "read_pairs", "(", "pair_file", ")", "\n", "templates1", "=", "[", "]", "\n", "templates2", "=", "[", "]", "\n", "for", "p", "in", "pairs", ":", "\n", "                ", "templates1", ".", "append", "(", "template_dict", "[", "p", "[", "0", "]", "]", ")", "\n", "templates2", ".", "append", "(", "template_dict", "[", "p", "[", "1", "]", "]", ")", "\n", "\n", "", "train_templates", "=", "np", ".", "array", "(", "train_templates", ",", "dtype", "=", "np", ".", "object", ")", "\n", "templates1", "=", "np", ".", "array", "(", "templates1", ",", "dtype", "=", "np", ".", "object", ")", "\n", "templates2", "=", "np", ".", "array", "(", "templates2", ",", "dtype", "=", "np", ".", "object", ")", "\n", "\n", "self", ".", "verification_folds", ".", "append", "(", "VerificationFold", "(", "train_indices", "=", "train_indices", ",", "test_indices", "=", "test_indices", ",", "\n", "train_templates", "=", "train_templates", ",", "templates1", "=", "templates1", ",", "templates2", "=", "templates2", ")", ")", "\n", "\n", "self", ".", "verification_templates", ".", "extend", "(", "train_templates", ")", "\n", "self", ".", "verification_templates", ".", "extend", "(", "templates1", ")", "\n", "self", ".", "verification_templates", ".", "extend", "(", "templates2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_proto": [[146, 148], ["ijba.IJBATest.init_verification_proto", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.init_verification_proto"], ["", "", "def", "init_proto", "(", "self", ",", "protofolder", ")", ":", "\n", "        ", "self", ".", "init_verification_proto", "(", "os", ".", "path", ".", "join", "(", "protofolder", ",", "'IJB-A_11_sets'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification_fold": [[149, 170], ["numpy.array", "numpy.array", "compare_func", "evaluation.metrics.ROC"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.metrics.ROC"], ["", "def", "test_verification_fold", "(", "self", ",", "compare_func", ",", "fold_idx", ",", "FARs", "=", "None", ",", "get_false_indices", "=", "False", ")", ":", "\n", "\n", "        ", "FARs", "=", "[", "0.001", ",", "0.01", "]", "if", "FARs", "is", "None", "else", "FARs", "\n", "\n", "fold", "=", "self", ".", "verification_folds", "[", "fold_idx", "]", "\n", "\n", "templates1", "=", "fold", ".", "templates1", "\n", "templates2", "=", "fold", ".", "templates2", "\n", "\n", "features1", "=", "[", "t", ".", "feature", "for", "t", "in", "templates1", "]", "\n", "features2", "=", "[", "t", ".", "feature", "for", "t", "in", "templates2", "]", "\n", "labels1", "=", "np", ".", "array", "(", "[", "t", ".", "label", "for", "t", "in", "templates1", "]", ")", "\n", "labels2", "=", "np", ".", "array", "(", "[", "t", ".", "label", "for", "t", "in", "templates2", "]", ")", "\n", "\n", "score_vec", "=", "compare_func", "(", "features1", ",", "features2", ")", "\n", "label_vec", "=", "labels1", "==", "labels2", "\n", "\n", "score_neg", "=", "score_vec", "[", "~", "label_vec", "]", "\n", "\n", "return", "metrics", ".", "ROC", "(", "score_vec", ",", "label_vec", ",", "\n", "FARs", "=", "FARs", ",", "get_false_indices", "=", "get_false_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification": [[171, 185], ["range", "numpy.stack", "numpy.stack", "ijba.IJBATest.test_verification_fold", "numpy.stack.append", "numpy.stack.append", "numpy.mean", "numpy.std", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.IJBATest.test_verification_fold"], ["", "def", "test_verification", "(", "self", ",", "compare_func", ",", "FARs", "=", "None", ")", ":", "\n", "\n", "        ", "TARs_all", "=", "[", "]", "\n", "FARs_all", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "TARs", ",", "FARs", ",", "thresholds", "=", "self", ".", "test_verification_fold", "(", "compare_func", ",", "i", ",", "FARs", "=", "FARs", ")", "\n", "TARs_all", ".", "append", "(", "TARs", ")", "\n", "FARs_all", ".", "append", "(", "FARs", ")", "\n", "\n", "", "TARs_all", "=", "np", ".", "stack", "(", "TARs_all", ")", "\n", "FARs_all", "=", "np", ".", "stack", "(", "FARs_all", ")", "\n", "\n", "\n", "return", "np", ".", "mean", "(", "TARs_all", ",", "axis", "=", "0", ")", ",", "np", ".", "std", "(", "TARs_all", ",", "axis", "=", "0", ")", ",", "np", ".", "mean", "(", "FARs_all", ",", "axis", "=", "0", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_subject_dict": [[44, 55], ["enumerate", "tuple", "int", "os.path.splitext", "image.replace.replace", "line.split"], "function", ["None"], ["", "", "def", "build_subject_dict", "(", "image_list", ")", ":", "\n", "    ", "subject_dict", "=", "{", "}", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "image_list", ")", ":", "\n", "        ", "subject_id", ",", "image", "=", "tuple", "(", "line", ".", "split", "(", "'/'", ")", "[", "-", "2", ":", "]", ")", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "image", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image", ")", "\n", "image", "=", "image", ".", "replace", "(", "'_'", ",", "'/'", ",", "1", ")", "# Recover filenames ", "\n", "if", "not", "subject_id", "in", "subject_dict", ":", "\n", "            ", "subject_dict", "[", "subject_id", "]", "=", "{", "}", "\n", "", "subject_dict", "[", "subject_id", "]", "[", "image", "]", "=", "i", "\n", "", "return", "subject_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.build_templates": [[56, 93], ["templates.append", "open", "f.readlines", "tuple", "int", "int", "os.path.splitext", "ijba.Template", "template_indices.append", "template_medias.append", "x.split", "line.split", "templates.append", "ijba.Template"], "function", ["None"], ["", "def", "build_templates", "(", "subject_dict", ",", "meta_file", ")", ":", "\n", "    ", "with", "open", "(", "meta_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "meta_list", "=", "f", ".", "readlines", "(", ")", "\n", "meta_list", "=", "[", "x", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "for", "x", "in", "meta_list", "]", "\n", "meta_list", "=", "meta_list", "[", "1", ":", "]", "\n", "\n", "", "templates", "=", "[", "]", "\n", "template_id", "=", "None", "\n", "template_label", "=", "None", "\n", "template_indices", "=", "None", "\n", "template_medias", "=", "None", "\n", "count", "=", "0", "\n", "for", "line", "in", "meta_list", ":", "\n", "        ", "temp_id", ",", "subject_id", ",", "image", ",", "media", "=", "tuple", "(", "line", ".", "split", "(", "','", ")", "[", "0", ":", "4", "]", ")", "\n", "temp_id", "=", "int", "(", "temp_id", ")", "\n", "subject_id", "=", "int", "(", "subject_id", ")", "\n", "image", ",", "_", "=", "os", ".", "path", ".", "splitext", "(", "image", ")", "\n", "if", "subject_id", "in", "subject_dict", "and", "image", "in", "subject_dict", "[", "subject_id", "]", ":", "\n", "            ", "index", "=", "subject_dict", "[", "subject_id", "]", "[", "image", "]", "\n", "count", "+=", "1", "\n", "", "else", ":", "\n", "            ", "index", "=", "None", "\n", "\n", "", "if", "temp_id", "!=", "template_id", ":", "\n", "            ", "if", "template_id", "is", "not", "None", ":", "\n", "                ", "templates", ".", "append", "(", "Template", "(", "template_id", ",", "template_label", ",", "template_indices", ",", "template_medias", ")", ")", "\n", "", "template_id", "=", "temp_id", "\n", "template_label", "=", "subject_id", "\n", "template_indices", "=", "[", "]", "\n", "template_medias", "=", "[", "]", "\n", "", "if", "index", "is", "not", "None", ":", "\n", "            ", "template_indices", ".", "append", "(", "index", ")", "\n", "template_medias", ".", "append", "(", "media", ")", "\n", "\n", "# last template", "\n", "", "", "templates", ".", "append", "(", "Template", "(", "template_id", ",", "template_label", ",", "template_indices", ",", "template_medias", ")", ")", "\n", "return", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.ijba.read_pairs": [[94, 101], ["open", "f.readlines", "pair.split", "x.split", "int", "int"], "function", ["None"], ["", "def", "read_pairs", "(", "pair_file", ")", ":", "\n", "    ", "with", "open", "(", "pair_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "pairs", "=", "f", ".", "readlines", "(", ")", "\n", "pairs", "=", "[", "x", ".", "split", "(", "'\\n'", ")", "[", "0", "]", "for", "x", "in", "pairs", "]", "\n", "pairs", "=", "[", "pair", ".", "split", "(", "','", ")", "for", "pair", "in", "pairs", "]", "\n", "pairs", "=", "[", "(", "int", "(", "pair", "[", "0", "]", ")", ",", "int", "(", "pair", "[", "1", "]", ")", ")", "for", "pair", "in", "pairs", "]", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.eval_lfw.main": [[40, 63], ["print", "network.Network", "network.Network.load_model", "utils.imageprocessing.preprocess", "network.Network.extract_feature", "numpy.concatenate", "evaluation.lfw.LFWTest", "evaluation.lfw.LFWTest.init_standard_proto", "evaluation.lfw.LFWTest.test_standard_proto", "print", "evaluation.lfw.LFWTest.test_standard_proto", "print", "utils.dataset.Dataset", "len", "len"], "function", ["home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.load_model", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.utils.imageprocessing.preprocess", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.None.network.Network.extract_feature", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.init_standard_proto", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.test_standard_proto", "home.repos.pwc.inspect_result.seasonSH_Probabilistic-Face-Embeddings.evaluation.lfw.LFWTest.test_standard_proto"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "\n", "    ", "paths", "=", "Dataset", "(", "args", ".", "dataset_path", ")", "[", "'abspath'", "]", "\n", "print", "(", "'%d images to load.'", "%", "len", "(", "paths", ")", ")", "\n", "assert", "(", "len", "(", "paths", ")", ">", "0", ")", "\n", "\n", "# Load model files and config file", "\n", "network", "=", "Network", "(", ")", "\n", "network", ".", "load_model", "(", "args", ".", "model_dir", ")", "\n", "images", "=", "preprocess", "(", "paths", ",", "network", ".", "config", ",", "False", ")", "\n", "\n", "# Run forward pass to calculate embeddings", "\n", "mu", ",", "sigma_sq", "=", "network", ".", "extract_feature", "(", "images", ",", "args", ".", "batch_size", ",", "verbose", "=", "True", ")", "\n", "feat_pfe", "=", "np", ".", "concatenate", "(", "[", "mu", ",", "sigma_sq", "]", ",", "axis", "=", "1", ")", "\n", "\n", "lfwtest", "=", "LFWTest", "(", "paths", ")", "\n", "lfwtest", ".", "init_standard_proto", "(", "args", ".", "protocol_path", ")", "\n", "\n", "accuracy", ",", "threshold", "=", "lfwtest", ".", "test_standard_proto", "(", "mu", ",", "utils", ".", "pair_euc_score", ")", "\n", "print", "(", "'Euclidean (cosine) accuracy: %.5f threshold: %.5f'", "%", "(", "accuracy", ",", "threshold", ")", ")", "\n", "accuracy", ",", "threshold", "=", "lfwtest", ".", "test_standard_proto", "(", "feat_pfe", ",", "utils", ".", "pair_MLS_score", ")", "\n", "print", "(", "'MLS accuracy: %.5f threshold: %.5f'", "%", "(", "accuracy", ",", "threshold", ")", ")", "\n", "\n"]]}