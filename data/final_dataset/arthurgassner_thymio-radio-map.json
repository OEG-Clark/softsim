{"home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.offset_origin_fingerprint_folders.offset_origin_locations": [[12, 38], ["click.command", "click.option", "click.option", "click.option", "os.path.join", "json.load.keys", "open", "json.load", "open", "json.dump"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder holding the locations.json to offset'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--x_offset'", ",", "prompt", "=", "'Offset [cm] to add to the x-coordinates'", ",", "default", "=", "0.0", ")", "\n", "@", "click", ".", "option", "(", "'--y_offset'", ",", "prompt", "=", "'Offset [cm] to add to the y-coordinates'", ",", "default", "=", "0.0", ")", "\n", "def", "offset_origin_locations", "(", "src_folderpath", ",", "x_offset", ",", "y_offset", ")", ":", "\n", "    ", "\"\"\"offset the origin of the locations.JSON\n\n    Effectively adds an offset to the x and y coordinates of each positions.\n\n    Arguments:\n        src_folderpath {str} -- Folder holding the locations.json to offset\n    \"\"\"", "\n", "# Load the locations.json", "\n", "locations_filepath", "=", "join", "(", "src_folderpath", ",", "'{}.json'", ".", "format", "(", "LOCATIONS_FILENAME", ")", ")", "\n", "locations", "=", "{", "}", "\n", "with", "open", "(", "locations_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "locations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "# Offset the x and y coordinates", "\n", "", "for", "k", "in", "locations", ".", "keys", "(", ")", ":", "\n", "        ", "locations", "[", "k", "]", "[", "0", "]", "+=", "x_offset", "\n", "locations", "[", "k", "]", "[", "1", "]", "+=", "y_offset", "\n", "\n", "# Save the new locations.json", "\n", "", "with", "open", "(", "locations_filepath", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "locations", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.plot_fingerprints.plot_fingerprints": [[14, 53], ["click.command", "click.option", "click.option", "os.path.join", "print", "print", "sorted", "print", "pandas.read_parquet", "matplotlib.subplots", "zip", "matplotlib.suptitle", "matplotlib.savefig", "print", "f.split", "os.listdir", "list", "len", "os.path.join", "sorted", "seaborn.lineplot", "os.path.join", "f.split", "os.listdir", "pd.read_parquet.TTI.unique", "len", "f.split", "f.split", "set", "set", "f.split", "pd.read_parquet.TTI.apply"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the ce, else and info folder are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--force'", ",", "'-f'", ",", "is_flag", "=", "True", ",", "help", "=", "'Whether to replot already plotted files'", ")", "\n", "def", "plot_fingerprints", "(", "src_folderpath", ",", "force", ")", ":", "\n", "    ", "\"\"\"Plot a sample of the channel estimates located in src_folderpath/CE_FOLDERNAME\n    The plot is saved in src_folderpath \n\n    If --force is set, then the already plotted .parquet are replotted\n\n    Arguments:\n        src_folderpath {str} -- Source folder where the CE_FOLDERNAME, ELSE_FOLDERNAME and INFO_FOLDERNAME folder are located\n    \"\"\"", "\n", "\n", "src_ce_folderpath", "=", "join", "(", "src_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "\n", "cleaned_ce_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'parquet'", "]", "# list all .parquet file in ce_folderpath", "\n", "\n", "if", "not", "force", ":", "\n", "        ", "ce_pngs", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'png'", "]", "# list all .png file in ce_folderpath", "\n", "cleaned_ce_files", "=", "sorted", "(", "list", "(", "set", "(", "cleaned_ce_files", ")", "-", "set", "(", "ce_pngs", ")", ")", ")", "\n", "\n", "", "print", "(", "''", ")", "\n", "print", "(", "'Plot {} .parquet files in {}/\\n'", ".", "format", "(", "len", "(", "cleaned_ce_files", ")", ",", "src_ce_folderpath", ")", ")", "\n", "for", "f", "in", "cleaned_ce_files", ":", "\n", "        ", "print", "(", "'\\t {}.parquet: '", ".", "format", "(", "f", ")", ",", "end", "=", "''", ")", "\n", "ce_df", "=", "pd", ".", "read_parquet", "(", "join", "(", "src_ce_folderpath", ",", "'{}.parquet'", ".", "format", "(", "f", ")", ")", ")", "\n", "ttis", "=", "sorted", "(", "ce_df", ".", "TTI", ".", "unique", "(", ")", ")", "[", ":", "N_TTI_TO_PLOT", "]", "# list of TTIs to plot", "\n", "\n", "# Plot", "\n", "_", ",", "axes", "=", "plt", ".", "subplots", "(", "4", ",", "1", ",", "figsize", "=", "(", "5", ",", "15", ")", ",", "sharex", "=", "True", ")", "\n", "\n", "for", "ax", ",", "y", "in", "zip", "(", "axes", ",", "[", "'CE_0_AMPLITUDE'", ",", "'CE_1_AMPLITUDE'", ",", "'CE_2_AMPLITUDE'", ",", "'CE_3_AMPLITUDE'", "]", ")", ":", "\n", "            ", "sns", ".", "lineplot", "(", "x", "=", "'SC_ID'", ",", "y", "=", "y", ",", "hue", "=", "'TTI'", ",", "data", "=", "ce_df", "[", "ce_df", ".", "TTI", ".", "apply", "(", "lambda", "tti", ":", "tti", "in", "ttis", ")", "]", ",", "legend", "=", "False", ",", "ax", "=", "ax", ")", "\n", "\n", "", "plt", ".", "suptitle", "(", "'{}\\n {} TTIs'", ".", "format", "(", "f", ",", "len", "(", "ttis", ")", ")", ")", "\n", "\n", "plot_filename", "=", "'{}.png'", ".", "format", "(", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "src_ce_folderpath", ",", "plot_filename", ")", ")", "\n", "print", "(", "'Plotted'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_fingerprints": [[24, 95], ["click.command", "click.option", "click.option", "os.path.join", "os.path.join", "os.path.join", "clean_fingerprints.load_fingerprint_ids", "print", "print", "clean_fingerprints.get_cleaned_fingerprint_ids", "print", "sorted", "print", "os.path.join", "os.path.join", "print", "clean_fingerprints.clean_ce", "clean_ce.to_parquet", "print", "os.path.join", "os.path.join", "print", "clean_fingerprints.clean_else", "clean_else.to_pickle", "print", "os.path.join", "os.path.join", "print", "clean_fingerprints.clean_info", "clean_info.to_pickle", "print", "len", "list", "len", "len", "set", "set"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.load_fingerprint_ids", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.get_cleaned_fingerprint_ids", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_ce", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_else", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_info"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the ce, else and info folder are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--force'", ",", "'-f'", ",", "is_flag", "=", "True", ",", "help", "=", "'Whether to reclean already cleaned files'", ")", "\n", "def", "clean_fingerprints", "(", "src_folderpath", ",", "force", ")", ":", "\n", "    ", "\"\"\"Load all the fingerprints referenced in {LOCATIONS_FILENAME}.json\n    If --force is True, clean all the files from all the fingerprints\n    Else, only clean the files that do not have a \"clean\" version already\n\n    Save the cleaned files as\n        - .parquet for ce.txt \n        - .pkl for else.txt and info.txt\n\n    Arguments:\n        src_folderpath {str} -- Source folder where the CE_FOLDERNAME, ELSE_FOLDERNAME and INFO_FOLDERNAME folder are located\n    \"\"\"", "\n", "\n", "src_ce_folderpath", "=", "join", "(", "src_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "src_else_folderpath", "=", "join", "(", "src_folderpath", ",", "ELSE_FOLDERNAME", ")", "\n", "src_info_folderpath", "=", "join", "(", "src_folderpath", ",", "INFO_FOLDERNAME", ")", "\n", "\n", "# Load fingerprint IDs", "\n", "fingerprint_ids", "=", "load_fingerprint_ids", "(", "src_folderpath", ",", "LOCATIONS_FILENAME", ")", "\n", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Cleaning {} fingerprints\\n'", ".", "format", "(", "len", "(", "fingerprint_ids", ")", ")", ")", "\n", "\n", "if", "not", "force", ":", "\n", "        ", "cleaned_fingerprint_ids", "=", "get_cleaned_fingerprint_ids", "(", "src_ce_folderpath", ",", "src_else_folderpath", ",", "src_info_folderpath", ")", "# get IDs of the fingerprints that already have all three files cleaned", "\n", "print", "(", "'{}/{} fingerprints already cleaned\\n'", ".", "format", "(", "len", "(", "cleaned_fingerprint_ids", ")", ",", "len", "(", "fingerprint_ids", ")", ")", ")", "\n", "fingerprint_ids", "=", "sorted", "(", "list", "(", "set", "(", "fingerprint_ids", ")", "-", "set", "(", "cleaned_fingerprint_ids", ")", ")", ")", "\n", "\n", "", "for", "fingerprint_id", "in", "fingerprint_ids", ":", "\n", "        ", "print", "(", "'- Clean fingerprint #{}'", ".", "format", "(", "fingerprint_id", ")", ")", "\n", "\n", "# Clean and save ce_{id}_raw.txt", "\n", "src_ce_filename", "=", "'{}_{}_raw.txt'", ".", "format", "(", "CE_FILENAME", ",", "fingerprint_id", ")", "\n", "dest_ce_filename", "=", "'{}_{}.parquet'", ".", "format", "(", "CE_FILENAME", ",", "fingerprint_id", ")", "\n", "\n", "src_ce_filepath", "=", "join", "(", "src_ce_folderpath", ",", "src_ce_filename", ")", "\n", "dest_ce_filepath", "=", "join", "(", "src_ce_folderpath", ",", "dest_ce_filename", ")", "\n", "\n", "print", "(", "'\\t {} -> '", ".", "format", "(", "src_ce_filename", ")", ",", "end", "=", "''", ")", "\n", "ce_df", "=", "clean_ce", "(", "ce_filepath", "=", "src_ce_filepath", ")", "# Clean ce_id_raw.txt", "\n", "ce_df", ".", "to_parquet", "(", "dest_ce_filepath", ",", "index", "=", "False", ",", "compression", "=", "'gzip'", ")", "\n", "print", "(", "dest_ce_filename", ")", "\n", "\n", "\n", "# Clean and save else_{id}_raw.txt", "\n", "src_else_filename", "=", "'{}_{}_raw.txt'", ".", "format", "(", "ELSE_FILENAME", ",", "fingerprint_id", ")", "\n", "dest_else_filename", "=", "'{}_{}.pkl'", ".", "format", "(", "ELSE_FILENAME", ",", "fingerprint_id", ")", "\n", "\n", "src_else_filepath", "=", "join", "(", "src_else_folderpath", ",", "src_else_filename", ")", "\n", "dest_else_filepath", "=", "join", "(", "src_else_folderpath", ",", "dest_else_filename", ")", "\n", "\n", "print", "(", "'\\t {} -> '", ".", "format", "(", "src_else_filename", ")", ",", "end", "=", "''", ")", "\n", "else_df", "=", "clean_else", "(", "else_filepath", "=", "src_else_filepath", ")", "# Clean else_id_raw.txt", "\n", "else_df", ".", "to_pickle", "(", "dest_else_filepath", ")", "\n", "print", "(", "dest_else_filename", ")", "\n", "\n", "\n", "# Clean and save info_{id}_raw.txt", "\n", "src_info_filename", "=", "'{}_{}_raw.txt'", ".", "format", "(", "INFO_FILENAME", ",", "fingerprint_id", ")", "\n", "dest_info_filename", "=", "'{}_{}.pkl'", ".", "format", "(", "INFO_FILENAME", ",", "fingerprint_id", ")", "\n", "\n", "src_info_filepath", "=", "join", "(", "src_info_folderpath", ",", "src_info_filename", ")", "\n", "dest_info_filepath", "=", "join", "(", "src_info_folderpath", ",", "dest_info_filename", ")", "\n", "\n", "print", "(", "'\\t {} -> '", ".", "format", "(", "src_info_filename", ")", ",", "end", "=", "''", ")", "\n", "info_df", "=", "clean_info", "(", "info_filepath", "=", "src_info_filepath", ")", "# Clean info_id_raw.txt", "\n", "info_df", ".", "to_pickle", "(", "dest_info_filepath", ")", "\n", "print", "(", "dest_info_filename", ",", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.load_fingerprint_ids": [[97, 116], ["os.path.join", "open", "json.load", "sorted", "map", "list", "json.load.keys"], "function", ["None"], ["", "", "def", "load_fingerprint_ids", "(", "src_folderpath", ",", "location_filename", ")", ":", "\n", "    ", "\"\"\"Load the fingerprint IDs located in src_folderpath/location_filename.JSON\n\n    Arguments:\n        src_folderpath {str} -- Path to the folder holding the location_filename\n        location_filename {str} -- Name of the JSON file holding the \"Fingerprint ID\" -> [x,y] mapping\n\n    Returns:\n        fingerprint_ids [list] -- Sorted (ascending) list of the fingerprint IDs located in src_folderpath/location_filename.JSON\n    \"\"\"", "\n", "\n", "locations_filepath", "=", "join", "(", "src_folderpath", ",", "'{}.json'", ".", "format", "(", "LOCATIONS_FILENAME", ")", ")", "\n", "fingerprint_ids", "=", "[", "]", "\n", "\n", "with", "open", "(", "locations_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "locations", "=", "json", ".", "load", "(", "fp", ")", "\n", "fingerprint_ids", "=", "sorted", "(", "map", "(", "int", ",", "list", "(", "locations", ".", "keys", "(", ")", ")", ")", ")", "\n", "\n", "", "return", "fingerprint_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.get_cleaned_fingerprint_ids": [[118, 139], ["list", "map", "f.split", "os.listdir", "f.split", "f.split", "os.listdir", "f.split", "f.split", "os.listdir", "f.split", "set().intersection().intersection", "set", "f.split", "f.split", "f.split", "set().intersection", "set", "set"], "function", ["None"], ["", "def", "get_cleaned_fingerprint_ids", "(", "ce_folderpath", ",", "else_folderpath", ",", "info_folderpath", ")", ":", "\n", "    ", "\"\"\"Return the fingerprints IDs of the fingerprints that have all three files cleaned (ce, else and info)\n\n    Arguments:\n        ce_folderpath {str} -- Path to the folder holding the cleaned ce files (.parquet)\n        else_folderpath {str} -- Path to the folder holding the cleaned else files (.pkl)\n        info_folderpath {str} -- Path to the folder holding the cleaned info files (.pkl)\n\n    Returns:\n        [list] -- [Fingerprints IDs of the fingerprints that have all three files cleaned (ce, else and info)]\n    \"\"\"", "\n", "cleaned_ce_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "ce_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'parquet'", "]", "# list all .parquet file in ce_folderpath", "\n", "cleaned_ce_fingerprint_ids", "=", "[", "f", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "for", "f", "in", "cleaned_ce_files", "]", "# extract fingerprint ID from .parquet filename (e.g ce_123 --> 123)", "\n", "\n", "cleaned_else_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "else_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'pkl'", "]", "# list all .pkl file in else_folderpath", "\n", "cleaned_else_fingerprint_ids", "=", "[", "f", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "for", "f", "in", "cleaned_else_files", "]", "# extract fingerprint ID from .parquet filename (e.g else_123 --> 123)", "\n", "\n", "cleaned_info_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "info_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'pkl'", "]", "# list all .pkl file in info_folderpath", "\n", "cleaned_info_fingerprint_ids", "=", "[", "f", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", "for", "f", "in", "cleaned_info_files", "]", "# extract fingerprint ID from .parquet filename (e.g info_123 --> 123)", "\n", "\n", "return", "list", "(", "map", "(", "int", ",", "set", "(", "cleaned_ce_fingerprint_ids", ")", ".", "intersection", "(", "set", "(", "cleaned_else_fingerprint_ids", ")", ")", ".", "intersection", "(", "set", "(", "cleaned_info_fingerprint_ids", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_ce": [[141, 175], ["numpy.dtype", "numpy.fromfile", "pandas.DataFrame", "pd.DataFrame.values.reshape", "numpy.full", "enumerate", "pandas.DataFrame().dropna", "clean_ce_df[].astype", "pandas.DataFrame"], "function", ["None"], ["", "def", "clean_ce", "(", "ce_filepath", ")", ":", "\n", "    ", "ce_dt", "=", "np", ".", "dtype", "(", "[", "(", "'TTI'", ",", "np", ".", "float32", ")", ",", "(", "'SC_ID'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'CE_0_AMPLITUDE'", ",", "np", ".", "float32", ")", ",", "(", "'CE_0_PHASE'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'CE_1_AMPLITUDE'", ",", "np", ".", "float32", ")", ",", "(", "'CE_1_PHASE'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'CE_2_AMPLITUDE'", ",", "np", ".", "float32", ")", ",", "(", "'CE_2_PHASE'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'CE_3_AMPLITUDE'", ",", "np", ".", "float32", ")", ",", "(", "'CE_3_PHASE'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'STOP'", ",", "np", ".", "float32", ")", "]", ")", "\n", "\n", "ce_data", "=", "np", ".", "fromfile", "(", "ce_filepath", ",", "dtype", "=", "ce_dt", ")", "\n", "ce_df", "=", "pd", ".", "DataFrame", "(", "ce_data", ")", "\n", "\n", "# Clean the dataset because of recording errors", "\n", "ce_data_1d", "=", "ce_df", ".", "values", ".", "reshape", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "n_rows", "=", "(", "ce_data_1d", "==", "STOP_SYMBOL", ")", ".", "sum", "(", ")", "# 1 row per occurence of STOP_SYMBOL", "\n", "cleaned_ce_data", "=", "np", ".", "full", "(", "(", "n_rows", ",", "ce_df", ".", "shape", "[", "1", "]", "-", "1", ")", ",", "fill_value", "=", "np", ".", "nan", ")", "# minus 1 since we discard the STOP column", "\n", "\n", "row_idx", "=", "0", "\n", "column_idx", "=", "0", "\n", "for", "i", ",", "e", "in", "enumerate", "(", "ce_data_1d", ")", ":", "\n", "        ", "column_idx", "+=", "1", "\n", "if", "e", "==", "STOP_SYMBOL", ":", "\n", "            ", "if", "column_idx", "==", "11", ":", "\n", "                ", "cleaned_ce_data", "[", "row_idx", ",", ":", "]", "=", "ce_data_1d", "[", "i", "-", "10", ":", "i", "]", "\n", "row_idx", "+=", "1", "\n", "", "column_idx", "=", "0", "\n", "\n", "", "", "clean_ce_df", "=", "pd", ".", "DataFrame", "(", "cleaned_ce_data", ",", "columns", "=", "ce_dt", ".", "names", "[", ":", "-", "1", "]", ")", ".", "dropna", "(", ")", "\n", "\n", "# Convert to appropriate types", "\n", "for", "column", "in", "[", "'TTI'", ",", "'SC_ID'", "]", ":", "\n", "        ", "clean_ce_df", "[", "column", "]", "=", "clean_ce_df", "[", "column", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "return", "clean_ce_df", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_else": [[177, 193], ["numpy.dtype", "numpy.fromfile", "pandas.DataFrame", "else_df[].astype"], "function", ["None"], ["", "def", "clean_else", "(", "else_filepath", ")", ":", "\n", "    ", "else_dt", "=", "np", ".", "dtype", "(", "[", "(", "'TTI'", ",", "np", ".", "float32", ")", ",", "(", "'NOISE_ESTIMATE_DBM'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'SNR_DB'", ",", "np", ".", "float32", ")", ",", "(", "'SNR_DB_0'", ",", "np", ".", "float32", ")", ",", "(", "'SNR_DB_1'", ",", "np", ".", "float32", ")", ",", "(", "'SNR_DB_2'", ",", "np", ".", "float32", ")", ",", "(", "'SNR_DB_3'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'RSRP_DBM'", ",", "np", ".", "float32", ")", ",", "(", "'RSRP_NEIGH'", ",", "np", ".", "float32", ")", ",", "(", "'RSRP_DBM_0'", ",", "np", ".", "float32", ")", ",", "(", "'RSRP_DBM_1'", ",", "np", ".", "float32", ")", ",", "(", "'RSRP_DBM_2'", ",", "np", ".", "float32", ")", ",", "(", "'RSRP_DBM_3'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'RSRQ_DB'", ",", "np", ".", "float32", ")", ",", "(", "'RSRQ_DB_0'", ",", "np", ".", "float32", ")", ",", "(", "'RSRQ_DB_1'", ",", "np", ".", "float32", ")", ",", "(", "'RSRQ_DB_2'", ",", "np", ".", "float32", ")", ",", "(", "'RSRQ_DB_3'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'RSSI_DBM'", ",", "np", ".", "float32", ")", ",", "(", "'CFO'", ",", "np", ".", "float32", ")", ",", "(", "'SYNC_ERROR'", ",", "np", ".", "float32", ")", "]", ")", "\n", "\n", "else_data", "=", "np", ".", "fromfile", "(", "else_filepath", ",", "dtype", "=", "else_dt", ")", "\n", "else_df", "=", "pd", ".", "DataFrame", "(", "else_data", ")", "\n", "\n", "for", "column", "in", "[", "'TTI'", "]", ":", "\n", "        ", "else_df", "[", "column", "]", "=", "else_df", "[", "column", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "else_df", "[", "'TTI'", "]", "/=", "1e3", "# Convert TTI to seconds", "\n", "\n", "return", "else_df", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.clean_fingerprints.clean_info": [[195, 209], ["numpy.dtype", "numpy.fromfile", "pandas.DataFrame", "info_df[].astype"], "function", ["None"], ["", "def", "clean_info", "(", "info_filepath", ")", ":", "\n", "    ", "info_dt", "=", "np", ".", "dtype", "(", "[", "(", "'PCI'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'NOF_PRB'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'NOF_PORTS'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'NOF_RX_ANTENNAS'", ",", "np", ".", "float32", ")", ",", "\n", "(", "'TTI'", ",", "np", ".", "float32", ")", "]", ")", "\n", "\n", "info_data", "=", "np", ".", "fromfile", "(", "info_filepath", ",", "dtype", "=", "info_dt", ")", "\n", "info_df", "=", "pd", ".", "DataFrame", "(", "info_data", ")", "\n", "\n", "for", "column", "in", "[", "'PCI'", ",", "'NOF_PRB'", ",", "'NOF_PORTS'", ",", "'NOF_RX_ANTENNAS'", ",", "'TTI'", "]", ":", "\n", "        ", "info_df", "[", "column", "]", "=", "info_df", "[", "column", "]", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "return", "info_df", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.combine_fingerprint_folders": [[25, 110], ["click.command", "click.option", "click.option", "sorted", "os.path.join", "os.path.join", "os.path.join", "print", "print", "print", "os.listdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "os.path.isdir", "os.mkdir", "print", "os.path.join", "combine_fingerprint_folders.load_locations", "print", "os.path.join", "os.path.join", "os.path.join", "combine_fingerprint_folders.list_fingerprint_ids", "print", "open", "json.dump", "combine_fingerprint_folders.handle_fingerprint", "os.path.join", "len", "len", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.load_locations", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.list_fingerprint_ids", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.handle_fingerprint"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the folders to combine (i.e. the ones holding the ce folder) are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--dest_folderpath'", ",", "prompt", "=", "'Name of the folder to hold the combined data'", ",", "default", "=", "''", ")", "\n", "def", "combine_fingerprint_folders", "(", "src_folderpath", ",", "dest_folderpath", ")", ":", "\n", "    ", "\"\"\"Combine several folders (contained in src_folderpath) of the shape:\n\n        src_folderpath/\n            fingerprint_folder_0/\n                ce/\n                else/\n                info/\n                locations.JSON\n            fingerprint_folder_1/\n                ce/\n                else/\n                info/\n                locations.JSON\n\n    into \n    \n        dest_folderpath/\n            ce/\n            else/\n            info/\n            locations.JSON\n\n    The ce_*.parquet, else_*.pkl and info_*.pkl files are renamed to have the shape *_{UNIQUE_FINGEPRINT_ID}.*\n\n    Arguments:\n        src_folderpath {str} -- Folder where the folders to combine (i.e. the ones holding the ce folder) are located\n        dest_folderpath {str} -- Destination folder\n    \"\"\"", "\n", "\n", "fingerprint_folders", "=", "sorted", "(", "listdir", "(", "src_folderpath", ")", ")", "\n", "\n", "# Folderpath where to store the fingerprints", "\n", "dest_ce_folderpath", "=", "join", "(", "dest_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "dest_else_folderpath", "=", "join", "(", "dest_folderpath", ",", "ELSE_FOLDERNAME", ")", "\n", "dest_info_folderpath", "=", "join", "(", "dest_folderpath", ",", "INFO_FOLDERNAME", ")", "\n", "\n", "# Ensure dest_folderpath exists", "\n", "if", "not", "isdir", "(", "dest_folderpath", ")", ":", "\n", "        ", "mkdir", "(", "dest_folderpath", ")", "\n", "", "if", "not", "isdir", "(", "dest_ce_folderpath", ")", ":", "\n", "        ", "mkdir", "(", "dest_ce_folderpath", ")", "\n", "", "if", "not", "isdir", "(", "dest_else_folderpath", ")", ":", "\n", "        ", "mkdir", "(", "dest_else_folderpath", ")", "\n", "", "if", "not", "isdir", "(", "dest_info_folderpath", ")", ":", "\n", "        ", "mkdir", "(", "dest_info_folderpath", ")", "\n", "\n", "", "print", "(", "''", ")", "\n", "print", "(", "f'- Combine {len(fingerprint_folders)} fingerprint folders'", ")", "\n", "print", "(", "''", ")", "\n", "\n", "all_locations", "=", "{", "}", "\n", "new_fingerprint_id", "=", "0", "\n", "for", "fingerprint_folder", "in", "fingerprint_folders", ":", "\n", "        ", "print", "(", "'\\tFingerprint folder:'", ",", "fingerprint_folder", ")", "\n", "\n", "fingerprint_folderpath", "=", "join", "(", "src_folderpath", ",", "fingerprint_folder", ")", "\n", "\n", "# Load the locations.JSON associated with this fingerprint_folder", "\n", "locations", "=", "load_locations", "(", "fingerprint_folderpath", ",", "LOCATIONS_FILENAME", ")", "\n", "print", "(", "f'\\t\\t {len(locations)} RPs found in locations.JSON'", ")", "\n", "\n", "ce_folderpath", "=", "join", "(", "fingerprint_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "else_folderpath", "=", "join", "(", "fingerprint_folderpath", ",", "ELSE_FOLDERNAME", ")", "\n", "info_folderpath", "=", "join", "(", "fingerprint_folderpath", ",", "INFO_FOLDERNAME", ")", "\n", "\n", "# Get a list of the .parquet file in fingerprint_folder/ce/", "\n", "fingerprint_ids", "=", "list_fingerprint_ids", "(", "ce_folderpath", ")", "\n", "print", "(", "f'\\t\\t {len(fingerprint_ids)} .parquet files found in ce/\\n'", ")", "\n", "\n", "for", "fingerprint_id", "in", "fingerprint_ids", ":", "\n", "\n", "            ", "handle_fingerprint", "(", "fingerprint_id", ",", "new_fingerprint_id", ",", "ce_folderpath", ",", "else_folderpath", ",", "info_folderpath", ",", "dest_ce_folderpath", ",", "dest_else_folderpath", ",", "dest_info_folderpath", ")", "\n", "\n", "# Save its (new_fingerprint_id, [x,y]) pair", "\n", "all_locations", "[", "str", "(", "new_fingerprint_id", ")", "]", "=", "locations", "[", "str", "(", "fingerprint_id", ")", "]", "\n", "\n", "new_fingerprint_id", "+=", "1", "\n", "\n", "# Save the new locations.json", "\n", "", "", "with", "open", "(", "join", "(", "dest_folderpath", ",", "f'{LOCATIONS_FILENAME}.json'", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "json", ".", "dump", "(", "all_locations", ",", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.load_locations": [[111, 129], ["os.path.join", "open", "json.load"], "function", ["None"], ["", "", "def", "load_locations", "(", "src_folderpath", ",", "location_filename", ")", ":", "\n", "    ", "\"\"\"Load the fingerprint IDs located in src_folderpath/location_filename.JSON\n\n    Arguments:\n        src_folderpath {str} -- Path to the folder holding the location_filename\n        location_filename {str} -- Name of the JSON file holding the \"Fingerprint ID\" -> [x,y] mapping\n\n    Returns:\n        locations [dict] -- Dict stored in src_folderpath/location_filename.JSON. The fingerprint IDs are key, and the [x,y] coordinates are values.\n    \"\"\"", "\n", "\n", "locations_filepath", "=", "join", "(", "src_folderpath", ",", "'{}.json'", ".", "format", "(", "location_filename", ")", ")", "\n", "locations", "=", "[", "]", "\n", "\n", "with", "open", "(", "locations_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "locations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "return", "locations", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.list_fingerprint_ids": [[130, 141], ["sorted", "sorted", "glob.glob", "int", "os.path.join", "path.split", "[].split", "f.split"], "function", ["None"], ["", "def", "list_fingerprint_ids", "(", "src_folderpath", ")", ":", "\n", "    ", "'''List the fingerprint IDs of all the .parquet files in src_folderpath\n    '''", "\n", "\n", "filepaths", "=", "sorted", "(", "glob", ".", "glob", "(", "join", "(", "src_folderpath", ",", "\"*.parquet\"", ")", ")", ")", "\n", "filenames", "=", "[", "path", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "for", "path", "in", "filepaths", "]", "# only keep the filenames", "\n", "\n", "# order the filenames by ascending fingerprint ID's", "\n", "fingerprint_ids", "=", "[", "int", "(", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "for", "f", "in", "filenames", "]", "\n", "\n", "return", "sorted", "(", "fingerprint_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.combine_fingerprint_folders.handle_fingerprint": [[142, 180], ["zip", "os.path.join", "os.path.join", "os.path.join", "shutil.copy", "os.rename"], "function", ["None"], ["", "def", "handle_fingerprint", "(", "fingerprint_id", ",", "new_fingerprint_id", ",", "ce_folderpath", ",", "else_folderpath", ",", "info_folderpath", ",", "dest_ce_folderpath", ",", "dest_else_folderpath", ",", "dest_info_folderpath", ")", ":", "\n", "    ", "\"\"\"Handle the fingerprint with the ID {fingerprint_id}.\n\n    That is, copy the files related to that fingerprint_id (ce.parquet, else.pkl and info.pkl)\n    Then, rename them so that they have the ID {new_fingerprint_id}\n\n    Args:\n        fingerprint_id (int): ID of the fingerprint to handle\n        new_fingerprint_id (int): New ID given to the handled fingerprint\n        ce_folderpath ([type]): [description]\n        else_folderpath ([type]): [description]\n        info_folderpath ([type]): [description]\n        dest_ce_folderpath ([type]): [description]\n        dest_else_folderpath ([type]): [description]\n        dest_info_folderpath ([type]): [description]\n    \"\"\"", "\n", "\n", "src_folderpaths", "=", "[", "ce_folderpath", ",", "else_folderpath", ",", "info_folderpath", "]", "\n", "dest_folderpaths", "=", "[", "dest_ce_folderpath", ",", "dest_else_folderpath", ",", "dest_info_folderpath", "]", "\n", "\n", "ce_filename", "=", "f'{CE_FILENAME_PREFIX}_{fingerprint_id}.parquet'", "\n", "else_filename", "=", "f'{ELSE_FILENAME_PREFIX}_{fingerprint_id}.pkl'", "\n", "info_filename", "=", "f'{INFO_FILENAME_PREFIX}_{fingerprint_id}.pkl'", "\n", "filenames", "=", "[", "ce_filename", ",", "else_filename", ",", "info_filename", "]", "\n", "\n", "new_ce_filename", "=", "f'{CE_FILENAME_PREFIX}_{new_fingerprint_id}.parquet'", "\n", "new_else_filename", "=", "f'{ELSE_FILENAME_PREFIX}_{new_fingerprint_id}.pkl'", "\n", "new_info_filename", "=", "f'{INFO_FILENAME_PREFIX}_{new_fingerprint_id}.pkl'", "\n", "new_filenames", "=", "[", "new_ce_filename", ",", "new_else_filename", ",", "new_info_filename", "]", "\n", "\n", "# Copy and rename the files ", "\n", "for", "filename", ",", "new_filename", ",", "temp_filename", ",", "folderpath", ",", "dest_folderpath", "in", "zip", "(", "filenames", ",", "new_filenames", ",", "[", "CE_TEMP_FILENAME", ",", "ELSE_TEMP_FILENAME", ",", "INFO_TEMP_FILENAME", "]", ",", "src_folderpaths", ",", "dest_folderpaths", ")", ":", "\n", "        ", "src_filepath", "=", "join", "(", "folderpath", ",", "filename", ")", "\n", "dest_temp_filepath", "=", "join", "(", "dest_folderpath", ",", "temp_filename", ")", "# temporary filepath before renaming the file", "\n", "dest_filepath", "=", "join", "(", "dest_folderpath", ",", "new_filename", ")", "\n", "\n", "shutil", ".", "copy", "(", "src_filepath", ",", "dest_temp_filepath", ")", "\n", "rename", "(", "dest_temp_filepath", ",", "dest_filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run_continuous.run": [[20, 74], ["time.time", "os.path.join", "os.path.isfile", "print", "print", "time.sleep", "range", "print", "os.system", "eval", "print", "print", "run_continuous.rm_fingerprint", "print", "move_fingerprint.move_fingerprint", "print", "thymio.Thymio", "thymio.Thymio.run", "run_continuous.fetch_last_position", "print", "print", "time.time", "open", "os.path.isfile", "time.strftime", "line.rstrip", "len", "os.path.join", "time.gmtime", "fp.readlines", "len", "os.stat", "print"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run_continuous.rm_fingerprint", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_thymio.fetch_last_position"], ["def", "run", "(", ")", ":", "\n", "    ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "last_position", "=", "INITIAL_POSITION", "# (x,y) coordinates of the position where the Thymio last stopped", "\n", "\n", "# Inspect {THYMIO_POSITIONS_FILENAME}.txt to infer the Thymio's absolute position    ", "\n", "thymio_positions_filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", "\n", "positions", "=", "[", "]", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "thymio_positions_filepath", ")", ":", "\n", "        ", "with", "open", "(", "thymio_positions_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "print", "(", "'Already {} fingerprints found in {}/ \\n'", ".", "format", "(", "len", "(", "positions", ")", ",", "DEST_FOLDERPATH", ")", ")", "\n", "\n", "", "print", "(", "'Gathering {} fingerprints over {}cm \\n'", ".", "format", "(", "N_STEPS", ",", "DISTANCE_TO_TRAVEL", "*", "N_STEPS", ")", ")", "\n", "print", "(", "f'Wait {STARTING_TIMER}s before starting... \\n'", ")", "\n", "time", ".", "sleep", "(", "STARTING_TIMER", ")", "\n", "\n", "for", "step", "in", "range", "(", "N_STEPS", ")", ":", "\n", "        ", "print", "(", "'Fingerprint #{} in [{:.2f}, {:.2f}]'", ".", "format", "(", "step", "+", "len", "(", "positions", ")", ",", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "\n", "rm_fingerprint", "(", ")", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "os", ".", "path", ".", "isfile", "(", "'ce.txt'", ")", ":", "# check if ce.txt has reached {ce_filesize} MB", "\n", "                ", "size", "=", "os", ".", "stat", "(", "'ce.txt'", ")", ".", "st_size", "# size of filepath in Bytes", "\n", "if", "size", ">", "CE_FILESIZE", "*", "1e6", ":", "# ce_filesize in is MB, size in B", "\n", "                    ", "print", "(", "'\\t \\t ce.txt filesize ({:.2f} MB) limit ({} MB) reached'", ".", "format", "(", "size", "/", "1e6", ",", "CE_FILESIZE", ")", ")", "\n", "break", "\n", "\n", "", "", "", "print", "(", "'\\t- Move fingerprint'", ")", "\n", "move_fingerprint", "(", "x", "=", "last_position", "[", "0", "]", ",", "\n", "y", "=", "last_position", "[", "1", "]", ",", "\n", "src_folderpath", "=", "'./'", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ",", "\n", "verbose", "=", "False", ")", "\n", "\n", "print", "(", "'\\t- Move Thymio to '", ",", "end", "=", "''", ")", "\n", "thymio", "=", "Thymio", "(", "initial_position", "=", "last_position", ",", "\n", "distance_to_travel", "=", "DISTANCE_TO_TRAVEL", ",", "\n", "positions_filename", "=", "THYMIO_POSITIONS_FILENAME", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ")", "\n", "thymio", ".", "run", "(", ")", "\n", "last_position", "=", "fetch_last_position", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", ")", "\n", "print", "(", "'[{:.2f}, {:.2f}]'", ".", "format", "(", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n", "", "elapsed_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "'Script took {}'", ".", "format", "(", "time", ".", "strftime", "(", "'%H:%M:%S'", ",", "time", ".", "gmtime", "(", "elapsed_time", ")", ")", ")", ")", "\n", "\n", "# Warn user that the script has finished", "\n", "duration", "=", "10", "# seconds", "\n", "freq", "=", "880", "# Hz", "\n", "os", ".", "system", "(", "'play -nq -t alsa synth {} sine {}'", ".", "format", "(", "duration", ",", "freq", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run_continuous.rm_fingerprint": [[75, 79], ["subprocess.run", "subprocess.run", "subprocess.run"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run"], ["", "def", "rm_fingerprint", "(", ")", ":", "\n", "    ", "subprocess", ".", "run", "(", "'rm -f ce.txt'", ",", "shell", "=", "True", ")", "\n", "subprocess", ".", "run", "(", "'rm -f else.txt'", ",", "shell", "=", "True", ")", "\n", "subprocess", ".", "run", "(", "'rm -f info.txt'", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run_continuous.fetch_last_position": [[80, 95], ["eval", "open", "line.rstrip", "fp.readlines"], "function", ["None"], ["", "def", "fetch_last_position", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"Inspect {filepath}.txt to infer the Thymio's last absolute position, i.e. the last one appended    \n\n    Args:\n        filepath (str): Name of the file holding the positions where the Thymio stopped\n\n    Returns:\n        [List of floats]: (x,y) absolute coordinates of the Thymio's last stop\n    \"\"\"", "\n", "\n", "positions", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "return", "last_position", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.__init__": [[20, 54], ["dbus.mainloop.glib.DBusGMainLoop", "dbus.mainloop.glib.DBusGMainLoop", "dbus.mainloop.glib.DBusGMainLoop", "dbus.mainloop.glib.DBusGMainLoop", "dbus.SessionBus", "dbus.SessionBus", "dbus.SessionBus", "dbus.SessionBus", "dbus.Interface", "dbus.Interface", "dbus.Interface", "dbus.Interface", "gi.repository.GObject.timeout_add", "os.path.join", "copy.copy", "copy.copy", "dbus.SessionBus.get_object", "dbus.SessionBus.get_object", "os.path.isdir", "os.mkdir", "os.path.isfile", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "initial_position", ",", "distance_to_travel", ",", "positions_filename", ",", "dest_folderpath", ")", ":", "\n", "        ", "\"\"\"Initialize the Thymio instance with its initial position\n\n        Arguments:\n            initial_position {List of 2 floats} -- (x,y) coordinates of the initial position\n            distance_to_travel (float): distance [cm] forward the Thymio must travel\n            positions_filename (str): filename of the .txt holding the Thymio's past locations where it stopped\n            dest_folderpath (str): folderpath where to store {positions_filename}.txt\n        \"\"\"", "\n", "\n", "dbus", ".", "mainloop", ".", "glib", ".", "DBusGMainLoop", "(", "set_as_default", "=", "True", ")", "\n", "\n", "bus", "=", "dbus", ".", "SessionBus", "(", ")", "\n", "\n", "self", ".", "network", "=", "dbus", ".", "Interface", "(", "bus", ".", "get_object", "(", "'ch.epfl.mobots.Aseba'", ",", "'/'", ")", ",", "dbus_interface", "=", "'ch.epfl.mobots.AsebaNetwork'", ")", "\n", "\n", "# Schedule controller", "\n", "gobject", ".", "timeout_add", "(", "TIMESTEP", ",", "self", ".", "followLine", ")", "\n", "\n", "# Ensure {dest_folderpath}/ exists", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dest_folderpath", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "dest_folderpath", ")", "\n", "\n", "# Ensure {dest_folderpath/positions_filename}.txt exists", "\n", "", "self", ".", "positions_filepath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "'{}.txt'", ".", "format", "(", "positions_filename", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "self", ".", "positions_filepath", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "positions_filepath", ",", "'w'", ")", "as", "_", ":", "\n", "                ", "pass", "\n", "\n", "", "", "self", ".", "ground_sensors", "=", "[", "0", ",", "0", "]", "\n", "self", ".", "last_stopped_position", "=", "copy", ".", "copy", "(", "initial_position", ")", "# position when the Thymio last stopped", "\n", "self", ".", "current_position", "=", "copy", ".", "copy", "(", "initial_position", ")", "\n", "self", ".", "current_heading", "=", "0.0", "# start with 0 heading", "\n", "self", ".", "distance_to_travel", "=", "distance_to_travel", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.run": [[55, 58], ["gi.repository.GObject.MainLoop", "thymio.Thymio.loop.run"], "methods", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run"], ["", "def", "run", "(", "self", ")", ":", "\n", "        ", "self", ".", "loop", "=", "gobject", ".", "MainLoop", "(", ")", "\n", "self", ".", "loop", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.followLine": [[59, 91], ["thymio.Thymio.hasReachedDistance", "thymio.Thymio.updateGroundSensors", "thymio.Thymio.network.SetVariable", "thymio.Thymio.network.SetVariable", "thymio.Thymio.updatePose", "thymio.Thymio.saveCurrentPosition", "thymio.Thymio.network.SetVariable", "thymio.Thymio.network.SetVariable", "thymio.Thymio.loop.quit", "min", "abs", "min", "abs"], "methods", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.hasReachedDistance", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.updateGroundSensors", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.updatePose", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.saveCurrentPosition"], ["", "def", "followLine", "(", "self", ")", ":", "\n", "        ", "\"\"\"Follow the line for one TIMESTEP\"\"\"", "\n", "\n", "if", "self", ".", "hasReachedDistance", "(", ")", ":", "\n", "            ", "self", ".", "saveCurrentPosition", "(", "self", ".", "positions_filepath", ")", "\n", "\n", "self", ".", "network", ".", "SetVariable", "(", "\"thymio-II\"", ",", "\"motor.left.target\"", ",", "[", "0", "]", ")", "\n", "self", ".", "network", ".", "SetVariable", "(", "\"thymio-II\"", ",", "\"motor.right.target\"", ",", "[", "0", "]", ")", "\n", "self", ".", "loop", ".", "quit", "(", ")", "\n", "return", "\n", "\n", "", "self", ".", "updateGroundSensors", "(", ")", "\n", "\n", "motor_left_target", "=", "SPEED", "\n", "motor_right_target", "=", "SPEED", "\n", "if", "self", ".", "ground_sensors", "[", "0", "]", ">", "MOTOR_LEFT_TRESH", ":", "\n", "            ", "delta_speed", "=", "abs", "(", "self", ".", "ground_sensors", "[", "0", "]", "-", "900", ")", "*", "P_GAIN", "\n", "delta_speed", "=", "min", "(", "delta_speed", ",", "100", ")", "\n", "motor_left_target", "+=", "delta_speed", "\n", "motor_right_target", "-=", "delta_speed", "\n", "", "elif", "self", ".", "ground_sensors", "[", "1", "]", ">", "MOTOR_RIGHT_TRESH", ":", "\n", "            ", "delta_speed", "=", "abs", "(", "self", ".", "ground_sensors", "[", "1", "]", "-", "950", ")", "*", "P_GAIN", "*", "2", "# TODO clean this x2  ", "\n", "delta_speed", "=", "min", "(", "delta_speed", ",", "100", ")", "\n", "motor_left_target", "-=", "delta_speed", "\n", "motor_right_target", "+=", "delta_speed", "\n", "\n", "", "self", ".", "network", ".", "SetVariable", "(", "\"thymio-II\"", ",", "\"motor.left.target\"", ",", "[", "motor_left_target", "]", ")", "\n", "self", ".", "network", ".", "SetVariable", "(", "\"thymio-II\"", ",", "\"motor.right.target\"", ",", "[", "motor_right_target", "]", ")", "\n", "\n", "self", ".", "updatePose", "(", "motor_left_target", ",", "motor_right_target", ")", "\n", "\n", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.updatePose": [[92, 109], ["math.cos", "math.sin"], "methods", ["None"], ["", "def", "updatePose", "(", "self", ",", "motor_left_target", ",", "motor_right_target", ")", ":", "\n", "# Convert motor speeds to [rad/s]", "\n", "        ", "motor_left_target_rads", "=", "motor_left_target", "*", "SPEED_UNIT_TO_RADS_CONVERTION", "\n", "motor_right_target_rads", "=", "motor_right_target", "*", "SPEED_UNIT_TO_RADS_CONVERTION", "\n", "\n", "# Compute relative speed (with respect to the current heading) (xR_dot [cm/s] and heading_dot [rad/s])", "\n", "xR_dot", "=", "WHEEL_RADIUS", "*", "(", "motor_left_target_rads", "+", "motor_right_target_rads", ")", "/", "2", "# note that yR_dot == 0", "\n", "heading_dot", "=", "WHEEL_RADIUS", "/", "(", "4", "*", "AXLE_LENGTH", ")", "*", "(", "motor_left_target_rads", "-", "motor_right_target_rads", ")", "\n", "\n", "# Move to absolute reference frame", "\n", "xI_dot", "=", "math", ".", "cos", "(", "self", ".", "current_heading", ")", "*", "xR_dot", "\n", "yI_dot", "=", "math", ".", "sin", "(", "self", ".", "current_heading", ")", "*", "xR_dot", "\n", "\n", "# Update current pose", "\n", "self", ".", "current_position", "[", "0", "]", "+=", "xI_dot", "*", "TIMESTEP", "/", "1e3", "# /1e3 since TIMESTEP is in [ms]", "\n", "self", ".", "current_position", "[", "1", "]", "+=", "yI_dot", "*", "TIMESTEP", "/", "1e3", "\n", "self", ".", "current_heading", "+=", "heading_dot", "*", "TIMESTEP", "/", "1e3", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.updateGroundSensors": [[110, 112], ["thymio.Thymio.network.GetVariable"], "methods", ["None"], ["", "def", "updateGroundSensors", "(", "self", ")", ":", "\n", "        ", "self", ".", "network", ".", "GetVariable", "(", "\"thymio-II\"", ",", "'prox.ground.delta'", ",", "reply_handler", "=", "self", ".", "variablesReply", ",", "error_handler", "=", "self", ".", "variablesError", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.variablesReply": [[113, 116], ["list", "map"], "methods", ["None"], ["", "def", "variablesReply", "(", "self", ",", "r", ")", ":", "\n", "# print('Reply:', r)", "\n", "        ", "self", ".", "ground_sensors", "=", "list", "(", "map", "(", "int", ",", "r", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.variablesError": [[117, 119], ["print"], "methods", ["None"], ["", "def", "variablesError", "(", "self", ",", "e", ")", ":", "\n", "        ", "print", "(", "'Error:'", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.dbusReply": [[120, 122], ["None"], "methods", ["None"], ["", "def", "dbusReply", "(", "self", ",", "r", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.dbusError": [[123, 125], ["print"], "methods", ["None"], ["", "def", "dbusError", "(", "self", ",", "e", ")", ":", "\n", "        ", "print", "(", "'DBUS Error:'", ",", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.hasReachedDistance": [[126, 133], ["math.sqrt"], "methods", ["None"], ["", "def", "hasReachedDistance", "(", "self", ")", ":", "\n", "        ", "last_stopped_x", ",", "last_stopped_y", "=", "self", ".", "last_stopped_position", "\n", "current_x", ",", "current_y", "=", "self", ".", "current_position", "\n", "\n", "distance_covered", "=", "math", ".", "sqrt", "(", "(", "current_x", "-", "last_stopped_x", ")", "**", "2", "+", "(", "current_y", "-", "last_stopped_y", ")", "**", "2", ")", "\n", "\n", "return", "distance_covered", ">", "self", ".", "distance_to_travel", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.getCurrentPosition": [[134, 136], ["None"], "methods", ["None"], ["", "def", "getCurrentPosition", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "current_position", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.thymio.Thymio.saveCurrentPosition": [[137, 146], ["open", "open", "positions.append", "fp.writelines", "line.rstrip", "fp.readlines", "float", "float"], "methods", ["None"], ["", "def", "saveCurrentPosition", "(", "self", ",", "filepath", ")", ":", "\n", "        ", "positions", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "\n", "", "with", "open", "(", "filepath", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "x", ",", "y", "=", "self", ".", "current_position", "\n", "positions", ".", "append", "(", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", ")", "\n", "fp", ".", "writelines", "(", "\"{}\\n\"", ".", "format", "(", "position", ")", "for", "position", "in", "positions", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run": [[19, 57], ["os.path.join", "os.path.isfile", "print", "print", "time.sleep", "range", "eval", "print", "print", "print", "record_fingerprint.record_fingerprint", "print", "move_fingerprint.move_fingerprint", "print", "thymio.Thymio", "thymio.Thymio.run", "run.fetch_last_position", "print", "print", "open", "line.rstrip", "len", "os.path.join", "fp.readlines", "len"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.record_fingerprint", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_thymio.fetch_last_position"], ["def", "run", "(", ")", ":", "\n", "    ", "last_position", "=", "INITIAL_POSITION", "# (x,y) coordinates of the position where the Thymio last stopped", "\n", "\n", "# Inspect {THYMIO_POSITIONS_FILENAME}.txt to infer the Thymio's absolute position    ", "\n", "thymio_positions_filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", "\n", "positions", "=", "[", "]", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "thymio_positions_filepath", ")", ":", "\n", "        ", "with", "open", "(", "thymio_positions_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "print", "(", "'Already {} fingerprints found in {}/ \\n'", ".", "format", "(", "len", "(", "positions", ")", ",", "DEST_FOLDERPATH", ")", ")", "\n", "\n", "", "print", "(", "'Gathering {} fingerprints over {}cm \\n'", ".", "format", "(", "N_STEPS", ",", "DISTANCE_TO_TRAVEL", "*", "N_STEPS", ")", ")", "\n", "print", "(", "f'Wait {STARTING_TIMER}s before starting... \\n'", ")", "\n", "time", ".", "sleep", "(", "STARTING_TIMER", ")", "\n", "\n", "for", "step", "in", "range", "(", "N_STEPS", ")", ":", "\n", "        ", "print", "(", "'Fingerprint #{} in [{:.2f}, {:.2f}]'", ".", "format", "(", "step", "+", "len", "(", "positions", ")", ",", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "print", "(", "'\\t- Record fingerprint'", ")", "\n", "record_fingerprint", "(", "SRSUE_CONF_FILEPATH", ",", "CE_FILEPATH", ",", "CE_FILESIZE", ")", "\n", "\n", "print", "(", "'\\t- Move fingerprint'", ")", "\n", "move_fingerprint", "(", "x", "=", "last_position", "[", "0", "]", ",", "\n", "y", "=", "last_position", "[", "1", "]", ",", "\n", "src_folderpath", "=", "'./'", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ",", "\n", "verbose", "=", "False", ")", "\n", "\n", "print", "(", "'\\t- Move Thymio to '", ",", "end", "=", "''", ")", "\n", "thymio", "=", "Thymio", "(", "initial_position", "=", "last_position", ",", "\n", "distance_to_travel", "=", "DISTANCE_TO_TRAVEL", ",", "\n", "positions_filename", "=", "THYMIO_POSITIONS_FILENAME", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ")", "\n", "thymio", ".", "run", "(", ")", "\n", "last_position", "=", "fetch_last_position", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", ")", "\n", "print", "(", "'[{:.2f}, {:.2f}]'", ".", "format", "(", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "print", "(", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.fetch_last_position": [[59, 74], ["eval", "open", "line.rstrip", "fp.readlines"], "function", ["None"], ["", "", "def", "fetch_last_position", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"Inspect {filepath}.txt to infer the Thymio's last absolute position, i.e. the last one appended    \n\n    Args:\n        filepath (str): Name of the file holding the positions where the Thymio stopped\n\n    Returns:\n        [List of floats]: (x,y) absolute coordinates of the Thymio's last stop\n    \"\"\"", "\n", "\n", "positions", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "return", "last_position", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint_clickwrapper": [[17, 27], ["click.command", "click.option", "click.option", "click.option", "click.option", "click.option", "move_fingerprint.move_fingerprint"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--x'", ",", "prompt", "=", "'x-coordinate where the fingerprint was taken'", ")", "\n", "@", "click", ".", "option", "(", "'--y'", ",", "prompt", "=", "'y-coordinate where the fingerprint was taken'", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "default", "=", "'../srsLTE-modified/srsue'", ",", "help", "=", "'Folderpath where the fingerprint files (ce.txt, else.txt, info.txt) are located'", ")", "\n", "@", "click", ".", "option", "(", "'--dest_folderpath'", ",", "default", "=", "'dev'", ",", "help", "=", "'Folderpath where the ce, else and info folder will be located'", ")", "\n", "@", "click", ".", "option", "(", "'--verbose'", ",", "'-V'", ",", "default", "=", "True", ")", "\n", "def", "move_fingerprint_clickwrapper", "(", "x", ",", "y", ",", "src_folderpath", ",", "dest_folderpath", ",", "verbose", ")", ":", "\n", "    ", "\"\"\" Wrapper for click functionality\n    \"\"\"", "\n", "move_fingerprint", "(", "x", ",", "y", ",", "src_folderpath", ",", "dest_folderpath", ",", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint": [[28, 90], ["move_fingerprint.log", "move_fingerprint.log", "move_fingerprint.log", "move_fingerprint.ensure_dest_dir_structure", "move_fingerprint.get_fingerprint_id", "move_fingerprint.log", "move_fingerprint.log", "os.path.join", "os.path.join", "os.path.join", "move_fingerprint.move", "move_fingerprint.log", "os.path.join", "os.path.join", "move_fingerprint.move", "move_fingerprint.log", "os.path.join", "os.path.join", "move_fingerprint.move", "move_fingerprint.log", "move_fingerprint.log", "open", "json.load", "open", "json.dump", "float", "float"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.ensure_dest_dir_structure", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.get_fingerprint_id", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log"], ["", "def", "move_fingerprint", "(", "x", ",", "y", ",", "src_folderpath", ",", "dest_folderpath", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"Move {CE_FILENAME}.txt, {ELSE_FILENAME}.txt and {INFO_FILENAME}.txt to dest_folderpath for safe-keeping.\n    A unique ID is assigned to the three files (one ID per triplet of files).\n    The mapping between the ID and the (x,y) coordinates is logged in the {LOCATIONS_FILENAME}.json file\n\n    Arguments:\n        x {float} -- x-coordinate where the fingerprint was taken\n        y {float} -- y-coordinate where the fingerprint was taken\n        src_folderpath {str} -- Folderpath where the fingerprint files (ce.txt, else.txt, info.txt) are located\n        dest_folderpath {str} -- Folderpath where the ce, else and info folder will be located\n        verbose {bool} -- Whether or not to enable printing\n    \"\"\"", "\n", "\n", "log", "(", "''", ",", "verbose", "=", "verbose", ")", "\n", "log", "(", "'Moving fingerprint located at ({}, {})\\n'", ".", "format", "(", "x", ",", "y", ")", ",", "verbose", "=", "verbose", ")", "\n", "\n", "log", "(", "'- Ensure destination folder structure'", ",", "verbose", "=", "verbose", ")", "\n", "ensure_dest_dir_structure", "(", "dest_folderpath", ",", "\n", "ce_foldername", "=", "CE_FOLDERNAME", ",", "\n", "else_foldername", "=", "ELSE_FOLDERNAME", ",", "\n", "info_foldername", "=", "INFO_FOLDERNAME", ",", "\n", "locations_filename", "=", "LOCATIONS_FILENAME", ",", "\n", "verbose", "=", "verbose", ")", "\n", "fingerprint_id", "=", "get_fingerprint_id", "(", "dest_folderpath", ",", "LOCATIONS_FILENAME", ")", "\n", "log", "(", "''", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Move {CE_FILENAME}.txt", "\n", "log", "(", "'- Move {}.txt'", ".", "format", "(", "CE_FILENAME", ")", ",", "verbose", "=", "verbose", ")", "\n", "src_ce_filename", "=", "'{}.txt'", ".", "format", "(", "CE_FILENAME", ")", "\n", "src_ce_filepath", "=", "os", ".", "path", ".", "join", "(", "src_folderpath", ",", "src_ce_filename", ")", "\n", "dest_ce_folderpath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "'ce'", ")", "\n", "dest_ce_filepath", "=", "os", ".", "path", ".", "join", "(", "dest_ce_folderpath", ",", "'{}_{}_raw.txt'", ".", "format", "(", "CE_FILENAME", ",", "fingerprint_id", ")", ")", "\n", "move", "(", "src_ce_filepath", ",", "dest_ce_filepath", ",", "verbose", "=", "verbose", ")", "\n", "\n", "\n", "# Move {ELSE_FILENAME}.txt", "\n", "log", "(", "'- Move {}.txt'", ".", "format", "(", "ELSE_FILENAME", ")", ",", "verbose", "=", "verbose", ")", "\n", "src_else_filename", "=", "'{}.txt'", ".", "format", "(", "ELSE_FILENAME", ")", "\n", "src_else_filepath", "=", "os", ".", "path", ".", "join", "(", "src_folderpath", ",", "src_else_filename", ")", "\n", "dest_else_filepath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "'else/{}_{}_raw.txt'", ".", "format", "(", "ELSE_FILENAME", ",", "fingerprint_id", ")", ")", "\n", "move", "(", "src_else_filepath", ",", "dest_else_filepath", ",", "verbose", "=", "verbose", ")", "\n", "\n", "\n", "# Move {INFO_FILENAME}.txt", "\n", "log", "(", "'- Move {}.txt'", ".", "format", "(", "INFO_FILENAME", ")", ",", "verbose", "=", "verbose", ")", "\n", "src_info_filename", "=", "'{}.txt'", ".", "format", "(", "INFO_FILENAME", ")", "\n", "src_info_filepath", "=", "os", ".", "path", ".", "join", "(", "src_folderpath", ",", "src_info_filename", ")", "\n", "dest_info_filepath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "'info/{}_{}_raw.txt'", ".", "format", "(", "INFO_FILENAME", ",", "fingerprint_id", ")", ")", "\n", "move", "(", "src_info_filepath", ",", "dest_info_filepath", ",", "verbose", "=", "verbose", ")", "\n", "\n", "\n", "# Add the saved fingerprint id to the {LOCATIONS_FILENAME}.json to keep track of its locations", "\n", "log", "(", "'- Add {}: ({}, {}) to {}.json'", ".", "format", "(", "fingerprint_id", ",", "x", ",", "y", ",", "LOCATIONS_FILENAME", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "locations", "=", "{", "}", "\n", "with", "open", "(", "'{}/{}.json'", ".", "format", "(", "dest_folderpath", ",", "LOCATIONS_FILENAME", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "locations", "=", "json", ".", "load", "(", "fp", ")", "\n", "\n", "", "with", "open", "(", "'{}/{}.json'", ".", "format", "(", "dest_folderpath", ",", "LOCATIONS_FILENAME", ")", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "locations", "[", "fingerprint_id", "]", "=", "[", "float", "(", "x", ")", ",", "float", "(", "y", ")", "]", "\n", "json", ".", "dump", "(", "locations", ",", "fp", ")", "\n", "\n", "", "log", "(", "'\\t Done\\n'", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.ensure_dest_dir_structure": [[91, 147], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.mkdir", "os.chmod", "os.path.isdir", "move_fingerprint.log", "os.mkdir", "os.chmod", "move_fingerprint.log", "os.path.isdir", "move_fingerprint.log", "os.mkdir", "os.chmod", "move_fingerprint.log", "os.path.isdir", "move_fingerprint.log", "os.mkdir", "os.chmod", "move_fingerprint.log", "os.path.isfile", "move_fingerprint.log", "move_fingerprint.log", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log"], ["", "def", "ensure_dest_dir_structure", "(", "dest_folderpath", ",", "ce_foldername", ",", "else_foldername", ",", "info_foldername", ",", "locations_filename", ",", "verbose", ")", ":", "\n", "    ", "\"\"\"Ensure that the destination directory has the following structure:\n    dest_folderpath/\n        ce_foldername/\n        else_foldername/\n        info_foldername/\n        {locations_filename}.json\n\n    If dest_folder is missing a directory or {locations_filename}.json, \n    then the missing directory/file is created\n\n    Arguments:\n        dest_folderpath {str} -- Folderpath to the destination folder\n        ce_foldername {str} -- Name of the folder holding the ce data (i.e. channel estimate)\n        else_foldername {str} -- Name of the folder holding the else data (i.e. RSRP, RSRQ, ...)\n        info_foldername {str} -- Name of the folder holding the info data (i.e. PCI, ...)\n        locations_filename {str} -- Name of the file holding the locations JSON data\n    \"\"\"", "\n", "# Ensure dest_folderpath exists", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dest_folderpath", ")", ":", "\n", "\n", "        ", "os", ".", "mkdir", "(", "dest_folderpath", ")", "\n", "os", ".", "chmod", "(", "dest_folderpath", ",", "0o777", ")", "# set folder permission ", "\n", "\n", "# Ensure ce_foldername exists", "\n", "", "dest_ce_folderpath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "ce_foldername", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dest_ce_folderpath", ")", ":", "\n", "        ", "log", "(", "'\\t - {}/: '", ".", "format", "(", "dest_ce_folderpath", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "os", ".", "mkdir", "(", "dest_ce_folderpath", ")", "\n", "os", ".", "chmod", "(", "dest_ce_folderpath", ",", "0o777", ")", "# set folder permission ", "\n", "log", "(", "'Created'", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Ensure else_foldername exists", "\n", "", "dest_else_folderpath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "else_foldername", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dest_else_folderpath", ")", ":", "\n", "        ", "log", "(", "'\\t - {}/: '", ".", "format", "(", "dest_else_folderpath", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "os", ".", "mkdir", "(", "dest_else_folderpath", ")", "\n", "os", ".", "chmod", "(", "dest_else_folderpath", ",", "0o777", ")", "# set folder permission ", "\n", "log", "(", "'Created'", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Ensure info_foldername exists", "\n", "", "dest_info_folderpath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "info_foldername", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "dest_info_folderpath", ")", ":", "\n", "        ", "log", "(", "'\\t - {}/: '", ".", "format", "(", "dest_info_folderpath", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "os", ".", "mkdir", "(", "dest_info_folderpath", ")", "\n", "os", ".", "chmod", "(", "dest_info_folderpath", ",", "0o777", ")", "# set folder permission ", "\n", "log", "(", "'Created'", ",", "verbose", "=", "verbose", ")", "\n", "\n", "# Ensure {locations_filename}.json exists", "\n", "", "locations_filepath", "=", "os", ".", "path", ".", "join", "(", "dest_folderpath", ",", "'{}.json'", ".", "format", "(", "locations_filename", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "locations_filepath", ")", ":", "\n", "        ", "log", "(", "'\\t - {}: '", ".", "format", "(", "locations_filepath", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "locations", "=", "{", "}", "\n", "with", "open", "(", "locations_filepath", ",", "'w'", ")", "as", "fp", ":", "\n", "            ", "json", ".", "dump", "(", "locations", ",", "fp", ")", "\n", "", "log", "(", "'Created'", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.get_fingerprint_id": [[148, 166], ["open", "json.load", "sorted", "map", "len", "list", "int", "json.load.keys"], "function", ["None"], ["", "", "def", "get_fingerprint_id", "(", "dest_folderpath", ",", "locations_filename", ")", ":", "\n", "    ", "\"\"\"Lookup the {locations_filename}.json to see which fingerprint ID is available.\n    Starts with 0 and increment by 1\n\n    Arguments:\n        dest_folderpath {str} -- Folderpath to the destination folder\n        locations_filename {str} -- Filename of the JSON file holding the locations data\n\n    Returns:\n        fingerprint_id {int} -- Unique ID linked to a fingerprint\n    \"\"\"", "\n", "with", "open", "(", "'{}/{}.json'", ".", "format", "(", "dest_folderpath", ",", "locations_filename", ")", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "locations", "=", "json", ".", "load", "(", "fp", ")", "\n", "fingerprint_ids", "=", "sorted", "(", "map", "(", "int", ",", "list", "(", "locations", ".", "keys", "(", ")", ")", ")", ")", "\n", "if", "len", "(", "fingerprint_ids", ")", ">", "0", ":", "\n", "            ", "return", "int", "(", "fingerprint_ids", "[", "-", "1", "]", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move": [[167, 171], ["move_fingerprint.log", "shutil.move", "move_fingerprint.log"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log"], ["", "", "", "def", "move", "(", "src", ",", "dest", ",", "verbose", ")", ":", "\n", "    ", "log", "(", "'\\t Move {} to {}'", ".", "format", "(", "src", ",", "dest", ")", ",", "end", "=", "''", ",", "verbose", "=", "verbose", ")", "\n", "shutil", ".", "move", "(", "src", ",", "dest", ")", "\n", "log", "(", "'\\t Done\\n'", ",", "verbose", "=", "verbose", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.log": [[172, 175], ["print"], "function", ["None"], ["", "def", "log", "(", "string", ",", "verbose", ",", "end", "=", "'\\n'", ")", ":", "\n", "    ", "if", "verbose", ":", "\n", "        ", "print", "(", "string", ",", "end", "=", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_thymio.test_thymio": [[13, 38], ["os.path.join", "os.path.isfile", "print", "range", "eval", "print", "time.sleep", "thymio.Thymio", "thymio.Thymio.run", "test_thymio.fetch_last_position", "print", "print", "time.sleep", "open", "line.rstrip", "os.path.join", "fp.readlines"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_thymio.fetch_last_position"], ["def", "test_thymio", "(", ")", ":", "\n", "    ", "last_position", "=", "INITIAL_POSITION", "# (x,y) coordinates of the position where the Thymio last stopped", "\n", "\n", "# Inspect {THYMIO_POSITIONS_FILENAME}.txt to infer the Thymio's absolute position    ", "\n", "thymio_positions_filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "thymio_positions_filepath", ")", ":", "\n", "        ", "positions", "=", "[", "]", "\n", "with", "open", "(", "thymio_positions_filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "\n", "", "print", "(", "'Moving {}cm ({}cm increments) from [{:.2f}, {:.2f}] \\n'", ".", "format", "(", "DISTANCE_TO_TRAVEL", "*", "N_STEPS", ",", "DISTANCE_TO_TRAVEL", ",", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "\n", "for", "step", "in", "range", "(", "N_STEPS", ")", ":", "\n", "        ", "print", "(", "f'- #{step} Move Thymio to '", ",", "end", "=", "''", ")", "\n", "time", ".", "sleep", "(", "0.1", ")", "\n", "thymio", "=", "Thymio", "(", "initial_position", "=", "last_position", ",", "\n", "distance_to_travel", "=", "DISTANCE_TO_TRAVEL", ",", "\n", "positions_filename", "=", "THYMIO_POSITIONS_FILENAME", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ")", "\n", "thymio", ".", "run", "(", ")", "\n", "last_position", "=", "fetch_last_position", "(", "filepath", "=", "os", ".", "path", ".", "join", "(", "DEST_FOLDERPATH", ",", "f'{THYMIO_POSITIONS_FILENAME}.txt'", ")", ")", "\n", "print", "(", "'[{:.2f}, {:.2f}]'", ".", "format", "(", "last_position", "[", "0", "]", ",", "last_position", "[", "1", "]", ")", ")", "\n", "print", "(", "''", ")", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_thymio.fetch_last_position": [[39, 54], ["eval", "open", "line.rstrip", "fp.readlines"], "function", ["None"], ["", "", "def", "fetch_last_position", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"Inspect {filepath}.txt to infer the Thymio's last absolute position, i.e. the last one appended    \n\n    Args:\n        filepath (str): Name of the file holding the positions where the Thymio stopped\n\n    Returns:\n        [List of floats]: (x,y) absolute coordinates of the Thymio's last stop\n    \"\"\"", "\n", "\n", "positions", "=", "[", "]", "\n", "with", "open", "(", "filepath", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "positions", "=", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "fp", ".", "readlines", "(", ")", "]", "\n", "", "last_position", "=", "eval", "(", "positions", "[", "-", "1", "]", ")", "\n", "return", "last_position", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.record_fingerprint": [[10, 54], ["subprocess.run", "subprocess.run", "subprocess.run", "time.perf_counter", "record_fingerprint.start_recording", "record_fingerprint.stop_recording", "time.sleep", "time.sleep", "os.path.isfile", "print", "time.perf_counter", "time.perf_counter", "print", "print", "os.stat", "print"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.start_recording", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.stop_recording"], ["def", "record_fingerprint", "(", "conf_filepath", ",", "ce_filepath", ",", "ce_filesize", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"Record a fingerprint by running `sudo srsue {conf_filepath}` for {duration} seconds\n    \n    Arguments:\n        conf_filepath [str] -- Filepath to `ue.conf`\n        ce_filepath [str] -- Filename to the file holding the ce fingerprint (typically ce.txt)\n        ce_filesize [float] -- Size [MB] of the ce.txt before stopping the fingerprint's recording\n        verbose [bool] -- whether to be verbose\n    \"\"\"", "\n", "\n", "subprocess", ".", "run", "(", "'touch ./ce.txt'", ",", "shell", "=", "True", ")", "\n", "subprocess", ".", "run", "(", "'touch ./else.txt'", ",", "shell", "=", "True", ")", "\n", "subprocess", ".", "run", "(", "'touch ./info.txt'", ",", "shell", "=", "True", ")", "\n", "\n", "fingerprint_is_recorded", "=", "False", "\n", "give_up", "=", "False", "\n", "n_recording_try", "=", "0", "\n", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "while", "(", "not", "fingerprint_is_recorded", ")", "and", "(", "not", "give_up", ")", ":", "\n", "        ", "start_recording", "(", "conf_filepath", "=", "conf_filepath", ",", "verbose", "=", "verbose", ")", "\n", "n_recording_try", "+=", "1", "\n", "\n", "while", "True", ":", "\n", "            ", "if", "time", ".", "perf_counter", "(", ")", "-", "start_time", ">", "RECORDING_TIMEOUT", ":", "# check if RECORDING_TIMEOUT has elapsed since we last started to try recording a fingerprint", "\n", "                ", "print", "(", "f'\\t \\t Timeout ({RECORDING_TIMEOUT}s) reached'", ")", "\n", "if", "n_recording_try", "<", "N_RECORDING_TRY_UPPER_LIMIT", ":", "\n", "                    ", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n", "print", "(", "'\\t \\t Trying again...'", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'\\t \\t Giving up...'", ")", "\n", "give_up", "=", "True", "\n", "", "break", "\n", "\n", "", "time", ".", "sleep", "(", "0.5", ")", "\n", "\n", "if", "os", ".", "path", ".", "isfile", "(", "ce_filepath", ")", ":", "# check if ce.txt has reached {ce_filesize} MB", "\n", "                ", "size", "=", "os", ".", "stat", "(", "ce_filepath", ")", ".", "st_size", "# size of filepath in Bytes", "\n", "if", "size", ">", "ce_filesize", "*", "1e6", ":", "# ce_filesize in is MB, size in B", "\n", "                    ", "print", "(", "'\\t \\t ce.txt filesize ({:.2f} MB) limit ({} MB) reached'", ".", "format", "(", "size", "/", "1e6", ",", "ce_filesize", ")", ")", "\n", "fingerprint_is_recorded", "=", "True", "\n", "break", "\n", "\n", "", "", "", "stop_recording", "(", ")", "\n", "time", ".", "sleep", "(", "CLOSING_SRSLTE_TIMEOUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.start_recording": [[55, 61], ["subprocess.run", "subprocess.run"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run"], ["", "", "def", "start_recording", "(", "conf_filepath", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "command", "=", "f'sudo ./record_fingerprint.sh {conf_filepath}'", "\n", "if", "verbose", ":", "\n", "        ", "subprocess", ".", "run", "(", "command", ",", "shell", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "subprocess", ".", "run", "(", "command", ",", "stdout", "=", "subprocess", ".", "DEVNULL", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.stop_recording": [[62, 65], ["subprocess.run"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.run.run"], ["", "", "def", "stop_recording", "(", ")", ":", "\n", "    ", "command", "=", "'sudo pkill -INT srsue'", "\n", "subprocess", ".", "run", "(", "command", ",", "stdout", "=", "subprocess", ".", "DEVNULL", ",", "stderr", "=", "subprocess", ".", "DEVNULL", ",", "shell", "=", "True", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.test_fingerprint.test_fingerprint": [[13, 23], ["print", "record_fingerprint.record_fingerprint", "print", "move_fingerprint.move_fingerprint"], "function", ["home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.record_fingerprint.record_fingerprint", "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.None.move_fingerprint.move_fingerprint"], ["def", "test_fingerprint", "(", ")", ":", "\n", "    ", "print", "(", "'- Record fingerprint'", ")", "\n", "record_fingerprint", "(", "SRSUE_CONF_FILEPATH", ",", "CE_FILEPATH", ",", "CE_FILESIZE", ",", "verbose", "=", "True", ")", "\n", "\n", "print", "(", "'- Move fingerprint'", ")", "\n", "move_fingerprint", "(", "x", "=", "FAKE_POSITION", "[", "0", "]", ",", "\n", "y", "=", "FAKE_POSITION", "[", "1", "]", ",", "\n", "src_folderpath", "=", "'./'", ",", "\n", "dest_folderpath", "=", "DEST_FOLDERPATH", ",", "\n", "verbose", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.visualization.plot_fingerprints_heatmap.plot_fingerprints_heatmap": [[16, 65], ["click.command", "click.option", "click.option", "os.path.join", "list", "numpy.argsort", "numpy.sort", "list", "numpy.full", "enumerate", "matplotlib.subplots", "enumerate", "matplotlib.suptitle", "axes[].set_xlabel", "matplotlib.savefig", "matplotlib.close", "print", "map", "pandas.read_parquet", "[].to_numpy", "seaborn.heatmap", "ax.set_ylabel", "matplotlib.xticks", "os.path.join", "f.split", "os.listdir", "numpy.array", "len", "os.path.join", "numpy.log10", "len", "int", "numpy.arange", "int", "len", "f.split", "pd.read_parquet.groupby().mean", "len", "x.split", "pd.read_parquet.groupby"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the ce, else and info folder are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--n_fingerprints'", ",", "prompt", "=", "'How many fingerprints to plot'", ",", "default", "=", "10", ")", "\n", "def", "plot_fingerprints_heatmap", "(", "src_folderpath", ",", "n_fingerprints", ")", ":", "\n", "    ", "\"\"\"Plot a {N_TTI_TO_PLOT} samples of the channel estimates' amplitude located in src_folderpath/CE_FOLDERNAME as a heatmap\n    The plot is saved in src_folderpath \n\n    Arguments:\n        src_folderpath {str} -- Source folder where the CE_FOLDERNAME, ELSE_FOLDERNAME and INFO_FOLDERNAME folder are located\n        n_fingerprints {int} -- How many fingerprints to plot\n    \"\"\"", "\n", "\n", "src_ce_folderpath", "=", "join", "(", "src_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "\n", "cleaned_ce_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'parquet'", "]", "# list all .parquet file in ce_folderpath", "\n", "\n", "# put the fingerprints in ascending order of IDs (i.e. ['ce_0', 'ce_1', ...])", "\n", "fingerprint_ids", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ",", "cleaned_ce_files", ")", ")", "\n", "argsort", "=", "np", ".", "argsort", "(", "fingerprint_ids", ")", "\n", "fingerprint_ids", "=", "np", ".", "sort", "(", "fingerprint_ids", ")", "\n", "cleaned_ce_files", "=", "list", "(", "np", ".", "array", "(", "cleaned_ce_files", ")", "[", "argsort", "]", ")", "\n", "\n", "cleaned_ce_files", "=", "cleaned_ce_files", "[", ":", "n_fingerprints", "]", "# only keep n_fingerprints", "\n", "fingerprint_ids", "=", "fingerprint_ids", "[", ":", "n_fingerprints", "]", "\n", "\n", "# Average each fingerprint over its recording time", "\n", "ce_space", "=", "np", ".", "full", "(", "(", "N_SUBCARRIERS", ",", "4", ",", "len", "(", "cleaned_ce_files", ")", ")", ",", "np", ".", "nan", ")", "# will hold the ce as it changes through space", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "cleaned_ce_files", ")", ":", "\n", "        ", "ce_df", "=", "pd", ".", "read_parquet", "(", "join", "(", "src_ce_folderpath", ",", "'{}.parquet'", ".", "format", "(", "f", ")", ")", ")", "\n", "ce_mean_amplitude", "=", "ce_df", ".", "groupby", "(", "'SC_ID'", ")", ".", "mean", "(", ")", "[", "[", "'CE_0_AMPLITUDE'", ",", "'CE_1_AMPLITUDE'", ",", "'CE_2_AMPLITUDE'", ",", "'CE_3_AMPLITUDE'", "]", "]", ".", "to_numpy", "(", ")", "# shape [400, 4]", "\n", "ce_space", "[", ":", ",", ":", ",", "i", "]", "=", "20", "*", "np", ".", "log10", "(", "ce_mean_amplitude", ")", "\n", "\n", "# Plot one heatmap per port", "\n", "", "_", ",", "axes", "=", "plt", ".", "subplots", "(", "4", ",", "1", ",", "figsize", "=", "(", "25", ",", "10", ")", ",", "sharex", "=", "True", ")", "\n", "for", "port", ",", "ax", "in", "enumerate", "(", "axes", ")", ":", "\n", "        ", "sns", ".", "heatmap", "(", "ce_space", "[", ":", ",", "port", ",", ":", "]", ",", "cbar_kws", "=", "{", "'label'", ":", "'CSI amplitude [dB]'", "}", ",", "ax", "=", "ax", ",", "center", "=", "0", ")", "\n", "ax", ".", "set_ylabel", "(", "f'Port #{port+1}'", ",", "fontsize", "=", "14", ")", "\n", "step", "=", "1", "\n", "if", "len", "(", "fingerprint_ids", ")", ">", "20", ":", "\n", "            ", "step", "=", "int", "(", "len", "(", "fingerprint_ids", ")", "/", "10", ")", "\n", "", "plt", ".", "xticks", "(", "np", ".", "arange", "(", "len", "(", "fingerprint_ids", ")", ",", "step", "=", "step", ")", ",", "fingerprint_ids", "[", ":", ":", "step", "]", ")", "\n", "\n", "", "plt", ".", "suptitle", "(", "'Heatmap of the average CSI amplitude for consecutive fingerprint IDs'", ",", "fontsize", "=", "18", ")", "\n", "axes", "[", "3", "]", ".", "set_xlabel", "(", "'Fingerprint ID'", ",", "fontsize", "=", "14", ")", "\n", "\n", "plot_filename", "=", "'heatmap.png'", "\n", "plt", ".", "savefig", "(", "join", "(", "src_ce_folderpath", ",", "plot_filename", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "print", "(", "'Plotted {}'", ".", "format", "(", "plot_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.visualization.plot_fingerprints_lineplots.plot_fingerprints_lineplots": [[15, 69], ["click.command", "click.option", "click.option", "os.path.join", "print", "print", "list", "numpy.argsort", "numpy.sort", "list", "print", "sorted", "map", "print", "pandas.read_parquet", "matplotlib.subplots", "matplotlib.suptitle", "matplotlib.savefig", "matplotlib.close", "print", "f.split", "os.listdir", "len", "list", "numpy.array", "os.path.join", "numpy.log10", "pd.read_parquet.groupby().mean().reset_index", "pd.read_parquet.groupby().std().reset_index", "zip", "os.path.join", "os.listdir", "f.endswith", "len", "len", "int", "seaborn.lineplot", "ax.fill_between", "pd.read_parquet.TTI.nunique", "f.split", "f.split", "f.split", "set", "set", "pd.read_parquet.groupby().mean", "pd.read_parquet.groupby().std", "x.split", "pd.read_parquet.groupby", "pd.read_parquet.groupby"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the ce, else and info folder are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--force'", ",", "'-f'", ",", "is_flag", "=", "True", ",", "help", "=", "'Whether to replot already plotted files'", ")", "\n", "def", "plot_fingerprints_lineplots", "(", "src_folderpath", ",", "force", ")", ":", "\n", "    ", "\"\"\"Plot a sample of the channel estimates located in src_folderpath/CE_FOLDERNAME\n    The plot is saved in src_folderpath \n\n    If --force is set, then the already plotted .parquet are replotted\n\n    Arguments:\n        src_folderpath {str} -- Source folder where the CE_FOLDERNAME, ELSE_FOLDERNAME and INFO_FOLDERNAME folder are located\n    \"\"\"", "\n", "\n", "src_ce_folderpath", "=", "join", "(", "src_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "\n", "cleaned_ce_files", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "'parquet'", "]", "# list all .parquet file in ce_folderpath", "\n", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Plot {} .parquet files in {}/\\n'", ".", "format", "(", "len", "(", "cleaned_ce_files", ")", ",", "src_ce_folderpath", ")", ")", "\n", "\n", "if", "not", "force", ":", "\n", "        ", "ce_pngs", "=", "[", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", "[", ":", "-", "9", "]", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "endswith", "(", "'_lineplot.png'", ")", "]", "# list all *_lineplot.png file in ce_folderpath", "\n", "print", "(", "'{}/{} fingerprints already plotted\\n'", ".", "format", "(", "len", "(", "ce_pngs", ")", ",", "len", "(", "cleaned_ce_files", ")", ")", ")", "\n", "cleaned_ce_files", "=", "sorted", "(", "list", "(", "set", "(", "cleaned_ce_files", ")", "-", "set", "(", "ce_pngs", ")", ")", ")", "\n", "\n", "# put the fingerprints in ascending order of IDs (i.e. ['ce_0', 'ce_1', ...])", "\n", "", "fingerprint_ids", "=", "list", "(", "map", "(", "lambda", "x", ":", "int", "(", "x", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", ",", "cleaned_ce_files", ")", ")", "\n", "argsort", "=", "np", ".", "argsort", "(", "fingerprint_ids", ")", "\n", "fingerprint_ids", "=", "np", ".", "sort", "(", "fingerprint_ids", ")", "\n", "cleaned_ce_files", "=", "list", "(", "np", ".", "array", "(", "cleaned_ce_files", ")", "[", "argsort", "]", ")", "\n", "\n", "for", "f", "in", "cleaned_ce_files", ":", "\n", "        ", "print", "(", "'\\t {}.parquet: '", ".", "format", "(", "f", ")", ",", "end", "=", "''", ")", "\n", "ce_df", "=", "pd", ".", "read_parquet", "(", "join", "(", "src_ce_folderpath", ",", "'{}.parquet'", ".", "format", "(", "f", ")", ")", ")", "\n", "\n", "ce_df", "[", "[", "'CE_0_AMPLITUDE'", ",", "'CE_1_AMPLITUDE'", ",", "'CE_2_AMPLITUDE'", ",", "'CE_3_AMPLITUDE'", "]", "]", "=", "20", "*", "np", ".", "log10", "(", "ce_df", "[", "[", "'CE_0_AMPLITUDE'", ",", "'CE_1_AMPLITUDE'", ",", "'CE_2_AMPLITUDE'", ",", "'CE_3_AMPLITUDE'", "]", "]", ")", "\n", "\n", "# Plot", "\n", "_", ",", "axes", "=", "plt", ".", "subplots", "(", "4", ",", "1", ",", "figsize", "=", "(", "5", ",", "15", ")", ",", "sharex", "=", "True", ")", "\n", "\n", "if", "not", "ce_df", ".", "empty", ":", "# the fingerprint might be empty if the gathering timed out", "\n", "            ", "mean_df", "=", "ce_df", ".", "groupby", "(", "'SC_ID'", ")", ".", "mean", "(", ")", ".", "reset_index", "(", ")", "\n", "std_df", "=", "ce_df", ".", "groupby", "(", "'SC_ID'", ")", ".", "std", "(", ")", ".", "reset_index", "(", ")", "\n", "\n", "for", "ax", ",", "col", "in", "zip", "(", "axes", ",", "[", "'CE_0_AMPLITUDE'", ",", "'CE_1_AMPLITUDE'", ",", "'CE_2_AMPLITUDE'", ",", "'CE_3_AMPLITUDE'", "]", ")", ":", "\n", "                ", "sns", ".", "lineplot", "(", "x", "=", "'SC_ID'", ",", "y", "=", "col", ",", "data", "=", "mean_df", ",", "legend", "=", "False", ",", "ax", "=", "ax", ")", "\n", "ax", ".", "fill_between", "(", "x", "=", "std_df", "[", "'SC_ID'", "]", ",", "y1", "=", "mean_df", "[", "col", "]", "-", "std_df", "[", "col", "]", ",", "y2", "=", "mean_df", "[", "col", "]", "+", "std_df", "[", "col", "]", ",", "alpha", "=", "0.2", ")", "\n", "\n", "", "", "plt", ".", "suptitle", "(", "'{}\\n {} TTIs \\n ||CSI|| [dB]'", ".", "format", "(", "f", ",", "ce_df", ".", "TTI", ".", "nunique", "(", ")", ")", ")", "\n", "\n", "plot_filename", "=", "'{}_lineplot.png'", ".", "format", "(", "f", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "plt", ".", "savefig", "(", "join", "(", "src_ce_folderpath", ",", "plot_filename", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "print", "(", "'Plotted'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.arthurgassner_thymio-radio-map.visualization.plot_fingerprints_lineplot_gif.plot_fingerprints_lineplot_gif": [[9, 34], ["click.command", "click.option", "click.option", "click.option", "os.path.join", "numpy.array", "print", "print", "print", "int", "sorted", "imageio.get_writer", "os.listdir", "f.endswith", "len", "os.path.join", "imageio.imread", "writer.append_data", "f.split", "str", "os.path.join"], "function", ["None"], ["@", "click", ".", "command", "(", ")", "\n", "@", "click", ".", "option", "(", "'--src_folderpath'", ",", "prompt", "=", "'Folder where the ce, else and info folder are located'", ",", "default", "=", "''", ")", "\n", "@", "click", ".", "option", "(", "'--frame_duration'", ",", "help", "=", "'Frame duration [s]'", ",", "default", "=", "'0.3'", ")", "\n", "@", "click", ".", "option", "(", "'--last_fingerprint_id'", ",", "help", "=", "'Last fingerprint ID to add to the gif (including)'", ",", "default", "=", "-", "1", ")", "\n", "def", "plot_fingerprints_lineplot_gif", "(", "src_folderpath", ",", "frame_duration", ",", "last_fingerprint_id", ")", ":", "\n", "    ", "src_ce_folderpath", "=", "join", "(", "src_folderpath", ",", "CE_FOLDERNAME", ")", "\n", "lineplots_filenames", "=", "[", "f", "for", "f", "in", "listdir", "(", "src_ce_folderpath", ")", "if", "f", ".", "endswith", "(", "'_lineplot.png'", ")", "]", "# list all *_lineplot.png file in ce_folderpath", "\n", "\n", "# Order the filenames in ascending ID", "\n", "fingerprint_ids", "=", "[", "int", "(", "f", ".", "split", "(", "'_'", ")", "[", "-", "2", "]", ")", "for", "f", "in", "lineplots_filenames", "]", "\n", "fingerprint_ids", "=", "np", ".", "array", "(", "sorted", "(", "fingerprint_ids", ")", ")", "\n", "\n", "if", "last_fingerprint_id", ">", "0", ":", "\n", "        ", "fingerprint_ids", "=", "fingerprint_ids", "[", "fingerprint_ids", "<=", "last_fingerprint_id", "]", "\n", "\n", "", "lineplots_filenames", "=", "[", "'_'", ".", "join", "(", "[", "'ce'", ",", "str", "(", "fingerprint_id", ")", ",", "'lineplot.png'", "]", ")", "for", "fingerprint_id", "in", "fingerprint_ids", "]", "\n", "\n", "print", "(", "''", ")", "\n", "print", "(", "'Combine {} *_lineplot.png files into a .GIF in {}/\\n'", ".", "format", "(", "len", "(", "lineplots_filenames", ")", ",", "src_ce_folderpath", ")", ")", "\n", "with", "imageio", ".", "get_writer", "(", "join", "(", "src_ce_folderpath", ",", "'lineplots.gif'", ")", ",", "mode", "=", "'I'", ",", "duration", "=", "frame_duration", ")", "as", "writer", ":", "\n", "        ", "for", "f", "in", "lineplots_filenames", ":", "\n", "            ", "image", "=", "imageio", ".", "imread", "(", "join", "(", "src_ce_folderpath", ",", "f", ")", ")", "\n", "writer", ".", "append_data", "(", "image", ")", "\n", "\n", "", "", "print", "(", "'lineplots.gif created'", ")", "\n", "\n"]]}