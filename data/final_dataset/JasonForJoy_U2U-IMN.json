{"home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.is_valid_query": [[4, 16], ["None"], "function", ["None"], ["def", "is_valid_query", "(", "v", ")", ":", "\n", "    ", "num_pos", "=", "0", "\n", "num_neg", "=", "0", "\n", "for", "aid", ",", "label", ",", "score", "in", "v", ":", "\n", "        ", "if", "label", ">", "0", ":", "\n", "            ", "num_pos", "+=", "1", "\n", "", "else", ":", "\n", "            ", "num_neg", "+=", "1", "\n", "", "", "if", "num_pos", ">", "0", "and", "num_neg", ">", "0", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.get_num_valid_query": [[17, 24], ["results.items", "metrics.is_valid_query"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.is_valid_query"], ["", "", "def", "get_num_valid_query", "(", "results", ")", ":", "\n", "    ", "num_query", "=", "0", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "is_valid_query", "(", "v", ")", ":", "\n", "            ", "continue", "\n", "", "num_query", "+=", "1", "\n", "", "return", "num_query", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.top_1_precision": [[25, 41], ["results.items", "sorted", "metrics.is_valid_query", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.is_valid_query"], ["", "def", "top_1_precision", "(", "results", ")", ":", "\n", "    ", "num_query", "=", "0", "\n", "top_1_correct", "=", "0.0", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "is_valid_query", "(", "v", ")", ":", "\n", "            ", "continue", "\n", "", "num_query", "+=", "1", "\n", "sorted_v", "=", "sorted", "(", "v", ",", "key", "=", "operator", ".", "itemgetter", "(", "2", ")", ",", "reverse", "=", "True", ")", "\n", "aid", ",", "label", ",", "score", "=", "sorted_v", "[", "0", "]", "\n", "if", "label", ">", "0", ":", "\n", "            ", "top_1_correct", "+=", "1", "\n", "\n", "", "", "if", "num_query", ">", "0", ":", "\n", "        ", "return", "top_1_correct", "/", "num_query", "\n", "", "else", ":", "\n", "        ", "return", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.mean_reciprocal_rank": [[42, 62], ["results.items", "sorted", "enumerate", "metrics.is_valid_query", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.is_valid_query"], ["", "", "def", "mean_reciprocal_rank", "(", "results", ")", ":", "\n", "    ", "num_query", "=", "0", "\n", "mrr", "=", "0.0", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "is_valid_query", "(", "v", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "num_query", "+=", "1", "\n", "sorted_v", "=", "sorted", "(", "v", ",", "key", "=", "operator", ".", "itemgetter", "(", "2", ")", ",", "reverse", "=", "True", ")", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "sorted_v", ")", ":", "\n", "            ", "aid", ",", "label", ",", "score", "=", "rec", "\n", "if", "label", ">", "0", ":", "\n", "                ", "mrr", "+=", "1.0", "/", "(", "i", "+", "1", ")", "\n", "break", "\n", "\n", "", "", "", "if", "num_query", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "else", ":", "\n", "        ", "mrr", "=", "mrr", "/", "num_query", "\n", "return", "mrr", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.mean_average_precision": [[63, 88], ["results.items", "sorted", "enumerate", "metrics.is_valid_query", "operator.itemgetter"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.is_valid_query"], ["", "", "def", "mean_average_precision", "(", "results", ")", ":", "\n", "    ", "num_query", "=", "0", "\n", "mvp", "=", "0.0", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "is_valid_query", "(", "v", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "num_query", "+=", "1", "\n", "sorted_v", "=", "sorted", "(", "v", ",", "key", "=", "operator", ".", "itemgetter", "(", "2", ")", ",", "reverse", "=", "True", ")", "\n", "num_relevant_doc", "=", "0.0", "\n", "avp", "=", "0.0", "\n", "for", "i", ",", "rec", "in", "enumerate", "(", "sorted_v", ")", ":", "\n", "            ", "aid", ",", "label", ",", "score", "=", "rec", "\n", "if", "label", "==", "1", ":", "\n", "                ", "num_relevant_doc", "+=", "1", "\n", "precision", "=", "num_relevant_doc", "/", "(", "i", "+", "1", ")", "\n", "avp", "+=", "precision", "\n", "", "", "avp", "=", "avp", "/", "num_relevant_doc", "\n", "mvp", "+=", "avp", "\n", "\n", "", "if", "num_query", "==", "0", ":", "\n", "        ", "return", "0.0", "\n", "", "else", ":", "\n", "        ", "mvp", "=", "mvp", "/", "num_query", "\n", "return", "mvp", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.metrics.classification_metrics": [[89, 124], ["results.items", "float", "float", "float", "math.log", "math.log"], "function", ["None"], ["", "", "def", "classification_metrics", "(", "results", ")", ":", "\n", "    ", "total_num", "=", "0", "\n", "total_correct", "=", "0", "\n", "true_positive", "=", "0", "\n", "positive_correct", "=", "0", "\n", "predicted_positive", "=", "0", "\n", "\n", "loss", "=", "0.0", ";", "\n", "for", "k", ",", "v", "in", "results", ".", "items", "(", ")", ":", "\n", "        ", "for", "rec", "in", "v", ":", "\n", "            ", "total_num", "+=", "1", "\n", "aid", ",", "label", ",", "score", "=", "rec", "\n", "\n", "\n", "if", "score", ">", "0.5", ":", "\n", "                ", "predicted_positive", "+=", "1", "\n", "\n", "", "if", "label", ">", "0", ":", "\n", "                ", "true_positive", "+=", "1", "\n", "loss", "+=", "-", "math", ".", "log", "(", "score", "+", "1e-12", ")", "\n", "", "else", ":", "\n", "                ", "loss", "+=", "-", "math", ".", "log", "(", "1.0", "-", "score", "+", "1e-12", ")", ";", "\n", "\n", "", "if", "score", ">", "0.5", "and", "label", ">", "0", ":", "\n", "                ", "total_correct", "+=", "1", "\n", "positive_correct", "+=", "1", "\n", "\n", "", "if", "score", "<", "0.5", "and", "label", "<", "0.5", ":", "\n", "                ", "total_correct", "+=", "1", "\n", "\n", "", "", "", "accuracy", "=", "float", "(", "total_correct", ")", "/", "total_num", "\n", "precision", "=", "float", "(", "positive_correct", ")", "/", "(", "predicted_positive", "+", "1e-12", ")", "\n", "recall", "=", "float", "(", "positive_correct", ")", "/", "true_positive", "\n", "F1", "=", "2.0", "*", "precision", "*", "recall", "/", "(", "1e-12", "+", "precision", "+", "recall", ")", "\n", "return", "accuracy", ",", "precision", ",", "recall", ",", "F1", ",", "loss", "/", "total_num", ";", "\n", "", ""]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.load_vocab": [[6, 18], ["open", "line.decode().strip.decode().strip", "line.decode().strip.split", "int", "line.decode().strip.decode"], "function", ["None"], ["def", "load_vocab", "(", "fname", ")", ":", "\n", "    ", "'''\n    vocab = {\"<PAD>\": 0, ...}\n    '''", "\n", "vocab", "=", "{", "}", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "term_id", "=", "int", "(", "fields", "[", "1", "]", ")", "\n", "vocab", "[", "fields", "[", "0", "]", "]", "=", "term_id", "\n", "", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.load_char_vocab": [[19, 31], ["open", "line.strip().split", "int", "line.strip"], "function", ["None"], ["", "def", "load_char_vocab", "(", "fname", ")", ":", "\n", "    ", "'''\n    charVocab = {\"U\": 0, \"!\": 1, ...}\n    '''", "\n", "charVocab", "=", "{", "}", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "\n", "char_id", "=", "int", "(", "fields", "[", "0", "]", ")", "\n", "ch", "=", "fields", "[", "1", "]", "\n", "charVocab", "[", "ch", "]", "=", "char_id", "\n", "", "", "return", "charVocab", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.to_vec": [[32, 48], ["len", "range", "numpy.array", "vec.append", "vec.append"], "function", ["None"], ["", "def", "to_vec", "(", "tokens", ",", "vocab", ",", "maxlen", ")", ":", "\n", "    ", "'''\n    length: length of the input sequence\n    vec: map the token to the vocab_id, return a varied-length array [3, 6, 4, 3, ...]\n    '''", "\n", "n", "=", "len", "(", "tokens", ")", "\n", "length", "=", "0", "\n", "vec", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "length", "+=", "1", "\n", "if", "tokens", "[", "i", "]", "in", "vocab", ":", "\n", "            ", "vec", ".", "append", "(", "vocab", "[", "tokens", "[", "i", "]", "]", ")", "\n", "", "else", ":", "\n", "            ", "vec", ".", "append", "(", "vocab", "[", "\"UNKNOWN\"", "]", ")", "\n", "\n", "", "", "return", "length", ",", "np", ".", "array", "(", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.load_responses": [[49, 82], ["open", "line.decode().strip.decode().strip", "line.decode().strip.split", "r_text.split", "new_r_utters.append", "len", "len", "print", "new_r_utters.append", "data_helpers.to_vec", "rs_tokens.append", "rs_vec.append", "rs_len.append", "line.decode().strip.decode", "r_utter.split"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.to_vec"], ["", "def", "load_responses", "(", "fname", ",", "vocab", ",", "maxlen", ")", ":", "\n", "    ", "responses", "=", "{", "}", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "len", "(", "fields", ")", "!=", "2", ":", "\n", "                ", "print", "(", "\"WRONG LINE: {}\"", ".", "format", "(", "line", ")", ")", "\n", "r_text", "=", "'UNKNOWN'", "\n", "", "else", ":", "\n", "                ", "r_text", "=", "fields", "[", "1", "]", "\n", "\n", "", "r_utters", "=", "r_text", ".", "split", "(", "\" __eou__ \"", ")", "\n", "new_r_utters", "=", "[", "]", "\n", "for", "r_utter", "in", "r_utters", "[", ":", "-", "1", "]", ":", "\n", "                ", "new_r_utters", ".", "append", "(", "r_utter", "+", "\" __eou__\"", ")", "\n", "", "new_r_utters", ".", "append", "(", "r_utters", "[", "-", "1", "]", ")", "\n", "\n", "new_r_utters", "=", "new_r_utters", "[", "-", "max_response_num", ":", "]", "# select the last max_r_utter_num utterances", "\n", "rs_num", "=", "len", "(", "new_r_utters", ")", "\n", "\n", "rs_tokens", "=", "[", "]", "\n", "rs_vec", "=", "[", "]", "\n", "rs_len", "=", "[", "]", "\n", "for", "r_utter", "in", "new_r_utters", ":", "\n", "                ", "r_utter_tokens", "=", "r_utter", ".", "split", "(", "' '", ")", "[", ":", "maxlen", "]", "# select the first max_response_len tokens in every utterance", "\n", "r_utter_len", ",", "r_utter_vec", "=", "to_vec", "(", "r_utter_tokens", ",", "vocab", ",", "maxlen", ")", "\n", "rs_tokens", ".", "append", "(", "r_utter_tokens", ")", "\n", "rs_vec", ".", "append", "(", "r_utter_vec", ")", "\n", "rs_len", ".", "append", "(", "r_utter_len", ")", "\n", "\n", "", "responses", "[", "fields", "[", "0", "]", "]", "=", "(", "rs_len", ",", "rs_num", ",", "rs_vec", ",", "rs_tokens", ")", "\n", "", "", "return", "responses", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.load_dataset": [[83, 142], ["open", "line.decode().strip.decode().strip", "line.decode().strip.split", "len", "turn.split", "data_helpers.to_vec", "us_tokens.append", "us_vec.append", "us_len.append", "line.decode().strip.decode", "len", "utterances.append", "utterances.append", "utterance.split", "numpy.zeros", "numpy.arange", "range", "dataset.append", "numpy.zeros", "numpy.arange", "range", "dataset.append", "utterances.append", "fields[].split", "fields[].split"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.to_vec"], ["", "def", "load_dataset", "(", "fname", ",", "vocab", ",", "max_utter_len", ",", "max_utter_num", ",", "responses", ")", ":", "\n", "\n", "    ", "dataset", "=", "[", "]", "\n", "with", "open", "(", "fname", ",", "'rt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "line", "=", "line", ".", "decode", "(", "'utf-8'", ")", ".", "strip", "(", ")", "\n", "fields", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "us_id", "=", "fields", "[", "0", "]", "\n", "\n", "context", "=", "fields", "[", "1", "]", "\n", "turns", "=", "(", "context", "+", "' '", ")", ".", "split", "(", "' __eot__ '", ")", "[", ":", "-", "1", "]", "\n", "utterances", "=", "[", "]", "\n", "for", "turn", "in", "turns", ":", "\n", "                ", "utters", "=", "turn", ".", "split", "(", "' __eou__ '", ")", "\n", "if", "len", "(", "utters", ")", "==", "1", ":", "\n", "                    ", "utterances", ".", "append", "(", "turn", "+", "' __eot__'", ")", "\n", "", "else", ":", "\n", "                    ", "for", "utter", "in", "utters", "[", ":", "-", "1", "]", ":", "\n", "                        ", "utterances", ".", "append", "(", "utter", "+", "' __eou__'", ")", "\n", "", "utterances", ".", "append", "(", "utters", "[", "-", "1", "]", "+", "' __eot__'", ")", "\n", "", "", "utterances", "=", "utterances", "[", "-", "max_utter_num", ":", "]", "# select the last max_utter_num utterances", "\n", "\n", "us_tokens", "=", "[", "]", "\n", "us_vec", "=", "[", "]", "\n", "us_len", "=", "[", "]", "\n", "for", "utterance", "in", "utterances", ":", "\n", "                ", "u_tokens", "=", "utterance", ".", "split", "(", "' '", ")", "[", ":", "max_utter_len", "]", "# select the first max_utter_len tokens in every utterance", "\n", "u_len", ",", "u_vec", "=", "to_vec", "(", "u_tokens", ",", "vocab", ",", "max_utter_len", ")", "\n", "us_tokens", ".", "append", "(", "u_tokens", ")", "\n", "us_vec", ".", "append", "(", "u_vec", ")", "\n", "us_len", ".", "append", "(", "u_len", ")", "\n", "\n", "", "us_num", "=", "len", "(", "utterances", ")", "\n", "\n", "if", "fields", "[", "3", "]", "!=", "\"NA\"", ":", "\n", "                ", "neg_ids", "=", "[", "id", "for", "id", "in", "fields", "[", "3", "]", ".", "split", "(", "'|'", ")", "]", "\n", "for", "rs_id", "in", "neg_ids", ":", "\n", "                    ", "rs_len", ",", "rs_num", ",", "rs_vec", ",", "rs_tokens", "=", "responses", "[", "rs_id", "]", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "rs_num", ",", "us_num", ")", ")", "\n", "base", "=", "np", ".", "arange", "(", "us_num", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "rs_num", ")", ":", "\n", "                        ", "dist", "[", "i", "]", "=", "base", "+", "i", "\n", "\n", "", "dataset", ".", "append", "(", "(", "us_id", ",", "us_len", ",", "us_vec", ",", "us_num", ",", "dist", ",", "rs_id", ",", "rs_len", ",", "rs_vec", ",", "rs_num", ",", "0.0", ",", "us_tokens", ",", "rs_tokens", ")", ")", "\n", "# break  # uncomment this line when testing recall_2@1", "\n", "\n", "", "", "if", "fields", "[", "2", "]", "!=", "\"NA\"", ":", "\n", "                ", "pos_ids", "=", "[", "id", "for", "id", "in", "fields", "[", "2", "]", ".", "split", "(", "'|'", ")", "]", "\n", "for", "rs_id", "in", "pos_ids", ":", "\n", "                    ", "rs_len", ",", "rs_num", ",", "rs_vec", ",", "rs_tokens", "=", "responses", "[", "rs_id", "]", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "rs_num", ",", "us_num", ")", ")", "\n", "base", "=", "np", ".", "arange", "(", "us_num", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "rs_num", ")", ":", "\n", "                        ", "dist", "[", "i", "]", "=", "base", "+", "i", "\n", "\n", "", "dataset", ".", "append", "(", "(", "us_id", ",", "us_len", ",", "us_vec", ",", "us_num", ",", "dist", ",", "rs_id", ",", "rs_len", ",", "rs_vec", ",", "rs_num", ",", "1.0", ",", "us_tokens", ",", "rs_tokens", ")", ")", "\n", "", "", "", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.normalize_vec": [[144, 156], ["numpy.zeros", "range", "len", "len"], "function", ["None"], ["", "def", "normalize_vec", "(", "vec", ",", "maxlen", ")", ":", "\n", "    ", "'''\n    pad the original vec to the same maxlen\n    [3, 4, 7] maxlen=5 --> [3, 4, 7, 0, 0]\n    '''", "\n", "if", "len", "(", "vec", ")", "==", "maxlen", ":", "\n", "        ", "return", "vec", "\n", "\n", "", "new_vec", "=", "np", ".", "zeros", "(", "maxlen", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "vec", ")", ")", ":", "\n", "        ", "new_vec", "[", "i", "]", "=", "vec", "[", "i", "]", "\n", "", "return", "new_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.charVec": [[157, 177], ["len", "numpy.zeros", "numpy.ones", "range", "len", "enumerate"], "function", ["None"], ["", "def", "charVec", "(", "tokens", ",", "charVocab", ",", "maxlen", ",", "maxWordLength", ")", ":", "\n", "    ", "'''\n    chars = np.array( (maxlen, maxWordLength) )    0 if not found in charVocab or None\n    word_lengths = np.array( maxlen )              1 if None\n    '''", "\n", "n", "=", "len", "(", "tokens", ")", "\n", "if", "n", ">", "maxlen", ":", "\n", "        ", "n", "=", "maxlen", "\n", "\n", "", "chars", "=", "np", ".", "zeros", "(", "(", "maxlen", ",", "maxWordLength", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "word_lengths", "=", "np", ".", "ones", "(", "maxlen", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "token", "=", "tokens", "[", "i", "]", "[", ":", "maxWordLength", "]", "\n", "word_lengths", "[", "i", "]", "=", "len", "(", "token", ")", "\n", "row", "=", "chars", "[", "i", "]", "\n", "for", "idx", ",", "ch", "in", "enumerate", "(", "token", ")", ":", "\n", "            ", "if", "ch", "in", "charVocab", ":", "\n", "                ", "row", "[", "idx", "]", "=", "charVocab", "[", "ch", "]", "\n", "\n", "", "", "", "return", "chars", ",", "word_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.batch_iter": [[178, 269], ["len", "range", "int", "range", "random.shuffle", "min", "range", "len", "numpy.zeros", "numpy.zeros", "range", "numpy.zeros", "numpy.zeros", "range", "x_utterances.append", "x_utterances_len.append", "x_utterances_num.append", "x_response.append", "x_response_len.append", "x_responses_num.append", "targets.append", "id_pairs.append", "numpy.zeros", "range", "x_dist.append", "numpy.zeros", "numpy.ones", "range", "numpy.zeros", "numpy.ones", "range", "x_utterances_char.append", "x_utterances_char_len.append", "x_response_char.append", "x_response_char_len.append", "target_weights.append", "target_weights.append", "len", "data_helpers.normalize_vec", "len", "data_helpers.normalize_vec", "len", "data_helpers.charVec", "len", "data_helpers.charVec", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "int"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.normalize_vec", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.normalize_vec", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.charVec", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.data_helpers.charVec"], ["", "def", "batch_iter", "(", "data", ",", "batch_size", ",", "num_epochs", ",", "target_loss_weights", ",", "max_utter_len", ",", "max_utter_num", ",", "max_response_len", ",", "charVocab", ",", "max_word_length", ",", "shuffle", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Generates a batch iterator for a dataset.\n    \"\"\"", "\n", "data_size", "=", "len", "(", "data", ")", "\n", "num_batches_per_epoch", "=", "int", "(", "len", "(", "data", ")", "/", "batch_size", ")", "+", "1", "\n", "for", "epoch", "in", "range", "(", "num_epochs", ")", ":", "\n", "# Shuffle the data at each epoch", "\n", "        ", "if", "shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "data", ")", "\n", "", "for", "batch_num", "in", "range", "(", "num_batches_per_epoch", ")", ":", "\n", "            ", "start_index", "=", "batch_num", "*", "batch_size", "\n", "end_index", "=", "min", "(", "(", "batch_num", "+", "1", ")", "*", "batch_size", ",", "data_size", ")", "\n", "x_utterances", "=", "[", "]", "\n", "x_utterances_len", "=", "[", "]", "\n", "x_utterances_num", "=", "[", "]", "\n", "x_response", "=", "[", "]", "\n", "x_response_len", "=", "[", "]", "\n", "x_responses_num", "=", "[", "]", "\n", "\n", "targets", "=", "[", "]", "\n", "target_weights", "=", "[", "]", "\n", "id_pairs", "=", "[", "]", "\n", "x_dist", "=", "[", "]", "\n", "\n", "x_utterances_char", "=", "[", "]", "\n", "x_utterances_char_len", "=", "[", "]", "\n", "x_response_char", "=", "[", "]", "\n", "x_response_char_len", "=", "[", "]", "\n", "\n", "for", "rowIdx", "in", "range", "(", "start_index", ",", "end_index", ")", ":", "\n", "                ", "us_id", ",", "us_len", ",", "us_vec", ",", "us_num", ",", "dist", ",", "rs_id", ",", "rs_len", ",", "rs_vec", ",", "rs_num", ",", "label", ",", "us_tokens", ",", "rs_tokens", "=", "data", "[", "rowIdx", "]", "\n", "if", "label", ">", "0", ":", "\n", "                    ", "target_weights", ".", "append", "(", "target_loss_weights", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "target_weights", ".", "append", "(", "target_loss_weights", "[", "0", "]", ")", "\n", "\n", "# normalize us_vec and us_len", "\n", "", "new_utters_vec", "=", "np", ".", "zeros", "(", "(", "max_utter_num", ",", "max_utter_len", ")", ",", "dtype", "=", "'int32'", ")", "\n", "new_utters_len", "=", "np", ".", "zeros", "(", "(", "max_utter_num", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "us_len", ")", ")", ":", "\n", "                    ", "new_utter_vec", "=", "normalize_vec", "(", "us_vec", "[", "i", "]", ",", "max_utter_len", ")", "\n", "new_utters_vec", "[", "i", "]", "=", "new_utter_vec", "\n", "new_utters_len", "[", "i", "]", "=", "us_len", "[", "i", "]", "\n", "\n", "# normalize rs_vec and rs_len", "\n", "", "new_responses_vec", "=", "np", ".", "zeros", "(", "(", "max_response_num", ",", "max_response_len", ")", ",", "dtype", "=", "'int32'", ")", "\n", "new_responses_len", "=", "np", ".", "zeros", "(", "(", "max_response_num", ",", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rs_len", ")", ")", ":", "\n", "                    ", "new_response_vec", "=", "normalize_vec", "(", "rs_vec", "[", "i", "]", ",", "max_response_len", ")", "\n", "new_responses_vec", "[", "i", "]", "=", "new_response_vec", "\n", "new_responses_len", "[", "i", "]", "=", "rs_len", "[", "i", "]", "\n", "\n", "", "x_utterances", ".", "append", "(", "new_utters_vec", ")", "\n", "x_utterances_len", ".", "append", "(", "new_utters_len", ")", "\n", "x_utterances_num", ".", "append", "(", "us_num", ")", "\n", "x_response", ".", "append", "(", "new_responses_vec", ")", "\n", "x_response_len", ".", "append", "(", "new_responses_len", ")", "\n", "x_responses_num", ".", "append", "(", "rs_num", ")", "\n", "\n", "targets", ".", "append", "(", "label", ")", "\n", "id_pairs", ".", "append", "(", "(", "us_id", ",", "rs_id", ",", "int", "(", "label", ")", ")", ")", "\n", "new_dist", "=", "np", ".", "zeros", "(", "(", "max_response_num", ",", "max_utter_num", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "rs_num", ")", ":", "\n", "                    ", "new_dist", "[", "i", ",", ":", "us_num", "]", "=", "dist", "[", "i", "]", "\n", "", "x_dist", ".", "append", "(", "new_dist", ")", "\n", "\n", "# normalize uttersCharVec and uttersCharLen", "\n", "uttersCharVec", "=", "np", ".", "zeros", "(", "(", "max_utter_num", ",", "max_utter_len", ",", "max_word_length", ")", ",", "dtype", "=", "'int32'", ")", "\n", "uttersCharLen", "=", "np", ".", "ones", "(", "(", "max_utter_num", ",", "max_utter_len", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "us_len", ")", ")", ":", "\n", "                    ", "utterCharVec", ",", "utterCharLen", "=", "charVec", "(", "us_tokens", "[", "i", "]", ",", "charVocab", ",", "max_utter_len", ",", "max_word_length", ")", "\n", "uttersCharVec", "[", "i", "]", "=", "utterCharVec", "\n", "uttersCharLen", "[", "i", "]", "=", "utterCharLen", "\n", "\n", "# normalize rsCharVec and rsCharLen", "\n", "", "rsCharVec", "=", "np", ".", "zeros", "(", "(", "max_response_num", ",", "max_response_len", ",", "max_word_length", ")", ",", "dtype", "=", "'int32'", ")", "\n", "rsCharLen", "=", "np", ".", "ones", "(", "(", "max_response_num", ",", "max_response_len", ")", ",", "dtype", "=", "'int32'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "rs_len", ")", ")", ":", "\n", "                    ", "rCharVec", ",", "rCharLen", "=", "charVec", "(", "rs_tokens", "[", "i", "]", ",", "charVocab", ",", "max_response_len", ",", "max_word_length", ")", "\n", "rsCharVec", "[", "i", "]", "=", "rCharVec", "\n", "rsCharLen", "[", "i", "]", "=", "rCharLen", "\n", "\n", "", "x_utterances_char", ".", "append", "(", "uttersCharVec", ")", "\n", "x_utterances_char_len", ".", "append", "(", "uttersCharLen", ")", "\n", "x_response_char", ".", "append", "(", "rsCharVec", ")", "\n", "x_response_char_len", ".", "append", "(", "rsCharLen", ")", "\n", "\n", "", "yield", "np", ".", "array", "(", "x_utterances", ")", ",", "np", ".", "array", "(", "x_response", ")", ",", "np", ".", "array", "(", "x_utterances_len", ")", ",", "np", ".", "array", "(", "x_response_len", ")", ",", "np", ".", "array", "(", "x_utterances_num", ")", ",", "np", ".", "array", "(", "x_responses_num", ")", ",", "np", ".", "array", "(", "x_dist", ")", ",", "np", ".", "array", "(", "targets", ")", ",", "np", ".", "array", "(", "target_weights", ")", ",", "id_pairs", ",", "np", ".", "array", "(", "x_utterances_char", ")", ",", "np", ".", "array", "(", "x_utterances_char_len", ")", ",", "np", ".", "array", "(", "x_response_char", ")", ",", "np", ".", "array", "(", "x_response_char_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.U2U_IMN.__init__": [[186, 386], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.constant", "tensorflow.reshape", "tensorflow.reshape", "model_U2U_IMN.cnn_layer", "tensorflow.reshape", "model_U2U_IMN.cnn_layer", "tensorflow.reshape", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "print", "print", "tensorflow.name_scope", "model_U2U_IMN.get_embeddings", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "print", "print", "tensorflow.name_scope", "model_U2U_IMN.get_char_embedding", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "print", "print", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "model_U2U_IMN.U2U_IMN.", "model_U2U_IMN.U2U_IMN.", "tensorflow.variable_scope", "tensorflow.reshape", "tensorflow.reshape", "model_U2U_IMN.context_response_similarity_matrix", "model_U2U_IMN.attended_context", "model_U2U_IMN.attended_response", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "print", "tensorflow.variable_scope", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.concat", "print", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "tensorflow.reduce_max", "tensorflow.concat", "tensorflow.concat", "tensorflow.reshape", "tensorflow.get_variable", "tensorflow.sequence_mask", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.squeeze", "print", "tensorflow.nn.dropout", "tensorflow.concat", "print", "tensorflow.variable_scope", "tensorflow.contrib.layers.l2_regularizer", "tensorflow.nn.dropout", "tensorflow.contrib.layers.fully_connected", "tensorflow.nn.dropout", "print", "tensorflow.Variable", "tensorflow.get_variable", "print", "tensorflow.squeeze", "tensorflow.sigmoid", "tensorflow.nn.sigmoid_cross_entropy_with_logits", "tensorflow.multiply", "tensorflow.name_scope", "tensorflow.equal", "tensorflow.reduce_mean", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.reshape.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.matmul", "sum", "tensorflow.sign", "tensorflow.sign", "tensorflow.cast", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.nn.embedding_lookup.get_shape", "tensorflow.reshape.get_shape", "tensorflow.reshape.get_shape", "tensorflow.constant_initializer", "tensorflow.nn.dropout.get_shape", "tensorflow.nn.dropout.get_shape", "tensorflow.nn.dropout.get_shape", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.squeeze.get_shape", "tensorflow.reduce_mean", "tensorflow.get_collection", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.cnn_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.cnn_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_embeddings", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_char_embedding", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.context_response_similarity_matrix", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.attended_context", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.attended_response", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer", "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "max_utter_len", ",", "max_utter_num", ",", "max_response_len", ",", "num_layer", ",", "vocab_size", ",", "embedding_size", ",", "vocab", ",", "rnn_size", ",", "maxWordLength", ",", "charVocab", ",", "l2_reg_lambda", "=", "0.0", ")", ":", "\n", "\n", "        ", "max_response_num", "=", "3", "\n", "\n", "self", ".", "utterances", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_utter_num", ",", "max_utter_len", "]", ",", "name", "=", "\"utterances\"", ")", "\n", "self", ".", "utterances_len", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_utter_num", "]", ",", "name", "=", "\"utterances_len\"", ")", "\n", "self", ".", "utters_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"utterances_num\"", ")", "\n", "\n", "self", ".", "response", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_response_num", ",", "max_response_len", "]", ",", "name", "=", "\"response\"", ")", "\n", "self", ".", "response_len", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_response_num", "]", ",", "name", "=", "\"response_len\"", ")", "\n", "self", ".", "responses_num", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", "]", ",", "name", "=", "\"responses_num\"", ")", "\n", "\n", "self", ".", "distance", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", ",", "max_response_num", ",", "max_utter_num", "]", ",", "name", "=", "\"distance\"", ")", "\n", "self", ".", "target", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"target\"", ")", "\n", "self", ".", "target_loss_weight", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "None", "]", ",", "name", "=", "\"target_weight\"", ")", "\n", "self", ".", "dropout_keep_prob", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "\"dropout_keep_prob\"", ")", "\n", "\n", "self", ".", "u_charVec", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_utter_num", ",", "max_utter_len", ",", "maxWordLength", "]", ",", "name", "=", "\"utterances_char\"", ")", "\n", "self", ".", "u_charLen", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_utter_num", ",", "max_utter_len", "]", ",", "name", "=", "\"utterances_char_len\"", ")", "\n", "\n", "self", ".", "r_charVec", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_response_num", ",", "max_response_len", ",", "maxWordLength", "]", ",", "name", "=", "\"response_char\"", ")", "\n", "self", ".", "r_charLen", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "[", "None", ",", "max_response_num", ",", "max_response_len", "]", ",", "name", "=", "\"response_char_len\"", ")", "\n", "\n", "l2_loss", "=", "tf", ".", "constant", "(", "1.0", ")", "\n", "\n", "# =============================== Embedding layer ===============================", "\n", "# word embedding", "\n", "with", "tf", ".", "name_scope", "(", "\"embedding\"", ")", ":", "\n", "            ", "W", "=", "get_embeddings", "(", "vocab", ")", "\n", "utterances_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "W", ",", "self", ".", "utterances", ")", "# [batch_size, max_utter_num, max_utter_len,  word_dim]", "\n", "response_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "W", ",", "self", ".", "response", ")", "# [batch_size, max_response_num, max_response_len, word_dim]", "\n", "print", "(", "\"original utterances_embedded: {}\"", ".", "format", "(", "utterances_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "print", "(", "\"original response_embedded: {}\"", ".", "format", "(", "response_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "'char_embedding'", ")", ":", "\n", "            ", "char_W", "=", "get_char_embedding", "(", "charVocab", ")", "\n", "utterances_char_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "char_W", ",", "self", ".", "u_charVec", ")", "# [batch_size, max_utter_num, max_utter_len,  maxWordLength, char_dim]", "\n", "response_char_embedded", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "char_W", ",", "self", ".", "r_charVec", ")", "# [batch_size, max_response_num, max_response_len, maxWordLength, char_dim]", "\n", "print", "(", "\"utterances_char_embedded: {}\"", ".", "format", "(", "utterances_char_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "print", "(", "\"response_char_embedded: {}\"", ".", "format", "(", "response_char_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "# char CNN", "\n", "", "char_dim", "=", "utterances_char_embedded", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "utterances_char_embedded", "=", "tf", ".", "reshape", "(", "utterances_char_embedded", ",", "[", "-", "1", ",", "maxWordLength", ",", "char_dim", "]", ")", "# [batch_size*max_utter_num*max_utter_len, maxWordLength, char_dim]", "\n", "response_char_embedded", "=", "tf", ".", "reshape", "(", "response_char_embedded", ",", "[", "-", "1", ",", "maxWordLength", ",", "char_dim", "]", ")", "# [batch_size*max_response_num*max_response_len, maxWordLength, char_dim]", "\n", "\n", "utterances_cnn_char_emb", "=", "cnn_layer", "(", "utterances_char_embedded", ",", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", ",", "num_filters", "=", "50", ",", "scope", "=", "\"CNN_char_emb\"", ",", "scope_reuse", "=", "False", ")", "# [batch_size*max_utter_num*max_utter_len, emb]", "\n", "cnn_char_dim", "=", "utterances_cnn_char_emb", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "utterances_cnn_char_emb", "=", "tf", ".", "reshape", "(", "utterances_cnn_char_emb", ",", "[", "-", "1", ",", "max_utter_num", ",", "max_utter_len", ",", "cnn_char_dim", "]", ")", "# [batch_size, max_utter_num, max_utter_len, emb]", "\n", "\n", "response_cnn_char_emb", "=", "cnn_layer", "(", "response_char_embedded", ",", "filter_sizes", "=", "[", "3", ",", "4", ",", "5", "]", ",", "num_filters", "=", "50", ",", "scope", "=", "\"CNN_char_emb\"", ",", "scope_reuse", "=", "True", ")", "# [batch_size*max_response_num*max_response_len, emb]", "\n", "response_cnn_char_emb", "=", "tf", ".", "reshape", "(", "response_cnn_char_emb", ",", "[", "-", "1", ",", "max_response_num", ",", "max_response_len", ",", "cnn_char_dim", "]", ")", "# [batch_size, max_response_num, max_response_len, emb]", "\n", "\n", "utterances_embedded", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "utterances_embedded", ",", "utterances_cnn_char_emb", "]", ")", "# [batch_size, max_utter_num, max_utter_len, emb]", "\n", "response_embedded", "=", "tf", ".", "concat", "(", "axis", "=", "-", "1", ",", "values", "=", "[", "response_embedded", ",", "response_cnn_char_emb", "]", ")", "# [batch_size, max_response_num, max_response_len, emb]", "\n", "utterances_embedded", "=", "tf", ".", "nn", ".", "dropout", "(", "utterances_embedded", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "response_embedded", "=", "tf", ".", "nn", ".", "dropout", "(", "response_embedded", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "print", "(", "\"utterances_embedded: {}\"", ".", "format", "(", "utterances_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "print", "(", "\"response_embedded: {}\"", ".", "format", "(", "response_embedded", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "\n", "# =============================== Encoding layer ===============================", "\n", "with", "tf", ".", "variable_scope", "(", "\"encoding_layer\"", ")", "as", "vs", ":", "\n", "            ", "rnn_scope_name", "=", "\"bidirectional_rnn\"", "\n", "emb_dim", "=", "utterances_embedded", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "flattened_utterances_embedded", "=", "tf", ".", "reshape", "(", "utterances_embedded", ",", "[", "-", "1", ",", "max_utter_len", ",", "emb_dim", "]", ")", "# [batch_size*max_utter_num, max_utter_len, emb]", "\n", "flattened_utterances_len", "=", "tf", ".", "reshape", "(", "self", ".", "utterances_len", ",", "[", "-", "1", "]", ")", "# [batch_size*max_utter_num, ]", "\n", "flattened_responses_embedded", "=", "tf", ".", "reshape", "(", "response_embedded", ",", "[", "-", "1", ",", "max_response_len", ",", "emb_dim", "]", ")", "# [batch_size*max_response_num, max_response_len, emb]", "\n", "flattened_responses_len", "=", "tf", ".", "reshape", "(", "self", ".", "response_len", ",", "[", "-", "1", "]", ")", "# [batch_size*max_response_num, ]", "\n", "# 1. single_lstm_layer", "\n", "u_rnn_output", ",", "u_rnn_states", "=", "lstm_layer", "(", "flattened_utterances_embedded", ",", "flattened_utterances_len", ",", "rnn_size", ",", "self", ".", "dropout_keep_prob", ",", "rnn_scope_name", ",", "scope_reuse", "=", "False", ")", "\n", "utterances_output", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "u_rnn_output", ")", "# [batch_size*max_utter_num,  max_utter_len, rnn_size*2]", "\n", "r_rnn_output", ",", "r_rnn_states", "=", "lstm_layer", "(", "flattened_responses_embedded", ",", "flattened_responses_len", ",", "rnn_size", ",", "self", ".", "dropout_keep_prob", ",", "rnn_scope_name", ",", "scope_reuse", "=", "True", ")", "# [batch_size, max_response_len, rnn_size(200)]", "\n", "response_output", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "r_rnn_output", ")", "# [batch_size*max_response_num, max_response_len, rnn_size*2]", "\n", "# 2. multi_lstm_layer", "\n", "# utterances_output = multi_lstm_layer(flattened_utterances_embedded, flattened_utterances_len, rnn_size, self.dropout_keep_prob, num_layer, rnn_scope_name, scope_reuse=False)", "\n", "# response_output = multi_lstm_layer(flattened_responses_embedded, flattened_responses_len, rnn_size, self.dropout_keep_prob, num_layer, rnn_scope_name, scope_reuse=True)", "\n", "# print(\"establish AHRE layers : {}\".format(num_layer))", "\n", "\n", "# self-attention", "\n", "utterances_output", "=", "self_attended", "(", "utterances_output", ",", "flattened_utterances_len", ",", "max_utter_len", ",", "\"utterance_self_attend\"", ")", "\n", "response_output", "=", "self_attended", "(", "response_output", ",", "flattened_responses_len", ",", "max_response_len", ",", "\"response_self_attend\"", ")", "\n", "\n", "\n", "# =============================== Matching layer ===============================", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"matching_layer\"", ")", "as", "vs", ":", "\n", "            ", "output_dim", "=", "utterances_output", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "utterances_output", "=", "tf", ".", "reshape", "(", "utterances_output", ",", "[", "-", "1", ",", "max_utter_num", "*", "max_utter_len", ",", "output_dim", "]", ")", "# [batch_size, max_utter_num*max_utter_len, rnn_size*2]", "\n", "response_output", "=", "tf", ".", "reshape", "(", "response_output", ",", "[", "-", "1", ",", "max_response_num", "*", "max_response_len", ",", "output_dim", "]", ")", "# [batch_size, max_response_num*max_response_len, rnn_size*2]", "\n", "\n", "# similarity = [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "similarity", "=", "context_response_similarity_matrix", "(", "utterances_output", ",", "response_output", ",", "self", ".", "distance", ",", "max_utter_num", ",", "max_utter_len", ",", "max_response_num", ",", "max_response_len", ")", "\n", "attended_utterances_output", "=", "attended_context", "(", "similarity", ",", "response_output", ",", "flattened_responses_len", ",", "max_response_len", ",", "max_response_num", ")", "# [batch_size, max_utter_num*max_utter_len, dim]", "\n", "attended_response_output", "=", "attended_response", "(", "similarity", ",", "utterances_output", ",", "flattened_utterances_len", ",", "max_utter_len", ",", "max_utter_num", ")", "# [batch_size, max_response_num*response_len, dim]", "\n", "\n", "m_u", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "utterances_output", ",", "attended_utterances_output", ",", "tf", ".", "multiply", "(", "utterances_output", ",", "attended_utterances_output", ")", ",", "utterances_output", "-", "attended_utterances_output", "]", ")", "# [batch_size, max_utter_num*max_utter_len, dim]", "\n", "m_r", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "response_output", ",", "attended_response_output", ",", "tf", ".", "multiply", "(", "response_output", ",", "attended_response_output", ")", ",", "response_output", "-", "attended_response_output", "]", ")", "# [batch_size, max_response_num*response_len, dim]", "\n", "concat_dim", "=", "m_u", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "m_u", "=", "tf", ".", "reshape", "(", "m_u", ",", "[", "-", "1", ",", "max_utter_len", ",", "concat_dim", "]", ")", "# [batch_size*max_utter_num, max_utter_len, dim]", "\n", "m_r", "=", "tf", ".", "reshape", "(", "m_r", ",", "[", "-", "1", ",", "max_response_len", ",", "concat_dim", "]", ")", "# [batch_size*max_response_num, response_len, dim]", "\n", "print", "(", "\"establish matching between utterances and response\"", ")", "\n", "\n", "\n", "# =============================== Aggregation layer ===============================", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"aggregation_layer\"", ")", "as", "vs", ":", "\n", "# context (maxAndState_max, maxAndState_state)", "\n", "            ", "rnn_scope_cross", "=", "'bidirectional_rnn_cross'", "\n", "u_rnn_output_2", ",", "u_rnn_state_2", "=", "lstm_layer", "(", "m_u", ",", "flattened_utterances_len", ",", "rnn_size", ",", "self", ".", "dropout_keep_prob", ",", "rnn_scope_cross", ",", "scope_reuse", "=", "False", ")", "\n", "utterances_output_cross", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "u_rnn_output_2", ")", "# [batch_size*max_utter_num, max_utter_len, 2*rnn_size]", "\n", "final_utterances_max", "=", "tf", ".", "reduce_max", "(", "utterances_output_cross", ",", "axis", "=", "1", ")", "\n", "final_utterances_state", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "u_rnn_state_2", "[", "0", "]", ".", "h", ",", "u_rnn_state_2", "[", "1", "]", ".", "h", "]", ")", "\n", "final_utterances", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "final_utterances_max", ",", "final_utterances_state", "]", ")", "\n", "final_utterances", "=", "tf", ".", "reshape", "(", "final_utterances", ",", "[", "-", "1", ",", "max_utter_num", ",", "output_dim", "*", "2", "]", ")", "# [batch_size, max_utter_num, 4*rnn_size]", "\n", "\n", "rnn_scope_aggre", "=", "\"bidirectional_rnn_aggregation\"", "\n", "final_utterances_output", ",", "final_utterances_state", "=", "lstm_layer", "(", "final_utterances", ",", "self", ".", "utters_num", ",", "rnn_size", ",", "self", ".", "dropout_keep_prob", ",", "rnn_scope_aggre", ",", "scope_reuse", "=", "False", ")", "\n", "final_utterances_output", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "final_utterances_output", ")", "# [batch_size, max_utter_num, 2*rnn_size]", "\n", "final_utterances_max", "=", "tf", ".", "reduce_max", "(", "final_utterances_output", ",", "axis", "=", "1", ")", "# [batch_size, 2*rnn_size]", "\n", "final_utterances_state", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "final_utterances_state", "[", "0", "]", ".", "h", ",", "final_utterances_state", "[", "1", "]", ".", "h", "]", ")", "# [batch_size, 2*rnn_size]", "\n", "\n", "final_utterances", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "final_utterances_max", ",", "final_utterances_state", "]", ")", "\n", "print", "(", "\"establish rnn aggregation on response\"", ")", "\n", "\n", "# response", "\n", "r_rnn_output_2", ",", "r_rnn_state_2", "=", "lstm_layer", "(", "m_r", ",", "flattened_responses_len", ",", "rnn_size", ",", "self", ".", "dropout_keep_prob", ",", "rnn_scope_cross", ",", "scope_reuse", "=", "True", ")", "\n", "response_output_cross", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "r_rnn_output_2", ")", "# [batch_size, max_response_len, rnn_size*2]", "\n", "final_response_max", "=", "tf", ".", "reduce_max", "(", "response_output_cross", ",", "axis", "=", "1", ")", "\n", "final_response_state", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "r_rnn_state_2", "[", "0", "]", ".", "h", ",", "r_rnn_state_2", "[", "1", "]", ".", "h", "]", ")", "\n", "final_response", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "final_response_max", ",", "final_response_state", "]", ")", "\n", "final_response", "=", "tf", ".", "reshape", "(", "final_response", ",", "[", "-", "1", ",", "max_response_num", ",", "output_dim", "*", "2", "]", ")", "# [batch_size, max_response_num, 4*rnn_size]", "\n", "\n", "# 1. RNN aggregation", "\n", "# final_response_output, final_response_state = lstm_layer(final_response, self.responses_num, rnn_size, self.dropout_keep_prob, rnn_scope_aggre, scope_reuse=True)", "\n", "# final_response_output = tf.concat(axis=2, values=final_response_output)   # [batch_size, max_response_num, 2*rnn_size]", "\n", "# final_response_max = tf.reduce_max(final_response_output, axis=1)         # [batch_size, 2*rnn_size]", "\n", "# final_response_state = tf.concat(axis=1, values=[final_response_state[0].h, final_response_state[1].h])  # [batch_size, 2*rnn_size]", "\n", "# final_response =  tf.concat(axis=1, values=[final_response_max, final_response_state])", "\n", "# print(\"establish rnn aggregation on response\")", "\n", "\n", "# 2. position_attention aggregation", "\n", "res_weights", "=", "tf", ".", "get_variable", "(", "\"res_scores\"", ",", "[", "1", ",", "max_response_num", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "# [1, max_response_num]", "\n", "res_mask", "=", "tf", ".", "sequence_mask", "(", "self", ".", "responses_num", ",", "max_response_num", ",", "dtype", "=", "tf", ".", "float32", ")", "# [batch_size, max_response_num]", "\n", "res_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "res_weights", "*", "res_mask", "+", "-", "1e9", "*", "(", "1", "-", "res_mask", ")", ")", "# [batch_size, max_response_num]", "\n", "final_response_att", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "final_response", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "# [batch_size, dim, max_response_num]", "\n", "tf", ".", "expand_dims", "(", "res_weights", ",", "-", "1", ")", ")", "# [batch_size, max_response_num, 1]  ==> [batch_size, dim, 1]", "\n", "final_response_att", "=", "tf", ".", "squeeze", "(", "final_response_att", ",", "[", "-", "1", "]", ")", "# [batch_size, dim]", "\n", "final_response", "=", "final_response_att", "\n", "print", "(", "\"establish position attention aggregation on response\"", ")", "\n", "\n", "# 3. self_attention aggregation", "\n", "# proj_W = tf.get_variable(\"proj_W\", [output_dim*2, 1], initializer=tf.orthogonal_initializer())", "\n", "# proj_b = tf.get_variable(\"proj_b\", [1, ], initializer=tf.constant_initializer(0.0))", "\n", "# res_weights = tf.einsum('bij,jk->bik', final_response, proj_W) + proj_b              # [batch_size, max_response_num, 1]", "\n", "# res_weights = tf.squeeze(res_weights, [-1])                                          # [batch_size, max_response_num]", "\n", "# res_mask = tf.sequence_mask(self.responses_num, max_response_num, dtype=tf.float32)  # [batch_size, max_response_num]", "\n", "# res_weights = tf.nn.softmax(res_weights * res_mask + -1e9 * (1-res_mask))            # [batch_size, max_response_num]", "\n", "# final_response_att = tf.matmul(tf.transpose(final_response, perm=[0,2,1]),  # [batch_size, dim, max_response_num]", "\n", "#                                tf.expand_dims(res_weights, -1))             # [batch_size, max_response_num, 1]  ==> [batch_size, dim, 1]", "\n", "# final_response_att = tf.squeeze(final_response_att, [-1])                   # [batch_size, dim]", "\n", "# final_response = final_response_att", "\n", "# print(\"establish self project attention aggregation on response\")", "\n", "\n", "final_response", "=", "tf", ".", "nn", ".", "dropout", "(", "final_response", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "joined_feature", "=", "tf", ".", "concat", "(", "axis", "=", "1", ",", "values", "=", "[", "final_utterances", ",", "final_response", "]", ")", "# [batch_size, 8*rnn_size(1600)]", "\n", "print", "(", "\"joined feature: {}\"", ".", "format", "(", "joined_feature", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "\n", "# =============================== Prediction layer ===============================", "\n", "", "with", "tf", ".", "variable_scope", "(", "\"prediction_layer\"", ")", "as", "vs", ":", "\n", "            ", "hidden_input_size", "=", "joined_feature", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "hidden_output_size", "=", "256", "\n", "regularizer", "=", "tf", ".", "contrib", ".", "layers", ".", "l2_regularizer", "(", "l2_reg_lambda", ")", "\n", "joined_feature", "=", "tf", ".", "nn", ".", "dropout", "(", "joined_feature", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "full_out", "=", "tf", ".", "contrib", ".", "layers", ".", "fully_connected", "(", "joined_feature", ",", "hidden_output_size", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "reuse", "=", "False", ",", "\n", "trainable", "=", "True", ",", "\n", "scope", "=", "\"projected_layer\"", ")", "# [batch_size, hidden_output_size(256)]", "\n", "full_out", "=", "tf", ".", "nn", ".", "dropout", "(", "full_out", ",", "keep_prob", "=", "self", ".", "dropout_keep_prob", ")", "\n", "\n", "last_weight_dim", "=", "full_out", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "print", "(", "\"last_weight_dim: {}\"", ".", "format", "(", "last_weight_dim", ")", ")", "\n", "bias", "=", "tf", ".", "Variable", "(", "tf", ".", "constant", "(", "0.1", ",", "shape", "=", "[", "1", "]", ")", ",", "name", "=", "\"bias\"", ")", "\n", "s_w", "=", "tf", ".", "get_variable", "(", "\"s_w\"", ",", "shape", "=", "[", "last_weight_dim", ",", "1", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "logits", "=", "tf", ".", "matmul", "(", "full_out", ",", "s_w", ")", "+", "bias", "# [batch_size, 1]", "\n", "print", "(", "\"logits: {}\"", ".", "format", "(", "logits", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "logits", "=", "tf", ".", "squeeze", "(", "logits", ",", "[", "1", "]", ")", "# [batch_size, ]", "\n", "self", ".", "probs", "=", "tf", ".", "sigmoid", "(", "logits", ",", "name", "=", "\"prob\"", ")", "# [batch_size, ]", "\n", "\n", "losses", "=", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "logits", ",", "labels", "=", "self", ".", "target", ")", "\n", "losses", "=", "tf", ".", "multiply", "(", "losses", ",", "self", ".", "target_loss_weight", ")", "\n", "self", ".", "mean_loss", "=", "tf", ".", "reduce_mean", "(", "losses", ",", "name", "=", "\"mean_loss\"", ")", "+", "l2_reg_lambda", "*", "l2_loss", "+", "sum", "(", "\n", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ")", ")", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"accuracy\"", ")", ":", "\n", "            ", "correct_prediction", "=", "tf", ".", "equal", "(", "tf", ".", "sign", "(", "self", ".", "probs", "-", "0.5", ")", ",", "tf", ".", "sign", "(", "self", ".", "target", "-", "0.5", ")", ")", "# [batch_size, ]", "\n", "self", ".", "accuracy", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "cast", "(", "correct_prediction", ",", "\"float\"", ")", ",", "name", "=", "\"accuracy\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_embeddings": [[6, 10], ["print", "model_U2U_IMN.load_word_embeddings", "tensorflow.constant"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.load_word_embeddings"], ["def", "get_embeddings", "(", "vocab", ")", ":", "\n", "    ", "print", "(", "\"get_embedding\"", ")", "\n", "initializer", "=", "load_word_embeddings", "(", "vocab", ",", "FLAGS", ".", "embedding_dim", ")", "\n", "return", "tf", ".", "constant", "(", "initializer", ",", "name", "=", "\"word_embedding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_char_embedding": [[11, 19], ["print", "len", "numpy.zeros", "range", "tensorflow.constant"], "function", ["None"], ["", "def", "get_char_embedding", "(", "charVocab", ")", ":", "\n", "    ", "print", "(", "\"get_char_embedding\"", ")", "\n", "char_size", "=", "len", "(", "charVocab", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "char_size", ",", "char_size", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "char_size", ")", ":", "\n", "        ", "embeddings", "[", "i", ",", "i", "]", "=", "1.0", "\n", "\n", "", "return", "tf", ".", "constant", "(", "embeddings", ",", "name", "=", "\"word_char_embedding\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.load_embed_vectors": [[20, 31], ["open", "line.strip().split", "len", "float", "line.strip", "range"], "function", ["None"], ["", "def", "load_embed_vectors", "(", "fname", ",", "dim", ")", ":", "\n", "# vectors = { 'the': [0.2911, 0.3288, 0.2002,...], ... }", "\n", "    ", "vectors", "=", "{", "}", "\n", "for", "line", "in", "open", "(", "fname", ",", "'rt'", ")", ":", "\n", "        ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "' '", ")", "\n", "if", "len", "(", "items", "[", "0", "]", ")", "<=", "0", ":", "\n", "            ", "continue", "\n", "", "vec", "=", "[", "float", "(", "items", "[", "i", "]", ")", "for", "i", "in", "range", "(", "1", ",", "dim", "+", "1", ")", "]", "\n", "vectors", "[", "items", "[", "0", "]", "]", "=", "vec", "\n", "\n", "", "return", "vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.load_word_embeddings": [[32, 43], ["model_U2U_IMN.load_embed_vectors", "len", "numpy.zeros", "vocab.items"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.load_embed_vectors"], ["", "def", "load_word_embeddings", "(", "vocab", ",", "dim", ")", ":", "\n", "    ", "vectors", "=", "load_embed_vectors", "(", "FLAGS", ".", "embedded_vector_file", ",", "dim", ")", "\n", "vocab_size", "=", "len", "(", "vocab", ")", "\n", "embeddings", "=", "np", ".", "zeros", "(", "(", "vocab_size", ",", "dim", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "word", ",", "code", "in", "vocab", ".", "items", "(", ")", ":", "\n", "        ", "if", "word", "in", "vectors", ":", "\n", "            ", "embeddings", "[", "code", "]", "=", "vectors", "[", "word", "]", "\n", "#else:", "\n", "#    embeddings[code] = np.random.uniform(-0.25, 0.25, dim) ", "\n", "\n", "", "", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer": [[45, 56], ["tensorflow.variable_scope", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "tensorflow.contrib.rnn.LSTMCell", "tensorflow.contrib.rnn.DropoutWrapper", "tensorflow.nn.bidirectional_dynamic_rnn"], "function", ["None"], ["", "def", "lstm_layer", "(", "inputs", ",", "input_seq_len", ",", "rnn_size", ",", "dropout_keep_prob", ",", "scope", ",", "scope_reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "scope_reuse", ")", "as", "vs", ":", "\n", "        ", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "rnn_size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ",", "reuse", "=", "scope_reuse", ")", "\n", "fw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "fw_cell", ",", "output_keep_prob", "=", "dropout_keep_prob", ")", "\n", "bw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "LSTMCell", "(", "rnn_size", ",", "forget_bias", "=", "1.0", ",", "state_is_tuple", "=", "True", ",", "reuse", "=", "scope_reuse", ")", "\n", "bw_cell", "=", "tf", ".", "contrib", ".", "rnn", ".", "DropoutWrapper", "(", "bw_cell", ",", "output_keep_prob", "=", "dropout_keep_prob", ")", "\n", "rnn_outputs", ",", "rnn_states", "=", "tf", ".", "nn", ".", "bidirectional_dynamic_rnn", "(", "cell_fw", "=", "fw_cell", ",", "cell_bw", "=", "bw_cell", ",", "\n", "inputs", "=", "inputs", ",", "\n", "sequence_length", "=", "input_seq_len", ",", "\n", "dtype", "=", "tf", ".", "float32", ")", "\n", "return", "rnn_outputs", ",", "rnn_states", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.multi_lstm_layer": [[57, 80], ["tensorflow.variable_scope", "range", "tensorflow.nn.softmax", "tensorflow.stack", "tensorflow.reshape", "tensorflow.matmul", "tensorflow.reshape", "model_U2U_IMN.lstm_layer", "tensorflow.concat", "tf.stack.append", "multi_states.append", "tensorflow.get_variable", "tensorflow.expand_dims", "tf.stack.get_shape", "tf.stack.get_shape", "str", "tensorflow.constant_initializer"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.lstm_layer"], ["", "", "def", "multi_lstm_layer", "(", "inputs", ",", "input_seq_len", ",", "rnn_size", ",", "dropout_keep_prob", ",", "num_layer", ",", "scope", ",", "scope_reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "scope_reuse", ")", "as", "vs", ":", "\n", "        ", "multi_outputs", "=", "[", "]", "\n", "multi_states", "=", "[", "]", "\n", "cur_inputs", "=", "inputs", "\n", "for", "i_layer", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "rnn_outputs", ",", "rnn_states", "=", "lstm_layer", "(", "cur_inputs", ",", "input_seq_len", ",", "rnn_size", ",", "dropout_keep_prob", ",", "scope", "+", "str", "(", "i_layer", ")", ",", "scope_reuse", ")", "\n", "rnn_outputs", "=", "tf", ".", "concat", "(", "values", "=", "rnn_outputs", ",", "axis", "=", "2", ")", "\n", "multi_outputs", ".", "append", "(", "rnn_outputs", ")", "\n", "multi_states", ".", "append", "(", "rnn_states", ")", "\n", "cur_inputs", "=", "rnn_outputs", "\n", "\n", "# multi_layer_aggregation", "\n", "", "ml_weights", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "get_variable", "(", "\"ml_scores\"", ",", "[", "num_layer", ",", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", ")", "\n", "\n", "multi_outputs", "=", "tf", ".", "stack", "(", "multi_outputs", ",", "axis", "=", "-", "1", ")", "# [batch_size, max_len, 2*rnn_size(400), num_layer]", "\n", "max_len", "=", "multi_outputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "dim", "=", "multi_outputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "flattened_multi_outputs", "=", "tf", ".", "reshape", "(", "multi_outputs", ",", "[", "-", "1", ",", "num_layer", "]", ")", "# [batch_size * max_len * 2*rnn_size(400), num_layer]", "\n", "aggregated_ml_outputs", "=", "tf", ".", "matmul", "(", "flattened_multi_outputs", ",", "tf", ".", "expand_dims", "(", "ml_weights", ",", "1", ")", ")", "# [batch_size * max_len * 2*rnn_size(400), 1]", "\n", "aggregated_ml_outputs", "=", "tf", ".", "reshape", "(", "aggregated_ml_outputs", ",", "[", "-", "1", ",", "max_len", ",", "dim", "]", ")", "# [batch_size , max_len , 2*rnn_size(400)]", "\n", "\n", "return", "aggregated_ml_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.cnn_layer": [[82, 96], ["tensorflow.concat", "tensorflow.variable_scope", "enumerate", "tensorflow.nn.conv1d", "tensorflow.nn.relu", "tensorflow.reduce_max", "outputs.append", "inputs.get_shape", "tensorflow.variable_scope", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.bias_add"], "function", ["None"], ["", "", "def", "cnn_layer", "(", "inputs", ",", "filter_sizes", ",", "num_filters", ",", "scope", "=", "None", ",", "scope_reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "scope_reuse", ")", ":", "\n", "        ", "input_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "filter_size", "in", "enumerate", "(", "filter_sizes", ")", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "\"conv_{}\"", ".", "format", "(", "i", ")", ")", ":", "\n", "                ", "w", "=", "tf", ".", "get_variable", "(", "\"w\"", ",", "[", "filter_size", ",", "input_size", ",", "num_filters", "]", ")", "\n", "b", "=", "tf", ".", "get_variable", "(", "\"b\"", ",", "[", "num_filters", "]", ")", "\n", "", "conv", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "w", ",", "stride", "=", "1", ",", "padding", "=", "\"VALID\"", ")", "# [num_words, num_chars - filter_size, num_filters]", "\n", "h", "=", "tf", ".", "nn", ".", "relu", "(", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "b", ")", ")", "# [num_words, num_chars - filter_size, num_filters]", "\n", "pooled", "=", "tf", ".", "reduce_max", "(", "h", ",", "1", ")", "# [num_words, num_filters]", "\n", "outputs", ".", "append", "(", "pooled", ")", "\n", "", "", "return", "tf", ".", "concat", "(", "outputs", ",", "1", ")", "# [num_words, num_filters * len(filter_sizes)]", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_dist_mask": [[98, 104], ["numpy.zeros", "range", "tensorflow.constant", "range", "abs"], "function", ["None"], ["", "def", "get_dist_mask", "(", "max_len", ")", ":", "\n", "    ", "mask", "=", "np", ".", "zeros", "(", "(", "max_len", ",", "max_len", ")", ",", "dtype", "=", "'float32'", ")", "\n", "for", "i", "in", "range", "(", "max_len", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "max_len", ")", ":", "\n", "            ", "mask", "[", "i", ",", "j", "]", "=", "abs", "(", "i", "-", "j", ")", "\n", "", "", "return", "tf", ".", "constant", "(", "mask", ",", "name", "=", "\"distance_mask\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.self_attended": [[105, 128], ["tensorflow.variable_scope", "tensorflow.matmul", "model_U2U_IMN.get_dist_mask", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "print", "tensorflow.sequence_mask", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.transpose", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.abs", "tensorflow.square"], "function", ["home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.get_dist_mask"], ["", "def", "self_attended", "(", "inputs", ",", "lens", ",", "max_len", ",", "scope", ",", "scope_reuse", "=", "False", ")", ":", "\n", "# inputs: [batch_size, max_len, dim]", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "scope_reuse", ")", ":", "\n", "        ", "self_similarity", "=", "tf", ".", "matmul", "(", "inputs", ",", "tf", ".", "transpose", "(", "inputs", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "name", "=", "'self_similarity_matrix'", ")", "# [batch_size, max_len, max_len]", "\n", "\n", "# Gaussian similarity", "\n", "dist_mask", "=", "get_dist_mask", "(", "max_len", ")", "# [max_len, max_len]", "\n", "dist_w", "=", "tf", ".", "get_variable", "(", "\"dist_w\"", ",", "[", "1", ",", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.1", ")", ")", "\n", "dist_b", "=", "tf", ".", "get_variable", "(", "\"dist_b\"", ",", "[", "1", ",", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "-", "0.1", ")", ")", "\n", "dist_w", "=", "tf", ".", "clip_by_value", "(", "dist_w", ",", "clip_value_min", "=", "0", ",", "clip_value_max", "=", "1000", ")", "\n", "dist_b", "=", "tf", ".", "clip_by_value", "(", "dist_b", ",", "clip_value_min", "=", "-", "1000", ",", "clip_value_max", "=", "0", ")", "\n", "self_similarity", "=", "-", "tf", ".", "abs", "(", "dist_w", "*", "tf", ".", "square", "(", "dist_mask", ")", "+", "dist_b", ")", "+", "self_similarity", "\n", "print", "(", "\"establish gaussian prior\"", ")", "\n", "\n", "# masked similarity", "\n", "mask", "=", "tf", ".", "sequence_mask", "(", "lens", ",", "max_len", ",", "dtype", "=", "tf", ".", "float32", ")", "# [batch_size, max_len]", "\n", "mask", "=", "tf", ".", "expand_dims", "(", "mask", ",", "2", ")", "# [batch_size, max_len, 1]", "\n", "self_similarity", "=", "self_similarity", "*", "mask", "+", "-", "1e9", "*", "(", "1", "-", "mask", ")", "# [batch_size, max_len, max_len]", "\n", "\n", "attention_weight_for_self", "=", "tf", ".", "nn", ".", "softmax", "(", "self_similarity", ",", "dim", "=", "-", "1", ")", "# [batch_size, max_len, max_len]", "\n", "attended_self", "=", "tf", ".", "matmul", "(", "attention_weight_for_self", ",", "inputs", ")", "# [batch_size, max_len, dim]", "\n", "\n", "", "return", "attended_self", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.context_response_similarity_matrix": [[132, 151], ["tensorflow.transpose", "tensorflow.matmul", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.reshape", "print", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "function", ["None"], ["", "def", "context_response_similarity_matrix", "(", "context", ",", "response", ",", "distance", ",", "max_utter_num", ",", "max_utter_len", ",", "max_response_num", ",", "max_response_len", ")", ":", "\n", "\n", "    ", "c2", "=", "tf", ".", "transpose", "(", "context", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "similarity", "=", "tf", ".", "matmul", "(", "response", ",", "c2", ",", "name", "=", "'similarity_matrix'", ")", "# [batch_size, max_response_num*max_response_len, max_utter_num*max_utter_len]", "\n", "\n", "# exponential decay", "\n", "similarity", "=", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "max_response_num", ",", "max_response_len", ",", "max_utter_num", ",", "max_utter_len", "]", ",", "name", "=", "'similarity_RnumU'", ")", "\n", "distance", "=", "tf", ".", "expand_dims", "(", "distance", ",", "2", ")", "# [batch_size, max_response_num, 1, max_utter_num]", "\n", "distance", "=", "tf", ".", "expand_dims", "(", "distance", ",", "-", "1", ")", "# [batch_size, max_response_num, 1, max_utter_num, 1]", "\n", "dist_w", "=", "tf", ".", "get_variable", "(", "\"dist_w\"", ",", "[", "1", ",", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "dist_b", "=", "tf", ".", "get_variable", "(", "\"dist_b\"", ",", "[", "1", ",", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "dist_w", "=", "tf", ".", "clip_by_value", "(", "dist_w", ",", "clip_value_min", "=", "0", ",", "clip_value_max", "=", "1000", ")", "\n", "dist_b", "=", "tf", ".", "clip_by_value", "(", "dist_b", ",", "clip_value_min", "=", "-", "1000", ",", "clip_value_max", "=", "0", ")", "\n", "\n", "similarity", "=", "-", "dist_w", "*", "distance", "+", "dist_b", "+", "similarity", "\n", "similarity", "=", "tf", ".", "reshape", "(", "similarity", ",", "[", "-", "1", ",", "max_response_num", "*", "max_response_len", ",", "max_utter_num", "*", "max_utter_len", "]", ",", "name", "=", "'similarity_decayed'", ")", "\n", "print", "(", "\"establish exponential prior\"", ")", "\n", "\n", "return", "similarity", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.attended_response": [[152, 167], ["tensorflow.sequence_mask", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.matmul"], "function", ["None"], ["", "def", "attended_response", "(", "similarity_matrix", ",", "context", ",", "flattened_utters_len", ",", "max_utter_len", ",", "max_utter_num", ")", ":", "\n", "# similarity_matrix:    [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "# context:              [batch_size, max_utter_num*max_utter_len, dim]", "\n", "# flattened_utters_len: [batch_size* max_utter_num, ]", "\n", "\n", "# masked similarity_matrix", "\n", "    ", "mask_c", "=", "tf", ".", "sequence_mask", "(", "flattened_utters_len", ",", "max_utter_len", ",", "dtype", "=", "tf", ".", "float32", ")", "# [batch_size*max_utter_num, max_utter_len]", "\n", "mask_c", "=", "tf", ".", "reshape", "(", "mask_c", ",", "[", "-", "1", ",", "max_utter_num", "*", "max_utter_len", "]", ")", "# [batch_size, max_utter_num*max_utter_len]", "\n", "mask_c", "=", "tf", ".", "expand_dims", "(", "mask_c", ",", "1", ")", "# [batch_size, 1, max_utter_num*max_utter_len]", "\n", "similarity_matrix", "=", "similarity_matrix", "*", "mask_c", "+", "-", "1e9", "*", "(", "1", "-", "mask_c", ")", "# [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "\n", "attention_weight_for_c", "=", "tf", ".", "nn", ".", "softmax", "(", "similarity_matrix", ",", "dim", "=", "-", "1", ")", "# [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "attended_response", "=", "tf", ".", "matmul", "(", "attention_weight_for_c", ",", "context", ")", "# [batch_size, max_response_num*response_len, dim]", "\n", "\n", "return", "attended_response", "\n", "\n"]], "home.repos.pwc.inspect_result.JasonForJoy_U2U-IMN.model.model_U2U_IMN.attended_context": [[168, 183], ["tensorflow.sequence_mask", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.nn.softmax", "tensorflow.matmul", "tensorflow.transpose"], "function", ["None"], ["", "def", "attended_context", "(", "similarity_matrix", ",", "response", ",", "flattened_responses_len", ",", "max_response_len", ",", "max_response_num", ")", ":", "\n", "# similarity_matrix:    [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "# response:             [batch_size, max_response_num*response_len, dim]", "\n", "# flattened_utters_len: [batch_size* max_response_num, ]", "\n", "\n", "# masked similarity_matrix", "\n", "    ", "mask_r", "=", "tf", ".", "sequence_mask", "(", "flattened_responses_len", ",", "max_response_len", ",", "dtype", "=", "tf", ".", "float32", ")", "# [batch_size*max_response_num, response_len]", "\n", "mask_r", "=", "tf", ".", "reshape", "(", "mask_r", ",", "[", "-", "1", ",", "max_response_num", "*", "max_response_len", "]", ")", "# [batch_size, max_response_num*response_len]", "\n", "mask_r", "=", "tf", ".", "expand_dims", "(", "mask_r", ",", "2", ")", "# [batch_size, max_response_num*response_len, 1]", "\n", "similarity_matrix", "=", "similarity_matrix", "*", "mask_r", "+", "-", "1e9", "*", "(", "1", "-", "mask_r", ")", "# [batch_size, max_response_num*response_len, max_utter_num*max_utter_len]", "\n", "\n", "attention_weight_for_r", "=", "tf", ".", "nn", ".", "softmax", "(", "tf", ".", "transpose", "(", "similarity_matrix", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", ",", "dim", "=", "-", "1", ")", "# [batch_size, max_utter_num*max_utter_len, max_response_num*response_len]", "\n", "attended_context", "=", "tf", ".", "matmul", "(", "attention_weight_for_r", ",", "response", ")", "# [batch_size, max_utter_num*max_utter_len, dim]", "\n", "\n", "return", "attended_context", "\n", "\n"]]}