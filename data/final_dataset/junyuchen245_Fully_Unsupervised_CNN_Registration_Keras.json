{"home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.Mapping_nn": [[14, 19], ["image_warp.image_warp"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp"], ["def", "Mapping_nn", "(", "input", ")", ":", "\n", "    ", "a", "=", "input", "[", "0", "]", "\n", "b", "=", "input", "[", "1", "]", "\n", "output", "=", "image_warp", ".", "image_warp", "(", "a", ",", "b", ",", "'NN'", ",", "name", "=", "'dense_image_warp'", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.Mapping": [[20, 25], ["tensorflow.contrib.image.dense_image_warp"], "function", ["None"], ["", "def", "Mapping", "(", "input", ")", ":", "\n", "    ", "a", "=", "input", "[", "0", "]", "\n", "b", "=", "input", "[", "1", "]", "\n", "output", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "a", ",", "b", ",", "name", "=", "'dense_image_warp'", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.concLayer": [[26, 31], ["concatenate"], "function", ["None"], ["", "def", "concLayer", "(", "input", ")", ":", "\n", "    ", "u", "=", "input", "[", "0", "]", "\n", "v", "=", "input", "[", "1", "]", "\n", "output", "=", "concatenate", "(", "[", "u", ",", "v", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.conv_block": [[32, 41], ["getattr", "getattr.", "BatchNormalization", "getattr.", "BatchNormalization"], "function", ["None"], ["", "def", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "strides", "=", "1", ")", ":", "\n", "    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "\n", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "x_in", ")", "\n", "conv_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "conv_out", ")", "\n", "x_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.convPool_block": [[42, 49], ["getattr", "nets.conv_block", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["", "def", "convPool_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "    ", "MaxPool", "=", "getattr", "(", "KL", ",", "'MaxPool%dD'", "%", "ndims", ")", "\n", "\n", "\n", "conv_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "x_out", "=", "MaxPool", "(", "pool_size", "=", "pool_size", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.convUp_block": [[50, 60], ["getattr", "getattr", "concatenate", "nets.conv_block", "getattr.", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["", "def", "convUp_block", "(", "x_in1", ",", "x_in2", ",", "nf", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "UpSampling", "=", "getattr", "(", "KL", ",", "'UpSampling%dD'", "%", "ndims", ")", "\n", "\n", "\n", "up_out", "=", "UpSampling", "(", "size", "=", "up_size", ")", "(", "x_in1", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "up_out", ")", "\n", "x_in", "=", "concatenate", "(", "[", "conv_out", ",", "x_in2", "]", ")", "\n", "x_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "return", "x_out", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.unetND": [[62, 94], ["Input", "Input", "concatenate", "getattr", "range", "nets.conv_block", "range", "keras.models.Model", "x_enc.append", "nets.convUp_block", "getattr.", "BatchNormalization", "getattr.", "Lambda", "len", "nets.convPool_block", "len"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convUp_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convPool_block"], ["", "def", "unetND", "(", "input_size", "=", "(", "384", ",", "384", ",", "1", ")", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "#enc_nf = [16, 32, 64, 128, 256] # 384 192 96 48 24", "\n", "#dec_nf = [128, 64, 32, 16]", "\n", "    ", "enc_nf", "=", "[", "24", ",", "24", ",", "24", ",", "24", "]", "\n", "dec_nf", "=", "[", "24", ",", "24", ",", "24", "]", "\n", "\n", "moving", "=", "Input", "(", "input_size", ")", "\n", "target", "=", "Input", "(", "input_size", ")", "\n", "\n", "x_in", "=", "concatenate", "(", "[", "moving", ",", "target", "]", ")", "\n", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "\n", "# encoder", "\n", "x_enc", "=", "[", "x_in", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "enc_nf", ")", "-", "1", ")", ":", "\n", "        ", "x_enc", ".", "append", "(", "convPool_block", "(", "x_enc", "[", "-", "1", "]", ",", "enc_nf", "[", "i", "]", ",", "ndims", ",", "pool_size", ")", ")", "\n", "", "x_bot", "=", "conv_block", "(", "x_enc", "[", "-", "1", "]", ",", "enc_nf", "[", "-", "1", "]", ",", "ndims", ")", "\n", "# up-sample path (decoder)", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "dec_nf", ")", "+", "2", ")", ":", "\n", "        ", "x", "=", "convUp_block", "(", "x_bot", ",", "x_enc", "[", "-", "i", "]", ",", "dec_nf", "[", "i", "-", "2", "]", ",", "ndims", ",", "up_size", ")", "\n", "x_bot", "=", "x", "\n", "\n", "# form deformation field", "\n", "", "x", "=", "Conv", "(", "filters", "=", "16", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "#reg.Grad('l2',1)", "\n", "x", "=", "Conv", "(", "filters", "=", "ndims", ",", "kernel_size", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'deformField'", ")", "(", "x", ")", "\n", "\n", "# deform moving image", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping'", ")", "(", "[", "moving", ",", "x", "]", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "target", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.nets.mapping": [[95, 102], ["Input", "Input", "keras.models.Model", "Lambda"], "function", ["None"], ["", "def", "mapping", "(", "input_sz1", "=", "(", "384", ",", "384", ",", "1", ")", ",", "input_sz2", "=", "(", "384", ",", "384", ",", "2", ")", ")", ":", "\n", "    ", "moving", "=", "Input", "(", "input_sz1", ")", "\n", "vec_field", "=", "Input", "(", "input_sz2", ")", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping_nn'", ")", "(", "[", "moving", ",", "vec_field", "]", ")", "\n", "#deformMoving = nrn_layers.SpatialTransformer(interp_method='nearest', indexing='ij')([moving, vec_field])", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "vec_field", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.reset_weights": [[15, 20], ["keras.backend.get_session", "hasattr", "layer.kernel.initializer.run"], "function", ["None"], ["def", "reset_weights", "(", "model", ")", ":", "\n", "    ", "session", "=", "K", ".", "get_session", "(", ")", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'kernel_initializer'", ")", ":", "\n", "            ", "layer", ".", "kernel", ".", "initializer", ".", "run", "(", "session", "=", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.detJacobian": [[21, 30], ["numpy.gradient", "numpy.gradient", "numpy.zeros", "range", "range", "numpy.linalg.det"], "function", ["None"], ["", "", "", "def", "detJacobian", "(", "Axij", ",", "Ayij", ",", "**", "kwargs", ")", ":", "\n", "    ", "[", "xFX", ",", "xFY", "]", "=", "np", ".", "gradient", "(", "Axij", ")", "\n", "[", "yFX", ",", "yFY", "]", "=", "np", ".", "gradient", "(", "Ayij", ")", "\n", "jac_det", "=", "np", ".", "zeros", "(", "Axij", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "384", ")", ":", "\n", "            ", "jac_mij", "=", "[", "[", "xFX", "[", "i", ",", "j", "]", ",", "xFY", "[", "i", ",", "j", "]", "]", ",", "[", "yFX", "[", "i", ",", "j", "]", ",", "yFY", "[", "i", ",", "j", "]", "]", "]", "\n", "jac_det", "[", "i", ",", "j", "]", "=", "-", "np", ".", "linalg", ".", "det", "(", "jac_mij", ")", "\n", "", "", "return", "jac_det", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.plot_grid": [[31, 36], ["range", "range", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "def", "plot_grid", "(", "gridx", ",", "gridy", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", "i", ",", ":", "]", ",", "gridy", "[", "i", ",", ":", "]", ",", "**", "kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", ":", ",", "i", "]", ",", "gridy", "[", ":", ",", "i", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.display_activation": [[38, 69], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "activation_map[].reshape", "activation_map[].reshape", "range", "matplotlib.figure", "matplotlib.subplot", "main.plot_grid", "matplotlib.gca().invert_yaxis", "matplotlib.title", "matplotlib.subplot", "main.detJacobian", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "range", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian"], ["", "", "def", "display_activation", "(", "activation_map", ",", "filter_num", ",", "img_size", ",", "layer_name", ")", ":", "\n", "\n", "    ", "x", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "\n", "u", "=", "activation_map", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "v", "=", "activation_map", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "\n", "phix", "=", "X", "\n", "phiy", "=", "Y", "\n", "down", "=", "4", "\n", "for", "i", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "# add the displacement for each p(k) in the sum", "\n", "            ", "phix", "[", "i", ",", "j", "]", "=", "phix", "[", "i", ",", "j", "]", "-", "u", "[", "i", ",", "j", "]", "\n", "phiy", "[", "i", ",", "j", "]", "=", "phiy", "[", "i", ",", "j", "]", "-", "v", "[", "i", ",", "j", "]", "\n", "", "", "phixdown", "=", "phix", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "phiydown", "=", "phiy", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "45", ",", "6", ")", ",", "dpi", "=", "150", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "1", ")", "\n", "plot_grid", "(", "phixdown", ",", "phiydown", ",", "color", "=", "\"C0\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "plt", ".", "title", "(", "'Deformed grid'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "2", ")", "\n", "detJac", "=", "detJacobian", "(", "phix", ",", "phiy", ")", "\n", "plt", ".", "imshow", "(", "detJac", ")", ";", "\n", "plt", ".", "title", "(", "'det(Jacobian)'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "return", "(", "detJac", "<=", "0", ")", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.save_act_figs": [[70, 75], ["act_model.predict", "print", "main.display_activation"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.main.display_activation"], ["", "def", "save_act_figs", "(", "act_model", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "activation_maps", "=", "act_model", ".", "predict", "(", "[", "img1", ",", "img2", "]", ")", "\n", "print", "(", "activation_maps", ".", "shape", ")", "\n", "NPdetJac", "=", "display_activation", "(", "activation_maps", ",", "2", ",", "384", ",", "'conv11'", ")", "\n", "return", "NPdetJac", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.image_warp._interpolate_bilinear": [[28, 156], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["def", "_interpolate_bilinear", "(", "grid", ",", "\n", "query_points", ",", "\n", "name", "=", "'interpolate_bilinear'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "alphas", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.image_warp._interpolate_nearest": [[157, 285], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["", "", "def", "_interpolate_nearest", "(", "grid", ",", "\n", "query_points", ",", "\n", "name", "=", "'interpolate_nearest'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "K", ".", "round", "(", "alphas", "[", "0", "]", ")", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.image_warp.image_warp": [[286, 339], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack", "image_warp._interpolate_bilinear", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "image_warp._interpolate_nearest", "print", "image_warp._interpolate_bilinear"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear"], ["", "", "def", "image_warp", "(", "image", ",", "flow", ",", "interp_method", ",", "name", "=", "'dense_image_warp'", ")", ":", "\n", "  ", "\"\"\"Image warping using per-pixel flow vectors.\n  Apply a non-linear warp to the image, where the warp is specified by a dense\n  flow field of offset vectors that define the correspondences of pixel values\n  in the output image back to locations in the  source image. Specifically, the\n  pixel value at output[b, j, i, c] is\n  images[b, j - flow[b, j, i, 0], i - flow[b, j, i, 1], c].\n  The locations specified by this formula do not necessarily map to an int\n  index. Therefore, the pixel value is obtained by bilinear\n  interpolation of the 4 nearest pixels around\n  (b, j - flow[b, j, i, 0], i - flow[b, j, i, 1]). For locations outside\n  of the image, we use the nearest pixel values at the image boundary.\n  Args:\n    image: 4-D float `Tensor` with shape `[batch, height, width, channels]`.\n    flow: A 4-D float `Tensor` with shape `[batch, height, width, 2]`.\n    name: A name for the operation (optional).\n    Note that image and flow can be of type tf.half, tf.float32, or tf.float64,\n    and do not necessarily have to be the same type.\n  Returns:\n    A 4-D float `Tensor` with shape`[batch, height, width, channels]`\n      and same type as input image.\n  Raises:\n    ValueError: if height < 2 or width < 2 or the inputs have the wrong number\n                of dimensions.\n  \"\"\"", "\n", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "image", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "3", "]", ")", "\n", "\n", "# The flow is defined on the image grid. Turn the flow into a list of query", "\n", "# points in the grid space.", "\n", "grid_x", ",", "grid_y", "=", "array_ops", ".", "meshgrid", "(", "\n", "math_ops", ".", "range", "(", "width", ")", ",", "math_ops", ".", "range", "(", "height", ")", ")", "\n", "stacked_grid", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", ",", "flow", ".", "dtype", ")", "\n", "batched_grid", "=", "array_ops", ".", "expand_dims", "(", "stacked_grid", ",", "axis", "=", "0", ")", "\n", "query_points_on_grid", "=", "batched_grid", "-", "flow", "\n", "query_points_flattened", "=", "array_ops", ".", "reshape", "(", "query_points_on_grid", ",", "\n", "[", "batch_size", ",", "height", "*", "width", ",", "2", "]", ")", "\n", "# Compute values at the query points, then reshape the result back to the", "\n", "# image grid.", "\n", "if", "interp_method", "==", "'bilinear'", "or", "interp_method", "==", "'Bilinear'", ":", "\n", "        ", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "elif", "interp_method", "==", "'nearest_neighbor'", "or", "interp_method", "==", "'NN'", ":", "\n", "        ", "interpolated", "=", "_interpolate_nearest", "(", "image", ",", "query_points_flattened", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Running on bi-linear interpolation!'", ")", "\n", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "interpolated", "=", "array_ops", ".", "reshape", "(", "interpolated", ",", "\n", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "return", "interpolated", "\n", "", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.NCC.__init__": [[20, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "win", "=", "None", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "self", ".", "win", "=", "win", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.NCC.ncc": [[25, 70], ["getattr", "tensorflow.ones", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "numpy.prod", "tensorflow.reduce_mean", "len", "I.get_shape().as_list", "I.get_shape"], "methods", ["None"], ["", "def", "ncc", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "# get dimension of volume", "\n", "# assumes I, J are sized [batch_size, *vol_shape, nb_feats]", "\n", "        ", "ndims", "=", "len", "(", "I", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "2", "\n", "assert", "ndims", "in", "[", "1", ",", "2", ",", "3", "]", ",", "\"volumes should be 1 to 3 dimensions. found: %d\"", "%", "ndims", "\n", "\n", "# set window size", "\n", "if", "self", ".", "win", "is", "None", ":", "\n", "            ", "self", ".", "win", "=", "[", "7", "]", "*", "ndims", "\n", "\n", "# get convolution function", "\n", "", "conv_fn", "=", "getattr", "(", "tf", ".", "nn", ",", "'conv%dd'", "%", "ndims", ")", "\n", "\n", "# compute CC squares", "\n", "I2", "=", "I", "*", "I", "\n", "J2", "=", "J", "*", "J", "\n", "IJ", "=", "I", "*", "J", "\n", "\n", "# compute filters", "\n", "sum_filt", "=", "tf", ".", "ones", "(", "[", "*", "self", ".", "win", ",", "1", ",", "1", "]", ")", "\n", "strides", "=", "1", "\n", "if", "ndims", ">", "1", ":", "\n", "            ", "strides", "=", "[", "1", "]", "*", "(", "ndims", "+", "2", ")", "\n", "", "padding", "=", "'SAME'", "\n", "\n", "# compute local sums via convolution", "\n", "I_sum", "=", "conv_fn", "(", "I", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J_sum", "=", "conv_fn", "(", "J", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "I2_sum", "=", "conv_fn", "(", "I2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J2_sum", "=", "conv_fn", "(", "J2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "IJ_sum", "=", "conv_fn", "(", "IJ", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "\n", "# compute cross correlation", "\n", "win_size", "=", "np", ".", "prod", "(", "self", ".", "win", ")", "\n", "u_I", "=", "I_sum", "/", "win_size", "\n", "u_J", "=", "J_sum", "/", "win_size", "\n", "\n", "cross", "=", "IJ_sum", "-", "u_J", "*", "I_sum", "-", "u_I", "*", "J_sum", "+", "u_I", "*", "u_J", "*", "win_size", "\n", "I_var", "=", "I2_sum", "-", "2", "*", "u_I", "*", "I_sum", "+", "u_I", "*", "u_I", "*", "win_size", "\n", "J_var", "=", "J2_sum", "-", "2", "*", "u_J", "*", "J_sum", "+", "u_J", "*", "u_J", "*", "win_size", "\n", "\n", "cc", "=", "cross", "*", "cross", "/", "(", "I_var", "*", "J_var", "+", "self", ".", "eps", ")", "\n", "\n", "# return negative cc.", "\n", "return", "tf", ".", "reduce_mean", "(", "cc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.NCC.loss": [[71, 73], ["losses.NCC.ncc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.ncc"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "-", "self", ".", "ncc", "(", "I", ",", "J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.SSIM.__init__": [[78, 80], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.SSIM.ssim": [[82, 85], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.SSIM.loss": [[86, 88], ["losses.SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC.__init__": [[93, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC.pcc": [[97, 103], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC.loss": [[104, 106], ["losses.PCC.pcc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC_SSIM.__init__": [[111, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pcc_wt", "=", "0.5", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "pcc_wt", "=", "pcc_wt", "\n", "self", ".", "ssim_wt", "=", "1.0", "-", "pcc_wt", "\n", "self", ".", "maxVal", "=", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC_SSIM.pcc": [[116, 122], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC_SSIM.ssim": [[123, 126], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_arxiv.losses.PCC_SSIM.loss": [[127, 129], ["losses.PCC_SSIM.pcc", "losses.PCC_SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "self", ".", "pcc_wt", "*", "(", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", ")", "+", "self", ".", "ssim_wt", "*", "(", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.concLayer": [[10, 15], ["concatenate"], "function", ["None"], ["import", "scipy", ".", "stats", "as", "st", "\n", "import", "tensorflow", "as", "tf", "\n", "from", "scipy", "import", "signal", "\n", "\n", "def", "Mapping_nn", "(", "input", ")", ":", "\n", "    ", "a", "=", "input", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.gkern2": [[18, 28], ["scipy.signal.gaussian", "numpy.outer"], "function", ["None"], ["return", "output", "\n", "\n", "", "def", "Mapping", "(", "input", ")", ":", "\n", "    ", "a", "=", "input", "[", "0", "]", "\n", "b", "=", "input", "[", "1", "]", "\n", "output", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "a", ",", "b", ",", "name", "=", "'dense_image_warp'", ")", "\n", "return", "output", "\n", "\n", "", "def", "concLayer", "(", "input", ")", ":", "\n", "    ", "u", "=", "input", "[", "0", "]", "\n", "v", "=", "input", "[", "1", "]", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.gkern3": [[29, 40], ["scipy.signal.gaussian", "numpy.outer", "numpy.outer", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["output", "=", "concatenate", "(", "[", "u", ",", "v", "]", ")", "\n", "return", "output", "\n", "\n", "", "def", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "strides", "=", "1", ")", ":", "\n", "    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "\n", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "x_in", ")", "\n", "conv_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "conv_out", ")", "\n", "x_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.kernel_init": [[41, 45], ["numpy.zeros", "nets.gkern2"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern2"], ["\n", "", "def", "convPool_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "    ", "MaxPool", "=", "getattr", "(", "KL", ",", "'MaxPool%dD'", "%", "ndims", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.kernel_init3d": [[46, 50], ["numpy.zeros", "nets.gkern3"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern3"], ["conv_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "x_out", "=", "MaxPool", "(", "pool_size", "=", "pool_size", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n", "\n", "", "def", "convUp_block", "(", "x_in1", ",", "x_in2", ",", "nf", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.gaussian2d_deform": [[51, 59], ["getattr", "list", "getattr.", "Conv.", "reg.Grad"], "function", ["None"], ["    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "UpSampling", "=", "getattr", "(", "KL", ",", "'UpSampling%dD'", "%", "ndims", ")", "\n", "\n", "\n", "up_out", "=", "UpSampling", "(", "size", "=", "up_size", ")", "(", "x_in1", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "up_out", ")", "\n", "x_in", "=", "concatenate", "(", "[", "conv_out", ",", "x_in2", "]", ")", "\n", "x_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "return", "x_out", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.gaussian3d_deform": [[60, 69], ["getattr", "list", "getattr.", "Conv.", "getattr."], "function", ["None"], ["\n", "\n", "", "def", "unetND", "(", "input_size", "=", "(", "384", ",", "384", ",", "1", ")", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "#enc_nf = [16, 32, 64, 128, 256] # 384 192 96 48 24", "\n", "#dec_nf = [128, 64, 32, 16]", "\n", "    ", "enc_nf", "=", "[", "24", ",", "24", ",", "24", ",", "24", "]", "\n", "dec_nf", "=", "[", "24", ",", "24", ",", "24", "]", "\n", "\n", "moving", "=", "Input", "(", "input_size", ")", "\n", "target", "=", "Input", "(", "input_size", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.custom_act": [[70, 74], ["K.exp"], "function", ["None"], ["\n", "x_in", "=", "concatenate", "(", "[", "moving", ",", "target", "]", ")", "\n", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "\n", "# encoder", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.conv_block": [[76, 83], ["getattr", "getattr.", "BatchNormalization", "getattr.", "BatchNormalization"], "function", ["None"], ["for", "i", "in", "range", "(", "len", "(", "enc_nf", ")", "-", "1", ")", ":", "\n", "        ", "x_enc", ".", "append", "(", "convPool_block", "(", "x_enc", "[", "-", "1", "]", ",", "enc_nf", "[", "i", "]", ",", "ndims", ",", "pool_size", ")", ")", "\n", "", "x_bot", "=", "conv_block", "(", "x_enc", "[", "-", "1", "]", ",", "enc_nf", "[", "-", "1", "]", ",", "ndims", ")", "\n", "# up-sample path (decoder)", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "dec_nf", ")", "+", "2", ")", ":", "\n", "        ", "x", "=", "convUp_block", "(", "x_bot", ",", "x_enc", "[", "-", "i", "]", ",", "dec_nf", "[", "i", "-", "2", "]", ",", "ndims", ",", "up_size", ")", "\n", "x_bot", "=", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.convPool_block": [[84, 91], ["getattr", "nets.conv_block", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["# form deformation field", "\n", "", "x", "=", "Conv", "(", "filters", "=", "16", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "#reg.Grad('l2',1)", "\n", "x", "=", "Conv", "(", "filters", "=", "ndims", ",", "kernel_size", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'deformField'", ")", "(", "x", ")", "\n", "\n", "# deform moving image", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping'", ")", "(", "[", "moving", ",", "x", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.convUp_block": [[92, 102], ["getattr", "getattr", "concatenate", "nets.conv_block", "getattr.", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "target", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n", "", "def", "mapping", "(", "input_sz1", "=", "(", "384", ",", "384", ",", "1", ")", ",", "input_sz2", "=", "(", "384", ",", "384", ",", "2", ")", ")", ":", "\n", "    ", "moving", "=", "Input", "(", "input_sz1", ")", "\n", "vec_field", "=", "Input", "(", "input_sz2", ")", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping_nn'", ")", "(", "[", "moving", ",", "vec_field", "]", ")", "\n", "#deformMoving = nrn_layers.SpatialTransformer(interp_method='nearest', indexing='ij')([moving, vec_field])", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "vec_field", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.unetND": [[104, 155], ["Input", "Input", "concatenate", "getattr", "range", "nets.conv_block", "range", "getattr", "tensorflow.keras.models.Model", "x_enc.append", "nets.convUp_block", "getattr.", "BatchNormalization", "Lambda", "len", "nets.convPool_block", "len", "getattr.", "nets.gaussian2d_deform", "nets.gaussian2d_deform", "concatenate", "nets.gaussian3d_deform", "nets.gaussian3d_deform", "nets.gaussian3d_deform", "concatenate", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convUp_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convPool_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian2d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian2d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform"], ["\n", "\n", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.mapping": [[156, 164], ["getattr", "Input", "Input", "tensorflow.keras.models.Model", "Lambda"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.nets.mapping_bl": [[165, 173], ["getattr", "Input", "Input", "tensorflow.keras.models.Model", "Lambda"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register3D.detJacobian": [[14, 23], ["numpy.gradient", "numpy.gradient", "numpy.zeros", "range", "range", "numpy.linalg.det"], "function", ["None"], ["def", "detJacobian", "(", "Axij", ",", "Ayij", ",", "**", "kwargs", ")", ":", "\n", "    ", "[", "xFX", ",", "xFY", "]", "=", "np", ".", "gradient", "(", "Axij", ")", "\n", "[", "yFX", ",", "yFY", "]", "=", "np", ".", "gradient", "(", "Ayij", ")", "\n", "jac_det", "=", "np", ".", "zeros", "(", "Axij", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "384", ")", ":", "\n", "            ", "jac_mij", "=", "[", "[", "xFX", "[", "i", ",", "j", "]", ",", "xFY", "[", "i", ",", "j", "]", "]", ",", "[", "yFX", "[", "i", ",", "j", "]", ",", "yFY", "[", "i", ",", "j", "]", "]", "]", "\n", "jac_det", "[", "i", ",", "j", "]", "=", "np", ".", "linalg", ".", "det", "(", "jac_mij", ")", "\n", "", "", "return", "jac_det", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register3D.plot_grid": [[24, 29], ["range", "range", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "def", "plot_grid", "(", "gridx", ",", "gridy", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", "i", ",", ":", "]", ",", "gridy", "[", "i", ",", ":", "]", ",", "**", "kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", ":", ",", "i", "]", ",", "gridy", "[", ":", ",", "i", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register3D.display_deformed_grid": [[30, 68], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "numpy.arange", "numpy.meshgrid", "feature_maps[].reshape", "feature_maps[].reshape", "print", "range", "matplotlib.figure", "matplotlib.subplot", "register3D.plot_grid", "matplotlib.gca().invert_yaxis", "matplotlib.title", "matplotlib.subplot", "register3D.detJacobian", "print", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "range", "str", "matplotlib.gca", "str", "str", "numpy.max", "numpy.min", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian"], ["", "", "def", "display_deformed_grid", "(", "feature_maps", ",", "layer_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "layer_name", "+", "'.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "u", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "v", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "print", "(", "'max u: '", "+", "str", "(", "np", ".", "max", "(", "u", ")", ")", ")", "\n", "\n", "phix", "=", "X", ";", "phiy", "=", "Y", "\n", "down", "=", "4", "\n", "for", "i", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "# add the displacement for each p(k) in the sum", "\n", "            ", "phix", "[", "i", ",", "j", "]", "=", "phix", "[", "i", ",", "j", "]", "-", "u", "[", "i", ",", "j", "]", "\n", "phiy", "[", "i", ",", "j", "]", "=", "phiy", "[", "i", ",", "j", "]", "-", "v", "[", "i", ",", "j", "]", "\n", "", "", "phixdown", "=", "phix", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "phiydown", "=", "phiy", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "46", ",", "6", ")", ",", "dpi", "=", "150", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "1", ")", "\n", "plot_grid", "(", "phixdown", ",", "phiydown", ",", "color", "=", "\"C0\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "plt", ".", "title", "(", "'Deformed grid'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "2", ")", "\n", "detJac", "=", "detJacobian", "(", "phix", ",", "phiy", ")", "\n", "print", "(", "'Min det(Jac): '", "+", "str", "(", "np", ".", "min", "(", "np", ".", "abs", "(", "detJac", ")", ")", ")", ")", "\n", "print", "(", "'# det(Jac)<=0: '", "+", "str", "(", "(", "detJac", "==", "0", ")", ".", "sum", "(", ")", ")", ")", "\n", "plt", ".", "imshow", "(", "detJac", ")", ";", "plt", ".", "title", "(", "'det(Jacobian)'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register3D.save_act_figs": [[69, 73], ["act_model.predict", "print", "register3D.display_deformed_grid"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.display_deformed_grid"], ["", "def", "save_act_figs", "(", "act_model", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "activation_maps", "=", "act_model", ".", "predict", "(", "[", "img1", ",", "img2", "]", ")", "\n", "print", "(", "activation_maps", ".", "shape", ")", "\n", "display_deformed_grid", "(", "activation_maps", ",", "'conv11'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp._interpolate_bilinear": [[29, 157], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["query_points", ",", "\n", "name", "=", "'interpolate_bilinear'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "alphas", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n", "", "", "def", "_interpolate_nearest", "(", "grid", ",", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp._interpolate_bilinear3D": [[158, 292], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["query_points", ",", "\n", "name", "=", "'interpolate_nearest'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "K", ".", "round", "(", "alphas", "[", "0", "]", ")", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n", "", "", "def", "image_warp", "(", "image", ",", "flow", ",", "interp_method", ",", "name", "=", "'dense_image_warp'", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp._interpolate_nearest": [[293, 418], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["\n", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "image", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "3", "]", ")", "\n", "\n", "# The flow is defined on the image grid. Turn the flow into a list of query", "\n", "# points in the grid space.", "\n", "grid_x", ",", "grid_y", "=", "array_ops", ".", "meshgrid", "(", "\n", "math_ops", ".", "range", "(", "width", ")", ",", "math_ops", ".", "range", "(", "height", ")", ")", "\n", "stacked_grid", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", ",", "flow", ".", "dtype", ")", "\n", "batched_grid", "=", "array_ops", ".", "expand_dims", "(", "stacked_grid", ",", "axis", "=", "0", ")", "\n", "query_points_on_grid", "=", "batched_grid", "-", "flow", "\n", "query_points_flattened", "=", "array_ops", ".", "reshape", "(", "query_points_on_grid", ",", "\n", "[", "batch_size", ",", "height", "*", "width", ",", "2", "]", ")", "\n", "# Compute values at the query points, then reshape the result back to the", "\n", "# image grid.", "\n", "if", "interp_method", "==", "'bilinear'", "or", "interp_method", "==", "'Bilinear'", ":", "\n", "        ", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "elif", "interp_method", "==", "'nearest_neighbor'", "or", "interp_method", "==", "'NN'", ":", "\n", "        ", "interpolated", "=", "_interpolate_nearest", "(", "image", ",", "query_points_flattened", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Running on bi-linear interpolation!'", ")", "\n", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "interpolated", "=", "array_ops", ".", "reshape", "(", "interpolated", ",", "\n", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "return", "interpolated", "\n", "", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp._interpolate_nearest3D": [[419, 552], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.image_warp": [[553, 609], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack", "image_warp._interpolate_bilinear", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "image_warp._interpolate_nearest", "print", "image_warp._interpolate_bilinear"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.image_warp3D": [[610, 641], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "print", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack", "image.get_shape().as_list", "image_warp._interpolate_bilinear3D", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "image_warp._interpolate_nearest3D", "print", "image_warp._interpolate_bilinear3D", "image.get_shape"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear3D", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest3D", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.Mapping2D_nn": [[643, 648], ["image_warp.image_warp"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.Mapping3D_nn": [[649, 654], ["image_warp.image_warp3D"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.Mapping2D": [[655, 660], ["image_warp.image_warp"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.image_warp.Mapping3D": [[661, 666], ["image_warp.image_warp3D"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register2D.reset_weights": [[15, 20], ["tensorflow.keras.backend.get_session", "hasattr", "layer.kernel.initializer.run"], "function", ["None"], ["def", "reset_weights", "(", "model", ")", ":", "\n", "    ", "session", "=", "K", ".", "get_session", "(", ")", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'kernel_initializer'", ")", ":", "\n", "            ", "layer", ".", "kernel", ".", "initializer", ".", "run", "(", "session", "=", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register2D.detJacobian": [[21, 30], ["numpy.gradient", "numpy.gradient", "numpy.zeros", "range", "range", "numpy.linalg.det"], "function", ["None"], ["", "", "", "def", "detJacobian", "(", "Axij", ",", "Ayij", ",", "**", "kwargs", ")", ":", "\n", "    ", "[", "xFX", ",", "xFY", "]", "=", "np", ".", "gradient", "(", "Axij", ")", "\n", "[", "yFX", ",", "yFY", "]", "=", "np", ".", "gradient", "(", "Ayij", ")", "\n", "jac_det", "=", "np", ".", "zeros", "(", "Axij", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "384", ")", ":", "\n", "            ", "jac_mij", "=", "[", "[", "xFX", "[", "i", ",", "j", "]", ",", "xFY", "[", "i", ",", "j", "]", "]", ",", "[", "yFX", "[", "i", ",", "j", "]", ",", "yFY", "[", "i", ",", "j", "]", "]", "]", "\n", "jac_det", "[", "i", ",", "j", "]", "=", "np", ".", "linalg", ".", "det", "(", "jac_mij", ")", "\n", "", "", "return", "jac_det", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register2D.plot_grid": [[31, 36], ["range", "range", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "def", "plot_grid", "(", "gridx", ",", "gridy", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", "i", ",", ":", "]", ",", "gridy", "[", "i", ",", ":", "]", ",", "**", "kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", ":", ",", "i", "]", ",", "gridy", "[", ":", ",", "i", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register2D.display_deformed_grid": [[37, 75], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "numpy.arange", "numpy.meshgrid", "feature_maps[].reshape", "feature_maps[].reshape", "print", "range", "matplotlib.figure", "matplotlib.subplot", "register2D.plot_grid", "matplotlib.gca().invert_yaxis", "matplotlib.title", "matplotlib.subplot", "register2D.detJacobian", "print", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "range", "str", "matplotlib.gca", "str", "str", "numpy.max", "numpy.min", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian"], ["", "", "def", "display_deformed_grid", "(", "feature_maps", ",", "layer_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "layer_name", "+", "'.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "u", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "v", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "print", "(", "'max u: '", "+", "str", "(", "np", ".", "max", "(", "u", ")", ")", ")", "\n", "\n", "phix", "=", "X", ";", "phiy", "=", "Y", "\n", "down", "=", "7", "\n", "for", "i", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "# add the displacement for each p(k) in the sum", "\n", "            ", "phix", "[", "i", ",", "j", "]", "=", "phix", "[", "i", ",", "j", "]", "-", "u", "[", "i", ",", "j", "]", "\n", "phiy", "[", "i", ",", "j", "]", "=", "phiy", "[", "i", ",", "j", "]", "-", "v", "[", "i", ",", "j", "]", "\n", "", "", "phixdown", "=", "phix", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "phiydown", "=", "phiy", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "46", ",", "6", ")", ",", "dpi", "=", "150", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "7", ",", "1", ")", "\n", "plot_grid", "(", "phixdown", ",", "phiydown", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "plt", ".", "title", "(", "'Deformed grid'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "7", ",", "2", ")", "\n", "detJac", "=", "detJacobian", "(", "phix", ",", "phiy", ")", "\n", "print", "(", "'Min det(Jac): '", "+", "str", "(", "np", ".", "min", "(", "np", ".", "abs", "(", "detJac", ")", ")", ")", ")", "\n", "print", "(", "'# det(Jac)<=0: '", "+", "str", "(", "(", "detJac", "==", "0", ")", ".", "sum", "(", ")", ")", ")", "\n", "plt", ".", "imshow", "(", "detJac", ")", ";", "plt", ".", "title", "(", "'det(Jacobian)'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register2D.save_act_figs": [[76, 80], ["act_model.predict", "print", "register2D.display_deformed_grid"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.display_deformed_grid"], ["", "def", "save_act_figs", "(", "act_model", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "activation_maps", "=", "act_model", ".", "predict", "(", "[", "img1", ",", "img2", "]", ")", "\n", "print", "(", "activation_maps", ".", "shape", ")", "\n", "display_deformed_grid", "(", "activation_maps", ",", "'conv11'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.l2Reg.__init__": [[8, 10], ["tensorflow.keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.l2Reg.__call__": [[11, 14], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "regularization", "=", "self", ".", "wt", "*", "tf", ".", "reduce_mean", "(", "x", "*", "x", ")", "\n", "return", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.TVNormReg.__init__": [[20, 22], ["tensorflow.keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.TVNormReg.__call__": [[23, 28], ["tensorflow.reduce_sum", "tensorflow.image.total_variation", "tensorflow.image.total_variation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "yy", "=", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "regularization", "=", "self", ".", "wt", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "image", ".", "total_variation", "(", "xx", ")", "+", "tf", ".", "image", ".", "total_variation", "(", "yy", ")", ")", "\n", "return", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.NJ_reg.__init__": [[36, 38], ["tensorflow.keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.NJ_reg.Get_Ja": [[39, 53], ["None"], "methods", ["None"], ["", "def", "Get_Ja", "(", "self", ",", "v", ")", ":", "\n", "        ", "D_x", "=", "(", "v", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D_y", "=", "(", "v", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D1", "=", "(", "D_x", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "D_y", "[", "...", ",", "1", "]", "+", "1", ")", "-", "(", "D_x", "[", "...", ",", "1", "]", ")", "*", "(", "D_y", "[", "...", ",", "0", "]", ")", "\n", "\n", "# D1 = (D_x[...,0]+1)*( (D_y[...,1]+1)*(D_z[...,2]+1) - D_z[...,1]*D_y[...,2])", "\n", "\n", "# D2 = (D_x[...,1])*(D_y[...,0]*(D_z[...,2]+1) - D_y[...,2]*D_x[...,0])", "\n", "\n", "# D3 = (D_x[...,2])*(D_y[...,0]*D_z[...,1] - (D_y[...,1]+1)*D_z[...,0])", "\n", "\n", "return", "D1", "# -D2+D3", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.NJ_reg.__call__": [[54, 60], ["tensorflow.reduce_sum", "tensorflow.abs", "reg.NJ_reg.Get_Ja", "reg.NJ_reg.Get_Ja"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja"], ["", "def", "__call__", "(", "self", ",", "v", ")", ":", "\n", "        ", "'''\n        Penalizing locations where Jacobian has negative determinants\n        '''", "\n", "Neg_Jac", "=", "0.5", "*", "(", "tf", ".", "abs", "(", "self", ".", "Get_Ja", "(", "v", ")", ")", "-", "self", ".", "Get_Ja", "(", "v", ")", ")", "\n", "return", "self", ".", "wt", "*", "tf", ".", "reduce_sum", "(", "Neg_Jac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad.__init__": [[69, 72], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "penalty", "=", "'l1'", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "wt", "=", "wt", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad._diffs": [[73, 92], ["len", "range", "tensorflow.keras.backend.permute_dimensions.get_shape().as_list", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.permute_dimensions.get_shape", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "_diffs", "(", "self", ",", "y", ")", ":", "\n", "        ", "vol_shape", "=", "y", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "ndims", "=", "len", "(", "vol_shape", ")", "\n", "\n", "df", "=", "[", "None", "]", "*", "ndims", "\n", "for", "i", "in", "range", "(", "ndims", ")", ":", "\n", "            ", "d", "=", "i", "+", "1", "\n", "# permute dimensions to put the ith dimension first", "\n", "r", "=", "[", "d", ",", "*", "range", "(", "d", ")", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "y", "=", "K", ".", "permute_dimensions", "(", "y", ",", "r", ")", "\n", "dfi", "=", "y", "[", "1", ":", ",", "...", "]", "-", "y", "[", ":", "-", "1", ",", "...", "]", "\n", "\n", "# permute back", "\n", "# note: this might not be necessary for this loss specifically,", "\n", "# since the results are just summed over anyway.", "\n", "r", "=", "[", "*", "range", "(", "1", ",", "d", "+", "1", ")", ",", "0", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "df", "[", "i", "]", "=", "K", ".", "permute_dimensions", "(", "dfi", ",", "r", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad.__call__": [[93, 100], ["len", "tensorflow.reduce_mean", "tensorflow.add_n", "tensorflow.abs", "reg.Grad._diffs", "tensorflow.reduce_mean", "reg.Grad._diffs"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs"], ["", "def", "__call__", "(", "self", ",", "y_pred", ")", ":", "\n", "        ", "if", "self", ".", "penalty", "==", "'l1'", ":", "\n", "            ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "f", ")", ")", "for", "f", "in", "self", ".", "_diffs", "(", "y_pred", ")", "]", "\n", "", "elif", "self", ".", "penalty", "==", "'l2'", ":", "\n", "            ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "f", "*", "f", ")", "for", "f", "in", "self", ".", "_diffs", "(", "y_pred", ")", "]", "\n", "\n", "", "return", "self", ".", "wt", "*", "tf", ".", "add_n", "(", "df", ")", "/", "len", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad_NJ_reg.__init__": [[103, 106], ["tensorflow.keras.backend.cast_to_floatx", "tensorflow.keras.backend.cast_to_floatx"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wt1", "=", "1", ",", "wt2", "=", "0.0001", ")", ":", "\n", "        ", "self", ".", "wt_diff", "=", "K", ".", "cast_to_floatx", "(", "wt1", ")", "\n", "self", ".", "wt_npj", "=", "K", ".", "cast_to_floatx", "(", "wt2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad_NJ_reg._diffs": [[107, 126], ["len", "range", "tensorflow.keras.backend.permute_dimensions.get_shape().as_list", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.permute_dimensions.get_shape", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "_diffs", "(", "self", ",", "y", ")", ":", "\n", "        ", "vol_shape", "=", "y", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "ndims", "=", "len", "(", "vol_shape", ")", "\n", "\n", "df", "=", "[", "None", "]", "*", "ndims", "\n", "for", "i", "in", "range", "(", "ndims", ")", ":", "\n", "            ", "d", "=", "i", "+", "1", "\n", "# permute dimensions to put the ith dimension first", "\n", "r", "=", "[", "d", ",", "*", "range", "(", "d", ")", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "y", "=", "K", ".", "permute_dimensions", "(", "y", ",", "r", ")", "\n", "dfi", "=", "y", "[", "1", ":", ",", "...", "]", "-", "y", "[", ":", "-", "1", ",", "...", "]", "\n", "\n", "# permute back", "\n", "# note: this might not be necessary for this loss specifically,", "\n", "# since the results are just summed over anyway.", "\n", "r", "=", "[", "*", "range", "(", "1", ",", "d", "+", "1", ")", ",", "0", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "df", "[", "i", "]", "=", "K", ".", "permute_dimensions", "(", "dfi", ",", "r", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad_NJ_reg.Get_Ja": [[127, 146], ["None"], "methods", ["None"], ["", "def", "Get_Ja", "(", "self", ",", "v", ")", ":", "\n", "\n", "        ", "'''\n        Calculate the Jacobian value at each point of the displacement map having\n        size of b*h*w*d*3 and in the cubic volumn of [-1, 1]^3\n        '''", "\n", "D_x", "=", "(", "v", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D_y", "=", "(", "v", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D1", "=", "(", "D_x", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "D_y", "[", "...", ",", "1", "]", "+", "1", ")", "-", "(", "D_x", "[", "...", ",", "1", "]", ")", "*", "(", "D_y", "[", "...", ",", "0", "]", ")", "\n", "\n", "#D1 = (D_x[...,0]+1)*( (D_y[...,1]+1)*(D_z[...,2]+1) - D_z[...,1]*D_y[...,2])", "\n", "\n", "#D2 = (D_x[...,1])*(D_y[...,0]*(D_z[...,2]+1) - D_y[...,2]*D_x[...,0])", "\n", "\n", "#D3 = (D_x[...,2])*(D_y[...,0]*D_z[...,1] - (D_y[...,1]+1)*D_z[...,0])", "\n", "\n", "return", "D1", "#-D2+D3", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.reg.Grad_NJ_reg.__call__": [[147, 151], ["tensorflow.reduce_mean", "reg.Grad_NJ_reg._diffs", "tensorflow.abs", "reg.Grad_NJ_reg.Get_Ja", "tensorflow.reduce_sum", "reg.Grad_NJ_reg.Get_Ja", "tensorflow.add_n", "len"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja"], ["", "def", "__call__", "(", "self", ",", "v", ")", ":", "\n", "        ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "f", "*", "f", ")", "for", "f", "in", "self", ".", "_diffs", "(", "v", ")", "]", "\n", "Neg_Jac", "=", "0.5", "*", "(", "tf", ".", "abs", "(", "self", ".", "Get_Ja", "(", "v", ")", ")", "-", "self", ".", "Get_Ja", "(", "v", ")", ")", "\n", "return", "self", ".", "wt_diff", "*", "(", "tf", ".", "add_n", "(", "df", ")", "/", "len", "(", "df", ")", ")", "+", "self", ".", "wt_npj", "*", "tf", ".", "reduce_sum", "(", "Neg_Jac", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.NCC.__init__": [[13, 16], ["None"], "methods", ["None"], ["\n", "class", "NCC", "(", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.NCC.ncc": [[18, 71], ["getattr", "tensorflow.ones", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "numpy.prod", "tensorflow.math.reduce_sum", "tensorflow.math.reduce_sum", "tensorflow.math.reduce_sum", "len", "print", "I.get_shape().as_list", "type", "print", "tensorflow.math.sqrt", "I.get_shape"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "win", "=", "None", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "self", ".", "win", "=", "win", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "\n", "", "def", "ncc", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "# get dimension of volume", "\n", "# assumes I, J are sized [batch_size, *vol_shape, nb_feats]", "\n", "        ", "ndims", "=", "len", "(", "I", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "2", "\n", "assert", "ndims", "in", "[", "1", ",", "2", ",", "3", "]", ",", "\"volumes should be 1 to 3 dimensions. found: %d\"", "%", "ndims", "\n", "\n", "# set window size", "\n", "if", "self", ".", "win", "is", "None", ":", "\n", "            ", "self", ".", "win", "=", "[", "7", "]", "*", "ndims", "\n", "\n", "# get convolution function", "\n", "", "conv_fn", "=", "getattr", "(", "tf", ".", "nn", ",", "'conv%dd'", "%", "ndims", ")", "\n", "\n", "# compute CC squares", "\n", "I2", "=", "I", "*", "I", "\n", "J2", "=", "J", "*", "J", "\n", "IJ", "=", "I", "*", "J", "\n", "\n", "# compute filters", "\n", "sum_filt", "=", "tf", ".", "ones", "(", "[", "*", "self", ".", "win", ",", "1", ",", "1", "]", ")", "\n", "strides", "=", "1", "\n", "if", "ndims", ">", "1", ":", "\n", "            ", "strides", "=", "[", "1", "]", "*", "(", "ndims", "+", "2", ")", "\n", "", "padding", "=", "'SAME'", "\n", "\n", "# compute local sums via convolution", "\n", "I_sum", "=", "conv_fn", "(", "I", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J_sum", "=", "conv_fn", "(", "J", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "I2_sum", "=", "conv_fn", "(", "I2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J2_sum", "=", "conv_fn", "(", "J2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "IJ_sum", "=", "conv_fn", "(", "IJ", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "\n", "# compute cross correlation", "\n", "win_size", "=", "np", ".", "prod", "(", "self", ".", "win", ")", "\n", "u_I", "=", "I_sum", "/", "win_size", "\n", "u_J", "=", "J_sum", "/", "win_size", "\n", "\n", "cross", "=", "IJ_sum", "-", "u_J", "*", "I_sum", "-", "u_I", "*", "J_sum", "+", "u_I", "*", "u_J", "*", "win_size", "\n", "I_var", "=", "I2_sum", "-", "2", "*", "u_I", "*", "I_sum", "+", "u_I", "*", "u_I", "*", "win_size", "\n", "J_var", "=", "J2_sum", "-", "2", "*", "u_J", "*", "J_sum", "+", "u_J", "*", "u_J", "*", "win_size", "\n", "\n", "cc", "=", "cross", "*", "cross", "/", "(", "I_var", "*", "J_var", "+", "self", ".", "eps", ")", "\n", "\n", "# return negative cc.", "\n", "return", "tf", ".", "reduce_mean", "(", "cc", ")", "\n", "\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.NCC.loss": [[72, 74], ["losses.NCC.ncc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.ncc"], ["        ", "return", "-", "self", ".", "ncc", "(", "I", ",", "J", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.SSIM.__init__": [[79, 81], ["None"], "methods", ["None"], ["        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.SSIM.ssim": [[82, 85], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.SSIM.loss": [[86, 88], ["losses.SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC.__init__": [[93, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC.pcc": [[96, 102], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["\n", "", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC.loss": [[103, 105], ["losses.PCC.pcc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc"], ["\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC_SSIM.__init__": [[110, 114], ["None"], "methods", ["None"], ["class", "PCC_SSIM", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pcc_wt", "=", "0.5", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "pcc_wt", "=", "pcc_wt", "\n", "self", ".", "ssim_wt", "=", "1.0", "-", "pcc_wt", "\n", "self", ".", "maxVal", "=", "maxVal", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC_SSIM.pcc": [[115, 121], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["\n", "", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC_SSIM.ssim": [[122, 125], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["\n", "", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.PCC_SSIM.loss": [[126, 128], ["losses.PCC_SSIM.pcc", "losses.PCC_SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "self", ".", "pcc_wt", "*", "(", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", ")", "+", "self", ".", "ssim_wt", "*", "(", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.MutualInformation.__init__": [[139, 153], ["numpy.linspace", "tensorflow.keras.backend.variable", "len", "tensorflow.keras.backend.variable", "numpy.mean", "numpy.diff", "numpy.square"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.MutualInformation.mi": [[153, 187], ["tensorflow.keras.backend.clip", "tensorflow.keras.backend.clip", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.expand_dims", "tensorflow.cast", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.exp", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.exp", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.batch_dot", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.keras.backend.sum", "numpy.prod", "tensorflow.keras.backend.batch_dot", "tensorflow.keras.backend.epsilon", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.prod", "tensorflow.keras.backend.prod", "tensorflow.keras.backend.shape", "losses.MutualInformation.vol_bin_centers.get_shape().as_list", "tensorflow.keras.backend.square", "tensorflow.keras.backend.square", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.log", "tensorflow.keras.backend.shape", "tensorflow.keras.backend.shape", "losses.MutualInformation.vol_bin_centers.get_shape", "tensorflow.keras.backend.epsilon"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.MutualInformation.loss": [[188, 190], ["losses.MutualInformation.mi"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.mi"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.ParzenMutualInformation.__init__": [[196, 210], ["numpy.linspace", "tensorflow.keras.backend.variable", "len", "tensorflow.keras.backend.variable", "numpy.mean", "numpy.diff", "numpy.square"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.ParzenMutualInformation.mi": [[211, 247], ["tensorflow.keras.backend.clip", "tensorflow.keras.backend.clip", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.expand_dims", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.expand_dims", "tensorflow.cast", "tensorflow.keras.backend.reshape", "tensorflow.keras.backend.exp", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.exp", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.batch_dot", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.keras.backend.sum", "numpy.prod", "tensorflow.keras.backend.batch_dot", "tensorflow.keras.backend.epsilon", "tensorflow.keras.backend.sum", "tensorflow.keras.backend.prod", "tensorflow.keras.backend.prod", "tensorflow.keras.backend.shape", "losses.ParzenMutualInformation.vol_bin_centers.get_shape().as_list", "tensorflow.keras.backend.square", "tensorflow.keras.backend.square", "tensorflow.keras.backend.permute_dimensions", "tensorflow.keras.backend.log", "tensorflow.keras.backend.shape", "tensorflow.keras.backend.shape", "losses.ParzenMutualInformation.vol_bin_centers.get_shape", "tensorflow.keras.backend.epsilon"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.losses.ParzenMutualInformation.loss": [[248, 250], ["losses.ParzenMutualInformation.mi"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.mi"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy_TF2x.register3D_example.pkload": [[14, 17], ["open", "pickle.load"], "function", ["None"], ["def", "pkload", "(", "fname", ")", ":", "\n", "    ", "with", "open", "(", "fname", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "return", "pickle", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.concLayer": [[13, 18], ["concatenate"], "function", ["None"], ["\n", "def", "Mapping_nn", "(", "input", ")", ":", "\n", "    ", "a", "=", "input", "[", "0", "]", "\n", "b", "=", "input", "[", "1", "]", "\n", "output", "=", "image_warp", ".", "image_warp", "(", "a", ",", "b", ",", "'NN'", ",", "name", "=", "'dense_image_warp'", ")", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern2": [[21, 31], ["scipy.signal.gaussian", "numpy.outer"], "function", ["None"], ["    ", "a", "=", "input", "[", "0", "]", "\n", "b", "=", "input", "[", "1", "]", "\n", "output", "=", "tf", ".", "contrib", ".", "image", ".", "dense_image_warp", "(", "a", ",", "b", ",", "name", "=", "'dense_image_warp'", ")", "\n", "return", "output", "\n", "\n", "", "def", "concLayer", "(", "input", ")", ":", "\n", "    ", "u", "=", "input", "[", "0", "]", "\n", "v", "=", "input", "[", "1", "]", "\n", "output", "=", "concatenate", "(", "[", "u", ",", "v", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern3": [[32, 43], ["scipy.signal.gaussian", "numpy.outer", "numpy.outer", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "strides", "=", "1", ")", ":", "\n", "    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "\n", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "x_in", ")", "\n", "conv_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "conv_out", ")", "\n", "x_out", "=", "BatchNormalization", "(", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n", "\n", "", "def", "convPool_block", "(", "x_in", ",", "nf", ",", "ndims", "=", "2", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "    ", "MaxPool", "=", "getattr", "(", "KL", ",", "'MaxPool%dD'", "%", "ndims", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.kernel_init": [[44, 48], ["numpy.zeros", "nets.gkern2"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern2"], ["\n", "\n", "conv_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "x_out", "=", "MaxPool", "(", "pool_size", "=", "pool_size", ")", "(", "conv_out", ")", "\n", "return", "x_out", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.kernel_init3d": [[49, 53], ["numpy.zeros", "nets.gkern3"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gkern3"], ["\n", "", "def", "convUp_block", "(", "x_in1", ",", "x_in2", ",", "nf", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n", "    ", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n", "UpSampling", "=", "getattr", "(", "KL", ",", "'UpSampling%dD'", "%", "ndims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian2d_deform": [[54, 62], ["getattr", "list", "getattr.", "Conv.", "reg.Grad"], "function", ["None"], ["\n", "up_out", "=", "UpSampling", "(", "size", "=", "up_size", ")", "(", "x_in1", ")", "\n", "conv_out", "=", "Conv", "(", "nf", ",", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ",", "kernel_initializer", "=", "'he_normal'", ")", "(", "up_out", ")", "\n", "x_in", "=", "concatenate", "(", "[", "conv_out", ",", "x_in2", "]", ")", "\n", "x_out", "=", "conv_block", "(", "x_in", ",", "nf", ",", "ndims", ")", "\n", "return", "x_out", "\n", "\n", "\n", "", "def", "unetND", "(", "input_size", "=", "(", "384", ",", "384", ",", "1", ")", ",", "ndims", "=", "2", ",", "up_size", "=", "(", "2", ",", "2", ")", ",", "pool_size", "=", "(", "2", ",", "2", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform": [[63, 72], ["getattr", "list", "getattr.", "Conv.", "getattr."], "function", ["None"], ["#enc_nf = [16, 32, 64, 128, 256] # 384 192 96 48 24", "\n", "#dec_nf = [128, 64, 32, 16]", "\n", "    ", "enc_nf", "=", "[", "24", ",", "24", ",", "24", ",", "24", "]", "\n", "dec_nf", "=", "[", "24", ",", "24", ",", "24", "]", "\n", "\n", "moving", "=", "Input", "(", "input_size", ")", "\n", "target", "=", "Input", "(", "input_size", ")", "\n", "\n", "x_in", "=", "concatenate", "(", "[", "moving", ",", "target", "]", ")", "\n", "Conv", "=", "getattr", "(", "KL", ",", "'Conv%dD'", "%", "ndims", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.custom_act": [[73, 77], ["K.exp"], "function", ["None"], ["\n", "# encoder", "\n", "x_enc", "=", "[", "x_in", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "enc_nf", ")", "-", "1", ")", ":", "\n", "        ", "x_enc", ".", "append", "(", "convPool_block", "(", "x_enc", "[", "-", "1", "]", ",", "enc_nf", "[", "i", "]", ",", "ndims", ",", "pool_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block": [[79, 86], ["getattr", "getattr.", "BatchNormalization", "getattr.", "BatchNormalization"], "function", ["None"], ["# up-sample path (decoder)", "\n", "for", "i", "in", "range", "(", "2", ",", "len", "(", "dec_nf", ")", "+", "2", ")", ":", "\n", "        ", "x", "=", "convUp_block", "(", "x_bot", ",", "x_enc", "[", "-", "i", "]", ",", "dec_nf", "[", "i", "-", "2", "]", ",", "ndims", ",", "up_size", ")", "\n", "x_bot", "=", "x", "\n", "\n", "# form deformation field", "\n", "", "x", "=", "Conv", "(", "filters", "=", "16", ",", "kernel_size", "=", "3", ",", "activation", "=", "'relu'", ",", "padding", "=", "'same'", ")", "(", "x", ")", "\n", "x", "=", "BatchNormalization", "(", ")", "(", "x", ")", "#reg.Grad('l2',1)", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convPool_block": [[87, 94], ["getattr", "nets.conv_block", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["x", "=", "Conv", "(", "filters", "=", "ndims", ",", "kernel_size", "=", "1", ",", "padding", "=", "'same'", ",", "name", "=", "'deformField'", ")", "(", "x", ")", "\n", "\n", "# deform moving image", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping'", ")", "(", "[", "moving", ",", "x", "]", ")", "\n", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "target", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convUp_block": [[95, 105], ["getattr", "getattr", "concatenate", "nets.conv_block", "getattr.", "getattr."], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block"], ["", "def", "mapping", "(", "input_sz1", "=", "(", "384", ",", "384", ",", "1", ")", ",", "input_sz2", "=", "(", "384", ",", "384", ",", "2", ")", ")", ":", "\n", "    ", "moving", "=", "Input", "(", "input_sz1", ")", "\n", "vec_field", "=", "Input", "(", "input_sz2", ")", "\n", "deformMoving", "=", "Lambda", "(", "Mapping", ",", "name", "=", "'Mapping_nn'", ")", "(", "[", "moving", ",", "vec_field", "]", ")", "\n", "#deformMoving = nrn_layers.SpatialTransformer(interp_method='nearest', indexing='ij')([moving, vec_field])", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "moving", ",", "vec_field", "]", ",", "outputs", "=", "deformMoving", ")", "\n", "return", "model", "\n", "\n", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.unetND": [[107, 158], ["Input", "Input", "concatenate", "getattr", "range", "nets.conv_block", "range", "getattr", "keras.models.Model", "x_enc.append", "nets.convUp_block", "getattr.", "BatchNormalization", "Lambda", "len", "nets.convPool_block", "len", "getattr.", "nets.gaussian2d_deform", "nets.gaussian2d_deform", "concatenate", "nets.gaussian3d_deform", "nets.gaussian3d_deform", "nets.gaussian3d_deform", "concatenate", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad", "reg.Grad"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.conv_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convUp_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.convPool_block", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian2d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian2d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.gaussian3d_deform"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.mapping": [[159, 167], ["getattr", "Input", "Input", "keras.models.Model", "Lambda"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.nets.mapping_bl": [[168, 176], ["getattr", "Input", "Input", "keras.models.Model", "Lambda"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register3D.detJacobian": [[14, 23], ["numpy.gradient", "numpy.gradient", "numpy.zeros", "range", "range", "numpy.linalg.det"], "function", ["None"], ["def", "detJacobian", "(", "Axij", ",", "Ayij", ",", "**", "kwargs", ")", ":", "\n", "    ", "[", "xFX", ",", "xFY", "]", "=", "np", ".", "gradient", "(", "Axij", ")", "\n", "[", "yFX", ",", "yFY", "]", "=", "np", ".", "gradient", "(", "Ayij", ")", "\n", "jac_det", "=", "np", ".", "zeros", "(", "Axij", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "384", ")", ":", "\n", "            ", "jac_mij", "=", "[", "[", "xFX", "[", "i", ",", "j", "]", ",", "xFY", "[", "i", ",", "j", "]", "]", ",", "[", "yFX", "[", "i", ",", "j", "]", ",", "yFY", "[", "i", ",", "j", "]", "]", "]", "\n", "jac_det", "[", "i", ",", "j", "]", "=", "np", ".", "linalg", ".", "det", "(", "jac_mij", ")", "\n", "", "", "return", "jac_det", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register3D.plot_grid": [[24, 29], ["range", "range", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "def", "plot_grid", "(", "gridx", ",", "gridy", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", "i", ",", ":", "]", ",", "gridy", "[", "i", ",", ":", "]", ",", "**", "kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", ":", ",", "i", "]", ",", "gridy", "[", ":", ",", "i", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register3D.display_deformed_grid": [[30, 68], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "numpy.arange", "numpy.meshgrid", "feature_maps[].reshape", "feature_maps[].reshape", "print", "range", "matplotlib.figure", "matplotlib.subplot", "register3D.plot_grid", "matplotlib.gca().invert_yaxis", "matplotlib.title", "matplotlib.subplot", "register3D.detJacobian", "print", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "range", "str", "matplotlib.gca", "str", "str", "numpy.max", "numpy.min", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian"], ["", "", "def", "display_deformed_grid", "(", "feature_maps", ",", "layer_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "layer_name", "+", "'.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "u", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "v", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "print", "(", "'max u: '", "+", "str", "(", "np", ".", "max", "(", "u", ")", ")", ")", "\n", "\n", "phix", "=", "X", ";", "phiy", "=", "Y", "\n", "down", "=", "4", "\n", "for", "i", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "# add the displacement for each p(k) in the sum", "\n", "            ", "phix", "[", "i", ",", "j", "]", "=", "phix", "[", "i", ",", "j", "]", "-", "u", "[", "i", ",", "j", "]", "\n", "phiy", "[", "i", ",", "j", "]", "=", "phiy", "[", "i", ",", "j", "]", "-", "v", "[", "i", ",", "j", "]", "\n", "", "", "phixdown", "=", "phix", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "phiydown", "=", "phiy", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "46", ",", "6", ")", ",", "dpi", "=", "150", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "1", ")", "\n", "plot_grid", "(", "phixdown", ",", "phiydown", ",", "color", "=", "\"C0\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "plt", ".", "title", "(", "'Deformed grid'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "6", ",", "2", ")", "\n", "detJac", "=", "detJacobian", "(", "phix", ",", "phiy", ")", "\n", "print", "(", "'Min det(Jac): '", "+", "str", "(", "np", ".", "min", "(", "np", ".", "abs", "(", "detJac", ")", ")", ")", ")", "\n", "print", "(", "'# det(Jac)<=0: '", "+", "str", "(", "(", "detJac", "==", "0", ")", ".", "sum", "(", ")", ")", ")", "\n", "plt", ".", "imshow", "(", "detJac", ")", ";", "plt", ".", "title", "(", "'det(Jacobian)'", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register3D.save_act_figs": [[69, 73], ["act_model.predict", "print", "register3D.display_deformed_grid"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.display_deformed_grid"], ["", "def", "save_act_figs", "(", "act_model", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "activation_maps", "=", "act_model", ".", "predict", "(", "[", "img1", ",", "img2", "]", ")", "\n", "print", "(", "activation_maps", ".", "shape", ")", "\n", "display_deformed_grid", "(", "activation_maps", ",", "'conv11'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear": [[29, 157], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["query_points", ",", "\n", "name", "=", "'interpolate_bilinear'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "alphas", "[", "1", "]", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "alphas", "[", "1", "]", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "alphas", "[", "0", "]", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n", "", "", "def", "_interpolate_nearest", "(", "grid", ",", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear3D": [[158, 292], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["query_points", ",", "\n", "name", "=", "'interpolate_nearest'", ",", "\n", "indexing", "=", "'ij'", ")", ":", "\n", "  ", "\"\"\"Similar to Matlab's interp2 function.\n  Finds values for query points on a grid using bilinear interpolation.\n  Args:\n    grid: a 4-D float `Tensor` of shape `[batch, height, width, channels]`.\n    query_points: a 3-D float `Tensor` of N points with shape `[batch, N, 2]`.\n    name: a name for the operation (optional).\n    indexing: whether the query points are specified as row and column (ij),\n      or Cartesian coordinates (xy).\n  Returns:\n    values: a 3-D `Tensor` with shape `[batch, N, channels]`\n  Raises:\n    ValueError: if the indexing mode is invalid, or if the shape of the inputs\n      invalid.\n  \"\"\"", "\n", "if", "indexing", "!=", "'ij'", "and", "indexing", "!=", "'xy'", ":", "\n", "    ", "raise", "ValueError", "(", "'Indexing mode must be \\'ij\\' or \\'xy\\''", ")", "\n", "\n", "", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "grid", "=", "ops", ".", "convert_to_tensor", "(", "grid", ")", "\n", "query_points", "=", "ops", ".", "convert_to_tensor", "(", "query_points", ")", "\n", "shape", "=", "grid", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "\n", "if", "len", "(", "shape", ")", "!=", "4", ":", "\n", "      ", "msg", "=", "'Grid must be 4 dimensional. Received size: '", "\n", "raise", "ValueError", "(", "msg", "+", "str", "(", "grid", ".", "get_shape", "(", ")", ")", ")", "\n", "\n", "", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "grid", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "grid", ")", "[", "3", "]", ")", "\n", "\n", "shape", "=", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", "\n", "query_type", "=", "query_points", ".", "dtype", "\n", "grid_type", "=", "grid", ".", "dtype", "\n", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_equal", "(", "\n", "len", "(", "query_points", ".", "get_shape", "(", ")", ")", ",", "\n", "3", ",", "\n", "message", "=", "'Query points must be 3 dimensional.'", ")", ",", "\n", "check_ops", ".", "assert_equal", "(", "\n", "array_ops", ".", "shape", "(", "query_points", ")", "[", "2", "]", ",", "\n", "2", ",", "\n", "message", "=", "'Query points must be size 2 in dim 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "num_queries", "=", "array_ops", ".", "shape", "(", "query_points", ")", "[", "1", "]", "\n", "\n", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "height", ",", "2", ",", "message", "=", "'Grid height must be at least 2.'", ")", ",", "\n", "check_ops", ".", "assert_greater_equal", "(", "\n", "width", ",", "2", ",", "message", "=", "'Grid width must be at least 2.'", ")", "\n", "]", ")", ":", "\n", "      ", "alphas", "=", "[", "]", "\n", "floors", "=", "[", "]", "\n", "ceils", "=", "[", "]", "\n", "index_order", "=", "[", "0", ",", "1", "]", "if", "indexing", "==", "'ij'", "else", "[", "1", ",", "0", "]", "\n", "unstacked_query_points", "=", "array_ops", ".", "unstack", "(", "query_points", ",", "axis", "=", "2", ")", "\n", "\n", "", "for", "dim", "in", "index_order", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'dim-'", "+", "str", "(", "dim", ")", ")", ":", "\n", "        ", "queries", "=", "unstacked_query_points", "[", "dim", "]", "\n", "\n", "size_in_indexing_dimension", "=", "shape", "[", "dim", "+", "1", "]", "\n", "\n", "# max_floor is size_in_indexing_dimension - 2 so that max_floor + 1", "\n", "# is still a valid index into the grid.", "\n", "max_floor", "=", "math_ops", ".", "cast", "(", "size_in_indexing_dimension", "-", "2", ",", "query_type", ")", "\n", "min_floor", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "query_type", ")", "\n", "floor", "=", "math_ops", ".", "minimum", "(", "\n", "math_ops", ".", "maximum", "(", "min_floor", ",", "math_ops", ".", "floor", "(", "queries", ")", ")", ",", "max_floor", ")", "\n", "int_floor", "=", "math_ops", ".", "cast", "(", "floor", ",", "dtypes", ".", "int32", ")", "\n", "floors", ".", "append", "(", "int_floor", ")", "\n", "ceil", "=", "int_floor", "+", "1", "\n", "ceils", ".", "append", "(", "ceil", ")", "\n", "\n", "# alpha has the same type as the grid, as we will directly use alpha", "\n", "# when taking linear combinations of pixel values from the image.", "\n", "alpha", "=", "math_ops", ".", "cast", "(", "queries", "-", "floor", ",", "grid_type", ")", "\n", "min_alpha", "=", "constant_op", ".", "constant", "(", "0.0", ",", "dtype", "=", "grid_type", ")", "\n", "max_alpha", "=", "constant_op", ".", "constant", "(", "1.0", ",", "dtype", "=", "grid_type", ")", "\n", "alpha", "=", "math_ops", ".", "minimum", "(", "math_ops", ".", "maximum", "(", "min_alpha", ",", "alpha", ")", ",", "max_alpha", ")", "\n", "\n", "# Expand alpha to [b, n, 1] so we can use broadcasting", "\n", "# (since the alpha values don't depend on the channel).", "\n", "alpha", "=", "array_ops", ".", "expand_dims", "(", "alpha", ",", "2", ")", "\n", "alphas", ".", "append", "(", "alpha", ")", "\n", "\n", "", "", "with", "ops", ".", "control_dependencies", "(", "[", "\n", "check_ops", ".", "assert_less_equal", "(", "\n", "math_ops", ".", "cast", "(", "batch_size", "*", "height", "*", "width", ",", "dtype", "=", "dtypes", ".", "float32", ")", ",", "\n", "np", ".", "iinfo", "(", "np", ".", "int32", ")", ".", "max", "/", "8", ",", "\n", "message", "=", "\"\"\"The image size or batch size is sufficiently large\n                       that the linearized addresses used by array_ops.gather\n                       may exceed the int32 limit.\"\"\"", ")", "\n", "]", ")", ":", "\n", "      ", "flattened_grid", "=", "array_ops", ".", "reshape", "(", "\n", "grid", ",", "[", "batch_size", "*", "height", "*", "width", ",", "channels", "]", ")", "\n", "batch_offsets", "=", "array_ops", ".", "reshape", "(", "\n", "math_ops", ".", "range", "(", "batch_size", ")", "*", "height", "*", "width", ",", "[", "batch_size", ",", "1", "]", ")", "\n", "\n", "# This wraps array_ops.gather. We reshape the image data such that the", "\n", "# batch, y, and x coordinates are pulled into the first dimension.", "\n", "# Then we gather. Finally, we reshape the output back. It's possible this", "\n", "# code would be made simpler by using array_ops.gather_nd.", "\n", "", "def", "gather", "(", "y_coords", ",", "x_coords", ",", "name", ")", ":", "\n", "      ", "with", "ops", ".", "name_scope", "(", "'gather-'", "+", "name", ")", ":", "\n", "        ", "linear_coordinates", "=", "batch_offsets", "+", "y_coords", "*", "width", "+", "x_coords", "\n", "gathered_values", "=", "array_ops", ".", "gather", "(", "flattened_grid", ",", "linear_coordinates", ")", "\n", "return", "array_ops", ".", "reshape", "(", "gathered_values", ",", "\n", "[", "batch_size", ",", "num_queries", ",", "channels", "]", ")", "\n", "\n", "# grab the pixel values in the 4 corners around each query point", "\n", "", "", "top_left", "=", "gather", "(", "floors", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'top_left'", ")", "\n", "top_right", "=", "gather", "(", "floors", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'top_right'", ")", "\n", "bottom_left", "=", "gather", "(", "ceils", "[", "0", "]", ",", "floors", "[", "1", "]", ",", "'bottom_left'", ")", "\n", "bottom_right", "=", "gather", "(", "ceils", "[", "0", "]", ",", "ceils", "[", "1", "]", ",", "'bottom_right'", ")", "\n", "\n", "# now, do the actual interpolation", "\n", "with", "ops", ".", "name_scope", "(", "'interpolate'", ")", ":", "\n", "      ", "interp_top", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "top_right", "-", "top_left", ")", "+", "top_left", "\n", "interp_bottom", "=", "K", ".", "round", "(", "alphas", "[", "1", "]", ")", "*", "(", "bottom_right", "-", "bottom_left", ")", "+", "bottom_left", "\n", "interp", "=", "K", ".", "round", "(", "alphas", "[", "0", "]", ")", "*", "(", "interp_bottom", "-", "interp_top", ")", "+", "interp_top", "\n", "\n", "", "return", "interp", "\n", "\n", "", "", "def", "image_warp", "(", "image", ",", "flow", ",", "interp_method", ",", "name", "=", "'dense_image_warp'", ")", ":", "\n", "  "]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest": [[293, 418], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], ["\n", "with", "ops", ".", "name_scope", "(", "name", ")", ":", "\n", "    ", "batch_size", ",", "height", ",", "width", ",", "channels", "=", "(", "array_ops", ".", "shape", "(", "image", ")", "[", "0", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "1", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "2", "]", ",", "\n", "array_ops", ".", "shape", "(", "image", ")", "[", "3", "]", ")", "\n", "\n", "# The flow is defined on the image grid. Turn the flow into a list of query", "\n", "# points in the grid space.", "\n", "grid_x", ",", "grid_y", "=", "array_ops", ".", "meshgrid", "(", "\n", "math_ops", ".", "range", "(", "width", ")", ",", "math_ops", ".", "range", "(", "height", ")", ")", "\n", "stacked_grid", "=", "math_ops", ".", "cast", "(", "\n", "array_ops", ".", "stack", "(", "[", "grid_y", ",", "grid_x", "]", ",", "axis", "=", "2", ")", ",", "flow", ".", "dtype", ")", "\n", "batched_grid", "=", "array_ops", ".", "expand_dims", "(", "stacked_grid", ",", "axis", "=", "0", ")", "\n", "query_points_on_grid", "=", "batched_grid", "-", "flow", "\n", "query_points_flattened", "=", "array_ops", ".", "reshape", "(", "query_points_on_grid", ",", "\n", "[", "batch_size", ",", "height", "*", "width", ",", "2", "]", ")", "\n", "# Compute values at the query points, then reshape the result back to the", "\n", "# image grid.", "\n", "if", "interp_method", "==", "'bilinear'", "or", "interp_method", "==", "'Bilinear'", ":", "\n", "        ", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "elif", "interp_method", "==", "'nearest_neighbor'", "or", "interp_method", "==", "'NN'", ":", "\n", "        ", "interpolated", "=", "_interpolate_nearest", "(", "image", ",", "query_points_flattened", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Running on bi-linear interpolation!'", ")", "\n", "interpolated", "=", "_interpolate_bilinear", "(", "image", ",", "query_points_flattened", ")", "\n", "", "interpolated", "=", "array_ops", ".", "reshape", "(", "interpolated", ",", "\n", "[", "batch_size", ",", "height", ",", "width", ",", "channels", "]", ")", "\n", "return", "interpolated", "\n", "", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest3D": [[419, 552], ["ValueError", "tensorflow.python.framework.ops.name_scope", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "ops.convert_to_tensor.get_shape().as_list", "image_warp._interpolate_bilinear.gather"], "function", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp": [[553, 609], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack", "image_warp._interpolate_bilinear", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "image_warp._interpolate_nearest", "print", "image_warp._interpolate_bilinear"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp3D": [[610, 641], ["tensorflow.python.framework.ops.name_scope", "tensorflow.python.ops.array_ops.meshgrid", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.array_ops.expand_dims", "print", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.array_ops.reshape", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.math_ops.range", "tensorflow.python.ops.array_ops.stack", "image.get_shape().as_list", "image_warp._interpolate_bilinear3D", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "tensorflow.python.ops.array_ops.shape", "image_warp._interpolate_nearest3D", "print", "image_warp._interpolate_bilinear3D", "image.get_shape"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear3D", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_nearest3D", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp._interpolate_bilinear3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.Mapping2D_nn": [[643, 648], ["image_warp.image_warp"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.Mapping3D_nn": [[649, 654], ["image_warp.image_warp3D"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.Mapping2D": [[655, 660], ["image_warp.image_warp"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.Mapping3D": [[661, 666], ["image_warp.image_warp3D"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.image_warp.image_warp3D"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.reset_weights": [[13, 18], ["keras.backend.get_session", "hasattr", "layer.kernel.initializer.run"], "function", ["None"], ["from", "scipy", ".", "ndimage", "import", "gaussian_filter", "\n", "\n", "def", "reset_weights", "(", "model", ")", ":", "\n", "    ", "session", "=", "K", ".", "get_session", "(", ")", "\n", "for", "layer", "in", "model", ".", "layers", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'kernel_initializer'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian": [[19, 28], ["numpy.gradient", "numpy.gradient", "numpy.zeros", "range", "range", "numpy.linalg.det"], "function", ["None"], ["            ", "layer", ".", "kernel", ".", "initializer", ".", "run", "(", "session", "=", "session", ")", "\n", "\n", "", "", "", "def", "detJacobian", "(", "Axij", ",", "Ayij", ",", "**", "kwargs", ")", ":", "\n", "    ", "[", "xFX", ",", "xFY", "]", "=", "np", ".", "gradient", "(", "Axij", ")", "\n", "[", "yFX", ",", "yFY", "]", "=", "np", ".", "gradient", "(", "Ayij", ")", "\n", "jac_det", "=", "np", ".", "zeros", "(", "Axij", ".", "shape", ")", "\n", "for", "i", "in", "range", "(", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "384", ")", ":", "\n", "            ", "jac_mij", "=", "[", "[", "xFX", "[", "i", ",", "j", "]", ",", "xFY", "[", "i", ",", "j", "]", "]", ",", "[", "yFX", "[", "i", ",", "j", "]", ",", "yFY", "[", "i", ",", "j", "]", "]", "]", "\n", "jac_det", "[", "i", ",", "j", "]", "=", "np", ".", "linalg", ".", "det", "(", "jac_mij", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid": [[29, 34], ["range", "range", "matplotlib.plot", "matplotlib.plot"], "function", ["None"], ["", "", "return", "jac_det", "\n", "\n", "", "def", "plot_grid", "(", "gridx", ",", "gridy", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "gridx", "[", "i", ",", ":", "]", ",", "gridy", "[", "i", ",", ":", "]", ",", "**", "kwargs", ")", "\n", "", "for", "i", "in", "range", "(", "gridx", ".", "shape", "[", "0", "]", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.display_deformed_grid": [[35, 73], ["matplotlib.figure", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.axis", "matplotlib.imshow", "matplotlib.savefig", "matplotlib.close", "numpy.arange", "numpy.arange", "numpy.meshgrid", "feature_maps[].reshape", "feature_maps[].reshape", "print", "range", "matplotlib.figure", "matplotlib.subplot", "register2D.plot_grid", "matplotlib.gca().invert_yaxis", "matplotlib.title", "matplotlib.subplot", "register2D.detJacobian", "print", "print", "matplotlib.imshow", "matplotlib.title", "matplotlib.colorbar", "range", "str", "matplotlib.gca", "str", "str", "numpy.max", "numpy.min", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.plot_grid", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.detJacobian"], ["        ", "plt", ".", "plot", "(", "gridx", "[", ":", ",", "i", "]", ",", "gridy", "[", ":", ",", "i", "]", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "display_deformed_grid", "(", "feature_maps", ",", "layer_name", ")", ":", "\n", "    ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "1", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "2", ",", "2", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "imshow", "(", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ",", "cmap", "=", "'gray'", ")", "\n", "plt", ".", "savefig", "(", "layer_name", "+", "'.png'", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "y", "=", "np", ".", "arange", "(", "0", ",", "384", ",", "1", ")", "\n", "X", ",", "Y", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "u", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "v", "=", "feature_maps", "[", "0", ",", ":", ",", ":", ",", "1", "]", ".", "reshape", "(", "384", ",", "384", ")", "\n", "print", "(", "'max u: '", "+", "str", "(", "np", ".", "max", "(", "u", ")", ")", ")", "\n", "\n", "phix", "=", "X", ";", "phiy", "=", "Y", "\n", "down", "=", "7", "\n", "for", "i", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "0", ",", "384", ")", ":", "\n", "# add the displacement for each p(k) in the sum", "\n", "            ", "phix", "[", "i", ",", "j", "]", "=", "phix", "[", "i", ",", "j", "]", "-", "u", "[", "i", ",", "j", "]", "\n", "phiy", "[", "i", ",", "j", "]", "=", "phiy", "[", "i", ",", "j", "]", "-", "v", "[", "i", ",", "j", "]", "\n", "", "", "phixdown", "=", "phix", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "phiydown", "=", "phiy", "[", "0", ":", "-", "1", ":", "down", ",", "0", ":", "-", "1", ":", "down", "]", "\n", "plt", ".", "figure", "(", "num", "=", "None", ",", "figsize", "=", "(", "46", ",", "6", ")", ",", "dpi", "=", "150", ",", "facecolor", "=", "'w'", ",", "edgecolor", "=", "'k'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "7", ",", "1", ")", "\n", "plot_grid", "(", "phixdown", ",", "phiydown", ",", "color", "=", "\"k\"", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "plt", ".", "title", "(", "'Deformed grid'", ")", "\n", "plt", ".", "subplot", "(", "1", ",", "7", ",", "2", ")", "\n", "detJac", "=", "detJacobian", "(", "phix", ",", "phiy", ")", "\n", "print", "(", "'Min det(Jac): '", "+", "str", "(", "np", ".", "min", "(", "np", ".", "abs", "(", "detJac", ")", ")", ")", ")", "\n", "print", "(", "'# det(Jac)<=0: '", "+", "str", "(", "(", "detJac", "==", "0", ")", ".", "sum", "(", ")", ")", ")", "\n", "plt", ".", "imshow", "(", "detJac", ")", ";", "plt", ".", "title", "(", "'det(Jacobian)'", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.save_act_figs": [[74, 78], ["act_model.predict", "print", "register2D.display_deformed_grid"], "function", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.register2D.display_deformed_grid"], ["plt", ".", "colorbar", "(", ")", "\n", "\n", "", "def", "save_act_figs", "(", "act_model", ",", "img1", ",", "img2", ")", ":", "\n", "    ", "activation_maps", "=", "act_model", ".", "predict", "(", "[", "img1", ",", "img2", "]", ")", "\n", "print", "(", "activation_maps", ".", "shape", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.l2Reg.__init__": [[8, 10], ["keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.l2Reg.__call__": [[11, 14], ["tensorflow.reduce_mean"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "regularization", "=", "self", ".", "wt", "*", "tf", ".", "reduce_mean", "(", "x", "*", "x", ")", "\n", "return", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.TVNormReg.__init__": [[20, 22], ["keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.TVNormReg.__call__": [[23, 28], ["tensorflow.reduce_sum", "tensorflow.image.total_variation", "tensorflow.image.total_variation"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "xx", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "yy", "=", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "regularization", "=", "self", ".", "wt", "*", "tf", ".", "reduce_sum", "(", "tf", ".", "image", ".", "total_variation", "(", "xx", ")", "+", "tf", ".", "image", ".", "total_variation", "(", "yy", ")", ")", "\n", "return", "regularization", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.NJ_reg.__init__": [[36, 38], ["keras.backend.cast_to_floatx"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "wt", "=", "K", ".", "cast_to_floatx", "(", "wt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.NJ_reg.Get_Ja": [[39, 53], ["None"], "methods", ["None"], ["", "def", "Get_Ja", "(", "self", ",", "v", ")", ":", "\n", "        ", "D_x", "=", "(", "v", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D_y", "=", "(", "v", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D1", "=", "(", "D_x", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "D_y", "[", "...", ",", "1", "]", "+", "1", ")", "-", "(", "D_x", "[", "...", ",", "1", "]", ")", "*", "(", "D_y", "[", "...", ",", "0", "]", ")", "\n", "\n", "# D1 = (D_x[...,0]+1)*( (D_y[...,1]+1)*(D_z[...,2]+1) - D_z[...,1]*D_y[...,2])", "\n", "\n", "# D2 = (D_x[...,1])*(D_y[...,0]*(D_z[...,2]+1) - D_y[...,2]*D_x[...,0])", "\n", "\n", "# D3 = (D_x[...,2])*(D_y[...,0]*D_z[...,1] - (D_y[...,1]+1)*D_z[...,0])", "\n", "\n", "return", "D1", "# -D2+D3", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.NJ_reg.__call__": [[54, 60], ["tensorflow.reduce_sum", "tensorflow.abs", "reg.NJ_reg.Get_Ja", "reg.NJ_reg.Get_Ja"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja"], ["", "def", "__call__", "(", "self", ",", "v", ")", ":", "\n", "        ", "'''\n        Penalizing locations where Jacobian has negative determinants\n        '''", "\n", "Neg_Jac", "=", "0.5", "*", "(", "tf", ".", "abs", "(", "self", ".", "Get_Ja", "(", "v", ")", ")", "-", "self", ".", "Get_Ja", "(", "v", ")", ")", "\n", "return", "self", ".", "wt", "*", "tf", ".", "reduce_sum", "(", "Neg_Jac", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad.__init__": [[69, 72], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "penalty", "=", "'l1'", ",", "wt", "=", "0", ")", ":", "\n", "        ", "self", ".", "penalty", "=", "penalty", "\n", "self", ".", "wt", "=", "wt", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad._diffs": [[73, 92], ["len", "range", "keras.backend.permute_dimensions.get_shape().as_list", "keras.backend.permute_dimensions", "keras.backend.permute_dimensions", "keras.backend.permute_dimensions.get_shape", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "_diffs", "(", "self", ",", "y", ")", ":", "\n", "        ", "vol_shape", "=", "y", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "ndims", "=", "len", "(", "vol_shape", ")", "\n", "\n", "df", "=", "[", "None", "]", "*", "ndims", "\n", "for", "i", "in", "range", "(", "ndims", ")", ":", "\n", "            ", "d", "=", "i", "+", "1", "\n", "# permute dimensions to put the ith dimension first", "\n", "r", "=", "[", "d", ",", "*", "range", "(", "d", ")", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "y", "=", "K", ".", "permute_dimensions", "(", "y", ",", "r", ")", "\n", "dfi", "=", "y", "[", "1", ":", ",", "...", "]", "-", "y", "[", ":", "-", "1", ",", "...", "]", "\n", "\n", "# permute back", "\n", "# note: this might not be necessary for this loss specifically,", "\n", "# since the results are just summed over anyway.", "\n", "r", "=", "[", "*", "range", "(", "1", ",", "d", "+", "1", ")", ",", "0", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "df", "[", "i", "]", "=", "K", ".", "permute_dimensions", "(", "dfi", ",", "r", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad.__call__": [[93, 100], ["len", "tensorflow.reduce_mean", "tensorflow.add_n", "tensorflow.abs", "reg.Grad._diffs", "tensorflow.reduce_mean", "reg.Grad._diffs"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs"], ["", "def", "__call__", "(", "self", ",", "y_pred", ")", ":", "\n", "        ", "if", "self", ".", "penalty", "==", "'l1'", ":", "\n", "            ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "f", ")", ")", "for", "f", "in", "self", ".", "_diffs", "(", "y_pred", ")", "]", "\n", "", "elif", "self", ".", "penalty", "==", "'l2'", ":", "\n", "            ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "f", "*", "f", ")", "for", "f", "in", "self", ".", "_diffs", "(", "y_pred", ")", "]", "\n", "\n", "", "return", "self", ".", "wt", "*", "tf", ".", "add_n", "(", "df", ")", "/", "len", "(", "df", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.__init__": [[103, 106], ["keras.backend.cast_to_floatx", "keras.backend.cast_to_floatx"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wt1", "=", "1", ",", "wt2", "=", "0.0001", ")", ":", "\n", "        ", "self", ".", "wt_diff", "=", "K", ".", "cast_to_floatx", "(", "wt1", ")", "\n", "self", ".", "wt_npj", "=", "K", ".", "cast_to_floatx", "(", "wt2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs": [[107, 126], ["len", "range", "keras.backend.permute_dimensions.get_shape().as_list", "keras.backend.permute_dimensions", "keras.backend.permute_dimensions", "keras.backend.permute_dimensions.get_shape", "range", "range", "range", "range"], "methods", ["None"], ["", "def", "_diffs", "(", "self", ",", "y", ")", ":", "\n", "        ", "vol_shape", "=", "y", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "1", ":", "-", "1", "]", "\n", "ndims", "=", "len", "(", "vol_shape", ")", "\n", "\n", "df", "=", "[", "None", "]", "*", "ndims", "\n", "for", "i", "in", "range", "(", "ndims", ")", ":", "\n", "            ", "d", "=", "i", "+", "1", "\n", "# permute dimensions to put the ith dimension first", "\n", "r", "=", "[", "d", ",", "*", "range", "(", "d", ")", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "y", "=", "K", ".", "permute_dimensions", "(", "y", ",", "r", ")", "\n", "dfi", "=", "y", "[", "1", ":", ",", "...", "]", "-", "y", "[", ":", "-", "1", ",", "...", "]", "\n", "\n", "# permute back", "\n", "# note: this might not be necessary for this loss specifically,", "\n", "# since the results are just summed over anyway.", "\n", "r", "=", "[", "*", "range", "(", "1", ",", "d", "+", "1", ")", ",", "0", ",", "*", "range", "(", "d", "+", "1", ",", "ndims", "+", "2", ")", "]", "\n", "df", "[", "i", "]", "=", "K", ".", "permute_dimensions", "(", "dfi", ",", "r", ")", "\n", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja": [[127, 146], ["None"], "methods", ["None"], ["", "def", "Get_Ja", "(", "self", ",", "v", ")", ":", "\n", "\n", "        ", "'''\n        Calculate the Jacobian value at each point of the displacement map having\n        size of b*h*w*d*3 and in the cubic volumn of [-1, 1]^3\n        '''", "\n", "D_x", "=", "(", "v", "[", ":", ",", "1", ":", ",", ":", "-", "1", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D_y", "=", "(", "v", "[", ":", ",", ":", "-", "1", ",", "1", ":", ",", ":", "]", "-", "v", "[", ":", ",", ":", "-", "1", ",", ":", "-", "1", ",", ":", "]", ")", "\n", "\n", "D1", "=", "(", "D_x", "[", "...", ",", "0", "]", "+", "1", ")", "*", "(", "D_y", "[", "...", ",", "1", "]", "+", "1", ")", "-", "(", "D_x", "[", "...", ",", "1", "]", ")", "*", "(", "D_y", "[", "...", ",", "0", "]", ")", "\n", "\n", "#D1 = (D_x[...,0]+1)*( (D_y[...,1]+1)*(D_z[...,2]+1) - D_z[...,1]*D_y[...,2])", "\n", "\n", "#D2 = (D_x[...,1])*(D_y[...,0]*(D_z[...,2]+1) - D_y[...,2]*D_x[...,0])", "\n", "\n", "#D3 = (D_x[...,2])*(D_y[...,0]*D_z[...,1] - (D_y[...,1]+1)*D_z[...,0])", "\n", "\n", "return", "D1", "#-D2+D3", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.__call__": [[147, 151], ["tensorflow.reduce_mean", "reg.Grad_NJ_reg._diffs", "tensorflow.abs", "reg.Grad_NJ_reg.Get_Ja", "tensorflow.reduce_sum", "reg.Grad_NJ_reg.Get_Ja", "tensorflow.add_n", "len"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg._diffs", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.reg.Grad_NJ_reg.Get_Ja"], ["", "def", "__call__", "(", "self", ",", "v", ")", ":", "\n", "        ", "df", "=", "[", "tf", ".", "reduce_mean", "(", "f", "*", "f", ")", "for", "f", "in", "self", ".", "_diffs", "(", "v", ")", "]", "\n", "Neg_Jac", "=", "0.5", "*", "(", "tf", ".", "abs", "(", "self", ".", "Get_Ja", "(", "v", ")", ")", "-", "self", ".", "Get_Ja", "(", "v", ")", ")", "\n", "return", "self", ".", "wt_diff", "*", "(", "tf", ".", "add_n", "(", "df", ")", "/", "len", "(", "df", ")", ")", "+", "self", ".", "wt_npj", "*", "tf", ".", "reduce_sum", "(", "Neg_Jac", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.__init__": [[13, 16], ["None"], "methods", ["None"], ["\n", "class", "NCC", "(", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.ncc": [[18, 71], ["getattr", "tensorflow.ones", "getattr.", "getattr.", "getattr.", "getattr.", "getattr.", "numpy.prod", "tensorflow.math.reduce_sum", "tensorflow.math.reduce_sum", "tensorflow.math.reduce_sum", "len", "print", "I.get_shape().as_list", "type", "print", "tensorflow.math.sqrt", "I.get_shape"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "win", "=", "None", ",", "eps", "=", "1e-5", ")", ":", "\n", "        ", "self", ".", "win", "=", "win", "\n", "self", ".", "eps", "=", "eps", "\n", "\n", "\n", "", "def", "ncc", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "# get dimension of volume", "\n", "# assumes I, J are sized [batch_size, *vol_shape, nb_feats]", "\n", "        ", "ndims", "=", "len", "(", "I", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "-", "2", "\n", "assert", "ndims", "in", "[", "1", ",", "2", ",", "3", "]", ",", "\"volumes should be 1 to 3 dimensions. found: %d\"", "%", "ndims", "\n", "\n", "# set window size", "\n", "if", "self", ".", "win", "is", "None", ":", "\n", "            ", "self", ".", "win", "=", "[", "7", "]", "*", "ndims", "\n", "\n", "# get convolution function", "\n", "", "conv_fn", "=", "getattr", "(", "tf", ".", "nn", ",", "'conv%dd'", "%", "ndims", ")", "\n", "\n", "# compute CC squares", "\n", "I2", "=", "I", "*", "I", "\n", "J2", "=", "J", "*", "J", "\n", "IJ", "=", "I", "*", "J", "\n", "\n", "# compute filters", "\n", "sum_filt", "=", "tf", ".", "ones", "(", "[", "*", "self", ".", "win", ",", "1", ",", "1", "]", ")", "\n", "strides", "=", "1", "\n", "if", "ndims", ">", "1", ":", "\n", "            ", "strides", "=", "[", "1", "]", "*", "(", "ndims", "+", "2", ")", "\n", "", "padding", "=", "'SAME'", "\n", "\n", "# compute local sums via convolution", "\n", "I_sum", "=", "conv_fn", "(", "I", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J_sum", "=", "conv_fn", "(", "J", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "I2_sum", "=", "conv_fn", "(", "I2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "J2_sum", "=", "conv_fn", "(", "J2", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "IJ_sum", "=", "conv_fn", "(", "IJ", ",", "sum_filt", ",", "strides", ",", "padding", ")", "\n", "\n", "# compute cross correlation", "\n", "win_size", "=", "np", ".", "prod", "(", "self", ".", "win", ")", "\n", "u_I", "=", "I_sum", "/", "win_size", "\n", "u_J", "=", "J_sum", "/", "win_size", "\n", "\n", "cross", "=", "IJ_sum", "-", "u_J", "*", "I_sum", "-", "u_I", "*", "J_sum", "+", "u_I", "*", "u_J", "*", "win_size", "\n", "I_var", "=", "I2_sum", "-", "2", "*", "u_I", "*", "I_sum", "+", "u_I", "*", "u_I", "*", "win_size", "\n", "J_var", "=", "J2_sum", "-", "2", "*", "u_J", "*", "J_sum", "+", "u_J", "*", "u_J", "*", "win_size", "\n", "\n", "cc", "=", "cross", "*", "cross", "/", "(", "I_var", "*", "J_var", "+", "self", ".", "eps", ")", "\n", "\n", "# return negative cc.", "\n", "return", "tf", ".", "reduce_mean", "(", "cc", ")", "\n", "\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.loss": [[72, 74], ["losses.NCC.ncc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.NCC.ncc"], ["        ", "return", "-", "self", ".", "ncc", "(", "I", ",", "J", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.SSIM.__init__": [[79, 81], ["None"], "methods", ["None"], ["        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.SSIM.ssim": [[82, 85], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.SSIM.loss": [[86, 88], ["losses.SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC.__init__": [[93, 95], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "maxVal", "=", "maxVal", "\n", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC.pcc": [[96, 102], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["\n", "", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC.loss": [[103, 105], ["losses.PCC.pcc"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc"], ["\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.__init__": [[110, 114], ["None"], "methods", ["None"], ["class", "PCC_SSIM", "(", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pcc_wt", "=", "0.5", ",", "maxVal", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "pcc_wt", "=", "pcc_wt", "\n", "self", ".", "ssim_wt", "=", "1.0", "-", "pcc_wt", "\n", "self", ".", "maxVal", "=", "maxVal", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc": [[115, 121], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "keras.backend.sqrt", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "methods", ["None"], ["\n", "", "def", "pcc", "(", "self", ",", "y_true", ",", "y_pred", ")", ":", "\n", "        ", "A_bar", "=", "tf", ".", "reduce_mean", "(", "y_pred", ")", "\n", "B_bar", "=", "tf", ".", "reduce_mean", "(", "y_true", ")", "\n", "num", "=", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "*", "(", "y_true", "-", "B_bar", ")", ")", "\n", "den", "=", "K", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "(", "y_pred", "-", "A_bar", ")", "**", "2", ")", "*", "tf", ".", "reduce_sum", "(", "(", "y_true", "-", "B_bar", ")", "**", "2", ")", ")", "\n", "return", "num", "/", "den", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim": [[122, 125], ["tensorflow.image.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["\n", "", "def", "ssim", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "SSIM_idx", "=", "tf", ".", "image", ".", "ssim", "(", "I", ",", "J", ",", "max_val", "=", "self", ".", "maxVal", ")", "\n", "return", "SSIM_idx", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.loss": [[126, 128], ["losses.PCC_SSIM.pcc", "losses.PCC_SSIM.ssim"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.pcc", "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.PCC_SSIM.ssim"], ["\n", "", "def", "loss", "(", "self", ",", "I", ",", "J", ")", ":", "\n", "        ", "return", "self", ".", "pcc_wt", "*", "(", "1", "-", "self", ".", "pcc", "(", "I", ",", "J", ")", ")", "+", "self", ".", "ssim_wt", "*", "(", "1", "-", "self", ".", "ssim", "(", "I", ",", "J", ")", ")", "\n"]], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.MutualInformation.__init__": [[139, 153], ["numpy.linspace", "keras.backend.variable", "len", "keras.backend.variable", "numpy.mean", "numpy.diff", "numpy.square"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.MutualInformation.mi": [[153, 187], ["keras.backend.clip", "keras.backend.clip", "keras.backend.reshape", "keras.backend.expand_dims", "keras.backend.reshape", "keras.backend.expand_dims", "tensorflow.cast", "keras.backend.reshape", "keras.backend.exp", "keras.backend.sum", "keras.backend.exp", "keras.backend.sum", "keras.backend.permute_dimensions", "keras.backend.batch_dot", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "keras.backend.sum", "numpy.prod", "keras.backend.batch_dot", "keras.backend.epsilon", "keras.backend.sum", "keras.backend.prod", "keras.backend.prod", "keras.backend.shape", "losses.MutualInformation.vol_bin_centers.get_shape().as_list", "keras.backend.square", "keras.backend.square", "keras.backend.permute_dimensions", "keras.backend.log", "keras.backend.shape", "keras.backend.shape", "losses.MutualInformation.vol_bin_centers.get_shape", "keras.backend.epsilon"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.MutualInformation.loss": [[188, 190], ["losses.MutualInformation.mi"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.mi"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.__init__": [[196, 210], ["numpy.linspace", "keras.backend.variable", "len", "keras.backend.variable", "numpy.mean", "numpy.diff", "numpy.square"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.mi": [[211, 247], ["keras.backend.clip", "keras.backend.clip", "keras.backend.reshape", "keras.backend.expand_dims", "keras.backend.reshape", "keras.backend.expand_dims", "tensorflow.cast", "keras.backend.reshape", "keras.backend.exp", "keras.backend.sum", "keras.backend.exp", "keras.backend.sum", "keras.backend.permute_dimensions", "keras.backend.batch_dot", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "keras.backend.sum", "numpy.prod", "keras.backend.batch_dot", "keras.backend.epsilon", "keras.backend.sum", "keras.backend.prod", "keras.backend.prod", "keras.backend.shape", "losses.ParzenMutualInformation.vol_bin_centers.get_shape().as_list", "keras.backend.square", "keras.backend.square", "keras.backend.permute_dimensions", "keras.backend.log", "keras.backend.shape", "keras.backend.shape", "losses.ParzenMutualInformation.vol_bin_centers.get_shape", "keras.backend.epsilon"], "methods", ["None"], []], "home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.loss": [[248, 250], ["losses.ParzenMutualInformation.mi"], "methods", ["home.repos.pwc.inspect_result.junyuchen245_Fully_Unsupervised_CNN_Registration_Keras.CNNReg_MedPhy.losses.ParzenMutualInformation.mi"], []]}