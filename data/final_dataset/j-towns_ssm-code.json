{"home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.exp2": [[12, 14], ["None"], "function", ["None"], ["def", "exp2", "(", "x", ")", ":", "\n", "    ", "return", "1", "<<", "x", "# Assumes x is an integer", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf": [[26, 31], ["numpy.concatenate().astype", "numpy.concatenate", "numpy.zeros", "numpy.round", "hmm_codec.exp2", "numpy.cumsum"], "function", ["home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.exp2"], ["", "def", "quantized_cdf", "(", "h", ":", "HyperParams", ",", "masses", ")", ":", "\n", "    ", "return", "np", ".", "concatenate", "(", "[", "\n", "np", ".", "zeros", "(", "masses", ".", "shape", "[", ":", "-", "1", "]", "+", "(", "1", ",", ")", ")", ",", "\n", "np", ".", "round", "(", "exp2", "(", "h", ".", "quant_prec", ")", "\n", "*", "np", ".", "cumsum", "(", "masses", ",", "-", "1", ")", ")", "]", ",", "-", "1", ")", ".", "astype", "(", "'uint64'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.hmm_params_sample": [[32, 38], ["hmm_codec.quantized_cdf", "hmm_codec.quantized_cdf", "hmm_codec.quantized_cdf", "numpy.ones", "numpy.ones", "rng.dirichlet", "rng.dirichlet", "rng.dirichlet"], "function", ["home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf"], ["", "def", "hmm_params_sample", "(", "h", ":", "HyperParams", ",", "rng", ":", "random", ".", "Generator", ")", ":", "\n", "    ", "alpha_latent", ",", "alpha_obs", "=", "np", ".", "ones", "(", "h", ".", "latent_K", ")", ",", "np", ".", "ones", "(", "h", ".", "obs_K", ")", "\n", "a0", "=", "quantized_cdf", "(", "h", ",", "rng", ".", "dirichlet", "(", "alpha_latent", ")", ")", "\n", "a", "=", "quantized_cdf", "(", "h", ",", "rng", ".", "dirichlet", "(", "alpha_latent", ",", "h", ".", "latent_K", ")", ")", "\n", "b", "=", "quantized_cdf", "(", "h", ",", "rng", ".", "dirichlet", "(", "alpha_obs", ",", "h", ".", "latent_K", ")", ")", "\n", "return", "a0", ",", "a", ",", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf_to_mass": [[39, 41], ["numpy.diff", "hmm_codec.exp2"], "function", ["home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.exp2"], ["", "def", "quantized_cdf_to_mass", "(", "h", ":", "HyperParams", ",", "cdf", ")", ":", "\n", "    ", "return", "np", ".", "diff", "(", "cdf", ")", "/", "exp2", "(", "h", ".", "quant_prec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.hmm_sample": [[42, 49], ["map", "range", "numpy.array", "functools.partial", "rng.choice", "xs.append", "rng.choice"], "function", ["None"], ["", "def", "hmm_sample", "(", "h", ":", "HyperParams", ",", "params", ",", "rng", ":", "random", ".", "Generator", ")", ":", "\n", "    ", "a0", ",", "a", ",", "b", "=", "map", "(", "partial", "(", "quantized_cdf_to_mass", ",", "h", ")", ",", "params", ")", "\n", "xs", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "h", ".", "T", ")", ":", "\n", "        ", "z", "=", "rng", ".", "choice", "(", "h", ".", "latent_K", ",", "p", "=", "a", "[", "z", "]", "if", "t", "else", "a0", ")", "\n", "xs", ".", "append", "(", "rng", ".", "choice", "(", "h", ".", "obs_K", ",", "p", "=", "b", "[", "z", "]", ")", ")", "\n", "", "return", "np", ".", "array", "(", "xs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.hmm_logpmf": [[50, 60], ["numpy.seterr", "map", "numpy.seterr", "map", "scipy.special.logsumexp", "functools.partial", "scipy.special.logsumexp"], "function", ["None"], ["", "def", "hmm_logpmf", "(", "h", ":", "HyperParams", ",", "params", ",", "xs", ")", ":", "\n", "# Based on Matt Johnson's hmm_em.py Autograd example", "\n", "    ", "err_settings", "=", "np", ".", "seterr", "(", "divide", "=", "'ignore'", ")", "# Suppress div by zero warning", "\n", "log_a0", ",", "log_a", ",", "log_b", "=", "map", "(", "np", ".", "log", ",", "map", "(", "\n", "partial", "(", "quantized_cdf_to_mass", ",", "h", ")", ",", "params", ")", ")", "\n", "np", ".", "seterr", "(", "**", "err_settings", ")", "\n", "log_alpha", "=", "log_a0", "\n", "for", "x", "in", "xs", ":", "\n", "        ", "log_alpha", "=", "logsumexp", "(", "log_alpha", "[", ":", ",", "None", "]", "+", "log_a", ",", "0", ")", "+", "log_b", "[", ":", ",", "x", "]", "\n", "", "return", "logsumexp", "(", "log_alpha", ")", "/", "ln2", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.SSM": [[61, 97], ["craystack.Codec", "enumerate", "post_codecs[].pop", "range", "priors[].push", "priors[].pop", "hmm_codec.HMM.post_update", "xs.append", "range", "post_codec.push", "hmm_codec.HMM.post_update", "post_codecs.append", "len", "post_codec().push", "hmm_codec.HMM.post_update", "xs.append", "len", "post_codec"], "function", ["None"], ["", "def", "SSM", "(", "priors", ",", "likelihoods", ",", "posterior", ")", ":", "\n", "# priors = [p(z_1), p(z_2 | z_1), ..., p(z_T | z_{T-1})]", "\n", "# likelihoods = [p(x_1 | z_1), ..., p(x_T | z_T)]", "\n", "# [lambda z_{t+1}: Q(z_t | x_{1:t}, z_{t+1}) for t in range(T)]", "\n", "    ", "post_init_state", ",", "post_update", "=", "posterior", "\n", "def", "push", "(", "message", ",", "xs", ")", ":", "\n", "        ", "post_codecs", "=", "[", "]", "\n", "post_state", "=", "post_init_state", "\n", "for", "t", ",", "x", "in", "enumerate", "(", "xs", ")", ":", "# Forward inference pass", "\n", "            ", "post_state", ",", "post_codec", "=", "post_update", "(", "t", ",", "post_state", ",", "x", ")", "\n", "post_codecs", ".", "append", "(", "post_codec", ")", "\n", "", "message", ",", "z_next", "=", "post_codecs", "[", "-", "1", "]", ".", "pop", "(", "message", ")", "\n", "for", "t", "in", "range", "(", "len", "(", "priors", ")", "-", "1", ",", "0", ",", "-", "1", ")", ":", "# Backward encoding pass", "\n", "            ", "message", "=", "likelihoods", "[", "t", "]", "(", "z_next", ")", ".", "push", "(", "message", ",", "xs", "[", "t", "]", ")", "\n", "message", ",", "z", "=", "post_codecs", "[", "t", "-", "1", "]", "(", "z_next", ")", ".", "pop", "(", "message", ")", "\n", "message", "=", "priors", "[", "t", "]", "(", "z", ")", ".", "push", "(", "message", ",", "z_next", ")", "\n", "z_next", "=", "z", "\n", "", "message", "=", "likelihoods", "[", "0", "]", "(", "z_next", ")", ".", "push", "(", "message", ",", "xs", "[", "0", "]", ")", "\n", "message", "=", "priors", "[", "0", "]", ".", "push", "(", "message", ",", "z_next", ")", "\n", "return", "message", "\n", "", "def", "pop", "(", "message", ")", ":", "\n", "        ", "xs", "=", "[", "]", "\n", "message", ",", "z_next", "=", "priors", "[", "0", "]", ".", "pop", "(", "message", ")", "\n", "message", ",", "x", "=", "likelihoods", "[", "0", "]", "(", "z_next", ")", ".", "pop", "(", "message", ")", "\n", "post_state", ",", "post_codec", "=", "post_update", "(", "0", ",", "post_init_state", ",", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "for", "t", "in", "range", "(", "1", ",", "len", "(", "priors", ")", ")", ":", "# Forward decoding pass", "\n", "            ", "z", "=", "z_next", "\n", "message", ",", "z_next", "=", "priors", "[", "t", "]", "(", "z", ")", ".", "pop", "(", "message", ")", "\n", "message", "=", "post_codec", "(", "z_next", ")", ".", "push", "(", "message", ",", "z", ")", "\n", "message", ",", "x", "=", "likelihoods", "[", "t", "]", "(", "z_next", ")", ".", "pop", "(", "message", ")", "\n", "post_state", ",", "post_codec", "=", "post_update", "(", "t", ",", "post_state", ",", "x", ")", "\n", "xs", ".", "append", "(", "x", ")", "\n", "", "message", "=", "post_codec", ".", "push", "(", "message", ",", "z_next", ")", "\n", "return", "message", ",", "xs", "\n", "", "return", "cs", ".", "Codec", "(", "push", ",", "pop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical": [[98, 105], ["craystack.NonUniform", "numpy.searchsorted"], "function", ["None"], ["", "def", "Categorical", "(", "h", ":", "HyperParams", ",", "cdf", ")", ":", "\n", "    ", "def", "enc_statfun", "(", "x", ")", ":", "\n", "        ", "return", "cdf", "[", "x", "]", ",", "cdf", "[", "x", "+", "1", "]", "-", "cdf", "[", "x", "]", "\n", "", "def", "dec_statfun", "(", "cf", ")", ":", "\n", "        ", "assert", "cf", ".", "shape", "==", "(", "1", ",", ")", "\n", "return", "(", "np", ".", "searchsorted", "(", "cdf", ",", "cf", ",", "'right'", ")", "-", "1", ")", "[", "0", "]", "\n", "", "return", "cs", ".", "NonUniform", "(", "enc_statfun", ",", "dec_statfun", ",", "h", ".", "quant_prec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.HMM": [[106, 126], ["hmm_codec.SSM", "numpy.diff", "numpy.diff", "hmm_codec.Categorical", "range", "hmm_codec.Categorical", "range", "numpy.diff", "hmm_codec.Categorical", "numpy.diff", "hmm_codec.Categorical", "hmm_codec.Categorical", "hmm_codec.quantized_cdf", "numpy.dot", "numpy.sum", "hmm_codec.quantized_cdf", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.SSM", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.Categorical", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.hmm_codec.quantized_cdf"], ["", "def", "HMM", "(", "h", ":", "HyperParams", ",", "params", ")", ":", "\n", "    ", "a0", ",", "a", ",", "b", "=", "params", "\n", "a_mass", ",", "b_mass", "=", "np", ".", "diff", "(", "a", ")", ",", "np", ".", "diff", "(", "b", ")", "\n", "priors", "=", "[", "(", "lambda", "z", ":", "Categorical", "(", "h", ",", "a", "[", "z", "]", ")", ")", "if", "t", "else", "Categorical", "(", "h", ",", "a0", ")", "\n", "for", "t", "in", "range", "(", "h", ".", "T", ")", "]", "\n", "likelihoods", "=", "[", "(", "lambda", "z", ":", "Categorical", "(", "h", ",", "b", "[", "z", "]", ")", ")", "for", "_", "in", "range", "(", "h", ".", "T", ")", "]", "\n", "def", "post_update", "(", "t", ",", "alpha", ",", "x", ")", ":", "\n", "# alpha = p(z_t | x_{1:t-1})", "\n", "        ", "mixing_coeffs", "=", "alpha", "*", "b_mass", "[", ":", ",", "x", "]", "\n", "if", "t", "<", "h", ".", "T", "-", "1", ":", "\n", "            ", "alpha", "=", "np", ".", "diff", "(", "np", ".", "dot", "(", "mixing_coeffs", ",", "a", ")", "//", "np", ".", "sum", "(", "mixing_coeffs", ")", ")", "\n", "def", "z_codec", "(", "z_next", ")", ":", "\n", "                ", "masses", "=", "mixing_coeffs", "*", "a_mass", "[", ":", ",", "z_next", "]", "\n", "return", "Categorical", "(", "h", ",", "quantized_cdf", "(", "h", ",", "masses", "/", "np", ".", "sum", "(", "masses", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "alpha", "=", "None", "\n", "z_codec", "=", "Categorical", "(", "\n", "h", ",", "quantized_cdf", "(", "h", ",", "mixing_coeffs", "/", "np", ".", "sum", "(", "mixing_coeffs", ")", ")", ")", "\n", "", "return", "alpha", ",", "z_codec", "\n", "", "return", "SSM", "(", "priors", ",", "likelihoods", ",", "(", "np", ".", "diff", "(", "a0", ")", ",", "post_update", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.EM": [[16, 37], ["generate_model_plot.EM.fixed_point"], "function", ["None"], ["def", "EM", "(", "init_params", ",", "data", ",", "callback", "=", "None", ")", ":", "\n", "    ", "def", "EM_update", "(", "params", ")", ":", "\n", "        ", "natural_params", "=", "list", "(", "map", "(", "np", ".", "log", ",", "params", ")", ")", "\n", "# E step:", "\n", "loglike", ",", "E_stats", "=", "vgrad", "(", "log_partition_function", ")", "(", "natural_params", ",", "data", ")", "\n", "if", "callback", ":", "callback", "(", "loglike", ",", "params", ")", "\n", "return", "list", "(", "map", "(", "normalize", ",", "E_stats", ")", ")", "# M step", "\n", "\n", "", "def", "fixed_point", "(", "f", ",", "x0", ",", "max_iter", "=", "50", ")", ":", "\n", "        ", "x1", "=", "f", "(", "x0", ")", "\n", "# while different(x0, x1):", "\n", "#     x0, x1 = x1, f(x1)", "\n", "for", "_", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "x0", ",", "x1", "=", "x1", ",", "f", "(", "x1", ")", "\n", "", "return", "x1", "\n", "\n", "# def different(params1, params2):", "\n", "#     allclose = partial(np.allclose, atol=5e-2, rtol=5e-2)", "\n", "#     return not all(map(allclose, params1, params2))", "\n", "\n", "", "return", "fixed_point", "(", "EM_update", ",", "init_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.normalize": [[39, 43], ["autograd.where", "generate_model_plot.normalize.replace_zeros"], "function", ["None"], ["", "def", "normalize", "(", "a", ")", ":", "\n", "    ", "def", "replace_zeros", "(", "a", ")", ":", "\n", "        ", "return", "np", ".", "where", "(", "a", ">", "0.", ",", "a", ",", "1.", ")", "\n", "", "return", "a", "/", "replace_zeros", "(", "a", ".", "sum", "(", "-", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.log_partition_function": [[45, 56], ["isinstance", "autograd.scipy.special.logsumexp", "sum", "map", "autograd.scipy.special.logsumexp", "functools.partial"], "function", ["None"], ["", "def", "log_partition_function", "(", "natural_params", ",", "data", ")", ":", "\n", "    ", "if", "isinstance", "(", "data", ",", "list", ")", ":", "\n", "        ", "return", "sum", "(", "map", "(", "partial", "(", "log_partition_function", ",", "natural_params", ")", ",", "data", ")", ")", "\n", "\n", "", "log_pi", ",", "log_A", ",", "log_B", "=", "natural_params", "\n", "\n", "log_alpha", "=", "log_pi", "\n", "for", "y", "in", "data", ":", "\n", "        ", "log_alpha", "=", "logsumexp", "(", "log_alpha", "[", ":", ",", "None", "]", "+", "log_A", ",", "axis", "=", "0", ")", "+", "log_B", "[", ":", ",", "y", "]", "\n", "\n", "", "return", "logsumexp", "(", "log_alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.initialize_hmm_parameters": [[58, 63], ["generate_model_plot.normalize", "generate_model_plot.normalize", "generate_model_plot.normalize", "autograd.rand", "autograd.rand", "autograd.rand"], "function", ["home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.normalize", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.normalize", "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.normalize"], ["", "def", "initialize_hmm_parameters", "(", "num_states", ",", "num_outputs", ")", ":", "\n", "    ", "init_pi", "=", "normalize", "(", "npr", ".", "rand", "(", "num_states", ")", ")", "\n", "init_A", "=", "normalize", "(", "npr", ".", "rand", "(", "num_states", ",", "num_states", ")", ")", "\n", "init_B", "=", "normalize", "(", "npr", ".", "rand", "(", "num_states", ",", "num_outputs", ")", ")", "\n", "return", "init_pi", ",", "init_A", ",", "init_B", "\n", "\n"]], "home.repos.pwc.inspect_result.j-towns_ssm-code.None.generate_model_plot.build_dataset": [[65, 81], ["dict", "list", "list", "autograd.array", "open", "f.readlines", "map", "len", "map", "len", "list", "len", "enumerate", "map", "list", "filter"], "function", ["None"], ["", "def", "build_dataset", "(", "filename", ",", "max_lines", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Loads a text file, and turns each line into an encoded sequence.\"\"\"", "\n", "encodings", "=", "dict", "(", "list", "(", "map", "(", "reversed", ",", "enumerate", "(", "string", ".", "printable", ")", ")", ")", ")", "\n", "digitize", "=", "lambda", "char", ":", "(", "encodings", "[", "char", "]", "\n", "if", "char", "in", "encodings", "else", "len", "(", "encodings", ")", ")", "\n", "encode_line", "=", "lambda", "line", ":", "np", ".", "array", "(", "list", "(", "map", "(", "digitize", ",", "line", ")", ")", ")", "\n", "nonblank_line", "=", "lambda", "line", ":", "len", "(", "line", ")", ">", "2", "\n", "\n", "with", "open", "(", "filename", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "encoded_lines", "=", "list", "(", "map", "(", "\n", "encode_line", ",", "list", "(", "filter", "(", "nonblank_line", ",", "lines", ")", ")", "[", ":", "max_lines", "]", ")", ")", "\n", "num_outputs", "=", "len", "(", "encodings", ")", "+", "1", "\n", "\n", "return", "encoded_lines", ",", "num_outputs", "\n", "\n"]]}