{"home.repos.pwc.inspect_result.fau-is_xnap.xnap.config.load": [[6, 43], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "load", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "\n", "# general parameters", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "default", "=", "\"nap\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_set'", ",", "default", "=", "\"helpdesk.csv\"", ")", "\n", "parser", ".", "add_argument", "(", "'--data_dir'", ",", "default", "=", "\"./data/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--model_dir'", ",", "default", "=", "\"nap/models/\"", ")", "\n", "parser", ".", "add_argument", "(", "'--result_dir'", ",", "default", "=", "\"./results/\"", ")", "\n", "\n", "# parameters for explanation", "\n", "parser", ".", "add_argument", "(", "'--explain'", ",", "default", "=", "False", ",", "type", "=", "utils", ".", "str2bool", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_lower_bound'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--rand_upper_bound'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "\n", "# parameters for deep neural network", "\n", "parser", ".", "add_argument", "(", "'--dnn_num_epochs'", ",", "default", "=", "100", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dnn_architecture'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--learning_rate'", ",", "default", "=", "0.002", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--dim'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n", "# parameters for validation", "\n", "parser", ".", "add_argument", "(", "'--num_folds'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--cross_validation'", ",", "default", "=", "True", ",", "type", "=", "utils", ".", "str2bool", ")", "\n", "parser", ".", "add_argument", "(", "'--split_rate_test'", ",", "default", "=", "0.5", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_train'", ",", "default", "=", "128", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size_test'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "\n", "# parameters for gpu processing", "\n", "parser", ".", "add_argument", "(", "'--gpu_ratio'", ",", "default", "=", "0.2", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu_num'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu_device'", ",", "default", "=", "\"0\"", ",", "type", "=", "str", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu_device", "\n", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.load_output": [[23, 25], ["None"], "function", ["None"], ["def", "load_output", "(", ")", ":", "\n", "    ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg": [[27, 32], ["len", "sum", "sum", "len"], "function", ["None"], ["", "def", "avg", "(", "numbers", ")", ":", "\n", "    ", "if", "len", "(", "numbers", ")", "==", "0", ":", "\n", "        ", "return", "sum", "(", "numbers", ")", "\n", "\n", "", "return", "sum", "(", "numbers", ")", "/", "len", "(", "numbers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint": [[34, 37], ["sys.stdout.write", "sys.stdout.flush"], "function", ["None"], ["", "def", "llprint", "(", "message", ")", ":", "\n", "    ", "sys", ".", "stdout", ".", "write", "(", "message", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.str2bool": [[39, 46], ["v.lower", "v.lower", "argparse.ArgumentTypeError"], "function", ["None"], ["", "def", "str2bool", "(", "v", ")", ":", "\n", "    ", "if", "v", ".", "lower", "(", ")", "in", "(", "'yes'", ",", "'true'", ",", "'t'", ",", "'y'", ",", "'1'", ")", ":", "\n", "        ", "return", "True", "\n", "", "elif", "v", ".", "lower", "(", ")", "in", "(", "'no'", ",", "'false'", ",", "'f'", ",", "'n'", ",", "'0'", ")", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "raise", "argparse", ".", "ArgumentTypeError", "(", "'Boolean value expected.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.clear_measurement_file": [[48, 50], ["open().close", "open"], "function", ["None"], ["", "", "def", "clear_measurement_file", "(", "args", ")", ":", "\n", "    ", "open", "(", "'./%s/results/output_%s.csv'", "%", "(", "args", ".", "task", ",", "args", ".", "data_set", "[", ":", "-", "4", "]", ")", ",", "\"w\"", ")", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output": [[52, 99], ["list", "list", "_output[].append", "_output[].append", "_output[].append", "_output[].append", "open", "csv.reader", "next", "sklearn.metrics.accuracy_score", "sklearn.metrics.precision_score", "sklearn.metrics.recall_score", "sklearn.metrics.f1_score", "_output[].append", "utils.multi_class_prc_auc_score", "print", "args.data_set.split", "list.append", "list.append", "args.data_set.split", "int"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.multi_class_prc_auc_score"], ["", "def", "get_output", "(", "args", ",", "preprocessor", ",", "_output", ")", ":", "\n", "    ", "prefix", "=", "0", "\n", "prefix_all_enabled", "=", "1", "\n", "\n", "predicted_label", "=", "list", "(", ")", "\n", "ground_truth_label", "=", "list", "(", ")", "\n", "\n", "if", "not", "args", ".", "cross_validation", ":", "\n", "        ", "result_dir_fold", "=", "args", ".", "result_dir", "+", "args", ".", "data_set", ".", "split", "(", "\".csv\"", ")", "[", "0", "]", "+", "\"_0.csv\"", "\n", "", "else", ":", "\n", "        ", "result_dir_fold", "=", "'./'", "+", "args", ".", "task", "+", "args", ".", "result_dir", "[", "1", ":", "]", "+", "args", ".", "data_set", ".", "split", "(", "\".csv\"", ")", "[", "0", "]", "+", "\"_%d\"", "%", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'iteration_cross_validation'", "]", "+", "\".csv\"", "\n", "\n", "", "with", "open", "(", "result_dir_fold", ",", "'r'", ")", "as", "result_file_fold", ":", "\n", "        ", "result_reader", "=", "csv", ".", "reader", "(", "result_file_fold", ",", "delimiter", "=", "';'", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "next", "(", "result_reader", ")", "\n", "\n", "for", "row", "in", "result_reader", ":", "\n", "            ", "if", "not", "row", ":", "\n", "                ", "continue", "\n", "", "else", ":", "\n", "                ", "if", "int", "(", "row", "[", "1", "]", ")", "==", "prefix", "or", "prefix_all_enabled", "==", "1", ":", "\n", "                    ", "ground_truth_label", ".", "append", "(", "row", "[", "2", "]", ")", "\n", "predicted_label", ".", "append", "(", "row", "[", "3", "]", ")", "\n", "\n", "", "", "", "", "_output", "[", "\"accuracy_values\"", "]", ".", "append", "(", "sklearn", ".", "metrics", ".", "accuracy_score", "(", "ground_truth_label", ",", "predicted_label", ")", ")", "\n", "_output", "[", "\"precision_values\"", "]", ".", "append", "(", "\n", "sklearn", ".", "metrics", ".", "precision_score", "(", "ground_truth_label", ",", "predicted_label", ",", "average", "=", "'weighted'", ")", ")", "\n", "_output", "[", "\"recall_values\"", "]", ".", "append", "(", "\n", "sklearn", ".", "metrics", ".", "recall_score", "(", "ground_truth_label", ",", "predicted_label", ",", "average", "=", "'weighted'", ")", ")", "\n", "_output", "[", "\"f1_values\"", "]", ".", "append", "(", "sklearn", ".", "metrics", ".", "f1_score", "(", "ground_truth_label", ",", "predicted_label", ",", "average", "=", "'weighted'", ")", ")", "\n", "\n", "try", ":", "\n", "# we use the average precision at different threshold values as auc of the pr-curve", "\n", "# and not the auc-pr-curve with the trapezoidal rule / linear interpolation, because it could be too optimistic", "\n", "        ", "_output", "[", "\"auc_prc_values\"", "]", ".", "append", "(", "multi_class_prc_auc_score", "(", "ground_truth_label", ",", "predicted_label", ")", ")", "\n", "", "except", "ValueError", ":", "\n", "        ", "print", "(", "\"Warning: Auc prc score can not be calculated ...\"", ")", "\n", "\n", "", "return", "_output", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.multi_class_prc_auc_score": [[101, 109], ["sklearn.preprocessing.LabelBinarizer", "sklearn.preprocessing.LabelBinarizer.fit", "sklearn.preprocessing.LabelBinarizer.transform", "sklearn.preprocessing.LabelBinarizer.transform", "sklearn.metrics.average_precision_score"], "function", ["None"], ["", "def", "multi_class_prc_auc_score", "(", "ground_truth_label", ",", "predicted_label", ",", "average", "=", "'weighted'", ")", ":", "\n", "    ", "label_binarizer", "=", "sklearn", ".", "preprocessing", ".", "LabelBinarizer", "(", ")", "\n", "label_binarizer", ".", "fit", "(", "ground_truth_label", ")", "\n", "\n", "ground_truth_label", "=", "label_binarizer", ".", "transform", "(", "ground_truth_label", ")", "\n", "predicted_label", "=", "label_binarizer", ".", "transform", "(", "predicted_label", ")", "\n", "\n", "return", "sklearn", ".", "metrics", ".", "average_precision_score", "(", "ground_truth_label", ",", "predicted_label", ",", "average", "=", "average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.print_output": [[111, 126], ["utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.llprint", "utils.avg", "utils.avg", "utils.avg", "utils.avg", "utils.avg", "utils.avg"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg"], ["", "def", "print_output", "(", "args", ",", "_output", ",", "index_fold", ")", ":", "\n", "    ", "if", "args", ".", "cross_validation", "and", "index_fold", "<", "args", ".", "num_folds", ":", "\n", "        ", "llprint", "(", "\"\\nAccuracy of fold %i: %f\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"accuracy_values\"", "]", "[", "index_fold", "]", ")", ")", "\n", "llprint", "(", "\"Precision of fold %i: %f\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"precision_values\"", "]", "[", "index_fold", "]", ")", ")", "\n", "llprint", "(", "\"Recall of fold %i: %f\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"recall_values\"", "]", "[", "index_fold", "]", ")", ")", "\n", "llprint", "(", "\"F1-Score of fold %i: %f\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"f1_values\"", "]", "[", "index_fold", "]", ")", ")", "\n", "llprint", "(", "\"Auc-prc of fold %i: %f\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"auc_prc_values\"", "]", "[", "index_fold", "]", ")", ")", "\n", "llprint", "(", "\"Training time of fold %i: %f seconds\\n\\n\"", "%", "(", "index_fold", ",", "_output", "[", "\"training_time_seconds\"", "]", "[", "index_fold", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "llprint", "(", "\"\\nAccuracy avg: %f\\n\"", "%", "(", "avg", "(", "_output", "[", "\"accuracy_values\"", "]", ")", ")", ")", "\n", "llprint", "(", "\"Precision avg: %f\\n\"", "%", "(", "avg", "(", "_output", "[", "\"precision_values\"", "]", ")", ")", ")", "\n", "llprint", "(", "\"Recall avg: %f\\n\"", "%", "(", "avg", "(", "_output", "[", "\"recall_values\"", "]", ")", ")", ")", "\n", "llprint", "(", "\"F1-Score avg: %f\\n\"", "%", "(", "avg", "(", "_output", "[", "\"f1_values\"", "]", ")", ")", ")", "\n", "llprint", "(", "\"Auc-prc avg: %f\\n\"", "%", "(", "avg", "(", "_output", "[", "\"auc_prc_values\"", "]", ")", ")", ")", "\n", "llprint", "(", "\"Training time avg: %f seconds\"", "%", "(", "avg", "(", "_output", "[", "\"training_time_seconds\"", "]", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode": [[128, 135], ["None"], "function", ["None"], ["", "", "def", "get_mode", "(", "index_fold", ",", "args", ")", ":", "\n", "    ", "if", "index_fold", "==", "-", "1", ":", "\n", "        ", "return", "\"split-%s\"", "%", "args", ".", "split_rate_test", "\n", "", "elif", "index_fold", "!=", "args", ".", "num_folds", ":", "\n", "        ", "return", "\"fold%s\"", "%", "index_fold", "\n", "", "else", ":", "\n", "        ", "return", "\"avg\"", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value": [[137, 146], ["utils.avg"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.avg"], ["", "", "def", "get_output_value", "(", "_mode", ",", "_index_fold", ",", "_output", ",", "measure", ",", "args", ")", ":", "\n", "    ", "\"\"\"\n    If fold < max number of folds in cross validation than use a specific value, else avg works. In addition, this holds for split.\n    \"\"\"", "\n", "\n", "if", "_mode", "!=", "\"split-%s\"", "%", "args", ".", "split_rate_test", "and", "_mode", "!=", "\"avg\"", ":", "\n", "        ", "return", "_output", "[", "measure", "]", "[", "_index_fold", "]", "\n", "", "else", ":", "\n", "        ", "return", "avg", "(", "_output", "[", "measure", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.write_output": [[148, 171], ["open", "csv.writer", "csv.writer.writerow", "csv.writer.writerow", "os.stat", "utils.get_mode", "utils.get_output_value", "utils.get_output_value", "utils.get_output_value", "utils.get_output_value", "utils.get_output_value", "utils.get_output_value", "arrow.now", "utils.get_mode", "utils.get_mode", "utils.get_mode", "utils.get_mode", "utils.get_mode", "utils.get_mode"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_output_value", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.get_mode"], ["", "", "def", "write_output", "(", "args", ",", "_output", ",", "index_fold", ")", ":", "\n", "\n", "    ", "with", "open", "(", "'./%s%soutput_%s.csv'", "%", "(", "args", ".", "task", ",", "args", ".", "result_dir", "[", "1", ":", "]", ",", "args", ".", "data_set", "[", ":", "-", "4", "]", ")", ",", "mode", "=", "'a'", ",", "\n", "newline", "=", "''", ")", "as", "file", ":", "\n", "        ", "writer", "=", "csv", ".", "writer", "(", "file", ",", "delimiter", "=", "';'", ",", "quoting", "=", "csv", ".", "QUOTE_NONE", ",", "escapechar", "=", "' '", ")", "\n", "\n", "# if file is empty", "\n", "if", "os", ".", "stat", "(", "'./%s%soutput_%s.csv'", "%", "(", "args", ".", "task", ",", "args", ".", "result_dir", "[", "1", ":", "]", ",", "args", ".", "data_set", "[", ":", "-", "4", "]", ")", ")", ".", "st_size", "==", "0", ":", "\n", "            ", "writer", ".", "writerow", "(", "\n", "[", "\"experiment\"", ",", "\"mode\"", ",", "\"validation\"", ",", "\"accuracy\"", ",", "\"precision\"", ",", "\"recall\"", ",", "\"f1-score\"", ",", "\"auc-prc\"", ",", "\n", "\"training-time\"", ",", "\n", "\"time-stamp\"", "]", ")", "\n", "", "writer", ".", "writerow", "(", "[", "\n", "\"%s-%s\"", "%", "(", "args", ".", "data_set", "[", ":", "-", "4", "]", ",", "args", ".", "dnn_architecture", ")", ",", "# experiment", "\n", "get_mode", "(", "index_fold", ",", "args", ")", ",", "# mode", "\n", "\"cross-validation\"", "if", "args", ".", "cross_validation", "else", "\"split-validation\"", ",", "# validation", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"accuracy_values\"", ",", "args", ")", ",", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"precision_values\"", ",", "args", ")", ",", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"recall_values\"", ",", "args", ")", ",", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"f1_values\"", ",", "args", ")", ",", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"auc_prc_values\"", ",", "args", ")", ",", "\n", "get_output_value", "(", "get_mode", "(", "index_fold", ",", "args", ")", ",", "index_fold", ",", "_output", ",", "\"training_time_seconds\"", ",", "args", ")", ",", "\n", "arrow", ".", "now", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.__init__": [[15, 52], ["model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights", "model.layers[].get_weights"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ",", "input_encoded", ")", ":", "\n", "        ", "\"\"\"\n        Load trained model from file.\n        \"\"\"", "\n", "\n", "self", ".", "args", "=", "args", "\n", "\n", "# input embedded", "\n", "self", ".", "E", "=", "input_encoded", "\n", "\n", "# model weights", "\n", "self", ".", "model", "=", "model", "\n", "\n", "\"\"\"\n        Assumptions:\n        - bias bxh_left and bxh_right is not stored by keras\n        - bias of output layer is also set to 0\n        \"\"\"", "\n", "\n", "# LSTM left encoder", "\n", "self", ".", "Wxh_Left", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "T", "# shape 4d*e // kernel left lstm layer // d = neurons", "\n", "# self.bxh_Left = model[\"bxh_Left\"]  # shape 4d", "\n", "self", ".", "Whh_Left", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "1", "]", ".", "T", "# shape 4d*d // recurrent kernel left lstm layer", "\n", "self", ".", "bhh_Left", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "2", "]", ".", "T", "# shape 4d // biases left lstm layer", "\n", "\n", "# LSTM right encoder", "\n", "self", ".", "Wxh_Right", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "3", "]", ".", "T", "# shape 4d*e // kernel right lstm layer", "\n", "# self.bxh_Right = model[\"bxh_Right\"]", "\n", "self", ".", "Whh_Right", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "4", "]", ".", "T", "# shape 4d*d // recurrent kernel right lstm layer", "\n", "self", ".", "bhh_Right", "=", "model", ".", "layers", "[", "1", "]", ".", "get_weights", "(", ")", "[", "5", "]", ".", "T", "# shape 4d // biases right lstm layer", "\n", "\n", "# linear output layer", "\n", "# note Keras does not provide two output weight vector of the bi-lslm cell; so, we divided the vector in two equal parts", "\n", "self", ".", "Why_Left", "=", "model", ".", "layers", "[", "2", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "T", "# shape C*d", "\n", "self", ".", "Why_Left", "=", "self", ".", "Why_Left", "[", ":", ",", "0", ":", "100", "]", "\n", "self", ".", "Why_Right", "=", "model", ".", "layers", "[", "2", "]", ".", "get_weights", "(", ")", "[", "0", "]", ".", "T", "# shape C*d", "\n", "self", ".", "Why_Right", "=", "self", ".", "Why_Right", "[", ":", ",", "100", ":", "200", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.set_input": [[54, 75], ["len", "int", "x[].copy", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "len"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "w", ",", "delete_pos", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Build the numerical input sequence x/x_rev from the word indices w (+ initialize hidden layers h, c).\n        Optionally delete words at positions delete_pos.\n        \"\"\"", "\n", "T", "=", "len", "(", "w", ")", "# sequence length", "\n", "d", "=", "int", "(", "self", ".", "Wxh_Left", ".", "shape", "[", "0", "]", "/", "4", ")", "# hidden layer dimensions", "\n", "e", "=", "self", ".", "args", ".", "dim", "# E.shape[1]   # onehot dimensions", "\n", "x", "=", "self", ".", "E", "\n", "\n", "if", "delete_pos", "is", "not", "None", ":", "\n", "            ", "x", "[", "delete_pos", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "len", "(", "delete_pos", ")", ",", "e", ")", ")", "\n", "\n", "", "self", ".", "w", "=", "w", "\n", "self", ".", "x", "=", "x", "\n", "self", ".", "x_rev", "=", "x", "[", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "\n", "self", ".", "h_Left", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "self", ".", "c_Left", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "self", ".", "h_Right", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "self", ".", "c_Right", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.forward": [[76, 123], ["len", "int", "np.hstack().astype", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "range", "np.dot", "np.dot", "LSTM_bidi.LSTM_bidi.s.copy", "np.arange", "np.arange", "np.arange", "np.arange", "np.dot", "np.dot", "np.tanh", "np.dot", "np.dot", "np.tanh", "np.hstack", "np.tanh", "np.tanh", "np.exp", "np.exp", "np.arange", "np.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Standard forward pass.\n        Compute the hidden layer values (assuming input x/x_rev was previously set)\n        \"\"\"", "\n", "T", "=", "len", "(", "self", ".", "w", ")", "\n", "d", "=", "int", "(", "self", ".", "Wxh_Left", ".", "shape", "[", "0", "]", "/", "4", ")", "\n", "# gate indices (assuming the gate ordering in the LSTM weights is i,g,f,o):     ", "\n", "idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "arange", "(", "0", ",", "d", ")", ",", "np", ".", "arange", "(", "2", "*", "d", ",", "4", "*", "d", ")", ")", ")", ".", "astype", "(", "int", ")", "# indices of gates i,f,o together", "\n", "idx_i", ",", "idx_g", ",", "idx_f", ",", "idx_o", "=", "np", ".", "arange", "(", "0", ",", "d", ")", ",", "np", ".", "arange", "(", "d", ",", "2", "*", "d", ")", ",", "np", ".", "arange", "(", "2", "*", "d", ",", "3", "*", "d", ")", ",", "np", ".", "arange", "(", "3", "*", "d", ",", "\n", "4", "*", "d", ")", "# indices of gates i,g,f,o separately", "\n", "\n", "# initialize", "\n", "self", ".", "gates_xh_Left", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "self", ".", "gates_hh_Left", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "self", ".", "gates_pre_Left", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "# gates pre-activation", "\n", "self", ".", "gates_Left", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "# gates activation", "\n", "\n", "self", ".", "gates_xh_Right", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "self", ".", "gates_hh_Right", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "self", ".", "gates_pre_Right", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "self", ".", "gates_Right", "=", "np", ".", "zeros", "(", "(", "T", ",", "4", "*", "d", ")", ")", "\n", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "            ", "self", ".", "gates_xh_Left", "[", "t", "]", "=", "np", ".", "dot", "(", "self", ".", "Wxh_Left", ",", "self", ".", "x", "[", "t", "]", ")", "\n", "self", ".", "gates_hh_Left", "[", "t", "]", "=", "np", ".", "dot", "(", "self", ".", "Whh_Left", ",", "self", ".", "h_Left", "[", "t", "-", "1", "]", ")", "\n", "self", ".", "gates_pre_Left", "[", "t", "]", "=", "self", ".", "gates_xh_Left", "[", "t", "]", "+", "self", ".", "gates_hh_Left", "[", "t", "]", "+", "self", ".", "bhh_Left", "# + self.bxh_Left", "\n", "self", ".", "gates_Left", "[", "t", ",", "idx", "]", "=", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "gates_pre_Left", "[", "t", ",", "idx", "]", ")", ")", "\n", "self", ".", "gates_Left", "[", "t", ",", "idx_g", "]", "=", "np", ".", "tanh", "(", "self", ".", "gates_pre_Left", "[", "t", ",", "idx_g", "]", ")", "\n", "self", ".", "c_Left", "[", "t", "]", "=", "self", ".", "gates_Left", "[", "t", ",", "idx_f", "]", "*", "self", ".", "c_Left", "[", "t", "-", "1", "]", "+", "self", ".", "gates_Left", "[", "t", ",", "idx_i", "]", "*", "self", ".", "gates_Left", "[", "t", ",", "idx_g", "]", "\n", "self", ".", "h_Left", "[", "t", "]", "=", "self", ".", "gates_Left", "[", "t", ",", "idx_o", "]", "*", "np", ".", "tanh", "(", "self", ".", "c_Left", "[", "t", "]", ")", "\n", "\n", "self", ".", "gates_xh_Right", "[", "t", "]", "=", "np", ".", "dot", "(", "self", ".", "Wxh_Right", ",", "self", ".", "x_rev", "[", "t", "]", ")", "\n", "self", ".", "gates_hh_Right", "[", "t", "]", "=", "np", ".", "dot", "(", "self", ".", "Whh_Right", ",", "self", ".", "h_Right", "[", "t", "-", "1", "]", ")", "\n", "self", ".", "gates_pre_Right", "[", "t", "]", "=", "self", ".", "gates_xh_Right", "[", "t", "]", "+", "self", ".", "gates_hh_Right", "[", "t", "]", "+", "self", ".", "bhh_Right", "# + self.bxh_Right", "\n", "self", ".", "gates_Right", "[", "t", ",", "idx", "]", "=", "1.0", "/", "(", "1.0", "+", "np", ".", "exp", "(", "-", "self", ".", "gates_pre_Right", "[", "t", ",", "idx", "]", ")", ")", "\n", "self", ".", "gates_Right", "[", "t", ",", "idx_g", "]", "=", "np", ".", "tanh", "(", "self", ".", "gates_pre_Right", "[", "t", ",", "idx_g", "]", ")", "\n", "self", ".", "c_Right", "[", "t", "]", "=", "self", ".", "gates_Right", "[", "t", ",", "idx_f", "]", "*", "self", ".", "c_Right", "[", "t", "-", "1", "]", "+", "self", ".", "gates_Right", "[", "t", ",", "idx_i", "]", "*", "self", ".", "gates_Right", "[", "t", ",", "idx_g", "]", "\n", "self", ".", "h_Right", "[", "t", "]", "=", "self", ".", "gates_Right", "[", "t", ",", "idx_o", "]", "*", "np", ".", "tanh", "(", "self", ".", "c_Right", "[", "t", "]", ")", "\n", "\n", "", "self", ".", "y_Left", "=", "np", ".", "dot", "(", "self", ".", "Why_Left", ",", "self", ".", "h_Left", "[", "T", "-", "1", "]", ")", "\n", "self", ".", "y_Right", "=", "np", ".", "dot", "(", "self", ".", "Why_Right", ",", "self", ".", "h_Right", "[", "T", "-", "1", "]", ")", "\n", "self", ".", "s", "=", "self", ".", "y_Left", "+", "self", ".", "y_Right", "\n", "\n", "return", "self", ".", "s", ".", "copy", "(", ")", "# prediction scores", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.lrp": [[125, 191], ["LSTM_bidi.LSTM_bidi.set_input", "LSTM_bidi.LSTM_bidi.forward", "len", "int", "np.hstack().astype", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "np.zeros", "lrp_linear", "lrp_linear", "reversed", "np.arange", "np.arange", "np.arange", "np.arange", "np.zeros", "np.zeros", "range", "lrp_linear", "lrp_linear", "lrp_linear", "lrp_linear", "lrp_linear", "lrp_linear", "lrp_linear", "lrp_linear", "np.hstack", "np.identity", "np.zeros", "np.identity", "np.zeros", "np.identity", "np.zeros", "np.identity", "np.zeros", "Rc_Right[].sum", "Rh_Right[].sum", "np.arange", "np.arange", "Rh_Left[].sum", "Rc_Left[].sum"], "methods", ["home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.set_input", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LSTM_bidi.LSTM_bidi.forward", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear", "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear"], ["", "def", "lrp", "(", "self", ",", "w", ",", "LRP_class", ",", "eps", "=", "0.001", ",", "bias_factor", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Layer-wise Relevance Propagation (LRP) backward pass.\n        Compute the hidden layer relevances by performing LRP for the target class LRP_class\n        (according to the papers:\n            - https://doi.org/10.1371/journal.pone.0130140\n            - https://doi.org/10.18653/v1/W17-5221 )\n        \"\"\"", "\n", "# forward pass", "\n", "self", ".", "set_input", "(", "w", ")", "\n", "self", ".", "forward", "(", ")", "\n", "\n", "T", "=", "len", "(", "self", ".", "w", ")", "\n", "d", "=", "int", "(", "self", ".", "Wxh_Left", ".", "shape", "[", "0", "]", "/", "4", ")", "\n", "e", "=", "self", ".", "args", ".", "dim", "# E.shape[1]", "\n", "C", "=", "self", ".", "Why_Left", ".", "shape", "[", "0", "]", "# number of classes", "\n", "idx", "=", "np", ".", "hstack", "(", "(", "np", ".", "arange", "(", "0", ",", "d", ")", ",", "np", ".", "arange", "(", "2", "*", "d", ",", "4", "*", "d", ")", ")", ")", ".", "astype", "(", "int", ")", "# indices of gates i,f,o together", "\n", "idx_i", ",", "idx_g", ",", "idx_f", ",", "idx_o", "=", "np", ".", "arange", "(", "0", ",", "d", ")", ",", "np", ".", "arange", "(", "d", ",", "2", "*", "d", ")", ",", "np", ".", "arange", "(", "2", "*", "d", ",", "3", "*", "d", ")", ",", "np", ".", "arange", "(", "3", "*", "d", ",", "\n", "4", "*", "d", ")", "# indices of gates i,g,f,o separately", "\n", "\n", "# initialize", "\n", "Rx", "=", "np", ".", "zeros", "(", "self", ".", "x", ".", "shape", ")", "\n", "Rx_rev", "=", "np", ".", "zeros", "(", "self", ".", "x", ".", "shape", ")", "\n", "\n", "Rh_Left", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "Rc_Left", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "Rg_Left", "=", "np", ".", "zeros", "(", "(", "T", ",", "d", ")", ")", "# gate g only", "\n", "Rh_Right", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "Rc_Right", "=", "np", ".", "zeros", "(", "(", "T", "+", "1", ",", "d", ")", ")", "\n", "Rg_Right", "=", "np", ".", "zeros", "(", "(", "T", ",", "d", ")", ")", "# gate g only", "\n", "\n", "Rout_mask", "=", "np", ".", "zeros", "(", "(", "C", ")", ")", "\n", "Rout_mask", "[", "LRP_class", "]", "=", "1.0", "\n", "\n", "# format reminder: lrp_linear(hin, w, b, hout, Rout, bias_nb_units, eps, bias_factor)", "\n", "Rh_Left", "[", "T", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "h_Left", "[", "T", "-", "1", "]", ",", "self", ".", "Why_Left", ".", "T", ",", "np", ".", "zeros", "(", "(", "C", ")", ")", ",", "self", ".", "s", ",", "self", ".", "s", "*", "Rout_mask", ",", "\n", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rh_Right", "[", "T", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "h_Right", "[", "T", "-", "1", "]", ",", "self", ".", "Why_Right", ".", "T", ",", "np", ".", "zeros", "(", "(", "C", ")", ")", ",", "self", ".", "s", ",", "self", ".", "s", "*", "Rout_mask", ",", "\n", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "\n", "for", "t", "in", "reversed", "(", "range", "(", "T", ")", ")", ":", "\n", "            ", "Rc_Left", "[", "t", "]", "+=", "Rh_Left", "[", "t", "]", "\n", "Rc_Left", "[", "t", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "gates_Left", "[", "t", ",", "idx_f", "]", "*", "self", ".", "c_Left", "[", "t", "-", "1", "]", ",", "np", ".", "identity", "(", "d", ")", ",", "np", ".", "zeros", "(", "(", "d", ")", ")", ",", "\n", "self", ".", "c_Left", "[", "t", "]", ",", "Rc_Left", "[", "t", "]", ",", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rg_Left", "[", "t", "]", "=", "lrp_linear", "(", "self", ".", "gates_Left", "[", "t", ",", "idx_i", "]", "*", "self", ".", "gates_Left", "[", "t", ",", "idx_g", "]", ",", "np", ".", "identity", "(", "d", ")", ",", "\n", "np", ".", "zeros", "(", "(", "d", ")", ")", ",", "self", ".", "c_Left", "[", "t", "]", ",", "Rc_Left", "[", "t", "]", ",", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rx", "[", "t", "]", "=", "lrp_linear", "(", "self", ".", "x", "[", "t", "]", ",", "self", ".", "Wxh_Left", "[", "idx_g", "]", ".", "T", ",", "self", ".", "bhh_Left", "[", "idx_g", "]", ",", "# self.bxh_Left[idx_g] +", "\n", "self", ".", "gates_pre_Left", "[", "t", ",", "idx_g", "]", ",", "Rg_Left", "[", "t", "]", ",", "d", "+", "e", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rh_Left", "[", "t", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "h_Left", "[", "t", "-", "1", "]", ",", "self", ".", "Whh_Left", "[", "idx_g", "]", ".", "T", ",", "\n", "self", ".", "bhh_Left", "[", "idx_g", "]", ",", "self", ".", "gates_pre_Left", "[", "t", ",", "idx_g", "]", ",", "# self.bxh_Left[idx_g] +", "\n", "Rg_Left", "[", "t", "]", ",", "d", "+", "e", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "\n", "Rc_Right", "[", "t", "]", "+=", "Rh_Right", "[", "t", "]", "\n", "Rc_Right", "[", "t", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "gates_Right", "[", "t", ",", "idx_f", "]", "*", "self", ".", "c_Right", "[", "t", "-", "1", "]", ",", "np", ".", "identity", "(", "d", ")", ",", "\n", "np", ".", "zeros", "(", "(", "d", ")", ")", ",", "self", ".", "c_Right", "[", "t", "]", ",", "Rc_Right", "[", "t", "]", ",", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "\n", "debug", "=", "False", ")", "\n", "Rg_Right", "[", "t", "]", "=", "lrp_linear", "(", "self", ".", "gates_Right", "[", "t", ",", "idx_i", "]", "*", "self", ".", "gates_Right", "[", "t", ",", "idx_g", "]", ",", "np", ".", "identity", "(", "d", ")", ",", "\n", "np", ".", "zeros", "(", "(", "d", ")", ")", ",", "self", ".", "c_Right", "[", "t", "]", ",", "Rc_Right", "[", "t", "]", ",", "2", "*", "d", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rx_rev", "[", "t", "]", "=", "lrp_linear", "(", "self", ".", "x_rev", "[", "t", "]", ",", "self", ".", "Wxh_Right", "[", "idx_g", "]", ".", "T", ",", "\n", "self", ".", "bhh_Right", "[", "idx_g", "]", ",", "self", ".", "gates_pre_Right", "[", "t", ",", "idx_g", "]", ",", "# self.bxh_Right[idx_g] +", "\n", "Rg_Right", "[", "t", "]", ",", "d", "+", "e", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "Rh_Right", "[", "t", "-", "1", "]", "=", "lrp_linear", "(", "self", ".", "h_Right", "[", "t", "-", "1", "]", ",", "self", ".", "Whh_Right", "[", "idx_g", "]", ".", "T", ",", "\n", "self", ".", "bhh_Right", "[", "idx_g", "]", ",", "self", ".", "gates_pre_Right", "[", "t", ",", "idx_g", "]", ",", "# self.bxh_Right[idx_g] +", "\n", "Rg_Right", "[", "t", "]", ",", "d", "+", "e", ",", "eps", ",", "bias_factor", ",", "debug", "=", "False", ")", "\n", "\n", "", "return", "Rx", ",", "Rx_rev", "[", ":", ":", "-", "1", ",", ":", "]", ",", "Rh_Left", "[", "-", "1", "]", ".", "sum", "(", ")", "+", "Rc_Left", "[", "-", "1", "]", ".", "sum", "(", ")", "+", "Rh_Right", "[", "-", "1", "]", ".", "sum", "(", ")", "+", "Rc_Right", "[", "-", "1", "]", ".", "sum", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fau-is_xnap.LSTM.LRP_linear_layer.lrp_linear": [[14, 50], ["numpy.where", "message.sum", "print", "Rout.sum", "message.sum.sum"], "function", ["None"], ["def", "lrp_linear", "(", "hin", ",", "w", ",", "b", ",", "hout", ",", "Rout", ",", "bias_nb_units", ",", "eps", ",", "bias_factor", "=", "0.0", ",", "debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    LRP for a linear layer with input dim D and output dim M.\n    Args:\n    - hin:            forward pass input, of shape (D,)\n    - w:              connection weights, of shape (D, M)\n    - b:              biases, of shape (M,)\n    - hout:           forward pass output, of shape (M,) (unequal to np.dot(w.T,hin)+b if more than one incoming layer!)\n    - Rout:           relevance at layer output, of shape (M,)\n    - bias_nb_units:  total number of connected lower-layer units (onto which the bias/stabilizer contribution is redistributed for sanity check)\n    - eps:            stabilizer (small positive number)\n    - bias_factor:    set to 1.0 to check global relevance conservation, otherwise use 0.0 to ignore bias/stabilizer redistribution (recommended)\n    Returns:\n    - Rin:            relevance at layer input, of shape (D,)\n    \"\"\"", "\n", "sign_out", "=", "np", ".", "where", "(", "hout", "[", "na", ",", ":", "]", ">=", "0", ",", "1.", ",", "-", "1.", ")", "# shape (1, M)", "\n", "\n", "numer", "=", "(", "w", "*", "hin", "[", ":", ",", "na", "]", ")", "+", "(", "bias_factor", "*", "(", "b", "[", "na", ",", ":", "]", "*", "1.", "+", "eps", "*", "sign_out", "*", "1.", ")", "/", "bias_nb_units", ")", "# shape (D, M)", "\n", "# Note: here we multiply the bias_factor with both the bias b and the stabilizer eps since in fact", "\n", "# using the term (b[na,:]*1. + eps*sign_out*1.) / bias_nb_units in the numerator is only useful for sanity check", "\n", "# (in the initial paper version we were using (bias_factor*b[na,:]*1. + eps*sign_out*1.) / bias_nb_units instead)", "\n", "\n", "denom", "=", "hout", "[", "na", ",", ":", "]", "+", "(", "eps", "*", "sign_out", "*", "1.", ")", "# shape (1, M)", "\n", "\n", "message", "=", "(", "numer", "/", "denom", ")", "*", "Rout", "[", "na", ",", ":", "]", "# shape (D, M)", "\n", "\n", "Rin", "=", "message", ".", "sum", "(", "axis", "=", "1", ")", "# shape (D,)", "\n", "\n", "if", "debug", ":", "\n", "        ", "print", "(", "\"local diff: \"", ",", "Rout", ".", "sum", "(", ")", "-", "Rin", ".", "sum", "(", ")", ")", "\n", "# Note: ", "\n", "# - local layer relevance conservation if bias_factor==1.0 and bias_nb_units==D (i.e. when only one incoming layer)", "\n", "# - global network relevance conservation if bias_factor==1.0 and bias_nb_units set accordingly to the total number of lower-layer connections ", "\n", "# -> can be used for sanity check", "\n", "\n", "", "return", "Rin", "\n", "", ""]], "home.repos.pwc.inspect_result.fau-is_xnap.util.browser.display_html": [[5, 13], ["os.path.abspath", "webbrowser.open", "open", "f.write", "str"], "function", ["None"], ["def", "display_html", "(", "html", ")", ":", "\n", "\n", "    ", "path", "=", "os", ".", "path", ".", "abspath", "(", "'temp.html'", ")", "\n", "url", "=", "'file://'", "+", "path", "\n", "\n", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "str", "(", "html", ")", ")", "\n", "", "webbrowser", ".", "open", "(", "url", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.rescale_score_by_abs": [[13, 49], ["abs", "abs", "abs"], "function", ["None"], ["def", "rescale_score_by_abs", "(", "score", ",", "max_score", ",", "min_score", ")", ":", "\n", "    ", "\"\"\"\n    Normalize the relevance value (=score), accordingly to the extremal relevance values (max_score and min_score), \n    for visualization with a diverging colormap.\n    i.e. rescale positive relevance to the range [0.5, 1.0], and negative relevance to the range [0.0, 0.5],\n    using the highest absolute relevance for linear interpolation.\n    \"\"\"", "\n", "\n", "# CASE 1: positive AND negative scores occur --------------------", "\n", "if", "max_score", ">", "0", "and", "min_score", "<", "0", ":", "\n", "\n", "        ", "if", "max_score", ">=", "abs", "(", "min_score", ")", ":", "# deepest color is positive", "\n", "            ", "if", "score", ">=", "0", ":", "\n", "                ", "return", "0.5", "+", "0.5", "*", "(", "score", "/", "max_score", ")", "\n", "", "else", ":", "\n", "                ", "return", "0.5", "-", "0.5", "*", "(", "abs", "(", "score", ")", "/", "max_score", ")", "\n", "\n", "", "", "else", ":", "# deepest color is negative", "\n", "            ", "if", "score", ">=", "0", ":", "\n", "                ", "return", "0.5", "+", "0.5", "*", "(", "score", "/", "abs", "(", "min_score", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "0.5", "-", "0.5", "*", "(", "score", "/", "min_score", ")", "\n", "\n", "# CASE 2: ONLY positive scores occur -----------------------------", "\n", "", "", "", "elif", "max_score", ">", "0", "and", "min_score", ">=", "0", ":", "\n", "        ", "if", "max_score", "==", "min_score", ":", "\n", "            ", "return", "1.0", "\n", "", "else", ":", "\n", "            ", "return", "0.5", "+", "0.5", "*", "(", "score", "/", "max_score", ")", "\n", "\n", "# CASE 3: ONLY negative scores occur -----------------------------", "\n", "", "", "elif", "max_score", "<=", "0", "and", "min_score", "<", "0", ":", "\n", "        ", "if", "max_score", "==", "min_score", ":", "\n", "            ", "return", "0.0", "\n", "", "else", ":", "\n", "            ", "return", "0.5", "-", "0.5", "*", "(", "score", "/", "min_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.getRGB": [[51, 53], ["int", "int", "int"], "function", ["None"], ["", "", "", "def", "getRGB", "(", "c_tuple", ")", ":", "\n", "    ", "return", "\"#%02x%02x%02x\"", "%", "(", "int", "(", "c_tuple", "[", "0", "]", "*", "255", ")", ",", "int", "(", "c_tuple", "[", "1", "]", "*", "255", ")", ",", "int", "(", "c_tuple", "[", "2", "]", "*", "255", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.span_word": [[55, 57], ["heatmap.getRGB", "colormap"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.getRGB"], ["", "def", "span_word", "(", "word", ",", "score", ",", "colormap", ")", ":", "\n", "    ", "return", "\"<span style=\\\"background-color:\"", "+", "getRGB", "(", "colormap", "(", "score", ")", ")", "+", "\"\\\">\"", "+", "word", "+", "\"</span>\"", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.html_heatmap": [[59, 80], ["matplotlib.get_cmap", "max", "min", "enumerate", "heatmap.rescale_score_by_abs", "heatmap.span_word"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.rescale_score_by_abs", "home.repos.pwc.inspect_result.fau-is_xnap.util.heatmap.span_word"], ["", "def", "html_heatmap", "(", "words", ",", "scores", ",", "cmap_name", "=", "\"bwr\"", ")", ":", "\n", "    ", "\"\"\"\n    Return word-level heatmap in HTML format,\n    with words being the list of words (as string),\n    scores the corresponding list of word-level relevance values,\n    and cmap_name the name of the matplotlib diverging colormap.\n    \"\"\"", "\n", "\n", "colormap", "=", "plt", ".", "get_cmap", "(", "cmap_name", ")", "\n", "\n", "# assert len(words)==len(scores)", "\n", "max_s", "=", "max", "(", "scores", ")", "\n", "min_s", "=", "min", "(", "scores", ")", "\n", "\n", "output_text", "=", "\"\"", "\n", "\n", "for", "idx", ",", "w", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "score", "=", "rescale_score_by_abs", "(", "scores", "[", "idx", "]", ",", "max_s", ",", "min_s", ")", "\n", "output_text", "=", "output_text", "+", "span_word", "(", "w", ",", "score", ",", "colormap", ")", "+", "\" \"", "\n", "\n", "", "return", "output_text", "+", "\"\\n\"", "\n", "", ""]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.trainer.train": [[6, 76], ["preprocessor.set_training_set", "print", "tensorflow.keras.models.Model", "tensorflow.keras.optimizers.Nadam", "tf.keras.models.Model.compile", "tensorflow.keras.callbacks.EarlyStopping", "tensorflow.keras.callbacks.ModelCheckpoint", "tensorflow.keras.callbacks.ReduceLROnPlateau", "tf.keras.models.Model.summary", "datetime.datetime.now", "tf.keras.models.Model.fit", "training_time.total_seconds", "tensorflow.keras.layers.Input", "datetime.datetime.now", "tensorflow.keras.layers.Bidirectional", "tensorflow.keras.layers.Dense", "tensorflow.keras.layers.LSTM", "len"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_training_set"], ["def", "train", "(", "args", ",", "preprocessor", ")", ":", "\n", "    ", "preprocessor", ".", "set_training_set", "(", ")", "\n", "features_data", "=", "preprocessor", ".", "data_structure", "[", "'data'", "]", "[", "'train'", "]", "[", "'features_data'", "]", "\n", "labels", "=", "preprocessor", ".", "data_structure", "[", "'data'", "]", "[", "'train'", "]", "[", "'labels'", "]", "\n", "max_length_process_instance", "=", "preprocessor", ".", "data_structure", "[", "'meta'", "]", "[", "'max_length_process_instance'", "]", "\n", "num_features", "=", "preprocessor", ".", "data_structure", "[", "'meta'", "]", "[", "'num_features'", "]", "\n", "num_event_ids", "=", "preprocessor", ".", "data_structure", "[", "'meta'", "]", "[", "'num_event_ids'", "]", "\n", "\n", "print", "(", "'Create machine learning model ... \\n'", ")", "\n", "if", "args", ".", "dnn_architecture", "==", "0", ":", "\n", "# input layer", "\n", "        ", "main_input", "=", "tf", ".", "keras", ".", "layers", ".", "Input", "(", "shape", "=", "(", "max_length_process_instance", ",", "num_features", ")", ",", "name", "=", "'main_input'", ")", "\n", "\n", "# hidden layer", "\n", "b1", "=", "tf", ".", "keras", ".", "layers", ".", "Bidirectional", "(", "\n", "tf", ".", "keras", ".", "layers", ".", "LSTM", "(", "100", ",", "\n", "use_bias", "=", "True", ",", "\n", "implementation", "=", "1", ",", "\n", "activation", "=", "\"tanh\"", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ",", "\n", "return_sequences", "=", "False", ",", "\n", "dropout", "=", "0.2", ")", ")", "(", "\n", "main_input", ")", "\n", "\n", "# output layer", "\n", "act_output", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "num_event_ids", ",", "\n", "activation", "=", "'softmax'", ",", "\n", "name", "=", "'act_output'", ",", "\n", "kernel_initializer", "=", "'glorot_uniform'", ")", "(", "b1", ")", "\n", "\n", "", "model", "=", "tf", ".", "keras", ".", "models", ".", "Model", "(", "inputs", "=", "[", "main_input", "]", ",", "outputs", "=", "[", "act_output", "]", ")", "\n", "\n", "optimizer", "=", "tf", ".", "keras", ".", "optimizers", ".", "Nadam", "(", "lr", "=", "args", ".", "learning_rate", ",", "beta_1", "=", "0.9", ",", "beta_2", "=", "0.999", ",", "epsilon", "=", "1e-8", ",", "\n", "schedule_decay", "=", "0.004", ",", "clipvalue", "=", "3", ")", "\n", "\n", "model", ".", "compile", "(", "loss", "=", "{", "'act_output'", ":", "'categorical_crossentropy'", "}", ",", "optimizer", "=", "optimizer", ")", "\n", "early_stopping", "=", "tf", ".", "keras", ".", "callbacks", ".", "EarlyStopping", "(", "monitor", "=", "'val_loss'", ",", "patience", "=", "10", ")", "\n", "\n", "model_checkpoint", "=", "tf", ".", "keras", ".", "callbacks", ".", "ModelCheckpoint", "(", "'%sca_%s_%s_%s.h5'", "%", "(", "\n", "args", ".", "model_dir", ",", "\n", "args", ".", "task", ",", "\n", "args", ".", "data_set", "[", "0", ":", "len", "(", "args", ".", "data_set", ")", "-", "4", "]", ",", "\n", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'iteration_cross_validation'", "]", ")", ",", "\n", "monitor", "=", "'val_loss'", ",", "\n", "verbose", "=", "0", ",", "\n", "save_best_only", "=", "True", ",", "\n", "save_weights_only", "=", "False", ",", "\n", "mode", "=", "'auto'", ")", "\n", "\n", "lr_reducer", "=", "tf", ".", "keras", ".", "callbacks", ".", "ReduceLROnPlateau", "(", "monitor", "=", "'val_loss'", ",", "\n", "factor", "=", "0.5", ",", "\n", "patience", "=", "10", ",", "\n", "verbose", "=", "0", ",", "\n", "mode", "=", "'auto'", ",", "\n", "min_delta", "=", "0.0001", ",", "\n", "cooldown", "=", "0", ",", "\n", "min_lr", "=", "0", ")", "\n", "model", ".", "summary", "(", ")", "\n", "start_training_time", "=", "datetime", ".", "now", "(", ")", "\n", "\n", "model", ".", "fit", "(", "features_data", ",", "{", "'act_output'", ":", "labels", "}", ",", "\n", "validation_split", "=", "1", "/", "args", ".", "num_folds", ",", "\n", "verbose", "=", "1", ",", "\n", "callbacks", "=", "[", "early_stopping", ",", "model_checkpoint", ",", "lr_reducer", "]", ",", "\n", "batch_size", "=", "args", ".", "batch_size_train", ",", "\n", "epochs", "=", "args", ".", "dnn_num_epochs", ")", "\n", "\n", "training_time", "=", "datetime", ".", "now", "(", ")", "-", "start_training_time", "\n", "\n", "return", "training_time", ".", "total_seconds", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.__init__": [[55, 95], ["xnap.llprint", "preprocessor.Preprocessor.get_sequences_from_eventlog", "int", "list", "max", "list", "list", "[].sort", "copy.copy", "dict", "dict", "dict", "dict", "len", "len", "len", "round", "map", "map", "map", "set().union", "preprocessor.Preprocessor.set_indices_k_fold_validation", "preprocessor.Preprocessor.set_indices_split_validation", "len", "set", "set", "enumerate", "enumerate", "enumerate", "enumerate"], "methods", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_sequences_from_eventlog", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_indices_k_fold_validation", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_indices_split_validation"], ["def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "        ", "utils", ".", "llprint", "(", "\"Initialization ... \\n\"", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'num_folds'", "]", "=", "args", ".", "num_folds", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'data_dir'", "]", "=", "args", ".", "data_dir", "+", "args", ".", "data_set", "\n", "self", ".", "get_sequences_from_eventlog", "(", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'elements_per_fold'", "]", "=", "int", "(", "round", "(", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_process_instances'", "]", "/", "self", ".", "data_structure", "[", "'support'", "]", "[", "'num_folds'", "]", ")", ")", "\n", "\n", "\n", "# add end marker of process instance", "\n", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", "=", "list", "(", "map", "(", "lambda", "x", ":", "x", "+", "[", "'!'", "]", ",", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'max_length_process_instance'", "]", "=", "max", "(", "map", "(", "lambda", "x", ":", "len", "(", "x", ")", ",", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", ")", ")", "\n", "\n", "# structures for predicting next activities", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", "=", "list", "(", "\n", "map", "(", "lambda", "x", ":", "set", "(", "x", ")", ",", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", "=", "list", "(", "\n", "set", "(", ")", ".", "union", "(", "*", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ".", "sort", "(", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_types'", "]", "=", "copy", ".", "copy", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_label_to_event_id'", "]", "=", "dict", "(", "\n", "(", "c", ",", "i", ")", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_id_to_event_label'", "]", "=", "dict", "(", "\n", "(", "i", ",", "c", ")", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_type_to_event_id'", "]", "=", "dict", "(", "\n", "(", "c", ",", "i", ")", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_types'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_id_to_event_type'", "]", "=", "dict", "(", "\n", "(", "i", ",", "c", ")", "for", "i", ",", "c", "in", "enumerate", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_types'", "]", ")", ")", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_event_ids'", "]", "=", "len", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", "\n", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_features'", "]", "=", "len", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", "\n", "\n", "args", ".", "dim", "=", "len", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_labels'", "]", ")", "\n", "\n", "if", "args", ".", "cross_validation", ":", "\n", "            ", "self", ".", "set_indices_k_fold_validation", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "set_indices_split_validation", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_sequences_from_eventlog": [[97, 137], ["open", "csv.reader", "next", "open.close", "preprocessor.Preprocessor.add_data_to_data_structure", "process_instance.append", "preprocessor.Preprocessor.add_data_to_data_structure", "preprocessor.Preprocessor.add_data_to_data_structure"], "methods", ["home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.add_data_to_data_structure", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.add_data_to_data_structure", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.add_data_to_data_structure"], ["", "", "def", "get_sequences_from_eventlog", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get sequences form event log.\n        \"\"\"", "\n", "\n", "id_latest_process_instance", "=", "''", "\n", "process_instance", "=", "[", "]", "\n", "first_event_of_process_instance", "=", "True", "\n", "output", "=", "True", "\n", "\n", "file", "=", "open", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'data_dir'", "]", ",", "'r'", ")", "\n", "reader", "=", "csv", ".", "reader", "(", "file", ",", "delimiter", "=", "';'", ",", "quotechar", "=", "'|'", ")", "\n", "next", "(", "reader", ",", "None", ")", "\n", "\n", "for", "event", "in", "reader", ":", "\n", "\n", "            ", "id_current_process_instance", "=", "event", "[", "0", "]", "\n", "\n", "if", "output", ":", "\n", "                ", "output", "=", "False", "\n", "\n", "", "if", "id_current_process_instance", "!=", "id_latest_process_instance", ":", "\n", "                ", "self", ".", "add_data_to_data_structure", "(", "id_current_process_instance", ",", "'ids_process_instances'", ")", "\n", "id_latest_process_instance", "=", "id_current_process_instance", "\n", "\n", "if", "not", "first_event_of_process_instance", ":", "\n", "                    ", "self", ".", "add_data_to_data_structure", "(", "process_instance", ",", "'process_instances'", ")", "\n", "\n", "", "process_instance", "=", "[", "]", "\n", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_process_instances'", "]", "+=", "1", "\n", "\n", "", "process_instance", ".", "append", "(", "event", "[", "1", "]", ")", "\n", "first_event_of_process_instance", "=", "False", "\n", "\n", "", "file", ".", "close", "(", ")", "\n", "\n", "self", ".", "add_data_to_data_structure", "(", "process_instance", ",", "'process_instances'", ")", "\n", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_process_instances'", "]", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_training_set": [[139, 162], ["xnap.llprint", "preprocessor.Preprocessor.get_instances_of_fold", "xnap.llprint", "preprocessor.Preprocessor.get_cropped_instances", "xnap.llprint", "preprocessor.Preprocessor.get_data_tensor", "xnap.llprint", "preprocessor.Preprocessor.get_label_matrix"], "methods", ["home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_instances_of_fold", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instances", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_label_matrix"], ["", "def", "set_training_set", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Set training set\n        \"\"\"", "\n", "\n", "utils", ".", "llprint", "(", "\"Get training instances ... \\n\"", ")", "\n", "process_instances_train", ",", "_", "=", "self", ".", "get_instances_of_fold", "(", "'train'", ")", "\n", "\n", "utils", ".", "llprint", "(", "\"Create cropped training instances ... \\n\"", ")", "\n", "cropped_process_instances", ",", "next_events", "=", "self", ".", "get_cropped_instances", "(", "process_instances_train", ")", "\n", "\n", "utils", ".", "llprint", "(", "\"Create training set data as 3d-tensor ... \\n\"", ")", "\n", "features_data", "=", "self", ".", "get_data_tensor", "(", "cropped_process_instances", ",", "\n", "'train'", ")", "\n", "\n", "utils", ".", "llprint", "(", "\"Create training set label as tensor ... \\n\"", ")", "\n", "labels", "=", "self", ".", "get_label_matrix", "(", "cropped_process_instances", ",", "\n", "next_events", ")", "\n", "\n", "self", ".", "data_structure", "[", "'data'", "]", "[", "'train'", "]", "[", "'features_data'", "]", "=", "features_data", "\n", "self", ".", "data_structure", "[", "'data'", "]", "[", "'train'", "]", "[", "'labels'", "]", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_event_type_max_prob": [[164, 182], ["None"], "methods", ["None"], ["", "def", "get_event_type_max_prob", "(", "self", ",", "predictions", ")", ":", "\n", "        ", "\"\"\"\n        Get most likely activity from a probability distribution.\n        :param predictions:\n        :return: activity.\n        \"\"\"", "\n", "\n", "max_prediction", "=", "0", "\n", "event_type", "=", "''", "\n", "index", "=", "0", "\n", "\n", "for", "prediction", "in", "predictions", ":", "\n", "            ", "if", "prediction", ">=", "max_prediction", ":", "\n", "                ", "max_prediction", "=", "prediction", "\n", "event_type", "=", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_id_to_event_type'", "]", "[", "index", "]", "\n", "", "index", "+=", "1", "\n", "\n", "", "return", "event_type", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_event_type": [[184, 192], ["None"], "methods", ["None"], ["", "def", "get_event_type", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Get activity label for activity id.\n        :param index:\n        :return: activity.\n        \"\"\"", "\n", "\n", "return", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_id_to_event_type'", "]", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.add_data_to_data_structure": [[194, 202], ["[].append"], "methods", ["None"], ["", "def", "add_data_to_data_structure", "(", "self", ",", "values", ",", "structure", ")", ":", "\n", "        ", "\"\"\"\n        Add data to general data structure.\n        :param values:\n        :param structure:\n        \"\"\"", "\n", "\n", "self", ".", "data_structure", "[", "'data'", "]", "[", "structure", "]", ".", "append", "(", "values", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_indices_k_fold_validation": [[204, 214], ["sklearn.model_selection.KFold", "sklearn.model_selection.KFold.split", "[].append", "[].append"], "methods", ["None"], ["", "def", "set_indices_k_fold_validation", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Performs k fold cross-validation.\n        \"\"\"", "\n", "\n", "kFold", "=", "KFold", "(", "n_splits", "=", "self", ".", "data_structure", "[", "'support'", "]", "[", "'num_folds'", "]", ",", "random_state", "=", "0", ",", "shuffle", "=", "False", ")", "\n", "\n", "for", "train_indices", ",", "test_indices", "in", "kFold", ".", "split", "(", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", ")", ":", "\n", "            ", "self", ".", "data_structure", "[", "'support'", "]", "[", "'train_index_per_fold'", "]", ".", "append", "(", "train_indices", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'test_index_per_fold'", "]", ".", "append", "(", "test_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.set_indices_split_validation": [[217, 228], ["sklearn.model_selection.ShuffleSplit", "sklearn.model_selection.ShuffleSplit.split", "[].append", "[].append"], "methods", ["None"], ["", "", "def", "set_indices_split_validation", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Produces indices for split-validation.\n        :param args:\n        \"\"\"", "\n", "\n", "shuffle_split", "=", "ShuffleSplit", "(", "n_splits", "=", "1", ",", "test_size", "=", "args", ".", "split_rate_test", ",", "random_state", "=", "0", ")", "\n", "\n", "for", "train_indices", ",", "test_indices", "in", "shuffle_split", ".", "split", "(", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", ")", ":", "\n", "            ", "self", ".", "data_structure", "[", "'support'", "]", "[", "'train_index_per_fold'", "]", ".", "append", "(", "train_indices", ")", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'test_index_per_fold'", "]", ".", "append", "(", "test_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_instances_of_fold": [[230, 252], ["enumerate", "process_instances_of_fold.append", "event_ids_of_fold.append"], "methods", ["None"], ["", "", "def", "get_instances_of_fold", "(", "self", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Retrieves process instances of a fold.\n        :param mode:\n        :return: process instances.\n        \"\"\"", "\n", "\n", "process_instances_of_fold", "=", "[", "]", "\n", "event_ids_of_fold", "=", "[", "]", "\n", "\n", "for", "index", ",", "value", "in", "enumerate", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "mode", "+", "'_index_per_fold'", "]", "[", "\n", "self", ".", "data_structure", "[", "'support'", "]", "[", "'iteration_cross_validation'", "]", "]", ")", ":", "\n", "            ", "process_instances_of_fold", ".", "append", "(", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", "[", "value", "]", ")", "\n", "event_ids_of_fold", ".", "append", "(", "self", ".", "data_structure", "[", "'data'", "]", "[", "'ids_process_instances'", "]", "[", "value", "]", ")", "\n", "\n", "\n", "", "if", "mode", "==", "'test'", ":", "\n", "            ", "self", ".", "data_structure", "[", "'data'", "]", "[", "'test'", "]", "[", "'process_instances'", "]", "=", "process_instances_of_fold", "\n", "self", ".", "data_structure", "[", "'data'", "]", "[", "'test'", "]", "[", "'event_ids'", "]", "=", "event_ids_of_fold", "\n", "return", "\n", "\n", "", "return", "process_instances_of_fold", ",", "event_ids_of_fold", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instances": [[254, 275], ["range", "len", "cropped_process_instances.append", "next_events.append"], "methods", ["None"], ["", "def", "get_cropped_instances", "(", "self", ",", "process_instances", ")", ":", "\n", "        ", "\"\"\"\n        Crops prefixes out of process instances.\n        :param process_instances:\n        :return: cropped process instances, next events\n        \"\"\"", "\n", "\n", "cropped_process_instances", "=", "[", "]", "\n", "next_events", "=", "[", "]", "\n", "\n", "\n", "for", "process_instance", "in", "process_instances", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "process_instance", ")", ")", ":", "\n", "\n", "                ", "if", "i", "==", "0", ":", "\n", "                    ", "continue", "\n", "", "cropped_process_instances", ".", "append", "(", "process_instance", "[", "0", ":", "i", "]", ")", "\n", "# label", "\n", "next_events", ".", "append", "(", "process_instance", "[", "i", "]", ")", "\n", "\n", "", "", "return", "cropped_process_instances", ",", "next_events", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instance_label": [[277, 291], ["len"], "methods", ["None"], ["", "def", "get_cropped_instance_label", "(", "self", ",", "prefix_size", ",", "process_instance", ")", ":", "\n", "        ", "\"\"\"\n        Crops the next activity label out of a single process instance.\n        :param prefix_size:\n        :param process_instance:\n        :return: Next activity label\n        \"\"\"", "\n", "\n", "if", "prefix_size", "==", "len", "(", "process_instance", ")", "-", "1", ":", "\n", "# end marker", "\n", "            ", "return", "self", ".", "data_structure", "[", "\"support\"", "]", "[", "\"end_process_instance\"", "]", "\n", "", "else", ":", "\n", "# label of next act", "\n", "            ", "return", "process_instance", "[", "prefix_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instance": [[293, 302], ["None"], "methods", ["None"], ["", "", "def", "get_cropped_instance", "(", "self", ",", "prefix_size", ",", "process_instance", ")", ":", "\n", "        ", "\"\"\"\n        Crops prefixes out of a single process instance.\n        :param prefix_size:\n        :param process_instance:\n        :return: prefixes.\n        \"\"\"", "\n", "\n", "return", "process_instance", "[", ":", "prefix_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor": [[304, 330], ["enumerate", "numpy.zeros", "numpy.zeros", "enumerate", "len"], "methods", ["None"], ["", "def", "get_data_tensor", "(", "self", ",", "cropped_process_instances", ",", "mode", ")", ":", "\n", "        ", "\"\"\"\n        Get three-order data tensor from process instances.\n        :param cropped_process_instances:\n        :param mode:\n        :return: data tensor\n        \"\"\"", "\n", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "data_set", "=", "numpy", ".", "zeros", "(", "(", "\n", "len", "(", "cropped_process_instances", ")", ",", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'max_length_process_instance'", "]", ",", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_features'", "]", ")", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "", "else", ":", "\n", "            ", "data_set", "=", "numpy", ".", "zeros", "(", "(", "\n", "1", ",", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'max_length_process_instance'", "]", ",", "\n", "self", ".", "data_structure", "[", "'meta'", "]", "[", "'num_features'", "]", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "\n", "", "for", "index", ",", "cropped_process_instance", "in", "enumerate", "(", "cropped_process_instances", ")", ":", "\n", "            ", "for", "index_", ",", "activity", "in", "enumerate", "(", "cropped_process_instance", ")", ":", "\n", "\n", "                ", "data_set", "[", "index", ",", "index_", ",", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_label_to_event_id'", "]", "[", "activity", "]", "]", "=", "1", "\n", "\n", "", "", "return", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor_for_single_prediction": [[332, 345], ["preprocessor.Preprocessor.get_data_tensor"], "methods", ["home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor"], ["", "def", "get_data_tensor_for_single_prediction", "(", "self", ",", "cropped_process_instance", ")", ":", "\n", "        ", "\"\"\"\n        Get three-order data tensor from a single prefix of a process instances.\n        The prefix represents a running process instance.\n        :param cropped_process_instance:\n        :return: data tensor\n        \"\"\"", "\n", "\n", "data_set", "=", "self", ".", "get_data_tensor", "(", "\n", "[", "cropped_process_instance", "]", ",", "\n", "'test'", ")", "\n", "\n", "return", "data_set", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_label_matrix": [[347, 368], ["numpy.zeros", "enumerate", "len", "len"], "methods", ["None"], ["", "def", "get_label_matrix", "(", "self", ",", "cropped_process_instances", ",", "next_events", ")", ":", "\n", "        ", "\"\"\"\n        Get matrix from process instances.\n        :param next_events:\n        :param cropped_process_instances:\n        :return: label matrix\n        \"\"\"", "\n", "\n", "label", "=", "numpy", ".", "zeros", "(", "(", "len", "(", "cropped_process_instances", ")", ",", "len", "(", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_types'", "]", ")", ")", ",", "\n", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n", "for", "index", ",", "cropped_process_instance", "in", "enumerate", "(", "cropped_process_instances", ")", ":", "\n", "\n", "            ", "for", "event_type", "in", "self", ".", "data_structure", "[", "'support'", "]", "[", "'event_types'", "]", ":", "\n", "\n", "                ", "if", "event_type", "==", "next_events", "[", "index", "]", ":", "\n", "                    ", "label", "[", "index", ",", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_type_to_event_id'", "]", "[", "event_type", "]", "]", "=", "1", "\n", "", "else", ":", "\n", "                    ", "label", "[", "index", ",", "self", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_type_to_event_id'", "]", "[", "event_type", "]", "]", "=", "0", "\n", "\n", "", "", "", "return", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_random_process_instance": [[370, 388], ["numpy.random.randint", "len", "len"], "methods", ["None"], ["", "def", "get_random_process_instance", "(", "self", ",", "lower_bound", ",", "upper_bound", ")", ":", "\n", "        ", "\"\"\"\n        Selects a random process instance from the complete event log.\n        :param lower_bound:\n        :param upper_bound:\n        :return: process instance.\n        \"\"\"", "\n", "\n", "process_instances", "=", "self", ".", "data_structure", "[", "'data'", "]", "[", "'process_instances'", "]", "\n", "\n", "while", "True", ":", "\n", "            ", "rand", "=", "numpy", ".", "random", ".", "randint", "(", "len", "(", "process_instances", ")", ")", "\n", "size", "=", "len", "(", "process_instances", "[", "rand", "]", ")", "\n", "\n", "if", "lower_bound", "<=", "size", "<=", "upper_bound", ":", "\n", "                ", "break", "\n", "\n", "", "", "return", "process_instances", "[", "rand", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.tester.test_prefix": [[9, 51], ["tensorflow.keras.models.load_model", "preprocessor.get_cropped_instance", "preprocessor.get_cropped_instance_label", "preprocessor.get_data_tensor_for_single_prediction", "tensorflow.keras.models.load_model.predict", "preprocessor.get_event_type_max_prob", "numpy.argmax", "dict", "enumerate", "preprocessor.get_data_tensor_for_single_prediction.reshape", "preprocessor.get_event_type", "len"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instance", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instance_label", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor_for_single_prediction", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_event_type_max_prob", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_event_type"], ["def", "test_prefix", "(", "args", ",", "preprocessor", ",", "process_instance", ",", "prefix_size", ")", ":", "\n", "    ", "\"\"\"\n    Perform test for LRP.\n\n    Select model with the highest f1-score:\n    - Bi-LSTM model #9 for bpi2019s\n    - Bi-LSTM model #8 for helpdesk\n\n    :param args:\n    :param preprocessor:\n    :param process_instance:\n    :param prefix_size:\n    :return: parameters for LRP\n    \"\"\"", "\n", "\n", "# select the best model of the ten-fold cross-validation", "\n", "model_index", "=", "8", "\n", "model", "=", "load_model", "(", "'%sca_%s_%s_%s.h5'", "%", "(", "\n", "args", ".", "model_dir", ",", "\n", "args", ".", "task", ",", "\n", "args", ".", "data_set", "[", "0", ":", "len", "(", "args", ".", "data_set", ")", "-", "4", "]", ",", "model_index", ")", ")", "\n", "\n", "cropped_process_instance", "=", "preprocessor", ".", "get_cropped_instance", "(", "prefix_size", ",", "process_instance", ")", "\n", "cropped_process_instance_label", "=", "preprocessor", ".", "get_cropped_instance_label", "(", "prefix_size", ",", "process_instance", ")", "\n", "test_data", "=", "preprocessor", ".", "get_data_tensor_for_single_prediction", "(", "cropped_process_instance", ")", "\n", "\n", "y", "=", "model", ".", "predict", "(", "test_data", ")", "\n", "y", "=", "y", "[", "0", "]", "[", ":", "]", "\n", "\n", "prediction", "=", "preprocessor", ".", "get_event_type_max_prob", "(", "y", ")", "\n", "prediction_class", "=", "np", ".", "argmax", "(", "y", ")", "\n", "\n", "prob_dist", "=", "dict", "(", ")", "\n", "for", "index", ",", "prob", "in", "enumerate", "(", "y", ")", ":", "\n", "        ", "prob_dist", "[", "preprocessor", ".", "get_event_type", "(", "index", ")", "]", "=", "y", "[", "index", "]", "\n", "\n", "", "test_data_reshaped", "=", "test_data", ".", "reshape", "(", "-", "1", ",", "test_data", ".", "shape", "[", "2", "]", ")", "\n", "cropped_process_instance_label_class", "=", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'map_event_type_to_event_id'", "]", "[", "cropped_process_instance_label", "]", "\n", "\n", "\n", "\n", "return", "prediction_class", ",", "prediction", ",", "cropped_process_instance_label_class", ",", "cropped_process_instance_label", ",", "cropped_process_instance", ",", "model", ",", "test_data_reshaped", ",", "prob_dist", "\n", "\n"]], "home.repos.pwc.inspect_result.fau-is_xnap.nap.tester.test": [[53, 123], ["preprocessor.get_instances_of_fold", "tensorflow.keras.models.load_model", "args.data_set.split", "open", "csv.writer", "csv.writer.writerow", "range", "xnap.llprint", "zip", "preprocessor.get_cropped_instance", "range", "preprocessor.get_data_tensor_for_single_prediction", "tensorflow.keras.models.load_model.predict", "preprocessor.get_event_type_max_prob", "len", "output.append", "output.append", "output.append", "output.append", "csv.writer.writerow", "len", "print", "str().encode", "str().encode", "len", "str", "str"], "function", ["home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_instances_of_fold", "home.repos.pwc.inspect_result.fau-is_xnap.xnap.utils.llprint", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_cropped_instance", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_data_tensor_for_single_prediction", "home.repos.pwc.inspect_result.fau-is_xnap.nap.preprocessor.Preprocessor.get_event_type_max_prob"], ["", "def", "test", "(", "args", ",", "preprocessor", ")", ":", "\n", "    ", "\"\"\"\n    Perform test for model validation.\n    :param args:\n    :param preprocessor:\n    :return: none\n    \"\"\"", "\n", "\n", "preprocessor", ".", "get_instances_of_fold", "(", "'test'", ")", "\n", "model", "=", "load_model", "(", "'%sca_%s_%s_%s.h5'", "%", "(", "\n", "args", ".", "model_dir", ",", "\n", "args", ".", "task", ",", "\n", "args", ".", "data_set", "[", "0", ":", "len", "(", "args", ".", "data_set", ")", "-", "4", "]", ",", "\n", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'iteration_cross_validation'", "]", ")", ")", "\n", "\n", "prediction_size", "=", "1", "\n", "data_set_name", "=", "args", ".", "data_set", ".", "split", "(", "'.csv'", ")", "[", "0", "]", "\n", "result_dir_generic", "=", "'./'", "+", "args", ".", "task", "+", "args", ".", "result_dir", "[", "1", ":", "]", "+", "data_set_name", "\n", "result_dir_fold", "=", "result_dir_generic", "+", "\"_%d%s\"", "%", "(", "\n", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'iteration_cross_validation'", "]", ",", "\".csv\"", ")", "\n", "\n", "# start prediction", "\n", "with", "open", "(", "result_dir_fold", ",", "'w'", ")", "as", "result_file_fold", ":", "\n", "        ", "result_writer", "=", "csv", ".", "writer", "(", "result_file_fold", ",", "delimiter", "=", "';'", ",", "quotechar", "=", "'|'", ",", "quoting", "=", "csv", ".", "QUOTE_MINIMAL", ")", "\n", "result_writer", ".", "writerow", "(", "\n", "[", "\"CaseID\"", ",", "\"Prefix length\"", ",", "\"Ground truth\"", ",", "\"Predicted\"", "]", ")", "\n", "\n", "# for prefix_size >= 2", "\n", "for", "prefix_size", "in", "range", "(", "2", ",", "preprocessor", ".", "data_structure", "[", "'meta'", "]", "[", "'max_length_process_instance'", "]", ")", ":", "\n", "            ", "utils", ".", "llprint", "(", "\"Prefix size: %d\\n\"", "%", "prefix_size", ")", "\n", "\n", "for", "process_instance", ",", "event_id", "in", "zip", "(", "preprocessor", ".", "data_structure", "[", "'data'", "]", "[", "'test'", "]", "[", "'process_instances'", "]", ",", "\n", "preprocessor", ".", "data_structure", "[", "'data'", "]", "[", "'test'", "]", "[", "'event_ids'", "]", ")", ":", "\n", "\n", "                ", "cropped_process_instance", "=", "preprocessor", ".", "get_cropped_instance", "(", "\n", "prefix_size", ",", "\n", "process_instance", ")", "\n", "\n", "if", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'end_process_instance'", "]", "in", "cropped_process_instance", ":", "\n", "                    ", "continue", "\n", "\n", "", "ground_truth", "=", "''", ".", "join", "(", "process_instance", "[", "prefix_size", ":", "prefix_size", "+", "prediction_size", "]", ")", "\n", "prediction", "=", "''", "\n", "\n", "for", "i", "in", "range", "(", "prediction_size", ")", ":", "\n", "\n", "                    ", "if", "len", "(", "ground_truth", ")", "<=", "i", ":", "\n", "                        ", "continue", "\n", "\n", "", "test_data", "=", "preprocessor", ".", "get_data_tensor_for_single_prediction", "(", "cropped_process_instance", ")", "\n", "\n", "y", "=", "model", ".", "predict", "(", "test_data", ")", "\n", "y_char", "=", "y", "[", "0", "]", "[", ":", "]", "\n", "\n", "predicted_event", "=", "preprocessor", ".", "get_event_type_max_prob", "(", "y_char", ")", "\n", "\n", "cropped_process_instance", "+=", "predicted_event", "\n", "prediction", "+=", "predicted_event", "\n", "\n", "if", "predicted_event", "==", "preprocessor", ".", "data_structure", "[", "'support'", "]", "[", "'end_process_instance'", "]", ":", "\n", "                        ", "print", "(", "'! predicted, end of process instance ... \\n'", ")", "\n", "break", "\n", "\n", "", "", "output", "=", "[", "]", "\n", "if", "len", "(", "ground_truth", ")", ">", "0", ":", "\n", "                    ", "output", ".", "append", "(", "event_id", ")", "\n", "output", ".", "append", "(", "prefix_size", ")", "\n", "output", ".", "append", "(", "str", "(", "ground_truth", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "output", ".", "append", "(", "str", "(", "prediction", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "result_writer", ".", "writerow", "(", "output", ")", "\n", "", "", "", "", "", ""]]}