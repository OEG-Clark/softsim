{"home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.argparser": [[22, 48], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "gs", "=", "parser", ".", "add_argument_group", "(", "'General settings'", ")", "\n", "gs", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'john'", ",", "help", "=", "'model to use'", ",", "\n", "choices", "=", "[", "'gp'", ",", "'sgp'", ",", "'nn'", ",", "'mcdnn'", ",", "'ensnn'", ",", "'bnn'", ",", "'rbfnn'", ",", "'gpnn'", ",", "'john'", "]", ")", "\n", "gs", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'boston'", ",", "help", "=", "'dataset to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random state of data-split'", ")", "\n", "gs", ".", "add_argument", "(", "'--test_size'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'test set size, as a procentage'", ")", "\n", "gs", ".", "add_argument", "(", "'--repeats'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of repeatitions'", ")", "\n", "gs", ".", "add_argument", "(", "'--silent'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'suppress warnings'", ")", "\n", "gs", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use cuda'", ")", "\n", "\n", "ms", "=", "parser", ".", "add_argument_group", "(", "'Model specific settings'", ")", "\n", "ms", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'batch size'", ")", "\n", "ms", ".", "add_argument", "(", "'--shuffel'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'shuffel data during training'", ")", "\n", "ms", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'learning rate'", ")", "\n", "ms", ".", "add_argument", "(", "'--iters'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'number of iterations'", ")", "\n", "ms", ".", "add_argument", "(", "'--mcmc'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of mcmc samples'", ")", "\n", "ms", ".", "add_argument", "(", "'--inducing'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of inducing points'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of cluster centers'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_models'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of ensemble'", ")", "\n", "\n", "# Parse and return", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.gp": [[50, 70], ["GPy.kern.RBF", "GPy.models.GPRegression", "GPy.models.GPRegression.constrain_positive", "GPy.models.GPRegression.optimize", "GPy.models.GPRegression.predict", "y_pred.flatten.flatten", "math.sqrt", "y.reshape", "numpy.diag", "numpy.ones", "math.log", "numpy.linalg.slogdet", "numpy.linalg.inv().dot", "numpy.linalg.inv"], "function", ["None"], ["", "def", "gp", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "X", ".", "shape", "[", "0", "]", ">", "2000", ":", "# do not run gp for large datasets", "\n", "        ", "return", "np", ".", "nan", ",", "np", ".", "nan", "\n", "", "import", "GPy", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "GPy", ".", "kern", ".", "RBF", "(", "d", ",", "ARD", "=", "True", ")", "\n", "model", "=", "GPy", ".", "models", ".", "GPRegression", "(", "X", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "kernel", ",", "normalizer", "=", "True", ")", "\n", "\n", "model", ".", "constrain_positive", "(", "' '", ")", "# ensure positive hyperparameters", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "y_pred", ",", "cov", "=", "model", ".", "predict", "(", "Xval", ",", "full_cov", "=", "True", ")", "\n", "cov", "+=", "1e-4", "*", "np", ".", "diag", "(", "np", ".", "ones", "(", "cov", ".", "shape", "[", "0", "]", ")", ")", "\n", "y_pred", "=", "y_pred", ".", "flatten", "(", ")", "\n", "log_px", "=", "-", "1", "/", "2", "*", "(", "np", ".", "linalg", ".", "slogdet", "(", "cov", ")", "[", "1", "]", "+", "(", "yval", "-", "y_pred", ")", ".", "T", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cov", ")", ".", "dot", "(", "yval", "-", "y_pred", ")", ")", "+", "d", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "Xval", ".", "shape", "[", "0", "]", "\n", "\n", "rmse", "=", "math", ".", "sqrt", "(", "(", "(", "yval", "-", "y_pred", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "return", "log_px", ",", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.sgp": [[72, 93], ["min", "GPy.kern.RBF", "GPy.models.SparseGPRegression", "GPy.models.SparseGPRegression.constrain_positive", "GPy.models.SparseGPRegression.optimize", "GPy.models.SparseGPRegression.predict", "y_pred.flatten.flatten", "math.sqrt", "y.reshape", "math.log", "numpy.linalg.slogdet", "numpy.linalg.inv().dot", "numpy.linalg.inv"], "function", ["None"], ["", "def", "sgp", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "X", ".", "shape", "[", "0", "]", ">", "30000", ":", "# do not run spg for large datasets", "\n", "        ", "return", "np", ".", "nan", ",", "np", ".", "nan", "\n", "", "import", "GPy", "\n", "args", ".", "inducing", "=", "min", "(", "args", ".", "inducing", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "GPy", ".", "kern", ".", "RBF", "(", "d", ",", "ARD", "=", "True", ")", "\n", "model", "=", "GPy", ".", "models", ".", "SparseGPRegression", "(", "X", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "kernel", ",", "normalizer", "=", "True", ",", "\n", "num_inducing", "=", "args", ".", "inducing", ")", "\n", "model", ".", "constrain_positive", "(", "[", "'rbf.variance'", ",", "'rbf.lengthscale'", ",", "'Gaussian_noise.variance'", "]", ")", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "y_pred", ",", "cov", "=", "model", ".", "predict", "(", "Xval", ",", "full_cov", "=", "True", ")", "\n", "y_pred", "=", "y_pred", ".", "flatten", "(", ")", "\n", "\n", "log_px", "=", "-", "1", "/", "2", "*", "(", "np", ".", "linalg", ".", "slogdet", "(", "cov", ")", "[", "1", "]", "+", "(", "yval", "-", "y_pred", ")", ".", "T", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cov", ")", ".", "dot", "(", "yval", "-", "y_pred", ")", ")", "+", "d", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "Xval", ".", "shape", "[", "0", "]", "\n", "\n", "rmse", "=", "math", ".", "sqrt", "(", "(", "(", "yval", "-", "y_pred", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "return", "log_px", ",", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.nn": [[95, 145], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "nn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.mcdnn": [[147, 194], ["torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "torch.zeros().to", "range", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Dropout", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "torch.nn.Sequential.parameters", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.nn.Sequential.", "loss.backward", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.flatten", "torch.zeros().to.mean", "torch.zeros().to.var", "utils.normal_log_prob.mean().item", "rmse.item", "torch.tensor().to", "torch.tensor().to", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "loss.item", "torch.nn.Sequential.", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "mean.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "mcdnn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.05", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.05", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", "=", "mean", "(", "data", ")", "\n", "loss", "=", "(", "m", "-", "label", ")", ".", "abs", "(", ")", ".", "pow", "(", "2.0", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "Xval", ".", "shape", "[", "0", "]", ",", "args", ".", "mcmc", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mcmc", ")", ":", "\n", "        ", "samples", "[", ":", ",", "i", "]", "=", "mean", "(", "data", ")", ".", "flatten", "(", ")", "\n", "", "m", ",", "v", "=", "samples", ".", "mean", "(", "dim", "=", "1", ")", ",", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "\n", "log_probs", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_probs", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.ensnn": [[196, 258], ["utils.normalize_y", "range", "torch.stack", "torch.stack", "torch.stack.mean", "utils.normal_log_prob", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "torch.stack.append", "torch.stack.append", "utils.normal_log_prob.mean().item", "rmse.item", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "utils.normal_log_prob.mean", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ms.mean.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "ensnn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "ms", ",", "vs", "=", "[", "]", ",", "[", "]", "\n", "for", "m", "in", "range", "(", "args", ".", "n_models", ")", ":", "# initialize differently", "\n", "        ", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "            ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "            ", "switch", "=", "0.0", "#1.0 if it > args.iters/2 else 0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "\n", "ms", ".", "append", "(", "m", ")", "\n", "vs", ".", "append", "(", "v", ")", "\n", "\n", "", "ms", "=", "torch", ".", "stack", "(", "ms", ")", "\n", "vs", "=", "torch", ".", "stack", "(", "vs", ")", "\n", "\n", "m", "=", "ms", ".", "mean", "(", "dim", "=", "0", ")", "\n", "v", "=", "(", "vs", "+", "ms", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "m", "**", "2", "\n", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.bnn": [[260, 351], ["tf.reset_default_graph", "utils.normalize_y", "tf.placeholder", "tf.placeholder", "experiment_regression.bnn.sample_net"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y"], ["", "def", "bnn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "import", "tensorflow", "as", "tf", "\n", "import", "tensorflow_probability", "as", "tfp", "\n", "from", "tensorflow_probability", "import", "distributions", "as", "tfd", "\n", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "def", "VariationalNormal", "(", "name", ",", "shape", ",", "constraint", "=", "None", ")", ":", "\n", "        ", "means", "=", "tf", ".", "get_variable", "(", "name", "+", "'_mean'", ",", "\n", "initializer", "=", "tf", ".", "ones", "(", "[", "1", "]", ")", ",", "\n", "constraint", "=", "constraint", ")", "\n", "stds", "=", "tf", ".", "get_variable", "(", "name", "+", "'_std'", ",", "\n", "initializer", "=", "-", "1.0", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ")", "\n", "return", "tfd", ".", "Normal", "(", "loc", "=", "means", ",", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "stds", ")", ")", "\n", "\n", "", "x_p", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "X", ".", "shape", "[", "1", "]", ")", ")", "\n", "y_p", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "(", "None", ",", "1", ")", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'model'", ",", "values", "=", "[", "x_p", "]", ")", ":", "\n", "        ", "layer1", "=", "tfp", ".", "layers", ".", "DenseFlipout", "(", "\n", "units", "=", "n_neurons", ",", "\n", "activation", "=", "'relu'", ",", "\n", "kernel_posterior_fn", "=", "tfp", ".", "layers", ".", "default_mean_field_normal_fn", "(", ")", ",", "\n", "bias_posterior_fn", "=", "tfp", ".", "layers", ".", "default_mean_field_normal_fn", "(", ")", "\n", ")", "\n", "layer2", "=", "tfp", ".", "layers", ".", "DenseFlipout", "(", "\n", "units", "=", "1", ",", "\n", "activation", "=", "'linear'", ",", "\n", "kernel_posterior_fn", "=", "tfp", ".", "layers", ".", "default_mean_field_normal_fn", "(", ")", ",", "\n", "bias_posterior_fn", "=", "tfp", ".", "layers", ".", "default_mean_field_normal_fn", "(", ")", "\n", ")", "\n", "predictions", "=", "layer2", "(", "layer1", "(", "x_p", ")", ")", "\n", "noise", "=", "VariationalNormal", "(", "'noise'", ",", "[", "1", "]", ",", "constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "NonNeg", "(", ")", ")", "\n", "pred_distribution", "=", "tfd", ".", "Normal", "(", "loc", "=", "predictions", ",", "\n", "scale", "=", "noise", ".", "sample", "(", ")", ")", "\n", "\n", "", "neg_log_prob", "=", "-", "tf", ".", "reduce_mean", "(", "pred_distribution", ".", "log_prob", "(", "y_p", ")", ")", "\n", "kl_div", "=", "sum", "(", "layer1", ".", "losses", "+", "layer2", ".", "losses", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "elbo_loss", "=", "neg_log_prob", "+", "kl_div", "\n", "\n", "with", "tf", ".", "name_scope", "(", "\"train\"", ")", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "args", ".", "lr", ")", "\n", "train_op", "=", "optimizer", ".", "minimize", "(", "elbo_loss", ")", "\n", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training BNN'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "            ", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "_", ",", "l", "=", "sess", ".", "run", "(", "[", "train_op", ",", "elbo_loss", "]", ",", "feed_dict", "=", "{", "x_p", ":", "data", ",", "y_p", ":", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", "}", ")", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "l", "}", ")", "\n", "it", "+=", "1", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "W0_samples", "=", "layer1", ".", "kernel_posterior", ".", "sample", "(", "1000", ")", "\n", "b0_samples", "=", "layer1", ".", "bias_posterior", ".", "sample", "(", "1000", ")", "\n", "W1_samples", "=", "layer2", ".", "kernel_posterior", ".", "sample", "(", "1000", ")", "\n", "b1_samples", "=", "layer2", ".", "bias_posterior", ".", "sample", "(", "1000", ")", "\n", "noise_samples", "=", "noise", ".", "sample", "(", "1000", ")", "\n", "\n", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "n", "=", "sess", ".", "run", "(", "[", "W0_samples", ",", "\n", "b0_samples", ",", "\n", "W1_samples", ",", "\n", "b1_samples", ",", "\n", "noise_samples", "]", ")", "\n", "\n", "", "def", "sample_net", "(", "x", ",", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "n", ")", ":", "\n", "        ", "h", "=", "np", ".", "maximum", "(", "np", ".", "matmul", "(", "x", "[", "np", ".", "newaxis", "]", ",", "W0", ")", "+", "b0", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", ",", "0.0", ")", "\n", "return", "np", ".", "matmul", "(", "h", ",", "W1", ")", "+", "b1", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "+", "n", "[", ":", ",", "np", ".", "newaxis", ",", ":", "]", "*", "np", ".", "random", ".", "randn", "(", ")", "\n", "\n", "", "samples", "=", "sample_net", "(", "Xval", ",", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "n", ")", "\n", "\n", "m", "=", "samples", ".", "mean", "(", "axis", "=", "0", ")", "\n", "v", "=", "samples", ".", "var", "(", "axis", "=", "0", ")", "\n", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "\n", "log_probs", "=", "normal_log_prob", "(", "yval", ",", "m", ",", "v", ")", "\n", "rmse", "=", "math", ".", "sqrt", "(", "(", "(", "m", ".", "flatten", "(", ")", "-", "yval", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "\n", "return", "log_probs", ".", "mean", "(", ")", ",", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.rbfnn": [[353, 414], ["min", "utils.normalize_y", "KMeans", "KMeans.fit", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "utils.RBF", "utils.PosLinear", "utils.Reciprocal", "utils.PosLinear", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "rbfnn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "cluster_alg", "=", "KMeans", "(", "args", ".", "n_clusters", ")", "\n", "cluster_alg", ".", "fit", "(", "X", ")", "\n", "c", "=", "cluster_alg", ".", "cluster_centers_", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "RBF", "(", "None", ",", "None", ",", "c", ",", "1.0", ")", ",", "\n", "PosLinear", "(", "args", ".", "n_clusters", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "Reciprocal", "(", "0.1", ")", ",", "\n", "PosLinear", "(", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.gpnn": [[416, 482], ["min", "utils.normalize_y", "KMeans", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "KMeans.fit", "KMeans.fit", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "utils.RBF", "torch.nn.Linear", "utils.Norm2", "torch.nn.Sigmoid", "utils.OneMinusX", "utils.PosLinear", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "numpy.concatenate", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "utils.normal_log_prob.mean", "numpy.random.randint", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "gpnn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "cluster_alg", "=", "KMeans", "(", "args", ".", "n_clusters", ")", "\n", "if", "args", ".", "dataset", "!=", "'year_prediction'", ":", "\n", "        ", "cluster_alg", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "cluster_alg", ".", "fit", "(", "X", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ",", "size", "=", "(", "10000", ")", ")", "]", ")", "\n", "", "c", "=", "cluster_alg", ".", "cluster_centers_", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "RBF", "(", "None", ",", "None", ",", "c", ",", "1.0", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "n_clusters", ",", "args", ".", "n_clusters", ",", "bias", "=", "False", ")", ",", "\n", "Norm2", "(", "dim", "=", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "OneMinusX", "(", ")", ",", "\n", "PosLinear", "(", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "(", "v", "+", "1e-4", ")", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_regression.john": [[484, 647], ["min", "utils.normalize_y", "KMeans", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "gen_Qw", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.train", "torch.tensor().to().to", "torch.tensor().to().to", "utils.batchify", "GPNNModel.eval", "torch.tensor().to().to", "torch.tensor().to().to", "KMeans.fit", "KMeans.fit", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.mean.parameters", "itertools.chain", "PCA", "PCA.fit_transform", "gen_Qw", "gen_Qw", "torch.no_grad", "GPNNModel.", "utils.t_likelihood", "log_px.mean().item", "rmse.item", "numpy.concatenate", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_regression..trans", "experiment_regression..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.autograd.detect_anomaly", "next", "GPNNModel.", "print", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to().to.reshape", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_regression..alph", "experiment_regression..bet", "D.Gamma", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "log_px.mean", "numpy.random.randint", "D.Gamma.rsample", "D.Gamma.rsample", "torch.ones_like", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.optim.Adam.zero_grad", "locality_sampler2", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "locality_sampler2", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "loss.item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "utils.t_likelihood", "torch.tensor().to().to.reshape", "v.reshape", "utils.t_likelihood", "utils.t_likelihood", "m.flatten", "y[].reshape", "y[].reshape", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood"], ["", "def", "john", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "itertools", "import", "chain", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "from", "locality_sampler", "import", "gen_Qw", ",", "locality_sampler2", "\n", "from", "sklearn", ".", "decomposition", "import", "PCA", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "40", "\n", "mean_M", "=", "50", "\n", "\n", "var_psu", "=", "2", "\n", "var_ssu", "=", "10", "\n", "var_M", "=", "10", "\n", "\n", "num_draws_train", "=", "20", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "if", "args", ".", "dataset", "!=", "'year_prediction'", ":", "\n", "        ", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "kmeans", ".", "fit", "(", "X", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ",", "size", "=", "(", "10000", ")", ")", "]", ")", "\n", "", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "num_draws_train", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "y_std", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "0.05", "*", "torch", ".", "ones_like", "(", "mean", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "X", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "\n", "if", "X", ".", "shape", "[", "0", "]", ">", "100000", "and", "X", ".", "shape", "[", "1", "]", ">", "10", ":", "\n", "        ", "pca", "=", "PCA", "(", "n_components", "=", "0.5", ")", "\n", "temp", "=", "pca", ".", "fit_transform", "(", "X", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "temp", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "", "else", ":", "\n", "        ", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "X", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "\n", "#mean_pseupoch = get_pseupoch(mean_w,0.5)", "\n", "#var_pseupoch = get_pseupoch(var_w,0.5)", "\n", "", "opt_switch", "=", "1", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "X", "=", "torch", ".", "tensor", "(", "X", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "it", "=", "0", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2.0", "else", "0.0", "\n", "\n", "if", "it", "%", "11", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "with", "torch", ".", "autograd", ".", "detect_anomaly", "(", ")", ":", "\n", "            ", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "if", "not", "switch", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", ";", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "#for b in range(mean_pseupoch):", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "mean_w", "[", "batch", "]", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "#for b in range(var_pseupoch):", "\n", "                    ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "var_w", "[", "batch", "]", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "", "", "if", "it", "%", "500", "==", "0", ":", "\n", "            ", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "args", ".", "iters", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "#log_px = normal_log_prob(label, m, v).mean(dim=0) # check for correctness", "\n", "log_px", "=", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ")", "/", "Xval", ".", "shape", "[", "0", "]", "# check", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat": [[28, 34], ["float"], "function", ["None"], ["def", "safefloat", "(", "x", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "y", "=", "float", "(", "x", ")", "\n", "", "except", ":", "\n", "        ", "y", "=", "np", ".", "NaN", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.get_data": [[36, 87], ["open", "open.readline", "csv.reader", "list", "list", "list", "list", "list", "list", "open.close", "numpy.array", "int", "int", "zip", "numpy.array", "numpy.nanmean().flatten", "numpy.nanstd().flatten", "list.append", "list.append", "list.append", "list.append", "list.append", "list.append", "numpy.ones", "currdate.split", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.show", "numpy.array", "toy_weather.safefloat", "toy_weather.safefloat", "toy_weather.safefloat", "toy_weather.safefloat", "toy_weather.safefloat", "date[].split", "date[].split", "numpy.nanmean", "numpy.nanstd", "range", "range", "numpy.arange", "numpy.isnan().any", "len", "int", "int", "int", "numpy.random.randint", "numpy.isnan"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.safefloat"], ["", "def", "get_data", "(", "plot", "=", "False", ")", ":", "\n", "# Read data file and split into numpy arrays", "\n", "    ", "f", "=", "open", "(", "'data/weather/SD_b2dates_trimmed.csv'", ")", "\n", "f", ".", "readline", "(", ")", "# skip first line", "\n", "data", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "','", ")", "\n", "\n", "date", "=", "list", "(", ")", "\n", "prcp", "=", "list", "(", ")", "\n", "snow", "=", "list", "(", ")", "\n", "snwd", "=", "list", "(", ")", "\n", "tmax", "=", "list", "(", ")", "\n", "tmin", "=", "list", "(", ")", "\n", "for", "row", "in", "data", ":", "\n", "        ", "date", ".", "append", "(", "row", "[", "0", "]", ")", "\n", "prcp", ".", "append", "(", "safefloat", "(", "row", "[", "1", "]", ")", ")", "\n", "snow", ".", "append", "(", "safefloat", "(", "row", "[", "2", "]", ")", ")", "\n", "snwd", ".", "append", "(", "safefloat", "(", "row", "[", "3", "]", ")", ")", "\n", "tmax", ".", "append", "(", "safefloat", "(", "row", "[", "4", "]", ")", ")", "\n", "tmin", ".", "append", "(", "safefloat", "(", "row", "[", "5", "]", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "maxtemp1d", "=", "np", ".", "array", "(", "tmax", ")", "\n", "\n", "# Reshape to be have a year-month-date axes", "\n", "first_year", "=", "int", "(", "date", "[", "0", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "\n", "last_year", "=", "int", "(", "date", "[", "-", "1", "]", ".", "split", "(", "'-'", ")", "[", "0", "]", ")", "\n", "num_years", "=", "last_year", "-", "first_year", "+", "1", "\n", "maxtemp", "=", "np", ".", "NaN", "*", "np", ".", "ones", "(", "(", "num_years", ",", "12", ",", "31", ")", ")", "\n", "for", "mt", ",", "currdate", "in", "zip", "(", "maxtemp1d", ",", "date", ")", ":", "\n", "        ", "year", ",", "month", ",", "day", "=", "currdate", ".", "split", "(", "'-'", ")", "\n", "maxtemp", "[", "int", "(", "year", ")", "-", "first_year", ",", "int", "(", "month", ")", "-", "1", ",", "int", "(", "day", ")", "-", "1", "]", "=", "mt", "\n", "\n", "# Extract a random training set", "\n", "", "train", "=", "np", ".", "array", "(", "[", "maxtemp", "[", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "num_years", ")", ",", "m", ",", "d", "]", "for", "m", "in", "range", "(", "12", ")", "for", "d", "in", "range", "(", "31", ")", "]", ")", "\n", "\n", "# Compute mean/std estimates for entire dataset (ground truth)", "\n", "mu", "=", "np", ".", "nanmean", "(", "maxtemp", ",", "axis", "=", "0", ")", ".", "flatten", "(", ")", "\n", "s", "=", "np", ".", "nanstd", "(", "maxtemp", ",", "axis", "=", "0", ")", ".", "flatten", "(", ")", "\n", "\n", "# Plot training data and ground truth", "\n", "if", "plot", ":", "\n", "        ", "plt", ".", "plot", "(", "train", ",", "'o'", ")", "\n", "plt", ".", "plot", "(", "mu", ")", "\n", "plt", ".", "plot", "(", "mu", "+", "2.0", "*", "s", ")", "\n", "plt", ".", "plot", "(", "mu", "-", "2.0", "*", "s", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "comp", "=", "np", ".", "array", "(", "[", "np", ".", "arange", "(", "len", "(", "train", ")", ")", ",", "train", ",", "mu", ",", "s", "]", ")", ".", "T", "\n", "comp", "=", "comp", "[", "~", "np", ".", "isnan", "(", "comp", ")", ".", "any", "(", "axis", "=", "1", ")", "]", "\n", "\n", "return", "comp", "[", ":", ",", "0", "]", ",", "comp", "[", ":", ",", "1", "]", ",", "comp", "[", ":", ",", "2", "]", ",", "comp", "[", ":", ",", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.gp": [[89, 103], ["GPy.kern.RBF", "GPy.models.GPRegression", "GPy.models.GPRegression.constrain_positive", "GPy.models.GPRegression.optimize", "GPy.models.GPRegression.predict", "GPy.models.GPRegression.predict", "X.numpy", "y.numpy().reshape", "x.numpy", "X.numpy", "numpy.sqrt().flatten", "numpy.sqrt().flatten", "y.numpy", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "gp", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "if", "X", ".", "shape", "[", "0", "]", ">", "2000", ":", "# do not run gp for large datasets", "\n", "        ", "return", "np", ".", "nan", ",", "np", ".", "nan", "\n", "", "import", "GPy", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "GPy", ".", "kern", ".", "RBF", "(", "d", ",", "ARD", "=", "True", ")", "\n", "model", "=", "GPy", ".", "models", ".", "GPRegression", "(", "X", ".", "numpy", "(", ")", ",", "y", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "kernel", ",", "normalizer", "=", "True", ")", "\n", "\n", "model", ".", "constrain_positive", "(", "' '", ")", "# ensure positive hyperparameters", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "mean", ",", "var", "=", "model", ".", "predict", "(", "x", ".", "numpy", "(", ")", ")", "\n", "_", ",", "Xvar", "=", "model", ".", "predict", "(", "X", ".", "numpy", "(", ")", ")", "\n", "return", "mean", ",", "np", ".", "sqrt", "(", "var", ")", ".", "flatten", "(", ")", ",", "np", ".", "sqrt", "(", "Xvar", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.neuralnet": [[105, 140], ["NNModel", "torch.optim.Adam", "NNModel.eval", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "NNModel.", "NNModel.", "mean.numpy", "var.sqrt().numpy", "Xvar.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.tensor", "print", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus", "toy_weather..mean", "toy_weather..var", "var.sqrt", "Xvar.sqrt", "loss.item", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "neuralnet", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", ",", "self", ".", "var", "(", "x", ")", "\n", "\n", "", "", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "15000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ")", "\n", "v", "=", "torch", ".", "tensor", "(", "[", "10.0", "]", ")", "if", "it", "<", "n_iter", "/", "2", "else", "(", "v", "+", "0.01", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mean", ",", "var", "=", "model", "(", "x", ")", "\n", "_", ",", "Xvar", "=", "model", "(", "X", ")", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", ",", "Xvar", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.dropout": [[142, 179], ["NNModel", "torch.optim.Adam", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.zeros", "range", "torch.zeros", "range", "torch.zeros.var", "mean.numpy", "var.sqrt().numpy", "samples.var.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "toy_weather..mean", "print", "NNModel.flatten", "torch.zeros.mean", "torch.zeros.var", "NNModel.flatten", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Dropout", "var.sqrt", "samples.var.sqrt", "loss.item", "NNModel.", "NNModel.", "model.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "dropout", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.01", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", "\n", "\n", "", "", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "15000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", "=", "model", "(", "X", ")", "\n", "loss", "=", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "samples", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1000", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "            ", "samples", "[", ":", ",", "i", "]", "=", "model", "(", "x", ")", ".", "flatten", "(", ")", "\n", "", "mean", ",", "var", "=", "samples", ".", "mean", "(", "dim", "=", "1", ")", ",", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "1000", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "            ", "samples", "[", ":", ",", "i", "]", "=", "model", "(", "X", ")", ".", "flatten", "(", ")", "\n", "", "Xvar", "=", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", ",", "Xvar", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.ensemble": [[181, 233], ["range", "NNModel", "torch.optim.Adam", "NNModel.eval", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack.mean", "torch.stack", "torch.stack", "ms.mean.numpy", "var.sqrt().numpy", "Xvar.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "NNModel.", "torch.stack.append", "torch.stack.append", "NNModel.", "torch.stack.append", "torch.stack.append", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus", "toy_weather..mean", "toy_weather..var", "torch.tensor", "print", "torch.stack.mean", "var.sqrt", "Xvar.sqrt", "loss.item", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "ensemble", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", ",", "self", ".", "var", "(", "x", ")", "\n", "\n", "", "", "ms", ",", "vs", ",", "xms", ",", "xvs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "15000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ")", "\n", "v", "=", "torch", ".", "tensor", "(", "[", "0.002", "]", ")", "if", "it", "<", "n_iter", "/", "2", "else", "(", "v", "+", "0.01", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mean", ",", "var", "=", "model", "(", "x", ")", "\n", "ms", ".", "append", "(", "mean", ")", "\n", "vs", ".", "append", "(", "var", ")", "\n", "mean", ",", "var", "=", "model", "(", "X", ")", "\n", "xms", ".", "append", "(", "mean", ")", "\n", "xvs", ".", "append", "(", "var", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "ms", "=", "torch", ".", "stack", "(", "ms", ")", "\n", "vs", "=", "torch", ".", "stack", "(", "vs", ")", "\n", "mean", "=", "ms", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var", "=", "(", "vs", "+", "ms", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "mean", "**", "2", "\n", "\n", "xms", "=", "torch", ".", "stack", "(", "xms", ")", "\n", "xvs", "=", "torch", ".", "stack", "(", "xvs", ")", "\n", "Xvar", "=", "(", "xvs", "+", "xms", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "xms", ".", "mean", "(", "dim", "=", "0", ")", "**", "2", "\n", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", ",", "Xvar", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.bnn": [[235, 321], ["X.numpy.numpy", "y.numpy().reshape.numpy().reshape", "x.numpy.numpy", "ed.make_log_joint_fn", "int", "int", "tfp.mcmc.HamiltonianMonteCarlo", "tfp.mcmc.sample_chain", "print", "numpy.array", "np.array.mean", "np.array.std", "numpy.array", "ed.Normal", "ed.Normal", "ed.Normal", "ed.Normal", "tf.nn.leaky_relu", "ed.HalfNormal", "ed.Normal", "ed.make_log_joint_fn.", "tf.Session", "sess.run", "numpy.where", "toy_weather.bnn.leaky_relu"], "function", ["None"], ["", "def", "bnn", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "import", "tensorflow", "as", "tf", "\n", "import", "tensorflow_probability", "as", "tfp", "\n", "from", "tensorflow_probability", "import", "edward2", "as", "ed", "\n", "X", "=", "X", ".", "numpy", "(", ")", "\n", "y", "=", "y", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "def", "Net", "(", "features", ")", ":", "\n", "        ", "W0", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "[", "1", ",", "n_neurons", "]", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "[", "1", ",", "n_neurons", "]", ")", ",", "name", "=", "'W0'", ")", "\n", "b0", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "n_neurons", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "n_neurons", ")", ",", "name", "=", "'b0'", ")", "\n", "W1", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "[", "n_neurons", ",", "1", "]", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "[", "n_neurons", ",", "1", "]", ")", ",", "name", "=", "'W1'", ")", "\n", "b1", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "1", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "1", ")", ",", "name", "=", "'b1'", ")", "\n", "\n", "h", "=", "tf", ".", "nn", ".", "leaky_relu", "(", "tf", ".", "matmul", "(", "features", ",", "W0", ")", "+", "b0", ",", "alpha", "=", "0.01", ")", "\n", "mean", "=", "tf", ".", "matmul", "(", "h", ",", "W1", ")", "+", "b1", "\n", "\n", "noise_std", "=", "ed", ".", "HalfNormal", "(", "scale", "=", "1", "*", "tf", ".", "ones", "(", "[", "1", "]", ")", ",", "name", "=", "\"noise_std\"", ")", "\n", "\n", "return", "ed", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "noise_std", ",", "name", "=", "'predictions'", ")", "\n", "\n", "", "log_joint", "=", "ed", ".", "make_log_joint_fn", "(", "Net", ")", "\n", "\n", "def", "target_log_prob_fn", "(", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", ")", ":", "\n", "        ", "return", "log_joint", "(", "features", "=", "X", ",", "\n", "W0", "=", "W0", ",", "b0", "=", "b0", ",", "W1", "=", "W1", ",", "b1", "=", "b1", ",", "\n", "noise_std", "=", "noise_std", ",", "\n", "predictions", "=", "y", ")", "\n", "\n", "", "num_results", "=", "int", "(", "10e3", ")", "#number of hmc iterations", "\n", "n_burnin", "=", "int", "(", "5e3", ")", "#number of burn-in steps", "\n", "step_size", "=", "0.0001", "\n", "num_leapfrog_steps", "=", "10", "\n", "\n", "kernel", "=", "tfp", ".", "mcmc", ".", "HamiltonianMonteCarlo", "(", "\n", "target_log_prob_fn", "=", "target_log_prob_fn", ",", "\n", "step_size", "=", "step_size", ",", "\n", "num_leapfrog_steps", "=", "num_leapfrog_steps", ")", "\n", "\n", "states", ",", "kernel_results", "=", "tfp", ".", "mcmc", ".", "sample_chain", "(", "\n", "num_results", "=", "num_results", ",", "\n", "num_burnin_steps", "=", "n_burnin", ",", "\n", "kernel", "=", "kernel", ",", "\n", "current_state", "=", "[", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "n_neurons", "]", ",", "name", "=", "'init_W0'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "n_neurons", "]", ",", "name", "=", "'init_b0'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "n_neurons", ",", "1", "]", ",", "name", "=", "'init_W1'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "1", "]", ",", "name", "=", "'init_b1'", ")", ",", "\n", "tf", ".", "ones", "(", "[", "1", "]", ",", "name", "=", "'init_noise_std'", ")", ",", "\n", "]", "\n", ")", "\n", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", "=", "states", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "[", "W0_", ",", "b0_", ",", "W1_", ",", "b1_", ",", "noise_std_", ",", "accepted_", "]", "=", "sess", ".", "run", "(", "\n", "[", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", ",", "kernel_results", ".", "is_accepted", "]", ")", "\n", "\n", "", "W0_samples", "=", "W0_", "[", "n_burnin", ":", "]", "\n", "b0_samples", "=", "b0_", "[", "n_burnin", ":", "]", "\n", "W1_samples", "=", "W1_", "[", "n_burnin", ":", "]", "\n", "b1_samples", "=", "b1_", "[", "n_burnin", ":", "]", "\n", "noise_std_samples", "=", "noise_std_", "[", "n_burnin", ":", "]", "\n", "accepted_samples", "=", "accepted_", "[", "n_burnin", ":", "]", "\n", "\n", "print", "(", "'Acceptance rate: %0.1f%%'", "%", "(", "100", "*", "np", ".", "mean", "(", "accepted_samples", ")", ")", ")", "\n", "\n", "#from scipy.special import expit as sigmoid", "\n", "def", "leaky_relu", "(", "x", ",", "alpha", "=", "0.01", ")", ":", "\n", "        ", "return", "np", ".", "where", "(", "x", ">", "0", ",", "x", ",", "alpha", "*", "x", ")", "\n", "\n", "", "def", "NpNet", "(", "features", ",", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise", ")", ":", "\n", "        ", "h", "=", "leaky_relu", "(", "np", ".", "matmul", "(", "features", ",", "W0", ")", "+", "b0", ")", "\n", "return", "np", ".", "matmul", "(", "h", ",", "W1", ")", "+", "b1", "+", "noise", "*", "np", ".", "random", ".", "randn", "(", ")", "\n", "\n", "", "out", "=", "[", "NpNet", "(", "x", ",", "W0_samples", "[", "i", "]", ",", "b0_samples", "[", "i", "]", ",", "W1_samples", "[", "i", "]", ",", "\n", "b1_samples", "[", "i", "]", ",", "noise_std_samples", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "W0_samples", ")", ")", "]", "\n", "\n", "out", "=", "np", ".", "array", "(", "out", ")", "\n", "y_pred", "=", "out", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "out", ".", "std", "(", "axis", "=", "0", ")", "\n", "\n", "out", "=", "[", "NpNet", "(", "X", ",", "W0_samples", "[", "i", "]", ",", "b0_samples", "[", "i", "]", ",", "W1_samples", "[", "i", "]", ",", "\n", "b1_samples", "[", "i", "]", ",", "noise_std_samples", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "W0_samples", ")", ")", "]", "\n", "out", "=", "np", ".", "array", "(", "out", ")", "\n", "\n", "return", "y_pred", ",", "sigma", ",", "out", ".", "std", "(", "axis", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.john": [[323, 454], ["KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler.get_pseupoch", "locality_sampler.get_pseupoch", "torch.Tensor", "torch.Tensor", "GPNNModel.train", "GPNNModel.eval", "print", "numpy.concatenate", "GPNNModel.mean.parameters", "chain", "GPNNModel.train", "torch.no_grad", "GPNNModel.", "GPNNModel.", "list", "toy_weather..numpy", "torch.tensor.mean().sqrt().numpy", "Xvar.mean().sqrt().numpy", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "toy_weather..trans", "toy_weather..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.sum.backward", "torch.optim.Adam.step", "GPNNModel.eval", "GPNNModel.", "print", "GPNNModel.trans.parameters", "torch.tensor", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "torch.distributions.Gamma", "torch.tensor", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.tensor.mean().sqrt", "Xvar.mean().sqrt", "toy_weather..alph", "toy_weather..bet", "D.Gamma.rsample", "D.Gamma.rsample", "mean_w[].reshape", "var_w[].reshape", "loss.sum.item", "torch.Size", "torch.Size", "torch.tensor.mean", "Xvar.mean", "torch.ones_like", "v.log", "v.log", "v.log", "v.log", "m.flatten", "m.flatten", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2"], ["", "def", "john", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "itertools", "import", "chain", "\n", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "50", "\n", "mean_M", "=", "60", "\n", "\n", "var_psu", "=", "3", "\n", "var_ssu", "=", "7", "\n", "var_M", "=", "10", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "20", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "class", "translatedSigmoid", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "110.0", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "*", "2", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "/", "2", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-4", ",", "b", "+", "1e-4", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "50", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-4", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "2000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-4", ")", ")", "\n", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "(", "(", "20.0", "**", "2", ")", "*", "torch", ".", "ones_like", "(", "x_var", ")", ")", "# HYPERPARAMETER", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "15.0", "]", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "n_iter", "=", "40000", "\n", "it", "=", "0", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "X", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "X", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "mean_pseupoch", "=", "get_pseupoch", "(", "mean_w", ",", "0.5", ")", "\n", "var_pseupoch", "=", "get_pseupoch", "(", "var_w", ",", "0.5", ")", "\n", "opt_switch", "=", "1", "\n", "mean_w", "=", "torch", ".", "Tensor", "(", "mean_w", ")", "\n", "var_w", "=", "torch", ".", "Tensor", "(", "var_w", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "while", "it", "<", "n_iter", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "switch", "=", "1.0", "if", "it", ">", "10000", "else", "0.0", "\n", "\n", "#if it % 11: opt_switch = opt_switch + 1 # change between var and mean optimizer", "\n", "\n", "if", "not", "switch", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", ";", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "#for b in range(mean_pseupoch):", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", "[", "batch", "]", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", "/", "mean_w", "[", "batch", "]", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "#for b in range(var_pseupoch):", "\n", "                ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", "[", "batch", "]", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", "/", "var_w", "[", "batch", "]", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "", "if", "it", "%", "500", "==", "0", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "\n", "\n", "#        if it % 1000 == 0:", "\n", "#            plot(X, y, X, m.detach().numpy(), v.detach().mean(dim=0).sqrt().numpy(), str(it), save=False)", "\n", "\n", "", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mean", ",", "var", "=", "model", "(", "x", ",", "switch", ")", "\n", "_", ",", "Xvar", "=", "model", "(", "X", ",", "switch", ")", "\n", "", "print", "(", "list", "(", "model", ".", "trans", ".", "parameters", "(", ")", ")", ")", "\n", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "mean", "(", "dim", "=", "0", ")", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", ",", "Xvar", ".", "mean", "(", "dim", "=", "0", ")", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.plot2": [[456, 471], ["X.numpy.numpy", "y.numpy.numpy", "x.numpy.numpy", "matplotlib.pyplot.figure", "zip", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "matplotlib.pyplot.plot", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "str", "str"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "def", "plot2", "(", "X", ",", "y", ",", "x", ",", "sigma", ",", "labels", ",", "save", "=", "False", ")", ":", "\n", "    ", "X", "=", "X", ".", "numpy", "(", ")", ";", "y", "=", "y", ".", "numpy", "(", ")", ";", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "\n", "for", "s", ",", "l", "in", "zip", "(", "sigma", ",", "labels", ")", ":", "\n", "        ", "plt", ".", "plot", "(", "x", ",", "s", ",", "'-'", ",", "label", "=", "l", "+", "' std'", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'$x$'", ")", "\n", "plt", ".", "ylabel", "(", "'std(x)'", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ",", "fontsize", "=", "15", ")", "\n", "\n", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "'figs/weather_variance_'", "+", "str", "(", "n_neurons", ")", "+", "'.pdf'", ",", "format", "=", "'pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "'figs/weather_variance_'", "+", "str", "(", "n_neurons", ")", "+", "'.png'", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.plot3": [[473, 489], ["X.numpy.numpy", "y.numpy.numpy", "x.numpy.numpy", "matplotlib.pyplot.figure", "zip", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.legend", "abs().mean", "matplotlib.pyplot.plot", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "abs", "abs", "s.flatten", "str", "str", "str", "s.flatten", "abs().mean.round"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "", "def", "plot3", "(", "X", ",", "y", ",", "x", ",", "sigma", ",", "sigma_true", ",", "labels", ",", "save", "=", "False", ")", ":", "\n", "    ", "X", "=", "X", ".", "numpy", "(", ")", ";", "y", "=", "y", ".", "numpy", "(", ")", ";", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "\n", "for", "s", ",", "l", "in", "zip", "(", "sigma", ",", "labels", ")", ":", "\n", "        ", "diff", "=", "abs", "(", "sigma_true", "-", "s", ".", "flatten", "(", ")", ")", ".", "mean", "(", ")", "\n", "plt", ".", "plot", "(", "X", ",", "abs", "(", "sigma_true", "-", "s", ".", "flatten", "(", ")", ")", ",", "'-'", ",", "label", "=", "l", "+", "':'", "+", "str", "(", "diff", ".", "round", "(", "2", ")", ")", ")", "\n", "\n", "", "plt", ".", "xlabel", "(", "'$x$'", ")", "\n", "plt", ".", "ylabel", "(", "'$| \\sigma^* - \\hat{\\sigma}| $'", ",", "fontsize", "=", "15", ")", "\n", "plt", ".", "legend", "(", "loc", "=", "'best'", ",", "fontsize", "=", "15", ")", "\n", "\n", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "'figs/weather_variance_diff_'", "+", "str", "(", "n_neurons", ")", "+", "'.pdf'", ",", "format", "=", "'pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "'figs/weather_variance_diff_'", "+", "str", "(", "n_neurons", ")", "+", "'.png'", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_weather.plot": [[491, 519], ["X.numpy.numpy", "y.numpy.numpy", "x.numpy.numpy", "matplotlib.pyplot.subplots", "fig.canvas.set_window_title", "ax.plot", "ax.plot", "ax.fill", "ax.plot", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "matplotlib.pyplot.title", "ax.axis", "numpy.concatenate", "numpy.concatenate", "ax.get_yticklabels", "item.set_fontsize", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "numpy.mean().round", "ax.get_xticklabels", "numpy.mean", "str", "str", "numpy.abs", "xvar.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "", "def", "plot", "(", "X", ",", "y", ",", "x", ",", "y_pred", ",", "sigma", ",", "xvar", ",", "mu_true", ",", "sigma_true", ",", "label", ",", "save", "=", "False", ")", ":", "\n", "    ", "X", "=", "X", ".", "numpy", "(", ")", ";", "y", "=", "y", ".", "numpy", "(", ")", ";", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "fig", ".", "canvas", ".", "set_window_title", "(", "label", ")", "\n", "ax", ".", "plot", "(", "X", ",", "y", ",", "'k.'", ",", "markersize", "=", "5", ",", "label", "=", "'Observations'", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y_pred", ",", "'-'", ",", "label", "=", "label", "+", "' prediction'", ",", "lw", "=", "3", ")", "\n", "\n", "ax", ".", "fill", "(", "np", ".", "concatenate", "(", "[", "x", ",", "x", "[", ":", ":", "-", "1", "]", "]", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "y_pred", "-", "1.96", "*", "sigma", ",", "\n", "(", "y_pred", "+", "1.96", "*", "sigma", ")", "[", ":", ":", "-", "1", "]", "]", ")", ",", "\n", "alpha", "=", ".2", ",", "ec", "=", "'None'", ",", "label", "=", "label", "+", "': 95% confidence interval'", ",", "c", "=", "'#B8C4DC'", ")", "\n", "\n", "ax", ".", "plot", "(", "X", ",", "mu", "-", "1.96", "*", "sigma_true", ",", "color", "=", "'g'", ",", "lw", "=", "2", ")", "\n", "ax", ".", "plot", "(", "X", ",", "mu", "+", "1.96", "*", "sigma_true", ",", "color", "=", "'g'", ",", "lw", "=", "2", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'$x$'", ")", "\n", "ax", ".", "set_ylabel", "(", "'$y$'", ")", "\n", "plt", ".", "title", "(", "'Err={0}'", ".", "format", "(", "np", ".", "mean", "(", "np", ".", "abs", "(", "sigma_true", "-", "xvar", ".", "flatten", "(", ")", ")", ")", ".", "round", "(", "2", ")", ")", ",", "fontsize", "=", "40", ")", "\n", "ax", ".", "axis", "(", "[", "0", ",", "365", ",", "0", ",", "110", "]", ")", "\n", "\n", "for", "item", "in", "(", "[", "ax", ".", "xaxis", ".", "label", ",", "ax", ".", "yaxis", ".", "label", "]", "+", "\n", "ax", ".", "get_xticklabels", "(", ")", "+", "ax", ".", "get_yticklabels", "(", ")", ")", ":", "\n", "        ", "item", ".", "set_fontsize", "(", "15", ")", "\n", "\n", "", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "'figs/weather_test_'", "+", "label", "+", "'_'", "+", "str", "(", "n_neurons", ")", "+", "'.pdf'", ",", "format", "=", "'pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "'figs/weather_test_'", "+", "label", "+", "'_'", "+", "str", "(", "n_neurons", ")", "+", "'.png'", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.argparser": [[21, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "gs", "=", "parser", ".", "add_argument_group", "(", "'General settings'", ")", "\n", "gs", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'john'", ",", "help", "=", "'model to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'boston'", ",", "help", "=", "'dataset to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random state of data-split'", ")", "\n", "gs", ".", "add_argument", "(", "'--repeats'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of repeatitions'", ")", "\n", "gs", ".", "add_argument", "(", "'--silent'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'suppress warnings'", ")", "\n", "gs", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use cuda'", ")", "\n", "gs", ".", "add_argument", "(", "'--sample_size'", ",", "type", "=", "float", ",", "default", "=", "0.01", ",", "help", "=", "'fraction of pool to add after each iteration'", ")", "\n", "gs", ".", "add_argument", "(", "'--al_iters'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'number of AL iterations'", ")", "\n", "\n", "ms", "=", "parser", ".", "add_argument_group", "(", "'Model specific settings'", ")", "\n", "ms", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'batch size'", ")", "\n", "ms", ".", "add_argument", "(", "'--shuffel'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'shuffel data during training'", ")", "\n", "ms", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'learning rate'", ")", "\n", "ms", ".", "add_argument", "(", "'--iters'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "help", "=", "'number of iterations'", ")", "\n", "ms", ".", "add_argument", "(", "'--mcmc'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of mcmc samples'", ")", "\n", "ms", ".", "add_argument", "(", "'--inducing'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of inducing points'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of cluster centers'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_models'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of ensemble'", ")", "\n", "\n", "# Parse and return", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.gp": [[49, 71], ["GPy.kern.RBF", "GPy.models.GPRegression", "GPy.models.GPRegression.constrain_positive", "GPy.models.GPRegression.optimize", "GPy.models.GPRegression.predict", "GPy.models.GPRegression.predict", "y_pred.flatten.flatten", "math.sqrt", "y.reshape", "numpy.diag", "m.flatten", "v.flatten", "numpy.ones", "math.log", "numpy.linalg.slogdet", "numpy.linalg.inv().dot", "numpy.linalg.inv"], "function", ["None"], ["", "def", "gp", "(", "args", ",", "X", ",", "y", ",", "Xpool", ",", "ypool", ",", "Xtest", ",", "ytest", ")", ":", "\n", "    ", "if", "X", ".", "shape", "[", "0", "]", ">", "2000", ":", "# do not run gp for large datasets", "\n", "        ", "return", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", ",", "np", ".", "nan", "\n", "", "import", "GPy", "\n", "d", "=", "X", ".", "shape", "[", "1", "]", "\n", "kernel", "=", "GPy", ".", "kern", ".", "RBF", "(", "d", ",", "ARD", "=", "True", ")", "\n", "model", "=", "GPy", ".", "models", ".", "GPRegression", "(", "X", ",", "y", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "kernel", ",", "normalizer", "=", "True", ")", "\n", "\n", "model", ".", "constrain_positive", "(", "' '", ")", "# ensure positive hyperparameters", "\n", "model", ".", "optimize", "(", ")", "\n", "\n", "m", ",", "v", "=", "model", ".", "predict", "(", "Xpool", ")", "\n", "\n", "y_pred", ",", "cov", "=", "model", ".", "predict", "(", "Xtest", ",", "full_cov", "=", "True", ")", "\n", "cov", "+=", "1e-4", "*", "np", ".", "diag", "(", "np", ".", "ones", "(", "cov", ".", "shape", "[", "0", "]", ")", ")", "\n", "y_pred", "=", "y_pred", ".", "flatten", "(", ")", "\n", "log_px", "=", "-", "1", "/", "2", "*", "(", "np", ".", "linalg", ".", "slogdet", "(", "cov", ")", "[", "1", "]", "+", "(", "ytest", "-", "y_pred", ")", ".", "T", ".", "dot", "(", "np", ".", "linalg", ".", "inv", "(", "cov", ")", ".", "dot", "(", "ytest", "-", "y_pred", ")", ")", "+", "d", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", ")", "/", "Xtest", ".", "shape", "[", "0", "]", "\n", "\n", "rmse", "=", "math", ".", "sqrt", "(", "(", "(", "ytest", "-", "y_pred", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "return", "log_px", ",", "rmse", ",", "m", ".", "flatten", "(", ")", ",", "v", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.nn": [[73, 134], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.no_grad", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "utils.normal_log_prob.mean().item", "test_rmse.item", "pool_m.cpu().flatten().numpy", "pool_v.cpu().flatten().numpy", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "utils.normal_log_prob.mean", "pool_m.cpu().flatten", "pool_v.cpu().flatten", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pool_m.cpu", "pool_v.cpu", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "nn", "(", "args", ",", "X", ",", "y", ",", "Xpool", ",", "ypool", ",", "Xtest", ",", "ytest", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "data", "=", "torch", ".", "tensor", "(", "Xpool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ypool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "pool_m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "pool_v", "=", "v", "*", "y_std", "**", "2", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xtest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ytest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "test_log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "test_rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "\n", "", "return", "test_log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_rmse", ".", "item", "(", ")", ",", "pool_m", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ",", "pool_v", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.mcdnn": [[136, 200], ["torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Dropout", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "torch.nn.Sequential.parameters", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.nn.Sequential.", "loss.backward", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.no_grad", "torch.tensor().to().to", "torch.tensor().to().to", "torch.zeros().to", "range", "torch.tensor().to().to", "torch.tensor().to().to", "torch.zeros().to", "range", "utils.normal_log_prob", "utils.normal_log_prob.mean().item", "test_rmse.item", "pool_m.cpu().flatten().numpy", "pool_v.cpu().flatten().numpy", "torch.nn.Sequential.flatten", "torch.zeros().to.mean", "torch.zeros().to.var", "torch.nn.Sequential.flatten", "torch.zeros().to.mean", "torch.zeros().to.var", "torch.tensor().to", "torch.tensor().to", "loss.item", "torch.tensor().to", "torch.tensor().to", "torch.zeros", "torch.tensor().to", "torch.tensor().to", "torch.zeros", "utils.normal_log_prob.mean", "pool_m.cpu().flatten", "pool_v.cpu().flatten", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pool_m.cpu", "pool_v.cpu", "mean.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "mcdnn", "(", "args", ",", "X", ",", "y", ",", "Xpool", ",", "ypool", ",", "Xtest", ",", "ytest", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "#    y, y_mean, y_std = normalize_y(y)", "\n", "\n", "", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Dropout", "(", "p", "=", "0.1", ")", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", "=", "mean", "(", "data", ")", "\n", "loss", "=", "(", "m", "-", "label", ")", ".", "abs", "(", ")", ".", "pow", "(", "2.0", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "data", "=", "torch", ".", "tensor", "(", "Xpool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ypool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "Xpool", ".", "shape", "[", "0", "]", ",", "args", ".", "mcmc", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mcmc", ")", ":", "\n", "            ", "samples", "[", ":", ",", "i", "]", "=", "mean", "(", "data", ")", ".", "flatten", "(", ")", "\n", "", "pool_m", ",", "pool_v", "=", "samples", ".", "mean", "(", "dim", "=", "1", ")", ",", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "#        pool_m = m * y_std + y_mean", "\n", "#        pool_v = v * y_std**2", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xpool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ypool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "samples", "=", "torch", ".", "zeros", "(", "Xpool", ".", "shape", "[", "0", "]", ",", "args", ".", "mcmc", ")", ".", "to", "(", "device", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "mcmc", ")", ":", "\n", "            ", "samples", "[", ":", ",", "i", "]", "=", "mean", "(", "data", ")", ".", "flatten", "(", ")", "\n", "", "m", ",", "v", "=", "samples", ".", "mean", "(", "dim", "=", "1", ")", ",", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "#m = m * y_std + y_mean", "\n", "#v = v * y_std**2", "\n", "\n", "test_log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "test_rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "", "return", "test_log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_rmse", ".", "item", "(", ")", ",", "pool_m", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ",", "pool_v", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.ensnn": [[202, 280], ["utils.normalize_y", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack.mean", "torch.stack.mean", "utils.normal_log_prob", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "utils.normal_log_prob.mean().item", "test_rmse.item", "ms_pool.mean.cpu().flatten().numpy", "pool_v.cpu().flatten().numpy", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.no_grad", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean", "ms_pool.mean.cpu().flatten", "pool_v.cpu().flatten", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "ms_pool.mean.cpu", "pool_v.cpu", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ms.mean.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "ensnn", "(", "args", ",", "X", ",", "y", ",", "Xpool", ",", "ypool", ",", "Xtest", ",", "ytest", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "ms_pool", ",", "vs_pool", ",", "ms", ",", "vs", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "m", "in", "range", "(", "args", ".", "n_models", ")", ":", "# initialize differently", "\n", "        ", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "            ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "            ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "data", "=", "torch", ".", "tensor", "(", "Xpool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ypool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "pool_m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "pool_v", "=", "v", "*", "y_std", "**", "2", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xtest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ytest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "\n", "", "ms_pool", ".", "append", "(", "pool_m", ")", "\n", "vs_pool", ".", "append", "(", "pool_v", ")", "\n", "ms", ".", "append", "(", "m", ")", "\n", "vs", ".", "append", "(", "v", ")", "\n", "\n", "", "ms_pool", "=", "torch", ".", "stack", "(", "ms_pool", ")", "\n", "vs_pool", "=", "torch", ".", "stack", "(", "vs_pool", ")", "\n", "ms", "=", "torch", ".", "stack", "(", "ms", ")", "\n", "vs", "=", "torch", ".", "stack", "(", "vs", ")", "\n", "\n", "pool_m", "=", "ms_pool", ".", "mean", "(", "dim", "=", "0", ")", "\n", "pool_v", "=", "(", "vs_pool", "+", "ms_pool", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "pool_m", "**", "2", "\n", "\n", "m", "=", "ms", ".", "mean", "(", "dim", "=", "0", ")", "\n", "v", "=", "(", "vs", "+", "ms", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "m", "**", "2", "\n", "test_log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "test_rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "test_log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_rmse", ".", "item", "(", ")", ",", "pool_m", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ",", "pool_v", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_active_learning.john": [[282, 449], ["min", "utils.normalize_y", "KMeans", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "gen_Qw", "gen_Qw", "torch.Tensor().to", "torch.Tensor().to", "GPNNModel.train", "torch.tensor().to().to", "torch.tensor().to().to", "utils.batchify", "GPNNModel.eval", "KMeans.fit", "KMeans.fit", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.mean.parameters", "itertools.chain", "next", "torch.no_grad", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "utils.t_likelihood", "utils.t_likelihood.mean().item", "test_rmse.item", "pool_m.cpu().flatten().numpy", "pool_v.cpu().flatten().numpy", "numpy.concatenate", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_active_learning..trans", "experiment_active_learning..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.Tensor", "torch.Tensor", "torch.tensor().to", "torch.tensor().to", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "GPNNModel.", "print", "torch.tensor().to().to.reshape", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_active_learning..alph", "experiment_active_learning..bet", "D.Gamma", "torch.tensor", "torch.optim.Adam.zero_grad", "locality_sampler2", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "locality_sampler2", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "utils.t_likelihood.mean", "pool_m.cpu().flatten", "pool_v.cpu().flatten", "numpy.random.randint", "D.Gamma.rsample", "D.Gamma.rsample", "torch.tensor", "torch.tensor", "loss.item", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "utils.t_likelihood", "utils.t_likelihood", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "pool_m.cpu", "pool_v.cpu", "y[].reshape", "y[].reshape", "v.flatten().log", "m.flatten", "v.flatten", "v.log", "v.flatten", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood"], ["", "def", "john", "(", "args", ",", "X", ",", "y", ",", "Xpool", ",", "ypool", ",", "Xtest", ",", "ytest", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "itertools", "import", "chain", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "from", "locality_sampler", "import", "gen_Qw", ",", "locality_sampler2", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "50", "\n", "mean_M", "=", "60", "\n", "\n", "var_psu", "=", "2", "\n", "var_ssu", "=", "10", "\n", "var_M", "=", "15", "\n", "\n", "num_draws_train", "=", "20", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "if", "args", ".", "dataset", "!=", "'year_prediction'", ":", "\n", "        ", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "", "else", ":", "\n", "        ", "kmeans", ".", "fit", "(", "X", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ",", "size", "=", "(", "10000", ")", ")", "]", ")", "\n", "", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "num_draws_train", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "y_std", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "X", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "X", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "#mean_pseupoch = get_pseupoch(mean_w,0.5)", "\n", "#var_pseupoch = get_pseupoch(var_w,0.5)", "\n", "opt_switch", "=", "1", "\n", "mean_w", "=", "torch", ".", "Tensor", "(", "mean_w", ")", ".", "to", "(", "device", ")", "\n", "var_w", "=", "torch", ".", "Tensor", "(", "var_w", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "X", "=", "torch", ".", "tensor", "(", "X", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "y", "=", "torch", ".", "tensor", "(", "y", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "it", "=", "0", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2.0", "else", "0.0", "\n", "\n", "if", "it", "%", "11", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "if", "not", "switch", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", ";", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "flatten", "(", ")", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ".", "flatten", "(", ")", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "#for b in range(mean_pseupoch):", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "mean_w", "[", "batch", "]", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "#for b in range(var_pseupoch):", "\n", "                ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "var_w", "[", "batch", "]", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "", "if", "it", "%", "500", "==", "0", ":", "\n", "            ", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "args", ".", "iters", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "data", "=", "torch", ".", "tensor", "(", "Xpool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ypool", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "pool_m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "pool_v", "=", "(", "v", "*", "y_std", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xtest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "ytest", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "test_log_px", "=", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ")", "\n", "test_rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "\n", "", "return", "test_log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "test_rmse", ".", "item", "(", ")", ",", "pool_m", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", ",", "pool_v", ".", "cpu", "(", ")", ".", "flatten", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.argparser": [[21, 47], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "gs", "=", "parser", ".", "add_argument_group", "(", "'General settings'", ")", "\n", "gs", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'gp'", ",", "help", "=", "'model to use'", ",", "\n", "choices", "=", "[", "'nn'", ",", "'nnls'", ",", "'nnmv'", ",", "'nnlsmv'", ",", "'jn'", ",", "'jnls'", ",", "'jnmv'", ",", "'jnlsmv'", "]", ")", "\n", "gs", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'boston'", ",", "help", "=", "'dataset to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'random state of data-split'", ")", "\n", "gs", ".", "add_argument", "(", "'--test_size'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "help", "=", "'test set size, as a procentage'", ")", "\n", "gs", ".", "add_argument", "(", "'--repeats'", ",", "type", "=", "int", ",", "default", "=", "20", ",", "help", "=", "'number of repeatitions'", ")", "\n", "gs", ".", "add_argument", "(", "'--silent'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'suppress warnings'", ")", "\n", "gs", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "False", ",", "help", "=", "'use cuda'", ")", "\n", "\n", "ms", "=", "parser", ".", "add_argument_group", "(", "'Model specific settings'", ")", "\n", "ms", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'batch size'", ")", "\n", "ms", ".", "add_argument", "(", "'--shuffel'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'shuffel data during training'", ")", "\n", "ms", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'learning rate'", ")", "\n", "ms", ".", "add_argument", "(", "'--iters'", ",", "type", "=", "int", ",", "default", "=", "10000", ",", "help", "=", "'number of iterations'", ")", "\n", "ms", ".", "add_argument", "(", "'--mcmc'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of mcmc samples'", ")", "\n", "ms", ".", "add_argument", "(", "'--inducing'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of inducing points'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_clusters'", ",", "type", "=", "int", ",", "default", "=", "500", ",", "help", "=", "'number of cluster centers'", ")", "\n", "ms", ".", "add_argument", "(", "'--n_models'", ",", "type", "=", "int", ",", "default", "=", "5", ",", "help", "=", "'number of ensemble'", ")", "\n", "\n", "# Parse and return", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.local_batchify": [[49, 65], ["gen_Qw", "gen_Qw", "locality_sampler2().astype", "locality_sampler2"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2"], ["", "def", "local_batchify", "(", "*", "arrays", ",", "**", "kwargs", ")", ":", "\n", "    ", "from", "locality_sampler", "import", "gen_Qw", ",", "locality_sampler", ",", "locality_sampler2", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "100", "\n", "mean_M", "=", "150", "\n", "\n", "var_psu", "=", "3", "\n", "var_ssu", "=", "7", "\n", "var_M", "=", "15", "\n", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "arrays", "=", "(", "*", "arrays", ",", "mean_w", ",", "var_w", ")", "\n", "while", "True", ":", "\n", "        ", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yield", "[", "a", "[", "batch", "]", "for", "a", "in", "arrays", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.nn": [[67, 117], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "", "def", "nn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.nnls": [[119, 169], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "tqdm.tqdm", "experiment_contrib.local_batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "itertools.chain", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob().sum", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "utils.normal_log_prob", "normal_log_prob().sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "nnls", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "local_batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", ",", "_", ",", "_", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", ".", "sum", "(", ")", "\n", "(", "-", "loss", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.nnmv": [[171, 236], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "next", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.optim.Adam.zero_grad", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "loss.sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "v.log", "v.log", "m.flatten", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "nnmv", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "var", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "it", "=", "0", ";", "opt_switch", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "if", "it", "%", "11", "==", "0", "and", "switch", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.nnlsmv": [[238, 305], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm", "experiment_contrib.local_batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "utils.normal_log_prob", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.", "torch.nn.Sequential.", "utils.normal_log_prob.mean().item", "rmse.item", "torch.optim.Adam.zero_grad", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.nn.Sequential.", "loss.sum.item", "utils.normal_log_prob.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "v.log", "v.log", "m.flatten", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob"], ["", "def", "nnlsmv", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "\n", "", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "var", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "it", "=", "0", ";", "opt_switch", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "local_batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "if", "it", "%", "11", "==", "0", "and", "switch", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "data", ",", "label", ",", "mean_w", ",", "var_w", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "/", "mean_w", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "/", "var_w", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.jn": [[307, 411], ["min", "utils.normalize_y", "KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "utils.normal_log_prob_w_prior", "numpy.concatenate", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.parameters", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "utils.normal_log_prob_w_prior.mean().item", "rmse.item", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_contrib..trans", "experiment_contrib..mean", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_contrib..alph", "experiment_contrib..bet", "D.Gamma", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "loss.item", "utils.normal_log_prob_w_prior.mean", "D.Gamma.rsample", "D.Gamma.rsample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "torch.tensor", "torch.tensor", "m.flatten", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob_w_prior", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist"], ["", "def", "jn", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "20", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "(", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob_w_prior", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.jnls": [[413, 518], ["min", "utils.normalize_y", "KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "tqdm.tqdm", "experiment_contrib.local_batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "utils.normal_log_prob_w_prior", "numpy.concatenate", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.parameters", "torch.optim.Adam.zero_grad", "next", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "m.reshape.reshape", "loss.backward", "torch.optim.Adam.step", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "utils.normal_log_prob_w_prior.mean().item", "rmse.item", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_contrib..trans", "experiment_contrib..mean", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_contrib..alph", "experiment_contrib..bet", "D.Gamma", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "loss.item", "utils.normal_log_prob_w_prior.mean", "D.Gamma.rsample", "D.Gamma.rsample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "torch.tensor", "torch.tensor", "m.reshape.flatten", "v.log", "m.reshape.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob_w_prior", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist"], ["", "def", "jnls", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "20", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "it", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "local_batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "data", ",", "label", ",", "_", ",", "_", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "v", "=", "switch", "*", "v", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "device", ")", "\n", "loss", "=", "(", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob_w_prior", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.jnmv": [[520, 641], ["min", "utils.normalize_y", "KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm", "utils.batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "utils.normal_log_prob_w_prior", "numpy.concatenate", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.mean.parameters", "itertools.chain", "next", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "utils.normal_log_prob_w_prior.mean().item", "rmse.item", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_contrib..trans", "experiment_contrib..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_contrib..alph", "experiment_contrib..bet", "D.Gamma", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "loss.sum.item", "utils.normal_log_prob_w_prior.mean", "D.Gamma.rsample", "D.Gamma.rsample", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "torch.tensor", "torch.tensor", "v.log", "v.log", "m.flatten", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob_w_prior", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist"], ["", "def", "jnmv", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "20", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "it", "=", "0", ";", "opt_switch", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "if", "it", "%", "11", "==", "0", "and", "switch", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "/", "2", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "normal_log_prob_w_prior", "(", "label", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_contrib.jnlsmv": [[643, 768], ["min", "utils.normalize_y", "KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "tqdm.tqdm", "experiment_contrib.local_batchify", "tqdm.tqdm.close", "torch.tensor().to().to", "torch.tensor().to().to", "GPNNModel.", "utils.t_likelihood", "numpy.concatenate", "torch.cuda.is_available", "torch.tensor().to().to", "torch.tensor().to", "torch.cuda.is_available", "GPNNModel.cuda", "torch.device", "torch.device", "GPNNModel.mean.parameters", "itertools.chain", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.tensor().to().to.reshape", "utils.t_likelihood.mean().item", "rmse.item", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "experiment_contrib..trans", "experiment_contrib..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.backward", "torch.optim.Adam.step", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "experiment_contrib..alph", "experiment_contrib..bet", "D.Gamma", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "loss.item", "utils.t_likelihood.mean", "D.Gamma.rsample", "D.Gamma.rsample", "utils.t_likelihood", "utils.t_likelihood", "torch.tensor", "torch.tensor", "torch.tensor", "torch.Size", "torch.Size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor().to().to.reshape", "torch.tensor().to().to.reshape", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood"], ["", "def", "jnlsmv", "(", "args", ",", "X", ",", "y", ",", "Xval", ",", "yval", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "torch", "import", "distributions", "as", "D", "\n", "\n", "if", "args", ".", "dataset", "==", "'protein'", "or", "args", ".", "dataset", "==", "'year_prediction'", ":", "\n", "        ", "n_neurons", "=", "100", "\n", "", "else", ":", "\n", "        ", "n_neurons", "=", "50", "\n", "", "args", ".", "n_clusters", "=", "min", "(", "args", ".", "n_clusters", ",", "X", ".", "shape", "[", "0", "]", ")", "\n", "\n", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "args", ".", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "c", "=", "torch", ".", "tensor", "(", "c", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "\n", "", "class", "translatedSigmoid", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "20", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "1000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ",", "device", "=", "x", ".", "device", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ",", "device", "=", "x", ".", "device", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "model", ".", "cuda", "(", ")", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-4", ")", "\n", "\n", "it", "=", "0", ";", "opt_switch", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "batches", "=", "local_batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "if", "it", "%", "11", "==", "0", "and", "switch", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "data", ",", "label", ",", "mean_w", ",", "var_w", "=", "next", "(", "batches", ")", "\n", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "\n", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "#for b in range(mean_pseupoch):", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "#batch = locality_sampler2(mean_psu,mean_ssu,mean_Q,mean_w)", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "mean_w", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "#for b in range(var_pseupoch):", "\n", "            ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "#batch = locality_sampler2(var_psu,var_ssu,var_Q,var_w)", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ",", "var_w", ")", "/", "X", ".", "shape", "[", "0", "]", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "data", "=", "torch", ".", "tensor", "(", "Xval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "yval", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "model", "(", "data", ",", "switch", ")", "\n", "m", "=", "m", "*", "y_std", "+", "y_mean", "\n", "v", "=", "v", "*", "y_std", "**", "2", "\n", "log_px", "=", "t_likelihood", "(", "label", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "m", ",", "v", ")", "\n", "rmse", "=", "(", "(", "label", "-", "m", ".", "flatten", "(", ")", ")", "**", "2", ")", ".", "mean", "(", ")", ".", "sqrt", "(", ")", "\n", "return", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "rmse", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.__init__": [[29, 34], ["torch.nn.Module.__init__", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "basemodel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "switch", "=", "0.0", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.encoder": [[35, 37], ["toy_vae.basemodel.enc_mu", "toy_vae.basemodel.enc_var"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "enc_mu", "(", "x", ")", ",", "self", ".", "enc_var", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.decoder": [[38, 42], ["toy_vae.basemodel.dec_mu", "toy_vae.basemodel.dec_var", "torch.tensor"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "x_mu", ",", "x_var", "=", "self", ".", "dec_mu", "(", "z", ")", ",", "self", ".", "dec_var", "(", "z", ")", "\n", "x_var", "=", "self", ".", "switch", "*", "x_var", "+", "(", "1", "-", "self", ".", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "z", ".", "device", ")", "\n", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.sample": [[43, 47], ["torch.randn", "toy_vae.basemodel.decoder"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder"], ["", "def", "sample", "(", "self", ",", "N", ")", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "N", ",", "self", ".", "latent_size", ",", "device", "=", "self", ".", "device", ")", "\n", "x_mu", ",", "x_var", "=", "self", ".", "decoder", "(", "z", ")", "\n", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.forward": [[48, 61], ["toy_vae.basemodel.encoder", "torch.distributions.Independent", "torch.distributions.Independent.rsample", "toy_vae.basemodel.decoder", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Independent.log_prob", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Normal", "torch.distributions.Independent.log_prob", "torch.distributions.Independent.log_prob", "elbo.mean", "D.Independent.log_prob.mean", "kl.mean", "torch.zeros_like", "torch.ones_like", "z_var.sqrt", "x_var.sqrt"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob"], ["", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "1.0", ",", "epsilon", "=", "1e-5", ")", ":", "\n", "        ", "z_mu", ",", "z_var", "=", "self", ".", "encoder", "(", "x", ")", "\n", "q_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "z_mu", ",", "z_var", ".", "sqrt", "(", ")", "+", "epsilon", ")", ",", "1", ")", "\n", "z", "=", "q_dist", ".", "rsample", "(", ")", "\n", "x_mu", ",", "x_var", "=", "self", ".", "decoder", "(", "z", ")", "\n", "p_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "x_mu", ",", "x_var", ".", "sqrt", "(", ")", "+", "epsilon", ")", ",", "1", ")", "\n", "\n", "prior", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "z", ")", ",", "\n", "torch", ".", "ones_like", "(", "z", ")", ")", ",", "1", ")", "\n", "log_px", "=", "p_dist", ".", "log_prob", "(", "x", ")", "\n", "kl", "=", "q_dist", ".", "log_prob", "(", "z", ")", "-", "prior", ".", "log_prob", "(", "z", ")", "\n", "elbo", "=", "log_px", "-", "beta", "*", "kl", "\n", "return", "elbo", ".", "mean", "(", ")", ",", "log_px", ".", "mean", "(", ")", ",", "kl", ".", "mean", "(", ")", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.basemodel.evaluate": [[62, 75], ["torch.no_grad", "toy_vae.basemodel.sample", "torch.distributions.Independent", "tqdm.tqdm.tqdm", "torch.distributions.Normal", "torch.tensor", "toy_vae.basemodel.forward", "elbolist.append", "logpxlist.append", "parzen_score.append", "numpy.array", "numpy.array", "numpy.array", "x_var.sqrt", "torch.tensor.reshape", "elbo.item", "logpx.item", "torch.distributions.Independent.log_prob().mean().item", "torch.distributions.Independent.log_prob().mean", "torch.distributions.Independent.log_prob"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.sample", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob"], ["", "def", "evaluate", "(", "self", ",", "X", ",", "L", "=", "1000", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_mu", ",", "x_var", "=", "self", ".", "sample", "(", "L", ")", "\n", "parzen_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "x_mu", ",", "x_var", ".", "sqrt", "(", ")", ")", ",", "1", ")", "\n", "elbolist", ",", "logpxlist", ",", "parzen_score", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "x", "in", "tqdm", "(", "X", ",", "desc", "=", "'evaluating'", ",", "unit", "=", "'samples'", ")", ":", "\n", "                ", "x", "=", "torch", ".", "tensor", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "elbo", ",", "logpx", ",", "kl", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "elbolist", ".", "append", "(", "elbo", ".", "item", "(", ")", ")", "\n", "logpxlist", ".", "append", "(", "logpx", ".", "item", "(", ")", ")", "\n", "parzen_score", ".", "append", "(", "parzen_dist", ".", "log_prob", "(", "x", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "elbolist", ")", ",", "np", ".", "array", "(", "logpxlist", ")", ",", "np", ".", "array", "(", "parzen_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.vae.__init__": [[78, 95], ["toy_vae.basemodel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "vae", ",", "self", ")", ".", "__init__", "(", "latent_size", ",", "cuda", ")", "\n", "\n", "self", ".", "enc_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ")", "\n", "self", ".", "enc_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "dec_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ")", "\n", "self", ".", "dec_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.vae.fit": [[96, 124], ["toy_vae.vae.train", "torch.optim.Adam", "utils.batchify", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "toy_vae.vae.parameters", "torch.optim.Adam.zero_grad", "torch.tensor", "toy_vae.vae.forward", "torch.optim.Adam.step", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.set_postfix", "loss.append", "var.append", "numpy.minimum", "x_var.mean().item", "next", "x_var.mean"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward"], ["", "def", "fit", "(", "self", ",", "Xtrain", ",", "n_iters", "=", "100", ",", "lr", "=", "1e-3", ",", "batch_size", "=", "256", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "batches", "=", "batchify", "(", "Xtrain", ",", "batch_size", "=", "batch_size", ",", "shuffel", "=", "True", ")", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'training'", ",", "total", "=", "n_iters", ",", "unit", "=", "'iter'", ")", "\n", "loss", ",", "var", "=", "[", "]", ",", "[", "]", "\n", "while", "it", "<", "n_iters", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "switch", "=", "1.0", "if", "it", ">", "n_iters", "/", "2", "else", "0.0", "\n", "anneling", "=", "np", ".", "minimum", "(", "1", ",", "it", "/", "n_iters", ")", "*", "beta", "\n", "\n", "x", "=", "torch", ".", "tensor", "(", "next", "(", "batches", ")", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "elbo", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'elbo'", ":", "(", "-", "elbo", ")", ".", "item", "(", ")", "}", ")", "\n", "loss", ".", "append", "(", "(", "-", "elbo", ")", ".", "item", "(", ")", ")", "\n", "var", ".", "append", "(", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "it", "+=", "1", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "return", "loss", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.rbf.__init__": [[127, 144], ["toy_vae.basemodel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "utils.RBF", "utils.PosLinear", "utils.Reciprocal", "utils.PosLinear"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "rbf", ",", "self", ")", ".", "__init__", "(", "latent_size", ",", "cuda", ")", "\n", "\n", "self", ".", "enc_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ")", "\n", "self", ".", "enc_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "dec_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ")", "\n", "self", ".", "dec_var", "=", "nn", ".", "Sequential", "(", "RBF", "(", "self", ".", "latent_size", ",", "50", ",", "None", ",", "5", ")", ",", "\n", "PosLinear", "(", "50", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "Reciprocal", "(", "0.1", ")", ",", "\n", "PosLinear", "(", "1", ",", "1", ",", "bias", "=", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.rbf.fit": [[145, 179], ["toy_vae.rbf.train", "torch.optim.Adam", "utils.batchify", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "toy_vae.rbf.parameters", "torch.optim.Adam.zero_grad", "torch.tensor", "toy_vae.rbf.forward", "torch.optim.Adam.step", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.set_postfix", "loss.append", "var.append", "numpy.minimum", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "torch.tensor", "torch.nn.Parameter", "x_var.mean().item", "[].detach().numpy", "list", "next", "hasattr", "toy_vae.rbf.dec_var.children", "x_var.mean", "[].detach", "toy_vae.rbf.encoder", "torch.tensor().to", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder"], ["", "def", "fit", "(", "self", ",", "Xtrain", ",", "n_iters", "=", "100", ",", "lr", "=", "1e-3", ",", "batch_size", "=", "256", ",", "n_clusters", "=", "50", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "batches", "=", "batchify", "(", "Xtrain", ",", "batch_size", "=", "batch_size", ",", "shuffel", "=", "True", ")", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'training'", ",", "total", "=", "n_iters", ",", "unit", "=", "'iter'", ")", "\n", "loss", ",", "var", "=", "[", "]", ",", "[", "]", "\n", "while", "it", "<", "n_iters", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "self", ".", "switch", "=", "1.0", "if", "it", ">", "n_iters", "/", "2", "else", "0.0", "\n", "anneling", "=", "np", ".", "minimum", "(", "1", ",", "it", "/", "n_iters", ")", "*", "beta", "\n", "if", "self", ".", "switch", "and", "(", "it", "%", "100", "==", "0", "or", "not", "hasattr", "(", "self", ",", "\"C\"", ")", ")", ":", "\n", "                ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "self", ".", "encoder", "(", "torch", ".", "tensor", "(", "Xtrain", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "C", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "rbf", "=", "list", "(", "self", ".", "dec_var", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "rbf", ".", "points", "=", "nn", ".", "Parameter", "(", "self", ".", "C", ")", "\n", "\n", "", "x", "=", "torch", ".", "tensor", "(", "next", "(", "batches", ")", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "elbo", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'elbo'", ":", "(", "-", "elbo", ")", ".", "item", "(", ")", "}", ")", "\n", "loss", ".", "append", "(", "(", "-", "elbo", ")", ".", "item", "(", ")", ")", "\n", "var", ".", "append", "(", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "it", "+=", "1", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "return", "loss", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.john.__init__": [[182, 204], ["toy_vae.basemodel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "john", ",", "self", ")", ".", "__init__", "(", "latent_size", ",", "cuda", ")", "\n", "self", ".", "opt_switch", "=", "0", "\n", "\n", "self", ".", "enc_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ")", "\n", "self", ".", "enc_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "4", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "self", ".", "latent_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "dec_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "4", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.john.decoder": [[205, 225], ["toy_vae.john.dec_mu", "utils.dist", "utils.translatedSigmoid", "toy_vae.john.alpha", "toy_vae.john.beta", "torch.distributions.Gamma", "utils.dist.min", "torch.distributions.Gamma.rsample", "torch.distributions.Gamma.rsample", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid"], ["", "def", "decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "x_mu", "=", "self", ".", "dec_mu", "(", "z", ")", "\n", "if", "self", ".", "switch", ":", "\n", "            ", "d", "=", "dist", "(", "z", ",", "self", ".", "C", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "translatedSigmoid", "(", "d_min", ",", "-", "6.907", "*", "0.03", ",", "0.03", ")", "\n", "alpha", "=", "self", ".", "alpha", "(", "z", ")", "\n", "beta", "=", "self", ".", "beta", "(", "z", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "alpha", "+", "1e-6", ",", "beta", "+", "1e-6", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "[", "100", "]", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-6", ")", ")", "\n", "", "else", ":", "\n", "                ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "[", "1000", "]", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-6", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "x_var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "(", "10", "*", "torch", ".", "ones_like", "(", "x_var", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_var", "=", "(", "0.02", "**", "2", ")", "*", "torch", ".", "ones_like", "(", "x_mu", ")", "\n", "\n", "", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_vae.john.fit": [[226, 287], ["toy_vae.john.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "locality_sampler.locality_sampler.local_batchify", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "itertools.chain", "itertools.chain", "itertools.chain", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.set_postfix", "loss.append", "var.append", "toy_vae.john.enc_mu.parameters", "toy_vae.john.enc_var.parameters", "toy_vae.john.dec_mu.parameters", "toy_vae.john.enc_mu.parameters", "toy_vae.john.enc_var.parameters", "toy_vae.john.dec_mu.parameters", "toy_vae.john.alpha.parameters", "toy_vae.john.beta.parameters", "numpy.minimum", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "torch.tensor", "torch.optim.Adam.zero_grad", "toy_vae.john.forward", "torch.optim.Adam.step", "toy_vae.john.forward", "toy_vae.john.forward", "x_var.mean().item", "[].detach().numpy", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "hasattr", "x_var.mean", "[].detach", "torch.tensor", "torch.tensor", "torch.tensor", "toy_vae.john.encoder", "torch.tensor().to", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder"], ["", "def", "fit", "(", "self", ",", "Xtrain", ",", "n_iters", "=", "100", ",", "lr", "=", "1e-3", ",", "batch_size", "=", "250", ",", "n_clusters", "=", "50", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "\n", "optimizer1", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "enc_mu", ".", "parameters", "(", ")", ",", "\n", "self", ".", "enc_var", ".", "parameters", "(", ")", ",", "\n", "self", ".", "dec_mu", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "enc_mu", ".", "parameters", "(", ")", ",", "\n", "self", ".", "enc_var", ".", "parameters", "(", ")", ",", "\n", "self", ".", "dec_mu", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "optimizer3", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "alpha", ".", "parameters", "(", ")", ",", "\n", "self", ".", "beta", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "batches", "=", "local_batchify", "(", "Xtrain", ")", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'training'", ",", "total", "=", "n_iters", ",", "unit", "=", "'iter'", ")", "\n", "loss", ",", "var", "=", "[", "]", ",", "[", "]", "\n", "while", "it", "<", "n_iters", ":", "\n", "            ", "self", ".", "switch", "=", "1.0", "if", "it", ">", "n_iters", "/", "2", "else", "0.0", "\n", "anneling", "=", "np", ".", "minimum", "(", "1", ",", "it", "/", "n_iters", ")", "*", "beta", "\n", "self", ".", "opt_switch", "=", "(", "self", ".", "opt_switch", "+", "1", ")", "if", "(", "it", "%", "100", "==", "0", "and", "self", ".", "switch", ")", "else", "self", ".", "opt_switch", "\n", "if", "self", ".", "switch", "and", "(", "it", "%", "100", "==", "0", "or", "not", "hasattr", "(", "self", ",", "\"C\"", ")", ")", ":", "\n", "                ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "self", ".", "encoder", "(", "torch", ".", "tensor", "(", "Xtrain", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "C", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "", "x", ",", "mean_w", ",", "var_w", "=", "next", "(", "batches", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "not", "self", ".", "switch", ":", "\n", "                ", "optimizer1", ".", "zero_grad", "(", ")", "\n", "elbo", ",", "_", ",", "_", ",", "_", ",", "x_var", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "_", ",", "logpx", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "if", "self", ".", "opt_switch", "%", "2", "==", "0", ":", "\n", "                    ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "elbo", "=", "logpx", "-", "kl", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "optimizer3", ".", "zero_grad", "(", ")", "\n", "elbo", "=", "logpx", "-", "kl", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer3", ".", "step", "(", ")", "\n", "\n", "", "elbo", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "\n", "", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'elbo'", ":", "(", "-", "elbo", ")", ".", "item", "(", ")", "}", ")", "\n", "loss", ".", "append", "(", "(", "-", "elbo", ")", ".", "item", "(", ")", ")", "\n", "var", ".", "append", "(", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "it", "+=", "1", "\n", "\n", "", "progressBar", ".", "close", "(", ")", "\n", "return", "loss", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.generate_data": [[28, 38], ["numpy.random.uniform", "numpy.linspace", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "numpy.sin", "toy_regression.generate_data.f"], "function", ["None"], ["def", "generate_data", "(", "num_samples", "=", "20", ")", ":", "\n", "    ", "def", "f", "(", "x", ")", ":", "\n", "        ", "return", "x", "*", "np", ".", "sin", "(", "x", ")", "# x**3", "\n", "", "X", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "10", ",", "size", "=", "num_samples", ")", "\n", "x", "=", "np", ".", "linspace", "(", "-", "4", ",", "14", ",", "250", ")", "\n", "y", "=", "f", "(", "X", ")", "+", "0.3", "*", "np", ".", "random", ".", "randn", "(", "num_samples", ")", "+", "0.3", "*", "X", "*", "np", ".", "random", ".", "randn", "(", "num_samples", ")", "# added input dependent noise", "\n", "return", "torch", ".", "tensor", "(", "np", ".", "atleast_2d", "(", "X", ")", ".", "T", ")", ".", "to", "(", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "y", ")", ".", "to", "(", "torch", ".", "float32", ")", ",", "torch", ".", "tensor", "(", "np", ".", "atleast_2d", "(", "x", ")", ".", "T", ")", ".", "to", "(", "torch", ".", "float32", ")", ",", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.gp": [[40, 80], ["gpytorch.likelihoods.GaussianLikelihood", "GPModel", "GPModel.train", "gpytorch.likelihoods.GaussianLikelihood.train", "torch.optim.Adam", "gpytorch.mlls.ExactMarginalLogLikelihood", "GPModel.eval", "gpytorch.likelihoods.GaussianLikelihood.eval", "GPModel.parameters", "torch.optim.Adam.zero_grad", "GPModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "gpytorch.likelihoods.GaussianLikelihood.", "likelihood.variance.sqrt", "mean.reshape().numpy", "observed_pred.variance.sqrt.reshape().numpy", "super().__init__", "gpytorch.means.ConstantMean", "gpytorch.kernels.ScaleKernel", "toy_regression..mean_module", "toy_regression..covar_module", "gpytorch.distributions.MultivariateNormal", "gpytorch.mlls.ExactMarginalLogLikelihood.", "print", "GPModel.", "gpytorch.kernels.RBFKernel", "mean.reshape", "observed_pred.variance.sqrt.reshape", "loss.item"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "gp", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "import", "gpytorch", "\n", "class", "GPModel", "(", "gpytorch", ".", "models", ".", "ExactGP", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ",", "train_x", ",", "train_y", ",", "likelihood", ")", ":", "\n", "            ", "super", "(", "GPModel", ",", "self", ")", ".", "__init__", "(", "train_x", ",", "train_y", ",", "likelihood", ")", "\n", "self", ".", "mean_module", "=", "gpytorch", ".", "means", ".", "ConstantMean", "(", ")", "\n", "self", ".", "covar_module", "=", "gpytorch", ".", "kernels", ".", "ScaleKernel", "(", "gpytorch", ".", "kernels", ".", "RBFKernel", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "mean_x", "=", "self", ".", "mean_module", "(", "x", ")", "\n", "covar_x", "=", "self", ".", "covar_module", "(", "x", ")", "\n", "return", "gpytorch", ".", "distributions", ".", "MultivariateNormal", "(", "mean_x", ",", "covar_x", ")", "\n", "\n", "", "", "likelihood", "=", "gpytorch", ".", "likelihoods", ".", "GaussianLikelihood", "(", ")", "\n", "model", "=", "GPModel", "(", "X", ",", "y", ",", "likelihood", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "likelihood", ".", "train", "(", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-3", ")", "\n", "mll", "=", "gpytorch", ".", "mlls", ".", "ExactMarginalLogLikelihood", "(", "likelihood", ",", "model", ")", "\n", "\n", "n_iter", "=", "7000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "X", ")", "\n", "loss", "=", "-", "mll", "(", "output", ",", "y", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "likelihood", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "observed_pred", "=", "likelihood", "(", "model", "(", "x", ")", ")", "\n", "mean", "=", "observed_pred", ".", "mean", "\n", "var", "=", "observed_pred", ".", "variance", ".", "sqrt", "(", ")", "\n", "", "return", "mean", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "numpy", "(", ")", ",", "var", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.neuralnet": [[82, 116], ["NNModel", "torch.optim.Adam", "NNModel.eval", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "NNModel.", "mean.numpy", "var.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.tensor", "print", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "toy_regression..mean", "toy_regression..var", "var.sqrt", "loss.item", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "neuralnet", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", ",", "self", ".", "var", "(", "x", ")", "\n", "\n", "", "", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "10000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ")", "\n", "v", "=", "torch", ".", "tensor", "(", "[", "0.002", "]", ")", "if", "it", "<", "n_iter", "/", "2", "else", "v", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mean", ",", "var", "=", "model", "(", "x", ")", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.dropout": [[118, 151], ["NNModel", "torch.optim.Adam", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "torch.zeros", "range", "mean.numpy", "var.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "toy_regression..mean", "print", "NNModel.flatten", "torch.zeros.mean", "torch.zeros.var", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Dropout", "var.sqrt", "loss.item", "NNModel.", "model.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "dropout", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.05", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.05", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", "\n", "\n", "", "", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "10000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", "=", "model", "(", "X", ")", "\n", "loss", "=", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "samples", "=", "torch", ".", "zeros", "(", "x", ".", "shape", "[", "0", "]", ",", "1000", ")", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "            ", "samples", "[", ":", ",", "i", "]", "=", "model", "(", "x", ")", ".", "flatten", "(", ")", "\n", "", "mean", ",", "var", "=", "samples", ".", "mean", "(", "dim", "=", "1", ")", ",", "samples", ".", "var", "(", "dim", "=", "1", ")", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.ensemble": [[153, 198], ["range", "NNModel", "torch.optim.Adam", "NNModel.eval", "torch.no_grad", "torch.stack", "torch.stack", "torch.stack.mean", "ms.mean.numpy", "var.sqrt().numpy", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "NNModel.parameters", "torch.optim.Adam.zero_grad", "NNModel.", "loss.backward", "torch.optim.Adam.step", "torch.no_grad", "NNModel.", "torch.stack.append", "torch.stack.append", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "toy_regression..mean", "toy_regression..var", "torch.tensor", "print", "var.sqrt", "loss.item", "v.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["", "def", "ensemble", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "class", "NNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "NNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "return", "self", ".", "mean", "(", "x", ")", ",", "self", ".", "var", "(", "x", ")", "\n", "\n", "", "", "ms", ",", "vs", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "model", "=", "NNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "\n", "n_iter", "=", "10000", "\n", "it", "=", "0", "\n", "while", "it", "<=", "n_iter", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ")", "\n", "v", "=", "torch", ".", "tensor", "(", "[", "0.002", "]", ")", "if", "it", "<", "n_iter", "/", "2", "else", "v", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "if", "it", "%", "500", "==", "0", ":", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mean", ",", "var", "=", "model", "(", "x", ")", "\n", "ms", ".", "append", "(", "mean", ")", "\n", "vs", ".", "append", "(", "var", ")", "\n", "\n", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "ms", "=", "torch", ".", "stack", "(", "ms", ")", "\n", "vs", "=", "torch", ".", "stack", "(", "vs", ")", "\n", "mean", "=", "ms", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var", "=", "(", "vs", "+", "ms", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "mean", "**", "2", "\n", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.bnn": [[200, 277], ["X.numpy.numpy", "y.numpy().reshape.numpy().reshape", "x.numpy.numpy", "ed.make_log_joint_fn", "int", "int", "tensorflow_probability.mcmc.HamiltonianMonteCarlo", "tensorflow_probability.mcmc.sample_chain", "print", "numpy.array", "np.array.mean", "np.array.std", "ed.Normal", "ed.Normal", "ed.Normal", "ed.Normal", "tensorflow.sigmoid", "ed.HalfNormal", "ed.Normal", "ed.make_log_joint_fn.", "tensorflow.Session", "sess.run", "sigmoid", "toy_regression.bnn.NpNet"], "function", ["None"], ["", "def", "bnn", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "from", "tensorflow_probability", "import", "edward2", "as", "ed", "\n", "X", "=", "X", ".", "numpy", "(", ")", "\n", "y", "=", "y", ".", "numpy", "(", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "def", "Net", "(", "features", ")", ":", "\n", "        ", "W0", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "[", "1", ",", "n_neurons", "]", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "[", "1", ",", "n_neurons", "]", ")", ",", "name", "=", "'W0'", ")", "\n", "b0", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "n_neurons", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "n_neurons", ")", ",", "name", "=", "'b0'", ")", "\n", "W1", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "[", "n_neurons", ",", "1", "]", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "[", "n_neurons", ",", "1", "]", ")", ",", "name", "=", "'W1'", ")", "\n", "b1", "=", "ed", ".", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "1", ")", ",", "scale", "=", "10", "*", "tf", ".", "ones", "(", "1", ")", ",", "name", "=", "'b1'", ")", "\n", "\n", "h", "=", "tf", ".", "sigmoid", "(", "tf", ".", "matmul", "(", "features", ",", "W0", ")", "+", "b0", ")", "\n", "mean", "=", "tf", ".", "matmul", "(", "h", ",", "W1", ")", "+", "b1", "\n", "\n", "noise_std", "=", "ed", ".", "HalfNormal", "(", "scale", "=", "tf", ".", "ones", "(", "[", "1", "]", ")", ",", "name", "=", "\"noise_std\"", ")", "\n", "\n", "return", "ed", ".", "Normal", "(", "loc", "=", "mean", ",", "scale", "=", "noise_std", ",", "name", "=", "'predictions'", ")", "\n", "\n", "", "log_joint", "=", "ed", ".", "make_log_joint_fn", "(", "Net", ")", "\n", "\n", "def", "target_log_prob_fn", "(", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", ")", ":", "\n", "        ", "return", "log_joint", "(", "features", "=", "X", ",", "\n", "W0", "=", "W0", ",", "b0", "=", "b0", ",", "W1", "=", "W1", ",", "b1", "=", "b1", ",", "\n", "noise_std", "=", "noise_std", ",", "\n", "predictions", "=", "y", ")", "\n", "\n", "", "num_results", "=", "int", "(", "20e3", ")", "#number of hmc iterations", "\n", "n_burnin", "=", "int", "(", "5e3", ")", "#number of burn-in steps", "\n", "step_size", "=", "0.01", "\n", "num_leapfrog_steps", "=", "10", "\n", "\n", "kernel", "=", "tfp", ".", "mcmc", ".", "HamiltonianMonteCarlo", "(", "\n", "target_log_prob_fn", "=", "target_log_prob_fn", ",", "\n", "step_size", "=", "step_size", ",", "\n", "num_leapfrog_steps", "=", "num_leapfrog_steps", ")", "\n", "\n", "states", ",", "kernel_results", "=", "tfp", ".", "mcmc", ".", "sample_chain", "(", "\n", "num_results", "=", "num_results", ",", "\n", "num_burnin_steps", "=", "n_burnin", ",", "\n", "kernel", "=", "kernel", ",", "\n", "current_state", "=", "[", "\n", "tf", ".", "zeros", "(", "[", "1", ",", "n_neurons", "]", ",", "name", "=", "'init_W0'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "n_neurons", "]", ",", "name", "=", "'init_b0'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "n_neurons", ",", "1", "]", ",", "name", "=", "'init_W1'", ")", ",", "\n", "tf", ".", "zeros", "(", "[", "1", "]", ",", "name", "=", "'init_b1'", ")", ",", "\n", "tf", ".", "ones", "(", "[", "1", "]", ",", "name", "=", "'init_noise_std'", ")", ",", "\n", "]", "\n", ")", "\n", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", "=", "states", "\n", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "        ", "[", "W0_", ",", "b0_", ",", "W1_", ",", "b1_", ",", "noise_std_", ",", "accepted_", "]", "=", "sess", ".", "run", "(", "\n", "[", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise_std", ",", "kernel_results", ".", "is_accepted", "]", ")", "\n", "\n", "", "W0_samples", "=", "W0_", "[", "n_burnin", ":", "]", "\n", "b0_samples", "=", "b0_", "[", "n_burnin", ":", "]", "\n", "W1_samples", "=", "W1_", "[", "n_burnin", ":", "]", "\n", "b1_samples", "=", "b1_", "[", "n_burnin", ":", "]", "\n", "noise_std_samples", "=", "noise_std_", "[", "n_burnin", ":", "]", "\n", "accepted_samples", "=", "accepted_", "[", "n_burnin", ":", "]", "\n", "\n", "print", "(", "'Acceptance rate: %0.1f%%'", "%", "(", "100", "*", "np", ".", "mean", "(", "accepted_samples", ")", ")", ")", "\n", "\n", "from", "scipy", ".", "special", "import", "expit", "as", "sigmoid", "\n", "\n", "def", "NpNet", "(", "features", ",", "W0", ",", "b0", ",", "W1", ",", "b1", ",", "noise", ")", ":", "\n", "        ", "h", "=", "sigmoid", "(", "np", ".", "matmul", "(", "features", ",", "W0", ")", "+", "b0", ")", "\n", "return", "np", ".", "matmul", "(", "h", ",", "W1", ")", "+", "b1", "# + noise*np.random.randn()", "\n", "\n", "", "out", "=", "[", "NpNet", "(", "x", ",", "W0_samples", "[", "i", "]", ",", "b0_samples", "[", "i", "]", ",", "W1_samples", "[", "i", "]", ",", "\n", "b1_samples", "[", "i", "]", ",", "noise_std_samples", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "W0_samples", ")", ")", "]", "\n", "\n", "out", "=", "np", ".", "array", "(", "out", ")", "\n", "y_pred", "=", "out", ".", "mean", "(", "axis", "=", "0", ")", "\n", "sigma", "=", "out", ".", "std", "(", "axis", "=", "0", ")", "\n", "return", "y_pred", ",", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.john": [[279, 404], ["KMeans", "KMeans.fit", "torch.tensor", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler.get_pseupoch", "locality_sampler.get_pseupoch", "torch.Tensor", "torch.Tensor", "GPNNModel.train", "GPNNModel.eval", "numpy.concatenate", "GPNNModel.mean.parameters", "chain", "GPNNModel.train", "torch.no_grad", "GPNNModel.", "toy_regression..numpy", "torch.tensor.mean().sqrt().numpy", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "toy_regression..trans", "toy_regression..mean", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.sum.backward", "torch.optim.Adam.step", "GPNNModel.eval", "GPNNModel.", "print", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "toy_regression..alph", "toy_regression..bet", "torch.distributions.Gamma", "torch.tensor", "range", "range", "torch.tensor.mean().sqrt", "D.Gamma.rsample", "D.Gamma.rsample", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "loss.sum.item", "torch.Size", "torch.Size", "torch.tensor", "mean_w[].reshape", "var_w[].reshape", "torch.tensor.mean", "v.log", "v.log", "v.log", "m.flatten", "m.flatten", "v.log", "m.flatten", "diff.log", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2"], ["", "def", "john", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "itertools", "import", "chain", "\n", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "50", "\n", "mean_M", "=", "60", "\n", "\n", "var_psu", "=", "3", "\n", "var_ssu", "=", "7", "\n", "var_M", "=", "10", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "10", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "class", "translatedSigmoid", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "50", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "2000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "model", "=", "GPNNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "n_iter", "=", "6000", "\n", "it", "=", "0", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "X", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "X", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "mean_pseupoch", "=", "get_pseupoch", "(", "mean_w", ",", "0.5", ")", "\n", "var_pseupoch", "=", "get_pseupoch", "(", "var_w", ",", "0.5", ")", "\n", "opt_switch", "=", "1", "\n", "mean_w", "=", "torch", ".", "Tensor", "(", "mean_w", ")", "\n", "var_w", "=", "torch", ".", "Tensor", "(", "var_w", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "while", "it", "<", "n_iter", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "switch", "=", "1.0", "if", "it", ">", "5000", "else", "0.0", "\n", "\n", "if", "it", "%", "11", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "if", "not", "switch", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", ";", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "            ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "                ", "for", "b", "in", "range", "(", "mean_pseupoch", ")", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", "[", "batch", "]", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "/", "(", "2", "*", "v", ")", ")", "/", "mean_w", "[", "batch", "]", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "b", "in", "range", "(", "var_pseupoch", ")", ":", "\n", "                    ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "diff", "=", "(", "(", "m", ".", "flatten", "(", ")", "-", "y", "[", "batch", "]", ")", "**", "2", ")", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "loss", "=", "-", "(", "-", "(", "diff", ".", "log", "(", ")", "/", "2", "+", "diff", "/", "v", "+", "v", ".", "log", "(", ")", "/", "2", ")", ")", "/", "var_w", "[", "batch", "]", ".", "reshape", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "", "", "if", "it", "%", "500", "==", "0", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "mean", ",", "var", "=", "model", "(", "x", ",", "switch", ")", "\n", "", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "mean", "(", "dim", "=", "0", ")", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.ens_john": [[406, 541], ["KMeans", "KMeans.fit", "torch.tensor", "range", "torch.stack", "torch.stack", "torch.stack.mean", "numpy.concatenate", "GPNNModel", "torch.optim.Adam", "torch.optim.Adam", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler.get_pseupoch", "locality_sampler.get_pseupoch", "torch.Tensor", "torch.Tensor", "GPNNModel.train", "GPNNModel.eval", "torch.stack.append", "torch.stack.append", "toy_regression..numpy", "torch.tensor.sqrt().numpy", "super().__init__", "torch.nn.Parameter", "torch.nn.functional.softplus", "torch.sigmoid", "super().__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "translatedSigmoid", "dist", "toy_regression..trans", "toy_regression..mean", "GPNNModel.mean.parameters", "chain", "GPNNModel.train", "torch.no_grad", "GPNNModel.", "torch.tensor.mean", "torch.tensor", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.Softplus", "dist.min", "toy_regression..alph", "toy_regression..bet", "torch.distributions.Gamma", "torch.tensor", "GPNNModel.alph.parameters", "GPNNModel.bet.parameters", "GPNNModel.trans.parameters", "torch.optim.Adam.zero_grad", "GPNNModel.", "loss.sum.backward", "torch.optim.Adam.step", "GPNNModel.eval", "GPNNModel.", "print", "torch.tensor.sqrt", "D.Gamma.rsample", "D.Gamma.rsample", "range", "range", "torch.Size", "torch.Size", "torch.tensor", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "locality_sampler.locality_sampler2", "GPNNModel.", "loss.sum.sum", "loss.sum.backward", "torch.optim.Adam.step", "loss.sum.item", "utils.t_likelihood", "utils.t_likelihood", "v.log", "v.log", "m.flatten", "m.flatten"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood"], ["", "def", "ens_john", "(", "X", ",", "y", ",", "x", ")", ":", "\n", "    ", "from", "sklearn", ".", "cluster", "import", "KMeans", "\n", "from", "utils", "import", "dist", "\n", "from", "itertools", "import", "chain", "\n", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "50", "\n", "mean_M", "=", "60", "\n", "\n", "var_psu", "=", "3", "\n", "var_ssu", "=", "7", "\n", "var_M", "=", "10", "\n", "\n", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "10", ")", "\n", "kmeans", ".", "fit", "(", "np", ".", "concatenate", "(", "[", "X", "]", ",", "axis", "=", "0", ")", ")", "\n", "c", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", "\n", "\n", "class", "translatedSigmoid", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "translatedSigmoid", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Parameter", "(", "torch", ".", "tensor", "(", "[", "1.5", "]", ")", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "            ", "beta", "=", "torch", ".", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "beta", ")", "\n", "alpha", "=", "-", "beta", "*", "(", "6.9077542789816375", ")", "\n", "return", "torch", ".", "sigmoid", "(", "(", "x", "+", "alpha", ")", "/", "beta", ")", "\n", "\n", "", "", "class", "GPNNModel", "(", "nn", ".", "Module", ")", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "super", "(", "GPNNModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "mean", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ")", "\n", "self", ".", "alph", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "bet", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1", ",", "n_neurons", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "n_neurons", ",", "1", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "trans", "=", "translatedSigmoid", "(", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "switch", ")", ":", "\n", "            ", "d", "=", "dist", "(", "x", ",", "c", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "self", ".", "trans", "(", "d_min", ")", "\n", "mean", "=", "self", ".", "mean", "(", "x", ")", "\n", "if", "switch", ":", "\n", "                ", "a", "=", "self", ".", "alph", "(", "x", ")", "\n", "b", "=", "self", ".", "bet", "(", "x", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "a", "+", "1e-8", ",", "1.0", "/", "(", "b", "+", "1e-8", ")", ")", "\n", "if", "self", ".", "training", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "50", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "else", ":", "\n", "                    ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "torch", ".", "Size", "(", "[", "2000", "]", ")", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-8", ")", ")", "\n", "", "var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "torch", ".", "tensor", "(", "[", "3.5", "**", "2", "]", ")", "# HYPERPARAMETER", "\n", "\n", "", "else", ":", "\n", "                ", "var", "=", "torch", ".", "tensor", "(", "[", "0.05", "]", ")", "\n", "", "return", "mean", ",", "var", "\n", "\n", "", "", "ens_mean", ",", "ens_var", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "5", ")", ":", "\n", "        ", "model", "=", "GPNNModel", "(", ")", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "1e-2", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "model", ".", "alph", ".", "parameters", "(", ")", ",", "\n", "model", ".", "bet", ".", "parameters", "(", ")", ",", "\n", "model", ".", "trans", ".", "parameters", "(", ")", ")", ",", "lr", "=", "1e-3", ")", "\n", "\n", "n_iter", "=", "6000", "\n", "it", "=", "0", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "X", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "X", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "mean_pseupoch", "=", "get_pseupoch", "(", "mean_w", ",", "0.5", ")", "\n", "var_pseupoch", "=", "get_pseupoch", "(", "var_w", ",", "0.5", ")", "\n", "opt_switch", "=", "1", "\n", "mean_w", "=", "torch", ".", "Tensor", "(", "mean_w", ")", "\n", "var_w", "=", "torch", ".", "Tensor", "(", "var_w", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "while", "it", "<", "n_iter", ":", "\n", "            ", "model", ".", "train", "(", ")", "\n", "switch", "=", "1.0", "if", "it", ">", "5000", "else", "0.0", "\n", "\n", "if", "it", "%", "11", ":", "opt_switch", "=", "opt_switch", "+", "1", "# change between var and mean optimizer", "\n", "\n", "if", "not", "switch", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", ";", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "sum", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "                    ", "for", "b", "in", "range", "(", "mean_pseupoch", ")", ":", "\n", "                        ", "optimizer", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ",", "m", ",", "v", ",", "mean_w", "[", "batch", "]", ")", "#-(-v.log() - ((m.flatten()-y[batch])**2).reshape(1,-1,1) / (2 * v)) / mean_w[batch].reshape(1,-1,1)", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "for", "b", "in", "range", "(", "var_pseupoch", ")", ":", "\n", "                        ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", "\n", "m", ",", "v", "=", "model", "(", "X", "[", "batch", "]", ",", "switch", ")", "\n", "loss", "=", "-", "t_likelihood", "(", "y", "[", "batch", "]", ",", "m", ",", "v", ",", "var_w", "[", "batch", "]", ")", "#-(-(diff.log() / 2 + diff/v + v.log() / 2)) / var_w[batch].reshape(1,-1,1)", "\n", "loss", "=", "loss", ".", "sum", "(", ")", "# why the f*** is it so slow", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "\n", "", "", "", "if", "it", "%", "500", "==", "0", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "m", ",", "v", "=", "model", "(", "X", ",", "switch", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "y", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", ".", "mean", "(", ")", "\n", "print", "(", "'Iter {0}/{1}, Loss {2}'", ".", "format", "(", "it", ",", "n_iter", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "it", "+=", "1", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "mean", ",", "var", "=", "model", "(", "x", ",", "switch", ")", "\n", "", "ens_mean", ".", "append", "(", "mean", ")", "\n", "ens_var", ".", "append", "(", "var", ".", "mean", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "ens_mean", "=", "torch", ".", "stack", "(", "ens_mean", ")", "\n", "ens_var", "=", "torch", ".", "stack", "(", "ens_var", ")", "\n", "\n", "mean", "=", "ens_mean", ".", "mean", "(", "dim", "=", "0", ")", "\n", "var", "=", "(", "ens_var", "+", "ens_mean", "**", "2", ")", ".", "mean", "(", "dim", "=", "0", ")", "-", "mean", "**", "2", "\n", "\n", "return", "mean", ".", "numpy", "(", ")", ",", "var", ".", "sqrt", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot": [[543, 573], ["X.numpy.numpy", "y.numpy.numpy", "x.numpy.numpy", "matplotlib.pyplot.subplots", "ax.plot", "ax.plot", "ax.plot", "ax.fill", "ax.set_xlabel", "ax.set_ylabel", "ax.axis", "toy_regression.generate_data.f", "X.numpy.ravel", "numpy.concatenate", "numpy.concatenate", "ax.get_yticklabels", "item.set_fontsize", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "ax.get_xticklabels", "str", "str"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "def", "plot", "(", "X", ",", "y", ",", "x", ",", "y_pred", ",", "sigma", ",", "label", ",", "save", "=", "False", ")", ":", "\n", "    ", "X", "=", "X", ".", "numpy", "(", ")", ";", "y", "=", "y", ".", "numpy", "(", ")", ";", "x", "=", "x", ".", "numpy", "(", ")", "\n", "#    true_std = (0.3+0.3*x)*((0<x) & (x<10)) + 100*((x<0) | (10<x))", "\n", "#    true_std[true_std > 50] = np.nan", "\n", "#    valid = np.isfinite(true_std)", "\n", "#    upper = f(x) + 1.96 * true_std", "\n", "#    lower = f(x) - 1.96 * true_std", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "x", ",", "f", "(", "x", ")", ",", "':'", ",", "label", "=", "r'$f(x) = x\\,\\sin(x)$'", ",", "lw", "=", "3", ")", "\n", "ax", ".", "plot", "(", "X", ".", "ravel", "(", ")", ",", "y", ",", "'.'", ",", "markersize", "=", "10", ",", "label", "=", "u'Observations'", ",", "lw", "=", "3", ")", "\n", "ax", ".", "plot", "(", "x", ",", "y_pred", ",", "'-'", ",", "label", "=", "label", "+", "' prediction'", ",", "lw", "=", "3", ")", "\n", "#plt.plot(x[valid], upper[valid], 'k', alpha=0.5)", "\n", "#plt.plot(x[valid], lower[valid], 'k', alpha=0.5)", "\n", "\n", "ax", ".", "fill", "(", "np", ".", "concatenate", "(", "[", "x", ",", "x", "[", ":", ":", "-", "1", "]", "]", ")", ",", "\n", "np", ".", "concatenate", "(", "[", "y_pred", "-", "1.96", "*", "sigma", ",", "\n", "(", "y_pred", "+", "1.96", "*", "sigma", ")", "[", ":", ":", "-", "1", "]", "]", ")", ",", "\n", "alpha", "=", ".3", ",", "ec", "=", "'None'", ",", "label", "=", "label", "+", "': 95% confidence interval'", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "'$x$'", ")", "\n", "ax", ".", "set_ylabel", "(", "'$y$'", ")", "\n", "ax", ".", "axis", "(", "[", "-", "4", ",", "14", ",", "-", "15", ",", "15", "]", ")", "\n", "for", "item", "in", "(", "[", "ax", ".", "xaxis", ".", "label", ",", "ax", ".", "yaxis", ".", "label", ",", "ax", ".", "title", "]", "+", "\n", "ax", ".", "get_xticklabels", "(", ")", "+", "ax", ".", "get_yticklabels", "(", ")", ")", ":", "\n", "        ", "item", ".", "set_fontsize", "(", "15", ")", "\n", "\n", "", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "'figs/test_'", "+", "label", "+", "'_'", "+", "str", "(", "n_neurons", ")", "+", "'.pdf'", ",", "format", "=", "'pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "'figs/test_'", "+", "label", "+", "'_'", "+", "str", "(", "n_neurons", ")", "+", "'.png'", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot2": [[575, 597], ["X.numpy.numpy", "y.numpy.numpy", "x.numpy.numpy", "numpy.isfinite", "matplotlib.pyplot.subplots", "ax.plot", "zip", "ax.set_xlabel", "ax.set_ylabel", "ax.legend", "ax.plot", "ax.get_yticklabels", "item.set_fontsize", "matplotlib.pyplot.savefig", "matplotlib.pyplot.savefig", "ax.get_xticklabels", "str", "str"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "", "def", "plot2", "(", "X", ",", "y", ",", "x", ",", "sigma", ",", "labels", ",", "save", "=", "False", ")", ":", "\n", "    ", "X", "=", "X", ".", "numpy", "(", ")", ";", "y", "=", "y", ".", "numpy", "(", ")", ";", "x", "=", "x", ".", "numpy", "(", ")", "\n", "\n", "true_std", "=", "(", "0.3", "+", "0.3", "*", "x", ")", "*", "(", "(", "0", "<", "x", ")", "&", "(", "x", "<", "10", ")", ")", "+", "100", "*", "(", "(", "x", "<", "0", ")", "|", "(", "10", "<", "x", ")", ")", "\n", "true_std", "[", "true_std", ">", "50", "]", "=", "np", ".", "nan", "\n", "valid", "=", "np", ".", "isfinite", "(", "true_std", ")", "\n", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "x", "[", "valid", "]", ",", "true_std", "[", "valid", "]", ",", "'k'", ",", "label", "=", "'True std'", ",", "lw", "=", "3", ")", "\n", "for", "s", ",", "l", "in", "zip", "(", "sigma", ",", "labels", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "x", ",", "s", ",", "'-'", ",", "label", "=", "l", ",", "lw", "=", "3", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "'$x$'", ")", "\n", "ax", ".", "set_ylabel", "(", "'std(x)'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'best'", ",", "fontsize", "=", "15", ")", "\n", "for", "item", "in", "(", "[", "ax", ".", "xaxis", ".", "label", ",", "ax", ".", "yaxis", ".", "label", ",", "ax", ".", "title", "]", "+", "\n", "ax", ".", "get_xticklabels", "(", ")", "+", "ax", ".", "get_yticklabels", "(", ")", ")", ":", "\n", "        ", "item", ".", "set_fontsize", "(", "15", ")", "\n", "\n", "", "if", "save", ":", "\n", "        ", "plt", ".", "savefig", "(", "'figs/variance_'", "+", "str", "(", "n_neurons", ")", "+", "'.pdf'", ",", "format", "=", "'pdf'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "plt", ".", "savefig", "(", "'figs/variance_'", "+", "str", "(", "n_neurons", ")", "+", "'.png'", ",", "format", "=", "'png'", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw": [[13, 24], ["sklearn.neighbors.KDTree", "sklearn.neighbors.KDTree.query", "numpy.bincount", "Q.flatten"], "function", ["None"], ["def", "gen_Qw", "(", "data", ",", "psu", ",", "ssu", ",", "M", ")", ":", "\n", "    ", "\"\"\" Takes data as numpy matrix \"\"\"", "\n", "T", "=", "KDTree", "(", "data", ")", "\n", "_", ",", "Q", "=", "T", ".", "query", "(", "data", ",", "k", "=", "M", ")", "\n", "N", "=", "Q", ".", "shape", "[", "0", "]", ";", "\n", "w", "=", "psu", "*", "np", ".", "bincount", "(", "Q", ".", "flatten", "(", ")", ")", "/", "N", "*", "ssu", "/", "M", "\n", "#w = np.zeros(N)", "\n", "#    for i in range(N):", "\n", "#        w[i] = psu * np.sum( Q == i ) / N * ssu / M", "\n", "\n", "return", "(", "Q", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler": [[26, 34], ["numpy.random.randint", "numpy.unique", "len", "numpy.append", "numpy.random.choice"], "function", ["None"], ["", "def", "locality_sampler", "(", "psu", ",", "ssu", ",", "Q", ",", "w", ")", ":", "\n", "    ", "ps", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "w", ")", ",", "size", "=", "psu", ")", "\n", "ss", "=", "[", "]", "\n", "\n", "for", "i", "in", "ps", ":", "\n", "        ", "ss", "=", "np", ".", "append", "(", "ss", ",", "np", ".", "random", ".", "choice", "(", "Q", "[", "i", ",", ":", "]", ",", "size", "=", "ssu", ")", ")", "\n", "", "ss", "=", "np", ".", "unique", "(", "ss", ")", "\n", "return", "(", "ss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2": [[37, 45], ["numpy.random.randint", "numpy.unique", "len", "numpy.append", "numpy.random.choice"], "function", ["None"], ["", "def", "locality_sampler2", "(", "psu", ",", "ssu", ",", "Q", ",", "w", ")", ":", "\n", "    ", "ps", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "w", ")", ",", "size", "=", "psu", ")", "\n", "ss", "=", "[", "]", "\n", "\n", "for", "i", "in", "ps", ":", "\n", "        ", "ss", "=", "np", ".", "append", "(", "ss", ",", "np", ".", "random", ".", "choice", "(", "Q", "[", "i", ",", ":", "]", ",", "size", "=", "ssu", ",", "replace", "=", "False", ")", ")", "\n", "", "ss", "=", "np", ".", "unique", "(", "ss", ")", "\n", "return", "(", "ss", ")", "\n", "#%% ", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.get_pseupoch": [[46, 54], ["numpy.min", "numpy.maximum"], "function", ["None"], ["", "def", "get_pseupoch", "(", "w", ",", "p", ")", ":", "\n", "    ", "w_min", "=", "np", ".", "min", "(", "w", ")", "\n", "w_min", "=", "np", ".", "maximum", "(", "w_min", ",", "1e-2", ")", "\n", "n", "=", "0", ";", "x", "=", "0", "\n", "while", "x", "<", "p", ":", "\n", "        ", "n", "=", "n", "+", "1", "\n", "x", "=", "1", "-", "(", "1", "-", "w_min", ")", "**", "n", "\n", "", "return", "(", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.local_batchify": [[57, 87], ["PCA", "PCA.fit_transform", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler.gen_Qw", "locality_sampler2().astype", "locality_sampler.locality_sampler2"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2"], ["", "def", "local_batchify", "(", "*", "arrays", ",", "**", "kwargs", ")", ":", "\n", "#    mean_psu = 1", "\n", "#    mean_ssu = 100", "\n", "#    mean_M = 60", "\n", "#", "\n", "#    var_psu = 3", "\n", "#    var_ssu = 7", "\n", "#    var_M = 10", "\n", "\n", "    ", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "256", "\n", "mean_M", "=", "300", "\n", "\n", "var_psu", "=", "2", "\n", "var_ssu", "=", "8", "\n", "var_M", "=", "10", "\n", "\n", "if", "arrays", "[", "0", "]", ".", "shape", "[", "1", "]", ">", "50", ":", "\n", "        ", "from", "sklearn", ".", "decomposition", "import", "PCA", "\n", "pca", "=", "PCA", "(", "n_components", "=", "0.50", ")", "\n", "temp", "=", "pca", ".", "fit_transform", "(", "arrays", "[", "0", "]", ")", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "temp", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "temp", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "", "else", ":", "\n", "        ", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "", "arrays", "=", "(", "*", "arrays", ",", "mean_w", ",", "var_w", ")", "\n", "while", "True", ":", "\n", "        ", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "yield", "[", "a", "[", "batch", "]", "for", "a", "in", "arrays", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify": [[23, 44], ["gen_Qw", "gen_Qw", "locality_sampler2().astype", "locality_sampler2().astype", "locality_sampler2", "locality_sampler2"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.gen_Qw", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2", "home.repos.pwc.inspect_result.SkafteNicki_john.None.locality_sampler.locality_sampler2"], ["def", "local_batchify", "(", "*", "arrays", ",", "**", "kwargs", ")", ":", "\n", "    ", "from", "locality_sampler", "import", "gen_Qw", ",", "locality_sampler2", "\n", "mean_psu", "=", "1", "\n", "mean_ssu", "=", "100", "\n", "mean_M", "=", "200", "\n", "\n", "var_psu", "=", "1", "\n", "var_ssu", "=", "50", "\n", "var_M", "=", "60", "\n", "\n", "mean_Q", ",", "mean_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "mean_psu", ",", "mean_ssu", ",", "mean_M", ")", "\n", "var_Q", ",", "var_w", "=", "gen_Qw", "(", "arrays", "[", "0", "]", ",", "var_psu", ",", "var_ssu", ",", "var_M", ")", "\n", "arrays", "=", "(", "*", "arrays", ",", "mean_w", ",", "var_w", ")", "\n", "count", "=", "0", "\n", "while", "True", ":", "\n", "        ", "if", "count", "%", "2", "==", "0", ":", "\n", "            ", "batch", "=", "locality_sampler2", "(", "mean_psu", ",", "mean_ssu", ",", "mean_Q", ",", "mean_w", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "else", ":", "\n", "            ", "batch", "=", "locality_sampler2", "(", "var_psu", ",", "var_ssu", ",", "var_Q", ",", "var_w", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "", "count", "+=", "1", "\n", "yield", "[", "a", "[", "batch", "]", "for", "a", "in", "arrays", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.model": [[46, 142], ["utils.normalize_y", "torch.nn.Sequential", "torch.nn.Sequential", "tqdm.tqdm", "tqdm.tqdm.close", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.cuda.is_available", "torch.nn.Sequential.cuda", "torch.nn.Sequential.cuda", "torch.device", "torch.device", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "experiment_gradient.local_batchify", "utils.batchify", "torch.tensor().to().to", "torch.tensor().to().to", "tqdm.tqdm.update", "tqdm.tqdm.set_postfix", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "itertools.chain", "next", "torch.tensor().to().to", "torch.tensor().to().to", "next", "torch.nn.Sequential.", "torch.nn.Sequential.", "torch.optim.Adam.zero_grad", "loss.mean.mean", "loss.mean.backward", "torch.optim.Adam.step", "torch.no_grad", "loglike.append", "rmse.append", "params_m.append", "params_v.append", "gradlist_m.append", "gradlist_v.append", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.optim.Adam.zero_grad", "loss.mean.mean", "loss.mean.backward", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "loss.mean.mean", "loss.mean.backward", "torch.optim.Adam.step", "loss.mean.item", "loss.mean.item", "torch.tensor().to", "torch.tensor().to", "torch.nn.Sequential.", "torch.nn.Sequential.", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch.tensor", "torch.tensor", "m.flatten", "v.log", "list", "list", "list", "list", "torch.tensor", "torch.tensor", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "torch.nn.Sequential.parameters", "v.log", "m.flatten", "v.log", "m.flatten", "d.log"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify"], ["", "", "def", "model", "(", "args", ",", "X", ",", "y", ",", "local", "=", "False", ",", "mean_var", "=", "False", ")", ":", "\n", "\n", "    ", "y", ",", "y_mean", ",", "y_std", "=", "normalize_y", "(", "y", ")", "\n", "\n", "mean", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "args", ".", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "n_neurons", ",", "1", ")", ")", "\n", "var", "=", "torch", ".", "nn", ".", "Sequential", "(", "torch", ".", "nn", ".", "Linear", "(", "X", ".", "shape", "[", "1", "]", ",", "args", ".", "n_neurons", ")", ",", "\n", "torch", ".", "nn", ".", "ReLU", "(", ")", ",", "\n", "torch", ".", "nn", ".", "Linear", "(", "args", ".", "n_neurons", ",", "1", ")", ",", "\n", "torch", ".", "nn", ".", "Softplus", "(", ")", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "args", ".", "cuda", ":", "\n", "        ", "mean", ".", "cuda", "(", ")", ";", "var", ".", "cuda", "(", ")", ";", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "        ", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "", "if", "mean_var", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "mean", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "var", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "mean", ".", "parameters", "(", ")", ",", "\n", "var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "\n", "\n", "", "it", "=", "0", ";", "opt_switch", "=", "0", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'Training nn'", ",", "total", "=", "args", ".", "iters", ",", "unit", "=", "'iter'", ")", "\n", "\n", "# Batching scheme", "\n", "if", "local", ":", "\n", "        ", "batches", "=", "local_batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "", "else", ":", "\n", "        ", "batches", "=", "batchify", "(", "X", ",", "y", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffel", "=", "args", ".", "shuffel", ")", "\n", "\n", "# store values", "\n", "", "loglike", "=", "[", "]", "\n", "rmse", "=", "[", "]", "\n", "params_m", "=", "[", "]", "\n", "params_v", "=", "[", "]", "\n", "gradlist_m", "=", "[", "]", "\n", "gradlist_v", "=", "[", "]", "\n", "\n", "while", "it", "<", "args", ".", "iters", ":", "\n", "        ", "switch", "=", "1.0", "if", "it", ">", "args", ".", "iters", "/", "2", "else", "0.0", "\n", "if", "it", "%", "11", "==", "0", "and", "switch", ":", "opt_switch", "=", "opt_switch", "+", "1", "\n", "\n", "if", "local", ":", "\n", "            ", "data", ",", "label", ",", "mean_w", ",", "var_w", "=", "next", "(", "batches", ")", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "", "else", ":", "\n", "            ", "data", ",", "label", "=", "next", "(", "batches", ")", "\n", "mean_w", "=", "1", ";", "var_w", "=", "1", ";", "\n", "\n", "", "data", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "label", "=", "torch", ".", "tensor", "(", "label", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "device", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "v", "=", "switch", "*", "(", "v", "+", "1e-5", ")", "+", "(", "1", "-", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "]", ",", "device", "=", "device", ")", "\n", "\n", "if", "mean_var", ":", "\n", "            ", "if", "opt_switch", "%", "2", "==", "0", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "/", "mean_w", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "m", ",", "v", "=", "mean", "(", "data", ")", ",", "var", "(", "data", ")", "\n", "d", "=", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "\n", "loss", "=", "-", "(", "-", "(", "d", ".", "log", "(", ")", "/", "2", "+", "d", "/", "v", "+", "v", ".", "log", "(", ")", "/", "2", ")", ")", "/", "var_w", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "-", "(", "-", "v", ".", "log", "(", ")", "-", "(", "m", ".", "flatten", "(", ")", "-", "label", ")", "**", "2", "/", "(", "2", "*", "v", ")", ")", "\n", "loss", "=", "loss", ".", "mean", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "it", "+=", "1", "\n", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'loss'", ":", "loss", ".", "item", "(", ")", "}", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loglike", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "rmse", ".", "append", "(", "(", "m", "-", "label", ")", ".", "pow", "(", "2.0", ")", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "params_m", ".", "append", "(", "[", "copy", ".", "deepcopy", "(", "p", ")", "for", "p", "in", "list", "(", "mean", ".", "parameters", "(", ")", ")", "]", ")", "\n", "params_v", ".", "append", "(", "[", "copy", ".", "deepcopy", "(", "p", ")", "for", "p", "in", "list", "(", "var", ".", "parameters", "(", ")", ")", "]", ")", "\n", "gradlist_m", ".", "append", "(", "[", "copy", ".", "deepcopy", "(", "p", ".", "grad", ")", "for", "p", "in", "list", "(", "mean", ".", "parameters", "(", ")", ")", "]", ")", "\n", "gradlist_v", ".", "append", "(", "[", "copy", ".", "deepcopy", "(", "p", ".", "grad", ")", "for", "p", "in", "list", "(", "var", ".", "parameters", "(", ")", ")", "]", ")", "\n", "\n", "", "", "progressBar", ".", "close", "(", ")", "\n", "\n", "return", "loglike", ",", "rmse", ",", "params_m", ",", "params_v", ",", "gradlist_m", ",", "gradlist_v", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.running_mean": [[155, 158], ["numpy.cumsum", "numpy.insert", "float"], "function", ["None"], ["", "def", "running_mean", "(", "x", ",", "N", ")", ":", "\n", "    ", "cumsum", "=", "np", ".", "cumsum", "(", "np", ".", "insert", "(", "x", ",", "0", ",", "0", ")", ")", "\n", "return", "(", "cumsum", "[", "N", ":", "]", "-", "cumsum", "[", ":", "-", "N", "]", ")", "/", "float", "(", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.transform": [[160, 162], ["numpy.sign", "numpy.log", "numpy.abs"], "function", ["None"], ["", "def", "transform", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "sign", "(", "x", ")", "*", "np", ".", "log", "(", "1", "+", "np", ".", "abs", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.sparsity_elem": [[164, 166], ["None"], "function", ["None"], ["", "def", "sparsity_elem", "(", "x", ")", ":", "\n", "    ", "return", "(", "x", "==", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.sparsity2_elem": [[168, 170], ["abs"], "function", ["None"], ["", "def", "sparsity2_elem", "(", "x", ",", "eps", "=", "0.01", ")", ":", "\n", "    ", "return", "(", "abs", "(", "x", ")", "<", "eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.BatchFlatten.forward": [[30, 33], ["x.reshape"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "x", ".", "reshape", "(", "n", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.BatchReshape.__init__": [[36, 39], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "s", ")", ":", "\n", "        ", "super", "(", "BatchReshape", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "s", "=", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.BatchReshape.forward": [[40, 43], ["x.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "n", "=", "x", ".", "shape", "[", "0", "]", "\n", "return", "x", ".", "reshape", "(", "n", ",", "*", "self", ".", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.__init__": [[67, 77], ["torch.nn.Module.__init__", "numpy.prod", "torch.device", "torch.device"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "direc", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "basemodel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "switch", "=", "0.0", "\n", "self", ".", "direc", "=", "direc", "\n", "self", ".", "c", "=", "in_size", "[", "0", "]", "\n", "self", ".", "h", "=", "in_size", "[", "1", "]", "\n", "self", ".", "w", "=", "in_size", "[", "2", "]", "\n", "self", ".", "in_size", "=", "np", ".", "prod", "(", "in_size", ")", "\n", "self", ".", "latent_size", "=", "latent_size", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "if", "cuda", "else", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder": [[78, 80], ["experiment_vae.basemodel.enc_mu", "experiment_vae.basemodel.enc_var"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "enc_mu", "(", "x", ")", ",", "self", ".", "enc_var", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.decoder": [[81, 85], ["experiment_vae.basemodel.dec_mu", "experiment_vae.basemodel.dec_var", "torch.tensor"], "methods", ["None"], ["", "def", "decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "x_mu", ",", "x_var", "=", "self", ".", "dec_mu", "(", "z", ")", ",", "self", ".", "dec_var", "(", "z", ")", "\n", "x_var", "=", "self", ".", "switch", "*", "x_var", "+", "(", "1", "-", "self", ".", "switch", ")", "*", "torch", ".", "tensor", "(", "[", "0.02", "**", "2", "]", ",", "device", "=", "z", ".", "device", ")", "\n", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.sample": [[86, 90], ["torch.randn", "experiment_vae.basemodel.decoder"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder"], ["", "def", "sample", "(", "self", ",", "N", ")", ":", "\n", "        ", "z", "=", "torch", ".", "randn", "(", "N", ",", "self", ".", "latent_size", ",", "device", "=", "self", ".", "device", ")", "\n", "x_mu", ",", "x_var", "=", "self", ".", "decoder", "(", "z", ")", "\n", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.forward": [[91, 108], ["experiment_vae.basemodel.encoder", "torch.distributions.Independent", "torch.distributions.Independent.rsample", "experiment_vae.basemodel.decoder", "torch.distributions.Independent", "torch.distributions.Independent.log_prob", "torch.distributions.Normal", "torch.distributions.Independent", "torch.distributions.Independent", "torch.distributions.Normal", "torch.distributions.Independent.log_prob", "torch.distributions.Independent.log_prob", "elbo.mean", "torch.distributions.Normal", "torch.distributions.Bernoulli", "torch.zeros_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob"], ["", "def", "forward", "(", "self", ",", "x", ",", "beta", "=", "1.0", ",", "epsilon", "=", "1e-2", ")", ":", "\n", "\n", "        ", "z_mu", ",", "z_var", "=", "self", ".", "encoder", "(", "x", ")", "\n", "q_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "z_mu", ",", "z_var", "+", "epsilon", ")", ",", "1", ")", "\n", "z", "=", "q_dist", ".", "rsample", "(", ")", "\n", "x_mu", ",", "x_var", "=", "self", ".", "decoder", "(", "z", ")", "\n", "if", "self", ".", "switch", ":", "\n", "            ", "p_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "x_mu", ",", "x_var", "+", "epsilon", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "p_dist", "=", "D", ".", "Independent", "(", "D", ".", "Bernoulli", "(", "x_mu", ")", ",", "1", ")", "\n", "\n", "", "prior", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "torch", ".", "zeros_like", "(", "z", ")", ",", "\n", "torch", ".", "ones_like", "(", "z", ")", ")", ",", "1", ")", "\n", "log_px", "=", "p_dist", ".", "log_prob", "(", "x", ")", "\n", "kl", "=", "q_dist", ".", "log_prob", "(", "z", ")", "-", "prior", ".", "log_prob", "(", "z", ")", "\n", "elbo", "=", "log_px", "-", "beta", "*", "kl", "\n", "return", "elbo", ".", "mean", "(", ")", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.evaluate": [[109, 123], ["torch.no_grad", "experiment_vae.basemodel.sample", "torch.distributions.Independent", "tqdm.tqdm.tqdm", "torch.distributions.Normal", "torch.tensor", "experiment_vae.basemodel.forward", "elbolist.append", "logpxlist.append", "torch.distributions.Independent.log_prob", "parzen_score.append", "numpy.array", "numpy.array", "numpy.array", "torch.tensor.reshape", "elbo.item", "logpx.mean().item", "torch.logsumexp().item", "logpx.mean", "torch.logsumexp", "torch.isfinite"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.sample", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob"], ["", "def", "evaluate", "(", "self", ",", "X", ",", "L", "=", "10", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "x_mu", ",", "x_var", "=", "self", ".", "sample", "(", "L", ")", "\n", "parzen_dist", "=", "D", ".", "Independent", "(", "D", ".", "Normal", "(", "x_mu", ",", "x_var", ")", ",", "1", ")", "\n", "elbolist", ",", "logpxlist", ",", "parzen_score", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "x", "in", "tqdm", "(", "X", ",", "desc", "=", "'evaluating'", ",", "unit", "=", "'samples'", ")", ":", "\n", "                ", "x", "=", "torch", ".", "tensor", "(", "x", ".", "reshape", "(", "1", ",", "-", "1", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "elbo", ",", "logpx", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "=", "self", ".", "forward", "(", "x", ")", "\n", "elbolist", ".", "append", "(", "elbo", ".", "item", "(", ")", ")", "\n", "logpxlist", ".", "append", "(", "logpx", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "score", "=", "parzen_dist", ".", "log_prob", "(", "x", ")", "# unstable sometimes", "\n", "parzen_score", ".", "append", "(", "torch", ".", "logsumexp", "(", "score", "[", "torch", ".", "isfinite", "(", "score", ")", "]", ",", "dim", "=", "0", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "elbolist", ")", ",", "np", ".", "array", "(", "logpxlist", ")", ",", "np", ".", "array", "(", "parzen_score", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.save_something": [[124, 178], ["experiment_vae.basemodel.eval", "torch.tensor().to", "experiment_vae.basemodel.forward", "x[].reshape", "x_mu[].clamp().reshape", "torch.normal().clamp().reshape", "torchvision.utils.save_image", "experiment_vae.basemodel.sample", "x_mu.clamp().reshape", "torch.normal().clamp().reshape", "torchvision.utils.save_image", "torchvision.utils.save_image", "torch.cat", "numpy.stack().T.astype", "model.decoder", "x_mu.clamp().reshape", "torch.normal().clamp().reshape", "torchvision.utils.save_image", "torchvision.utils.save_image", "matplotlib.figure", "matplotlib.imshow", "matplotlib.colorbar", "matplotlib.savefig", "matplotlib.figure", "matplotlib.plot", "hasattr", "matplotlib.savefig", "torch.tensor", "x_mu[].clamp", "torch.normal().clamp", "torch.tensor().to", "x_var.sum().log().reshape().detach().cpu().numpy", "z[].detach().cpu().numpy", "z[].detach().cpu().numpy", "matplotlib.plot", "x_mu.clamp", "torch.normal().clamp", "x_mu.clamp", "torch.normal().clamp", "experiment_vae.basemodel.C[].detach().cpu().numpy", "experiment_vae.basemodel.C[].detach().cpu().numpy", "torch.normal", "numpy.stack", "torch.tensor", "x_var.sum().log().reshape().detach().cpu", "z[].detach().cpu", "z[].detach().cpu", "torch.normal", "torch.normal", "experiment_vae.basemodel.C[].detach().cpu", "experiment_vae.basemodel.C[].detach().cpu", "m.flatten", "x_var.sum().log().reshape().detach", "z[].detach", "z[].detach", "numpy.meshgrid", "experiment_vae.basemodel.C[].detach", "experiment_vae.basemodel.C[].detach", "numpy.linspace", "numpy.linspace", "x_var.sum().log().reshape", "x_var.sum().log", "x_var.sum"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.sample", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot", "home.repos.pwc.inspect_result.SkafteNicki_john.None.toy_regression.plot"], ["", "", "def", "save_something", "(", "self", ",", "name", ",", "data", ")", ":", "\n", "        ", "current_state", "=", "self", ".", "training", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "x", "=", "torch", ".", "tensor", "(", "data", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "# Save reconstructions", "\n", "_", ",", "_", ",", "_", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "temp1", "=", "x", "[", ":", "10", "]", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "temp2", "=", "x_mu", "[", ":", "10", "]", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "temp3", "=", "torch", ".", "normal", "(", "x_mu", "[", ":", "10", "]", ",", "x_var", "[", ":", "10", "]", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "\n", "save_image", "(", "torch", ".", "cat", "(", "[", "temp1", ",", "temp2", ",", "temp3", "]", ",", "dim", "=", "0", ")", ",", "\n", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_recon.png'", ",", "nrow", "=", "10", ")", "\n", "\n", "# Make grid from latent space", "\n", "if", "self", ".", "latent_size", "==", "2", ":", "\n", "            ", "size", "=", "50", "\n", "grid", "=", "np", ".", "stack", "(", "[", "m", ".", "flatten", "(", ")", "for", "m", "in", "np", ".", "meshgrid", "(", "np", ".", "linspace", "(", "-", "4", ",", "4", ",", "size", ")", ",", "np", ".", "linspace", "(", "4", ",", "-", "4", ",", "size", ")", ")", "]", ")", ".", "T", ".", "astype", "(", "'float32'", ")", "\n", "x_mu", ",", "x_var", "=", "model", ".", "decoder", "(", "torch", ".", "tensor", "(", "grid", ")", ".", "to", "(", "model", ".", "device", ")", ")", "\n", "temp1", "=", "x_mu", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "temp2", "=", "torch", ".", "normal", "(", "x_mu", ",", "x_var", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "\n", "save_image", "(", "temp1", ",", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_grid1.png'", ",", "\n", "nrow", "=", "size", ")", "\n", "\n", "save_image", "(", "temp2", ",", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_grid2.png'", ",", "\n", "nrow", "=", "size", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "x_var", ".", "sum", "(", "dim", "=", "1", ")", ".", "log", "(", ")", ".", "reshape", "(", "size", ",", "size", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "savefig", "(", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_variance.png'", ")", "\n", "\n", "\n", "# Make plot of latent points", "\n", "", "if", "self", ".", "latent_size", "==", "2", ":", "\n", "            ", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "z", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "z", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'.'", ")", "\n", "if", "hasattr", "(", "self", ",", "\"C\"", ")", ":", "\n", "                ", "plt", ".", "plot", "(", "self", ".", "C", "[", ":", ",", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "self", ".", "C", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "'.'", ")", "\n", "", "plt", ".", "savefig", "(", "direc", "+", "'/'", "+", "name", "+", "'_latents.png'", ")", "\n", "\n", "# Make samples", "\n", "", "x_mu", ",", "x_var", "=", "self", ".", "sample", "(", "100", ")", "\n", "temp1", "=", "x_mu", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "temp2", "=", "torch", ".", "normal", "(", "x_mu", ",", "x_var", ")", ".", "clamp", "(", "0.0", ",", "1.0", ")", ".", "reshape", "(", "-", "1", ",", "self", ".", "c", ",", "self", ".", "h", ",", "self", ".", "w", ")", "\n", "\n", "save_image", "(", "temp1", ",", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_samples1.png'", ",", "nrow", "=", "10", ")", "\n", "\n", "save_image", "(", "temp2", ",", "self", ".", "direc", "+", "'/'", "+", "name", "+", "'_samples2.png'", ",", "nrow", "=", "10", ")", "\n", "\n", "self", ".", "training", "=", "current_state", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.vae.__init__": [[181, 215], ["experiment_vae.basemodel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "direc", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "vae", ",", "self", ")", ".", "__init__", "(", "in_size", ",", "direc", ",", "latent_size", ",", "cuda", ")", "\n", "\n", "self", ".", "enc_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "in_size", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "latent_size", ")", ")", "\n", "self", ".", "enc_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "in_size", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "latent_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "dec_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "in_size", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "dec_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "in_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.vae.fit": [[216, 255], ["experiment_vae.vae.train", "torch.optim.Adam", "torch.optim.Adam", "utils.batchify", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "torch.device", "experiment_vae.vae.cuda", "experiment_vae.vae.parameters", "itertools.chain", "torch.tensor", "experiment_vae.vae.forward", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.set_postfix", "loss[].append", "loss[].append", "loss[].append", "var.append", "experiment_vae.vae.dec_var.parameters", "numpy.minimum", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "log_px.mean().item", "kl.mean().item", "x_var.mean().item", "experiment_vae.vae.save_something", "next", "z_var.mean().item", "log_px.mean", "kl.mean", "x_var.mean", "str", "z_var.mean"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.save_something"], ["", "def", "fit", "(", "self", ",", "Xtrain", ",", "n_iters", "=", "100", ",", "lr", "=", "1e-3", ",", "batch_size", "=", "256", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "if", "self", ".", "device", "==", "torch", ".", "device", "(", "'cuda'", ")", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "dec_var", ".", "parameters", "(", ")", ")", ",", "lr", "=", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "batches", "=", "batchify", "(", "Xtrain", ",", "batch_size", "=", "batch_size", ",", "shuffel", "=", "True", ")", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'training'", ",", "total", "=", "n_iters", ",", "unit", "=", "'iter'", ")", "\n", "loss", ",", "var", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "]", "\n", "while", "it", "<", "n_iters", ":", "\n", "            ", "self", ".", "switch", "=", "1.0", "if", "it", ">", "n_iters", "/", "2", "else", "0.0", "\n", "anneling", "=", "np", ".", "minimum", "(", "1", ",", "it", "/", "(", "n_iters", "/", "2", ")", ")", "*", "beta", "\n", "x", "=", "torch", ".", "tensor", "(", "next", "(", "batches", ")", "[", "0", "]", ",", "device", "=", "self", ".", "device", ")", "\n", "elbo", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "\n", "if", "self", ".", "switch", ":", "\n", "                ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'elbo'", ":", "(", "-", "elbo", ")", ".", "item", "(", ")", ",", "'z_var'", ":", "z_var", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "'anneling'", ":", "anneling", "}", ")", "\n", "loss", "[", "0", "]", ".", "append", "(", "(", "-", "elbo", ")", ".", "item", "(", ")", ")", "\n", "loss", "[", "1", "]", ".", "append", "(", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "loss", "[", "2", "]", ".", "append", "(", "kl", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "var", ".", "append", "(", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "it", "+=", "1", "\n", "\n", "if", "it", "%", "2500", "==", "0", ":", "\n", "                ", "self", ".", "save_something", "(", "'it'", "+", "str", "(", "it", ")", ",", "Xtrain", "[", ":", ":", "20", "]", ")", "\n", "", "", "progressBar", ".", "close", "(", ")", "\n", "return", "loss", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.__init__": [[258, 291], ["experiment_vae.basemodel.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Softplus"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_size", ",", "direc", ",", "latent_size", "=", "2", ",", "cuda", "=", "True", ")", ":", "\n", "        ", "super", "(", "john", ",", "self", ")", ".", "__init__", "(", "in_size", ",", "direc", ",", "latent_size", ",", "cuda", ")", "\n", "self", ".", "opt_switch", "=", "1", "\n", "\n", "self", ".", "enc_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "in_size", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "latent_size", ")", ")", "\n", "self", ".", "enc_var", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "in_size", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "self", ".", "latent_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "dec_mu", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "in_size", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "alpha", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "in_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "self", ".", "beta", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "self", ".", "latent_size", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "self", ".", "in_size", ")", ",", "\n", "nn", ".", "Softplus", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.decoder": [[292, 312], ["experiment_vae.john.dec_mu", "utils.dist", "utils.translatedSigmoid", "experiment_vae.john.alpha", "experiment_vae.john.beta", "torch.distributions.Gamma", "utils.dist.min", "torch.distributions.Gamma.rsample", "torch.distributions.Gamma.rsample", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid"], ["", "def", "decoder", "(", "self", ",", "z", ")", ":", "\n", "        ", "x_mu", "=", "self", ".", "dec_mu", "(", "z", ")", "\n", "if", "self", ".", "switch", ":", "\n", "            ", "d", "=", "dist", "(", "z", ",", "self", ".", "C", ")", "\n", "d_min", "=", "d", ".", "min", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "s", "=", "translatedSigmoid", "(", "d_min", ",", "-", "6.907", "*", "0.3", ",", "0.3", ")", "\n", "alpha", "=", "self", ".", "alpha", "(", "z", ")", "\n", "beta", "=", "self", ".", "beta", "(", "z", ")", "\n", "gamma_dist", "=", "D", ".", "Gamma", "(", "alpha", "+", "1e-6", ",", "beta", "+", "1e-6", ")", "\n", "if", "self", ".", "training", ":", "\n", "                ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "[", "20", "]", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-6", ")", ")", "\n", "", "else", ":", "\n", "                ", "samples_var", "=", "gamma_dist", ".", "rsample", "(", "[", "50", "]", ")", "\n", "x_var", "=", "(", "1.0", "/", "(", "samples_var", "+", "1e-6", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "", "x_var", "=", "(", "1", "-", "s", ")", "*", "x_var", "+", "s", "*", "(", "10", "*", "torch", ".", "ones_like", "(", "x_var", ")", ")", "\n", "", "else", ":", "\n", "            ", "x_var", "=", "(", "0.02", "**", "2", ")", "*", "torch", ".", "ones_like", "(", "x_mu", ")", "\n", "\n", "", "return", "x_mu", ",", "x_var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit": [[313, 385], ["experiment_vae.john.train", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "utils.batchify", "locality_sampler.locality_sampler.local_batchify", "tqdm.tqdm.tqdm", "tqdm.tqdm.tqdm.close", "torch.device", "experiment_vae.john.cuda", "itertools.chain", "itertools.chain", "itertools.chain", "tqdm.tqdm.tqdm.update", "tqdm.tqdm.tqdm.set_postfix", "loss[].append", "loss[].append", "loss[].append", "var.append", "experiment_vae.john.enc_mu.parameters", "experiment_vae.john.enc_var.parameters", "experiment_vae.john.dec_mu.parameters", "experiment_vae.john.enc_mu.parameters", "experiment_vae.john.enc_var.parameters", "experiment_vae.john.dec_mu.parameters", "experiment_vae.john.alpha.parameters", "experiment_vae.john.beta.parameters", "numpy.minimum", "sklearn.cluster.KMeans", "sklearn.cluster.KMeans.fit", "torch.tensor().to", "next", "torch.tensor().to().to", "torch.optim.Adam.zero_grad", "experiment_vae.john.forward", "torch.optim.Adam.step", "next", "torch.tensor().to().to", "torch.tensor().to().to", "torch.tensor().to().to", "experiment_vae.john.forward", "experiment_vae.john.forward", "log_px.mean().item", "kl.mean().item", "x_var.mean().item", "experiment_vae.john.save_something", "[].detach().cpu().numpy", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "x_var.mean().item", "hasattr", "torch.tensor", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "kl.mean", "kl.mean", "log_px.mean", "kl.mean", "x_var.mean", "str", "[].detach().cpu", "utils.t_likelihood", "utils.t_likelihood", "x_var.mean", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].detach", "experiment_vae.john.encoder", "torch.tensor().to", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_gradient.local_batchify", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.john.fit", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.save_something", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood", "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.basemodel.encoder"], ["", "def", "fit", "(", "self", ",", "Xtrain", ",", "n_iters", "=", "100", ",", "lr", "=", "1e-3", ",", "batch_size", "=", "250", ",", "n_clusters", "=", "50", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "self", ".", "train", "(", ")", "\n", "if", "self", ".", "device", "==", "torch", ".", "device", "(", "'cuda'", ")", ":", "\n", "            ", "self", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer1", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "enc_mu", ".", "parameters", "(", ")", ",", "\n", "self", ".", "enc_var", ".", "parameters", "(", ")", ",", "\n", "self", ".", "dec_mu", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "optimizer2", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "enc_mu", ".", "parameters", "(", ")", ",", "\n", "self", ".", "enc_var", ".", "parameters", "(", ")", ",", "\n", "self", ".", "dec_mu", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "optimizer3", "=", "torch", ".", "optim", ".", "Adam", "(", "chain", "(", "self", ".", "alpha", ".", "parameters", "(", ")", ",", "\n", "self", ".", "beta", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "lr", ")", "\n", "\n", "it", "=", "0", "\n", "batches", "=", "batchify", "(", "Xtrain", ",", "batch_size", "=", "batch_size", ",", "shuffel", "=", "True", ")", "\n", "local_batches", "=", "local_batchify", "(", "Xtrain", ")", "\n", "progressBar", "=", "tqdm", "(", "desc", "=", "'training'", ",", "total", "=", "n_iters", ",", "unit", "=", "'iter'", ")", "\n", "loss", ",", "var", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "[", "]", "\n", "while", "it", "<", "n_iters", ":", "\n", "            ", "self", ".", "switch", "=", "1.0", "if", "it", ">", "n_iters", "/", "2", "else", "0.0", "\n", "anneling", "=", "np", ".", "minimum", "(", "1", ",", "it", "/", "(", "n_iters", "/", "2", ")", ")", "*", "beta", "\n", "#self.opt_switch = (self.opt_switch+1) if (it % 11 == 0 and self.switch) else self.opt_switch", "\n", "if", "self", ".", "switch", "and", "(", "it", "%", "1000", "==", "0", "or", "not", "hasattr", "(", "self", ",", "\"C\"", ")", ")", ":", "\n", "                ", "kmeans", "=", "KMeans", "(", "n_clusters", "=", "n_clusters", ")", "\n", "kmeans", ".", "fit", "(", "self", ".", "encoder", "(", "torch", ".", "tensor", "(", "Xtrain", ")", ".", "to", "(", "self", ".", "device", ")", ")", "[", "0", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "self", ".", "C", "=", "torch", ".", "tensor", "(", "kmeans", ".", "cluster_centers_", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "if", "not", "self", ".", "switch", ":", "\n", "                ", "x", "=", "next", "(", "batches", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "optimizer1", ".", "zero_grad", "(", ")", "\n", "elbo", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer1", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "x", ",", "mean_w", ",", "var_w", "=", "next", "(", "local_batches", ")", "\n", "x", "=", "torch", ".", "tensor", "(", "x", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "mean_w", "=", "torch", ".", "tensor", "(", "mean_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "var_w", "=", "torch", ".", "tensor", "(", "var_w", ")", ".", "to", "(", "torch", ".", "float32", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "elbo", ",", "logpx", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "if", "self", ".", "opt_switch", "%", "2", "==", "0", ":", "\n", "                    ", "optimizer2", ".", "zero_grad", "(", ")", "\n", "elbo", "=", "t_likelihood", "(", "x", ",", "x_mu", ",", "x_var", ",", "mean_w", ")", "/", "Xtrain", ".", "shape", "[", "0", "]", "-", "kl", ".", "mean", "(", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer2", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                    ", "optimizer3", ".", "zero_grad", "(", ")", "\n", "elbo", "=", "t_likelihood", "(", "x", ",", "x_mu", ",", "x_var", ",", "mean_w", ")", "/", "Xtrain", ".", "shape", "[", "0", "]", "-", "kl", ".", "mean", "(", ")", "\n", "(", "-", "elbo", ")", ".", "backward", "(", ")", "\n", "optimizer3", ".", "step", "(", ")", "\n", "\n", "", "elbo", ",", "log_px", ",", "kl", ",", "x_mu", ",", "x_var", ",", "z", ",", "z_mu", ",", "z_var", "=", "self", ".", "forward", "(", "x", ",", "anneling", ")", "\n", "\n", "", "progressBar", ".", "update", "(", ")", "\n", "progressBar", ".", "set_postfix", "(", "{", "'elbo'", ":", "(", "-", "elbo", ")", ".", "item", "(", ")", ",", "'x_var'", ":", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ",", "'anneling'", ":", "anneling", "}", ")", "\n", "loss", "[", "0", "]", ".", "append", "(", "(", "-", "elbo", ")", ".", "item", "(", ")", ")", "\n", "loss", "[", "1", "]", ".", "append", "(", "log_px", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "loss", "[", "2", "]", ".", "append", "(", "kl", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "var", ".", "append", "(", "x_var", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "it", "+=", "1", "\n", "\n", "if", "it", "%", "2500", "==", "0", ":", "\n", "                ", "self", ".", "save_something", "(", "'it'", "+", "str", "(", "it", ")", ",", "Xtrain", "[", ":", ":", "20", "]", ")", "\n", "\n", "", "", "progressBar", ".", "close", "(", ")", "\n", "return", "loss", ",", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.experiment_vae.argparser": [[45, 64], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "argparser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "\n", "gs", "=", "parser", ".", "add_argument_group", "(", "'General settings'", ")", "\n", "gs", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "'vae'", ",", "help", "=", "'model to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "'fashionmnist'", ",", "help", "=", "'dataset to use'", ")", "\n", "gs", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'use cuda'", ")", "\n", "\n", "ms", "=", "parser", ".", "add_argument_group", "(", "'Model specific settings'", ")", "\n", "ms", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'batch size'", ")", "\n", "ms", ".", "add_argument", "(", "'--shuffel'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'shuffel data during training'", ")", "\n", "ms", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'learning rate'", ")", "\n", "ms", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'scaling of kl term'", ")", "\n", "ms", ".", "add_argument", "(", "'--iters'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'number of iterations'", ")", "\n", "ms", ".", "add_argument", "(", "'--latent_size'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "help", "=", "'latent space size'", ")", "\n", "\n", "# Parse and return", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.Norm2.__init__": [[23, 26], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "1", ")", ":", "\n", "        ", "super", "(", "Norm2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.Norm2.forward": [[27, 29], ["torch.sum"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "x", "**", "2", ",", "dim", "=", "self", ".", "dim", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.PosLinear.forward": [[32, 37], ["torch.nn.functional.linear", "torch.nn.functional.linear", "torch.nn.functional.softplus", "torch.nn.functional.softplus", "torch.nn.functional.softplus"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "return", "F", ".", "linear", "(", "x", ",", "F", ".", "softplus", "(", "self", ".", "weight", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "linear", "(", "x", ",", "F", ".", "softplus", "(", "self", ".", "weight", ")", ",", "F", ".", "softplus", "(", "self", ".", "bias", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.Reciprocal.__init__": [[40, 43], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "b", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "Reciprocal", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "b", "=", "b", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.Reciprocal.forward": [[44, 46], ["torch.reciprocal"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "reciprocal", "(", "x", "+", "self", ".", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.OneMinusX.forward": [[49, 51], ["None"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "1", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF.__init__": [[54, 67], ["torch.nn.Module.__init__", "isinstance", "torch.nn.Parameter", "beta.view", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "None", ",", "num_points", "=", "None", ",", "points", "=", "None", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "RBF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "points", "is", "None", "and", "dim", "is", "not", "None", "and", "num_points", "is", "not", "None", ")", "or", "(", "points", "is", "not", "None", "and", "dim", "is", "None", "and", "num_points", "is", "None", ")", ",", "'Either dim or num_points has to be defined else points'", "\n", "if", "points", "is", "None", ":", "\n", "            ", "self", ".", "points", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "num_points", ",", "dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "points", "=", "points", "\n", "", "if", "isinstance", "(", "beta", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "self", ".", "beta", "=", "beta", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF.__dist2__": [[68, 73], ["d2.clamp", "torch.mm", "utils.RBF.points.transpose"], "methods", ["None"], ["", "", "def", "__dist2__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "points_norm", "=", "(", "self", ".", "points", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "d2", "=", "x_norm", "+", "points_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "self", ".", "points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "return", "d2", ".", "clamp", "(", "min", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF.forward": [[74, 77], ["utils.RBF.__dist2__", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF2.__dist2__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "D2", "=", "self", ".", "__dist2__", "(", "x", ")", "# |x|-by-|points|", "\n", "return", "torch", ".", "exp", "(", "-", "self", ".", "beta", "*", "D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF2.__init__": [[80, 84], ["torch.nn.Module.__init__", "torch.randn().cuda", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "None", ",", "num_points", "=", "None", ",", "points", "=", "None", ",", "beta", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "RBF2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "points", "=", "torch", ".", "randn", "(", "num_points", ",", "dim", ")", ".", "cuda", "(", ")", "\n", "self", ".", "beta", "=", "beta", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF2.__dist2__": [[85, 90], ["d2.clamp", "torch.mm", "utils.RBF2.points.transpose"], "methods", ["None"], ["", "def", "__dist2__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_norm", "=", "(", "x", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "points_norm", "=", "(", "self", ".", "points", "**", "2", ")", ".", "sum", "(", "1", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "d2", "=", "x_norm", "+", "points_norm", "-", "2.0", "*", "torch", ".", "mm", "(", "x", ",", "self", ".", "points", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "return", "d2", ".", "clamp", "(", "min", "=", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF2.forward": [[91, 94], ["utils.RBF2.__dist2__", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.RBF2.__dist2__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "D2", "=", "self", ".", "__dist2__", "(", "x", ")", "# |x|-by-|points|", "\n", "return", "torch", ".", "exp", "(", "-", "self", ".", "beta", "*", "D2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.__init__": [[99, 102], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "MixtureDist", ",", "ComponentDist", ")", ":", "\n", "        ", "self", ".", "MixtureDist", "=", "MixtureDist", "# D.Categorical with K shape", "\n", "self", ".", "ComponentDist", "=", "ComponentDist", "# D.Distribution with K x d shape", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob": [[103, 107], ["utils.gmm.ComponentDist.log_prob", "torch.log_softmax", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.gmm.log_prob"], ["", "def", "log_prob", "(", "self", ",", "x", ")", ":", "\n", "        ", "log_prob", "=", "self", ".", "ComponentDist", ".", "log_prob", "(", "x", "[", ":", ",", "None", ",", ":", "]", ")", "# N x k", "\n", "log_mix", "=", "torch", ".", "log_softmax", "(", "self", ".", "MixtureDist", ".", "logits", ",", "dim", "=", "-", "1", ")", "\n", "return", "torch", ".", "logsumexp", "(", "log_prob", "+", "log_mix", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.positivelinear.__init__": [[110, 114], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size_out", ")", ":", "\n", "        ", "super", "(", "positivelinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "a", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "size_out", ")", ")", "\n", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "size_out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.positivelinear.forward": [[115, 117], ["torch.nn.functional.softplus", "torch.nn.functional.softplus"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "a", ")", "*", "x", "+", "nn", ".", "functional", ".", "softplus", "(", "self", ".", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.timer.__init__": [[143, 147], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "timings", "=", "[", "]", "\n", "self", ".", "start", "=", "0", "\n", "self", ".", "stop", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.timer.begin": [[148, 150], ["time.time"], "methods", ["None"], ["", "def", "begin", "(", "self", ")", ":", "\n", "        ", "self", ".", "start", "=", "time", ".", "time", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.timer.end": [[151, 154], ["time.time", "utils.timer.timings.append"], "methods", ["None"], ["", "def", "end", "(", "self", ")", ":", "\n", "        ", "self", ".", "stop", "=", "time", ".", "time", "(", ")", "\n", "self", ".", "timings", ".", "append", "(", "self", ".", "stop", "-", "self", ".", "start", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.timer.res": [[155, 158], ["print", "print", "numpy.array().sum", "numpy.array().mean", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "res", "(", "self", ")", ":", "\n", "        ", "print", "(", "'Total train time: {0:.3f}'", ".", "format", "(", "np", ".", "array", "(", "self", ".", "timings", ")", ".", "sum", "(", ")", ")", ")", "\n", "print", "(", "'Train time per model: {0:.3f}'", ".", "format", "(", "np", ".", "array", "(", "self", ".", "timings", ")", ".", "mean", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__": [[227, 230], ["torch.nn.Module.__init__", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.__init__"], ["    ", "def", "__init__", "(", "self", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "super", "(", "GaussianDropout", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "alpha", "=", "torch", ".", "Tensor", "(", "[", "alpha", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.GaussianDropout.forward": [[231, 247], ["utils.GaussianDropout.train", "torch.autograd.Variable", "epsilon.cuda.cuda.cuda", "torch.randn", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Sample noise   e ~ N(1, alpha)\n        Multiply noise h = h_ * e\n        \"\"\"", "\n", "if", "self", ".", "train", "(", ")", ":", "\n", "# N(1, alpha)", "\n", "            ", "epsilon", "=", "torch", ".", "randn", "(", "x", ".", "size", "(", ")", ")", "*", "self", ".", "alpha", "+", "1", "\n", "\n", "epsilon", "=", "Variable", "(", "epsilon", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "                ", "epsilon", "=", "epsilon", ".", "cuda", "(", ")", "\n", "\n", "", "return", "x", "*", "epsilon", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.translatedSigmoid": [[119, 122], ["torch.sigmoid"], "function", ["None"], ["", "", "def", "translatedSigmoid", "(", "x", ",", "trans", ",", "scale", ")", ":", "\n", "    ", "x", "=", "(", "x", "+", "trans", ")", "/", "scale", "\n", "return", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.dist": [[124, 129], ["dist.clamp", "torch.matmul", "X.norm", "Y.norm", "Y.t"], "function", ["None"], ["", "def", "dist", "(", "X", ",", "Y", ")", ":", "# X:  N x d , Y: M x d", "\n", "    ", "dist", "=", "X", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "**", "2", "+", "Y", ".", "norm", "(", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "False", ")", "**", "2", "-", "2", "*", "torch", ".", "matmul", "(", "X", ",", "Y", ".", "t", "(", ")", ")", "\n", "return", "dist", ".", "clamp", "(", "0.0", ")", "# N x M", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.plotpairwise": [[131, 139], ["range", "range", "fig.add_subplot", "fig.add_subplot.hist", "fig.add_subplot.scatter"], "function", ["None"], ["", "def", "plotpairwise", "(", "X", ",", "fig", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "            ", "ax", "=", "fig", ".", "add_subplot", "(", "4", ",", "4", ",", "1", "+", "i", "*", "4", "+", "j", ")", "\n", "if", "i", "==", "j", ":", "\n", "                ", "ax", ".", "hist", "(", "X", "[", ":", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "ax", ".", "scatter", "(", "X", "[", ":", ",", "i", "]", ",", "X", "[", ":", ",", "j", "]", ",", "s", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.batchify": [[160, 182], ["numpy.random.permutation"], "function", ["None"], ["", "", "def", "batchify", "(", "*", "arrays", ",", "batch_size", "=", "10", ",", "shuffel", "=", "True", ")", ":", "\n", "    ", "\"\"\" Function that defines a generator that keeps outputting new batches\n        for the input arrays infinit times.\n    Arguments:\n        *arrays: a number of arrays all assume to have same length along the\n            first dimension\n        batch_size: int, size of each batch \n        shuffel: bool, if the arrays should be shuffeled when we have reached\n            the end\n    \"\"\"", "\n", "N", "=", "arrays", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "c", "=", "-", "1", "\n", "while", "True", ":", "\n", "        ", "c", "+=", "1", "\n", "if", "c", "*", "batch_size", ">=", "N", ":", "# reset if we reach end of array", "\n", "            ", "c", "=", "0", "\n", "if", "shuffel", ":", "\n", "                ", "perm_idx", "=", "np", ".", "random", ".", "permutation", "(", "N", ")", "\n", "arrays", "=", "[", "a", "[", "perm_idx", "]", "for", "a", "in", "arrays", "]", "\n", "", "", "lower", "=", "c", "*", "batch_size", "\n", "upper", "=", "(", "c", "+", "1", ")", "*", "batch_size", "\n", "yield", "[", "a", "[", "lower", ":", "upper", "]", "for", "a", "in", "arrays", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob": [[184, 190], ["isinstance", "math.log", "numpy.log", "var.flatten", "var.flatten().log", "var.flatten", "var.flatten", "mean.flatten", "mean.flatten", "var.flatten"], "function", ["None"], ["", "", "def", "normal_log_prob", "(", "x", ",", "mean", ",", "var", ")", ":", "\n", "    ", "c", "=", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "# numpy implementation", "\n", "        ", "return", "c", "-", "np", ".", "log", "(", "var", ".", "flatten", "(", ")", ")", "/", "2", "-", "(", "x", "-", "mean", ".", "flatten", "(", ")", ")", "**", "2", "/", "(", "2", "*", "var", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "# torch implementation", "\n", "        ", "return", "c", "-", "var", ".", "flatten", "(", ")", ".", "log", "(", ")", "/", "2", "-", "(", "x", "-", "mean", ".", "flatten", "(", ")", ")", "**", "2", "/", "(", "2", "*", "var", ".", "flatten", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normal_log_prob_w_prior": [[192, 198], ["isinstance", "math.log", "numpy.log", "var.mean().flatten().log", "var.mean().flatten", "mean.flatten", "mean.flatten", "var.mean().flatten", "var.mean", "var.mean"], "function", ["None"], ["", "", "def", "normal_log_prob_w_prior", "(", "x", ",", "mean", ",", "var", ")", ":", "\n", "    ", "c", "=", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "\n", "if", "isinstance", "(", "x", ",", "np", ".", "ndarray", ")", ":", "# numpy implementation", "\n", "        ", "return", "c", "-", "np", ".", "log", "(", "var", ".", "mean", "(", "dim", "=", "0", ")", ".", "flatten", "(", ")", ")", "/", "2", "-", "(", "x", "-", "mean", ".", "flatten", "(", ")", ")", "**", "2", "/", "(", "2", "*", "var", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "flatten", "(", ")", "\n", "", "else", ":", "# torch implementation", "\n", "        ", "return", "c", "-", "var", ".", "mean", "(", "dim", "=", "0", ")", ".", "flatten", "(", ")", ".", "log", "(", ")", "/", "2", "-", "(", "x", "-", "mean", ".", "flatten", "(", ")", ")", "**", "2", "/", "(", "2", "*", "var", ")", ".", "mean", "(", "dim", "=", "0", ")", ".", "flatten", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.t_likelihood": [[200, 213], ["utils.logmeanexp", "A.sum.sum", "torch.ones", "math.log", "w.reshape", "var.log"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.logmeanexp"], ["", "", "def", "t_likelihood", "(", "x", ",", "mean", ",", "var", ",", "w", "=", "None", ")", ":", "\n", "    ", "w", "=", "torch", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ",", "device", "=", "x", ".", "device", ")", "if", "w", "is", "None", "else", "w", "\n", "\n", "c", "=", "-", "0.5", "*", "math", ".", "log", "(", "2", "*", "math", ".", "pi", ")", "\n", "A", "=", "logmeanexp", "(", "c", "-", "var", ".", "log", "(", ")", "/", "2", "-", "(", "x", "-", "mean", ")", "**", "2", "/", "(", "2", "*", "var", ")", ",", "dim", "=", "0", ")", "\n", "# mean shape : [batch,dim], var shape [num,draws,batch,dim]", "\n", "# shape [batch, dim]", "\n", "A", "=", "A", "/", "w", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "# mean over batch size with inclusion prob if given", "\n", "# mean over dim", "\n", "A", "=", "A", ".", "sum", "(", ")", "\n", "\n", "return", "A", "\n", "#%%", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.normalize_y": [[214, 219], ["y.mean", "y.std"], "function", ["None"], ["", "def", "normalize_y", "(", "y", ")", ":", "\n", "    ", "y_mean", "=", "y", ".", "mean", "(", ")", "\n", "y_std", "=", "y", ".", "std", "(", ")", "\n", "y", "=", "(", "y", "-", "y_mean", ")", "/", "y_std", "\n", "return", "y", ",", "y_mean", ",", "y_std", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.logmeanexp": [[221, 224], ["inputs.max"], "function", ["None"], ["", "def", "logmeanexp", "(", "inputs", ",", "dim", "=", "0", ")", ":", "\n", "    ", "input_max", "=", "inputs", ".", "max", "(", "dim", "=", "dim", ")", "[", "0", "]", "\n", "return", "(", "inputs", "-", "input_max", ")", ".", "exp", "(", ")", ".", "mean", "(", "dim", "=", "dim", ")", ".", "log", "(", ")", "+", "input_max", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.Gaus_Dropout": [[248, 250], ["utils.GaussianDropout"], "function", ["None"], ["", "", "", "def", "Gaus_Dropout", "(", "p", ")", ":", "\n", "    ", "return", "GaussianDropout", "(", "p", "/", "(", "1", "-", "p", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._loader": [[252, 264], ["os.path.join", "os.path.join", "np.frombuffer().reshape.reshape", "gzip.open", "numpy.frombuffer", "gzip.open", "numpy.frombuffer().reshape", "lbpath.read", "len", "numpy.frombuffer", "imgpath.read"], "function", ["None"], ["", "def", "_loader", "(", "path", ",", "kind", "=", "'train'", ")", ":", "\n", "    ", "''' Specialized loaded meant to be used to load the mnist dataset '''", "\n", "labels_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'%s-labels-idx1-ubyte.gz'", "%", "kind", ")", "\n", "images_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'%s-images-idx3-ubyte.gz'", "%", "kind", ")", "\n", "\n", "with", "gzip", ".", "open", "(", "labels_path", ",", "'rb'", ")", "as", "lbpath", ":", "\n", "        ", "labels", "=", "np", ".", "frombuffer", "(", "lbpath", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "offset", "=", "8", ")", "\n", "\n", "", "with", "gzip", ".", "open", "(", "images_path", ",", "'rb'", ")", "as", "imgpath", ":", "\n", "        ", "images", "=", "np", ".", "frombuffer", "(", "imgpath", ".", "read", "(", ")", ",", "dtype", "=", "np", ".", "uint8", ",", "offset", "=", "16", ")", ".", "reshape", "(", "len", "(", "labels", ")", ",", "784", ")", "\n", "", "images", "=", "images", ".", "reshape", "(", "-", "1", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._unpickle": [[266, 271], ["open", "pickle.load"], "function", ["None"], ["", "def", "_unpickle", "(", "file", ")", ":", "\n", "    ", "''' Small function to unpickle files, used to extract cifar10 dataset '''", "\n", "with", "open", "(", "file", ",", "'rb'", ")", "as", "fo", ":", "\n", "        ", "dict", "=", "pickle", ".", "load", "(", "fo", ",", "encoding", "=", "'bytes'", ")", "\n", "", "return", "dict", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.to_float": [[273, 275], ["a.astype"], "function", ["None"], ["", "def", "to_float", "(", "*", "arrays", ")", ":", "\n", "    ", "return", "[", "a", ".", "astype", "(", "'float32'", ")", "for", "a", "in", "arrays", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.get_mnist": [[277, 282], ["utils._loader", "utils._loader", "utils.to_float"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._loader", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._loader", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.to_float"], ["", "def", "get_mnist", "(", ")", ":", "\n", "    ", "''' Returns the mnist dataset '''", "\n", "Xtrain", ",", "ytrain", "=", "_loader", "(", "'data/image_datasets/mnist/'", ",", "kind", "=", "'train'", ")", "\n", "Xtest", ",", "ytest", "=", "_loader", "(", "'data/image_datasets/mnist/'", ",", "kind", "=", "'t10k'", ")", "\n", "return", "to_float", "(", "Xtrain", ",", "ytrain", ",", "Xtest", ",", "ytest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.get_fashionmnist": [[284, 289], ["utils._loader", "utils._loader", "utils.to_float"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._loader", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._loader", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.to_float"], ["", "def", "get_fashionmnist", "(", ")", ":", "\n", "    ", "''' Returns the fashion mnist dataset '''", "\n", "Xtrain", ",", "ytrain", "=", "_loader", "(", "'data/image_datasets/fashionmnist/'", ",", "kind", "=", "'train'", ")", "\n", "Xtest", ",", "ytest", "=", "_loader", "(", "'data/image_datasets/fashionmnist/'", ",", "kind", "=", "'t10k'", ")", "\n", "return", "to_float", "(", "Xtrain", ",", "ytrain", ",", "Xtest", ",", "ytest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.get_cifar10": [[291, 304], ["numpy.zeros", "numpy.zeros", "range", "Xtrain.reshape.reshape", "utils._unpickle", "data[].reshape", "numpy.array", "utils.to_float", "utils._unpickle", "str"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._unpickle", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.to_float", "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils._unpickle"], ["", "def", "get_cifar10", "(", ")", ":", "\n", "    ", "''' Returns the cifar10 dataset '''", "\n", "Xtrain", "=", "np", ".", "zeros", "(", "(", "50000", ",", "3072", ")", ")", "\n", "ytrain", "=", "np", ".", "zeros", "(", "(", "50000", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "6", ")", ":", "\n", "        ", "data", "=", "_unpickle", "(", "'data/image_datasets/cifar10/data_batch_'", "+", "str", "(", "i", ")", ")", "\n", "Xtrain", "[", "(", "i", "-", "1", ")", "*", "10000", ":", "i", "*", "10000", "]", "=", "data", "[", "b'data'", "]", "\n", "ytrain", "[", "(", "i", "-", "1", ")", "*", "10000", ":", "i", "*", "10000", "]", "=", "data", "[", "b'labels'", "]", "\n", "", "Xtrain", "=", "Xtrain", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "data", "=", "_unpickle", "(", "'data/image_datasets/cifar10/test_batch'", ")", "\n", "Xtest", "=", "data", "[", "b'data'", "]", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "ytest", "=", "np", ".", "array", "(", "data", "[", "b'labels'", "]", ")", "\n", "return", "to_float", "(", "Xtrain", ",", "ytrain", ",", "Xtest", ",", "ytest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.get_svhn": [[306, 315], ["scipy.loadmat", "scipy.loadmat", "train[].transpose", "test[].transpose", "train[].flatten", "test[].flatten", "utils.to_float"], "function", ["home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.to_float"], ["", "def", "get_svhn", "(", ")", ":", "\n", "    ", "''' Returns the svhn dataset '''", "\n", "train", "=", "sio", ".", "loadmat", "(", "'data/image_datasets/svhn/train_32x32.mat'", ")", "\n", "test", "=", "sio", ".", "loadmat", "(", "'data/image_datasets/svhn/test_32x32.mat'", ")", "\n", "Xtrain", "=", "train", "[", "'X'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "Xtest", "=", "test", "[", "'X'", "]", ".", "transpose", "(", "3", ",", "2", ",", "0", ",", "1", ")", "\n", "ytrain", "=", "train", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "ytest", "=", "test", "[", "'y'", "]", ".", "flatten", "(", ")", "\n", "return", "to_float", "(", "Xtrain", ",", "ytrain", ",", "Xtest", ",", "ytest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SkafteNicki_john.None.utils.get_image_dataset": [[317, 322], ["None"], "function", ["None"], ["", "def", "get_image_dataset", "(", "name", ")", ":", "\n", "    ", "''' Get a dataset based on its name '''", "\n", "d", "=", "{", "'mnist'", ":", "get_mnist", ",", "'fashionmnist'", ":", "get_fashionmnist", ",", "\n", "'cifar10'", ":", "get_cifar10", ",", "'svhn'", ":", "get_svhn", "}", "\n", "return", "d", "[", "name", "]", "(", ")", "", "", ""]]}