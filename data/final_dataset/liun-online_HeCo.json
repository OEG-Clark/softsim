{"home.repos.pwc.inspect_result.liun-online_HeCo.code.main.train": [[31, 96], ["utils.load_data", "int", "print", "print", "print", "module.HeCo", "torch.optim.Adam", "torch.cuda.is_available", "datetime.datetime.now", "range", "print", "module.HeCo.load_state_dict", "module.HeCo.eval", "os.remove", "module.HeCo.get_embeds", "range", "datetime.datetime.now", "print", "len", "module.HeCo.parameters", "print", "module.HeCo.cuda", "pos.cuda.cuda", "label.cuda.cuda", "module.HeCo.train", "torch.optim.Adam.zero_grad", "module.HeCo.", "print", "model.backward", "torch.optim.Adam.step", "torch.load", "len", "utils.evaluate", "open", "pickle.dump", "open.close", "feat.cuda", "mp.cuda", "i.cuda", "i.cuda", "i.cuda", "model.data.cpu", "torch.save", "print", "model.get_embeds.cpu().data.numpy", "module.HeCo.state_dict", "str", "model.get_embeds.cpu"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_data", "home.repos.pwc.inspect_result.liun-online_HeCo.module.heco.HeCo.get_embeds", "home.repos.pwc.inspect_result.liun-online_HeCo.code.main.train", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.evaluate.evaluate"], ["def", "train", "(", ")", ":", "\n", "    ", "nei_index", ",", "feats", ",", "mps", ",", "pos", ",", "label", ",", "idx_train", ",", "idx_val", ",", "idx_test", "=", "load_data", "(", "args", ".", "dataset", ",", "args", ".", "ratio", ",", "args", ".", "type_num", ")", "\n", "nb_classes", "=", "label", ".", "shape", "[", "-", "1", "]", "\n", "feats_dim_list", "=", "[", "i", ".", "shape", "[", "1", "]", "for", "i", "in", "feats", "]", "\n", "P", "=", "int", "(", "len", "(", "mps", ")", ")", "\n", "print", "(", "\"seed \"", ",", "args", ".", "seed", ")", "\n", "print", "(", "\"Dataset: \"", ",", "args", ".", "dataset", ")", "\n", "print", "(", "\"The number of meta-paths: \"", ",", "P", ")", "\n", "\n", "model", "=", "HeCo", "(", "args", ".", "hidden_dim", ",", "feats_dim_list", ",", "args", ".", "feat_drop", ",", "args", ".", "attn_drop", ",", "\n", "P", ",", "args", ".", "sample_rate", ",", "args", ".", "nei_num", ",", "args", ".", "tau", ",", "args", ".", "lam", ")", "\n", "optimiser", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "weight_decay", "=", "args", ".", "l2_coef", ")", "\n", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'Using CUDA'", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "feats", "=", "[", "feat", ".", "cuda", "(", ")", "for", "feat", "in", "feats", "]", "\n", "mps", "=", "[", "mp", ".", "cuda", "(", ")", "for", "mp", "in", "mps", "]", "\n", "pos", "=", "pos", ".", "cuda", "(", ")", "\n", "label", "=", "label", ".", "cuda", "(", ")", "\n", "idx_train", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "idx_train", "]", "\n", "idx_val", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "idx_val", "]", "\n", "idx_test", "=", "[", "i", ".", "cuda", "(", ")", "for", "i", "in", "idx_test", "]", "\n", "\n", "", "cnt_wait", "=", "0", "\n", "best", "=", "1e9", "\n", "best_t", "=", "0", "\n", "\n", "starttime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "nb_epochs", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "optimiser", ".", "zero_grad", "(", ")", "\n", "loss", "=", "model", "(", "feats", ",", "pos", ",", "mps", ",", "nei_index", ")", "\n", "print", "(", "\"loss \"", ",", "loss", ".", "data", ".", "cpu", "(", ")", ")", "\n", "if", "loss", "<", "best", ":", "\n", "            ", "best", "=", "loss", "\n", "best_t", "=", "epoch", "\n", "cnt_wait", "=", "0", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "'HeCo_'", "+", "own_str", "+", "'.pkl'", ")", "\n", "", "else", ":", "\n", "            ", "cnt_wait", "+=", "1", "\n", "\n", "", "if", "cnt_wait", "==", "args", ".", "patience", ":", "\n", "            ", "print", "(", "'Early stopping!'", ")", "\n", "break", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimiser", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "'Loading {}th epoch'", ".", "format", "(", "best_t", ")", ")", "\n", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "'HeCo_'", "+", "own_str", "+", "'.pkl'", ")", ")", "\n", "model", ".", "eval", "(", ")", "\n", "os", ".", "remove", "(", "'HeCo_'", "+", "own_str", "+", "'.pkl'", ")", "\n", "embeds", "=", "model", ".", "get_embeds", "(", "feats", ",", "mps", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "idx_train", ")", ")", ":", "\n", "        ", "evaluate", "(", "embeds", ",", "args", ".", "ratio", "[", "i", "]", ",", "idx_train", "[", "i", "]", ",", "idx_val", "[", "i", "]", ",", "idx_test", "[", "i", "]", ",", "label", ",", "nb_classes", ",", "device", ",", "args", ".", "dataset", ",", "\n", "args", ".", "eva_lr", ",", "args", ".", "eva_wd", ")", "\n", "", "endtime", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "time", "=", "(", "endtime", "-", "starttime", ")", ".", "seconds", "\n", "print", "(", "\"Total time: \"", ",", "time", ",", "\"s\"", ")", "\n", "\n", "if", "args", ".", "save_emb", ":", "\n", "        ", "f", "=", "open", "(", "\"./embeds/\"", "+", "args", ".", "dataset", "+", "\"/\"", "+", "str", "(", "args", ".", "turn", ")", "+", "\".pkl\"", ",", "\"wb\"", ")", "\n", "pkl", ".", "dump", "(", "embeds", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.encode_onehot": [[7, 13], ["labels.reshape.reshape", "sklearn.preprocessing.OneHotEncoder", "sklearn.preprocessing.OneHotEncoder.fit", "sklearn.preprocessing.OneHotEncoder.transform().toarray", "sklearn.preprocessing.OneHotEncoder.transform"], "function", ["None"], ["def", "encode_onehot", "(", "labels", ")", ":", "\n", "    ", "labels", "=", "labels", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "enc", "=", "OneHotEncoder", "(", ")", "\n", "enc", ".", "fit", "(", "labels", ")", "\n", "labels_onehot", "=", "enc", ".", "transform", "(", "labels", ")", ".", "toarray", "(", ")", "\n", "return", "labels_onehot", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features": [[15, 23], ["numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot", "r_mat_inv.dot.todense", "r_mat_inv.dot.sum", "numpy.power", "numpy.isinf"], "function", ["None"], ["", "def", "preprocess_features", "(", "features", ")", ":", "\n", "    ", "\"\"\"Row-normalize feature matrix and convert to tuple representation\"\"\"", "\n", "rowsum", "=", "np", ".", "array", "(", "features", ".", "sum", "(", "1", ")", ")", "\n", "r_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "r_inv", "[", "np", ".", "isinf", "(", "r_inv", ")", "]", "=", "0.", "\n", "r_mat_inv", "=", "sp", ".", "diags", "(", "r_inv", ")", "\n", "features", "=", "r_mat_inv", ".", "dot", "(", "features", ")", "\n", "return", "features", ".", "todense", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj": [[25, 33], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.dot().transpose().dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "def", "normalize_adj", "(", "adj", ")", ":", "\n", "    ", "\"\"\"Symmetrically normalize adjacency matrix.\"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "rowsum", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "return", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor": [[35, 43], ["sparse_mx.tocoo().astype.tocoo().astype", "torch.from_numpy", "torch.from_numpy", "torch.Size", "torch.sparse.FloatTensor", "numpy.vstack().astype", "sparse_mx.tocoo().astype.tocoo", "numpy.vstack"], "function", ["None"], ["", "def", "sparse_mx_to_torch_sparse_tensor", "(", "sparse_mx", ")", ":", "\n", "    ", "\"\"\"Convert a scipy sparse matrix to a torch sparse tensor.\"\"\"", "\n", "sparse_mx", "=", "sparse_mx", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "th", ".", "from_numpy", "(", "\n", "np", ".", "vstack", "(", "(", "sparse_mx", ".", "row", ",", "sparse_mx", ".", "col", ")", ")", ".", "astype", "(", "np", ".", "int64", ")", ")", "\n", "values", "=", "th", ".", "from_numpy", "(", "sparse_mx", ".", "data", ")", "\n", "shape", "=", "th", ".", "Size", "(", "sparse_mx", ".", "shape", ")", "\n", "return", "th", ".", "sparse", ".", "FloatTensor", "(", "indices", ",", "values", ",", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_acm": [[45, 75], ["numpy.load().astype", "load_data.encode_onehot", "numpy.load", "numpy.load", "scipy.load_npz", "scipy.eye", "scipy.eye", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "numpy.load", "numpy.load", "numpy.load", "torch.LongTensor", "torch.LongTensor", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.normalize_adj", "load_data.normalize_adj", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.load", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.encode_onehot", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj"], ["", "def", "load_acm", "(", "ratio", ",", "type_num", ")", ":", "\n", "# The order of node types: 0 p 1 a 2 s", "\n", "    ", "path", "=", "\"../data/acm/\"", "\n", "label", "=", "np", ".", "load", "(", "path", "+", "\"labels.npy\"", ")", ".", "astype", "(", "'int32'", ")", "\n", "label", "=", "encode_onehot", "(", "label", ")", "\n", "nei_a", "=", "np", ".", "load", "(", "path", "+", "\"nei_a.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "nei_s", "=", "np", ".", "load", "(", "path", "+", "\"nei_s.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "feat_p", "=", "sp", ".", "load_npz", "(", "path", "+", "\"p_feat.npz\"", ")", "\n", "feat_a", "=", "sp", ".", "eye", "(", "type_num", "[", "1", "]", ")", "\n", "feat_s", "=", "sp", ".", "eye", "(", "type_num", "[", "2", "]", ")", "\n", "pap", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pap.npz\"", ")", "\n", "psp", "=", "sp", ".", "load_npz", "(", "path", "+", "\"psp.npz\"", ")", "\n", "pos", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pos.npz\"", ")", "\n", "train", "=", "[", "np", ".", "load", "(", "path", "+", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "test", "=", "[", "np", ".", "load", "(", "path", "+", "\"test_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "val", "=", "[", "np", ".", "load", "(", "path", "+", "\"val_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "\n", "label", "=", "th", ".", "FloatTensor", "(", "label", ")", "\n", "nei_a", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_a", "]", "\n", "nei_s", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_s", "]", "\n", "feat_p", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_p", ")", ")", "\n", "feat_a", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_a", ")", ")", "\n", "feat_s", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_s", ")", ")", "\n", "pap", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "pap", ")", ")", "\n", "psp", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "psp", ")", ")", "\n", "pos", "=", "sparse_mx_to_torch_sparse_tensor", "(", "pos", ")", "\n", "train", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "train", "]", "\n", "val", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "val", "]", "\n", "test", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "test", "]", "\n", "return", "[", "nei_a", ",", "nei_s", "]", ",", "[", "feat_p", ",", "feat_a", ",", "feat_s", "]", ",", "[", "pap", ",", "psp", "]", ",", "pos", ",", "label", ",", "train", ",", "val", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_dblp": [[77, 105], ["numpy.load().astype", "load_data.encode_onehot", "numpy.load", "scipy.load_npz().astype", "scipy.eye", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "numpy.load", "numpy.load", "numpy.load", "torch.LongTensor", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.normalize_adj", "load_data.normalize_adj", "load_data.normalize_adj", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.load", "scipy.load_npz", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.encode_onehot", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj"], ["", "def", "load_dblp", "(", "ratio", ",", "type_num", ")", ":", "\n", "# The order of node types: 0 a 1 p 2 c 3 t", "\n", "    ", "path", "=", "\"../data/dblp/\"", "\n", "label", "=", "np", ".", "load", "(", "path", "+", "\"labels.npy\"", ")", ".", "astype", "(", "'int32'", ")", "\n", "label", "=", "encode_onehot", "(", "label", ")", "\n", "nei_p", "=", "np", ".", "load", "(", "path", "+", "\"nei_p.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "feat_a", "=", "sp", ".", "load_npz", "(", "path", "+", "\"a_feat.npz\"", ")", ".", "astype", "(", "\"float32\"", ")", "\n", "feat_p", "=", "sp", ".", "eye", "(", "type_num", "[", "1", "]", ")", "\n", "apa", "=", "sp", ".", "load_npz", "(", "path", "+", "\"apa.npz\"", ")", "\n", "apcpa", "=", "sp", ".", "load_npz", "(", "path", "+", "\"apcpa.npz\"", ")", "\n", "aptpa", "=", "sp", ".", "load_npz", "(", "path", "+", "\"aptpa.npz\"", ")", "\n", "pos", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pos.npz\"", ")", "\n", "train", "=", "[", "np", ".", "load", "(", "path", "+", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "test", "=", "[", "np", ".", "load", "(", "path", "+", "\"test_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "val", "=", "[", "np", ".", "load", "(", "path", "+", "\"val_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "\n", "label", "=", "th", ".", "FloatTensor", "(", "label", ")", "\n", "nei_p", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_p", "]", "\n", "feat_p", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_p", ")", ")", "\n", "feat_a", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_a", ")", ")", "\n", "apa", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "apa", ")", ")", "\n", "apcpa", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "apcpa", ")", ")", "\n", "aptpa", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "aptpa", ")", ")", "\n", "pos", "=", "sparse_mx_to_torch_sparse_tensor", "(", "pos", ")", "\n", "train", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "train", "]", "\n", "val", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "val", "]", "\n", "test", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "test", "]", "\n", "return", "[", "nei_p", "]", ",", "[", "feat_a", ",", "feat_p", "]", ",", "[", "apa", ",", "apcpa", ",", "aptpa", "]", ",", "pos", ",", "label", ",", "train", ",", "val", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_aminer": [[107, 138], ["numpy.load().astype", "load_data.encode_onehot", "numpy.load", "numpy.load", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "numpy.load", "numpy.load", "numpy.load", "torch.LongTensor", "torch.LongTensor", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.normalize_adj", "load_data.normalize_adj", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.load", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.encode_onehot", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj"], ["", "def", "load_aminer", "(", "ratio", ",", "type_num", ")", ":", "\n", "# The order of node types: 0 p 1 a 2 r", "\n", "    ", "path", "=", "\"../data/aminer/\"", "\n", "label", "=", "np", ".", "load", "(", "path", "+", "\"labels.npy\"", ")", ".", "astype", "(", "'int32'", ")", "\n", "label", "=", "encode_onehot", "(", "label", ")", "\n", "nei_a", "=", "np", ".", "load", "(", "path", "+", "\"nei_a.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "nei_r", "=", "np", ".", "load", "(", "path", "+", "\"nei_r.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "# Because none of P, A or R has features, we assign one-hot encodings to all of them.", "\n", "feat_p", "=", "sp", ".", "eye", "(", "type_num", "[", "0", "]", ")", "\n", "feat_a", "=", "sp", ".", "eye", "(", "type_num", "[", "1", "]", ")", "\n", "feat_r", "=", "sp", ".", "eye", "(", "type_num", "[", "2", "]", ")", "\n", "pap", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pap.npz\"", ")", "\n", "prp", "=", "sp", ".", "load_npz", "(", "path", "+", "\"prp.npz\"", ")", "\n", "pos", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pos.npz\"", ")", "\n", "train", "=", "[", "np", ".", "load", "(", "path", "+", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "test", "=", "[", "np", ".", "load", "(", "path", "+", "\"test_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "val", "=", "[", "np", ".", "load", "(", "path", "+", "\"val_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "\n", "label", "=", "th", ".", "FloatTensor", "(", "label", ")", "\n", "nei_a", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_a", "]", "\n", "nei_r", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_r", "]", "\n", "feat_p", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_p", ")", ")", "\n", "feat_a", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_a", ")", ")", "\n", "feat_r", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_r", ")", ")", "\n", "pap", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "pap", ")", ")", "\n", "prp", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "prp", ")", ")", "\n", "pos", "=", "sparse_mx_to_torch_sparse_tensor", "(", "pos", ")", "\n", "train", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "train", "]", "\n", "val", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "val", "]", "\n", "test", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "test", "]", "\n", "return", "[", "nei_a", ",", "nei_r", "]", ",", "[", "feat_p", ",", "feat_a", ",", "feat_r", "]", ",", "[", "pap", ",", "prp", "]", ",", "pos", ",", "label", ",", "train", ",", "val", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_freebase": [[140, 177], ["numpy.load().astype", "load_data.encode_onehot", "numpy.load", "numpy.load", "numpy.load", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.eye", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "scipy.load_npz", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "load_data.sparse_mx_to_torch_sparse_tensor", "numpy.load", "numpy.load", "numpy.load", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.preprocess_features", "load_data.normalize_adj", "load_data.normalize_adj", "load_data.normalize_adj", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.load", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.encode_onehot", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.sparse_mx_to_torch_sparse_tensor", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.preprocess_features", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.normalize_adj"], ["", "def", "load_freebase", "(", "ratio", ",", "type_num", ")", ":", "\n", "# The order of node types: 0 m 1 d 2 a 3 w", "\n", "    ", "path", "=", "\"../data/freebase/\"", "\n", "label", "=", "np", ".", "load", "(", "path", "+", "\"labels.npy\"", ")", ".", "astype", "(", "'int32'", ")", "\n", "label", "=", "encode_onehot", "(", "label", ")", "\n", "nei_d", "=", "np", ".", "load", "(", "path", "+", "\"nei_d.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "nei_a", "=", "np", ".", "load", "(", "path", "+", "\"nei_a.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "nei_w", "=", "np", ".", "load", "(", "path", "+", "\"nei_w.npy\"", ",", "allow_pickle", "=", "True", ")", "\n", "feat_m", "=", "sp", ".", "eye", "(", "type_num", "[", "0", "]", ")", "\n", "feat_d", "=", "sp", ".", "eye", "(", "type_num", "[", "1", "]", ")", "\n", "feat_a", "=", "sp", ".", "eye", "(", "type_num", "[", "2", "]", ")", "\n", "feat_w", "=", "sp", ".", "eye", "(", "type_num", "[", "3", "]", ")", "\n", "# Because none of M, D, A or W has features, we assign one-hot encodings to all of them.", "\n", "mam", "=", "sp", ".", "load_npz", "(", "path", "+", "\"mam.npz\"", ")", "\n", "mdm", "=", "sp", ".", "load_npz", "(", "path", "+", "\"mdm.npz\"", ")", "\n", "mwm", "=", "sp", ".", "load_npz", "(", "path", "+", "\"mwm.npz\"", ")", "\n", "pos", "=", "sp", ".", "load_npz", "(", "path", "+", "\"pos.npz\"", ")", "\n", "train", "=", "[", "np", ".", "load", "(", "path", "+", "\"train_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "test", "=", "[", "np", ".", "load", "(", "path", "+", "\"test_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "val", "=", "[", "np", ".", "load", "(", "path", "+", "\"val_\"", "+", "str", "(", "i", ")", "+", "\".npy\"", ")", "for", "i", "in", "ratio", "]", "\n", "\n", "label", "=", "th", ".", "FloatTensor", "(", "label", ")", "\n", "nei_d", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_d", "]", "\n", "nei_a", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_a", "]", "\n", "nei_w", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "nei_w", "]", "\n", "feat_m", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_m", ")", ")", "\n", "feat_d", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_d", ")", ")", "\n", "feat_a", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_a", ")", ")", "\n", "feat_w", "=", "th", ".", "FloatTensor", "(", "preprocess_features", "(", "feat_w", ")", ")", "\n", "mam", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "mam", ")", ")", "\n", "mdm", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "mdm", ")", ")", "\n", "mwm", "=", "sparse_mx_to_torch_sparse_tensor", "(", "normalize_adj", "(", "mwm", ")", ")", "\n", "pos", "=", "sparse_mx_to_torch_sparse_tensor", "(", "pos", ")", "\n", "train", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "train", "]", "\n", "val", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "val", "]", "\n", "test", "=", "[", "th", ".", "LongTensor", "(", "i", ")", "for", "i", "in", "test", "]", "\n", "return", "[", "nei_d", ",", "nei_a", ",", "nei_w", "]", ",", "[", "feat_m", ",", "feat_d", ",", "feat_a", ",", "feat_w", "]", ",", "[", "mdm", ",", "mam", ",", "mwm", "]", ",", "pos", ",", "label", ",", "train", ",", "val", ",", "test", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_data": [[179, 189], ["load_data.load_acm", "load_data.load_dblp", "load_data.load_aminer", "load_data.load_freebase"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_acm", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_dblp", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_aminer", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.load_data.load_freebase"], ["", "def", "load_data", "(", "dataset", ",", "ratio", ",", "type_num", ")", ":", "\n", "    ", "if", "dataset", "==", "\"acm\"", ":", "\n", "        ", "data", "=", "load_acm", "(", "ratio", ",", "type_num", ")", "\n", "", "elif", "dataset", "==", "\"dblp\"", ":", "\n", "        ", "data", "=", "load_dblp", "(", "ratio", ",", "type_num", ")", "\n", "", "elif", "dataset", "==", "\"aminer\"", ":", "\n", "        ", "data", "=", "load_aminer", "(", "ratio", ",", "type_num", ")", "\n", "", "elif", "dataset", "==", "\"freebase\"", ":", "\n", "        ", "data", "=", "load_freebase", "(", "ratio", ",", "type_num", ")", "\n", "", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.evaluate.evaluate": [[14, 114], ["torch.CrossEntropyLoss", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "range", "open", "open.write", "open.close", "logreg.LogReg", "torch.optim.Adam", "torch.optim.Adam", "logreg.LogReg.to", "range", "val_accs.index", "accs.append", "val_macro_f1s.index", "macro_f1s.append", "macro_f1s_val.append", "val_micro_f1s.index", "micro_f1s.append", "torch.nn.functional.softmax", "auc_score_list.append", "print", "logreg.LogReg.parameters", "logreg.LogReg.train", "torch.optim.Adam.zero_grad", "logreg.LogReg.", "nn.CrossEntropyLoss.", "xent.backward", "torch.optim.Adam.step", "logreg.LogReg.", "torch.argmax", "torch.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "val_accs.append", "val_macro_f1s.append", "val_micro_f1s.append", "logreg.LogReg.", "torch.argmax", "torch.argmax", "sklearn.metrics.f1_score", "sklearn.metrics.f1_score", "test_accs.append", "test_macro_f1s.append", "test_micro_f1s.append", "logits_list.append", "max", "max", "max", "sklearn.metrics.roc_auc_score", "numpy.mean", "numpy.mean", "torch.sum().float", "torch.sum().float", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "val_acc.item", "torch.sum().float", "torch.sum().float", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "torch.argmax.cpu", "test_acc.item", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "str", "str", "torch.argmax.detach().cpu().numpy", "torch.nn.functional.softmax.detach().cpu().numpy", "numpy.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "str", "torch.argmax.detach().cpu", "torch.nn.functional.softmax.detach().cpu", "str", "numpy.mean", "numpy.mean", "torch.argmax.detach", "torch.nn.functional.softmax.detach"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.code.main.train"], ["def", "evaluate", "(", "embeds", ",", "ratio", ",", "idx_train", ",", "idx_val", ",", "idx_test", ",", "label", ",", "nb_classes", ",", "device", ",", "dataset", ",", "lr", ",", "wd", "\n", ",", "isTest", "=", "True", ")", ":", "\n", "    ", "hid_units", "=", "embeds", ".", "shape", "[", "1", "]", "\n", "xent", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "train_embs", "=", "embeds", "[", "idx_train", "]", "\n", "val_embs", "=", "embeds", "[", "idx_val", "]", "\n", "test_embs", "=", "embeds", "[", "idx_test", "]", "\n", "\n", "train_lbls", "=", "torch", ".", "argmax", "(", "label", "[", "idx_train", "]", ",", "dim", "=", "-", "1", ")", "\n", "val_lbls", "=", "torch", ".", "argmax", "(", "label", "[", "idx_val", "]", ",", "dim", "=", "-", "1", ")", "\n", "test_lbls", "=", "torch", ".", "argmax", "(", "label", "[", "idx_test", "]", ",", "dim", "=", "-", "1", ")", "\n", "accs", "=", "[", "]", "\n", "micro_f1s", "=", "[", "]", "\n", "macro_f1s", "=", "[", "]", "\n", "macro_f1s_val", "=", "[", "]", "\n", "auc_score_list", "=", "[", "]", "\n", "\n", "for", "_", "in", "range", "(", "50", ")", ":", "\n", "        ", "log", "=", "LogReg", "(", "hid_units", ",", "nb_classes", ")", "\n", "opt", "=", "torch", ".", "optim", ".", "Adam", "(", "log", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "wd", ")", "\n", "log", ".", "to", "(", "device", ")", "\n", "\n", "val_accs", "=", "[", "]", "\n", "test_accs", "=", "[", "]", "\n", "val_micro_f1s", "=", "[", "]", "\n", "test_micro_f1s", "=", "[", "]", "\n", "val_macro_f1s", "=", "[", "]", "\n", "test_macro_f1s", "=", "[", "]", "\n", "\n", "logits_list", "=", "[", "]", "\n", "for", "iter_", "in", "range", "(", "200", ")", ":", "\n", "# train", "\n", "            ", "log", ".", "train", "(", ")", "\n", "opt", ".", "zero_grad", "(", ")", "\n", "\n", "logits", "=", "log", "(", "train_embs", ")", "\n", "loss", "=", "xent", "(", "logits", ",", "train_lbls", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "opt", ".", "step", "(", ")", "\n", "\n", "# val", "\n", "logits", "=", "log", "(", "val_embs", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "val_acc", "=", "torch", ".", "sum", "(", "preds", "==", "val_lbls", ")", ".", "float", "(", ")", "/", "val_lbls", ".", "shape", "[", "0", "]", "\n", "val_f1_macro", "=", "f1_score", "(", "val_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "val_f1_micro", "=", "f1_score", "(", "val_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "val_accs", ".", "append", "(", "val_acc", ".", "item", "(", ")", ")", "\n", "val_macro_f1s", ".", "append", "(", "val_f1_macro", ")", "\n", "val_micro_f1s", ".", "append", "(", "val_f1_micro", ")", "\n", "\n", "# test", "\n", "logits", "=", "log", "(", "test_embs", ")", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "\n", "test_acc", "=", "torch", ".", "sum", "(", "preds", "==", "test_lbls", ")", ".", "float", "(", ")", "/", "test_lbls", ".", "shape", "[", "0", "]", "\n", "test_f1_macro", "=", "f1_score", "(", "test_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "test_f1_micro", "=", "f1_score", "(", "test_lbls", ".", "cpu", "(", ")", ",", "preds", ".", "cpu", "(", ")", ",", "average", "=", "'micro'", ")", "\n", "\n", "test_accs", ".", "append", "(", "test_acc", ".", "item", "(", ")", ")", "\n", "test_macro_f1s", ".", "append", "(", "test_f1_macro", ")", "\n", "test_micro_f1s", ".", "append", "(", "test_f1_micro", ")", "\n", "logits_list", ".", "append", "(", "logits", ")", "\n", "\n", "", "max_iter", "=", "val_accs", ".", "index", "(", "max", "(", "val_accs", ")", ")", "\n", "accs", ".", "append", "(", "test_accs", "[", "max_iter", "]", ")", "\n", "max_iter", "=", "val_macro_f1s", ".", "index", "(", "max", "(", "val_macro_f1s", ")", ")", "\n", "macro_f1s", ".", "append", "(", "test_macro_f1s", "[", "max_iter", "]", ")", "\n", "macro_f1s_val", ".", "append", "(", "val_macro_f1s", "[", "max_iter", "]", ")", "\n", "\n", "max_iter", "=", "val_micro_f1s", ".", "index", "(", "max", "(", "val_micro_f1s", ")", ")", "\n", "micro_f1s", ".", "append", "(", "test_micro_f1s", "[", "max_iter", "]", ")", "\n", "\n", "# auc", "\n", "best_logits", "=", "logits_list", "[", "max_iter", "]", "\n", "best_proba", "=", "softmax", "(", "best_logits", ",", "dim", "=", "1", ")", "\n", "auc_score_list", ".", "append", "(", "roc_auc_score", "(", "y_true", "=", "test_lbls", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "y_score", "=", "best_proba", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "multi_class", "=", "'ovr'", "\n", ")", ")", "\n", "\n", "", "if", "isTest", ":", "\n", "        ", "print", "(", "\"\\t[Classification] Macro-F1_mean: {:.4f} var: {:.4f}  Micro-F1_mean: {:.4f} var: {:.4f} auc {:.4f}\"", "\n", ".", "format", "(", "np", ".", "mean", "(", "macro_f1s", ")", ",", "\n", "np", ".", "std", "(", "macro_f1s", ")", ",", "\n", "np", ".", "mean", "(", "micro_f1s", ")", ",", "\n", "np", ".", "std", "(", "micro_f1s", ")", ",", "\n", "np", ".", "mean", "(", "auc_score_list", ")", ",", "\n", "np", ".", "std", "(", "auc_score_list", ")", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "macro_f1s_val", ")", ",", "np", ".", "mean", "(", "macro_f1s", ")", "\n", "\n", "", "f", "=", "open", "(", "\"result_\"", "+", "dataset", "+", "str", "(", "ratio", ")", "+", "\".txt\"", ",", "\"a\"", ")", "\n", "f", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "macro_f1s", ")", ")", "+", "\"\\t\"", "+", "str", "(", "np", ".", "mean", "(", "micro_f1s", ")", ")", "+", "\"\\t\"", "+", "str", "(", "np", ".", "mean", "(", "auc_score_list", ")", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.acm_params": [[9, 40], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["def", "acm_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--save_emb'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--turn'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"acm\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "int", ",", "default", "=", "[", "20", ",", "40", ",", "60", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "\n", "# The parameters of evaluation", "\n", "parser", ".", "add_argument", "(", "'--eva_lr'", ",", "type", "=", "float", ",", "default", "=", "0.05", ")", "\n", "parser", ".", "add_argument", "(", "'--eva_wd'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# The parameters of learning process", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0008", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_coef'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# model-specific parameters", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "0.8", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_drop'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "'--attn_drop'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_rate'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "7", ",", "1", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "args", ".", "type_num", "=", "[", "4019", ",", "7167", ",", "60", "]", "# the number of every node type", "\n", "args", ".", "nei_num", "=", "2", "# the number of neighbors' types", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.dblp_params": [[42, 73], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["", "def", "dblp_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--save_emb'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--turn'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"dblp\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "int", ",", "default", "=", "[", "20", ",", "40", ",", "60", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "53", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "\n", "# The parameters of evaluation", "\n", "parser", ".", "add_argument", "(", "'--eva_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--eva_wd'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# The parameters of learning process", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "30", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0008", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_coef'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# model-specific parameters", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_drop'", ",", "type", "=", "float", ",", "default", "=", "0.4", ")", "\n", "parser", ".", "add_argument", "(", "'--attn_drop'", ",", "type", "=", "float", ",", "default", "=", "0.35", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_rate'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "6", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "args", ".", "type_num", "=", "[", "4057", ",", "14328", ",", "7723", ",", "20", "]", "# the number of every node type", "\n", "args", ".", "nei_num", "=", "1", "# the number of neighbors' types", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.aminer_params": [[75, 106], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["", "def", "aminer_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--save_emb'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--turn'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"aminer\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "int", ",", "default", "=", "[", "20", ",", "40", ",", "60", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "4", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "\n", "# The parameters of evaluation", "\n", "parser", ".", "add_argument", "(", "'--eva_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--eva_wd'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# The parameters of learning process", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "40", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.003", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_coef'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# model-specific parameters", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_drop'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--attn_drop'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_rate'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "3", ",", "8", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "args", ".", "type_num", "=", "[", "6564", ",", "13329", ",", "35890", "]", "# the number of every node type", "\n", "args", ".", "nei_num", "=", "2", "# the number of neighbors' types", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.freebase_params": [[108, 139], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args"], "function", ["None"], ["", "def", "freebase_params", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--save_emb'", ",", "action", "=", "\"store_true\"", ")", "\n", "parser", ".", "add_argument", "(", "'--turn'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "type", "=", "str", ",", "default", "=", "\"freebase\"", ")", "\n", "parser", ".", "add_argument", "(", "'--ratio'", ",", "type", "=", "int", ",", "default", "=", "[", "20", ",", "40", ",", "60", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--gpu'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "default", "=", "32", ")", "\n", "parser", ".", "add_argument", "(", "'--hidden_dim'", ",", "type", "=", "int", ",", "default", "=", "64", ")", "\n", "parser", ".", "add_argument", "(", "'--nb_epochs'", ",", "type", "=", "int", ",", "default", "=", "10000", ")", "\n", "\n", "# The parameters of evaluation", "\n", "parser", ".", "add_argument", "(", "'--eva_lr'", ",", "type", "=", "float", ",", "default", "=", "0.01", ")", "\n", "parser", ".", "add_argument", "(", "'--eva_wd'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# The parameters of learning process", "\n", "parser", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ")", "\n", "parser", ".", "add_argument", "(", "'--l2_coef'", ",", "type", "=", "float", ",", "default", "=", "0", ")", "\n", "\n", "# model-specific parameters", "\n", "parser", ".", "add_argument", "(", "'--tau'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "parser", ".", "add_argument", "(", "'--feat_drop'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--attn_drop'", ",", "type", "=", "float", ",", "default", "=", "0.3", ")", "\n", "parser", ".", "add_argument", "(", "'--sample_rate'", ",", "nargs", "=", "'+'", ",", "type", "=", "int", ",", "default", "=", "[", "1", ",", "18", ",", "2", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--lam'", ",", "type", "=", "float", ",", "default", "=", "0.5", ")", "\n", "\n", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", ")", "\n", "args", ".", "type_num", "=", "[", "3492", ",", "2502", ",", "33401", ",", "4459", "]", "# the number of every node type", "\n", "args", ".", "nei_num", "=", "3", "# the number of neighbors' types", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.set_params": [[141, 151], ["params.acm_params", "params.dblp_params", "params.aminer_params", "params.freebase_params"], "function", ["home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.acm_params", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.dblp_params", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.aminer_params", "home.repos.pwc.inspect_result.liun-online_HeCo.utils.params.freebase_params"], ["", "def", "set_params", "(", ")", ":", "\n", "    ", "if", "dataset", "==", "\"acm\"", ":", "\n", "        ", "args", "=", "acm_params", "(", ")", "\n", "", "elif", "dataset", "==", "\"dblp\"", ":", "\n", "        ", "args", "=", "dblp_params", "(", ")", "\n", "", "elif", "dataset", "==", "\"aminer\"", ":", "\n", "        ", "args", "=", "aminer_params", "(", ")", "\n", "", "elif", "dataset", "==", "\"freebase\"", ":", "\n", "        ", "args", "=", "freebase_params", "(", ")", "\n", "", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.logreg.LogReg.__init__": [[6, 12], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "logreg.LogReg.modules", "logreg.LogReg.weights_init"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__", "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.GCN.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "ft_in", ",", "nb_classes", ")", ":", "\n", "        ", "super", "(", "LogReg", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "ft_in", ",", "nb_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.logreg.LogReg.weights_init": [[13, 18], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ".", "data", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.utils.logreg.LogReg.forward": [[19, 22], ["logreg.LogReg.fc"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ")", ":", "\n", "        ", "ret", "=", "self", ".", "fc", "(", "seq", ")", "\n", "return", "ret", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.inter_att.__init__": [[8, 22], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "attn_drop", ")", ":", "\n", "        ", "super", "(", "inter_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "att", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "size", "=", "(", "1", ",", "hidden_dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "att", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "if", "attn_drop", ":", "\n", "            ", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_drop", "=", "lambda", "x", ":", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.inter_att.forward": [[23, 36], ["sc_encoder.inter_att.attn_drop", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "sc_encoder.inter_att.softmax", "print", "range", "sc_encoder.inter_att.tanh().mean", "sc_encoder.inter_att.append", "sc_encoder.inter_att.data.cpu().numpy", "len", "sc_encoder.inter_att.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sc_encoder.inter_att.tanh", "sc_encoder.inter_att.t", "sc_encoder.inter_att.data.cpu", "sc_encoder.inter_att.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "beta", "=", "[", "]", "\n", "attn_curr", "=", "self", ".", "attn_drop", "(", "self", ".", "att", ")", "\n", "for", "embed", "in", "embeds", ":", "\n", "            ", "sp", "=", "self", ".", "tanh", "(", "self", ".", "fc", "(", "embed", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "beta", ".", "append", "(", "attn_curr", ".", "matmul", "(", "sp", ".", "t", "(", ")", ")", ")", "\n", "", "beta", "=", "torch", ".", "cat", "(", "beta", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "beta", "=", "self", ".", "softmax", "(", "beta", ")", "\n", "print", "(", "\"sc \"", ",", "beta", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# type-level attention", "\n", "z_mc", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds", ")", ")", ":", "\n", "            ", "z_mc", "+=", "embeds", "[", "i", "]", "*", "beta", "[", "i", "]", "\n", "", "return", "z_mc", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.intra_att.__init__": [[39, 50], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "attn_drop", ")", ":", "\n", "        ", "super", "(", "intra_att", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "att", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "size", "=", "(", "1", ",", "2", "*", "hidden_dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "att", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "if", "attn_drop", ":", "\n", "            ", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_drop", "=", "lambda", "x", ":", "x", "\n", "\n", "", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "leakyrelu", "=", "nn", ".", "LeakyReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.intra_att.forward": [[51, 61], ["torch.embedding", "torch.embedding", "torch.embedding", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "h_refer.expand_as.expand_as.expand_as", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sc_encoder.intra_att.attn_drop", "sc_encoder.intra_att.leakyrelu", "sc_encoder.intra_att.softmax", "torch.cat.matmul", "torch.cat.matmul", "torch.cat.matmul", "sc_encoder.intra_att.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nei", ",", "h", ",", "h_refer", ")", ":", "\n", "        ", "nei_emb", "=", "F", ".", "embedding", "(", "nei", ",", "h", ")", "\n", "h_refer", "=", "torch", ".", "unsqueeze", "(", "h_refer", ",", "1", ")", "\n", "h_refer", "=", "h_refer", ".", "expand_as", "(", "nei_emb", ")", "\n", "all_emb", "=", "torch", ".", "cat", "(", "[", "h_refer", ",", "nei_emb", "]", ",", "dim", "=", "-", "1", ")", "\n", "attn_curr", "=", "self", ".", "attn_drop", "(", "self", ".", "att", ")", "\n", "att", "=", "self", ".", "leakyrelu", "(", "all_emb", ".", "matmul", "(", "attn_curr", ".", "t", "(", ")", ")", ")", "\n", "att", "=", "self", ".", "softmax", "(", "att", ")", "\n", "nei_emb", "=", "(", "att", "*", "nei_emb", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "return", "nei_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.Sc_encoder.__init__": [[64, 70], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "sc_encoder.inter_att", "sc_encoder.intra_att", "range"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "sample_rate", ",", "nei_num", ",", "attn_drop", ")", ":", "\n", "        ", "super", "(", "Sc_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "intra", "=", "nn", ".", "ModuleList", "(", "[", "intra_att", "(", "hidden_dim", ",", "attn_drop", ")", "for", "_", "in", "range", "(", "nei_num", ")", "]", ")", "\n", "self", ".", "inter", "=", "inter_att", "(", "hidden_dim", ",", "attn_drop", ")", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "nei_num", "=", "nei_num", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.sc_encoder.Sc_encoder.forward": [[71, 89], ["range", "sc_encoder.Sc_encoder.inter", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.elu", "torch.elu", "torch.elu", "embeds.append", "torch.cat().cuda.append", "torch.cat().cuda.append", "torch.cat().cuda.append", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.random.choice", "numpy.random.choice"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "nei_h", ",", "nei_index", ")", ":", "\n", "        ", "embeds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "nei_num", ")", ":", "\n", "            ", "sele_nei", "=", "[", "]", "\n", "sample_num", "=", "self", ".", "sample_rate", "[", "i", "]", "\n", "for", "per_node_nei", "in", "nei_index", "[", "i", "]", ":", "\n", "                ", "if", "len", "(", "per_node_nei", ")", ">=", "sample_num", ":", "\n", "                    ", "select_one", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "choice", "(", "per_node_nei", ",", "sample_num", ",", "\n", "replace", "=", "False", ")", ")", "[", "np", ".", "newaxis", "]", "\n", "", "else", ":", "\n", "                    ", "select_one", "=", "torch", ".", "tensor", "(", "np", ".", "random", ".", "choice", "(", "per_node_nei", ",", "sample_num", ",", "\n", "replace", "=", "True", ")", ")", "[", "np", ".", "newaxis", "]", "\n", "", "sele_nei", ".", "append", "(", "select_one", ")", "\n", "", "sele_nei", "=", "torch", ".", "cat", "(", "sele_nei", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", "\n", "one_type_emb", "=", "F", ".", "elu", "(", "self", ".", "intra", "[", "i", "]", "(", "sele_nei", ",", "nei_h", "[", "i", "+", "1", "]", ",", "nei_h", "[", "0", "]", ")", ")", "\n", "embeds", ".", "append", "(", "one_type_emb", ")", "\n", "", "z_mc", "=", "self", ".", "inter", "(", "embeds", ")", "\n", "return", "z_mc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.heco.HeCo.__init__": [[9, 25], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mp_encoder.Mp_encoder", "sc_encoder.Sc_encoder", "contrast.Contrast", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "feats_dim_list", ",", "feat_drop", ",", "attn_drop", ",", "P", ",", "sample_rate", ",", "\n", "nei_num", ",", "tau", ",", "lam", ")", ":", "\n", "        ", "super", "(", "HeCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "fc_list", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "feats_dim", ",", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "for", "feats_dim", "in", "feats_dim_list", "]", ")", "\n", "for", "fc", "in", "self", ".", "fc_list", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "fc", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "\n", "", "if", "feat_drop", ">", "0", ":", "\n", "            ", "self", ".", "feat_drop", "=", "nn", ".", "Dropout", "(", "feat_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "feat_drop", "=", "lambda", "x", ":", "x", "\n", "", "self", ".", "mp", "=", "Mp_encoder", "(", "P", ",", "hidden_dim", ",", "attn_drop", ")", "\n", "self", ".", "sc", "=", "Sc_encoder", "(", "hidden_dim", ",", "sample_rate", ",", "nei_num", ",", "attn_drop", ")", "\n", "self", ".", "contrast", "=", "Contrast", "(", "hidden_dim", ",", "tau", ",", "lam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.heco.HeCo.forward": [[26, 34], ["range", "heco.HeCo.mp", "heco.HeCo.sc", "heco.HeCo.contrast", "len", "h_all.append", "torch.elu", "torch.elu", "heco.HeCo.feat_drop"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "feats", ",", "pos", ",", "mps", ",", "nei_index", ")", ":", "# p a s", "\n", "        ", "h_all", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "feats", ")", ")", ":", "\n", "            ", "h_all", ".", "append", "(", "F", ".", "elu", "(", "self", ".", "feat_drop", "(", "self", ".", "fc_list", "[", "i", "]", "(", "feats", "[", "i", "]", ")", ")", ")", ")", "\n", "", "z_mp", "=", "self", ".", "mp", "(", "h_all", "[", "0", "]", ",", "mps", ")", "\n", "z_sc", "=", "self", ".", "sc", "(", "h_all", ",", "nei_index", ")", "\n", "loss", "=", "self", ".", "contrast", "(", "z_mp", ",", "z_sc", ",", "pos", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.heco.HeCo.get_embeds": [[35, 39], ["torch.elu", "torch.elu", "heco.HeCo.mp", "heco.HeCo.detach"], "methods", ["None"], ["", "def", "get_embeds", "(", "self", ",", "feats", ",", "mps", ")", ":", "\n", "        ", "z_mp", "=", "F", ".", "elu", "(", "self", ".", "fc_list", "[", "0", "]", "(", "feats", "[", "0", "]", ")", ")", "\n", "z_mp", "=", "self", ".", "mp", "(", "z_mp", ",", "mps", ")", "\n", "return", "z_mp", ".", "detach", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.contrast.Contrast.__init__": [[6, 18], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.ELU", "torch.ELU", "torch.Linear", "torch.Linear", "isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "tau", ",", "lam", ")", ":", "\n", "        ", "super", "(", "Contrast", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ",", "\n", "nn", ".", "ELU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", "\n", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "lam", "=", "lam", "\n", "for", "model", "in", "self", ".", "proj", ":", "\n", "            ", "if", "isinstance", "(", "model", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_normal_", "(", "model", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.contrast.Contrast.sim": [[19, 26], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "z2.t", "torch.norm.t", "torch.norm.t"], "methods", ["None"], ["", "", "", "def", "sim", "(", "self", ",", "z1", ",", "z2", ")", ":", "\n", "        ", "z1_norm", "=", "torch", ".", "norm", "(", "z1", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "z2_norm", "=", "torch", ".", "norm", "(", "z2", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "dot_numerator", "=", "torch", ".", "mm", "(", "z1", ",", "z2", ".", "t", "(", ")", ")", "\n", "dot_denominator", "=", "torch", ".", "mm", "(", "z1_norm", ",", "z2_norm", ".", "t", "(", ")", ")", "\n", "sim_matrix", "=", "torch", ".", "exp", "(", "dot_numerator", "/", "dot_denominator", "/", "self", ".", "tau", ")", "\n", "return", "sim_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.contrast.Contrast.forward": [[27, 39], ["contrast.Contrast.proj", "contrast.Contrast.proj", "contrast.Contrast.sim", "contrast.Contrast.t", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.log().mean", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.sum().view", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "contrast.Contrast.mul().sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "contrast.Contrast.t.mul().sum", "contrast.Contrast.mul", "contrast.Contrast.t.mul", "pos.to_dense", "pos.to_dense"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.contrast.Contrast.sim"], ["", "def", "forward", "(", "self", ",", "z_mp", ",", "z_sc", ",", "pos", ")", ":", "\n", "        ", "z_proj_mp", "=", "self", ".", "proj", "(", "z_mp", ")", "\n", "z_proj_sc", "=", "self", ".", "proj", "(", "z_sc", ")", "\n", "matrix_mp2sc", "=", "self", ".", "sim", "(", "z_proj_mp", ",", "z_proj_sc", ")", "\n", "matrix_sc2mp", "=", "matrix_mp2sc", ".", "t", "(", ")", "\n", "\n", "matrix_mp2sc", "=", "matrix_mp2sc", "/", "(", "torch", ".", "sum", "(", "matrix_mp2sc", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-8", ")", "\n", "lori_mp", "=", "-", "torch", ".", "log", "(", "matrix_mp2sc", ".", "mul", "(", "pos", ".", "to_dense", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n", "matrix_sc2mp", "=", "matrix_sc2mp", "/", "(", "torch", ".", "sum", "(", "matrix_sc2mp", ",", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", "+", "1e-8", ")", "\n", "lori_sc", "=", "-", "torch", ".", "log", "(", "matrix_sc2mp", ".", "mul", "(", "pos", ".", "to_dense", "(", ")", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "return", "self", ".", "lam", "*", "lori_mp", "+", "(", "1", "-", "self", ".", "lam", ")", "*", "lori_sc", "\n", "", "", ""]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.GCN.__init__": [[6, 19], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.PReLU", "torch.PReLU", "mp_encoder.GCN.modules", "torch.Parameter", "torch.Parameter", "mp_encoder.GCN.bias.data.fill_", "mp_encoder.GCN.register_parameter", "mp_encoder.GCN.weights_init", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__", "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.GCN.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "in_ft", ",", "out_ft", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "GCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "in_ft", ",", "out_ft", ",", "bias", "=", "False", ")", "\n", "self", ".", "act", "=", "nn", ".", "PReLU", "(", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_ft", ")", ")", "\n", "self", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "self", ".", "weights_init", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.GCN.weights_init": [[20, 25], ["isinstance", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "m.bias.data.fill_"], "methods", ["None"], ["", "", "def", "weights_init", "(", "self", ",", "m", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.GCN.forward": [[26, 32], ["mp_encoder.GCN.fc", "torch.spmm", "torch.spmm", "torch.spmm", "torch.spmm", "mp_encoder.GCN.act"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "seq", ",", "adj", ")", ":", "\n", "        ", "seq_fts", "=", "self", ".", "fc", "(", "seq", ")", "\n", "out", "=", "torch", ".", "spmm", "(", "adj", ",", "seq_fts", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "bias", "\n", "", "return", "self", ".", "act", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Attention.__init__": [[35, 49], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Tanh", "torch.Tanh", "torch.Parameter", "torch.Parameter", "torch.init.xavier_normal_", "torch.init.xavier_normal_", "torch.Softmax", "torch.Softmax", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "attn_drop", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ",", "bias", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "fc", ".", "weight", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "att", "=", "nn", ".", "Parameter", "(", "torch", ".", "empty", "(", "size", "=", "(", "1", ",", "hidden_dim", ")", ")", ",", "requires_grad", "=", "True", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "att", ".", "data", ",", "gain", "=", "1.414", ")", "\n", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", ")", "\n", "if", "attn_drop", ":", "\n", "            ", "self", ".", "attn_drop", "=", "nn", ".", "Dropout", "(", "attn_drop", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn_drop", "=", "lambda", "x", ":", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Attention.forward": [[50, 63], ["mp_encoder.Attention.attn_drop", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "mp_encoder.Attention.softmax", "print", "range", "mp_encoder.Attention.tanh().mean", "mp_encoder.Attention.append", "mp_encoder.Attention.data.cpu().numpy", "len", "mp_encoder.Attention.matmul", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "mp_encoder.Attention.tanh", "mp_encoder.Attention.t", "mp_encoder.Attention.data.cpu", "mp_encoder.Attention.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "embeds", ")", ":", "\n", "        ", "beta", "=", "[", "]", "\n", "attn_curr", "=", "self", ".", "attn_drop", "(", "self", ".", "att", ")", "\n", "for", "embed", "in", "embeds", ":", "\n", "            ", "sp", "=", "self", ".", "tanh", "(", "self", ".", "fc", "(", "embed", ")", ")", ".", "mean", "(", "dim", "=", "0", ")", "\n", "beta", ".", "append", "(", "attn_curr", ".", "matmul", "(", "sp", ".", "t", "(", ")", ")", ")", "\n", "", "beta", "=", "torch", ".", "cat", "(", "beta", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "-", "1", ")", "\n", "beta", "=", "self", ".", "softmax", "(", "beta", ")", "\n", "print", "(", "\"mp \"", ",", "beta", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "# semantic attention", "\n", "z_mp", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "embeds", ")", ")", ":", "\n", "            ", "z_mp", "+=", "embeds", "[", "i", "]", "*", "beta", "[", "i", "]", "\n", "", "return", "z_mp", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__": [[66, 71], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "mp_encoder.Attention", "mp_encoder.GCN", "range"], "methods", ["home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.__init__"], ["    ", "def", "__init__", "(", "self", ",", "P", ",", "hidden_dim", ",", "attn_drop", ")", ":", "\n", "        ", "super", "(", "Mp_encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "P", "=", "P", "\n", "self", ".", "node_level", "=", "nn", ".", "ModuleList", "(", "[", "GCN", "(", "hidden_dim", ",", "hidden_dim", ")", "for", "_", "in", "range", "(", "P", ")", "]", ")", "\n", "self", ".", "att", "=", "Attention", "(", "hidden_dim", ",", "attn_drop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.liun-online_HeCo.module.mp_encoder.Mp_encoder.forward": [[72, 78], ["range", "mp_encoder.Mp_encoder.att", "embeds.append"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h", ",", "mps", ")", ":", "\n", "        ", "embeds", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "P", ")", ":", "\n", "            ", "embeds", ".", "append", "(", "self", ".", "node_level", "[", "i", "]", "(", "h", ",", "mps", "[", "i", "]", ")", ")", "\n", "", "z_mp", "=", "self", ".", "att", "(", "embeds", ")", "\n", "return", "z_mp", "\n", "", "", ""]]}