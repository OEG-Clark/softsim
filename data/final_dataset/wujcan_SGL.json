{"home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.AbstractRecommender.__init__": [[25, 39], ["evaluator.ProxyEvaluator", "AbstractRecommender._create_logger", "AbstractRecommender.AbstractRecommender.logger.info", "AbstractRecommender.AbstractRecommender.logger.info", "dataset.get_user_train_dict", "dataset.get_user_test_dict", "dataset.get_user_test_neg_dict"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender._create_logger", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_test_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_test_neg_dict"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "conf", ")", ":", "\n", "        ", "self", ".", "evaluator", "=", "ProxyEvaluator", "(", "dataset", ",", "\n", "dataset", ".", "get_user_train_dict", "(", ")", ",", "\n", "dataset", ".", "get_user_test_dict", "(", ")", ",", "\n", "dataset", ".", "get_user_test_neg_dict", "(", ")", ",", "\n", "metric", "=", "conf", "[", "\"metric\"", "]", ",", "\n", "group_view", "=", "conf", "[", "\"group_view\"", "]", ",", "\n", "top_k", "=", "conf", "[", "\"topk\"", "]", ",", "\n", "batch_size", "=", "conf", "[", "\"test_batch_size\"", "]", ",", "\n", "num_thread", "=", "conf", "[", "\"num_thread\"", "]", ")", "\n", "\n", "self", ".", "logger", "=", "_create_logger", "(", "conf", ",", "dataset", ".", "dataset_name", ")", "\n", "self", ".", "logger", ".", "info", "(", "dataset", ")", "\n", "self", ".", "logger", ".", "info", "(", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.AbstractRecommender.build_graph": [[40, 42], ["None"], "methods", ["None"], ["", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.AbstractRecommender.train_model": [[43, 45], ["None"], "methods", ["None"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.AbstractRecommender.predict": [[46, 48], ["None"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "user_ids", ",", "items", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.SeqAbstractRecommender.__init__": [[51, 55], ["AbstractRecommender.AbstractRecommender.__init__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "conf", ")", ":", "\n", "        ", "if", "dataset", ".", "time_matrix", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Dataset does not contant time infomation!\"", ")", "\n", "", "super", "(", "SeqAbstractRecommender", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "conf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender.SocialAbstractRecommender.__init__": [[58, 76], ["AbstractRecommender.AbstractRecommender.__init__", "pandas.read_csv", "numpy.array", "numpy.in1d", "numpy.in1d", "scipy.csr_matrix", "list", "dataset.userids.keys", "len"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "conf", ")", ":", "\n", "        ", "super", "(", "SocialAbstractRecommender", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "conf", ")", "\n", "social_users", "=", "pd", ".", "read_csv", "(", "conf", "[", "\"social_file\"", "]", ",", "sep", "=", "conf", "[", "\"data.convert.separator\"", "]", ",", "\n", "header", "=", "None", ",", "names", "=", "[", "\"user\"", ",", "\"friend\"", "]", ")", "\n", "users_key", "=", "np", ".", "array", "(", "list", "(", "dataset", ".", "userids", ".", "keys", "(", ")", ")", ")", "\n", "index", "=", "np", ".", "in1d", "(", "social_users", "[", "\"user\"", "]", ",", "users_key", ")", "\n", "social_users", "=", "social_users", "[", "index", "]", "\n", "\n", "index", "=", "np", ".", "in1d", "(", "social_users", "[", "\"friend\"", "]", ",", "users_key", ")", "\n", "social_users", "=", "social_users", "[", "index", "]", "\n", "\n", "user", "=", "social_users", "[", "\"user\"", "]", "\n", "user_id", "=", "[", "dataset", ".", "userids", "[", "u", "]", "for", "u", "in", "user", "]", "\n", "friend", "=", "social_users", "[", "\"friend\"", "]", "\n", "friend_id", "=", "[", "dataset", ".", "userids", "[", "u", "]", "for", "u", "in", "friend", "]", "\n", "num_users", ",", "num_items", "=", "dataset", ".", "train_matrix", ".", "shape", "\n", "self", ".", "social_matrix", "=", "sp", ".", "csr_matrix", "(", "(", "[", "1", "]", "*", "len", "(", "user_id", ")", ",", "(", "user_id", ",", "friend_id", ")", ")", ",", "\n", "shape", "=", "(", "num_users", ",", "num_users", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.model.AbstractRecommender._create_logger": [[9, 22], ["time.time", "config.params_str", "os.path.join", "os.path.join", "util.Logger"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.params_str"], ["def", "_create_logger", "(", "config", ",", "data_name", ")", ":", "\n", "# create a logger", "\n", "    ", "timestamp", "=", "time", ".", "time", "(", ")", "\n", "# param_str = \"%s_%s\" % (data_name, config.params_str())", "\n", "param_str", "=", "config", ".", "params_str", "(", ")", "\n", "run_id", "=", "\"%s_%.8f\"", "%", "(", "param_str", "[", ":", "150", "]", ",", "timestamp", ")", "\n", "\n", "model_name", "=", "config", "[", "\"recommender\"", "]", "\n", "log_dir", "=", "os", ".", "path", ".", "join", "(", "\"log\"", ",", "data_name", ",", "model_name", ")", "\n", "logger_name", "=", "os", ".", "path", ".", "join", "(", "log_dir", ",", "run_id", "+", "\".log\"", ")", "\n", "logger", "=", "Logger", "(", "logger_name", ")", "\n", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.__init__": [[23, 82], ["model.AbstractRecommender.AbstractRecommender.__init__", "SGL.SGL.dataset.get_user_train_dict", "list", "SGL.SGL._get_training_data", "SGL.SGL.create_adj_mat", "numpy.zeros", "SGL.SGL.user_pos_train.keys", "util.tool.ensureDir", "util.tool.ensureDir"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._get_training_data", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.ensureDir", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.ensureDir"], ["    ", "def", "__init__", "(", "self", ",", "sess", ",", "dataset", ",", "conf", ")", ":", "\n", "        ", "super", "(", "SGL", ",", "self", ")", ".", "__init__", "(", "dataset", ",", "conf", ")", "\n", "\n", "self", ".", "model_name", "=", "conf", "[", "\"recommender\"", "]", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "dataset_name", "=", "conf", "[", "\"data.input.dataset\"", "]", "\n", "self", ".", "lr", "=", "conf", "[", "'lr'", "]", "\n", "self", ".", "reg", "=", "conf", "[", "'reg'", "]", "\n", "self", ".", "embedding_size", "=", "conf", "[", "'embed_size'", "]", "\n", "self", ".", "learner", "=", "conf", "[", "\"learner\"", "]", "\n", "self", ".", "batch_size", "=", "conf", "[", "'batch_size'", "]", "\n", "self", ".", "test_batch_size", "=", "conf", "[", "'test_batch_size'", "]", "\n", "self", ".", "epochs", "=", "conf", "[", "\"epochs\"", "]", "\n", "self", ".", "verbose", "=", "conf", "[", "\"verbose\"", "]", "\n", "self", ".", "init_method", "=", "conf", "[", "\"init_method\"", "]", "\n", "self", ".", "stddev", "=", "conf", "[", "\"stddev\"", "]", "\n", "self", ".", "n_layers", "=", "conf", "[", "'n_layers'", "]", "\n", "self", ".", "adj_type", "=", "conf", "[", "'adj_type'", "]", "\n", "self", ".", "stop_cnt", "=", "conf", "[", "\"stop_cnt\"", "]", "\n", "\n", "self", ".", "aug_type", "=", "conf", "[", "\"aug_type\"", "]", "\n", "self", ".", "ssl_mode", "=", "conf", "[", "\"ssl_mode\"", "]", "\n", "self", ".", "ssl_ratio", "=", "conf", "[", "\"ssl_ratio\"", "]", "\n", "self", ".", "ssl_temp", "=", "conf", "[", "\"ssl_temp\"", "]", "\n", "self", ".", "ssl_reg", "=", "conf", "[", "\"ssl_reg\"", "]", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "n_users", ",", "self", ".", "n_items", "=", "self", ".", "dataset", ".", "num_users", ",", "self", ".", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_train", "=", "self", ".", "dataset", ".", "get_user_train_dict", "(", "by_time", "=", "False", ")", "\n", "self", ".", "all_users", "=", "list", "(", "self", ".", "user_pos_train", ".", "keys", "(", ")", ")", "\n", "\n", "self", ".", "training_user", ",", "self", ".", "training_item", "=", "self", ".", "_get_training_data", "(", ")", "\n", "self", ".", "norm_adj", "=", "self", ".", "create_adj_mat", "(", "is_subgraph", "=", "False", ")", "# norm_adj sparse matrix of whole training graph", "\n", "self", ".", "best_result", "=", "np", ".", "zeros", "(", "[", "5", "]", ",", "dtype", "=", "float", ")", "\n", "self", ".", "best_epoch", "=", "0", "\n", "self", ".", "sess", "=", "sess", "\n", "self", ".", "model_str", "=", "'#layers=%d-%s-reg%.0e'", "%", "(", "\n", "self", ".", "n_layers", ",", "\n", "self", ".", "adj_type", ",", "\n", "self", ".", "reg", "\n", ")", "\n", "self", ".", "model_str", "+=", "'/ratio=%.1f-mode=%s-temp=%.2f-reg=%.0e'", "%", "(", "\n", "self", ".", "ssl_ratio", ",", "\n", "self", ".", "ssl_mode", ",", "\n", "self", ".", "ssl_temp", ",", "\n", "self", ".", "ssl_reg", "\n", ")", "\n", "self", ".", "pretrain", "=", "conf", "[", "\"pretrain\"", "]", "\n", "if", "self", ".", "pretrain", ":", "\n", "            ", "self", ".", "epochs", "=", "0", "\n", "", "self", ".", "save_flag", "=", "conf", "[", "\"save_flag\"", "]", "\n", "if", "self", ".", "pretrain", "or", "self", ".", "save_flag", ":", "\n", "            ", "self", ".", "tmp_model_folder", "=", "conf", "[", "\"proj_path\"", "]", "+", "'model_tmp/%s/%s/%s/'", "%", "(", "self", ".", "dataset_name", ",", "self", ".", "model_name", ",", "self", ".", "model_str", ")", "\n", "self", ".", "save_folder", "=", "conf", "[", "\"proj_path\"", "]", "+", "'dataset/pretrain-embeddings-%s/%s/n_layers=%d/'", "%", "(", "\n", "self", ".", "dataset_name", ",", "\n", "self", ".", "model_name", ",", "\n", "self", ".", "n_layers", ")", "\n", "tool", ".", "ensureDir", "(", "self", ".", "tmp_model_folder", ")", "\n", "tool", ".", "ensureDir", "(", "self", ".", "save_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._get_training_data": [[83, 86], ["SGL.SGL.dataset.get_train_interactions"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_train_interactions"], ["", "", "def", "_get_training_data", "(", "self", ")", ":", "\n", "        ", "user_list", ",", "item_list", "=", "self", ".", "dataset", ".", "get_train_interactions", "(", ")", "\n", "return", "user_list", ",", "item_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat": [[88, 131], ["numpy.array", "numpy.power().flatten", "scipy.diags", "scipy.diags.dot", "sp.diags.dot.dot", "numpy.array", "numpy.array", "numpy.ones_like", "scipy.csr_matrix", "adj_mat.sum", "util.cython.random_choice.randint_choice", "util.cython.random_choice.randint_choice", "numpy.ones", "numpy.ones", "scipy.diags", "scipy.diags", "scipy.csr_matrix", "scipy.diags.dot().dot", "sp.diags.dot().dot.nonzero", "scipy.csr_matrix", "util.cython.random_choice.randint_choice", "numpy.ones_like", "scipy.csr_matrix", "numpy.power", "numpy.isinf", "len", "numpy.array", "numpy.array", "numpy.ones_like", "scipy.diags.dot", "int", "len"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["", "def", "create_adj_mat", "(", "self", ",", "is_subgraph", "=", "False", ",", "aug_type", "=", "0", ")", ":", "\n", "        ", "n_nodes", "=", "self", ".", "n_users", "+", "self", ".", "n_items", "\n", "if", "is_subgraph", "and", "aug_type", "in", "[", "0", ",", "1", ",", "2", "]", "and", "self", ".", "ssl_ratio", ">", "0", ":", "\n", "# data augmentation type --- 0: Node Dropout; 1: Edge Dropout; 2: Random Walk", "\n", "            ", "if", "aug_type", "==", "0", ":", "\n", "                ", "drop_user_idx", "=", "randint_choice", "(", "self", ".", "n_users", ",", "size", "=", "self", ".", "n_users", "*", "self", ".", "ssl_ratio", ",", "replace", "=", "False", ")", "\n", "drop_item_idx", "=", "randint_choice", "(", "self", ".", "n_items", ",", "size", "=", "self", ".", "n_items", "*", "self", ".", "ssl_ratio", ",", "replace", "=", "False", ")", "\n", "indicator_user", "=", "np", ".", "ones", "(", "self", ".", "n_users", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indicator_item", "=", "np", ".", "ones", "(", "self", ".", "n_items", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "indicator_user", "[", "drop_user_idx", "]", "=", "0.", "\n", "indicator_item", "[", "drop_item_idx", "]", "=", "0.", "\n", "diag_indicator_user", "=", "sp", ".", "diags", "(", "indicator_user", ")", "\n", "diag_indicator_item", "=", "sp", ".", "diags", "(", "indicator_item", ")", "\n", "R", "=", "sp", ".", "csr_matrix", "(", "\n", "(", "np", ".", "ones_like", "(", "self", ".", "training_user", ",", "dtype", "=", "np", ".", "float32", ")", ",", "(", "self", ".", "training_user", ",", "self", ".", "training_item", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "n_users", ",", "self", ".", "n_items", ")", ")", "\n", "R_prime", "=", "diag_indicator_user", ".", "dot", "(", "R", ")", ".", "dot", "(", "diag_indicator_item", ")", "\n", "(", "user_np_keep", ",", "item_np_keep", ")", "=", "R_prime", ".", "nonzero", "(", ")", "\n", "ratings_keep", "=", "R_prime", ".", "data", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings_keep", ",", "(", "user_np_keep", ",", "item_np_keep", "+", "self", ".", "n_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "if", "aug_type", "in", "[", "1", ",", "2", "]", ":", "\n", "                ", "keep_idx", "=", "randint_choice", "(", "len", "(", "self", ".", "training_user", ")", ",", "size", "=", "int", "(", "len", "(", "self", ".", "training_user", ")", "*", "(", "1", "-", "self", ".", "ssl_ratio", ")", ")", ",", "replace", "=", "False", ")", "\n", "user_np", "=", "np", ".", "array", "(", "self", ".", "training_user", ")", "[", "keep_idx", "]", "\n", "item_np", "=", "np", ".", "array", "(", "self", ".", "training_item", ")", "[", "keep_idx", "]", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "n_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "user_np", "=", "np", ".", "array", "(", "self", ".", "training_user", ")", "\n", "item_np", "=", "np", ".", "array", "(", "self", ".", "training_item", ")", "\n", "ratings", "=", "np", ".", "ones_like", "(", "user_np", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "tmp_adj", "=", "sp", ".", "csr_matrix", "(", "(", "ratings", ",", "(", "user_np", ",", "item_np", "+", "self", ".", "n_users", ")", ")", ",", "shape", "=", "(", "n_nodes", ",", "n_nodes", ")", ")", "\n", "", "adj_mat", "=", "tmp_adj", "+", "tmp_adj", ".", "T", "\n", "\n", "# pre adjcency matrix", "\n", "rowsum", "=", "np", ".", "array", "(", "adj_mat", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "rowsum", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "norm_adj_tmp", "=", "d_mat_inv", ".", "dot", "(", "adj_mat", ")", "\n", "adj_matrix", "=", "norm_adj_tmp", ".", "dot", "(", "d_mat_inv", ")", "\n", "# print('use the pre adjcency matrix')", "\n", "\n", "return", "adj_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._create_variable": [[132, 170], ["tensorflow.name_scope", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.name_scope", "dict", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "range", "numpy.load", "numpy.load", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["", "def", "_create_variable", "(", "self", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"input_data\"", ")", ":", "\n", "            ", "self", ".", "users", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "pos_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "self", ".", "neg_items", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "shape", "=", "(", "None", ",", ")", ")", "\n", "\n", "self", ".", "sub_mat", "=", "{", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ")", "\n", "", "else", ":", "\n", "                ", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "                    ", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'adj_values_sub1%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_indices_sub1%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_shape_sub1%d'", "%", "k", ")", "\n", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "'adj_values_sub2%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_indices_sub2%d'", "%", "k", ")", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", "=", "tf", ".", "placeholder", "(", "tf", ".", "int64", ",", "name", "=", "'adj_shape_sub2%d'", "%", "k", ")", "\n", "\n", "", "", "", "with", "tf", ".", "name_scope", "(", "\"embedding_init\"", ")", ":", "\n", "            ", "self", ".", "weights", "=", "dict", "(", ")", "\n", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "if", "self", ".", "pretrain", ":", "\n", "                ", "pretrain_user_embedding", "=", "np", ".", "load", "(", "self", ".", "save_folder", "+", "'user_embeddings.npy'", ")", "\n", "pretrain_item_embedding", "=", "np", ".", "load", "(", "self", ".", "save_folder", "+", "'item_embeddings.npy'", ")", "\n", "self", ".", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "pretrain_user_embedding", ",", "\n", "name", "=", "'user_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "# (users, embedding_size)", "\n", "self", ".", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "pretrain_item_embedding", ",", "\n", "name", "=", "'item_embedding'", ",", "dtype", "=", "tf", ".", "float32", ")", "# (items, embedding_size)", "\n", "", "else", ":", "\n", "                ", "self", ".", "weights", "[", "'user_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_users", ",", "self", ".", "embedding_size", "]", ")", ",", "name", "=", "'user_embedding'", ")", "\n", "self", ".", "weights", "[", "'item_embedding'", "]", "=", "tf", ".", "Variable", "(", "initializer", "(", "[", "self", ".", "n_items", ",", "self", ".", "embedding_size", "]", ")", ",", "name", "=", "'item_embedding'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.build_graph": [[171, 199], ["SGL.SGL._create_variable", "tensorflow.train.Saver", "tensorflow.name_scope", "SGL.SGL._create_lightgcn_SSL_embed", "tensorflow.name_scope", "SGL.SGL.create_bpr_loss", "tensorflow.name_scope", "util.learner.optimizer", "tensorflow.constant", "SGL.SGL.calc_ssl_loss_v2", "SGL.SGL.calc_ssl_loss_v3", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._create_variable", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._create_lightgcn_SSL_embed", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_bpr_loss", "home.repos.pwc.inspect_result.wujcan_SGL.util.learner.optimizer", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.calc_ssl_loss_v2", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.calc_ssl_loss_v3"], ["", "", "", "def", "build_graph", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_variable", "(", ")", "\n", "with", "tf", ".", "name_scope", "(", "\"inference\"", ")", ":", "\n", "            ", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", ",", "self", ".", "ua_embeddings_sub1", ",", "self", ".", "ia_embeddings_sub1", ",", "self", ".", "ua_embeddings_sub2", ",", "self", ".", "ia_embeddings_sub2", "=", "self", ".", "_create_lightgcn_SSL_embed", "(", ")", "\n", "\n", "", "\"\"\"\n        *********************************************************\n        Generate Predictions & Optimize via BPR loss.\n        \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "\"loss\"", ")", ":", "\n", "            ", "if", "self", ".", "pretrain", ":", "\n", "                ", "self", ".", "ssl_loss", "=", "tf", ".", "constant", "(", "0", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "ssl_mode", "in", "[", "'user_side'", ",", "'item_side'", ",", "'both_side'", "]", ":", "\n", "# self.ssl_loss = self.calc_ssl_loss()", "\n", "                    ", "self", ".", "ssl_loss", "=", "self", ".", "calc_ssl_loss_v2", "(", ")", "\n", "", "elif", "self", ".", "ssl_mode", "in", "[", "'merge'", "]", ":", "\n", "                    ", "self", ".", "ssl_loss", "=", "self", ".", "calc_ssl_loss_v3", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "\"Invalid ssl_mode!\"", ")", "\n", "", "", "self", ".", "sl_loss", ",", "self", ".", "emb_loss", "=", "self", ".", "create_bpr_loss", "(", ")", "\n", "self", ".", "loss", "=", "self", ".", "sl_loss", "+", "self", ".", "emb_loss", "+", "self", ".", "ssl_loss", "\n", "\n", "", "with", "tf", ".", "name_scope", "(", "\"learner\"", ")", ":", "\n", "# self.opt = tf.train.AdamOptimizer(learning_rate=self.lr).minimize(self.loss)", "\n", "            ", "self", ".", "opt", "=", "learner", ".", "optimizer", "(", "self", ".", "learner", ",", "self", ".", "loss", ",", "self", ".", "lr", ")", "\n", "\n", "", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._create_lightgcn_SSL_embed": [[200, 258], ["range", "SGL.SGL._convert_sp_mat_to_sp_tensor", "tensorflow.concat", "range", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.split", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor", "tensorflow.SparseTensor"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_sp_mat_to_sp_tensor"], ["", "def", "_create_lightgcn_SSL_embed", "(", "self", ")", ":", "\n", "        ", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "            ", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ")", "\n", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", "=", "tf", ".", "SparseTensor", "(", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", ")", "\n", "", "", "adj_mat", "=", "self", ".", "_convert_sp_mat_to_sp_tensor", "(", "self", ".", "norm_adj", ")", "\n", "\n", "ego_embeddings", "=", "tf", ".", "concat", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ",", "axis", "=", "0", ")", "\n", "ego_embeddings_sub1", "=", "ego_embeddings", "\n", "ego_embeddings_sub2", "=", "ego_embeddings", "\n", "all_embeddings", "=", "[", "ego_embeddings", "]", "\n", "all_embeddings_sub1", "=", "[", "ego_embeddings_sub1", "]", "\n", "all_embeddings_sub2", "=", "[", "ego_embeddings_sub2", "]", "\n", "\n", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "            ", "ego_embeddings", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "adj_mat", ",", "ego_embeddings", ",", "name", "=", "\"sparse_dense\"", ")", "\n", "all_embeddings", "+=", "[", "ego_embeddings", "]", "\n", "\n", "ego_embeddings_sub1", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "\n", "self", ".", "sub_mat", "[", "'sub_mat_1%d'", "%", "k", "]", ",", "\n", "ego_embeddings_sub1", ",", "name", "=", "\"sparse_dense_sub1%d\"", "%", "k", ")", "\n", "# ego_embeddings_sub1 = tf.multiply(ego_embeddings_sub1, self.mask1)", "\n", "all_embeddings_sub1", "+=", "[", "ego_embeddings_sub1", "]", "\n", "\n", "ego_embeddings_sub2", "=", "tf", ".", "sparse_tensor_dense_matmul", "(", "\n", "self", ".", "sub_mat", "[", "'sub_mat_2%d'", "%", "k", "]", ",", "\n", "ego_embeddings_sub2", ",", "name", "=", "\"sparse_dense_sub2%d\"", "%", "k", ")", "\n", "# ego_embeddings_sub2 = tf.multiply(ego_embeddings_sub2, self.mask2)", "\n", "all_embeddings_sub2", "+=", "[", "ego_embeddings_sub2", "]", "\n", "\n", "", "all_embeddings", "=", "tf", ".", "stack", "(", "all_embeddings", ",", "1", ")", "\n", "all_embeddings", "=", "tf", ".", "reduce_mean", "(", "all_embeddings", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings", ",", "i_g_embeddings", "=", "tf", ".", "split", "(", "all_embeddings", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "all_embeddings_sub1", "=", "tf", ".", "stack", "(", "all_embeddings_sub1", ",", "1", ")", "\n", "all_embeddings_sub1", "=", "tf", ".", "reduce_mean", "(", "all_embeddings_sub1", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings_sub1", ",", "i_g_embeddings_sub1", "=", "tf", ".", "split", "(", "all_embeddings_sub1", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "all_embeddings_sub2", "=", "tf", ".", "stack", "(", "all_embeddings_sub2", ",", "1", ")", "\n", "all_embeddings_sub2", "=", "tf", ".", "reduce_mean", "(", "all_embeddings_sub2", ",", "axis", "=", "1", ",", "keepdims", "=", "False", ")", "\n", "u_g_embeddings_sub2", ",", "i_g_embeddings_sub2", "=", "tf", ".", "split", "(", "all_embeddings_sub2", ",", "[", "self", ".", "n_users", ",", "self", ".", "n_items", "]", ",", "0", ")", "\n", "\n", "return", "u_g_embeddings", ",", "i_g_embeddings", ",", "u_g_embeddings_sub1", ",", "i_g_embeddings_sub1", ",", "u_g_embeddings_sub2", ",", "i_g_embeddings_sub2", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.calc_ssl_loss": [[259, 294], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.exp", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_ssl_loss", "(", "self", ")", ":", "\n", "        ", "'''\n        Calculating SSL loss\n        '''", "\n", "# batch_users, _ = tf.unique(self.users)", "\n", "user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub1", ",", "self", ".", "users", ")", "\n", "user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub2", ",", "self", ".", "users", ")", "\n", "normalize_user_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb1", ",", "1", ")", "\n", "normalize_user_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb2", ",", "1", ")", "\n", "\n", "# batch_items, _ = tf.unique(self.pos_items)", "\n", "item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub1", ",", "self", ".", "pos_items", ")", "\n", "item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub2", ",", "self", ".", "pos_items", ")", "\n", "normalize_item_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb1", ",", "1", ")", "\n", "normalize_item_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb2", ",", "1", ")", "\n", "\n", "normalize_user_emb2_neg", "=", "normalize_user_emb2", "\n", "normalize_item_emb2_neg", "=", "normalize_item_emb2", "\n", "\n", "pos_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_user_emb1", ",", "normalize_user_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_user", "=", "tf", ".", "matmul", "(", "normalize_user_emb1", ",", "normalize_user_emb2_neg", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_item_emb1", ",", "normalize_item_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_item", "=", "tf", ".", "matmul", "(", "normalize_item_emb1", ",", "normalize_item_emb2_neg", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_user", "=", "tf", ".", "exp", "(", "pos_score_user", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_user", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "pos_score_item", "=", "tf", ".", "exp", "(", "pos_score_item", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_item", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# ssl_loss = -tf.reduce_mean(tf.log(pos_score / ttl_score))", "\n", "ssl_loss_user", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_user", "/", "ttl_score_user", ")", ")", "\n", "ssl_loss_item", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_item", "/", "ttl_score_item", ")", ")", "\n", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "(", "ssl_loss_user", "+", "ssl_loss_item", ")", "\n", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.calc_ssl_loss_v2": [[295, 337], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.log", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_ssl_loss_v2", "(", "self", ")", ":", "\n", "        ", "'''\n        The denominator is summing over all the user or item nodes in the whole grpah\n        '''", "\n", "if", "self", ".", "ssl_mode", "in", "[", "'user_side'", ",", "'both_side'", "]", ":", "\n", "            ", "user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub1", ",", "self", ".", "users", ")", "\n", "user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub2", ",", "self", ".", "users", ")", "\n", "\n", "normalize_user_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb1", ",", "1", ")", "\n", "normalize_user_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "user_emb2", ",", "1", ")", "\n", "normalize_all_user_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "ua_embeddings_sub2", ",", "1", ")", "\n", "pos_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_user_emb1", ",", "normalize_user_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_user", "=", "tf", ".", "matmul", "(", "normalize_user_emb1", ",", "normalize_all_user_emb2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_user", "=", "tf", ".", "exp", "(", "pos_score_user", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_user", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_user", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "\n", "ssl_loss_user", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_user", "/", "ttl_score_user", ")", ")", "\n", "\n", "", "if", "self", ".", "ssl_mode", "in", "[", "'item_side'", ",", "'both_side'", "]", ":", "\n", "            ", "item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub1", ",", "self", ".", "pos_items", ")", "\n", "item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub2", ",", "self", ".", "pos_items", ")", "\n", "\n", "normalize_item_emb1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb1", ",", "1", ")", "\n", "normalize_item_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "item_emb2", ",", "1", ")", "\n", "normalize_all_item_emb2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "self", ".", "ia_embeddings_sub2", ",", "1", ")", "\n", "pos_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_item_emb1", ",", "normalize_item_emb2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score_item", "=", "tf", ".", "matmul", "(", "normalize_item_emb1", ",", "normalize_all_item_emb2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score_item", "=", "tf", ".", "exp", "(", "pos_score_item", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score_item", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score_item", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "\n", "ssl_loss_item", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score_item", "/", "ttl_score_item", ")", ")", "\n", "\n", "", "if", "self", ".", "ssl_mode", "==", "'user_side'", ":", "\n", "            ", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "ssl_loss_user", "\n", "", "elif", "self", ".", "ssl_mode", "==", "'item_side'", ":", "\n", "            ", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "ssl_loss_item", "\n", "", "else", ":", "\n", "            ", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "(", "ssl_loss_user", "+", "ssl_loss_item", ")", "\n", "\n", "", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.calc_ssl_loss_v3": [[338, 365], ["tensorflow.unique", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.unique", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.concat", "tensorflow.concat", "tensorflow.nn.l2_normalize", "tensorflow.nn.l2_normalize", "tensorflow.reduce_sum", "tensorflow.matmul", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.log"], "methods", ["None"], ["", "def", "calc_ssl_loss_v3", "(", "self", ")", ":", "\n", "        ", "'''\n        The denominator is summation over the user and item examples in a batch\n        '''", "\n", "batch_users", ",", "_", "=", "tf", ".", "unique", "(", "self", ".", "users", ")", "\n", "user_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub1", ",", "batch_users", ")", "\n", "user_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings_sub2", ",", "batch_users", ")", "\n", "\n", "batch_items", ",", "_", "=", "tf", ".", "unique", "(", "self", ".", "pos_items", ")", "\n", "item_emb1", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub1", ",", "batch_items", ")", "\n", "item_emb2", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings_sub2", ",", "batch_items", ")", "\n", "\n", "emb_merge1", "=", "tf", ".", "concat", "(", "[", "user_emb1", ",", "item_emb1", "]", ",", "axis", "=", "0", ")", "\n", "emb_merge2", "=", "tf", ".", "concat", "(", "[", "user_emb2", ",", "item_emb2", "]", ",", "axis", "=", "0", ")", "\n", "\n", "# cosine similarity", "\n", "normalize_emb_merge1", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb_merge1", ",", "1", ")", "\n", "normalize_emb_merge2", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "emb_merge2", ",", "1", ")", "\n", "\n", "pos_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "normalize_emb_merge1", ",", "normalize_emb_merge2", ")", ",", "axis", "=", "1", ")", "\n", "ttl_score", "=", "tf", ".", "matmul", "(", "normalize_emb_merge1", ",", "normalize_emb_merge2", ",", "transpose_a", "=", "False", ",", "transpose_b", "=", "True", ")", "\n", "\n", "pos_score", "=", "tf", ".", "exp", "(", "pos_score", "/", "self", ".", "ssl_temp", ")", "\n", "ttl_score", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "exp", "(", "ttl_score", "/", "self", ".", "ssl_temp", ")", ",", "axis", "=", "1", ")", "\n", "ssl_loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log", "(", "pos_score", "/", "ttl_score", ")", ")", "\n", "ssl_loss", "=", "self", ".", "ssl_reg", "*", "ssl_loss", "\n", "return", "ssl_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_bpr_loss": [[366, 388], ["tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "util.l2_loss", "util.inner_product", "util.inner_product", "tensorflow.reduce_sum", "util.log_loss", "tensorflow.sigmoid", "tensorflow.sqrt", "tensorflow.sqrt", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.sigmoid", "tensorflow.reduce_sum", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.l2_loss", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.inner_product", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.inner_product", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.log_loss"], ["", "def", "create_bpr_loss", "(", "self", ")", ":", "\n", "        ", "batch_u_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ua_embeddings", ",", "self", ".", "users", ")", "\n", "batch_pos_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "pos_items", ")", "\n", "batch_neg_i_embeddings", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "ia_embeddings", ",", "self", ".", "neg_items", ")", "\n", "batch_u_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "users", ")", "\n", "batch_pos_i_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "pos_items", ")", "\n", "batch_neg_i_embeddings_pre", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "self", ".", "weights", "[", "'item_embedding'", "]", ",", "self", ".", "neg_items", ")", "\n", "regularizer", "=", "l2_loss", "(", "batch_u_embeddings_pre", ",", "batch_pos_i_embeddings_pre", ",", "batch_neg_i_embeddings_pre", ")", "\n", "emb_loss", "=", "self", ".", "reg", "*", "regularizer", "\n", "\n", "pos_scores", "=", "inner_product", "(", "batch_u_embeddings", ",", "batch_pos_i_embeddings", ")", "\n", "neg_scores", "=", "inner_product", "(", "batch_u_embeddings", ",", "batch_neg_i_embeddings", ")", "\n", "bpr_loss", "=", "tf", ".", "reduce_sum", "(", "log_loss", "(", "pos_scores", "-", "neg_scores", ")", ")", "\n", "# self.score_sigmoid = tf.sigmoid(pos_scores)", "\n", "\n", "self", ".", "grad_score", "=", "1", "-", "tf", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", "\n", "self", ".", "grad_user_embed", "=", "(", "1", "-", "tf", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "*", "tf", ".", "sqrt", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "batch_u_embeddings", ",", "batch_u_embeddings", ")", ",", "axis", "=", "1", ")", ")", "\n", "self", ".", "grad_item_embed", "=", "(", "1", "-", "tf", ".", "sigmoid", "(", "pos_scores", "-", "neg_scores", ")", ")", "*", "tf", ".", "sqrt", "(", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "batch_pos_i_embeddings", ",", "batch_pos_i_embeddings", ")", ",", "axis", "=", "1", ")", ")", "\n", "\n", "return", "bpr_loss", ",", "emb_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_sp_mat_to_sp_tensor": [[389, 393], ["X.tocoo().astype", "numpy.mat().transpose", "tensorflow.SparseTensor", "X.tocoo", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_sp_mat_to_sp_tensor", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "tf", ".", "SparseTensor", "(", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_csr_to_sparse_tensor_inputs": [[394, 398], ["X.tocoo", "numpy.mat().transpose", "numpy.mat"], "methods", ["None"], ["", "def", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ",", "X", ")", ":", "\n", "        ", "coo", "=", "X", ".", "tocoo", "(", ")", "\n", "indices", "=", "np", ".", "mat", "(", "[", "coo", ".", "row", ",", "coo", ".", "col", "]", ")", ".", "transpose", "(", ")", "\n", "return", "indices", ",", "coo", ".", "data", ",", "coo", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.train_model": [[399, 490], ["data.PairwiseSamplerV2", "SGL.SGL.logger.info", "SGL.SGL.evaluate", "SGL.SGL.logger.info", "range", "SGL.SGL.logger.info", "SGL.SGL.logger.info", "SGL.SGL.evaluator.metrics_info", "time.time.time", "numpy.isnan", "SGL.SGL.logger.info", "SGL.SGL.logger.info", "SGL.SGL.saver.restore", "SGL.SGL.sess.run", "numpy.save", "numpy.save", "SGL.SGL.evaluate", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "range", "SGL.SGL.sess.run", "SGL.SGL.logger.info", "sys.exit", "SGL.SGL.evaluate", "SGL.SGL.logger.info", "SGL.SGL.evaluate", "SGL.SGL.create_adj_mat", "SGL.SGL.create_adj_mat", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "SGL.SGL._convert_csr_to_sparse_tensor_inputs", "feed_dict.update", "range", "SGL.SGL.logger.info", "SGL.SGL.create_adj_mat", "SGL.SGL.create_adj_mat", "feed_dict.update", "SGL.SGL.logger.info", "SGL.SGL.saver.save", "SGL.SGL.logger.info", "time.time.time"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.metrics_info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL._convert_csr_to_sparse_tensor_inputs", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.create_adj_mat", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "data_iter", "=", "PairwiseSamplerV2", "(", "self", ".", "dataset", ",", "neg_num", "=", "1", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ")", "\n", "\n", "self", ".", "logger", ".", "info", "(", "self", ".", "evaluator", ".", "metrics_info", "(", ")", ")", "\n", "buf", ",", "_", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"\\t\\t%s\"", "%", "buf", ")", "\n", "stopping_step", "=", "0", "\n", "for", "epoch", "in", "range", "(", "1", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "# generate two subgraph and feed into tensorflow graph", "\n", "            ", "sub_mat", "=", "{", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                ", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "sub_mat", "[", "'adj_shape_sub1'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ".", "create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "sub_mat", "[", "'adj_shape_sub2'", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ".", "create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "", "else", ":", "\n", "                ", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "                    ", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ".", "create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", "=", "self", ".", "_convert_csr_to_sparse_tensor_inputs", "(", "self", ".", "create_adj_mat", "(", "is_subgraph", "=", "True", ",", "aug_type", "=", "self", ".", "aug_type", ")", ")", "\n", "", "", "total_loss", ",", "total_ssl_loss", ",", "total_emb_loss", "=", "0.0", ",", "0.0", ",", "0.0", "\n", "\n", "training_start_time", "=", "time", "(", ")", "\n", "\n", "cnt", "=", "0", "\n", "for", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "in", "data_iter", ":", "\n", "                ", "feed_dict", "=", "{", "self", ".", "users", ":", "bat_users", ",", "\n", "self", ".", "pos_items", ":", "bat_pos_items", ",", "\n", "self", ".", "neg_items", ":", "bat_neg_items", ",", "}", "\n", "if", "self", ".", "aug_type", "in", "[", "0", ",", "1", "]", ":", "\n", "                    ", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1'", "]", ":", "sub_mat", "[", "'adj_values_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1'", "]", ":", "sub_mat", "[", "'adj_indices_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1'", "]", ":", "sub_mat", "[", "'adj_shape_sub1'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2'", "]", ":", "sub_mat", "[", "'adj_values_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2'", "]", ":", "sub_mat", "[", "'adj_indices_sub2'", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2'", "]", ":", "sub_mat", "[", "'adj_shape_sub2'", "]", "\n", "}", ")", "\n", "", "else", ":", "\n", "                    ", "for", "k", "in", "range", "(", "1", ",", "self", ".", "n_layers", "+", "1", ")", ":", "\n", "                        ", "feed_dict", ".", "update", "(", "{", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_values_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_indices_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_shape_sub1%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_values_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_indices_sub2%d'", "%", "k", "]", ",", "\n", "self", ".", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", ":", "sub_mat", "[", "'adj_shape_sub2%d'", "%", "k", "]", "\n", "}", ")", "\n", "", "", "loss", ",", "ssl_loss", ",", "emb_loss", ",", "_", "=", "self", ".", "sess", ".", "run", "(", "(", "self", ".", "loss", ",", "self", ".", "ssl_loss", ",", "self", ".", "emb_loss", ",", "self", ".", "opt", ")", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "total_loss", "+=", "loss", "\n", "total_ssl_loss", "+=", "ssl_loss", "\n", "total_emb_loss", "+=", "emb_loss", "\n", "\n", "", "if", "np", ".", "isnan", "(", "total_loss", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Nan is encountered!\"", ")", "\n", "sys", ".", "exit", "(", "1", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\"[iter %d : loss : %.4f = %.4f + %.4f + %.4f, time: %f]\"", "%", "(", "\n", "epoch", ",", "\n", "total_loss", "/", "data_iter", ".", "num_trainings", ",", "\n", "(", "total_loss", "-", "total_ssl_loss", "-", "total_emb_loss", ")", "/", "data_iter", ".", "num_trainings", ",", "\n", "total_ssl_loss", "/", "data_iter", ".", "num_trainings", ",", "\n", "total_emb_loss", "/", "data_iter", ".", "num_trainings", ",", "\n", "time", "(", ")", "-", "training_start_time", ")", ")", "\n", "if", "epoch", "%", "self", ".", "verbose", "==", "0", "and", "epoch", ">", "self", ".", "conf", "[", "'start_testing_epoch'", "]", ":", "\n", "                ", "buf", ",", "flag", "=", "self", ".", "evaluate", "(", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"epoch %d:\\t%s\"", "%", "(", "epoch", ",", "buf", ")", ")", "\n", "if", "flag", ":", "\n", "                    ", "self", ".", "best_epoch", "=", "epoch", "\n", "stopping_step", "=", "0", "\n", "self", ".", "logger", ".", "info", "(", "\"Find a better model.\"", ")", "\n", "if", "self", ".", "save_flag", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "\"Save model to file as pretrain.\"", ")", "\n", "self", ".", "saver", ".", "save", "(", "self", ".", "sess", ",", "self", ".", "tmp_model_folder", ")", "\n", "", "", "else", ":", "\n", "                    ", "stopping_step", "+=", "1", "\n", "if", "stopping_step", ">=", "self", ".", "stop_cnt", ":", "\n", "                        ", "self", ".", "logger", ".", "info", "(", "\"Early stopping is trigger at epoch: {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "break", "\n", "\n", "", "", "", "", "self", ".", "logger", ".", "info", "(", "\"best_result@epoch %d:\\n\"", "%", "self", ".", "best_epoch", ")", "\n", "if", "self", ".", "save_flag", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "'Loading from the saved model.'", ")", "\n", "self", ".", "saver", ".", "restore", "(", "self", ".", "sess", ",", "self", ".", "tmp_model_folder", ")", "\n", "uebd", ",", "iebd", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "weights", "[", "'user_embedding'", "]", ",", "self", ".", "weights", "[", "'item_embedding'", "]", "]", ")", "\n", "np", ".", "save", "(", "self", ".", "save_folder", "+", "'user_embeddings.npy'", ",", "uebd", ")", "\n", "np", ".", "save", "(", "self", ".", "save_folder", "+", "'item_embeddings.npy'", ",", "iebd", ")", "\n", "buf", ",", "_", "=", "self", ".", "evaluate", "(", ")", "\n", "", "elif", "self", ".", "pretrain", ":", "\n", "            ", "buf", ",", "_", "=", "self", ".", "evaluate", "(", ")", "\n", "", "else", ":", "\n", "            ", "buf", "=", "'\\t'", ".", "join", "(", "[", "(", "\"%.4f\"", "%", "x", ")", ".", "ljust", "(", "12", ")", "for", "x", "in", "self", ".", "best_result", "]", ")", "\n", "", "self", ".", "logger", ".", "info", "(", "\"\\t\\t%s\"", "%", "buf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.evaluate": [[492, 500], ["SGL.SGL.sess.run", "SGL.SGL.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "self", ".", "_cur_user_embeddings", ",", "self", ".", "_cur_item_embeddings", "=", "self", ".", "sess", ".", "run", "(", "[", "self", ".", "ua_embeddings", ",", "self", ".", "ia_embeddings", "]", ")", "\n", "flag", "=", "False", "\n", "current_result", ",", "buf", "=", "self", ".", "evaluator", ".", "evaluate", "(", "self", ")", "\n", "if", "self", ".", "best_result", "[", "1", "]", "<", "current_result", "[", "1", "]", ":", "\n", "            ", "self", ".", "best_result", "=", "current_result", "\n", "flag", "=", "True", "\n", "", "return", "buf", ",", "flag", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.predict": [[501, 511], ["numpy.matmul", "numpy.sum", "numpy.multiply"], "methods", ["None"], ["", "def", "predict", "(", "self", ",", "user_ids", ",", "candidate_items", "=", "None", ")", ":", "\n", "        ", "if", "candidate_items", "is", "None", ":", "\n", "            ", "user_embed", "=", "self", ".", "_cur_user_embeddings", "[", "user_ids", "]", "\n", "ratings", "=", "np", ".", "matmul", "(", "user_embed", ",", "self", ".", "_cur_item_embeddings", ".", "T", ")", "\n", "", "else", ":", "\n", "            ", "ratings", "=", "[", "]", "\n", "user_embed", "=", "self", ".", "_cur_user_embeddings", "[", "user_ids", "]", "\n", "items_embed", "=", "self", ".", "_cur_item_embeddings", "[", "candidate_items", "]", "\n", "ratings", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "user_embed", ",", "items_embed", ")", ",", "1", ")", "\n", "", "return", "ratings", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.activation_function": [[12, 37], ["tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.relu", "tensorflow.nn.elu", "tensorflow.identity", "tensorflow.nn.softmax", "tensorflow.nn.selu", "NotImplementedError"], "function", ["None"], ["def", "activation_function", "(", "act", ",", "act_input", ")", ":", "\n", "        ", "act_func", "=", "None", "\n", "if", "act", "==", "\"sigmoid\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "sigmoid", "(", "act_input", ")", "\n", "", "elif", "act", "==", "\"tanh\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "tanh", "(", "act_input", ")", "\n", "\n", "", "elif", "act", "==", "\"relu\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "relu", "(", "act_input", ")", "\n", "\n", "", "elif", "act", "==", "\"elu\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "elu", "(", "act_input", ")", "\n", "\n", "", "elif", "act", "==", "\"identity\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "identity", "(", "act_input", ")", "\n", "\n", "", "elif", "act", "==", "\"softmax\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "softmax", "(", "act_input", ")", "\n", "\n", "", "elif", "act", "==", "\"selu\"", ":", "\n", "            ", "act_func", "=", "tf", ".", "nn", ".", "selu", "(", "act_input", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"ERROR\"", ")", "\n", "", "return", "act_func", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.get_data_format": [[39, 56], ["ValueError"], "function", ["None"], ["", "def", "get_data_format", "(", "data_format", ")", ":", "\n", "    ", "if", "data_format", "==", "\"UIRT\"", ":", "\n", "        ", "columns", "=", "[", "\"user\"", ",", "\"item\"", ",", "\"rating\"", ",", "\"time\"", "]", "\n", "\n", "", "elif", "data_format", "==", "\"UIR\"", ":", "\n", "        ", "columns", "=", "[", "\"user\"", ",", "\"item\"", ",", "\"rating\"", "]", "\n", "\n", "", "elif", "data_format", "==", "\"UIT\"", ":", "\n", "        ", "columns", "=", "[", "\"user\"", ",", "\"item\"", ",", "\"time\"", "]", "\n", "\n", "", "elif", "data_format", "==", "\"UI\"", ":", "\n", "        ", "columns", "=", "[", "\"user\"", ",", "\"item\"", "]", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"please choose a correct data format. \"", ")", "\n", "\n", "", "return", "columns", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.ensureDir": [[58, 62], ["os.path.dirname", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "ensureDir", "(", "dir_path", ")", ":", "\n", "    ", "d", "=", "os", ".", "path", ".", "dirname", "(", "dir_path", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "d", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "d", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict": [[64, 74], ["enumerate", "len", "value.indices.copy().tolist", "value.indices.copy"], "function", ["None"], ["", "", "def", "csr_to_user_dict", "(", "train_matrix", ")", ":", "\n", "    ", "\"\"\"convert a scipy.sparse.csr_matrix to a dict,\n    where the key is row number, and value is the\n    non-empty index in each row.\n    \"\"\"", "\n", "train_dict", "=", "{", "}", "\n", "for", "idx", ",", "value", "in", "enumerate", "(", "train_matrix", ")", ":", "\n", "        ", "if", "len", "(", "value", ".", "indices", ")", ":", "\n", "            ", "train_dict", "[", "idx", "]", "=", "value", ".", "indices", ".", "copy", "(", ")", ".", "tolist", "(", ")", "\n", "", "", "return", "train_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict_bytime": [[76, 85], ["tool.csr_to_user_dict", "csr_to_user_dict.items", "sorted", "numpy.array().tolist", "numpy.array"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict"], ["", "def", "csr_to_user_dict_bytime", "(", "time_matrix", ",", "train_matrix", ")", ":", "\n", "    ", "train_dict", "=", "{", "}", "\n", "time_matrix", "=", "time_matrix", "\n", "user_pos_items", "=", "csr_to_user_dict", "(", "train_matrix", ")", "\n", "for", "u", ",", "items", "in", "user_pos_items", ".", "items", "(", ")", ":", "\n", "        ", "sorted_items", "=", "sorted", "(", "items", ",", "key", "=", "lambda", "x", ":", "time_matrix", "[", "u", ",", "x", "]", ")", "\n", "train_dict", "[", "u", "]", "=", "np", ".", "array", "(", "sorted_items", ",", "dtype", "=", "np", ".", "int32", ")", ".", "tolist", "(", ")", "\n", "\n", "", "return", "train_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.get_initializer": [[87, 106], ["tensorflow.truncated_normal_initializer", "tensorflow.random_uniform_initializer", "tensorflow.random_normal_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.contrib.layers.variance_scaling_initializer", "tensorflow.truncated_normal_initializer"], "function", ["None"], ["", "def", "get_initializer", "(", "init_method", ",", "stddev", ")", ":", "\n", "        ", "if", "init_method", "==", "'tnormal'", ":", "\n", "            ", "return", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "elif", "init_method", "==", "'uniform'", ":", "\n", "            ", "return", "tf", ".", "random_uniform_initializer", "(", "-", "stddev", ",", "stddev", ")", "\n", "", "elif", "init_method", "==", "'normal'", ":", "\n", "            ", "return", "tf", ".", "random_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "elif", "init_method", "==", "'xavier_normal'", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "False", ")", "\n", "", "elif", "init_method", "==", "'xavier_uniform'", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "True", ")", "\n", "", "elif", "init_method", "==", "'he_normal'", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "\n", "factor", "=", "2.0", ",", "mode", "=", "'FAN_IN'", ",", "uniform", "=", "False", ")", "\n", "", "elif", "init_method", "==", "'he_uniform'", ":", "\n", "            ", "return", "tf", ".", "contrib", ".", "layers", ".", "variance_scaling_initializer", "(", "\n", "factor", "=", "2.0", ",", "mode", "=", "'FAN_IN'", ",", "uniform", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "return", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.noise_validator": [[108, 122], ["float", "float", "noise.split", "noise.split", "noise.split"], "function", ["None"], ["", "", "def", "noise_validator", "(", "noise", ",", "allowed_noises", ")", ":", "\n", "    ", "'''Validates the noise provided'''", "\n", "try", ":", "\n", "        ", "if", "noise", "in", "allowed_noises", ":", "\n", "            ", "return", "True", "\n", "", "elif", "noise", ".", "split", "(", "'-'", ")", "[", "0", "]", "==", "'mask'", "and", "float", "(", "noise", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", ":", "\n", "            ", "t", "=", "float", "(", "noise", ".", "split", "(", "'-'", ")", "[", "1", "]", ")", "\n", "if", "t", ">=", "0.0", "and", "t", "<=", "1.0", ":", "\n", "                ", "return", "True", "\n", "", "else", ":", "\n", "                ", "return", "False", "\n", "", "", "", "except", ":", "\n", "        ", "return", "False", "\n", "", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice": [[124, 139], ["numpy.arange", "numpy.random.choice", "np.array.flatten", "numpy.ones_like", "numpy.array", "numpy.sum"], "function", ["None"], ["", "def", "randint_choice", "(", "high", ",", "size", "=", "None", ",", "replace", "=", "True", ",", "p", "=", "None", ",", "exclusion", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return random integers from `0` (inclusive) to `high` (exclusive).\n    \"\"\"", "\n", "a", "=", "np", ".", "arange", "(", "high", ")", "\n", "if", "exclusion", "is", "not", "None", ":", "\n", "        ", "if", "p", "is", "None", ":", "\n", "            ", "p", "=", "np", ".", "ones_like", "(", "a", ")", "\n", "", "else", ":", "\n", "            ", "p", "=", "np", ".", "array", "(", "p", ",", "copy", "=", "True", ")", "\n", "", "p", "=", "p", ".", "flatten", "(", ")", "\n", "p", "[", "exclusion", "]", "=", "0", "\n", "", "if", "p", "is", "not", "None", ":", "\n", "        ", "p", "=", "p", "/", "np", ".", "sum", "(", "p", ")", "\n", "", "sample", "=", "np", ".", "random", ".", "choice", "(", "a", ",", "size", "=", "size", ",", "replace", "=", "replace", ",", "p", "=", "p", ")", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.batch_randint_choice": [[141, 168], ["ValueError", "ValueError", "tool.randint_choice", "concurrent.futures.ThreadPoolExecutor", "executor.map", "len", "len", "range", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map"], ["", "def", "batch_randint_choice", "(", "high", ",", "size", ",", "replace", "=", "True", ",", "p", "=", "None", ",", "exclusion", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return random integers from `0` (inclusive) to `high` (exclusive).\n    :param high: integer\n    :param size: 1-D array_like\n    :param replace: bool\n    :param p: 2-D array_like\n    :param exclusion: a list of 1-D array_like\n    :return: a list of 1-D array_like sample\n    \"\"\"", "\n", "\n", "# if p is not None and (len(p) != len(size) or len(p[0]) != high):", "\n", "if", "p", "is", "not", "None", "and", "(", "len", "(", "p", ")", "!=", "len", "(", "size", ")", "and", "len", "(", "p", ")", "!=", "high", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"The shape of 'p' is not compatible with the shapes of 'array' and 'size'!\"", ")", "\n", "\n", "", "if", "exclusion", "is", "not", "None", "and", "len", "(", "exclusion", ")", "!=", "len", "(", "size", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"The shape of 'exclusion' is not compatible with the shape of 'size'!\"", ")", "\n", "\n", "", "def", "choice_one", "(", "idx", ")", ":", "\n", "# p_tmp = p[idx] if p is not None else None", "\n", "        ", "p_tmp", "=", "p", "if", "p", "is", "not", "None", "else", "None", "\n", "exc", "=", "exclusion", "[", "idx", "]", "if", "exclusion", "is", "not", "None", "else", "None", "\n", "return", "randint_choice", "(", "high", ",", "size", "[", "idx", "]", ",", "replace", "=", "replace", ",", "p", "=", "p_tmp", ",", "exclusion", "=", "exc", ")", "\n", "\n", "", "with", "ThreadPoolExecutor", "(", ")", "as", "executor", ":", "\n", "        ", "results", "=", "executor", ".", "map", "(", "choice_one", ",", "range", "(", "len", "(", "size", ")", ")", ")", "\n", "\n", "", "return", "[", "result", "for", "result", "in", "results", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert": [[170, 185], ["inspect.signature", "functools.wraps", "inspect.signature.bind_partial", "inspect.signature.bind", "sig.bind.arguments.items", "func", "isinstance", "TypeError"], "function", ["None"], ["", "def", "typeassert", "(", "*", "type_args", ",", "**", "type_kwargs", ")", ":", "\n", "    ", "def", "decorate", "(", "func", ")", ":", "\n", "        ", "sig", "=", "signature", "(", "func", ")", "\n", "bound_types", "=", "sig", ".", "bind_partial", "(", "*", "type_args", ",", "**", "type_kwargs", ")", ".", "arguments", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "bound_values", "=", "sig", ".", "bind", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "name", ",", "value", "in", "bound_values", ".", "arguments", ".", "items", "(", ")", ":", "\n", "                ", "if", "name", "in", "bound_types", ":", "\n", "                    ", "if", "not", "isinstance", "(", "value", ",", "bound_types", "[", "name", "]", ")", ":", "\n", "                        ", "raise", "TypeError", "(", "'Argument {} must be {}'", ".", "format", "(", "name", ",", "bound_types", "[", "name", "]", ")", ")", "\n", "", "", "", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "return", "wrapper", "\n", "", "return", "decorate", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.max_top_k": [[187, 190], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["", "def", "max_top_k", "(", "a", ",", "top_k", "=", "50", ")", ":", "\n", "    ", "ele_idx", "=", "heapq", ".", "nlargest", "(", "top_k", ",", "zip", "(", "a", ",", "itertools", ".", "count", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "ele", "for", "ele", ",", "idx", "in", "ele_idx", "]", ",", "dtype", "=", "np", ".", "intc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.argmax_top_k": [[192, 195], ["heapq.nlargest", "numpy.array", "zip", "itertools.count"], "function", ["None"], ["", "def", "argmax_top_k", "(", "a", ",", "top_k", "=", "50", ")", ":", "\n", "    ", "ele_idx", "=", "heapq", ".", "nlargest", "(", "top_k", ",", "zip", "(", "a", ",", "itertools", ".", "count", "(", ")", ")", ")", "\n", "return", "np", ".", "array", "(", "[", "idx", "for", "ele", ",", "idx", "in", "ele_idx", "]", ",", "dtype", "=", "np", ".", "intc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.pad_sequences": [[197, 239], ["numpy.full", "enumerate", "numpy.max", "len", "len", "len", "ValueError", "ValueError", "len", "len"], "function", ["None"], ["", "def", "pad_sequences", "(", "sequences", ",", "value", "=", "0.", ",", "max_len", "=", "None", ",", "\n", "padding", "=", "'post'", ",", "truncating", "=", "'post'", ",", "dtype", "=", "np", ".", "int32", ")", ":", "\n", "    ", "\"\"\"Pads sequences to the same length.\n\n    Args:\n        sequences (list): A list of lists, where each element is a sequence.\n        value (int or float): Padding value. Defaults to `0.`.\n        max_len (int or None): Maximum length of all sequences.\n        padding (str): `\"pre\"` or `\"post\"`: pad either before or after each\n            sequence. Defaults to `post`.\n        truncating (str): `\"pre\"` or `\"post\"`: remove values from sequences\n            larger than `max_len`, either at the beginning or at the end of\n            the sequences. Defaults to `post`.\n        dtype (int or float): Type of the output sequences. Defaults to `np.int32`.\n\n    Returns:\n        np.ndarray: Numpy array with shape `(len(sequences), max_len)`.\n\n    Raises:\n        ValueError: If `padding` or `truncating` is not understood.\n    \"\"\"", "\n", "if", "max_len", "is", "None", ":", "\n", "        ", "max_len", "=", "np", ".", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "sequences", "]", ")", "\n", "\n", "", "x", "=", "np", ".", "full", "(", "[", "len", "(", "sequences", ")", ",", "max_len", "]", ",", "value", ",", "dtype", "=", "dtype", ")", "\n", "for", "idx", ",", "s", "in", "enumerate", "(", "sequences", ")", ":", "\n", "        ", "if", "not", "len", "(", "s", ")", ":", "\n", "            ", "continue", "# empty list/array was found", "\n", "", "if", "truncating", "==", "'pre'", ":", "\n", "            ", "trunc", "=", "s", "[", "-", "max_len", ":", "]", "\n", "", "elif", "truncating", "==", "'post'", ":", "\n", "            ", "trunc", "=", "s", "[", ":", "max_len", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Truncating type \"%s\" not understood'", "%", "truncating", ")", "\n", "\n", "", "if", "padding", "==", "'post'", ":", "\n", "            ", "x", "[", "idx", ",", ":", "len", "(", "trunc", ")", "]", "=", "trunc", "\n", "", "elif", "padding", "==", "'pre'", ":", "\n", "            ", "x", "[", "idx", ",", "-", "len", "(", "trunc", ")", ":", "]", "=", "trunc", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Padding type \"%s\" not understood'", "%", "padding", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.inner_product": [[241, 244], ["tensorflow.name_scope", "tensorflow.reduce_sum", "tensorflow.multiply"], "function", ["None"], ["", "def", "inner_product", "(", "a", ",", "b", ",", "name", "=", "\"inner_product\"", ")", ":", "\n", "    ", "with", "tf", ".", "name_scope", "(", "name", "=", "name", ")", ":", "\n", "        ", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "multiply", "(", "a", ",", "b", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.timer": [[246, 257], ["functools.wraps", "time.time", "func", "time.time", "print"], "function", ["None"], ["", "", "def", "timer", "(", "func", ")", ":", "\n", "    ", "\"\"\"The timer decorator\n    \"\"\"", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "result", "=", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"%s function cost: %fs\"", "%", "(", "func", ".", "__name__", ",", "end_time", "-", "start_time", ")", ")", "\n", "return", "result", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.l2_loss": [[259, 261], ["tensorflow.add_n", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.l2_loss"], ["", "def", "l2_loss", "(", "*", "params", ")", ":", "\n", "    ", "return", "tf", ".", "add_n", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "w", ")", "for", "w", "in", "params", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.log_loss": [[263, 268], ["tensorflow.name_scope", "tensorflow.log_sigmoid"], "function", ["None"], ["", "def", "log_loss", "(", "yij", ",", "name", "=", "\"log_loss\"", ")", ":", "\n", "    ", "\"\"\" bpr loss\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", ":", "\n", "        ", "return", "-", "tf", ".", "log_sigmoid", "(", "yij", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__init__": [[44, 69], ["configurator.Configurator._read_cmd_arg", "configurator.Configurator._read_config_file", "os.path.join", "configurator.Configurator._read_config_file", "os.path.isfile", "FileNotFoundError", "os.path.dirname"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator._read_cmd_arg", "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator._read_config_file", "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator._read_config_file"], ["def", "__init__", "(", "self", ",", "config_file", ",", "default_section", "=", "\"default\"", ")", ":", "\n", "        ", "\"\"\"Initializes a new `Configurator` instance.\n\n        Args:\n            config_file (str): The path of ini-style configuration file.\n            default_section (str): The default section if there are more than\n                one sections in configuration file.\n\n        Raises:\n             FileNotFoundError: If `config_file` is not existing.\n             SyntaxError: If the format of arguments in commend line is invalid.\n             ValueError: If there is more than one section but no one section\n                named `default_section` in ini-style file.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "config_file", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"There is not config file named '%s'!\"", "%", "config_file", ")", "\n", "\n", "", "self", ".", "_default_section", "=", "default_section", "\n", "self", ".", "cmd_arg", "=", "self", ".", "_read_cmd_arg", "(", ")", "\n", "self", ".", "lib_arg", "=", "self", ".", "_read_config_file", "(", "config_file", ")", "\n", "self", ".", "lib_arg", "[", "\"proj_path\"", "]", "=", "os", ".", "path", ".", "dirname", "(", "config_file", ")", "+", "'/'", "\n", "config_dir", "=", "self", ".", "lib_arg", "[", "\"config_dir\"", "]", "\n", "model_name", "=", "self", ".", "lib_arg", "[", "\"recommender\"", "]", "\n", "arg_file", "=", "os", ".", "path", ".", "join", "(", "config_dir", ",", "model_name", "+", "'.properties'", ")", "\n", "self", ".", "alg_arg", "=", "self", ".", "_read_config_file", "(", "arg_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator._read_cmd_arg": [[70, 80], ["collections.OrderedDict", "arg[].split", "arg.startswith", "SyntaxError"], "methods", ["None"], ["", "def", "_read_cmd_arg", "(", "self", ")", ":", "\n", "        ", "cmd_arg", "=", "OrderedDict", "(", ")", "\n", "if", "\"ipykernel_launcher\"", "not", "in", "sys", ".", "argv", "[", "0", "]", ":", "\n", "            ", "for", "arg", "in", "sys", ".", "argv", "[", "1", ":", "]", ":", "\n", "                ", "if", "not", "arg", ".", "startswith", "(", "\"--\"", ")", ":", "\n", "                    ", "raise", "SyntaxError", "(", "\"Commend arg must start with '--', but '%s' is not!\"", "%", "arg", ")", "\n", "", "arg_name", ",", "arg_value", "=", "arg", "[", "2", ":", "]", ".", "split", "(", "\"=\"", ")", "\n", "cmd_arg", "[", "arg_name", "]", "=", "arg_value", "\n", "\n", "", "", "return", "cmd_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator._read_config_file": [[81, 103], ["configparser.ConfigParser", "configparser.ConfigParser.read", "configparser.ConfigParser.sections", "collections.OrderedDict", "len", "ValueError", "config[].items", "len", "ValueError"], "methods", ["None"], ["", "def", "_read_config_file", "(", "self", ",", "filename", ")", ":", "\n", "        ", "config", "=", "ConfigParser", "(", ")", "\n", "config", ".", "optionxform", "=", "str", "\n", "config", ".", "read", "(", "filename", ",", "encoding", "=", "\"utf-8\"", ")", "\n", "sections", "=", "config", ".", "sections", "(", ")", "\n", "\n", "if", "len", "(", "sections", ")", "==", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'%s' is empty!\"", "%", "filename", ")", "\n", "", "elif", "len", "(", "sections", ")", "==", "1", ":", "\n", "            ", "config_sec", "=", "sections", "[", "0", "]", "\n", "", "elif", "self", ".", "_default_section", "in", "sections", ":", "\n", "            ", "config_sec", "=", "self", ".", "_default_section", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"'%s' has more than one sections but there is no \"", "\n", "\"section named '%s'\"", "%", "filename", ",", "self", ".", "_default_section", ")", "\n", "\n", "", "config_arg", "=", "OrderedDict", "(", "config", "[", "config_sec", "]", ".", "items", "(", ")", ")", "\n", "for", "arg", "in", "self", ".", "cmd_arg", ":", "\n", "            ", "if", "arg", "in", "config_arg", ":", "\n", "                ", "config_arg", "[", "arg", "]", "=", "self", ".", "cmd_arg", "[", "arg", "]", "\n", "\n", "", "", "return", "config_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.params_str": [[104, 116], ["configurator.Configurator.alg_arg.items", "len"], "methods", ["None"], ["", "def", "params_str", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get a summary of parameters.\n\n        Returns:\n            str: A string summary of parameters.\n        \"\"\"", "\n", "params_id", "=", "'_'", ".", "join", "(", "[", "\"{}={}\"", ".", "format", "(", "arg", ",", "value", ")", "for", "arg", ",", "value", "in", "self", ".", "alg_arg", ".", "items", "(", ")", "if", "len", "(", "value", ")", "<", "20", "]", ")", "\n", "special_char", "=", "{", "'/'", ",", "'\\\\'", ",", "'\\\"'", ",", "':'", ",", "'*'", ",", "'?'", ",", "'<'", ",", "'>'", ",", "'|'", ",", "'\\t'", "}", "\n", "params_id", "=", "[", "c", "if", "c", "not", "in", "special_char", "else", "'_'", "for", "c", "in", "params_id", "]", "\n", "params_id", "=", "''", ".", "join", "(", "params_id", ")", "\n", "# params_id = \"%s_%s\" % (self[\"recommender\"], params_id)", "\n", "return", "params_id", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__getitem__": [[117, 144], ["isinstance", "TypeError", "eval", "isinstance", "KeyError", "param.lower", "param.lower"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "item", ",", "str", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"index must be a str\"", ")", "\n", "\n", "", "if", "item", "in", "self", ".", "lib_arg", ":", "\n", "            ", "param", "=", "self", ".", "lib_arg", "[", "item", "]", "\n", "", "elif", "item", "in", "self", ".", "alg_arg", ":", "\n", "            ", "param", "=", "self", ".", "alg_arg", "[", "item", "]", "\n", "", "elif", "item", "in", "self", ".", "cmd_arg", ":", "\n", "            ", "param", "=", "self", ".", "cmd_arg", "[", "item", "]", "\n", "", "else", ":", "\n", "            ", "raise", "KeyError", "(", "\"There are not the parameter named '%s'\"", "%", "item", ")", "\n", "\n", "# convert param from str to value, i.e. int, float or list etc.", "\n", "", "try", ":", "\n", "            ", "value", "=", "eval", "(", "param", ")", "\n", "if", "not", "isinstance", "(", "value", ",", "(", "str", ",", "int", ",", "float", ",", "list", ",", "tuple", ",", "bool", ",", "None", ".", "__class__", ")", ")", ":", "\n", "                ", "value", "=", "param", "\n", "", "", "except", ":", "\n", "            ", "if", "param", ".", "lower", "(", ")", "==", "\"true\"", ":", "\n", "                ", "value", "=", "True", "\n", "", "elif", "param", ".", "lower", "(", ")", "==", "\"false\"", ":", "\n", "                ", "value", "=", "False", "\n", "", "else", ":", "\n", "                ", "value", "=", "param", "\n", "\n", "", "", "return", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__getattr__": [[145, 147], ["None"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "item", ")", ":", "\n", "        ", "return", "self", "[", "item", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__contains__": [[148, 150], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "o", ")", ":", "\n", "        ", "return", "o", "in", "self", ".", "lib_arg", "or", "o", "in", "self", ".", "alg_arg", "or", "o", "in", "self", ".", "cmd_arg", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__str__": [[151, 156], ["configurator.Configurator.lib_arg.items", "configurator.Configurator.alg_arg.items"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "lib_info", "=", "'\\n'", ".", "join", "(", "[", "\"{}={}\"", ".", "format", "(", "arg", ",", "value", ")", "for", "arg", ",", "value", "in", "self", ".", "lib_arg", ".", "items", "(", ")", "]", ")", "\n", "alg_info", "=", "'\\n'", ".", "join", "(", "[", "\"{}={}\"", ".", "format", "(", "arg", ",", "value", ")", "for", "arg", ",", "value", "in", "self", ".", "alg_arg", ".", "items", "(", ")", "]", ")", "\n", "info", "=", "\"\\n\\nNeuRec hyperparameters:\\n%s\\n\\n%s's hyperparameters:\\n%s\\n\"", "%", "(", "lib_info", ",", "self", "[", "\"recommender\"", "]", ",", "alg_info", ")", "\n", "return", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.configurator.Configurator.__repr__": [[157, 159], ["configurator.Configurator.__str__"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.__init__": [[18, 47], ["os.path.dirname", "logging.getLogger", "logger.Logger.logger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.StreamHandler.setFormatter", "logger.Logger.logger.addHandler", "logger.Logger.logger.addHandler", "os.path.exists", "os.makedirs"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Initializes a new `Logger` instance.\n\n        Args:\n            filename (str): File name to create. The directory component of this\n                file will be created automatically if it is not existing.\n        \"\"\"", "\n", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n", "", "self", ".", "logger", "=", "logging", ".", "getLogger", "(", "filename", ")", "\n", "self", ".", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s.%(msecs)03d: %(message)s'", ",", "\n", "datefmt", "=", "'%Y-%m-%d %H:%M:%S'", ")", "\n", "\n", "# write into file", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# show on console", "\n", "ch", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "\n", "# add to Handler", "\n", "self", ".", "logger", ".", "addHandler", "(", "fh", ")", "\n", "self", ".", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush": [[48, 51], ["handler.flush"], "methods", ["None"], ["", "def", "_flush", "(", "self", ")", ":", "\n", "        ", "for", "handler", "in", "self", ".", "logger", ".", "handlers", ":", "\n", "            ", "handler", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.debug": [[52, 55], ["logger.Logger.logger.debug", "logger.Logger._flush"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.debug", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush"], ["", "", "def", "debug", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "logger", ".", "debug", "(", "message", ")", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info": [[56, 59], ["logger.Logger.logger.info", "logger.Logger._flush"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush"], ["", "def", "info", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "logger", ".", "info", "(", "message", ")", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.warning": [[60, 63], ["logger.Logger.logger.warning", "logger.Logger._flush"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.warning", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush"], ["", "def", "warning", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "logger", ".", "warning", "(", "message", ")", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.error": [[64, 67], ["logger.Logger.logger.error", "logger.Logger._flush"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.error", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush"], ["", "def", "error", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "logger", ".", "error", "(", "message", ")", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.critical": [[68, 71], ["logger.Logger.logger.critical", "logger.Logger._flush"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.critical", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger._flush"], ["", "def", "critical", "(", "self", ",", "message", ")", ":", "\n", "        ", "self", ".", "logger", ".", "critical", "(", "message", ")", "\n", "self", ".", "_flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_generator._get_pairwise_all_likefism_data": [[5, 28], ["range", "train_matrix[].indices.copy().tolist", "len", "util.tool.randint_choice", "enumerate", "train_matrix[].indices.copy", "user_input_neg.append", "num_idx_neg.append", "item_input_neg.append", "train_matrix[].indices.copy().tolist.remove", "user_input_pos.append", "num_idx_pos.append", "item_input_pos.append"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["def", "_get_pairwise_all_likefism_data", "(", "dataset", ")", ":", "\n", "    ", "user_input_pos", ",", "user_input_neg", ",", "num_idx_pos", ",", "num_idx_neg", ",", "item_input_pos", ",", "item_input_neg", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_items", "=", "dataset", ".", "num_items", "\n", "num_users", "=", "dataset", ".", "num_users", "\n", "train_matrix", "=", "dataset", ".", "train_matrix", "\n", "for", "u", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "items_by_u", "=", "train_matrix", "[", "u", "]", ".", "indices", ".", "copy", "(", ")", ".", "tolist", "(", ")", "\n", "num_items_by_u", "=", "len", "(", "items_by_u", ")", "\n", "if", "num_items_by_u", ">", "1", ":", "\n", "            ", "negative_items", "=", "randint_choice", "(", "num_items", ",", "num_items_by_u", ",", "replace", "=", "True", ",", "exclusion", "=", "items_by_u", ")", "\n", "\n", "for", "index", ",", "i", "in", "enumerate", "(", "items_by_u", ")", ":", "\n", "                ", "j", "=", "negative_items", "[", "index", "]", "\n", "user_input_neg", ".", "append", "(", "items_by_u", ")", "\n", "num_idx_neg", ".", "append", "(", "num_items_by_u", ")", "\n", "item_input_neg", ".", "append", "(", "j", ")", "\n", "\n", "items_by_u", ".", "remove", "(", "i", ")", "\n", "user_input_pos", ".", "append", "(", "items_by_u", ")", "\n", "num_idx_pos", ".", "append", "(", "num_items_by_u", "-", "1", ")", "\n", "item_input_pos", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "return", "user_input_pos", ",", "user_input_neg", ",", "num_idx_pos", ",", "num_idx_neg", ",", "item_input_pos", ",", "item_input_neg", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_generator._get_pointwise_all_likefism_data": [[29, 53], ["range", "train_dict[].copy", "set", "len", "range", "train_dict[].copy.remove", "user_input.append", "item_input.append", "num_idx.append", "labels.append", "numpy.random.randint", "user_input.append", "item_input.append", "num_idx.append", "labels.append", "numpy.random.randint"], "function", ["None"], ["", "def", "_get_pointwise_all_likefism_data", "(", "dataset", ",", "num_negatives", ",", "train_dict", ")", ":", "\n", "    ", "user_input", ",", "num_idx", ",", "item_input", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "num_users", "=", "dataset", ".", "num_users", "\n", "num_items", "=", "dataset", ".", "num_items", "\n", "for", "u", "in", "range", "(", "num_users", ")", ":", "\n", "        ", "items_by_user", "=", "train_dict", "[", "u", "]", ".", "copy", "(", ")", "\n", "items_set", "=", "set", "(", "items_by_user", ")", "\n", "size", "=", "len", "(", "items_by_user", ")", "\n", "for", "i", "in", "items_by_user", ":", "\n", "# negative instances", "\n", "            ", "for", "_", "in", "range", "(", "num_negatives", ")", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "num_items", ")", "\n", "while", "j", "in", "items_set", ":", "\n", "                    ", "j", "=", "np", ".", "random", ".", "randint", "(", "num_items", ")", "\n", "", "user_input", ".", "append", "(", "items_by_user", ")", "\n", "item_input", ".", "append", "(", "j", ")", "\n", "num_idx", ".", "append", "(", "size", ")", "\n", "labels", ".", "append", "(", "0", ")", "\n", "", "items_by_user", ".", "remove", "(", "i", ")", "\n", "user_input", ".", "append", "(", "items_by_user", ")", "\n", "item_input", ".", "append", "(", "i", ")", "\n", "num_idx", ".", "append", "(", "size", "-", "1", ")", "\n", "labels", ".", "append", "(", "1", ")", "\n", "", "", "return", "user_input", ",", "num_idx", ",", "item_input", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_generator._get_pairwise_all_likefossil_data": [[54, 79], ["range", "train_dict[].copy", "len", "util.tool.randint_choice", "range", "len", "range", "item_input_recents.append", "user_input_neg.append", "num_idx_neg.append", "item_input_neg.append", "train_dict[].copy.remove", "user_input_id.append", "user_input_pos.append", "num_idx_pos.append", "item_input_pos.append", "item_input_recent.append"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["", "def", "_get_pairwise_all_likefossil_data", "(", "dataset", ",", "high_order", ",", "train_dict", ")", ":", "\n", "    ", "user_input_id", ",", "user_input_pos", ",", "user_input_neg", ",", "num_idx_pos", ",", "num_idx_neg", ",", "item_input_pos", ",", "item_input_neg", ",", "item_input_recents", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "range", "(", "dataset", ".", "num_users", ")", ":", "\n", "        ", "items_by_user", "=", "train_dict", "[", "u", "]", ".", "copy", "(", ")", "\n", "num_items_by_u", "=", "len", "(", "items_by_user", ")", "\n", "if", "num_items_by_u", ">", "high_order", ":", "\n", "            ", "negative_items", "=", "randint_choice", "(", "dataset", ".", "num_items", ",", "num_items_by_u", ",", "replace", "=", "True", ",", "exclusion", "=", "items_by_user", ")", "\n", "for", "idx", "in", "range", "(", "high_order", ",", "len", "(", "train_dict", "[", "u", "]", ")", ")", ":", "\n", "                ", "i", "=", "train_dict", "[", "u", "]", "[", "idx", "]", "# item id ", "\n", "item_input_recent", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "high_order", "+", "1", ")", ":", "\n", "                    ", "item_input_recent", ".", "append", "(", "train_dict", "[", "u", "]", "[", "idx", "-", "t", "]", ")", "\n", "", "item_input_recents", ".", "append", "(", "item_input_recent", ")", "\n", "j", "=", "negative_items", "[", "idx", "]", "\n", "user_input_neg", ".", "append", "(", "items_by_user", ")", "\n", "num_idx_neg", ".", "append", "(", "num_items_by_u", ")", "\n", "item_input_neg", ".", "append", "(", "j", ")", "\n", "\n", "items_by_user", ".", "remove", "(", "i", ")", "\n", "user_input_id", ".", "append", "(", "u", ")", "\n", "user_input_pos", ".", "append", "(", "items_by_user", ")", "\n", "num_idx_pos", ".", "append", "(", "num_items_by_u", "-", "1", ")", "\n", "item_input_pos", ".", "append", "(", "i", ")", "\n", "\n", "", "", "", "return", "user_input_id", ",", "user_input_pos", ",", "user_input_neg", ",", "num_idx_pos", ",", "num_idx_neg", ",", "item_input_pos", ",", "item_input_neg", ",", "item_input_recents", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_generator._get_pointwise_all_likefossil_data": [[80, 110], ["range", "train_dict[].copy", "set", "len", "range", "len", "range", "range", "train_dict[].copy.remove", "user_input.append", "user_input_id.append", "item_input_recents.append", "item_input.append", "num_idx.append", "labels.append", "item_input_recent.append", "numpy.random.randint", "user_input_id.append", "user_input.append", "item_input_recents.append", "item_input.append", "num_idx.append", "labels.append", "numpy.random.randint"], "function", ["None"], ["", "def", "_get_pointwise_all_likefossil_data", "(", "dataset", ",", "high_order", ",", "num_negatives", ",", "train_dict", ")", ":", "\n", "    ", "user_input_id", ",", "user_input", ",", "num_idx", ",", "item_input", ",", "item_input_recents", ",", "labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "u", "in", "range", "(", "dataset", ".", "num_users", ")", ":", "\n", "        ", "items_by_user", "=", "train_dict", "[", "u", "]", ".", "copy", "(", ")", "\n", "items_set", "=", "set", "(", "items_by_user", ")", "\n", "size", "=", "len", "(", "items_by_user", ")", "\n", "for", "idx", "in", "range", "(", "high_order", ",", "len", "(", "train_dict", "[", "u", "]", ")", ")", ":", "\n", "            ", "i", "=", "train_dict", "[", "u", "]", "[", "idx", "]", "# item id ", "\n", "item_input_recent", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "1", ",", "high_order", "+", "1", ")", ":", "\n", "                ", "item_input_recent", ".", "append", "(", "train_dict", "[", "u", "]", "[", "idx", "-", "t", "]", ")", "\n", "# negative instances", "\n", "", "for", "_", "in", "range", "(", "num_negatives", ")", ":", "\n", "                ", "j", "=", "np", ".", "random", ".", "randint", "(", "dataset", ".", "num_items", ")", "\n", "while", "j", "in", "items_set", ":", "\n", "                    ", "j", "=", "np", ".", "random", ".", "randint", "(", "dataset", ".", "num_items", ")", "\n", "", "user_input_id", ".", "append", "(", "u", ")", "\n", "user_input", ".", "append", "(", "items_by_user", ")", "\n", "item_input_recents", ".", "append", "(", "item_input_recent", ")", "\n", "item_input", ".", "append", "(", "j", ")", "\n", "num_idx", ".", "append", "(", "size", ")", "\n", "labels", ".", "append", "(", "0", ")", "\n", "", "items_by_user", ".", "remove", "(", "i", ")", "\n", "user_input", ".", "append", "(", "items_by_user", ")", "\n", "user_input_id", ".", "append", "(", "u", ")", "\n", "item_input_recents", ".", "append", "(", "item_input_recent", ")", "\n", "item_input", ".", "append", "(", "i", ")", "\n", "num_idx", ".", "append", "(", "size", "-", "1", ")", "\n", "labels", ".", "append", "(", "1", ")", "\n", "", "", "return", "user_input_id", ",", "user_input", ",", "num_idx", ",", "item_input", ",", "item_input_recents", ",", "labels", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.util.learner.optimizer": [[4, 20], ["learner.lower", "tensorflow.train.AdagradOptimizer().minimize", "learner.lower", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.AdagradOptimizer", "learner.lower", "tensorflow.train.AdamOptimizer().minimize", "tensorflow.train.RMSPropOptimizer", "learner.lower", "tensorflow.train.GradientDescentOptimizer().minimize", "tensorflow.train.AdamOptimizer", "learner.lower", "tensorflow.train.MomentumOptimizer().minimize", "ValueError", "tensorflow.train.GradientDescentOptimizer", "tensorflow.train.MomentumOptimizer"], "function", ["None"], ["def", "optimizer", "(", "learner", ",", "loss", ",", "learning_rate", ",", "momentum", "=", "0.9", ")", ":", "\n", "    ", "optimizer", "=", "None", "\n", "if", "learner", ".", "lower", "(", ")", "==", "\"adagrad\"", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdagradOptimizer", "(", "learning_rate", "=", "learning_rate", ",", "initial_accumulator_value", "=", "1e-8", ")", ".", "minimize", "(", "loss", ")", "\n", "", "elif", "learner", ".", "lower", "(", ")", "==", "\"rmsprop\"", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "loss", ")", "\n", "", "elif", "learner", ".", "lower", "(", ")", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "loss", ")", "\n", "", "elif", "learner", ".", "lower", "(", ")", "==", "\"gd\"", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "GradientDescentOptimizer", "(", "learning_rate", ")", ".", "minimize", "(", "loss", ")", "\n", "", "elif", "learner", ".", "lower", "(", ")", "==", "\"momentum\"", ":", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "MomentumOptimizer", "(", "learning_rate", ",", "momentum", ")", ".", "minimize", "(", "loss", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"please select a suitable optimizer\"", ")", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.learner.pairwise_loss": [[21, 32], ["loss_function.lower", "tensorflow.reduce_sum", "loss_function.lower", "tensorflow.reduce_sum", "tensorflow.log_sigmoid", "tensorflow.maximum", "loss_function.lower", "tensorflow.reduce_sum", "Exception", "tensorflow.square"], "function", ["None"], ["", "def", "pairwise_loss", "(", "loss_function", ",", "y", ",", "margin", "=", "1", ")", ":", "\n", "    ", "loss", "=", "None", "\n", "if", "loss_function", ".", "lower", "(", ")", "==", "\"bpr\"", ":", "\n", "        ", "loss", "=", "-", "tf", ".", "reduce_sum", "(", "tf", ".", "log_sigmoid", "(", "y", ")", ")", "\n", "", "elif", "loss_function", ".", "lower", "(", ")", "==", "\"hinge\"", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "maximum", "(", "y", "+", "margin", ",", "0", ")", ")", "\n", "", "elif", "loss_function", ".", "lower", "(", ")", "==", "\"square\"", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "1", "-", "y", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"please choose a suitable loss function\"", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.learner.pointwise_loss": [[33, 44], ["loss_function.lower", "tensorflow.losses.sigmoid_cross_entropy", "loss_function.lower", "tensorflow.reduce_sum", "Exception", "tensorflow.square"], "function", ["None"], ["", "def", "pointwise_loss", "(", "loss_function", ",", "y_rea", ",", "y_pre", ")", ":", "\n", "    ", "loss", "=", "None", "\n", "if", "loss_function", ".", "lower", "(", ")", "==", "\"cross_entropy\"", ":", "\n", "        ", "loss", "=", "tf", ".", "losses", ".", "sigmoid_cross_entropy", "(", "y_rea", ",", "y_pre", ")", "\n", "#         loss = - tf.reduce_sum(", "\n", "#             y_rea * tf.log(y_pre) + (1 - y_rea) * tf.log(1 - y_pre)) ", "\n", "", "elif", "loss_function", ".", "lower", "(", ")", "==", "\"square\"", ":", "\n", "        ", "loss", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "y_rea", "-", "y_pre", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"please choose a suitable loss function\"", ")", "\n", "", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.Sampler.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.Sampler.__iter__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.Sampler.__len__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.SequentialSampler.__init__": [[29, 37], ["data_iterator.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "\"\"\"Initializes a new `SequentialSampler` instance.\n\n        Args:\n            data_source (_Dataset): Dataset to sample from.\n        \"\"\"", "\n", "super", "(", "SequentialSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.SequentialSampler.__iter__": [[38, 40], ["iter", "range", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "range", "(", "len", "(", "self", ".", "data_source", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.SequentialSampler.__len__": [[41, 43], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.RandomSampler.__init__": [[49, 57], ["data_iterator.Sampler.__init__"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["def", "__init__", "(", "self", ",", "data_source", ")", ":", "\n", "        ", "\"\"\"Initializes a new `SequentialSampler` instance.\n\n        Args:\n            data_source (_Dataset): Dataset to sample from.\n        \"\"\"", "\n", "super", "(", "RandomSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data_source", "=", "data_source", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.RandomSampler.__iter__": [[58, 61], ["numpy.random.permutation().tolist", "iter", "numpy.random.permutation", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data_source", ")", ")", ".", "tolist", "(", ")", "\n", "return", "iter", "(", "perm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.RandomSampler.__len__": [[62, 64], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data_source", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.BatchSampler.__init__": [[70, 94], ["data_iterator.Sampler.__init__", "isinstance", "ValueError", "isinstance", "ValueError", "isinstance", "ValueError", "isinstance"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["def", "__init__", "(", "self", ",", "sampler", ",", "batch_size", ",", "drop_last", ")", ":", "\n", "        ", "\"\"\"Initializes a new `BatchSampler` instance.\n\n        Args:\n            sampler (Sampler): Base sampler.\n            batch_size (int): Size of mini-batch.\n            drop_last (bool): If `True`, the sampler will drop the last batch\n                if its size would be less than `batch_size`.\n        \"\"\"", "\n", "super", "(", "BatchSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", "\n", ".", "format", "(", "sampler", ")", ")", "\n", "", "if", "not", "isinstance", "(", "batch_size", ",", "int", ")", "or", "isinstance", "(", "batch_size", ",", "bool", ")", "or", "batch_size", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"batch_size should be a positive integeral value, \"", "\n", "\"but got batch_size={}\"", ".", "format", "(", "batch_size", ")", ")", "\n", "", "if", "not", "isinstance", "(", "drop_last", ",", "bool", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"drop_last should be a boolean value, but got \"", "\n", "\"drop_last={}\"", ".", "format", "(", "drop_last", ")", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.BatchSampler.__iter__": [[95, 104], ["batch.append", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "batch", "=", "[", "]", "\n", "for", "idx", "in", "self", ".", "sampler", ":", "\n", "            ", "batch", ".", "append", "(", "idx", ")", "\n", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                ", "yield", "batch", "\n", "batch", "=", "[", "]", "\n", "", "", "if", "len", "(", "batch", ")", ">", "0", "and", "not", "self", ".", "drop_last", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.BatchSampler.__len__": [[105, 110], ["len", "len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "len", "(", "self", ".", "sampler", ")", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "len", "(", "self", ".", "sampler", ")", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._Dataset.__init__": [[119, 125], ["len", "len", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "data", ")", ":", "\n", "        ", "for", "d", "in", "data", ":", "\n", "            ", "if", "len", "(", "d", ")", "!=", "len", "(", "data", "[", "0", "]", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"The length of the given data are not equal!\"", ")", "\n", "# assert len(d) == len(data[0])", "\n", "", "", "self", ".", "data", "=", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._Dataset.__len__": [[126, 128], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._Dataset.__getitem__": [[129, 131], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "[", "data", "[", "idx", "]", "for", "data", "in", "self", ".", "data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._DataLoaderIter.__init__": [[137, 141], ["iter"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "loader", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "loader", ".", "dataset", "\n", "self", ".", "batch_sampler", "=", "loader", ".", "batch_sampler", "\n", "self", ".", "sample_iter", "=", "iter", "(", "self", ".", "batch_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._DataLoaderIter.__len__": [[142, 144], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._DataLoaderIter.__next__": [[145, 153], ["next", "list", "len", "zip"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "next", "(", "self", ".", "sample_iter", ")", "# may raise StopIteration", "\n", "batch", "=", "[", "self", ".", "dataset", "[", "i", "]", "for", "i", "in", "indices", "]", "\n", "\n", "transposed", "=", "[", "list", "(", "samples", ")", "for", "samples", "in", "zip", "(", "*", "batch", ")", "]", "\n", "if", "len", "(", "transposed", ")", "==", "1", ":", "\n", "            ", "transposed", "=", "transposed", "[", "0", "]", "\n", "", "return", "transposed", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator._DataLoaderIter.__iter__": [[154, 156], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.DataIterator.__init__": [[178, 205], ["data_iterator._Dataset", "data_iterator.BatchSampler", "list", "data_iterator.RandomSampler", "data_iterator.SequentialSampler"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "*", "data", ",", "batch_size", "=", "1", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            *data: Variable length data list.\n            batch_size (int): How many samples per batch to load. Defaults to `1`.\n            shuffle (bool): Set to `True` to have the data reshuffled at every\n                epoch. Defaults to `False`.\n            drop_last (bool): Set to `True` to drop the last incomplete batch,\n                if the dataset size is not divisible by the batch size.\n                If `False` and the size of dataset is not divisible by the\n                batch size, then the last batch will be smaller.\n                Defaults to `False`.\n\n        Raises:\n            ValueError: If the length of the given data are not equal.\n        \"\"\"", "\n", "dataset", "=", "_Dataset", "(", "list", "(", "data", ")", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "\n", "if", "shuffle", ":", "\n", "            ", "sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "            ", "sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "\n", "", "self", ".", "batch_sampler", "=", "BatchSampler", "(", "sampler", ",", "batch_size", ",", "drop_last", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.DataIterator.__iter__": [[206, 208], ["data_iterator._DataLoaderIter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "_DataLoaderIter", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.util.data_iterator.DataIterator.__len__": [[209, 211], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "batch_sampler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.abstract_evaluator.AbstractEvaluator.__init__": [[10, 12], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.abstract_evaluator.AbstractEvaluator.metrics_info": [[13, 21], ["None"], "methods", ["None"], ["", "def", "metrics_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get all metrics information.\n\n        Returns:\n            str: A string consist of all metrics information\uff0c such as\n            `\"Precision@10    Precision@20    NDCG@10    NDCG@20\"`.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.abstract_evaluator.AbstractEvaluator.evaluate": [[22, 36], ["None"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Evaluate `model`.\n\n        Args:\n            model: The model need to be evaluated. This model must have\n                a method `predict_for_eval(self, users)`, where the argument\n                `users` is a list of users and the return is a 2-D array that\n                contains `users` rating/ranking scores on all items.\n\n        Returns:\n            str: A string consist of all results, such as\n            `\"0.18663847    0.11239596    0.35824192    0.21479650\"`.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.grouped_evaluator.GroupedEvaluator.__init__": [[23, 81], ["util.typeassert", "abstract_evaluator.AbstractEvaluator.__init__", "backend.UniEvaluator", "list", "numpy.searchsorted", "pandas.DataFrame", "pandas.DataFrame.groupby", "collections.OrderedDict", "isinstance", "TypeError", "grouped_evaluator.GroupedEvaluator.user_pos_test.keys", "len", "list", "ValueError", "zip", "zip", "len", "users[].tolist"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["@", "typeassert", "(", "user_train_dict", "=", "dict", ",", "user_test_dict", "=", "dict", ",", "group_view", "=", "list", ")", "\n", "def", "__init__", "(", "self", ",", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", "=", "None", ",", "\n", "metric", "=", "None", ",", "group_view", "=", "None", ",", "top_k", "=", "50", ",", "batch_size", "=", "1024", ",", "num_thread", "=", "8", ")", ":", "\n", "        ", "\"\"\"Initializes a new `GroupedEvaluator` instance.\n\n        Args:\n            user_train_dict (dict): Each key is user ID and the corresponding\n                value is the list of **training items**.\n            user_test_dict (dict): Each key is user ID and the corresponding\n                value is the list of **test items**.\n            metric (None or list of str): If `metric == None`, metric will\n                be set to `[\"Precision\", \"Recall\", \"MAP\", \"NDCG\", \"MRR\"]`.\n                Otherwise, `metric` must be one or a sublist of metrics\n                mentioned above. Defaults to `None`.\n            group_view (list of int): A list of integers.\n            top_k (int or list of int): `top_k` controls the Top-K item ranking\n                performance. If `top_k` is an integer, K ranges from `1` to\n                `top_k`; If `top_k` is a list of integers, K are only assigned\n                these values. Defaults to `50`.\n            batch_size (int): An integer to control the test batch size.\n                Defaults to `1024`.\n            num_thread (int): An integer to control the test thread number.\n                Defaults to `8`.\n\n        Raises:\n             TypeError: If `group_view` is not a list.\n             ValueError: If user splitting with `group_view` is not suitable.\n        \"\"\"", "\n", "super", "(", "GroupedEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "group_view", ",", "list", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"The type of 'group_view' must be `list`!\"", ")", "\n", "\n", "", "self", ".", "evaluator", "=", "UniEvaluator", "(", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", ",", "\n", "metric", "=", "metric", ",", "top_k", "=", "top_k", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_thread", "=", "num_thread", ")", "\n", "self", ".", "user_pos_train", "=", "user_train_dict", "\n", "self", ".", "user_pos_test", "=", "user_test_dict", "\n", "\n", "group_list", "=", "[", "0", "]", "+", "group_view", "\n", "group_info", "=", "[", "(", "\"(%d,%d]:\"", "%", "(", "g_l", ",", "g_h", ")", ")", ".", "ljust", "(", "12", ")", "\n", "for", "g_l", ",", "g_h", "in", "zip", "(", "group_list", "[", ":", "-", "1", "]", ",", "group_list", "[", "1", ":", "]", ")", "]", "\n", "\n", "all_test_user", "=", "list", "(", "self", ".", "user_pos_test", ".", "keys", "(", ")", ")", "\n", "num_interaction", "=", "[", "len", "(", "self", ".", "user_pos_train", "[", "u", "]", ")", "for", "u", "in", "all_test_user", "]", "\n", "group_idx", "=", "np", ".", "searchsorted", "(", "group_list", "[", "1", ":", "]", ",", "num_interaction", ")", "\n", "user_group", "=", "pd", ".", "DataFrame", "(", "list", "(", "zip", "(", "all_test_user", ",", "group_idx", ")", ")", ",", "\n", "columns", "=", "[", "\"user\"", ",", "\"group\"", "]", ")", "\n", "grouped", "=", "user_group", ".", "groupby", "(", "by", "=", "[", "\"group\"", "]", ")", "\n", "\n", "self", ".", "grouped_user", "=", "OrderedDict", "(", ")", "\n", "for", "idx", ",", "users", "in", "grouped", ":", "\n", "            ", "if", "idx", "<", "len", "(", "group_info", ")", ":", "\n", "                ", "self", ".", "grouped_user", "[", "group_info", "[", "idx", "]", "]", "=", "users", "[", "\"user\"", "]", ".", "tolist", "(", ")", "\n", "\n", "", "", "if", "not", "self", ".", "grouped_user", ":", "\n", "            ", "raise", "ValueError", "(", "\"The splitting of user groups is not suitable!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.grouped_evaluator.GroupedEvaluator.metrics_info": [[82, 90], ["grouped_evaluator.GroupedEvaluator.evaluator.metrics_info"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.metrics_info"], ["", "", "def", "metrics_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get all metrics information.\n\n        Returns:\n            str: A string consist of all metrics information\uff0c such as\n            `\"Precision@10    Precision@20    NDCG@10    NDCG@20\"`.\n        \"\"\"", "\n", "return", "self", ".", "evaluator", ".", "metrics_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.grouped_evaluator.GroupedEvaluator.evaluate": [[91, 113], ["grouped_evaluator.GroupedEvaluator.grouped_user.items", "grouped_evaluator.GroupedEvaluator.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate"], ["", "def", "evaluate", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Evaluate `model` in user groups.\n\n        Args:\n            model: The model need to be evaluated. This model must have\n                a method `predict_for_eval(self, users)`, where the argument\n                `users` is a list of users and the return is a 2-D array that\n                contains `users` rating/ranking scores on all items.\n\n        Returns:\n            str: A multi-line string consist of all results of groups, such as:\n                `\"(0,10]:   0.00648002   0.00421617   0.00301847   0.00261693\\n\n                (10,30]:  0.00686600   0.00442968   0.00310077   0.00249169\\n\n                (30,50]:  0.00653595   0.00326797   0.00217865   0.00163399\\n\n                (50,100]: 0.00423729   0.00211864   0.00141243   0.00105932\"`\n        \"\"\"", "\n", "result_to_show", "=", "\"\"", "\n", "for", "group", ",", "users", "in", "self", ".", "grouped_user", ".", "items", "(", ")", ":", "\n", "            ", "tmp_result", "=", "self", ".", "evaluator", ".", "evaluate", "(", "model", ",", "users", ")", "\n", "result_to_show", "=", "\"%s\\n%s\\t%s\"", "%", "(", "result_to_show", ",", "group", ",", "tmp_result", ")", "\n", "\n", "", "return", "result_to_show", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.proxy_evaluator.ProxyEvaluator.__init__": [[40, 85], ["util.typeassert", "abstract_evaluator.AbstractEvaluator.__init__", "grouped_evaluator.GroupedEvaluator", "backend.UniEvaluator"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["@", "typeassert", "(", "user_train_dict", "=", "dict", ",", "user_test_dict", "=", "dict", ")", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", "=", "None", ",", "metric", "=", "None", ",", "\n", "group_view", "=", "None", ",", "top_k", "=", "50", ",", "batch_size", "=", "1024", ",", "num_thread", "=", "8", ")", ":", "\n", "        ", "\"\"\"Initializes a new `ProxyEvaluator` instance.\n\n        Args:\n            user_train_dict (dict): Each key is user ID and the corresponding\n                value is the list of **training items**.\n            user_test_dict (dict): Each key is user ID and the corresponding\n                value is the list of **test items**.\n            metric (None or list of str): If `metric == None`, metric will\n                be set to `[\"Precision\", \"Recall\", \"MAP\", \"NDCG\", \"MRR\"]`.\n                Otherwise, `metric` must be one or a sublist of metrics\n                mentioned above. Defaults to `None`.\n            group_view (None or list of int): If `group_view == None`, the ranking\n                performance will be viewed without groups. If `group_view` is a\n                list of integers, ranking performance will be viewed in groups.\n                Defaults to `None`.\n            top_k (int or list of int): `top_k` controls the Top-K item ranking\n                performance. If `top_k` is an integer, K ranges from `1` to\n                `top_k`; If `top_k` is a list of integers, K are only assigned\n                these values. Defaults to `50`.\n            batch_size (int): An integer to control the test batch size.\n                Defaults to `1024`.\n            num_thread (int): An integer to control the test thread number.\n                Defaults to `8`.\n\n        Raises:\n            ValueError: If `metric` or one of its element is not in\n                `[\"Precision\", \"Recall\", \"MAP\", \"NDCG\", \"MRR\"]`.\n\n        TODO:\n            * Check the validation of `num_thread` in cpp implementation.\n        \"\"\"", "\n", "super", "(", "ProxyEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "group_view", "is", "not", "None", ":", "\n", "            ", "self", ".", "evaluator", "=", "GroupedEvaluator", "(", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", ",", "\n", "metric", "=", "metric", ",", "group_view", "=", "group_view", ",", "\n", "top_k", "=", "top_k", ",", "batch_size", "=", "batch_size", ",", "\n", "num_thread", "=", "num_thread", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "evaluator", "=", "UniEvaluator", "(", "dataset", ",", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", ",", "\n", "metric", "=", "metric", ",", "top_k", "=", "top_k", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "num_thread", "=", "num_thread", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.proxy_evaluator.ProxyEvaluator.metrics_info": [[86, 94], ["proxy_evaluator.ProxyEvaluator.evaluator.metrics_info"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.metrics_info"], ["", "", "def", "metrics_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get all metrics information.\n\n        Returns:\n            str: A string consist of all metrics information\uff0c such as\n                `\"Precision@10    Precision@20    NDCG@10    NDCG@20\"`.\n        \"\"\"", "\n", "return", "self", ".", "evaluator", ".", "metrics_info", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.evaluator.proxy_evaluator.ProxyEvaluator.evaluate": [[95, 109], ["proxy_evaluator.ProxyEvaluator.evaluator.evaluate"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate"], ["", "def", "evaluate", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"Evaluate `model`.\n\n        Args:\n            model: The model need to be evaluated. This model must have\n                a method `predict_for_eval(self, users)`, where the argument\n                `users` is a list of users and the return is a 2-D array that\n                contains `users` rating/ranking scores on all items.\n\n        Returns:\n            str: A string consist of all results, such as\n                `\"0.18663847    0.11239596    0.35824192    0.21479650\"`.\n        \"\"\"", "\n", "return", "self", ".", "evaluator", ".", "evaluate", "(", "model", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.cpp.uni_evaluator.UniEvaluator.__init__": [[37, 92], ["util.typeassert", "cpp_evaluator.CPPEvaluator.__init__", "len", "isinstance", "isinstance", "isinstance", "max", "numpy.sort", "isinstance", "ValueError", "numpy.arange", "TypeError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["@", "typeassert", "(", "user_train_dict", "=", "dict", ",", "user_test_dict", "=", "(", "dict", ",", "None", ".", "__class__", ")", ")", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", "=", "None", ",", "\n", "metric", "=", "None", ",", "top_k", "=", "50", ",", "batch_size", "=", "1024", ",", "num_thread", "=", "8", ")", ":", "\n", "        ", "\"\"\"Initializes a new `UniEvaluator` instance.\n\n        Args:\n            user_train_dict (dict): Each key is user ID and the corresponding\n                value is the list of **training items**.\n            user_test_dict (dict): Each key is user ID and the corresponding\n                value is the list of **test items**.\n            metric (None or list of str): If `metric == None`, metric will\n                be set to `[\"Precision\", \"Recall\", \"MAP\", \"NDCG\", \"MRR\"]`.\n                Otherwise, `metric` must be one or a sublist of metrics\n                mentioned above. Defaults to `None`.\n            top_k (int or list of int): `top_k` controls the Top-K item ranking\n                performance. If `top_k` is an integer, K ranges from `1` to\n                `top_k`; If `top_k` is a list of integers, K are only assigned\n                these values. Defaults to `50`.\n            batch_size (int): An integer to control the test batch size.\n                Defaults to `1024`.\n            num_thread (int): An integer to control the test thread number.\n                Defaults to `8`.\n\n        Raises:\n             ValueError: If `metric` or one of its element is invalid.\n        \"\"\"", "\n", "# super(UniEvaluator, self).__init__(user_test_dict)", "\n", "super", "(", "UniEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "metric", "is", "None", ":", "\n", "            ", "metric", "=", "[", "\"Precision\"", ",", "\"Recall\"", ",", "\"MAP\"", ",", "\"NDCG\"", ",", "\"MRR\"", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "metric", "=", "[", "metric", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "(", "set", ",", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"The type of 'metric' (%s) is invalid!\"", "%", "metric", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "for", "m", "in", "metric", ":", "\n", "            ", "if", "m", "not", "in", "metric_dict", ":", "\n", "                ", "raise", "ValueError", "(", "\"There is not the metric named '%s'!\"", "%", "metric", ")", "\n", "\n", "", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "user_pos_train", "=", "user_train_dict", "\n", "self", ".", "user_pos_test", "=", "user_test_dict", "\n", "self", ".", "user_neg_test", "=", "user_neg_test", "\n", "self", ".", "metrics_num", "=", "len", "(", "metric", ")", "\n", "self", ".", "metrics", "=", "[", "metric_dict", "[", "m", "]", "for", "m", "in", "metric", "]", "\n", "self", ".", "num_thread", "=", "num_thread", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "max_top", "=", "top_k", "if", "isinstance", "(", "top_k", ",", "int", ")", "else", "max", "(", "top_k", ")", "\n", "if", "isinstance", "(", "top_k", ",", "int", ")", ":", "\n", "            ", "self", ".", "top_show", "=", "np", ".", "arange", "(", "top_k", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "top_show", "=", "np", ".", "sort", "(", "top_k", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.cpp.uni_evaluator.UniEvaluator.metrics_info": [[93, 104], ["str"], "methods", ["None"], ["", "", "def", "metrics_info", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get all metrics information.\n\n        Returns:\n            str: A string consist of all metrics information\uff0c such as\n                `\"Precision@10    Precision@20    NDCG@10    NDCG@20\"`.\n        \"\"\"", "\n", "metrics_show", "=", "[", "'\\t'", ".", "join", "(", "[", "(", "\"%s@\"", "%", "re_metric_dict", "[", "metric", "]", "+", "str", "(", "k", ")", ")", ".", "ljust", "(", "12", ")", "for", "k", "in", "self", ".", "top_show", "]", ")", "\n", "for", "metric", "in", "self", ".", "metrics", "]", "\n", "metric", "=", "'\\t'", ".", "join", "(", "metrics_show", ")", "\n", "return", "\"metrics:\\t%s\"", "%", "metric", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.cpp.uni_evaluator.UniEvaluator.evaluate": [[105, 206], ["util.DataIterator", "numpy.concatenate", "numpy.mean", "numpy.reshape", "numpy.reshape", "list", "isinstance", "TypeError", "uni_evaluator.UniEvaluator.eval_score_matrix", "batch_result.append", "numpy.concatenate", "numpy.save", "numpy.concatenate", "numpy.save", "numpy.concatenate", "numpy.mean", "print", "uni_evaluator.UniEvaluator.user_pos_test.keys", "model.predict", "util.pad_sequences", "model.predict", "enumerate", "numpy.array", "numpy.power", "numpy.diag", "numpy.zeros", "util.cython.arg_topk.arg_topk", "numpy.concatenate", "batch_rec_top20.append", "range", "numpy.concatenate", "numpy.reshape", "numpy.concatenate", "batch_rating_top20.append", "range", "numpy.matmul", "batch_group.append", "set", "util.cython.tools.is_ndarray", "numpy.array", "util.cython.tools.is_ndarray", "numpy.array", "len", "numpy.concatenate.append", "len", "list", "range", "len", "numpy.isinf", "len", "numpy.array().transpose", "len", "numpy.array().transpose", "len", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.eval_score_matrix", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.predict", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.pad_sequences", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.predict"], ["", "def", "evaluate", "(", "self", ",", "model", ",", "test_users", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate `model`.\n\n        Args:\n            model: The model need to be evaluated. This model must have\n                a method `predict_for_eval(self, users)`, where the argument\n                `users` is a list of users and the return is a 2-D array that\n                contains `users` rating/ranking scores on all items.\n\n        Returns:\n            str: A single-line string consist of all results, such as\n                `\"0.18663847    0.11239596    0.35824192    0.21479650\"`.\n        \"\"\"", "\n", "# B: batch size", "\n", "# N: the number of items", "\n", "test_users", "=", "test_users", "if", "test_users", "is", "not", "None", "else", "list", "(", "self", ".", "user_pos_test", ".", "keys", "(", ")", ")", "\n", "if", "not", "isinstance", "(", "test_users", ",", "(", "list", ",", "tuple", ",", "set", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"'test_user' must be a list, tuple, set or numpy array!\"", ")", "\n", "\n", "", "test_users", "=", "DataIterator", "(", "test_users", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "batch_result", "=", "[", "]", "\n", "\n", "if", "model", ".", "pretrain", ":", "\n", "            ", "batch_group", "=", "[", "]", "\n", "batch_rec_top20", ",", "batch_rating_top20", "=", "[", "]", ",", "[", "]", "\n", "", "for", "batch_users", "in", "test_users", ":", "\n", "            ", "if", "self", ".", "user_neg_test", "is", "not", "None", ":", "\n", "                ", "candidate_items", "=", "[", "list", "(", "self", ".", "user_pos_test", "[", "u", "]", ")", "+", "self", ".", "user_neg_test", "[", "u", "]", "for", "u", "in", "batch_users", "]", "\n", "test_items", "=", "[", "set", "(", "range", "(", "len", "(", "self", ".", "user_pos_test", "[", "u", "]", ")", ")", ")", "for", "u", "in", "batch_users", "]", "\n", "\n", "ranking_score", "=", "model", ".", "predict", "(", "batch_users", ",", "candidate_items", ")", "# (B,N)", "\n", "ranking_score", "=", "pad_sequences", "(", "ranking_score", ",", "value", "=", "-", "np", ".", "inf", ",", "dtype", "=", "float_type", ")", "\n", "\n", "if", "not", "is_ndarray", "(", "ranking_score", ",", "float_type", ")", ":", "\n", "                    ", "ranking_score", "=", "np", ".", "array", "(", "ranking_score", ",", "dtype", "=", "float_type", ")", "\n", "", "", "else", ":", "\n", "                ", "test_items", "=", "[", "self", ".", "user_pos_test", "[", "u", "]", "for", "u", "in", "batch_users", "]", "\n", "ranking_score", "=", "model", ".", "predict", "(", "batch_users", ",", "None", ")", "# (B,N)", "\n", "if", "not", "is_ndarray", "(", "ranking_score", ",", "float_type", ")", ":", "\n", "                    ", "ranking_score", "=", "np", ".", "array", "(", "ranking_score", ",", "dtype", "=", "float_type", ")", "\n", "\n", "# set the ranking scores of training items to -inf,", "\n", "# then the training items will be sorted at the end of the ranking list.", "\n", "", "for", "idx", ",", "user", "in", "enumerate", "(", "batch_users", ")", ":", "\n", "                    ", "train_items", "=", "self", ".", "user_pos_train", "[", "user", "]", "\n", "train_items", "=", "[", "x", "for", "x", "in", "train_items", "if", "not", "x", "in", "self", ".", "user_pos_test", "[", "user", "]", "]", "\n", "ranking_score", "[", "idx", "]", "[", "train_items", "]", "=", "-", "np", ".", "inf", "\n", "", "", "if", "model", ".", "pretrain", ":", "\n", "###### For grouping", "\n", "# 1/|l_test|", "\n", "                ", "num_test_per_user", "=", "np", ".", "array", "(", "[", "len", "(", "test_items_per_user", ")", "for", "test_items_per_user", "in", "test_items", "]", ")", "\n", "num_test_per_user_inv", "=", "np", ".", "power", "(", "num_test_per_user", ",", "-", "1.0", ")", "\n", "num_test_per_user_inv", "[", "np", ".", "isinf", "(", "num_test_per_user_inv", ")", "]", "=", "0.", "\n", "diag_num_test_per_user_inv", "=", "np", ".", "diag", "(", "num_test_per_user_inv", ")", "\n", "# |l_rec \\intersection l_test|", "\n", "batch_count_per_group", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_items", ")", ",", "10", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "batch_top_items_rec_", "=", "arg_topk", "(", "ranking_score", ",", "20", ")", "\n", "batch_top_items_rec", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "batch_users", ",", "ndmin", "=", "2", ")", ".", "transpose", "(", ")", ",", "batch_top_items_rec_", "]", ",", "axis", "=", "1", ")", "\n", "batch_rec_top20", ".", "append", "(", "batch_top_items_rec", ")", "\n", "batch_top_ratings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_users", ")", ")", ":", "\n", "                    ", "batch_top_ratings", ".", "append", "(", "ranking_score", "[", "i", ",", "batch_top_items_rec_", "[", "i", "]", "]", ")", "\n", "", "batch_top_ratings", "=", "np", ".", "concatenate", "(", "batch_top_ratings", ",", "axis", "=", "0", ")", "\n", "batch_top_ratings", "=", "np", ".", "reshape", "(", "batch_top_ratings", ",", "[", "len", "(", "batch_users", ")", ",", "-", "1", "]", ")", "\n", "batch_top_ratings", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "batch_users", ",", "ndmin", "=", "2", ")", ".", "transpose", "(", ")", ",", "batch_top_ratings", "]", ",", "axis", "=", "1", ")", "\n", "batch_rating_top20", ".", "append", "(", "batch_top_ratings", ")", "\n", "\n", "for", "u", "in", "range", "(", "len", "(", "test_items", ")", ")", ":", "\n", "                    ", "for", "i", "in", "batch_top_items_rec", "[", "u", "]", ":", "\n", "                        ", "if", "i", "in", "test_items", "[", "u", "]", ":", "\n", "                            ", "batch_count_per_group", "[", "u", ",", "self", ".", "dataset", ".", "item_group_idx", "[", "i", "]", "]", "+=", "1", "\n", "# batch_group_result = self.dataset.item_group_idx[batch_top_items_rec]", "\n", "# batch_count_per_group = np.apply_along_axis(lambda x: np.bincount(x, minlength=10), axis=1, arr=batch_group_result)", "\n", "\n", "# |l_rec \\intersection l_test| / |l_test|", "\n", "", "", "", "batch_count_per_group", "=", "np", ".", "matmul", "(", "diag_num_test_per_user_inv", ",", "batch_count_per_group", ")", "\n", "batch_group", ".", "append", "(", "batch_count_per_group", ")", "\n", "\n", "", "result", "=", "self", ".", "eval_score_matrix", "(", "ranking_score", ",", "test_items", ",", "self", ".", "metrics", ",", "\n", "top_k", "=", "self", ".", "max_top", ",", "thread_num", "=", "self", ".", "num_thread", ")", "# (B,k*metric_num)", "\n", "batch_result", ".", "append", "(", "result", ")", "\n", "\n", "", "if", "model", ".", "pretrain", ":", "\n", "            ", "all_rec_top20", "=", "np", ".", "concatenate", "(", "batch_rec_top20", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "'top_rec.npy'", ",", "all_rec_top20", ")", "\n", "all_rating_top20", "=", "np", ".", "concatenate", "(", "batch_rating_top20", ",", "axis", "=", "0", ")", "\n", "np", ".", "save", "(", "'top_rating.npy'", ",", "all_rating_top20", ")", "\n", "all_group", "=", "np", ".", "concatenate", "(", "batch_group", ",", "axis", "=", "0", ")", "\n", "final_group", "=", "np", ".", "mean", "(", "all_group", ",", "axis", "=", "0", ")", "\n", "group_buf", "=", "'\\t'", ".", "join", "(", "[", "(", "\"%.5f\"", "%", "x", ")", ".", "ljust", "(", "12", ")", "for", "x", "in", "final_group", "]", ")", "\n", "print", "(", "group_buf", ")", "\n", "\n", "# concatenate the batch results to a matrix", "\n", "", "all_user_result", "=", "np", ".", "concatenate", "(", "batch_result", ",", "axis", "=", "0", ")", "# (num_users, metrics_num*max_top)", "\n", "final_result", "=", "np", ".", "mean", "(", "all_user_result", ",", "axis", "=", "0", ")", "# (1, metrics_num*max_top)", "\n", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "self", ".", "metrics_num", ",", "self", ".", "max_top", "]", ")", "# (metrics_num, max_top)", "\n", "final_result", "=", "final_result", "[", ":", ",", "self", ".", "top_show", "-", "1", "]", "\n", "final_result", "=", "np", ".", "reshape", "(", "final_result", ",", "newshape", "=", "[", "-", "1", "]", ")", "\n", "buf", "=", "'\\t'", ".", "join", "(", "[", "(", "\"%.8f\"", "%", "x", ")", ".", "ljust", "(", "12", ")", "for", "x", "in", "final_result", "]", ")", "\n", "return", "final_result", ",", "buf", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.__init__": [[31, 84], ["util.typeassert", "evaluator.abstract_evaluator.AbstractEvaluator.__init__", "len", "isinstance", "isinstance", "set", "isinstance", "max", "numpy.sort", "isinstance", "ValueError", "user_test_dict.items", "numpy.arange", "TypeError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__"], ["\n", "\n", "@", "typeassert", "(", "user_train_dict", "=", "dict", ",", "user_test_dict", "=", "(", "dict", ",", "None", ".", "__class__", ")", ")", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "user_train_dict", ",", "user_test_dict", ",", "user_neg_test", "=", "None", ",", "\n", "metric", "=", "None", ",", "top_k", "=", "50", ",", "batch_size", "=", "1024", ",", "num_thread", "=", "8", ")", ":", "\n", "        ", "\"\"\"Initializes a new `UniEvaluator` instance.\n\n        Args:\n            user_train_dict (dict): Each key is user ID and the corresponding\n                value is the list of **training items**.\n            user_test_dict (dict): Each key is user ID and the corresponding\n                value is the list of **test items**.\n            metric (None or list of str): If `metric == None`, metric will\n                be set to `[\"Precision\", \"Recall\", \"MAP\", \"NDCG\", \"MRR\"]`.\n                Otherwise, `metric` must be one or a sublist of metrics\n                mentioned above. Defaults to `None`.\n            top_k (int or list of int): `top_k` controls the Top-K item ranking\n                performance. If `top_k` is an integer, K ranges from `1` to\n                `top_k`; If `top_k` is a list of integers, K are only assigned\n                these values. Defaults to `50`.\n            batch_size (int): An integer to control the test batch size.\n                Defaults to `1024`.\n            num_thread (int): An integer to control the test thread number.\n                Defaults to `8`.\n\n        Raises:\n             ValueError: If `metric` or one of its element is invalid.\n        \"\"\"", "\n", "# super(UniEvaluator, self).__init__(user_test_dict)", "\n", "super", "(", "UniEvaluator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "metric", "is", "None", ":", "\n", "            ", "metric", "=", "[", "\"Precision\"", ",", "\"Recall\"", ",", "\"MAP\"", ",", "\"NDCG\"", ",", "\"MRR\"", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "str", ")", ":", "\n", "            ", "metric", "=", "[", "metric", "]", "\n", "", "elif", "isinstance", "(", "metric", ",", "(", "set", ",", "tuple", ",", "list", ")", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "(", "\"The type of 'metric' (%s) is invalid!\"", "%", "metric", ".", "__class__", ".", "__name__", ")", "\n", "\n", "", "for", "m", "in", "metric", ":", "\n", "            ", "if", "m", "not", "in", "metric_dict", ":", "\n", "                ", "raise", "ValueError", "(", "\"There is not the metric named '%s'!\"", "%", "metric", ")", "\n", "\n", "", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "user_pos_train", "=", "user_train_dict", "\n", "self", ".", "user_pos_test", "=", "user_test_dict", "\n", "self", ".", "user_neg_test", "=", "user_neg_test", "\n", "self", ".", "metrics_num", "=", "len", "(", "metric", ")", "\n", "self", ".", "metrics", "=", "[", "metric_dict", "[", "m", "]", "for", "m", "in", "metric", "]", "\n", "self", ".", "num_thread", "=", "num_thread", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.metrics_info": [[85, 96], ["str"], "methods", ["None"], ["self", ".", "batch_size", "=", "batch_size", "\n", "\n", "self", ".", "max_top", "=", "top_k", "if", "isinstance", "(", "top_k", ",", "int", ")", "else", "max", "(", "top_k", ")", "\n", "if", "isinstance", "(", "top_k", ",", "int", ")", ":", "\n", "            ", "self", ".", "top_show", "=", "np", ".", "arange", "(", "top_k", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "top_show", "=", "np", ".", "sort", "(", "top_k", ")", "\n", "\n", "", "", "def", "metrics_info", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.evaluate": [[97, 152], ["util.DataIterator", "numpy.concatenate", "numpy.mean", "numpy.reshape", "numpy.reshape", "list", "isinstance", "TypeError", "uni_evaluator.UniEvaluator.eval_score_matrix", "batch_result.append", "uni_evaluator.UniEvaluator.user_pos_test.keys", "model.predict", "util.pad_sequences", "numpy.array", "model.predict", "numpy.array", "enumerate", "set", "list", "range", "len"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.eval_score_matrix", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.predict", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.pad_sequences", "home.repos.pwc.inspect_result.wujcan_SGL.general_recommender.SGL.SGL.predict"], ["\n", "metrics_show", "=", "[", "'\\t'", ".", "join", "(", "[", "(", "\"%s@\"", "%", "re_metric_dict", "[", "metric", "]", "+", "str", "(", "k", ")", ")", ".", "ljust", "(", "12", ")", "for", "k", "in", "self", ".", "top_show", "]", ")", "\n", "for", "metric", "in", "self", ".", "metrics", "]", "\n", "metric", "=", "'\\t'", ".", "join", "(", "metrics_show", ")", "\n", "return", "\"metrics:\\t%s\"", "%", "metric", "\n", "\n", "", "def", "evaluate", "(", "self", ",", "model", ",", "test_users", "=", "None", ")", ":", "\n", "        ", "\"\"\"Evaluate `model`.\n\n        Args:\n            model: The model need to be evaluated. This model must have\n                a method `predict_for_eval(self, users)`, where the argument\n                `users` is a list of users and the return is a 2-D array that\n                contains `users` rating/ranking scores on all items.\n\n        Returns:\n            str: A single-line string consist of all results, such as\n                `\"0.18663847    0.11239596    0.35824192    0.21479650\"`.\n        \"\"\"", "\n", "# B: batch size", "\n", "# N: the number of items", "\n", "test_users", "=", "test_users", "if", "test_users", "is", "not", "None", "else", "list", "(", "self", ".", "user_pos_test", ".", "keys", "(", ")", ")", "\n", "if", "not", "isinstance", "(", "test_users", ",", "(", "list", ",", "tuple", ",", "set", ",", "np", ".", "ndarray", ")", ")", ":", "\n", "            ", "raise", "TypeError", "(", "\"'test_user' must be a list, tuple, set or numpy array!\"", ")", "\n", "\n", "", "test_users", "=", "DataIterator", "(", "test_users", ",", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "batch_result", "=", "[", "]", "\n", "\n", "if", "model", ".", "pretrain", ":", "\n", "            ", "batch_group", "=", "[", "]", "\n", "batch_rec_top20", ",", "batch_rating_top20", "=", "[", "]", ",", "[", "]", "\n", "", "for", "batch_users", "in", "test_users", ":", "\n", "            ", "if", "self", ".", "user_neg_test", "is", "not", "None", ":", "\n", "                ", "candidate_items", "=", "[", "list", "(", "self", ".", "user_pos_test", "[", "u", "]", ")", "+", "self", ".", "user_neg_test", "[", "u", "]", "for", "u", "in", "batch_users", "]", "\n", "test_items", "=", "[", "set", "(", "range", "(", "len", "(", "self", ".", "user_pos_test", "[", "u", "]", ")", ")", ")", "for", "u", "in", "batch_users", "]", "\n", "\n", "ranking_score", "=", "model", ".", "predict", "(", "batch_users", ",", "candidate_items", ")", "# (B,N)", "\n", "ranking_score", "=", "pad_sequences", "(", "ranking_score", ",", "value", "=", "-", "np", ".", "inf", ",", "dtype", "=", "float_type", ")", "\n", "\n", "if", "not", "is_ndarray", "(", "ranking_score", ",", "float_type", ")", ":", "\n", "                    ", "ranking_score", "=", "np", ".", "array", "(", "ranking_score", ",", "dtype", "=", "float_type", ")", "\n", "", "", "else", ":", "\n", "                ", "test_items", "=", "[", "self", ".", "user_pos_test", "[", "u", "]", "for", "u", "in", "batch_users", "]", "\n", "ranking_score", "=", "model", ".", "predict", "(", "batch_users", ",", "None", ")", "# (B,N)", "\n", "if", "not", "is_ndarray", "(", "ranking_score", ",", "float_type", ")", ":", "\n", "                    ", "ranking_score", "=", "np", ".", "array", "(", "ranking_score", ",", "dtype", "=", "float_type", ")", "\n", "\n", "# set the ranking scores of training items to -inf,", "\n", "# then the training items will be sorted at the end of the ranking list.", "\n", "", "for", "idx", ",", "user", "in", "enumerate", "(", "batch_users", ")", ":", "\n", "                    ", "train_items", "=", "self", ".", "user_pos_train", "[", "user", "]", "\n", "train_items", "=", "[", "x", "for", "x", "in", "train_items", "if", "not", "x", "in", "self", ".", "user_pos_test", "[", "user", "]", "]", "\n", "ranking_score", "[", "idx", "]", "[", "train_items", "]", "=", "-", "np", ".", "inf", "\n", "", "", "if", "model", ".", "pretrain", ":", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.uni_evaluator.UniEvaluator.eval_score_matrix": [[153, 170], ["util.typeassert", "list", "numpy.array", "util.argmax_top_k", "numpy.array().flatten", "concurrent.futures.ThreadPoolExecutor", "executor.map", "range", "numpy.array", "len"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.typeassert", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.argmax_top_k", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map"], ["###### For grouping", "\n", "# 1/|l_test|", "\n", "                ", "num_test_per_user", "=", "np", ".", "array", "(", "[", "len", "(", "test_items_per_user", ")", "for", "test_items_per_user", "in", "test_items", "]", ")", "\n", "num_test_per_user_inv", "=", "np", ".", "power", "(", "num_test_per_user", ",", "-", "1.0", ")", "\n", "num_test_per_user_inv", "[", "np", ".", "isinf", "(", "num_test_per_user_inv", ")", "]", "=", "0.", "\n", "diag_num_test_per_user_inv", "=", "np", ".", "diag", "(", "num_test_per_user_inv", ")", "\n", "# |l_rec \\intersection l_test|", "\n", "batch_count_per_group", "=", "np", ".", "zeros", "(", "[", "len", "(", "test_items", ")", ",", "10", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "batch_top_items_rec_", "=", "arg_topk", "(", "ranking_score", ",", "20", ")", "\n", "batch_top_items_rec", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "batch_users", ",", "ndmin", "=", "2", ")", ".", "transpose", "(", ")", ",", "batch_top_items_rec_", "]", ",", "axis", "=", "1", ")", "\n", "batch_rec_top20", ".", "append", "(", "batch_top_items_rec", ")", "\n", "batch_top_ratings", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "batch_users", ")", ")", ":", "\n", "                    ", "batch_top_ratings", ".", "append", "(", "ranking_score", "[", "i", ",", "batch_top_items_rec_", "[", "i", "]", "]", ")", "\n", "", "batch_top_ratings", "=", "np", ".", "concatenate", "(", "batch_top_ratings", ",", "axis", "=", "0", ")", "\n", "batch_top_ratings", "=", "np", ".", "reshape", "(", "batch_top_ratings", ",", "[", "len", "(", "batch_users", ")", ",", "-", "1", "]", ")", "\n", "batch_top_ratings", "=", "np", ".", "concatenate", "(", "[", "np", ".", "array", "(", "batch_users", ",", "ndmin", "=", "2", ")", ".", "transpose", "(", ")", ",", "batch_top_ratings", "]", ",", "axis", "=", "1", ")", "\n", "batch_rating_top20", ".", "append", "(", "batch_top_ratings", ")", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.hit": [[8, 18], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["def", "hit", "(", "rank", ",", "ground_truth", ")", ":", "\n", "# HR is equal to Recall when dataset is loo split.", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "==", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.precision": [[20, 25], ["numpy.cumsum", "numpy.arange", "len"], "function", ["None"], ["", "def", "precision", "(", "rank", ",", "ground_truth", ")", ":", "\n", "# Precision is meaningless when dataset is loo split.", "\n", "    ", "hits", "=", "[", "1", "if", "item", "in", "ground_truth", "else", "0", "for", "item", "in", "rank", "]", "\n", "result", "=", "np", ".", "cumsum", "(", "hits", ",", "dtype", "=", "np", ".", "float32", ")", "/", "np", ".", "arange", "(", "1", ",", "len", "(", "rank", ")", "+", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.recall": [[27, 32], ["numpy.cumsum", "len"], "function", ["None"], ["", "def", "recall", "(", "rank", ",", "ground_truth", ")", ":", "\n", "# Recall is equal to HR when dataset is loo split.", "\n", "    ", "hits", "=", "[", "1", "if", "item", "in", "ground_truth", "else", "0", "for", "item", "in", "rank", "]", "\n", "result", "=", "np", ".", "cumsum", "(", "hits", ",", "dtype", "=", "np", ".", "float32", ")", "/", "len", "(", "ground_truth", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map": [[34, 45], ["metric.precision", "numpy.cumsum", "min", "enumerate", "len", "enumerate", "zip"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.python.metric.precision"], ["", "def", "map", "(", "rank", ",", "ground_truth", ")", ":", "\n", "# Reference: https://blog.csdn.net/u010138758/article/details/69936041", "\n", "# MAP is equal to MRR when dataset is loo split.", "\n", "# \u6309\u7167\u5b9a\u4e49, MAP\u597d\u50cf\u6ca1\u6709MAP@N\u8fd9\u4e00\u8bf4", "\n", "    ", "pre", "=", "precision", "(", "rank", ",", "ground_truth", ")", "\n", "pre", "=", "[", "pre", "[", "idx", "]", "if", "item", "in", "ground_truth", "else", "0", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", "]", "\n", "sum_pre", "=", "np", ".", "cumsum", "(", "pre", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "# relevant_num = np.cumsum([1 if item in ground_truth else 0 for item in rank])", "\n", "relevant_num", "=", "[", "min", "(", "idx", "+", "1", ",", "len", "(", "ground_truth", ")", ")", "for", "idx", ",", "_", "in", "enumerate", "(", "rank", ")", "]", "\n", "result", "=", "[", "p", "/", "r_num", "if", "r_num", "!=", "0", "else", "0", "for", "p", ",", "r_num", "in", "zip", "(", "sum_pre", ",", "relevant_num", ")", "]", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.ndcg": [[47, 56], ["len", "min", "numpy.cumsum", "numpy.cumsum", "len", "numpy.log2", "numpy.arange", "enumerate", "numpy.log2"], "function", ["None"], ["", "def", "ndcg", "(", "rank", ",", "ground_truth", ")", ":", "\n", "    ", "len_rank", "=", "len", "(", "rank", ")", "\n", "idcg_len", "=", "min", "(", "len", "(", "ground_truth", ")", ",", "len_rank", ")", "\n", "idcg", "=", "np", ".", "cumsum", "(", "1.0", "/", "np", ".", "log2", "(", "np", ".", "arange", "(", "2", ",", "len_rank", "+", "2", ")", ")", ")", "\n", "idcg", "[", "idcg_len", ":", "]", "=", "idcg", "[", "idcg_len", "-", "1", "]", "\n", "\n", "dcg", "=", "np", ".", "cumsum", "(", "[", "1.0", "/", "np", ".", "log2", "(", "idx", "+", "2", ")", "if", "item", "in", "ground_truth", "else", "0.0", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", "]", ")", "\n", "result", "=", "dcg", "/", "idcg", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.mrr": [[58, 68], ["enumerate", "numpy.zeros", "len"], "function", ["None"], ["", "def", "mrr", "(", "rank", ",", "ground_truth", ")", ":", "\n", "# MRR is equal to MAP when dataset is loo split.", "\n", "    ", "last_idx", "=", "sys", ".", "maxsize", "\n", "for", "idx", ",", "item", "in", "enumerate", "(", "rank", ")", ":", "\n", "        ", "if", "item", "in", "ground_truth", ":", "\n", "            ", "last_idx", "=", "idx", "\n", "break", "\n", "", "", "result", "=", "np", ".", "zeros", "(", "len", "(", "rank", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "result", "[", "last_idx", ":", "]", "=", "1.0", "/", "(", "last_idx", "+", "1", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__init__": [[20, 42], ["dataset.Dataset._load_data", "dataset.Dataset._group_item_by_popularity", "dataset.Dataset._group_user_by_popularity", "print"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._load_data", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._group_item_by_popularity", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._group_user_by_popularity"], ["    ", "def", "__init__", "(", "self", ",", "conf", ")", ":", "\n", "        ", "\"\"\"Constructor\n        \"\"\"", "\n", "self", ".", "conf", "=", "conf", "\n", "self", ".", "train_matrix", "=", "None", "\n", "self", ".", "test_matrix", "=", "None", "\n", "self", ".", "time_matrix", "=", "None", "\n", "self", ".", "negative_matrix", "=", "None", "\n", "self", ".", "userids", "=", "None", "\n", "self", ".", "itemids", "=", "None", "\n", "self", ".", "num_users", "=", "None", "\n", "self", ".", "num_items", "=", "None", "\n", "self", ".", "item_group", "=", "{", "}", "\n", "self", ".", "user_group", "=", "{", "}", "\n", "self", ".", "dataset_name", "=", "conf", "[", "\"data.input.dataset\"", "]", "\n", "\n", "# self._split_data(conf)", "\n", "self", ".", "_load_data", "(", "conf", ")", "\n", "\n", "self", ".", "_group_item_by_popularity", "(", ")", "\n", "self", ".", "_group_user_by_popularity", "(", ")", "\n", "print", "(", "'Data loading finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._get_data_path": [[43, 55], ["os.path.join", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "_get_data_path", "(", "self", ",", "config", ")", ":", "\n", "        ", "data_path", "=", "config", "[", "\"data.input.path\"", "]", "\n", "ori_prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "dataset_name", ")", "\n", "\n", "saved_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "\"_tmp_\"", "+", "self", ".", "dataset_name", ")", "\n", "saved_prefix", "=", "\"%s_%s_u%d_i%d\"", "%", "(", "self", ".", "dataset_name", ",", "config", "[", "\"splitter\"", "]", ",", "config", "[", "\"user_min\"", "]", ",", "config", "[", "\"item_min\"", "]", ")", "\n", "if", "\"by_time\"", "in", "config", "and", "config", "[", "\"by_time\"", "]", "is", "True", ":", "\n", "            ", "saved_prefix", "+=", "\"_by_time\"", "\n", "\n", "", "saved_prefix", "=", "os", ".", "path", ".", "join", "(", "saved_path", ",", "saved_prefix", ")", "\n", "\n", "return", "ori_prefix", ",", "saved_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._check_saved_data": [[56, 82], ["os.path.isfile", "utils.check_md5", "ValueError", "open", "os.path.isfile", "utils.check_md5", "line.strip", "md5_fin.readlines"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5"], ["", "def", "_check_saved_data", "(", "self", ",", "splitter", ",", "ori_prefix", ",", "saved_prefix", ")", ":", "\n", "        ", "check_state", "=", "False", "\n", "# get md5", "\n", "if", "splitter", "in", "(", "\"loo\"", ",", "\"ratio\"", ")", ":", "\n", "            ", "rating_file", "=", "ori_prefix", "+", "\".rating\"", "\n", "ori_file_md5", "=", "[", "check_md5", "(", "rating_file", ")", "]", "\n", "", "elif", "splitter", "==", "\"given\"", ":", "\n", "            ", "train_file", "=", "ori_prefix", "+", "\".train\"", "\n", "test_file", "=", "ori_prefix", "+", "\".test\"", "\n", "ori_file_md5", "=", "[", "check_md5", "(", "file", ")", "for", "file", "in", "[", "train_file", ",", "test_file", "]", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"'%s' is an invalid splitter!\"", "%", "splitter", ")", "\n", "\n", "# check md5", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "saved_prefix", "+", "\".md5\"", ")", ":", "\n", "            ", "with", "open", "(", "saved_prefix", "+", "\".md5\"", ",", "'r'", ")", "as", "md5_fin", ":", "\n", "                ", "saved_md5", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "md5_fin", ".", "readlines", "(", ")", "]", "\n", "", "if", "ori_file_md5", "==", "saved_md5", ":", "\n", "                ", "check_state", "=", "True", "\n", "\n", "# check saved files", "\n", "", "", "for", "postfix", "in", "[", "\".train\"", ",", "\".test\"", ",", "\".user2id\"", ",", "\".item2id\"", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isfile", "(", "saved_prefix", "+", "postfix", ")", ":", "\n", "                ", "check_state", "=", "False", "\n", "\n", "", "", "return", "check_state", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._load_data": [[83, 137], ["dataset.Dataset._get_data_path", "dataset.Dataset._check_saved_data", "pandas.concat", "len", "scipy.sparse.csr_matrix", "scipy.sparse.csr_matrix", "dataset.Dataset._load_test_neg_items", "ValueError", "print", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "pandas.read_csv", "print", "dataset.Dataset._split_data", "max", "max", "scipy.sparse.csr_matrix", "len", "len", "zip", "zip"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._get_data_path", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._check_saved_data", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._load_test_neg_items", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._split_data"], ["", "def", "_load_data", "(", "self", ",", "config", ")", ":", "\n", "        ", "format_dict", "=", "{", "\"UIRT\"", ":", "[", "\"user\"", ",", "\"item\"", ",", "\"rating\"", ",", "\"time\"", "]", ",", "\n", "\"UIR\"", ":", "[", "\"user\"", ",", "\"item\"", ",", "\"rating\"", "]", ",", "\n", "\"UI\"", ":", "[", "\"user\"", ",", "\"item\"", "]", "}", "\n", "file_format", "=", "config", "[", "\"data.column.format\"", "]", "\n", "if", "file_format", "not", "in", "format_dict", ":", "\n", "            ", "raise", "ValueError", "(", "\"'%s' is an invalid data column format!\"", "%", "file_format", ")", "\n", "\n", "", "ori_prefix", ",", "saved_prefix", "=", "self", ".", "_get_data_path", "(", "config", ")", "\n", "splitter", "=", "config", "[", "\"splitter\"", "]", "\n", "sep", "=", "config", "[", "\"data.convert.separator\"", "]", "\n", "columns", "=", "format_dict", "[", "file_format", "]", "\n", "train_file", "=", "saved_prefix", "+", "\".train\"", "\n", "test_file", "=", "saved_prefix", "+", "\".test\"", "\n", "user_map_file", "=", "saved_prefix", "+", "\".user2id\"", "\n", "item_map_file", "=", "saved_prefix", "+", "\".item2id\"", "\n", "\n", "if", "self", ".", "_check_saved_data", "(", "splitter", ",", "ori_prefix", ",", "saved_prefix", ")", ":", "\n", "            ", "print", "(", "\"load saved data...\"", ")", "\n", "# load saved data", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "train_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "test_data", "=", "pd", ".", "read_csv", "(", "test_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "\n", "user_map", "=", "pd", ".", "read_csv", "(", "user_map_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "[", "\"user\"", ",", "\"id\"", "]", ")", "\n", "item_map", "=", "pd", ".", "read_csv", "(", "item_map_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "[", "\"item\"", ",", "\"id\"", "]", ")", "\n", "self", ".", "userids", "=", "{", "user", ":", "uid", "for", "user", ",", "uid", "in", "zip", "(", "user_map", "[", "\"user\"", "]", ",", "user_map", "[", "\"id\"", "]", ")", "}", "\n", "self", ".", "itemids", "=", "{", "item", ":", "iid", "for", "item", ",", "iid", "in", "zip", "(", "item_map", "[", "\"item\"", "]", ",", "item_map", "[", "\"id\"", "]", ")", "}", "\n", "", "else", ":", "# split and save data", "\n", "            ", "print", "(", "\"split and save data...\"", ")", "\n", "by_time", "=", "config", "[", "\"by_time\"", "]", "if", "file_format", "==", "\"UIRT\"", "else", "False", "\n", "train_data", ",", "test_data", "=", "self", ".", "_split_data", "(", "ori_prefix", ",", "saved_prefix", ",", "columns", ",", "by_time", ",", "config", ")", "\n", "\n", "", "all_data", "=", "pd", ".", "concat", "(", "[", "train_data", ",", "test_data", "]", ")", "\n", "self", ".", "num_users", "=", "max", "(", "all_data", "[", "\"user\"", "]", ")", "+", "1", "\n", "self", ".", "num_items", "=", "max", "(", "all_data", "[", "\"item\"", "]", ")", "+", "1", "\n", "self", ".", "num_ratings", "=", "len", "(", "all_data", ")", "\n", "\n", "if", "file_format", "==", "\"UI\"", ":", "\n", "            ", "train_ratings", "=", "[", "1.0", "]", "*", "len", "(", "train_data", "[", "\"user\"", "]", ")", "\n", "test_ratings", "=", "[", "1.0", "]", "*", "len", "(", "test_data", "[", "\"user\"", "]", ")", "\n", "", "else", ":", "\n", "            ", "train_ratings", "=", "train_data", "[", "\"rating\"", "]", "\n", "test_ratings", "=", "test_data", "[", "\"rating\"", "]", "\n", "\n", "", "self", ".", "train_matrix", "=", "csr_matrix", "(", "(", "train_ratings", ",", "(", "train_data", "[", "\"user\"", "]", ",", "train_data", "[", "\"item\"", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "self", ".", "test_matrix", "=", "csr_matrix", "(", "(", "test_ratings", ",", "(", "test_data", "[", "\"user\"", "]", ",", "test_data", "[", "\"item\"", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "\n", "if", "file_format", "==", "\"UIRT\"", ":", "\n", "            ", "self", ".", "time_matrix", "=", "csr_matrix", "(", "(", "train_data", "[", "\"time\"", "]", ",", "(", "train_data", "[", "\"user\"", "]", ",", "train_data", "[", "\"item\"", "]", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "\n", "", "self", ".", "negative_matrix", "=", "self", ".", "_load_test_neg_items", "(", "all_data", ",", "config", ",", "saved_prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._split_data": [[138, 217], ["os.path.dirname", "pandas.concat", "all_data[].unique", "pandas.Series().to_dict", "train_data[].map", "test_data[].map", "all_data[].unique", "pandas.Series().to_dict", "train_data[].map", "test_data[].map", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "os.path.isfile", "pandas.concat", "len", "util.logger.Logger", "util.logger.Logger.info", "util.logger.Logger.info", "os.path.exists", "os.makedirs", "pandas.read_csv", "utils.filter_data", "numpy.savetxt", "max", "max", "os.path.basename", "dataset.Dataset.__str__", "utils.split_by_ratio", "open", "md5_out.writelines", "pandas.read_csv", "pandas.read_csv", "ValueError", "pandas.Series", "pandas.Series", "dataset.Dataset.userids.items", "dataset.Dataset.itemids.items", "open", "fin.readlines", "len", "utils.split_by_loo", "ValueError", "utils.check_md5", "open", "md5_out.writelines", "line.strip().split.strip().split.strip().split", "user_items.extend", "neg_item_list.append", "range", "range", "len", "len", "line.strip().split.strip().split.strip", "utils.check_md5", "utils.check_md5"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.util.logger.Logger.info", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.filter_data", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__str__", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.split_by_ratio", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.split_by_loo", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5", "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5"], ["", "def", "_split_data", "(", "self", ",", "ori_prefix", ",", "saved_prefix", ",", "columns", ",", "by_time", ",", "config", ")", ":", "\n", "        ", "splitter", "=", "config", "[", "\"splitter\"", "]", "\n", "user_min", "=", "config", "[", "\"user_min\"", "]", "\n", "item_min", "=", "config", "[", "\"item_min\"", "]", "\n", "sep", "=", "config", "[", "\"data.convert.separator\"", "]", "\n", "\n", "dir_name", "=", "os", ".", "path", ".", "dirname", "(", "saved_prefix", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n", "", "if", "splitter", "in", "(", "\"loo\"", ",", "\"ratio\"", ")", ":", "\n", "            ", "rating_file", "=", "ori_prefix", "+", "\".rating\"", "\n", "all_data", "=", "pd", ".", "read_csv", "(", "rating_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "filtered_data", "=", "filter_data", "(", "all_data", ",", "user_min", "=", "user_min", ",", "item_min", "=", "item_min", ")", "\n", "if", "splitter", "==", "\"ratio\"", ":", "\n", "                ", "ratio", "=", "config", "[", "\"ratio\"", "]", "\n", "train_data", ",", "test_data", "=", "split_by_ratio", "(", "filtered_data", ",", "ratio", "=", "ratio", ",", "by_time", "=", "by_time", ")", "\n", "", "elif", "splitter", "==", "\"loo\"", ":", "\n", "                ", "train_data", ",", "test_data", "=", "split_by_loo", "(", "filtered_data", ",", "by_time", "=", "by_time", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"There is not splitter '%s'\"", "%", "splitter", ")", "\n", "", "with", "open", "(", "saved_prefix", "+", "\".md5\"", ",", "\"w\"", ")", "as", "md5_out", ":", "\n", "                ", "md5_out", ".", "writelines", "(", "check_md5", "(", "rating_file", ")", ")", "\n", "", "", "elif", "splitter", "==", "\"given\"", ":", "\n", "            ", "train_file", "=", "ori_prefix", "+", "\".train\"", "\n", "test_file", "=", "ori_prefix", "+", "\".test\"", "\n", "train_data", "=", "pd", ".", "read_csv", "(", "train_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "test_data", "=", "pd", ".", "read_csv", "(", "test_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "with", "open", "(", "saved_prefix", "+", "\".md5\"", ",", "\"w\"", ")", "as", "md5_out", ":", "\n", "                ", "md5_out", ".", "writelines", "(", "'\\n'", ".", "join", "(", "[", "check_md5", "(", "train_file", ")", ",", "check_md5", "(", "test_file", ")", "]", ")", ")", "\n", "# md5_out.writelines(check_md5(test_file))", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"'%s' is an invalid splitter!\"", "%", "splitter", ")", "\n", "\n", "# remap id", "\n", "", "all_data", "=", "pd", ".", "concat", "(", "[", "train_data", ",", "test_data", "]", ")", "\n", "unique_user", "=", "all_data", "[", "\"user\"", "]", ".", "unique", "(", ")", "\n", "self", ".", "userids", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_user", ")", ")", ",", "index", "=", "unique_user", ")", ".", "to_dict", "(", ")", "\n", "train_data", "[", "\"user\"", "]", "=", "train_data", "[", "\"user\"", "]", ".", "map", "(", "self", ".", "userids", ")", "\n", "test_data", "[", "\"user\"", "]", "=", "test_data", "[", "\"user\"", "]", ".", "map", "(", "self", ".", "userids", ")", "\n", "\n", "unique_item", "=", "all_data", "[", "\"item\"", "]", ".", "unique", "(", ")", "\n", "self", ".", "itemids", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_item", ")", ")", ",", "index", "=", "unique_item", ")", ".", "to_dict", "(", ")", "\n", "train_data", "[", "\"item\"", "]", "=", "train_data", "[", "\"item\"", "]", ".", "map", "(", "self", ".", "itemids", ")", "\n", "test_data", "[", "\"item\"", "]", "=", "test_data", "[", "\"item\"", "]", ".", "map", "(", "self", ".", "itemids", ")", "\n", "\n", "# save files", "\n", "np", ".", "savetxt", "(", "saved_prefix", "+", "\".train\"", ",", "train_data", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "sep", ")", "\n", "np", ".", "savetxt", "(", "saved_prefix", "+", "\".test\"", ",", "test_data", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "sep", ")", "\n", "\n", "user2id", "=", "[", "[", "user", ",", "id", "]", "for", "user", ",", "id", "in", "self", ".", "userids", ".", "items", "(", ")", "]", "\n", "item2id", "=", "[", "[", "item", ",", "id", "]", "for", "item", ",", "id", "in", "self", ".", "itemids", ".", "items", "(", ")", "]", "\n", "np", ".", "savetxt", "(", "saved_prefix", "+", "\".user2id\"", ",", "user2id", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "sep", ")", "\n", "np", ".", "savetxt", "(", "saved_prefix", "+", "\".item2id\"", ",", "item2id", ",", "fmt", "=", "'%s'", ",", "delimiter", "=", "sep", ")", "\n", "\n", "# remap test negative items and save to a file", "\n", "neg_item_file", "=", "ori_prefix", "+", "\".neg\"", "\n", "if", "os", ".", "path", ".", "isfile", "(", "neg_item_file", ")", ":", "\n", "            ", "neg_item_list", "=", "[", "]", "\n", "with", "open", "(", "neg_item_file", ",", "'r'", ")", "as", "fin", ":", "\n", "                ", "for", "line", "in", "fin", ".", "readlines", "(", ")", ":", "\n", "                    ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "sep", ")", "\n", "user_items", "=", "[", "self", ".", "userids", "[", "line", "[", "0", "]", "]", "]", "\n", "user_items", ".", "extend", "(", "[", "self", ".", "itemids", "[", "i", "]", "for", "i", "in", "line", "[", "1", ":", "]", "]", ")", "\n", "neg_item_list", ".", "append", "(", "user_items", ")", "\n", "\n", "", "", "test_neg", "=", "len", "(", "neg_item_list", "[", "0", "]", ")", "-", "1", "\n", "np", ".", "savetxt", "(", "\"%s.neg%d\"", "%", "(", "saved_prefix", ",", "test_neg", ")", ",", "neg_item_list", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "sep", ")", "\n", "\n", "", "all_remapped_data", "=", "pd", ".", "concat", "(", "[", "train_data", ",", "test_data", "]", ")", "\n", "self", ".", "num_users", "=", "max", "(", "all_remapped_data", "[", "\"user\"", "]", ")", "+", "1", "\n", "self", ".", "num_items", "=", "max", "(", "all_remapped_data", "[", "\"item\"", "]", ")", "+", "1", "\n", "self", ".", "num_ratings", "=", "len", "(", "all_remapped_data", ")", "\n", "\n", "logger", "=", "Logger", "(", "saved_prefix", "+", "\".info\"", ")", "\n", "logger", ".", "info", "(", "os", ".", "path", ".", "basename", "(", "saved_prefix", ")", ")", "\n", "logger", ".", "info", "(", "self", ".", "__str__", "(", ")", ")", "\n", "\n", "return", "train_data", ",", "test_data", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._load_test_neg_items": [[218, 249], ["scipy.sparse.csr_matrix", "os.path.isfile", "all_data.groupby", "pandas.DataFrame", "numpy.savetxt", "pandas.read_csv", "user_list.extend", "item_list.extend", "line.extend", "pandas.read_csv.append", "util.randint_choice", "len", "len", "u_data[].tolist"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["", "def", "_load_test_neg_items", "(", "self", ",", "all_data", ",", "config", ",", "saved_prefix", ")", ":", "\n", "        ", "number_neg", "=", "config", "[", "\"rec.evaluate.neg\"", "]", "\n", "sep", "=", "config", "[", "\"data.convert.separator\"", "]", "\n", "neg_matrix", "=", "None", "\n", "if", "number_neg", ">", "0", ":", "\n", "            ", "neg_items_file", "=", "\"%s.neg%d\"", "%", "(", "saved_prefix", ",", "number_neg", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "neg_items_file", ")", ":", "\n", "# sampling", "\n", "                ", "neg_items", "=", "[", "]", "\n", "grouped_user", "=", "all_data", ".", "groupby", "(", "[", "\"user\"", "]", ")", "\n", "for", "user", ",", "u_data", "in", "grouped_user", ":", "\n", "                    ", "line", "=", "[", "user", "]", "\n", "line", ".", "extend", "(", "randint_choice", "(", "self", ".", "num_items", ",", "size", "=", "number_neg", ",", "\n", "replace", "=", "False", ",", "exclusion", "=", "u_data", "[", "\"item\"", "]", ".", "tolist", "(", ")", ")", ")", "\n", "neg_items", ".", "append", "(", "line", ")", "\n", "\n", "", "neg_items", "=", "pd", ".", "DataFrame", "(", "neg_items", ")", "\n", "np", ".", "savetxt", "(", "\"%s.neg%d\"", "%", "(", "saved_prefix", ",", "number_neg", ")", ",", "neg_items", ",", "fmt", "=", "'%d'", ",", "delimiter", "=", "sep", ")", "\n", "", "else", ":", "\n", "# load file", "\n", "                ", "neg_items", "=", "pd", ".", "read_csv", "(", "neg_items_file", ",", "sep", "=", "sep", ",", "header", "=", "None", ")", "\n", "\n", "", "user_list", ",", "item_list", "=", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "neg_items", ".", "values", ":", "\n", "                ", "user_list", ".", "extend", "(", "[", "line", "[", "0", "]", "]", "*", "(", "len", "(", "line", ")", "-", "1", ")", ")", "\n", "item_list", ".", "extend", "(", "line", "[", "1", ":", "]", ")", "\n", "\n", "", "neg_matrix", "=", "csr_matrix", "(", "(", "[", "1", "]", "*", "len", "(", "user_list", ")", ",", "(", "user_list", ",", "item_list", ")", ")", ",", "\n", "shape", "=", "(", "self", ".", "num_users", ",", "self", ".", "num_items", ")", ")", "\n", "\n", "", "return", "neg_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._group_item_by_popularity": [[250, 265], ["[].astype", "numpy.argsort", "[].astype.copy", "numpy.linspace", "numpy.searchsorted", "print", "range", "dataset.Dataset.train_matrix.sum", "numpy.array", "dataset.Dataset.train_matrix.sum"], "methods", ["None"], ["", "def", "_group_item_by_popularity", "(", "self", ")", ":", "\n", "        ", "i_degree", "=", "np", ".", "array", "(", "self", ".", "train_matrix", ".", "sum", "(", "0", ")", ")", "[", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "i_degree_sort", "=", "np", ".", "argsort", "(", "i_degree", ")", "# in ascend order", "\n", "i_degree_cumsum", "=", "i_degree", ".", "copy", "(", ")", "\n", "cum_sum", "=", "0", "\n", "for", "x", "in", "i_degree_sort", ":", "\n", "            ", "cum_sum", "+=", "i_degree_cumsum", "[", "x", "]", "\n", "i_degree_cumsum", "[", "x", "]", "=", "cum_sum", "\n", "\n", "", "split_idx", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "train_matrix", ".", "sum", "(", ")", ",", "11", ")", "\n", "self", ".", "item_group_idx", "=", "np", ".", "searchsorted", "(", "split_idx", "[", "1", ":", "-", "1", "]", ",", "i_degree_cumsum", ")", "\n", "\n", "print", "(", "'Item degree grouping...'", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "item_group", "[", "i", "]", "=", "i_degree", "[", "self", ".", "item_group_idx", "==", "i", "]", "\n", "# print('Size of group %d:' % i, self.item_group[i].size)", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset._group_user_by_popularity": [[270, 285], ["[].astype", "numpy.argsort", "[].astype.copy", "numpy.linspace", "numpy.searchsorted", "print", "range", "dataset.Dataset.train_matrix.sum", "numpy.array", "dataset.Dataset.train_matrix.sum"], "methods", ["None"], ["", "", "def", "_group_user_by_popularity", "(", "self", ")", ":", "\n", "        ", "u_degree", "=", "np", ".", "array", "(", "self", ".", "train_matrix", ".", "sum", "(", "1", ")", ")", "[", ":", ",", "0", "]", ".", "astype", "(", "np", ".", "int32", ")", "\n", "u_degree_sort", "=", "np", ".", "argsort", "(", "u_degree", ")", "# in ascend order", "\n", "u_degree_cumsum", "=", "u_degree", ".", "copy", "(", ")", "\n", "cum_sum", "=", "0", "\n", "for", "x", "in", "u_degree_sort", ":", "\n", "            ", "cum_sum", "+=", "u_degree_cumsum", "[", "x", "]", "\n", "u_degree_cumsum", "[", "x", "]", "=", "cum_sum", "\n", "\n", "", "split_idx", "=", "np", ".", "linspace", "(", "0", ",", "self", ".", "train_matrix", ".", "sum", "(", ")", ",", "11", ")", "\n", "self", ".", "user_group_idx", "=", "np", ".", "searchsorted", "(", "split_idx", "[", "1", ":", "-", "1", "]", ",", "u_degree_cumsum", ")", "\n", "\n", "print", "(", "'User degree grouping...'", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "self", ".", "user_group", "[", "i", "]", "=", "u_degree", "[", "self", ".", "user_group_idx", "==", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__str__": [[286, 299], ["None"], "methods", ["None"], ["", "", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "num_users", ",", "num_items", "=", "self", ".", "num_users", ",", "self", ".", "num_items", "\n", "num_ratings", "=", "self", ".", "num_ratings", "\n", "sparsity", "=", "1", "-", "1.0", "*", "num_ratings", "/", "(", "num_users", "*", "num_items", ")", "\n", "data_info", "=", "[", "\"Dataset name: %s\"", "%", "self", ".", "dataset_name", ",", "\n", "\"The number of users: %d\"", "%", "num_users", ",", "\n", "\"The number of items: %d\"", "%", "num_items", ",", "\n", "\"The number of ratings: %d\"", "%", "num_ratings", ",", "\n", "\"Average actions of users: %.2f\"", "%", "(", "1.0", "*", "num_ratings", "/", "num_users", ")", ",", "\n", "\"Average actions of items: %.2f\"", "%", "(", "1.0", "*", "num_ratings", "/", "num_items", ")", ",", "\n", "\"The sparsity of the dataset: %.6f%%\"", "%", "(", "sparsity", "*", "100", ")", "]", "\n", "data_info", "=", "\"\\n\"", ".", "join", "(", "data_info", ")", "\n", "return", "data_info", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__repr__": [[300, 302], ["dataset.Dataset.__str__"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.__str__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__str__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict": [[303, 310], ["util.tool.csr_to_user_dict_bytime", "util.tool.csr_to_user_dict"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict_bytime", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict"], ["", "def", "get_user_train_dict", "(", "self", ",", "by_time", "=", "False", ")", ":", "\n", "        ", "if", "by_time", ":", "\n", "            ", "train_dict", "=", "csr_to_user_dict_bytime", "(", "self", ".", "time_matrix", ",", "self", ".", "train_matrix", ")", "\n", "", "else", ":", "\n", "            ", "train_dict", "=", "csr_to_user_dict", "(", "self", ".", "train_matrix", ")", "\n", "\n", "", "return", "train_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_test_dict": [[311, 314], ["util.tool.csr_to_user_dict"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict"], ["", "def", "get_user_test_dict", "(", "self", ")", ":", "\n", "        ", "test_dict", "=", "csr_to_user_dict", "(", "self", ".", "test_matrix", ")", "\n", "return", "test_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_test_neg_dict": [[315, 320], ["util.tool.csr_to_user_dict"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.csr_to_user_dict"], ["", "def", "get_user_test_neg_dict", "(", "self", ")", ":", "\n", "        ", "test_neg_dict", "=", "None", "\n", "if", "self", ".", "negative_matrix", "is", "not", "None", ":", "\n", "            ", "test_neg_dict", "=", "csr_to_user_dict", "(", "self", ".", "negative_matrix", ")", "\n", "", "return", "test_neg_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_train_interactions": [[321, 330], ["dataset.Dataset.train_matrix.todok", "dataset.Dataset.items", "users_list.append", "items_list.append"], "methods", ["None"], ["", "def", "get_train_interactions", "(", "self", ")", ":", "\n", "        ", "dok_matrix", "=", "self", ".", "train_matrix", ".", "todok", "(", ")", "\n", "users_list", ",", "items_list", "=", "[", "]", ",", "[", "]", "\n", "for", "(", "user", ",", "item", ")", ",", "value", "in", "dok_matrix", ".", "items", "(", ")", ":", "\n", "            ", "users_list", ".", "append", "(", "user", ")", "\n", "items_list", ".", "append", "(", "item", ")", "\n", "# (users_np, items_np) = self.train_matrix.nonzero()", "\n", "\n", "", "return", "users_list", ",", "items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.to_csr_matrix": [[331, 333], ["dataset.Dataset.train_matrix.copy"], "methods", ["None"], ["", "def", "to_csr_matrix", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_matrix", ".", "copy", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.Sampler.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.Sampler.__len__": [[18, 20], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.Sampler.__iter__": [[21, 23], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSampler.__init__": [[207, 239], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sampler._generate_positive_items", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generate_positive_items"], ["def", "__init__", "(", "self", ",", "dataset", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `PointwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `False`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", ")", "\n", "self", ".", "user_pos_len", ",", "users_list", ",", "self", ".", "pos_items_list", "=", "_generate_positive_items", "(", "self", ".", "user_pos_dict", ")", "\n", "\n", "self", ".", "users_list", "=", "users_list", "*", "(", "self", ".", "neg_num", "+", "1", ")", "\n", "len_pos_items", "=", "len", "(", "self", ".", "pos_items_list", ")", "\n", "pos_labels_list", "=", "[", "1.0", "]", "*", "len_pos_items", "\n", "neg_labels_list", "=", "[", "0.0", "]", "*", "(", "len_pos_items", "*", "self", ".", "neg_num", ")", "\n", "self", ".", "all_labels", "=", "pos_labels_list", "+", "neg_labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSampler.__iter__": [[240, 254], ["sampler._sampling_negative_items", "numpy.array", "numpy.reshape().tolist", "util.DataIterator", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "neg_items_list", "=", "_sampling_negative_items", "(", "self", ".", "user_pos_len", ",", "self", ".", "neg_num", ",", "\n", "self", ".", "item_num", ",", "self", ".", "user_pos_dict", ")", "\n", "\n", "neg_items", "=", "np", ".", "array", "(", "neg_items_list", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg_items", "=", "np", ".", "reshape", "(", "neg_items", ".", "T", ",", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "all_items", "=", "self", ".", "pos_items_list", "+", "neg_items", "\n", "\n", "data_iter", "=", "DataIterator", "(", "self", ".", "users_list", ",", "all_items", ",", "self", ".", "all_labels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "\n", "for", "bat_users", ",", "bat_items", ",", "bat_labels", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_items", ",", "bat_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSampler.__len__": [[255, 261], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "len", "(", "self", ".", "users_list", ")", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSamplerV2.__init__": [[269, 291], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sum", "sampler._generate_positive_items", "len", "sampler.PointwiseSamplerV2.user_pos_dict.items"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generate_positive_items"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `PointwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1024`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `True`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "Sampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", ")", "\n", "self", ".", "num_trainings", "=", "sum", "(", "[", "len", "(", "item", ")", "for", "u", ",", "item", "in", "self", ".", "user_pos_dict", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "user_pos_len", ",", "self", ".", "users_list", ",", "self", ".", "pos_items_list", "=", "_generate_positive_items", "(", "self", ".", "user_pos_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSamplerV2.__iter__": [[292, 299], ["util.DataIterator"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "data_iter", "=", "DataIterator", "(", "self", ".", "users_list", ",", "self", ".", "pos_items_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "\n", "for", "bat_users", ",", "bat_items", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_items", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PointwiseSamplerV2.__len__": [[300, 306], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "len", "(", "self", ".", "users_list", ")", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSampler.__init__": [[320, 349], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sum", "sampler._generate_positive_items", "ValueError", "len", "numpy.sum", "sampler.PairwiseSampler.user_pos_dict.items"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generate_positive_items"], ["def", "__init__", "(", "self", ",", "dataset", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "p", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initializes a new `PairwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `False`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "PairwiseSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", ")", "\n", "self", ".", "num_trainings", "=", "sum", "(", "[", "len", "(", "item", ")", "for", "u", ",", "item", "in", "self", ".", "user_pos_dict", ".", "items", "(", ")", "]", ")", "\n", "\n", "self", ".", "user_pos_len", ",", "self", ".", "users_list", ",", "self", ".", "pos_items_list", "=", "_generate_positive_items", "(", "self", ".", "user_pos_dict", ")", "\n", "self", ".", "p", "=", "p", "/", "np", ".", "sum", "(", "p", ")", "if", "p", "is", "not", "None", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSampler.__iter__": [[350, 365], ["util.DataIterator", "sampler._sampling_negative_items", "sampler._sampling_negative_items_with_p"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items_with_p"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "p", "is", "None", ":", "\n", "# uniformly sampling a batch of interactions, i.e., sampling user by user activity, uniformly sampling negative items", "\n", "            ", "neg_items_list", "=", "_sampling_negative_items", "(", "self", ".", "user_pos_len", ",", "self", ".", "neg_num", ",", "\n", "self", ".", "item_num", ",", "self", ".", "user_pos_dict", ")", "\n", "", "else", ":", "\n", "# uniformly sampling a batch of interactions, i.e., sampling user by user activity, sampling negative items by a preset distribtuion p", "\n", "            ", "neg_items_list", "=", "_sampling_negative_items_with_p", "(", "self", ".", "user_pos_len", ",", "self", ".", "neg_num", ",", "\n", "self", ".", "item_num", ",", "self", ".", "user_pos_dict", ",", "p", "=", "self", ".", "p", ")", "\n", "\n", "", "data_iter", "=", "DataIterator", "(", "self", ".", "users_list", ",", "self", ".", "pos_items_list", ",", "neg_items_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "for", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSampler.__len__": [[366, 372], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "len", "(", "self", ".", "users_list", ")", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV2.__init__": [[386, 412], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sum", "ValueError", "numpy.array", "len", "dataset.get_user_train_dict.items", "dataset.get_user_train_dict.items"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict"], ["def", "__init__", "(", "self", ",", "dataset", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `PairwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1024`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `True`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "PairwiseSamplerV2", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", ")", "\n", "self", ".", "num_trainings", "=", "sum", "(", "[", "len", "(", "item", ")", "for", "u", ",", "item", "in", "user_pos_dict", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "user_pos_dict", "=", "{", "u", ":", "np", ".", "array", "(", "item", ")", "for", "u", ",", "item", "in", "user_pos_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV2.__iter__": [[413, 422], ["sampler._pairwise_sampling_v2", "util.DataIterator"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._pairwise_sampling_v2"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "users_list", ",", "pos_items_list", ",", "neg_items_list", "=", "_pairwise_sampling_v2", "(", "self", ".", "user_pos_dict", ",", "self", ".", "num_trainings", ",", "self", ".", "item_num", ")", "\n", "\n", "data_iter", "=", "DataIterator", "(", "users_list", ",", "pos_items_list", ",", "neg_items_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "for", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV2.__len__": [[423, 429], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "self", ".", "num_trainings", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV3.__init__": [[443, 469], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sum", "ValueError", "numpy.array", "len", "dataset.get_user_train_dict.items", "dataset.get_user_train_dict.items"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict"], ["def", "__init__", "(", "self", ",", "dataset", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `PairwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1024`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `True`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "PairwiseSamplerV3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", ")", "\n", "self", ".", "num_trainings", "=", "sum", "(", "[", "len", "(", "item", ")", "for", "u", ",", "item", "in", "user_pos_dict", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "user_pos_dict", "=", "{", "u", ":", "np", ".", "array", "(", "item", ")", "for", "u", ",", "item", "in", "user_pos_dict", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV3.__iter__": [[470, 480], ["sampler._pairwise_sampling_v3", "util.DataIterator"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._pairwise_sampling_v3"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# uniformly sampling a batch of users, neg_num can larger than 1", "\n", "        ", "users_list", ",", "pos_items_list", ",", "neg_items_list", "=", "_pairwise_sampling_v3", "(", "self", ".", "user_pos_dict", ",", "self", ".", "num_trainings", ",", "self", ".", "item_num", ",", "self", ".", "neg_num", ")", "\n", "\n", "data_iter", "=", "DataIterator", "(", "users_list", ",", "pos_items_list", ",", "neg_items_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "for", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_pos_items", ",", "bat_neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.PairwiseSamplerV3.__len__": [[481, 487], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "self", ".", "num_trainings", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPointwiseSampler.__init__": [[504, 542], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sampler._generative_time_order_positive_items", "len", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generative_time_order_positive_items"], ["def", "__init__", "(", "self", ",", "dataset", ",", "high_order", "=", "1", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `TimeOrderPointwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            high_order (int): The number of recent items. Defaults to `1`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `False`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "TimeOrderPointwiseSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "high_order", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'high_order' must be a positive integer.\"", ")", "\n", "", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", "by_time", "=", "True", ")", "\n", "\n", "self", ".", "user_pos_len", ",", "users_list", ",", "recent_items_list", ",", "self", ".", "pos_items_list", "=", "_generative_time_order_positive_items", "(", "self", ".", "user_pos_dict", ",", "high_order", "=", "high_order", ")", "\n", "\n", "self", ".", "users_list", "=", "users_list", "*", "(", "self", ".", "neg_num", "+", "1", ")", "\n", "self", ".", "recent_items_list", "=", "recent_items_list", "*", "(", "self", ".", "neg_num", "+", "1", ")", "\n", "\n", "len_pos_items", "=", "len", "(", "self", ".", "pos_items_list", ")", "\n", "pos_labels_list", "=", "[", "1.0", "]", "*", "len_pos_items", "\n", "neg_labels_list", "=", "[", "0.0", "]", "*", "(", "len_pos_items", "*", "self", ".", "neg_num", ")", "\n", "self", ".", "all_labels", "=", "pos_labels_list", "+", "neg_labels_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPointwiseSampler.__iter__": [[543, 556], ["sampler._sampling_negative_items", "numpy.array", "numpy.reshape().tolist", "util.DataIterator", "numpy.reshape"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "neg_items_list", "=", "_sampling_negative_items", "(", "self", ".", "user_pos_len", ",", "self", ".", "neg_num", ",", "\n", "self", ".", "item_num", ",", "self", ".", "user_pos_dict", ")", "\n", "\n", "neg_items", "=", "np", ".", "array", "(", "neg_items_list", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "neg_items", "=", "np", ".", "reshape", "(", "neg_items", ".", "T", ",", "[", "-", "1", "]", ")", ".", "tolist", "(", ")", "\n", "all_next_items", "=", "self", ".", "pos_items_list", "+", "neg_items", "\n", "\n", "data_iter", "=", "DataIterator", "(", "self", ".", "users_list", ",", "self", ".", "recent_items_list", ",", "all_next_items", ",", "self", ".", "all_labels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "\n", "for", "bat_users", ",", "bat_recent_items", ",", "bat_next_items", ",", "bat_labels", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_recent_items", ",", "bat_next_items", ",", "bat_labels", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPointwiseSampler.__len__": [[557, 563], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "len", "(", "self", ".", "users_list", ")", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__": [[581, 611], ["sampler.Sampler.__init__", "dataset.get_user_train_dict", "sampler._generative_time_order_positive_items", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__init__", "home.repos.pwc.inspect_result.wujcan_SGL.data.dataset.Dataset.get_user_train_dict", "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generative_time_order_positive_items"], ["def", "__init__", "(", "self", ",", "dataset", ",", "high_order", "=", "1", ",", "neg_num", "=", "1", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ")", ":", "\n", "        ", "\"\"\"Initializes a new `TimeOrderPairwiseSampler` instance.\n\n        Args:\n            dataset (data.Dataset): An instance of `Dataset`.\n            high_order (int): The number of recent items. Defaults to `1`.\n            neg_num (int): How many negative items for each positive item.\n                Defaults to `1`.\n            batch_size (int): How many samples per batch to load.\n                Defaults to `1`.\n            shuffle (bool): Whether reshuffling the samples at every epoch.\n                Defaults to `False`.\n            drop_last (bool): Whether dropping the last incomplete batch.\n                Defaults to `False`.\n        \"\"\"", "\n", "super", "(", "TimeOrderPairwiseSampler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "high_order", "<", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'high_order' must be a positive integer.\"", ")", "\n", "", "if", "neg_num", "<=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_last", "=", "drop_last", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "neg_num", "=", "neg_num", "\n", "self", ".", "item_num", "=", "dataset", ".", "num_items", "\n", "self", ".", "user_pos_dict", "=", "dataset", ".", "get_user_train_dict", "(", "by_time", "=", "True", ")", "\n", "\n", "self", ".", "user_pos_len", ",", "self", ".", "users_list", ",", "self", ".", "recent_items_list", ",", "self", ".", "pos_items_list", "=", "_generative_time_order_positive_items", "(", "self", ".", "user_pos_dict", ",", "high_order", "=", "high_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__iter__": [[612, 621], ["sampler._sampling_negative_items", "util.DataIterator"], "methods", ["home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "neg_items_list", "=", "_sampling_negative_items", "(", "self", ".", "user_pos_len", ",", "self", ".", "neg_num", ",", "\n", "self", ".", "item_num", ",", "self", ".", "user_pos_dict", ")", "\n", "\n", "data_iter", "=", "DataIterator", "(", "self", ".", "users_list", ",", "self", ".", "recent_items_list", ",", "self", ".", "pos_items_list", ",", "neg_items_list", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "self", ".", "shuffle", ",", "drop_last", "=", "self", ".", "drop_last", ")", "\n", "\n", "for", "bat_users", ",", "bat_recent_items", ",", "bat_pos_items", ",", "bat_neg_items", "in", "data_iter", ":", "\n", "            ", "yield", "bat_users", ",", "bat_recent_items", ",", "bat_pos_items", ",", "bat_neg_items", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler.TimeOrderPairwiseSampler.__len__": [[622, 628], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "n_sample", "=", "len", "(", "self", ".", "users_list", ")", "\n", "if", "self", ".", "drop_last", ":", "\n", "            ", "return", "n_sample", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "(", "n_sample", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generate_positive_items": [[25, 41], ["user_pos_dict.items", "isinstance", "TypeError", "ValueError", "len", "user_pos_len.append", "users_list.extend", "pos_items_list.extend", "len"], "function", ["None"], ["", "", "def", "_generate_positive_items", "(", "user_pos_dict", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "user_pos_dict", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"'user_pos_dict' must be a dict.\"", ")", "\n", "\n", "", "if", "not", "user_pos_dict", ":", "\n", "        ", "raise", "ValueError", "(", "\"'user_pos_dict' cannot be empty.\"", ")", "\n", "\n", "", "users_list", ",", "pos_items_list", "=", "[", "]", ",", "[", "]", "\n", "user_pos_len", "=", "[", "]", "\n", "for", "user", ",", "pos_items", "in", "user_pos_dict", ".", "items", "(", ")", ":", "\n", "        ", "pos_len", "=", "len", "(", "pos_items", ")", "\n", "user_pos_len", ".", "append", "(", "[", "user", ",", "pos_len", "]", ")", "\n", "users_list", ".", "extend", "(", "[", "user", "]", "*", "len", "(", "pos_items", ")", ")", "\n", "pos_items_list", ".", "extend", "(", "pos_items", ")", "\n", "\n", "", "return", "user_pos_len", ",", "users_list", ",", "pos_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._generative_time_order_positive_items": [[43, 70], ["user_pos_dict.items", "ValueError", "isinstance", "TypeError", "ValueError", "user_pos_len.append", "users_list.extend", "recent_items_list.extend", "pos_items_list.extend", "len", "len", "range", "range"], "function", ["None"], ["", "def", "_generative_time_order_positive_items", "(", "user_pos_dict", ",", "high_order", "=", "1", ")", ":", "\n", "    ", "if", "high_order", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"'high_order' must be a positive integer.\"", ")", "\n", "\n", "", "if", "not", "isinstance", "(", "user_pos_dict", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"'user_pos_dict' must be a dict.\"", ")", "\n", "\n", "", "if", "not", "user_pos_dict", ":", "\n", "        ", "raise", "ValueError", "(", "\"'user_pos_dict' cannot be empty.\"", ")", "\n", "\n", "", "users_list", ",", "recent_items_list", ",", "pos_items_list", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "user_pos_len", "=", "[", "]", "\n", "for", "user", ",", "seq_items", "in", "user_pos_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "len", "(", "seq_items", ")", "-", "high_order", "<=", "0", ":", "\n", "            ", "continue", "\n", "", "num_instance", "=", "len", "(", "seq_items", ")", "-", "high_order", "\n", "user_pos_len", ".", "append", "(", "[", "user", ",", "num_instance", "]", ")", "\n", "users_list", ".", "extend", "(", "[", "user", "]", "*", "num_instance", ")", "\n", "if", "high_order", "==", "1", ":", "\n", "            ", "r_items", "=", "[", "seq_items", "[", "idx", "]", "for", "idx", "in", "range", "(", "num_instance", ")", "]", "\n", "", "else", ":", "\n", "            ", "r_items", "=", "[", "seq_items", "[", "idx", ":", "]", "[", ":", "high_order", "]", "for", "idx", "in", "range", "(", "num_instance", ")", "]", "\n", "\n", "", "recent_items_list", ".", "extend", "(", "r_items", ")", "\n", "pos_items_list", ".", "extend", "(", "seq_items", "[", "high_order", ":", "]", ")", "\n", "\n", "", "return", "user_pos_len", ",", "users_list", ",", "recent_items_list", ",", "pos_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items": [[72, 92], ["list", "util.DataIterator", "ValueError", "zip", "util.cython.random_choice.batch_randint_choice", "zip", "isinstance", "neg_items_list.extend", "neg_items_list.append", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.batch_randint_choice"], ["", "def", "_sampling_negative_items", "(", "user_pos_len", ",", "neg_num", ",", "item_num", ",", "user_pos_dict", ")", ":", "\n", "    ", "if", "neg_num", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "users", ",", "n_pos", "=", "list", "(", "zip", "(", "*", "user_pos_len", ")", ")", "\n", "users_n_pos", "=", "DataIterator", "(", "users", ",", "n_pos", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "neg_items_list", "=", "[", "]", "\n", "for", "bat_user", ",", "batch_num", "in", "users_n_pos", ":", "\n", "        ", "batch_num", "=", "[", "num", "*", "neg_num", "for", "num", "in", "batch_num", "]", "\n", "exclusion", "=", "[", "user_pos_dict", "[", "u", "]", "for", "u", "in", "bat_user", "]", "\n", "bat_neg_items", "=", "batch_randint_choice", "(", "item_num", ",", "batch_num", ",", "replace", "=", "True", ",", "exclusion", "=", "exclusion", ")", "\n", "\n", "for", "user", ",", "neg_items", ",", "n_item", "in", "zip", "(", "bat_user", ",", "bat_neg_items", ",", "batch_num", ")", ":", "\n", "            ", "if", "isinstance", "(", "neg_items", ",", "Iterable", ")", ":", "\n", "                ", "if", "neg_num", ">", "1", ":", "\n", "                    ", "neg_items", "=", "np", ".", "reshape", "(", "neg_items", ",", "newshape", "=", "[", "-", "1", ",", "neg_num", "]", ")", "\n", "", "neg_items_list", ".", "extend", "(", "neg_items", ")", "\n", "", "else", ":", "\n", "                ", "neg_items_list", ".", "append", "(", "neg_items", ")", "\n", "", "", "", "return", "neg_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._sampling_negative_items_with_p": [[94, 114], ["list", "util.DataIterator", "ValueError", "zip", "util.tool.batch_randint_choice", "zip", "isinstance", "neg_items_list.extend", "neg_items_list.append", "numpy.reshape"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.batch_randint_choice"], ["", "def", "_sampling_negative_items_with_p", "(", "user_pos_len", ",", "neg_num", ",", "item_num", ",", "user_pos_dict", ",", "p", "=", "None", ")", ":", "\n", "    ", "if", "neg_num", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"'neg_num' must be a positive integer.\"", ")", "\n", "\n", "", "users", ",", "n_pos", "=", "list", "(", "zip", "(", "*", "user_pos_len", ")", ")", "\n", "users_n_pos", "=", "DataIterator", "(", "users", ",", "n_pos", ",", "batch_size", "=", "1024", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ")", "\n", "neg_items_list", "=", "[", "]", "\n", "for", "bat_user", ",", "batch_num", "in", "users_n_pos", ":", "\n", "        ", "batch_num", "=", "[", "num", "*", "neg_num", "for", "num", "in", "batch_num", "]", "\n", "exclusion", "=", "[", "user_pos_dict", "[", "u", "]", "for", "u", "in", "bat_user", "]", "\n", "bat_neg_items", "=", "tool", ".", "batch_randint_choice", "(", "item_num", ",", "batch_num", ",", "replace", "=", "True", ",", "exclusion", "=", "exclusion", ",", "p", "=", "p", ")", "\n", "\n", "for", "user", ",", "neg_items", ",", "n_item", "in", "zip", "(", "bat_user", ",", "bat_neg_items", ",", "batch_num", ")", ":", "\n", "            ", "if", "isinstance", "(", "neg_items", ",", "Iterable", ")", ":", "\n", "                ", "if", "neg_num", ">", "1", ":", "\n", "                    ", "neg_items", "=", "np", ".", "reshape", "(", "neg_items", ",", "newshape", "=", "[", "-", "1", ",", "neg_num", "]", ")", "\n", "", "neg_items_list", ".", "extend", "(", "neg_items", ")", "\n", "", "else", ":", "\n", "                ", "neg_items_list", ".", "append", "(", "neg_items", ")", "\n", "", "", "", "return", "neg_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._pairwise_sampling_v2": [[116, 150], ["numpy.array", "util.cython.random_choice.randint_choice", "collections.defaultdict", "dict", "dict", "collections.defaultdict.items", "isinstance", "TypeError", "ValueError", "list", "len", "user_pos_sample[].pop", "user_neg_sample[].pop", "user_pos_dict.keys", "util.cython.random_choice.randint_choice", "list", "util.cython.random_choice.randint_choice", "len", "isinstance", "isinstance", "print"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["", "def", "_pairwise_sampling_v2", "(", "user_pos_dict", ",", "num_samples", ",", "num_item", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "user_pos_dict", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"'user_pos_dict' must be a dict.\"", ")", "\n", "\n", "", "if", "not", "user_pos_dict", ":", "\n", "        ", "raise", "ValueError", "(", "\"'user_pos_dict' cannot be empty.\"", ")", "\n", "\n", "", "user_arr", "=", "np", ".", "array", "(", "list", "(", "user_pos_dict", ".", "keys", "(", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "user_idx", "=", "randint_choice", "(", "len", "(", "user_arr", ")", ",", "size", "=", "num_samples", ",", "replace", "=", "True", ")", "\n", "users_list", "=", "user_arr", "[", "user_idx", "]", "\n", "\n", "# count the number of each user, i.e., the numbers of positive and negative items for each user", "\n", "user_pos_len", "=", "defaultdict", "(", "int", ")", "\n", "for", "u", "in", "users_list", ":", "\n", "        ", "user_pos_len", "[", "u", "]", "+=", "1", "\n", "\n", "", "user_pos_sample", "=", "dict", "(", ")", "\n", "user_neg_sample", "=", "dict", "(", ")", "\n", "for", "user", ",", "pos_len", "in", "user_pos_len", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pos_items", "=", "user_pos_dict", "[", "user", "]", "\n", "pos_idx", "=", "randint_choice", "(", "len", "(", "pos_items", ")", ",", "size", "=", "pos_len", ",", "replace", "=", "True", ")", "\n", "pos_idx", "=", "pos_idx", "if", "isinstance", "(", "pos_idx", ",", "Iterable", ")", "else", "[", "pos_idx", "]", "\n", "user_pos_sample", "[", "user", "]", "=", "list", "(", "pos_items", "[", "pos_idx", "]", ")", "\n", "\n", "neg_items", "=", "randint_choice", "(", "num_item", ",", "size", "=", "pos_len", ",", "replace", "=", "True", ",", "exclusion", "=", "user_pos_dict", "[", "user", "]", ")", "\n", "user_neg_sample", "[", "user", "]", "=", "neg_items", "if", "isinstance", "(", "neg_items", ",", "Iterable", ")", "else", "[", "neg_items", "]", "\n", "", "except", ":", "\n", "            ", "print", "(", "'error'", ")", "\n", "\n", "", "", "pos_items_list", "=", "[", "user_pos_sample", "[", "user", "]", ".", "pop", "(", ")", "for", "user", "in", "users_list", "]", "\n", "neg_items_list", "=", "[", "user_neg_sample", "[", "user", "]", ".", "pop", "(", ")", "for", "user", "in", "users_list", "]", "\n", "\n", "return", "users_list", ",", "pos_items_list", ",", "neg_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.sampler._pairwise_sampling_v3": [[152, 197], ["numpy.array", "util.cython.random_choice.randint_choice", "collections.defaultdict", "dict", "dict", "collections.defaultdict.items", "isinstance", "TypeError", "ValueError", "ValueError", "list", "len", "user_pos_sample[].pop", "user_pos_dict.keys", "util.cython.random_choice.randint_choice", "list", "util.cython.random_choice.randint_choice", "neg_items_list.append", "numpy.delete", "user_neg_sample[].pop", "len", "isinstance", "numpy.reshape", "isinstance", "print"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice", "home.repos.pwc.inspect_result.wujcan_SGL.util.tool.randint_choice"], ["", "def", "_pairwise_sampling_v3", "(", "user_pos_dict", ",", "num_samples", ",", "num_item", ",", "num_neg", ")", ":", "\n", "    ", "if", "not", "isinstance", "(", "user_pos_dict", ",", "dict", ")", ":", "\n", "        ", "raise", "TypeError", "(", "\"'user_pos_dict' must be a dict.\"", ")", "\n", "\n", "", "if", "not", "user_pos_dict", ":", "\n", "        ", "raise", "ValueError", "(", "\"'user_pos_dict' cannot be empty.\"", ")", "\n", "\n", "", "if", "num_neg", "<=", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"'num_neg' must be a positive integer.\"", ")", "\n", "\n", "", "user_arr", "=", "np", ".", "array", "(", "list", "(", "user_pos_dict", ".", "keys", "(", ")", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "user_idx", "=", "randint_choice", "(", "len", "(", "user_arr", ")", ",", "size", "=", "num_samples", ",", "replace", "=", "True", ")", "\n", "users_list", "=", "user_arr", "[", "user_idx", "]", "\n", "\n", "# count the number of each user, i.e., the numbers of positive items for each user", "\n", "user_pos_len", "=", "defaultdict", "(", "int", ")", "\n", "for", "u", "in", "users_list", ":", "\n", "        ", "user_pos_len", "[", "u", "]", "+=", "1", "\n", "\n", "", "user_pos_sample", "=", "dict", "(", ")", "\n", "user_neg_sample", "=", "dict", "(", ")", "\n", "neg_items_list", "=", "[", "]", "\n", "for", "user", ",", "pos_len", "in", "user_pos_len", ".", "items", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "pos_items", "=", "user_pos_dict", "[", "user", "]", "\n", "pos_idx", "=", "randint_choice", "(", "len", "(", "pos_items", ")", ",", "size", "=", "pos_len", ",", "replace", "=", "True", ")", "\n", "pos_idx", "=", "pos_idx", "if", "isinstance", "(", "pos_idx", ",", "Iterable", ")", "else", "[", "pos_idx", "]", "\n", "user_pos_sample", "[", "user", "]", "=", "list", "(", "pos_items", "[", "pos_idx", "]", ")", "\n", "\n", "neg_items", "=", "randint_choice", "(", "num_item", ",", "size", "=", "pos_len", "*", "num_neg", ",", "replace", "=", "True", ",", "exclusion", "=", "user_pos_dict", "[", "user", "]", ")", "\n", "if", "num_neg", ">", "1", ":", "\n", "                ", "neg_items", "=", "np", ".", "reshape", "(", "neg_items", ",", "newshape", "=", "[", "-", "1", ",", "num_neg", "]", ")", "\n", "", "user_neg_sample", "[", "user", "]", "=", "neg_items", "if", "isinstance", "(", "neg_items", ",", "Iterable", ")", "else", "[", "neg_items", "]", "\n", "", "except", ":", "\n", "            ", "print", "(", "'error'", ")", "\n", "\n", "", "", "pos_items_list", "=", "[", "user_pos_sample", "[", "user", "]", ".", "pop", "(", ")", "for", "user", "in", "users_list", "]", "\n", "if", "num_neg", ">", "1", ":", "\n", "        ", "for", "user", "in", "users_list", ":", "\n", "            ", "neg_items_list", ".", "append", "(", "user_neg_sample", "[", "user", "]", "[", "0", "]", ")", "\n", "user_neg_sample", "[", "user", "]", "=", "np", ".", "delete", "(", "user_neg_sample", "[", "user", "]", ",", "0", ",", "axis", "=", "0", ")", "\n", "", "", "else", ":", "\n", "        ", "neg_items_list", "=", "[", "user_neg_sample", "[", "user", "]", ".", "pop", "(", ")", "for", "user", "in", "users_list", "]", "\n", "\n", "", "return", "users_list", ",", "pos_items_list", ",", "neg_items_list", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.check_md5": [[10, 18], ["os.path.isfile", "FileNotFoundError", "open", "fin.read", "hashlib.md5().hexdigest", "hashlib.md5"], "function", ["None"], ["def", "check_md5", "(", "file_name", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "file_name", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"There is not file named '%s'!\"", "%", "file_name", ")", "\n", "", "with", "open", "(", "file_name", ",", "\"rb\"", ")", "as", "fin", ":", "\n", "        ", "bytes", "=", "fin", ".", "read", "(", ")", "# read file as bytes", "\n", "readable_hash", "=", "hashlib", ".", "md5", "(", "bytes", ")", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "readable_hash", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.load_data": [[20, 23], ["pandas.read_csv"], "function", ["None"], ["", "def", "load_data", "(", "filename", ",", "sep", ",", "columns", ")", ":", "\n", "    ", "data", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "sep", ",", "header", "=", "None", ",", "names", "=", "columns", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.filter_data": [[25, 37], ["data.dropna", "data[].value_counts", "data[].map", "data[].value_counts", "data[].map"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map"], ["", "def", "filter_data", "(", "data", ",", "user_min", "=", "None", ",", "item_min", "=", "None", ")", ":", "\n", "    ", "data", ".", "dropna", "(", "how", "=", "\"any\"", ",", "inplace", "=", "True", ")", "\n", "if", "item_min", "is", "not", "None", "and", "item_min", ">", "0", ":", "\n", "        ", "item_count", "=", "data", "[", "\"item\"", "]", ".", "value_counts", "(", "sort", "=", "False", ")", "\n", "filtered_idx", "=", "data", "[", "\"item\"", "]", ".", "map", "(", "lambda", "x", ":", "item_count", "[", "x", "]", ">=", "item_min", ")", "\n", "data", "=", "data", "[", "filtered_idx", "]", "\n", "\n", "", "if", "user_min", "is", "not", "None", "and", "user_min", ">", "0", ":", "\n", "        ", "user_count", "=", "data", "[", "\"user\"", "]", ".", "value_counts", "(", "sort", "=", "False", ")", "\n", "filtered_idx", "=", "data", "[", "\"user\"", "]", ".", "map", "(", "lambda", "x", ":", "user_count", "[", "x", "]", ">=", "user_min", ")", "\n", "data", "=", "data", "[", "filtered_idx", "]", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.remap_id": [[39, 49], ["data[].unique", "pandas.Series", "data[].map", "data[].unique", "pandas.Series", "data[].map", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map", "home.repos.pwc.inspect_result.wujcan_SGL.python.metric.map"], ["", "def", "remap_id", "(", "data", ")", ":", "\n", "    ", "unique_user", "=", "data", "[", "\"user\"", "]", ".", "unique", "(", ")", "\n", "user2id", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_user", ")", ")", ",", "index", "=", "unique_user", ")", "\n", "data", "[", "\"user\"", "]", "=", "data", "[", "\"user\"", "]", ".", "map", "(", "user2id", ")", "\n", "\n", "unique_item", "=", "data", "[", "\"item\"", "]", ".", "unique", "(", ")", "\n", "item2id", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_item", ")", ")", ",", "index", "=", "unique_item", ")", "\n", "data", "[", "\"item\"", "]", "=", "data", "[", "\"item\"", "]", ".", "map", "(", "item2id", ")", "\n", "\n", "return", "data", ",", "user2id", ",", "item2id", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.get_map_id": [[51, 58], ["data[].unique", "pandas.Series", "data[].unique", "pandas.Series", "pd.Series.to_dict", "pd.Series.to_dict", "range", "range", "len", "len"], "function", ["None"], ["", "def", "get_map_id", "(", "data", ")", ":", "\n", "    ", "unique_user", "=", "data", "[", "\"user\"", "]", ".", "unique", "(", ")", "\n", "user2id", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_user", ")", ")", ",", "index", "=", "unique_user", ")", "\n", "\n", "unique_item", "=", "data", "[", "\"item\"", "]", ".", "unique", "(", ")", "\n", "item2id", "=", "pd", ".", "Series", "(", "data", "=", "range", "(", "len", "(", "unique_item", ")", ")", ",", "index", "=", "unique_item", ")", "\n", "return", "user2id", ".", "to_dict", "(", ")", ",", "item2id", ".", "to_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.split_by_ratio": [[60, 81], ["data.groupby", "pandas.concat", "pandas.concat", "data.sort_values", "data.sort_values", "len", "math.ceil", "pd.concat.append", "pd.concat.append", "u_data.sample.sample"], "function", ["None"], ["", "def", "split_by_ratio", "(", "data", ",", "ratio", "=", "0.8", ",", "by_time", "=", "True", ")", ":", "\n", "    ", "if", "by_time", ":", "\n", "        ", "data", ".", "sort_values", "(", "by", "=", "[", "\"user\"", ",", "\"time\"", "]", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "data", ".", "sort_values", "(", "by", "=", "[", "\"user\"", ",", "\"item\"", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "", "first_section", "=", "[", "]", "\n", "second_section", "=", "[", "]", "\n", "user_grouped", "=", "data", ".", "groupby", "(", "by", "=", "[", "\"user\"", "]", ")", "\n", "for", "user", ",", "u_data", "in", "user_grouped", ":", "\n", "        ", "u_data_len", "=", "len", "(", "u_data", ")", "\n", "if", "not", "by_time", ":", "\n", "            ", "u_data", "=", "u_data", ".", "sample", "(", "frac", "=", "1", ")", "\n", "", "idx", "=", "math", ".", "ceil", "(", "ratio", "*", "u_data_len", ")", "\n", "first_section", ".", "append", "(", "u_data", ".", "iloc", "[", ":", "idx", "]", ")", "\n", "second_section", ".", "append", "(", "u_data", ".", "iloc", "[", "idx", ":", "]", ")", "\n", "\n", "", "first_section", "=", "pd", ".", "concat", "(", "first_section", ",", "ignore_index", "=", "True", ")", "\n", "second_section", "=", "pd", ".", "concat", "(", "second_section", ",", "ignore_index", "=", "True", ")", "\n", "\n", "return", "first_section", ",", "second_section", "\n", "\n"]], "home.repos.pwc.inspect_result.wujcan_SGL.data.utils.split_by_loo": [[83, 106], ["data.groupby", "pandas.concat", "pandas.concat", "data.sort_values", "data.sort_values", "len", "pd.concat.append", "pd.concat.append", "pd.concat.append", "u_data.sample.sample"], "function", ["None"], ["", "def", "split_by_loo", "(", "data", ",", "by_time", "=", "True", ")", ":", "\n", "    ", "if", "by_time", ":", "\n", "        ", "data", ".", "sort_values", "(", "by", "=", "[", "\"user\"", ",", "\"time\"", "]", ",", "inplace", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "data", ".", "sort_values", "(", "by", "=", "[", "\"user\"", ",", "\"item\"", "]", ",", "inplace", "=", "True", ")", "\n", "\n", "", "first_section", "=", "[", "]", "\n", "second_section", "=", "[", "]", "\n", "user_grouped", "=", "data", ".", "groupby", "(", "by", "=", "[", "\"user\"", "]", ")", "\n", "for", "user", ",", "u_data", "in", "user_grouped", ":", "\n", "        ", "u_data_len", "=", "len", "(", "u_data", ")", "\n", "if", "u_data_len", "<=", "3", ":", "\n", "            ", "first_section", ".", "append", "(", "u_data", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "by_time", ":", "\n", "                ", "u_data", "=", "u_data", ".", "sample", "(", "frac", "=", "1", ")", "\n", "", "first_section", ".", "append", "(", "u_data", ".", "iloc", "[", ":", "-", "1", "]", ")", "\n", "second_section", ".", "append", "(", "u_data", ".", "iloc", "[", "-", "1", ":", "]", ")", "\n", "\n", "", "", "first_section", "=", "pd", ".", "concat", "(", "first_section", ",", "ignore_index", "=", "True", ")", "\n", "second_section", "=", "pd", ".", "concat", "(", "second_section", ",", "ignore_index", "=", "True", ")", "\n", "\n", "return", "first_section", ",", "second_section", "\n", "", ""]]}