{"home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.mutual_nn_matcher": [[5, 14], ["torch.arange", "torch.stack().t", "torch.stack().t.data.cpu().numpy", "descriptors2.t", "torch.max", "torch.max", "torch.stack", "torch.stack().t.data.cpu"], "function", ["None"], ["def", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "nn12", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "nn21", "=", "torch", ".", "max", "(", "sim", ",", "dim", "=", "0", ")", "[", "1", "]", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "ids1", "==", "nn21", "[", "nn12", "]", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ")", ".", "t", "(", ")", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.ratio_matcher": [[17, 45], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.8", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.mutual_nn_ratio_matcher": [[48, 76], ["torch.topk", "torch.sqrt", "torch.topk", "torch.sqrt", "torch.arange", "torch.min", "torch.stack", "torch.stack.data.cpu().numpy", "descriptors2.t", "sim.t", "torch.min", "torch.stack.data.cpu"], "function", ["None"], ["", "def", "mutual_nn_ratio_matcher", "(", "descriptors1", ",", "descriptors2", ",", "ratio", "=", "0.8", ")", ":", "\n", "    ", "device", "=", "descriptors1", ".", "device", "\n", "sim", "=", "descriptors1", "@", "descriptors2", ".", "t", "(", ")", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios12", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN and match similarity.", "\n", "nn12", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Retrieve top 2 nearest neighbors 1->2.", "\n", "nns_sim", ",", "nns", "=", "torch", ".", "topk", "(", "sim", ".", "t", "(", ")", ",", "2", ",", "dim", "=", "1", ")", "\n", "nns_dist", "=", "torch", ".", "sqrt", "(", "2", "-", "2", "*", "nns_sim", ")", "\n", "# Compute Lowe's ratio.", "\n", "ratios21", "=", "nns_dist", "[", ":", ",", "0", "]", "/", "(", "nns_dist", "[", ":", ",", "1", "]", "+", "1e-8", ")", "\n", "# Save first NN.", "\n", "nn21", "=", "nns", "[", ":", ",", "0", "]", "\n", "\n", "# Mutual NN + symmetric ratio test.", "\n", "ids1", "=", "torch", ".", "arange", "(", "0", ",", "sim", ".", "shape", "[", "0", "]", ",", "device", "=", "device", ")", "\n", "mask", "=", "torch", ".", "min", "(", "ids1", "==", "nn21", "[", "nn12", "]", ",", "torch", ".", "min", "(", "ratios12", "<=", "ratio", ",", "ratios21", "[", "nn12", "]", "<=", "ratio", ")", ")", "\n", "\n", "# Final matches.", "\n", "matches", "=", "torch", ".", "stack", "(", "[", "ids1", "[", "mask", "]", ",", "nn12", "[", "mask", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "return", "matches", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.array_to_blob": [[28, 33], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.recover_database_images_and_ids": [[34, 52], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["None"], ["", "", "def", "recover_database_images_and_ids", "(", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cameras", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id, camera_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "cameras", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", ",", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.preprocess_reference_model": [[54, 102], ["print", "int", "open", "f.readlines", "intrinsics.strip().split.strip().split", "camera.Camera", "camera.Camera.set_intrinsics", "open", "f.readlines", "extrinsics.strip().split.strip().split", "numpy.array", "numpy.array", "utils.camera_center_to_translation", "camera_parameters[].set_pose", "os.path.join", "float", "os.path.join", "float", "intrinsics.strip().split.strip", "extrinsics.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_intrinsics", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.utils.camera_center_to_translation", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_pose"], ["", "def", "preprocess_reference_model", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Preprocessing the reference model...'", ")", "\n", "\n", "# Recover intrinsics.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'aachen_v_1_1/database_intrinsics_v1_1.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_intrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "camera_parameters", "=", "{", "}", "\n", "\n", "for", "intrinsics", "in", "raw_intrinsics", ":", "\n", "        ", "intrinsics", "=", "intrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "intrinsics", "[", "0", "]", "\n", "\n", "camera_model", "=", "intrinsics", "[", "1", "]", "\n", "\n", "intrinsics", "=", "[", "float", "(", "param", ")", "for", "param", "in", "intrinsics", "[", "2", ":", "]", "]", "\n", "\n", "camera", "=", "Camera", "(", ")", "\n", "camera", ".", "set_intrinsics", "(", "camera_model", "=", "camera_model", ",", "intrinsics", "=", "intrinsics", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", "=", "camera", "\n", "\n", "# Recover poses.", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'aachen_v_1_1/aachen_v_1_1.nvm'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "# Skip the header.", "\n", "", "n_cameras", "=", "int", "(", "raw_extrinsics", "[", "2", "]", ")", "\n", "raw_extrinsics", "=", "raw_extrinsics", "[", "3", ":", "3", "+", "n_cameras", "]", "\n", "\n", "for", "extrinsics", "in", "raw_extrinsics", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "0", "]", "\n", "\n", "# Skip the focal length. Skip the distortion and terminal 0.", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", ",", "cx", ",", "cy", ",", "cz", "=", "[", "float", "(", "param", ")", "for", "param", "in", "extrinsics", "[", "2", ":", "-", "2", "]", "]", "\n", "\n", "qvec", "=", "np", ".", "array", "(", "[", "qw", ",", "qx", ",", "qy", ",", "qz", "]", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", ",", "cz", "]", ")", "\n", "\n", "# NVM -> COLMAP.", "\n", "t", "=", "camera_center_to_translation", "(", "c", ",", "qvec", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", ".", "set_pose", "(", "qvec", "=", "qvec", ",", "t", "=", "t", ")", "\n", "\n", "", "return", "camera_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.generate_empty_reconstruction": [[104, 142], ["print", "os.path.exists", "os.mkdir", "open", "open", "open", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "map", "map", "map"], "function", ["None"], ["", "def", "generate_empty_reconstruction", "(", "images", ",", "cameras", ",", "camera_parameters", ",", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Generating the empty reconstruction...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "paths", ".", "empty_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "empty_model_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'cameras.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s\\n'", "%", "(", "\n", "camera_id", ",", "\n", "camera", ".", "camera_model", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "intrinsics", ")", ")", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'images.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s %d %s\\n\\n'", "%", "(", "\n", "image_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "qvec", ")", ")", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "t", ")", ")", ",", "\n", "camera_id", ",", "\n", "image_name", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'points3D.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.import_features": [[144, 171], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "images.items", "os.path.join", "numpy.concatenate().astype", "np.concatenate().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "numpy.load", "images.items", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "", "def", "import_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Import the features.", "\n", "print", "(", "'Importing features...'", ")", "\n", "\n", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "features_path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "keypoints", "=", "np", ".", "load", "(", "features_path", ")", "[", "'keypoints'", "]", "\n", "n_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "\n", "# Keep only x, y coordinates.", "\n", "keypoints", "=", "keypoints", "[", ":", ",", ":", "2", "]", "\n", "# Add placeholder scale, orientation.", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints", ",", "np", ".", "ones", "(", "(", "n_keypoints", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_keypoints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "keypoints_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.image_ids_to_pair_id": [[173, 178], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.match_features": [[180, 219], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "set", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "open", "f.readlines", "raw_pair.strip().split", "os.path.join", "os.path.join", "torch.from_numpy().to", "torch.from_numpy().to", "matchers.mutual_nn_matcher().astype", "reconstruction_pipeline_aachen_v1_1.image_ids_to_pair_id", "set.add", "mutual_nn_matcher().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "raw_pair.strip", "torch.from_numpy", "torch.from_numpy", "matchers.mutual_nn_matcher", "numpy.load", "numpy.load"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.image_ids_to_pair_id", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.mutual_nn_matcher"], ["", "", "def", "match_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Match the features and insert the matches in the database.", "\n", "print", "(", "'Matching...'", ")", "\n", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_pair_ids", "=", "set", "(", ")", "\n", "for", "raw_pair", "in", "tqdm", "(", "raw_pairs", ",", "total", "=", "len", "(", "raw_pairs", ")", ")", ":", "\n", "        ", "image_name1", ",", "image_name2", "=", "raw_pair", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "features_path1", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name1", ",", "args", ".", "method_name", ")", ")", "\n", "features_path2", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name2", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path1", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path2", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "matches", "=", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "            ", "continue", "\n", "", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "matches", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO matches(pair_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "matches_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.geometric_verification": [[221, 228], ["print", "subprocess.call", "os.path.join"], "function", ["None"], ["", "def", "geometric_verification", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Running geometric verification...'", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'matches_importer'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--match_list_path'", ",", "paths", ".", "match_list_path", ",", "\n", "'--match_type'", ",", "'pairs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.reconstruct": [[230, 243], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "reconstruct", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "database_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "database_model_path", ")", "\n", "\n", "# Reconstruct the database model.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'point_triangulator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--image_path'", ",", "paths", ".", "image_path", ",", "\n", "'--input_path'", ",", "paths", ".", "empty_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.register_queries": [[245, 257], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "register_queries", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_model_path", ")", "\n", "\n", "# Register the query images.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'image_registrator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--input_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline_aachen_v1_1.recover_query_poses": [[259, 299], ["print", "subprocess.call", "os.path.join", "set", "open", "open.close", "os.path.isdir", "os.mkdir", "open", "open.readlines", "raw_query.strip().split.strip().split", "set.add", "open", "open.readlines", "extrinsics.strip().split.strip().split", "os.path.join", "os.path.join", "open.write", "raw_query.strip().split.strip", "extrinsics.strip().split.strip", "image_name.split"], "function", ["None"], ["", "def", "recover_query_poses", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Recovering query poses...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_txt_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_txt_model_path", ")", "\n", "\n", "# Convert the model to TXT.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'model_converter'", ",", "\n", "'--input_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_txt_model_path", ",", "\n", "'--output_type'", ",", "'TXT'", "]", ")", "\n", "\n", "# Recover query names.", "\n", "query_image_list_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'queries/night_time_queries_with_intrinsics.txt'", ")", "\n", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "        ", "raw_queries", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "query_names", "=", "set", "(", ")", "\n", "for", "raw_query", "in", "raw_queries", ":", "\n", "        ", "raw_query", "=", "raw_query", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "query_name", "=", "raw_query", "[", "0", "]", "\n", "query_names", ".", "add", "(", "query_name", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "final_txt_model_path", ",", "'images.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "f", "=", "open", "(", "paths", ".", "prediction_path", ",", "'w'", ")", "\n", "\n", "# Skip the header.", "\n", "for", "extrinsics", "in", "raw_extrinsics", "[", "4", ":", ":", "2", "]", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "-", "1", "]", "\n", "\n", "if", "image_name", "in", "query_names", ":", "\n", "# Skip the IMAGE_ID ([0]), CAMERA_ID ([-2]), and IMAGE_NAME ([-1]).", "\n", "            ", "f", ".", "write", "(", "'%s %s\\n'", "%", "(", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "' '", ".", "join", "(", "extrinsics", "[", "1", ":", "-", "2", "]", ")", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.__init__": [[3, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "camera_model", "=", "None", "\n", "self", ".", "intrinsics", "=", "None", "\n", "self", ".", "qvec", "=", "None", "\n", "self", ".", "t", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_intrinsics": [[9, 12], ["None"], "methods", ["None"], ["", "def", "set_intrinsics", "(", "self", ",", "camera_model", ",", "intrinsics", ")", ":", "\n", "        ", "self", ".", "camera_model", "=", "camera_model", "\n", "self", ".", "intrinsics", "=", "intrinsics", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_pose": [[13, 16], ["None"], "methods", ["None"], ["", "def", "set_pose", "(", "self", ",", "qvec", ",", "t", ")", ":", "\n", "        ", "self", ".", "qvec", "=", "qvec", "\n", "self", ".", "t", "=", "t", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.array_to_blob": [[28, 33], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.recover_database_images_and_ids": [[34, 52], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["None"], ["", "", "def", "recover_database_images_and_ids", "(", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cameras", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id, camera_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "cameras", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", ",", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.import_features": [[54, 86], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.execute", "connection.cursor.execute", "sqlite3.connect.commit", "print", "tqdm.tqdm", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "images.items", "os.path.join", "numpy.concatenate().astype", "np.concatenate().astype.tostring", "connection.cursor.execute", "len", "numpy.load", "images.items", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "def", "import_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "cursor", ".", "execute", "(", "\"DELETE FROM keypoints;\"", ")", "\n", "cursor", ".", "execute", "(", "\"DELETE FROM descriptors;\"", ")", "\n", "cursor", ".", "execute", "(", "\"DELETE FROM matches;\"", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Import the features.", "\n", "print", "(", "'Importing features...'", ")", "\n", "\n", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "features_path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "keypoints", "=", "np", ".", "load", "(", "features_path", ")", "[", "'keypoints'", "]", "\n", "n_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "\n", "# Keep only x, y coordinates.", "\n", "keypoints", "=", "keypoints", "[", ":", ",", ":", "2", "]", "\n", "# Add placeholder scale, orientation.", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints", ",", "np", ".", "ones", "(", "(", "n_keypoints", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_keypoints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "keypoints_str", ")", ")", "\n", "\n", "", "connection", ".", "commit", "(", ")", "\n", "# Close the connection to the database.", "\n", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.image_ids_to_pair_id": [[88, 93], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.match_features": [[95, 143], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "set", "tqdm.tqdm", "sqlite3.connect.commit", "connection.cursor.close", "sqlite3.connect.close", "open", "f.readlines", "raw_pair.strip().split", "os.path.join", "os.path.join", "torch.from_numpy().to", "torch.from_numpy().to", "matchers.mutual_nn_matcher().astype", "modify_database_with_custom_features_and_matches.image_ids_to_pair_id", "set.add", "mutual_nn_matcher().astype.tostring", "connection.cursor.execute", "len", "numpy.load", "numpy.load", "raw_pair.strip", "torch.from_numpy", "torch.from_numpy", "matchers.mutual_nn_matcher", "min", "min"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.image_ids_to_pair_id", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.mutual_nn_matcher"], ["", "", "def", "match_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Match the features and insert the matches in the database.", "\n", "print", "(", "'Matching...'", ")", "\n", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_pair_ids", "=", "set", "(", ")", "\n", "for", "raw_pair", "in", "tqdm", "(", "raw_pairs", ",", "total", "=", "len", "(", "raw_pairs", ")", ")", ":", "\n", "        ", "image_name1", ",", "image_name2", "=", "raw_pair", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "features_path1", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name1", ",", "args", ".", "method_name", ")", ")", "\n", "features_path2", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name2", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "#print(features_path1, features_path2)", "\n", "D1", "=", "np", ".", "load", "(", "features_path1", ")", "[", "'descriptors'", "]", ";", "\n", "D2", "=", "np", ".", "load", "(", "features_path2", ")", "[", "'descriptors'", "]", ";", "\n", "D1", "=", "D1", "[", ":", "min", "(", "D1", ".", "shape", "[", "0", "]", ",", "25000", ")", ",", ":", "]", ";", "\n", "D2", "=", "D2", "[", ":", "min", "(", "D2", ".", "shape", "[", "0", "]", ",", "25000", ")", ",", ":", "]", ";", "\n", "#print(D1.shape, D2.shape)", "\n", "\n", "#descriptors1 = torch.from_numpy(np.load(features_path1)['descriptors']).to(device)", "\n", "#descriptors2 = torch.from_numpy(np.load(features_path2)['descriptors']).to(device)", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "D1", ")", ".", "to", "(", "device", ")", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "D2", ")", ".", "to", "(", "device", ")", "\n", "matches", "=", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "            ", "continue", "\n", "", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "matches", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO matches(pair_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "matches_str", ")", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "connection", ".", "commit", "(", ")", "\n", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.modify_database_with_custom_features_and_matches.geometric_verification": [[145, 152], ["print", "subprocess.call", "os.path.join"], "function", ["None"], ["", "def", "geometric_verification", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Running geometric verification...'", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'matches_importer'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--match_list_path'", ",", "paths", ".", "match_list_path", ",", "\n", "'--match_type'", ",", "'pairs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.utils.quaternion_to_rotation_matrix": [[3, 10], ["numpy.array", "numpy.linalg.norm"], "function", ["None"], ["def", "quaternion_to_rotation_matrix", "(", "qvec", ")", ":", "\n", "    ", "qvec", "=", "qvec", "/", "np", ".", "linalg", ".", "norm", "(", "qvec", ")", "\n", "w", ",", "x", ",", "y", ",", "z", "=", "qvec", "\n", "R", "=", "np", ".", "array", "(", "[", "[", "1", "-", "2", "*", "y", "*", "y", "-", "2", "*", "z", "*", "z", ",", "2", "*", "x", "*", "y", "-", "2", "*", "z", "*", "w", ",", "2", "*", "x", "*", "z", "+", "2", "*", "y", "*", "w", "]", ",", "\n", "[", "2", "*", "x", "*", "y", "+", "2", "*", "z", "*", "w", ",", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "z", "*", "z", ",", "2", "*", "y", "*", "z", "-", "2", "*", "x", "*", "w", "]", ",", "\n", "[", "2", "*", "x", "*", "z", "-", "2", "*", "y", "*", "w", ",", "2", "*", "y", "*", "z", "+", "2", "*", "x", "*", "w", ",", "1", "-", "2", "*", "x", "*", "x", "-", "2", "*", "y", "*", "y", "]", "]", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.utils.camera_center_to_translation": [[12, 15], ["utils.quaternion_to_rotation_matrix", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.utils.quaternion_to_rotation_matrix"], ["", "def", "camera_center_to_translation", "(", "c", ",", "qvec", ")", ":", "\n", "    ", "R", "=", "quaternion_to_rotation_matrix", "(", "qvec", ")", "\n", "return", "(", "-", "1", ")", "*", "np", ".", "matmul", "(", "R", ",", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.array_to_blob": [[28, 33], ["array.tostring", "numpy.getbuffer"], "function", ["None"], ["def", "array_to_blob", "(", "array", ")", ":", "\n", "    ", "if", "IS_PYTHON3", ":", "\n", "        ", "return", "array", ".", "tostring", "(", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "getbuffer", "(", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.recover_database_images_and_ids": [[34, 52], ["sqlite3.connect", "sqlite3.connect.cursor", "connection.cursor.execute", "connection.cursor.close", "sqlite3.connect.close"], "function", ["None"], ["", "", "def", "recover_database_images_and_ids", "(", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Recover database images and ids.", "\n", "images", "=", "{", "}", "\n", "cameras", "=", "{", "}", "\n", "cursor", ".", "execute", "(", "\"SELECT name, image_id, camera_id FROM images;\"", ")", "\n", "for", "row", "in", "cursor", ":", "\n", "        ", "images", "[", "row", "[", "0", "]", "]", "=", "row", "[", "1", "]", "\n", "cameras", "[", "row", "[", "0", "]", "]", "=", "row", "[", "2", "]", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n", "return", "images", ",", "cameras", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.preprocess_reference_model": [[54, 102], ["print", "int", "open", "f.readlines", "intrinsics.strip().split.strip().split", "camera.Camera", "camera.Camera.set_intrinsics", "open", "f.readlines", "extrinsics.strip().split.strip().split", "numpy.array", "numpy.array", "utils.camera_center_to_translation", "camera_parameters[].set_pose", "os.path.join", "float", "os.path.join", "float", "intrinsics.strip().split.strip", "extrinsics.strip().split.strip"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_intrinsics", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.utils.camera_center_to_translation", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.camera.Camera.set_pose"], ["", "def", "preprocess_reference_model", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Preprocessing the reference model...'", ")", "\n", "\n", "# Recover intrinsics.", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'database_intrinsics.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_intrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "camera_parameters", "=", "{", "}", "\n", "\n", "for", "intrinsics", "in", "raw_intrinsics", ":", "\n", "        ", "intrinsics", "=", "intrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "intrinsics", "[", "0", "]", "\n", "\n", "camera_model", "=", "intrinsics", "[", "1", "]", "\n", "\n", "intrinsics", "=", "[", "float", "(", "param", ")", "for", "param", "in", "intrinsics", "[", "2", ":", "]", "]", "\n", "\n", "camera", "=", "Camera", "(", ")", "\n", "camera", ".", "set_intrinsics", "(", "camera_model", "=", "camera_model", ",", "intrinsics", "=", "intrinsics", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", "=", "camera", "\n", "\n", "# Recover poses.", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "reference_model_path", ",", "'aachen_cvpr2018_db.nvm'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "# Skip the header.", "\n", "", "n_cameras", "=", "int", "(", "raw_extrinsics", "[", "2", "]", ")", "\n", "raw_extrinsics", "=", "raw_extrinsics", "[", "3", ":", "3", "+", "n_cameras", "]", "\n", "\n", "for", "extrinsics", "in", "raw_extrinsics", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "0", "]", "\n", "\n", "# Skip the focal length. Skip the distortion and terminal 0.", "\n", "qw", ",", "qx", ",", "qy", ",", "qz", ",", "cx", ",", "cy", ",", "cz", "=", "[", "float", "(", "param", ")", "for", "param", "in", "extrinsics", "[", "2", ":", "-", "2", "]", "]", "\n", "\n", "qvec", "=", "np", ".", "array", "(", "[", "qw", ",", "qx", ",", "qy", ",", "qz", "]", ")", "\n", "c", "=", "np", ".", "array", "(", "[", "cx", ",", "cy", ",", "cz", "]", ")", "\n", "\n", "# NVM -> COLMAP.", "\n", "t", "=", "camera_center_to_translation", "(", "c", ",", "qvec", ")", "\n", "\n", "camera_parameters", "[", "image_name", "]", ".", "set_pose", "(", "qvec", "=", "qvec", ",", "t", "=", "t", ")", "\n", "\n", "", "return", "camera_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.generate_empty_reconstruction": [[104, 142], ["print", "os.path.exists", "os.mkdir", "open", "open", "open", "os.path.join", "f.write", "os.path.join", "f.write", "os.path.join", "map", "map", "map"], "function", ["None"], ["", "def", "generate_empty_reconstruction", "(", "images", ",", "cameras", ",", "camera_parameters", ",", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Generating the empty reconstruction...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "paths", ".", "empty_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "empty_model_path", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'cameras.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s\\n'", "%", "(", "\n", "camera_id", ",", "\n", "camera", ".", "camera_model", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "intrinsics", ")", ")", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'images.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "image_name", "in", "images", ":", "\n", "            ", "image_id", "=", "images", "[", "image_name", "]", "\n", "camera_id", "=", "cameras", "[", "image_name", "]", "\n", "try", ":", "\n", "                ", "camera", "=", "camera_parameters", "[", "image_name", "]", "\n", "", "except", ":", "\n", "                ", "continue", "\n", "", "f", ".", "write", "(", "'%d %s %s %d %s\\n\\n'", "%", "(", "\n", "image_id", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "qvec", ")", ")", ",", "\n", "' '", ".", "join", "(", "map", "(", "str", ",", "camera", ".", "t", ")", ")", ",", "\n", "camera_id", ",", "\n", "image_name", "\n", ")", ")", "\n", "\n", "", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "empty_model_path", ",", "'points3D.txt'", ")", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.import_features": [[144, 171], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "images.items", "os.path.join", "numpy.concatenate().astype", "np.concatenate().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "numpy.load", "images.items", "numpy.concatenate", "numpy.ones", "numpy.zeros"], "function", ["None"], ["", "", "def", "import_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Import the features.", "\n", "print", "(", "'Importing features...'", ")", "\n", "\n", "for", "image_name", ",", "image_id", "in", "tqdm", "(", "images", ".", "items", "(", ")", ",", "total", "=", "len", "(", "images", ".", "items", "(", ")", ")", ")", ":", "\n", "        ", "features_path", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "keypoints", "=", "np", ".", "load", "(", "features_path", ")", "[", "'keypoints'", "]", "\n", "n_keypoints", "=", "keypoints", ".", "shape", "[", "0", "]", "\n", "\n", "# Keep only x, y coordinates.", "\n", "keypoints", "=", "keypoints", "[", ":", ",", ":", "2", "]", "\n", "# Add placeholder scale, orientation.", "\n", "keypoints", "=", "np", ".", "concatenate", "(", "[", "keypoints", ",", "np", ".", "ones", "(", "(", "n_keypoints", ",", "1", ")", ")", ",", "np", ".", "zeros", "(", "(", "n_keypoints", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "keypoints_str", "=", "keypoints", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO keypoints(image_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_id", ",", "keypoints", ".", "shape", "[", "0", "]", ",", "keypoints", ".", "shape", "[", "1", "]", ",", "keypoints_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.image_ids_to_pair_id": [[173, 178], ["None"], "function", ["None"], ["", "def", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", ":", "\n", "    ", "if", "image_id1", ">", "image_id2", ":", "\n", "        ", "return", "2147483647", "*", "image_id2", "+", "image_id1", "\n", "", "else", ":", "\n", "        ", "return", "2147483647", "*", "image_id1", "+", "image_id2", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.match_features": [[180, 219], ["sqlite3.connect", "sqlite3.connect.cursor", "print", "set", "tqdm.tqdm", "connection.cursor.close", "sqlite3.connect.close", "open", "f.readlines", "raw_pair.strip().split", "os.path.join", "os.path.join", "torch.from_numpy().to", "torch.from_numpy().to", "matchers.mutual_nn_matcher().astype", "reconstruction_pipeline.image_ids_to_pair_id", "set.add", "mutual_nn_matcher().astype.tostring", "connection.cursor.execute", "sqlite3.connect.commit", "len", "raw_pair.strip", "torch.from_numpy", "torch.from_numpy", "matchers.mutual_nn_matcher", "numpy.load", "numpy.load"], "function", ["home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.image_ids_to_pair_id", "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.matchers.mutual_nn_matcher"], ["", "", "def", "match_features", "(", "images", ",", "paths", ",", "args", ")", ":", "\n", "# Connect to the database.", "\n", "    ", "connection", "=", "sqlite3", ".", "connect", "(", "paths", ".", "database_path", ")", "\n", "cursor", "=", "connection", ".", "cursor", "(", ")", "\n", "\n", "# Match the features and insert the matches in the database.", "\n", "print", "(", "'Matching...'", ")", "\n", "\n", "with", "open", "(", "paths", ".", "match_list_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "raw_pairs", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "image_pair_ids", "=", "set", "(", ")", "\n", "for", "raw_pair", "in", "tqdm", "(", "raw_pairs", ",", "total", "=", "len", "(", "raw_pairs", ")", ")", ":", "\n", "        ", "image_name1", ",", "image_name2", "=", "raw_pair", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "features_path1", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name1", ",", "args", ".", "method_name", ")", ")", "\n", "features_path2", "=", "os", ".", "path", ".", "join", "(", "paths", ".", "image_path", ",", "'%s.%s'", "%", "(", "image_name2", ",", "args", ".", "method_name", ")", ")", "\n", "\n", "descriptors1", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path1", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "descriptors2", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "features_path2", ")", "[", "'descriptors'", "]", ")", ".", "to", "(", "device", ")", "\n", "matches", "=", "mutual_nn_matcher", "(", "descriptors1", ",", "descriptors2", ")", ".", "astype", "(", "np", ".", "uint32", ")", "\n", "\n", "image_id1", ",", "image_id2", "=", "images", "[", "image_name1", "]", ",", "images", "[", "image_name2", "]", "\n", "image_pair_id", "=", "image_ids_to_pair_id", "(", "image_id1", ",", "image_id2", ")", "\n", "if", "image_pair_id", "in", "image_pair_ids", ":", "\n", "            ", "continue", "\n", "", "image_pair_ids", ".", "add", "(", "image_pair_id", ")", "\n", "\n", "if", "image_id1", ">", "image_id2", ":", "\n", "            ", "matches", "=", "matches", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "\n", "", "matches_str", "=", "matches", ".", "tostring", "(", ")", "\n", "cursor", ".", "execute", "(", "\"INSERT INTO matches(pair_id, rows, cols, data) VALUES(?, ?, ?, ?);\"", ",", "\n", "(", "image_pair_id", ",", "matches", ".", "shape", "[", "0", "]", ",", "matches", ".", "shape", "[", "1", "]", ",", "matches_str", ")", ")", "\n", "connection", ".", "commit", "(", ")", "\n", "\n", "# Close the connection to the database.", "\n", "", "cursor", ".", "close", "(", ")", "\n", "connection", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.geometric_verification": [[221, 228], ["print", "subprocess.call", "os.path.join"], "function", ["None"], ["", "def", "geometric_verification", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Running geometric verification...'", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'matches_importer'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--match_list_path'", ",", "paths", ".", "match_list_path", ",", "\n", "'--match_type'", ",", "'pairs'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.reconstruct": [[230, 243], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "reconstruct", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "database_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "database_model_path", ")", "\n", "\n", "# Reconstruct the database model.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'point_triangulator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--image_path'", ",", "paths", ".", "image_path", ",", "\n", "'--input_path'", ",", "paths", ".", "empty_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.register_queries": [[245, 257], ["subprocess.call", "os.path.isdir", "os.mkdir", "os.path.join"], "function", ["None"], ["", "def", "register_queries", "(", "paths", ",", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_model_path", ")", "\n", "\n", "# Register the query images.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'image_registrator'", ",", "\n", "'--database_path'", ",", "paths", ".", "database_path", ",", "\n", "'--input_path'", ",", "paths", ".", "database_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--Mapper.ba_refine_focal_length'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_principal_point'", ",", "'0'", ",", "\n", "'--Mapper.ba_refine_extra_params'", ",", "'0'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tsattler_visuallocalizationbenchmark.local_feature_evaluation.reconstruction_pipeline.recover_query_poses": [[259, 299], ["print", "subprocess.call", "os.path.join", "set", "open", "open.close", "os.path.isdir", "os.mkdir", "open", "open.readlines", "raw_query.strip().split.strip().split", "set.add", "open", "open.readlines", "extrinsics.strip().split.strip().split", "os.path.join", "os.path.join", "open.write", "raw_query.strip().split.strip", "extrinsics.strip().split.strip", "image_name.split"], "function", ["None"], ["", "def", "recover_query_poses", "(", "paths", ",", "args", ")", ":", "\n", "    ", "print", "(", "'Recovering query poses...'", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "paths", ".", "final_txt_model_path", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "paths", ".", "final_txt_model_path", ")", "\n", "\n", "# Convert the model to TXT.", "\n", "", "subprocess", ".", "call", "(", "[", "os", ".", "path", ".", "join", "(", "args", ".", "colmap_path", ",", "'colmap'", ")", ",", "'model_converter'", ",", "\n", "'--input_path'", ",", "paths", ".", "final_model_path", ",", "\n", "'--output_path'", ",", "paths", ".", "final_txt_model_path", ",", "\n", "'--output_type'", ",", "'TXT'", "]", ")", "\n", "\n", "# Recover query names.", "\n", "query_image_list_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dataset_path", ",", "'queries/night_time_queries_with_intrinsics.txt'", ")", "\n", "\n", "with", "open", "(", "query_image_list_path", ")", "as", "f", ":", "\n", "        ", "raw_queries", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "query_names", "=", "set", "(", ")", "\n", "for", "raw_query", "in", "raw_queries", ":", "\n", "        ", "raw_query", "=", "raw_query", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "query_name", "=", "raw_query", "[", "0", "]", "\n", "query_names", ".", "add", "(", "query_name", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "paths", ".", "final_txt_model_path", ",", "'images.txt'", ")", ")", "as", "f", ":", "\n", "        ", "raw_extrinsics", "=", "f", ".", "readlines", "(", ")", "\n", "\n", "", "f", "=", "open", "(", "paths", ".", "prediction_path", ",", "'w'", ")", "\n", "\n", "# Skip the header.", "\n", "for", "extrinsics", "in", "raw_extrinsics", "[", "4", ":", ":", "2", "]", ":", "\n", "        ", "extrinsics", "=", "extrinsics", ".", "strip", "(", "'\\n'", ")", ".", "split", "(", "' '", ")", "\n", "\n", "image_name", "=", "extrinsics", "[", "-", "1", "]", "\n", "\n", "if", "image_name", "in", "query_names", ":", "\n", "# Skip the IMAGE_ID ([0]), CAMERA_ID ([-2]), and IMAGE_NAME ([-1]).", "\n", "            ", "f", ".", "write", "(", "'%s %s\\n'", "%", "(", "image_name", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", ",", "' '", ".", "join", "(", "extrinsics", "[", "1", ":", "-", "2", "]", ")", ")", ")", "\n", "\n", "", "", "f", ".", "close", "(", ")", "\n", "\n"]]}