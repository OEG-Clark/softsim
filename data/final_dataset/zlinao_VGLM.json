{"home.repos.pwc.inspect_result.zlinao_VGLM.None.combine_all.run": [[33, 110], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger", "logging.getLogger.info", "random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.getLogger.info", "tokenizer_class.from_pretrained", "model_class.from_pretrained", "train.add_special_tokens_", "print", "copy.deepcopy", "enumerate", "torch.save", "torch.save", "pprint.pformat", "model_class.from_pretrained.state_dict", "model_class_sub.from_pretrained", "copy.deepcopy", "model_class.from_pretrained.state_dict", "vlm_model.state_dict.update", "model_class.from_pretrained.load_state_dict", "model_class.from_pretrained.state_dict", "tokenizer_class.from_pretrained.encode", "model_class_sub.from_pretrained.state_dict", "torch.cuda.is_available", "torch.cuda.is_available", "name.replace"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["def", "run", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Model type (gpt or gpt2)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous utterances to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_sample\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set to use greedy decoding instead of sampling\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_length\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "\"Maximum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_length\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Minimum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"Seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temperature\"", ",", "type", "=", "int", ",", "default", "=", "0.7", ",", "help", "=", "\"Sampling softmax temperature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_k\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Filter top-k tokens before sampling (<=0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_p\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"Nucleus filtering (top-p) before sampling (<=0.0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__file__", ")", "\n", "logger", ".", "info", "(", "pformat", "(", "args", ")", ")", "\n", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "#path_list = [\"Oct31_20-10-36_black-rack-1_gpt2_mt_0.0005_0_False_epoch8adapter300\", \"Oct28_13-02-05_black-rack-1_gpt2_summarization_0.0005_0_False_epoch10adapter100\", \"Nov18_11-06-15_black-rack-1_gpt2_dialogue_0.001_0_False_epoch3adapter100randomFalse_distillation\", \"Nov03_21-09-43_black-rack-1_gpt2_qa_0.0005_0_False_epoch5adapter300\", \"Oct28_02-34-33_black-rack-1_gpt2_nlg_0.005_0_False_epoch10adapter10\"]", "\n", "\n", "# path_list: Give the list of checkpoints of [mt, summarization, dialogue, qa, nlg] to combine all adapters into VLM", "\n", "path_list", "=", "[", "\"Nov15_10-44-19_black-rack-1_gpt2_mt_0.0005_0_False_epoch8adapter300randomFalse_distillation\"", ",", "\"Nov24_21-54-28_black-rack-1_gpt2_summarization_0.0005_0_False_epoch5adapter100randomFalse_distillation\"", ",", "\"Nov18_11-06-15_black-rack-1_gpt2_dialogue_0.001_0_False_epoch3adapter100randomFalse_distillation\"", ",", "\"Nov03_21-09-43_black-rack-1_gpt2_qa_0.0005_0_False_epoch5adapter300\"", ",", "\"Oct28_02-34-33_black-rack-1_gpt2_nlg_0.005_0_False_epoch10adapter10\"", "]", "\n", "\n", "logger", ".", "info", "(", "\"Get pretrained model and tokenizer\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "model_class", "=", "VLM", "\n", "vlm_model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "bottleneck_map", "=", "BOTTLEBECK_MAP", ")", "\n", "add_special_tokens_", "(", "vlm_model", ",", "tokenizer", ")", "\n", "print", "(", "[", "tokenizer", ".", "encode", "(", "word", ")", "for", "word", "in", "ATTR_TO_SPECIAL_TOKEN", "[", "'additional_special_tokens'", "]", "]", ")", "\n", "vlm_weights", "=", "deepcopy", "(", "vlm_model", ".", "state_dict", "(", ")", ")", "\n", "model_class_sub", "=", "GPT2LMHeadModel", "\n", "bottlenecklist", "=", "[", "300", ",", "100", ",", "100", ",", "300", ",", "10", "]", "\n", "emblist", "=", "[", "[", "50268", ",", "50272", "]", ",", "[", "50272", ",", "50276", "]", ",", "[", "50258", ",", "50263", "]", ",", "[", "50263", ",", "50268", "]", ",", "[", "50276", ",", "50287", "]", "]", "\n", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "path_list", ")", ":", "\n", "        ", "sub_model", "=", "model_class_sub", ".", "from_pretrained", "(", "\"runs/\"", "+", "path", ",", "perturbation_layers", "=", "0", ",", "self_copy", "=", "False", ",", "adapter_bottleneck", "=", "bottlenecklist", "[", "i", "]", ")", "\n", "#print(vlm_model.transformer.wte.weight.data[emblist[i][0]:emblist[i][1],:].shape, sub_model.transformer.wte.weight.data[emblist[i][0]:emblist[i][1],:].shape)", "\n", "vlm_model", ".", "transformer", ".", "wte", ".", "weight", ".", "data", "[", "emblist", "[", "i", "]", "[", "0", "]", ":", "emblist", "[", "i", "]", "[", "1", "]", ",", ":", "]", "=", "sub_model", ".", "transformer", ".", "wte", ".", "weight", ".", "data", "[", "emblist", "[", "i", "]", "[", "0", "]", ":", "emblist", "[", "i", "]", "[", "1", "]", ",", ":", "]", "\n", "#vlm_model.transformer.wte.weight.data = sub_model.transformer.wte.weight.data", "\n", "#assert torch.equal(vlm_model.transformer.wte.weight.data[:50257,:], sub_model.transformer.wte.weight.data[:50257,:])", "\n", "# print(ID2COMMAND[i])", "\n", "#print(vlm_model.transformer.h[10].adapter_block.mixadapter[4].project_up.weight.data)", "\n", "#print(sub_model.transformer.h[10].mlp.c_proj.weight.data)", "\n", "# print([n for n, p in sub_model.named_parameters()])", "\n", "weights", "=", "deepcopy", "(", "sub_model", ".", "state_dict", "(", ")", ")", "\n", "check_str", "=", "\"mixadapter.{}.\"", ".", "format", "(", "i", ")", "\n", "model_dict", "=", "vlm_model", ".", "state_dict", "(", ")", "\n", "# for name in vlm_weights:", "\n", "#     if (\"mixadapter\" not in name) and (\"wte\" not in name):", "\n", "#         try:", "\n", "#             assert torch.equal(vlm_weights[name], weights[name])", "\n", "#         except:", "\n", "#             print(name)", "\n", "#             print(vlm_weights[name])", "\n", "#             print(weights[name])", "\n", "\n", "#print({ name: name.replace(check_str, \"\") for name in vlm_weights if check_str in name })", "\n", "model_dict", ".", "update", "(", "{", "name", ":", "weights", "[", "name", ".", "replace", "(", "check_str", ",", "\"\"", ")", "]", "for", "name", "in", "vlm_weights", "if", "check_str", "in", "name", "}", ")", "\n", "vlm_model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "#print(vlm_model.transformer.h[10].adapter_block.mixadapter[4].project_up.weight.data)", "\n", "# print([n for n, p in sub_model.named_parameters() if \"adapter\" in n])", "\n", "# exit(0)", "\n", "# model.to(args.device)", "\n", "# add_special_tokens_(model, tokenizer)", "\n", "", "torch", ".", "save", "(", "vlm_model", ".", "state_dict", "(", ")", ",", "\"runs/VLM/pytorch_model.bin\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate.top_filtering": [[20, 57], ["min", "float", "float", "logits.dim", "logits.size", "torch.sort", "torch.sort", "torch.cumsum", "torch.cumsum", "sorted_indices_to_remove[].clone", "torch.softmax", "torch.topk", "torch.topk"], "function", ["None"], ["def", "top_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "0.0", ",", "threshold", "=", "-", "float", "(", "'Inf'", ")", ",", "filter_value", "=", "-", "float", "(", "'Inf'", ")", ")", ":", "\n", "    ", "\"\"\" Filter a distribution of logits using top-k, top-p (nucleus) and/or threshold filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k: <=0: no filtering, >0: keep only top k tokens with highest probability.\n            top_p: <=0.0: no filtering, >0.0: keep only a subset S of candidates, where S is the smallest subset\n                whose total probability mass is greater than or equal to the threshold top_p.\n                In practice, we select the highest probability tokens whose cumulative probability mass exceeds\n                the threshold top_p.\n            threshold: a minimal threshold to keep logits\n    \"\"\"", "\n", "assert", "logits", ".", "dim", "(", ")", "==", "1", "# Only work for batch size 1 for now - could update but it would obfuscate a bit the code", "\n", "top_k", "=", "min", "(", "top_k", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "top_k", ">", "0", ":", "\n", "# Remove all tokens with a probability less than the last token in the top-k tokens", "\n", "        ", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "if", "top_p", ">", "0.0", ":", "\n", "# Compute cumulative probabilities of sorted tokens", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "logits", ",", "descending", "=", "True", ")", "\n", "cumulative_probabilities", "=", "torch", ".", "cumsum", "(", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold", "\n", "sorted_indices_to_remove", "=", "cumulative_probabilities", ">", "top_p", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "sorted_indices_to_remove", "[", "...", ",", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "# Back to unsorted indices and set them to -infinity", "\n", "indices_to_remove", "=", "sorted_indices", "[", "sorted_indices_to_remove", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "indices_to_remove", "=", "logits", "<", "threshold", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate.sample_sequence": [[59, 99], ["tokenizer.convert_tokens_to_ids", "range", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "model", "isinstance", "current_output.append", "train.build_input_from_segments_dialqa", "evaluate.top_filtering", "evaluate.top_filtering", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial.item", "torch.multinomial.item", "train.build_input_from_segments_nlg", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.topk", "torch.topk", "torch.multinomial.item", "torch.multinomial.item", "torch.multinomial", "torch.multinomial", "train.build_input_from_segments_mtsm", "F.softmax.max().item", "warnings.warn", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_dialqa", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_nlg", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_mtsm"], ["", "def", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "None", ",", "history", "=", "None", ",", "source", "=", "None", ",", "target", "=", "None", ",", "current_output", "=", "None", ")", ":", "\n", "    ", "special_tokens_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "args", ".", "task", "]", ")", "\n", "if", "current_output", "is", "None", ":", "\n", "        ", "current_output", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "max_length", ")", ":", "\n", "        ", "if", "(", "args", ".", "task", "==", "\"dialogue\"", "or", "args", ".", "task", "==", "\"qa\"", "or", "args", ".", "task", "==", "\"smd\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "personality", ",", "history", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_nlg", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_mtsm", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "input_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"input_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "token_type_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"token_type_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "#print(input_ids)", "\n", "#print(token_type_ids)", "\n", "logits", "=", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ")", "\n", "if", "isinstance", "(", "logits", ",", "tuple", ")", ":", "# for gpt2 and maybe others", "\n", "            ", "logits", "=", "logits", "[", "0", "]", "\n", "", "if", "args", ".", "self_copy", ":", "\n", "            ", "probs", "=", "top_filtering", "(", "logits", "[", "0", ",", "-", "1", ",", ":", "]", ",", "top_k", "=", "1", ",", "top_p", "=", "0", ")", "# generator output probs", "\n", "args", ".", "no_sample", "=", "True", "\n", "", "else", ":", "\n", "            ", "logits", "=", "logits", "[", "0", ",", "-", "1", ",", ":", "]", "/", "args", ".", "temperature", "\n", "logits", "=", "top_filtering", "(", "logits", ",", "top_k", "=", "args", ".", "top_k", ",", "top_p", "=", "args", ".", "top_p", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "prev", "=", "torch", ".", "topk", "(", "probs", ",", "1", ")", "[", "1", "]", "if", "args", ".", "no_sample", "else", "torch", ".", "multinomial", "(", "probs", ",", "1", ")", "\n", "if", "i", "<", "args", ".", "min_length", "and", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "while", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "                ", "if", "probs", ".", "max", "(", ")", ".", "item", "(", ")", "==", "1", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Warning: model generating special token with probability 1.\"", ")", "\n", "break", "# avoid infinitely looping over special token", "\n", "", "prev", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "\n", "", "", "if", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "break", "\n", "", "current_output", ".", "append", "(", "prev", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "current_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate.run": [[100, 308], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger", "logging.getLogger.info", "random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.getLogger.info", "tokenizer_class.from_pretrained", "model_class.from_pretrained", "model_class.from_pretrained.to", "train.add_special_tokens_", "pprint.pformat", "utils.download_pretrained_model", "os.path.exists", "os.makedirs", "utils.get_dataset", "print", "util.eval_metrics.moses_multi_bleu", "print", "utils.get_dataset", "json.dumps", "utils.get_dataset", "util.eval_metrics.moses_multi_bleu", "print", "utils.get_dataset", "utils.get_dataset", "util.eval_metrics.moses_multi_bleu", "util.eval_metrics.rouge", "print", "print", "pair[].copy", "open", "open", "open", "numpy.array", "numpy.array", "open", "open", "open", "pair[].copy", "open", "f.write", "pair[].copy", "numpy.array", "numpy.array", "open", "open", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "open", "open", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "numpy.array", "numpy.array", "open", "open", "torch.cuda.is_available", "torch.cuda.is_available", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "persona_text.append", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "tokenizer_class.from_pretrained.decode", "output_text.append", "len", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "f.write", "f.write", "f.write", "f.write", "torch.no_grad", "torch.no_grad", "evaluate.sample_sequence", "tokenizer_class.from_pretrained.decode", "f.write", "f.write", "f.write", "f.write", "torch.no_grad", "torch.no_grad", "evaluate.sample_sequence", "tokenizer_class.from_pretrained.decode", "f.write", "f.write", "f.write", "f.write", "torch.no_grad", "torch.no_grad", "evaluate.sample_sequence", "tokenizer_class.from_pretrained.decode", "torch.no_grad", "torch.no_grad", "evaluate.sample_sequence", "list", "torch.no_grad", "torch.no_grad", "evaluate.sample_sequence", "tokenizer_class.from_pretrained.decode", "tokenizer_class.from_pretrained.decode", "itertools.chain"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.download_pretrained_model", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "run", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Model type (gpt or gpt2)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous utterances to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_sample\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set to use greedy decoding instead of sampling\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_length\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "\"Maximum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_length\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Minimum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"Seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temperature\"", ",", "type", "=", "int", ",", "default", "=", "0.7", ",", "help", "=", "\"Sampling softmax temperature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_k\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Filter top-k tokens before sampling (<=0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_p\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"Nucleus filtering (top-p) before sampling (<=0.0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__file__", ")", "\n", "logger", ".", "info", "(", "pformat", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "model_checkpoint", "==", "\"\"", ":", "\n", "        ", "args", ".", "model_checkpoint", "=", "download_pretrained_model", "(", ")", "\n", "\n", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "logger", ".", "info", "(", "\"Get pretrained model and tokenizer\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "if", "\"gpt2\"", "==", "args", ".", "model", "else", "OpenAIGPTTokenizer", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "model_class", "=", "GPT2LMHeadModel", "if", "\"gpt2\"", "==", "args", ".", "model", "else", "OpenAIGPTLMHeadModel", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "perturbation_layers", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "adapter_bottleneck", "=", "args", ".", "adapter_bottleneck", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", "\n", "\n", "save_path", "=", "\"results/GPT2_result/\"", "if", "args", ".", "adapter_bottleneck", "==", "0", "else", "\"results/adapter_result/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "\n", "", "if", "args", ".", "task", "==", "\"dialogue\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "persona_text", "=", "[", "]", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"valid\"", "]", ":", "\n", "            ", "persona", "=", "pair", "[", "\"personality\"", "]", ".", "copy", "(", ")", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "persona", ",", "history", "=", "history", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "utterance", "[", "\"candidates\"", "]", "[", "-", "1", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "persona_text", ".", "append", "(", "[", "tokenizer", ".", "decode", "(", "p", ",", "skip_special_tokens", "=", "True", ")", "for", "p", "in", "persona", "]", ")", "\n", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_persona.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "persona_text", ":", "\n", "                ", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "line", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# print(\"Evaluate ENT score\")", "\n", "# ent_ref_arr = []", "\n", "# ent_pred_arr = []", "\n", "# for ref, pred, per in zip(ref_text,output_text,persona_text):", "\n", "#     ent_ref_arr.append(ent_score(ref,per))", "\n", "#     ent_pred_arr.append(ent_score(pred,per))", "\n", "", "", "print", "(", "\"Evaluate BLEU\"", ")", "\n", "\n", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "output_text", ")", ",", "np", ".", "array", "(", "ref_text", ")", ")", "\n", "print", "(", "\"BLEU:{}\"", ".", "format", "(", "BLEU", ")", ")", "\n", "# print(\"ENT REF:{}\".format(np.mean(ent_ref_arr)))", "\n", "# print(\"ENT PRED:{}\".format(np.mean(ent_pred_arr)))", "\n", "\n", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_persona.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "persona_text", ":", "\n", "                ", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "line", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "# qa interact", "\n", "", "", "", "if", "args", ".", "task", "==", "\"qa\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "## load dev_set_with_ids here", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"valid\"", "]", ":", "\n", "            ", "evidence", "=", "pair", "[", "\"document\"", "]", ".", "copy", "(", ")", "\n", "evidence", "=", "[", "evidence", "[", "0", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'document'", "]", "]", "]", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "evidence", ",", "history", "=", "history", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "output_text", ".", "append", "(", "{", "\"id\"", ":", "pair", "[", "'id'", "]", ",", "\"turn_id\"", ":", "utterance", "[", "'turn_id'", "]", ",", "\"answer\"", ":", "out_text", "}", ")", "\n", "\n", "", "", "data", "=", "json", ".", "dumps", "(", "output_text", ")", "\n", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "data", ")", "\n", "\n", "", "", "if", "args", ".", "task", "==", "\"smd\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"test\"", "]", ":", "\n", "            ", "kb", "=", "pair", "[", "\"KB\"", "]", ".", "copy", "(", ")", "\n", "if", "len", "(", "list", "(", "chain", "(", "*", "kb", ")", ")", ")", ">", "800", ":", "\n", "                ", "continue", "\n", "", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "kb", ",", "history", "=", "history", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "utterance", "[", "\"candidates\"", "]", "[", "-", "1", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "", "", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "output_text", ")", ",", "np", ".", "array", "(", "ref_text", ")", ")", "\n", "print", "(", "BLEU", ")", "\n", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# nlg interact", "\n", "", "", "", "if", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"test\"", "]", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "# print(\"input: \")", "\n", "# print([{k: tokenizer.decode(v, skip_special_tokens=True)} for k, v in pair[\"src\"].items()])", "\n", "# print(\"model output: \")", "\n", "# print(out_text)", "\n", "# print(\"ref: \")", "\n", "# print(tokenizer.decode(pair[\"tgt\"], skip_special_tokens=True))", "\n", "# print(\"======================================\")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "pair", "[", "\"tgt\"", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "# BLEU = moses_multi_bleu(np.array(output_text),np.array(ref_text))", "\n", "# ROUGE = rouge(output_text, ref_text)", "\n", "# print(\"BLEU:{}, ROUGE:{}\".format(BLEU, ROUGE))", "\n", "", "with", "open", "(", "\"results/nlg_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/nlg_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "", "if", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"test\"", "]", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'src'", "]", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "#[:MAXLEN_MAP[args.task]['tgt']]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "# print(\"input: \")", "\n", "# print(tokenizer.decode(pair[\"src\"], skip_special_tokens=True))", "\n", "# print(\"model output: \")", "\n", "# print(out_text)", "\n", "# print(\"ref: \")", "\n", "# print(tokenizer.decode(pair[\"tgt\"], skip_special_tokens=True))", "\n", "# print(\"======================================\")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "pair", "[", "\"tgt\"", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "\n", "", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "output_text", ")", ",", "np", ".", "array", "(", "ref_text", ")", ")", "\n", "r_1", ",", "r_2", ",", "r_l", ",", "r_m", "=", "rouge", "(", "output_text", ",", "ref_text", ")", "\n", "print", "(", "\"BLEU:{}\"", ".", "format", "(", "BLEU", ")", ")", "\n", "print", "(", "\"ROUGE_1:{}, ROUGE_2:{}, ROUGE_L:{}, ROUGE_mean:{}\"", ".", "format", "(", "r_1", ",", "r_2", ",", "r_l", ",", "r_m", ")", ")", "\n", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "save_path", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.sentence_distiller.top_filtering": [[20, 57], ["min", "float", "float", "logits.dim", "logits.size", "torch.sort", "torch.sort", "torch.cumsum", "torch.cumsum", "sorted_indices_to_remove[].clone", "torch.softmax", "torch.topk", "torch.topk"], "function", ["None"], ["def", "top_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "0.0", ",", "threshold", "=", "-", "float", "(", "'Inf'", ")", ",", "filter_value", "=", "-", "float", "(", "'Inf'", ")", ")", ":", "\n", "    ", "\"\"\" Filter a distribution of logits using top-k, top-p (nucleus) and/or threshold filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k: <=0: no filtering, >0: keep only top k tokens with highest probability.\n            top_p: <=0.0: no filtering, >0.0: keep only a subset S of candidates, where S is the smallest subset\n                whose total probability mass is greater than or equal to the threshold top_p.\n                In practice, we select the highest probability tokens whose cumulative probability mass exceeds\n                the threshold top_p.\n            threshold: a minimal threshold to keep logits\n    \"\"\"", "\n", "assert", "logits", ".", "dim", "(", ")", "==", "1", "# Only work for batch size 1 for now - could update but it would obfuscate a bit the code", "\n", "top_k", "=", "min", "(", "top_k", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "top_k", ">", "0", ":", "\n", "# Remove all tokens with a probability less than the last token in the top-k tokens", "\n", "        ", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "if", "top_p", ">", "0.0", ":", "\n", "# Compute cumulative probabilities of sorted tokens", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "logits", ",", "descending", "=", "True", ")", "\n", "cumulative_probabilities", "=", "torch", ".", "cumsum", "(", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold", "\n", "sorted_indices_to_remove", "=", "cumulative_probabilities", ">", "top_p", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "sorted_indices_to_remove", "[", "...", ",", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "# Back to unsorted indices and set them to -infinity", "\n", "indices_to_remove", "=", "sorted_indices", "[", "sorted_indices_to_remove", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "indices_to_remove", "=", "logits", "<", "threshold", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.sentence_distiller.sample_sequence": [[59, 97], ["tokenizer.convert_tokens_to_ids", "range", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "model", "isinstance", "current_output.append", "train.build_input_from_segments_dialqa", "sentence_distiller.top_filtering", "sentence_distiller.top_filtering", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial.item", "torch.multinomial.item", "train.build_input_from_segments_nlg", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.topk", "torch.topk", "torch.multinomial.item", "torch.multinomial.item", "torch.multinomial", "torch.multinomial", "train.build_input_from_segments_mtsm", "F.softmax.max().item", "warnings.warn", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_dialqa", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_nlg", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_mtsm"], ["", "def", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "None", ",", "history", "=", "None", ",", "source", "=", "None", ",", "target", "=", "None", ",", "current_output", "=", "None", ")", ":", "\n", "    ", "special_tokens_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "args", ".", "task", "]", ")", "\n", "if", "current_output", "is", "None", ":", "\n", "        ", "current_output", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "max_length", ")", ":", "\n", "        ", "if", "(", "args", ".", "task", "==", "\"dialogue\"", "or", "args", ".", "task", "==", "\"qa\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "personality", ",", "history", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_nlg", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_mtsm", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "input_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"input_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "token_type_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"token_type_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "logits", "=", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ")", "\n", "if", "isinstance", "(", "logits", ",", "tuple", ")", ":", "# for gpt2 and maybe others", "\n", "            ", "logits", "=", "logits", "[", "0", "]", "\n", "", "if", "args", ".", "self_copy", ":", "\n", "            ", "probs", "=", "top_filtering", "(", "logits", "[", "0", ",", "-", "1", ",", ":", "]", ",", "top_k", "=", "1", ",", "top_p", "=", "0", ")", "# generator output probs", "\n", "args", ".", "no_sample", "=", "True", "\n", "", "else", ":", "\n", "            ", "logits", "=", "logits", "[", "0", ",", "-", "1", ",", ":", "]", "/", "args", ".", "temperature", "\n", "logits", "=", "top_filtering", "(", "logits", ",", "top_k", "=", "args", ".", "top_k", ",", "top_p", "=", "args", ".", "top_p", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "prev", "=", "torch", ".", "topk", "(", "probs", ",", "1", ")", "[", "1", "]", "if", "args", ".", "no_sample", "else", "torch", ".", "multinomial", "(", "probs", ",", "1", ")", "\n", "if", "i", "<", "args", ".", "min_length", "and", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "while", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "                ", "if", "probs", ".", "max", "(", ")", ".", "item", "(", ")", "==", "1", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Warning: model generating special token with probability 1.\"", ")", "\n", "break", "# avoid infinitely looping over special token", "\n", "", "prev", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "\n", "", "", "if", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "break", "\n", "", "current_output", ".", "append", "(", "prev", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "current_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.sentence_distiller.run": [[98, 194], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger", "logging.getLogger.info", "random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.getLogger.info", "tokenizer_class.from_pretrained", "model_class.from_pretrained", "model_class.from_pretrained.to", "train.add_special_tokens_", "pprint.pformat", "utils.download_pretrained_model", "utils.get_dataset", "enumerate", "torch.save", "torch.save", "utils.get_dataset", "enumerate", "torch.save", "torch.save", "utils.get_dataset", "enumerate", "torch.save", "torch.save", "utils.get_dataset", "enumerate", "torch.save", "torch.save", "tqdm.tqdm", "pair[].copy", "enumerate", "tqdm.tqdm", "pair[].copy", "enumerate", "tqdm.tqdm", "tqdm.tqdm", "torch.cuda.is_available", "torch.cuda.is_available", "torch.no_grad", "torch.no_grad", "sentence_distiller.sample_sequence", "torch.no_grad", "torch.no_grad", "sentence_distiller.sample_sequence", "torch.no_grad", "torch.no_grad", "sentence_distiller.sample_sequence", "torch.no_grad", "torch.no_grad", "sentence_distiller.sample_sequence"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.download_pretrained_model", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence"], ["", "def", "run", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Model type (gpt or gpt2)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous utterances to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_sample\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set to use greedy decoding instead of sampling\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_length\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "\"Maximum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_length\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Minimum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"Seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temperature\"", ",", "type", "=", "int", ",", "default", "=", "0.7", ",", "help", "=", "\"Sampling softmax temperature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_k\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Filter top-k tokens before sampling (<=0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_p\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"Nucleus filtering (top-p) before sampling (<=0.0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__file__", ")", "\n", "logger", ".", "info", "(", "pformat", "(", "args", ")", ")", "\n", "\n", "if", "args", ".", "model_checkpoint", "==", "\"\"", ":", "\n", "        ", "args", ".", "model_checkpoint", "=", "download_pretrained_model", "(", ")", "\n", "\n", "", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "logger", ".", "info", "(", "\"Get pretrained model and tokenizer\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "if", "\"gpt2\"", "==", "args", ".", "model", "else", "OpenAIGPTTokenizer", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "model_class", "=", "GPT2LMHeadModel", "if", "\"gpt2\"", "==", "args", ".", "model", "else", "OpenAIGPTLMHeadModel", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "perturbation_layers", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "adapter_bottleneck", "=", "args", ".", "adapter_bottleneck", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", "\n", "\n", "if", "args", ".", "task", "==", "\"dialogue\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", ",", "cache_path", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ",", "return_cachepath", "=", "True", ")", "\n", "persona_text", "=", "[", "]", "\n", "distillated_dataset", "=", "loaded_dataset", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "tqdm", "(", "loaded_dataset", "[", "\"train\"", "]", ")", ")", ":", "\n", "            ", "persona", "=", "pair", "[", "\"personality\"", "]", ".", "copy", "(", ")", "\n", "for", "j", ",", "utterance", "in", "enumerate", "(", "pair", "[", "\"utterances\"", "]", ")", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "persona", ",", "history", "=", "history", ")", "\n", "", "distillated_dataset", "[", "\"train\"", "]", "[", "i", "]", "[", "\"utterances\"", "]", "[", "j", "]", "[", "\"distillated_candidates\"", "]", "=", "[", "out_ids", "]", "\n", "", "", "torch", ".", "save", "(", "distillated_dataset", ",", "cache_path", ")", "\n", "# qa interact", "\n", "", "if", "args", ".", "task", "==", "\"qa\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", ",", "cache_path", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ",", "return_cachepath", "=", "True", ")", "\n", "distillated_dataset", "=", "loaded_dataset", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "tqdm", "(", "loaded_dataset", "[", "\"train\"", "]", ")", ")", ":", "\n", "            ", "evidence", "=", "pair", "[", "\"document\"", "]", ".", "copy", "(", ")", "\n", "evidence", "=", "[", "evidence", "[", "0", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'document'", "]", "]", "]", "\n", "for", "j", ",", "utterance", "in", "enumerate", "(", "pair", "[", "\"utterances\"", "]", ")", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "evidence", ",", "history", "=", "history", ")", "\n", "", "distillated_dataset", "[", "\"train\"", "]", "[", "i", "]", "[", "\"utterances\"", "]", "[", "j", "]", "[", "\"distillated_candidates\"", "]", "=", "[", "out_ids", "]", "\n", "", "", "torch", ".", "save", "(", "distillated_dataset", ",", "cache_path", ")", "\n", "\n", "# nlg interact", "\n", "", "if", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", ",", "cache_path", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ",", "return_cachepath", "=", "True", ")", "\n", "distillated_dataset", "=", "loaded_dataset", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "tqdm", "(", "loaded_dataset", "[", "\"train\"", "]", ")", ")", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ")", "\n", "", "distillated_dataset", "[", "\"train\"", "]", "[", "i", "]", "[", "\"distillated_tgt\"", "]", "=", "out_ids", "\n", "", "torch", ".", "save", "(", "distillated_dataset", ",", "cache_path", ")", "\n", "\n", "", "if", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", ",", "cache_path", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ",", "return_cachepath", "=", "True", ")", "\n", "distillated_dataset", "=", "loaded_dataset", "\n", "for", "i", ",", "pair", "in", "enumerate", "(", "tqdm", "(", "loaded_dataset", "[", "\"train\"", "]", ")", ")", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'src'", "]", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "#[:MAXLEN_MAP[args.task]['tgt']]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ")", "\n", "", "distillated_dataset", "[", "\"train\"", "]", "[", "i", "]", "[", "\"distillated_tgt\"", "]", "=", "out_ids", "\n", "", "torch", ".", "save", "(", "distillated_dataset", ",", "cache_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.average_distributed_scalar": [[52, 59], ["torch.distributed.all_reduce", "torch.distributed.all_reduce", "scalar_t.item", "torch.tensor", "torch.tensor", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["def", "average_distributed_scalar", "(", "scalar", ",", "args", ")", ":", "\n", "    ", "\"\"\" Average a scalar over the nodes if we are in distributed training. We use this for distributed evaluation. \"\"\"", "\n", "if", "args", ".", "local_rank", "==", "-", "1", ":", "\n", "        ", "return", "scalar", "\n", "", "scalar_t", "=", "torch", ".", "tensor", "(", "scalar", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "args", ".", "device", ")", "/", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "scalar_t", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "scalar_t", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.pad_dataset": [[61, 67], ["max", "len", "len"], "function", ["None"], ["", "def", "pad_dataset", "(", "dataset", ",", "padding", "=", "0", ")", ":", "\n", "    ", "\"\"\" Pad the dataset. This could be optimized by defining a Dataset class and padding at the batch level, but this is simpler. \"\"\"", "\n", "max_l", "=", "max", "(", "len", "(", "x", ")", "for", "x", "in", "dataset", "[", "\"input_ids\"", "]", ")", "\n", "for", "name", "in", "PADDED_INPUTS", ":", "\n", "        ", "dataset", "[", "name", "]", "=", "[", "x", "+", "[", "padding", "if", "name", "!=", "\"lm_labels\"", "else", "-", "1", "]", "*", "(", "max_l", "-", "len", "(", "x", ")", ")", "for", "x", "in", "dataset", "[", "name", "]", "]", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.add_special_tokens_": [[69, 77], ["len", "tokenizer.add_special_tokens", "model.resize_token_embeddings"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.resize_token_embeddings"], ["", "def", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Add special tokens to the tokenizer and the model if they have not already been added. \"\"\"", "\n", "orig_num_tokens", "=", "len", "(", "tokenizer", ".", "encoder", ")", "\n", "num_added_tokens", "=", "tokenizer", ".", "add_special_tokens", "(", "\n", "ATTR_TO_SPECIAL_TOKEN", ")", "# returns 0 and doesn't add if they are already there", "\n", "if", "num_added_tokens", ">", "0", ":", "\n", "        ", "model", ".", "resize_token_embeddings", "(", "\n", "new_num_tokens", "=", "orig_num_tokens", "+", "num_added_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.build_input_from_segments_dialqa": [[78, 93], ["tokenizer.convert_tokens_to_ids", "list", "itertools.chain", "enumerate", "enumerate", "sum", "list", "itertools.chain", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "", "def", "build_input_from_segments_dialqa", "(", "persona", ",", "history", ",", "reply", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 3 segments for dialogue and coqa task: persona(document), history(question) and last reply(answer). \"\"\"", "\n", "bos", ",", "eos", ",", "speaker1", ",", "speaker2", ",", "persona_token", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "+", "[", "persona_token", "]", "+", "list", "(", "chain", "(", "*", "persona", ")", ")", "]", "+", "history", "+", "[", "reply", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "sequence", "=", "[", "sequence", "[", "0", "]", "]", "+", "[", "[", "speaker1", "if", "(", "len", "(", "sequence", ")", "-", "i", ")", "%", "2", "else", "speaker2", "]", "+", "s", "for", "i", ",", "s", "in", "enumerate", "(", "sequence", "[", "1", ":", "]", ")", "]", "\n", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "persona_token", "for", "_", "in", "sequence", "[", "0", "]", "]", "+", "[", "speaker2", "if", "i", "%", "2", "else", "speaker1", "for", "i", ",", "s", "in", "enumerate", "(", "sequence", "[", "1", ":", "]", ")", "for", "_", "in", "s", "]", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "# print(\"input:\", tokenizer.decode(instance[\"input_ids\"]))", "\n", "# print(\"type:\", tokenizer.decode(instance[\"token_type_ids\"]))", "\n", "# print(\"lm_label:\", instance[\"lm_labels\"])", "\n", "# print(\"==================================================\")", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.build_input_from_segments_nlg": [[95, 110], ["tokenizer.convert_tokens_to_ids", "list", "tokenizer.decode", "itertools.chain", "list", "len", "itertools.chain", "sum", "source.items", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "build_input_from_segments_nlg", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 2 segments: source and target for natrual langugage generation task. \"\"\"", "\n", "bos", ",", "eos", ",", "name", ",", "eatType", ",", "familyFriendly", ",", "priceRange", ",", "food", ",", "near", ",", "area", ",", "customerRating", ",", "tgt", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "nlg_map", "=", "{", "\"name\"", ":", "name", ",", "\"eatType\"", ":", "eatType", ",", "\"familyFriendly\"", ":", "familyFriendly", ",", "\"priceRange\"", ":", "priceRange", ",", "\"food\"", ":", "food", ",", "\"near\"", ":", "near", ",", "\"area\"", ":", "area", ",", "\"customer rating\"", ":", "customerRating", "}", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "]", "+", "[", "[", "nlg_map", "[", "k", "]", "]", "+", "v", "for", "k", ",", "v", "in", "source", ".", "items", "(", ")", "]", "+", "[", "[", "tgt", "]", "+", "target", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "tokenizer", ".", "decode", "(", "instance", "[", "\"input_ids\"", "]", ")", "\n", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "bos", "]", "+", "list", "(", "chain", "(", "*", "[", "[", "s", "[", "0", "]", "]", "*", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", "1", ":", "-", "1", "]", "]", ")", ")", "+", "[", "tgt", "]", "*", "len", "(", "sequence", "[", "-", "1", "]", ")", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "# print(\"input:\", tokenizer.decode(instance[\"input_ids\"]))", "\n", "# print(\"type:\", tokenizer.decode(instance[\"token_type_ids\"]))", "\n", "# print(\"lm_label:\", instance[\"lm_labels\"])", "\n", "# print(\"==================================================\")", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.build_input_from_segments_mtsm": [[111, 123], ["tokenizer.convert_tokens_to_ids", "list", "itertools.chain", "len", "print", "len", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "build_input_from_segments_mtsm", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 2 segments: source and target for machine translation and summarization task. \"\"\"", "\n", "bos", ",", "eos", ",", "src", ",", "tgt", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "]", "+", "[", "[", "src", "]", "+", "source", "]", "+", "[", "[", "tgt", "]", "+", "target", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "if", "len", "(", "instance", "[", "\"input_ids\"", "]", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"yes\"", ")", "\n", "", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "bos", "]", "+", "[", "src", "]", "*", "len", "(", "sequence", "[", "1", "]", ")", "+", "[", "tgt", "]", "*", "len", "(", "sequence", "[", "2", "]", ")", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.get_data_loaders": [[125, 247], ["utils.get_dataset", "logger.info", "logger.info", "datasets.items", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "train.get_data_loaders.load_dial"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset"], ["", "def", "get_data_loaders", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Prepare the dataset for training and evaluation \"\"\"", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "logger", ".", "info", "(", "\"Build inputs and labels\"", ")", "\n", "datasets", "=", "{", "\"train\"", ":", "defaultdict", "(", "list", ")", ",", "\"valid\"", ":", "defaultdict", "(", "list", ")", ",", "\"test\"", ":", "defaultdict", "(", "list", ")", "}", "\n", "def", "load_dial", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "tgt", "=", "\"candidates\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_candidates\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "persona", "=", "pair", "[", "\"personality\"", "]", ".", "copy", "(", ")", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "candidate", "=", "utterance", "[", "tgt", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "persona", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "persona", "=", "[", "persona", "[", "-", "1", "]", "]", "+", "persona", "[", ":", "-", "1", "]", "# permuted personalities", "\n", "\n", "", "", "", "", "def", "load_smd", "(", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "for", "pair", "in", "dataset", ":", "\n", "                ", "kb", "=", "pair", "[", "\"KB\"", "]", ".", "copy", "(", ")", "\n", "if", "len", "(", "list", "(", "chain", "(", "*", "kb", ")", ")", ")", ">", "800", ":", "\n", "                    ", "continue", "\n", "#print(\"Long KB:\", count)", "\n", "", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "\n", "\n", "candidate", "=", "utterance", "[", "\"candidates\"", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "kb", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "\n", "\n", "", "", "", "", "", "def", "load_qa", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "tgt", "=", "\"candidates\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_candidates\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "evidence", "=", "pair", "[", "\"document\"", "]", ".", "copy", "(", ")", "\n", "evidence", "=", "[", "evidence", "[", "0", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'document'", "]", "]", "]", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "candidate", "=", "utterance", "[", "tgt", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "evidence", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "", "def", "load_nlg", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "for", "pair", "in", "dataset", ":", "\n", "                ", "source", "=", "pair", "[", "\"src\"", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                    ", "target", "=", "pair", "[", "\"distillated_tgt\"", "]", "\n", "", "instance", ",", "_", "=", "build_input_from_segments_nlg", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "True", ",", "with_eos", "=", "True", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                    ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "def", "load_mtsm", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"val\"", ":", "\n", "                ", "dataset_name", "=", "\"valid\"", "# fix dataset key error", "\n", "", "tgt", "=", "\"tgt\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_tgt\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "#print(pair)", "\n", "                ", "if", "len", "(", "pair", "[", "\"src\"", "]", ")", "<", "2", "or", "len", "(", "pair", "[", "tgt", "]", ")", "<", "2", ":", "# filter the shot sentence", "\n", "                    ", "continue", "\n", "", "source", "=", "pair", "[", "\"src\"", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'src'", "]", "]", "\n", "target", "=", "pair", "[", "tgt", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'tgt'", "]", "]", "\n", "instance", ",", "_", "=", "build_input_from_segments_mtsm", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "True", ",", "with_eos", "=", "True", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                    ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Pad inputs and convert to Tensor\"", ")", "\n", "if", "args", ".", "task", "==", "\"dialogue\"", ":", "\n", "        ", "load_dial", "(", ")", "\n", "_", "=", "datasets", ".", "pop", "(", "\"test\"", ",", "None", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", "}", "\n", "# elif args.task ==\"\":", "\n", "", "elif", "args", ".", "task", "==", "\"qa\"", ":", "\n", "        ", "load_qa", "(", ")", "\n", "_", "=", "datasets", ".", "pop", "(", "\"test\"", ",", "None", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", "}", "\n", "", "elif", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "        ", "load_nlg", "(", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", ",", "\"test\"", ":", "[", "]", "}", "\n", "", "elif", "args", ".", "task", "==", "\"mt\"", ":", "\n", "        ", "load_mtsm", "(", ")", "\n", "datasets", "[", "\"valid\"", "]", "=", "datasets", "[", "\"test\"", "]", "\n", "_", "=", "datasets", ".", "pop", "(", "\"test\"", ",", "None", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", "}", "\n", "", "else", ":", "\n", "        ", "load_mtsm", "(", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", ",", "\"test\"", ":", "[", "]", "}", "\n", "\n", "", "for", "dataset_name", ",", "dataset", "in", "datasets", ".", "items", "(", ")", ":", "\n", "        ", "dataset", "=", "pad_dataset", "(", "dataset", ",", "padding", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "ATTR_TO_SPECIAL_TOKEN", "[", "'pad_token'", "]", ")", ")", "\n", "for", "input_name", "in", "MODEL_INPUTS", ":", "\n", "            ", "tensor", "=", "torch", ".", "tensor", "(", "dataset", "[", "input_name", "]", ")", "\n", "\n", "tensor", "=", "tensor", ".", "view", "(", "(", "-", "1", ",", "1", ")", "+", "tensor", ".", "shape", "[", "1", ":", "]", ")", "#always one candidate", "\n", "\n", "tensor_datasets", "[", "dataset_name", "]", ".", "append", "(", "tensor", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Build train and validation dataloaders\"", ")", "\n", "train_dataset", ",", "valid_dataset", "=", "TensorDataset", "(", "*", "tensor_datasets", "[", "\"train\"", "]", ")", ",", "TensorDataset", "(", "*", "tensor_datasets", "[", "\"valid\"", "]", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "if", "args", ".", "distributed", "else", "None", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "if", "args", ".", "distributed", "else", "None", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "shuffle", "=", "(", "not", "args", ".", "distributed", ")", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "sampler", "=", "valid_sampler", ",", "batch_size", "=", "args", ".", "valid_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "\"Train dataset (Batch, Candidates, Seq length): {}\"", ".", "format", "(", "train_dataset", ".", "tensors", "[", "0", "]", ".", "shape", ")", ")", "\n", "logger", ".", "info", "(", "\"Valid dataset (Batch, Candidates, Seq length): {}\"", ".", "format", "(", "valid_dataset", ".", "tensors", "[", "0", "]", ".", "shape", ")", ")", "\n", "return", "train_loader", ",", "valid_loader", ",", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.count_parameters": [[248, 250], ["sum", "p.numel"], "function", ["None"], ["", "def", "count_parameters", "(", "list_param", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "list_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.count_parameters_model": [[251, 253], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters_model", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train.train": [[254, 486], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logger.warning", "logger.info", "logger.info", "tokenizer_class.from_pretrained", "torch.nn.parallel.DistributedDataParallel.to", "train.add_special_tokens_", "logger.info", "train.get_data_loaders", "ignite.engine.Engine", "ignite.engine.Engine.add_event_handler", "ignite.contrib.handlers.PiecewiseLinear", "ignite.engine.Engine.add_event_handler", "ignite.metrics.RunningAverage().attach", "metrics.update", "ignite.metrics.MetricsLambda", "metrics.items", "ignite.engine.Engine.run", "pprint.pformat", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "model_class.from_pretrained", "pytorch_transformers.GPT2Config", "model_class", "pytorch_transformers.AdamW", "amp.initialize", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "tuple", "torch.nn.parallel.DistributedDataParallel.", "loss.item", "torch.nn.parallel.DistributedDataParallel.train", "tuple", "torch.nn.parallel.DistributedDataParallel.", "loss.item", "torch.nn.parallel.DistributedDataParallel.train", "tuple", "torch.nn.parallel.DistributedDataParallel.", "loss.item", "ignite.engine.Engine", "torch.nn.parallel.DistributedDataParallel.eval", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.metrics.Loss", "metric.attach", "ignite.contrib.handlers.ProgressBar", "ignite.contrib.handlers.ProgressBar.attach", "ignite.engine.Engine.add_event_handler", "utils.make_logdir", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.handlers.ModelCheckpoint", "ignite.engine.Engine.add_event_handler", "torch.save", "torch.save", "getattr().config.to_json_file", "tokenizer_class.from_pretrained.save_pretrained", "os.rename", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.close", "pytorch_transformers.AdamW", "pytorch_transformers.AdamW", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.parallel.DistributedDataParallel.named_parameters", "[].clone", "torch.nn.parallel.DistributedDataParallel.transformer.wte.weight.data.add_", "pytorch_transformers.AdamW.zero_grad", "torch.nn.parallel.DistributedDataParallel.named_parameters", "[].clone", "torch.equal", "torch.equal", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "pytorch_transformers.AdamW.step", "pytorch_transformers.AdamW.zero_grad", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "pytorch_transformers.AdamW.step", "pytorch_transformers.AdamW.zero_grad", "ignite.engine.Engine", "ignite.engine.Engine", "torch.no_grad", "torch.no_grad", "tuple", "logger.info", "torch.nn.parallel.DistributedDataParallel.", "lm_logits[].contiguous().view", "lm_labels[].contiguous().view", "ignite.engine.Engine.run", "ignite.metrics.RunningAverage", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "ignite.metrics.MetricsLambda", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "torch.nn.parallel.DistributedDataParallel.parameters", "input_tensor.to", "amp.scale_loss", "scaled_loss.backward", "amp.master_params", "torch.nn.parallel.DistributedDataParallel.parameters", "input_tensor.to", "amp.scale_loss", "scaled_loss.backward", "amp.master_params", "torch.nn.parallel.DistributedDataParallel.parameters", "input_tensor.to", "amp.scale_loss", "scaled_loss.backward", "amp.master_params", "torch.nn.parallel.DistributedDataParallel.parameters", "tokenizer_class.from_pretrained.decode", "lm_logits.size", "ignite.engine.Engine.run", "ignite.engine.Engine.run", "train_sampler.set_epoch", "valid_sampler.set_epoch", "ignite.contrib.handlers.ProgressBar.log_message", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "ignite.contrib.handlers.tensorboard_logger.OptimizerParamsHandler", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "getattr", "torch.nn.parallel.DistributedDataParallel.named_parameters", "param_to_check.append", "param_to_check.append", "input_tensor.to", "input_ids[].tolist", "lm_logits[].contiguous", "lm_labels[].contiguous", "len", "getattr", "str", "list", "list", "pprint.pformat", "list", "metrics.keys"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.get_data_loaders", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.train", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.train", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.train", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.make_logdir", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.save_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run"], ["", "def", "train", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emb_only\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"fine tune only task embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--linear_perturb\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"fine tune only task embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous exchanges to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valid_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"Accumulate gradients on several steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "6.25e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lm_coef\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"LM loss coefficient\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_norm\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Clipping gradient norm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of training epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--personality_permutations\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of permutations of personality sentences\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_before_start\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true start with a first evaluation before training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp16\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Set to O0, O1, O2 or O3 for fp16 training (see apex documentation)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Local rank for distributed training (-1: not distributed)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_init\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"don't use GPT-2 pre-trained model \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distillation\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--outputlayer_only\"", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# logging is set to INFO (resp. WARN) for main (resp. auxiliary) process. logger.info => log main process only, logger.warning => log all processes", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ")", "\n", "logger", ".", "warning", "(", "\"Running process %d\"", ",", "args", ".", "local_rank", ")", "# This is a logger.warning: it will be printed by all distributed processes", "\n", "logger", ".", "info", "(", "\"Arguments: %s\"", ",", "pformat", "(", "args", ")", ")", "\n", "\n", "# Initialize distributed training if needed", "\n", "args", ".", "distributed", "=", "(", "args", ".", "local_rank", "!=", "-", "1", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Prepare tokenizer, pretrained model and optimizer.\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "if", "\"gpt2\"", "in", "args", ".", "model_checkpoint", "else", "OpenAIGPTTokenizer", "# cant use Autotokenizer because checkpoint could be a Path", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "\n", "\n", "model_class", "=", "GPT2LMHeadModel", "if", "\"gpt2\"", "in", "args", ".", "model_checkpoint", "else", "OpenAIGPTDoubleHeadsModel", "\n", "if", "not", "args", ".", "random_init", ":", "\n", "        ", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "perturbation_layers", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "adapter_bottleneck", "=", "args", ".", "adapter_bottleneck", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "GPT2Config", "(", ")", "\n", "model", "=", "model_class", "(", "config", ",", "perturbation_layers", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "adapter_bottleneck", "=", "args", ".", "adapter_bottleneck", ")", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Add special tokens if they are not already added", "\n", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", "\n", "\n", "if", "args", ".", "adapter_bottleneck", ">", "0", ":", "\n", "        ", "parameters_to_update", "=", "[", "p", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", "if", "\"adapter\"", "in", "str", "(", "n", ")", "]", "+", "[", "model", ".", "transformer", ".", "wte", ".", "weight", "]", "\n", "optimizer", "=", "AdamW", "(", "parameters_to_update", ",", "lr", "=", "args", ".", "lr", ",", "correct_bias", "=", "True", ")", "\n", "", "elif", "args", ".", "outputlayer_only", ":", "\n", "        ", "parameters_to_update", "=", "[", "model", ".", "transformer", ".", "wte", ".", "weight", "]", "\n", "optimizer", "=", "AdamW", "(", "parameters_to_update", ",", "lr", "=", "args", ".", "lr", ",", "correct_bias", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "correct_bias", "=", "True", ")", "\n", "\n", "# Prepare model for FP16 and distributed training if needed (order is important, distributed should be the last)", "\n", "", "if", "args", ".", "fp16", ":", "\n", "        ", "from", "apex", "import", "amp", "# Apex is only required if we use fp16 training", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "fp16", ")", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Prepare datasets\"", ")", "\n", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "valid_sampler", "=", "get_data_loaders", "(", "args", ",", "tokenizer", ")", "\n", "\n", "# Training function and trainer", "\n", "def", "update_emb", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", "=", "batch", "\n", "(", "lm_loss", ")", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "lm_labels", "\n", ")", "\n", "loss", "=", "lm_loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_norm", ")", "\n", "", "if", "engine", ".", "state", ".", "iteration", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "param_to_check", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "(", "n", "!=", "\"transformer.wte.weight\"", ")", ":", "\n", "                    ", "param_to_check", ".", "append", "(", "p", ")", "\n", "", "", "a", "=", "list", "(", "param_to_check", ")", "[", "0", "]", ".", "clone", "(", ")", "\n", "model", ".", "transformer", ".", "wte", ".", "weight", ".", "grad", "[", ":", "50257", ",", ":", "]", "=", "0", "\n", "model", ".", "transformer", ".", "wte", ".", "weight", ".", "data", ".", "add_", "(", "-", "args", ".", "lr", ",", "model", ".", "transformer", ".", "wte", ".", "weight", ".", "grad", ".", "data", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "param_to_check", "=", "[", "]", "\n", "for", "n", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "(", "n", "!=", "\"transformer.wte.weight\"", ")", ":", "\n", "                    ", "param_to_check", ".", "append", "(", "p", ")", "\n", "\n", "", "", "b", "=", "list", "(", "param_to_check", ")", "[", "0", "]", ".", "clone", "(", ")", "\n", "assert", "torch", ".", "equal", "(", "a", ".", "data", ",", "b", ".", "data", ")", "\n", "", "return", "loss", ".", "item", "(", ")", "\n", "\n", "# Training function and trainer", "\n", "", "def", "update_linear_perturbation", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", "=", "batch", "\n", "(", "lm_loss", ")", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "lm_labels", "\n", ")", "\n", "loss", "=", "lm_loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_norm", ")", "\n", "", "if", "engine", ".", "state", ".", "iteration", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "\n", "            ", "model", ".", "transformer", ".", "wte", ".", "weight", ".", "grad", "[", ":", "50257", ",", ":", "]", "=", "0", "\n", "# model.transformer.wte.weight.data.add_(-args.lr,model.transformer.wte.weight.grad.data)", "\n", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "return", "loss", ".", "item", "(", ")", "\n", "\n", "# Training function and trainer", "\n", "", "def", "update_all", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", "=", "batch", "\n", "(", "lm_loss", ")", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "lm_labels", ",", "self_copy", "=", "args", ".", "self_copy", "\n", ")", "\n", "loss", "=", "lm_loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_norm", ")", "\n", "", "if", "engine", ".", "state", ".", "iteration", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "return", "loss", ".", "item", "(", ")", "\n", "", "if", "args", ".", "emb_only", ":", "\n", "        ", "trainer", "=", "Engine", "(", "update_emb", ")", "\n", "", "elif", "(", "args", ".", "linear_perturb", "or", "args", ".", "adapter_bottleneck", ">", "0", ")", ":", "\n", "        ", "trainer", "=", "Engine", "(", "update_linear_perturbation", ")", "\n", "", "else", ":", "\n", "        ", "trainer", "=", "Engine", "(", "update_all", ")", "\n", "\n", "# Evaluation function and evaluator (evaluator output is the input of the metrics)", "\n", "", "def", "inference", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", "=", "batch", "\n", "logger", ".", "info", "(", "tokenizer", ".", "decode", "(", "input_ids", "[", "0", ",", "-", "1", ",", ":", "]", ".", "tolist", "(", ")", ")", ")", "\n", "# if we dont send labels to model, it doesnt return losses", "\n", "lm_logits", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", ")", "\n", "lm_logits_flat_shifted", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "lm_logits", ".", "size", "(", "-", "1", ")", ")", "\n", "lm_labels_flat_shifted", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "(", "lm_logits_flat_shifted", ",", ")", ",", "(", "lm_labels_flat_shifted", ",", ")", "\n", "", "", "evaluator", "=", "Engine", "(", "inference", ")", "\n", "\n", "# Attach evaluation to trainer: we evaluate when we start the training and at the end of each epoch", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "if", "args", ".", "n_epochs", "<", "1", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "", "if", "args", ".", "eval_before_start", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "STARTED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "\n", "# Make sure distributed data samplers split the dataset nicely between the distributed processes", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", ",", "lambda", "engine", ":", "train_sampler", ".", "set_epoch", "(", "engine", ".", "state", ".", "epoch", ")", ")", "\n", "evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", ",", "lambda", "engine", ":", "valid_sampler", ".", "set_epoch", "(", "engine", ".", "state", ".", "epoch", ")", ")", "\n", "\n", "# Linearly decrease the learning rate from lr to zero", "\n", "", "scheduler", "=", "PiecewiseLinear", "(", "optimizer", ",", "\"lr\"", ",", "[", "(", "0", ",", "args", ".", "lr", ")", ",", "(", "args", ".", "n_epochs", "*", "len", "(", "train_loader", ")", ",", "0.0", ")", "]", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "ITERATION_STARTED", ",", "scheduler", ")", "\n", "\n", "# Prepare metrics - note how we compute distributed metrics", "\n", "RunningAverage", "(", "output_transform", "=", "lambda", "x", ":", "x", ")", ".", "attach", "(", "trainer", ",", "\"loss\"", ")", "\n", "metrics", "=", "{", "\"nll\"", ":", "Loss", "(", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", ",", "output_transform", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", "[", "0", "]", ",", "x", "[", "1", "]", "[", "0", "]", ")", ")", "}", "\n", "metrics", ".", "update", "(", "{", "\"average_nll\"", ":", "MetricsLambda", "(", "average_distributed_scalar", ",", "metrics", "[", "\"nll\"", "]", ",", "args", ")", "}", ")", "\n", "metrics", "[", "\"average_ppl\"", "]", "=", "MetricsLambda", "(", "math", ".", "exp", ",", "metrics", "[", "\"average_nll\"", "]", ")", "\n", "for", "name", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "metric", ".", "attach", "(", "evaluator", ",", "name", ")", "\n", "\n", "# On the main process: add progress bar, tensorboard, checkpoints and save model, configuration and tokenizer before we start to train", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "pbar", "=", "ProgressBar", "(", "persist", "=", "True", ")", "\n", "pbar", ".", "attach", "(", "trainer", ",", "metric_names", "=", "[", "\"loss\"", "]", ")", "\n", "evaluator", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "lambda", "_", ":", "pbar", ".", "log_message", "(", "\"Validation: %s\"", "%", "pformat", "(", "evaluator", ".", "state", ".", "metrics", ")", ")", ")", "\n", "\n", "log_dir", "=", "make_logdir", "(", "args", ".", "model_checkpoint", ",", "task", "=", "args", ".", "task", ",", "lr", "=", "args", ".", "lr", ",", "layer", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "n_epochs", "=", "args", ".", "n_epochs", ",", "adapter", "=", "args", ".", "adapter_bottleneck", ",", "random_init", "=", "args", ".", "random_init", ")", "\n", "if", "args", ".", "distillation", ":", "\n", "            ", "log_dir", "+=", "\"_distillation\"", "\n", "", "if", "args", ".", "outputlayer_only", ":", "\n", "            ", "log_dir", "+=", "\"_outputlayer_only\"", "\n", "", "tb_logger", "=", "TensorboardLogger", "(", "log_dir", ")", "\n", "\n", "tb_logger", ".", "attach", "(", "trainer", ",", "log_handler", "=", "OutputHandler", "(", "tag", "=", "\"training\"", ",", "metric_names", "=", "[", "\"loss\"", "]", ")", ",", "event_name", "=", "Events", ".", "ITERATION_COMPLETED", ")", "\n", "tb_logger", ".", "attach", "(", "trainer", ",", "log_handler", "=", "OptimizerParamsHandler", "(", "optimizer", ")", ",", "event_name", "=", "Events", ".", "ITERATION_STARTED", ")", "\n", "tb_logger", ".", "attach", "(", "evaluator", ",", "log_handler", "=", "OutputHandler", "(", "tag", "=", "\"validation\"", ",", "metric_names", "=", "list", "(", "metrics", ".", "keys", "(", ")", ")", ",", "another_engine", "=", "trainer", ")", ",", "event_name", "=", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "\n", "checkpoint_handler", "=", "ModelCheckpoint", "(", "log_dir", ",", "'checkpoint'", ",", "save_interval", "=", "1", ",", "n_saved", "=", "3", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "checkpoint_handler", ",", "{", "'mymodel'", ":", "getattr", "(", "model", ",", "'module'", ",", "model", ")", "}", ")", "# \"getattr\" takes care of distributed encapsulation", "\n", "\n", "torch", ".", "save", "(", "args", ",", "log_dir", "+", "'/model_training_args.bin'", ")", "\n", "getattr", "(", "model", ",", "'module'", ",", "model", ")", ".", "config", ".", "to_json_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "CONFIG_NAME", ")", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "log_dir", ")", "\n", "\n", "# Run the training", "\n", "", "trainer", ".", "run", "(", "train_loader", ",", "max_epochs", "=", "args", ".", "n_epochs", ")", "\n", "\n", "# On the main process: close tensorboard logger and rename the last checkpoint (for easy re-loading with OpenAIGPTModel.from_pretrained method)", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "n_epochs", ">", "0", ":", "\n", "        ", "os", ".", "rename", "(", "checkpoint_handler", ".", "_saved", "[", "-", "1", "]", "[", "1", "]", "[", "-", "1", "]", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "WEIGHTS_NAME", ")", ")", "# TODO: PR in ignite to have better access to saved file paths (cleaner)", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering": [[32, 69], ["min", "float", "float", "logits.dim", "logits.size", "torch.sort", "torch.sort", "torch.cumsum", "torch.cumsum", "sorted_indices_to_remove[].clone", "torch.softmax", "torch.topk", "torch.topk"], "function", ["None"], ["def", "top_filtering", "(", "logits", ",", "top_k", "=", "0", ",", "top_p", "=", "0.0", ",", "threshold", "=", "-", "float", "(", "'Inf'", ")", ",", "filter_value", "=", "-", "float", "(", "'Inf'", ")", ")", ":", "\n", "    ", "\"\"\" Filter a distribution of logits using top-k, top-p (nucleus) and/or threshold filtering\n        Args:\n            logits: logits distribution shape (vocabulary size)\n            top_k: <=0: no filtering, >0: keep only top k tokens with highest probability.\n            top_p: <=0.0: no filtering, >0.0: keep only a subset S of candidates, where S is the smallest subset\n                whose total probability mass is greater than or equal to the threshold top_p.\n                In practice, we select the highest probability tokens whose cumulative probability mass exceeds\n                the threshold top_p.\n            threshold: a minimal threshold to keep logits\n    \"\"\"", "\n", "assert", "logits", ".", "dim", "(", ")", "==", "1", "# Only work for batch size 1 for now - could update but it would obfuscate a bit the code", "\n", "top_k", "=", "min", "(", "top_k", ",", "logits", ".", "size", "(", "-", "1", ")", ")", "\n", "if", "top_k", ">", "0", ":", "\n", "# Remove all tokens with a probability less than the last token in the top-k tokens", "\n", "        ", "indices_to_remove", "=", "logits", "<", "torch", ".", "topk", "(", "logits", ",", "top_k", ")", "[", "0", "]", "[", "...", ",", "-", "1", ",", "None", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "if", "top_p", ">", "0.0", ":", "\n", "# Compute cumulative probabilities of sorted tokens", "\n", "        ", "sorted_logits", ",", "sorted_indices", "=", "torch", ".", "sort", "(", "logits", ",", "descending", "=", "True", ")", "\n", "cumulative_probabilities", "=", "torch", ".", "cumsum", "(", "F", ".", "softmax", "(", "sorted_logits", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Remove tokens with cumulative probability above the threshold", "\n", "sorted_indices_to_remove", "=", "cumulative_probabilities", ">", "top_p", "\n", "# Shift the indices to the right to keep also the first token above the threshold", "\n", "sorted_indices_to_remove", "[", "...", ",", "1", ":", "]", "=", "sorted_indices_to_remove", "[", "...", ",", ":", "-", "1", "]", ".", "clone", "(", ")", "\n", "sorted_indices_to_remove", "[", "...", ",", "0", "]", "=", "0", "\n", "\n", "# Back to unsorted indices and set them to -infinity", "\n", "indices_to_remove", "=", "sorted_indices", "[", "sorted_indices_to_remove", "]", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "", "indices_to_remove", "=", "logits", "<", "threshold", "\n", "logits", "[", "indices_to_remove", "]", "=", "filter_value", "\n", "\n", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence": [[71, 124], ["tokenizer.convert_tokens_to_ids", "range", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "model", "isinstance", "current_output.append", "train.build_input_from_segments_dialqa", "evaluate_vlm.top_filtering", "evaluate_vlm.top_filtering", "torch.softmax", "torch.multinomial", "torch.multinomial", "torch.multinomial.item", "torch.multinomial.item", "train.build_input_from_segments_nlg", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.topk", "torch.topk", "torch.multinomial.item", "torch.multinomial.item", "torch.multinomial", "torch.multinomial", "train.build_input_from_segments_mtsm", "F.softmax.max().item", "warnings.warn", "F.softmax.max"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_dialqa", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.top_filtering", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_nlg", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_mtsm"], ["", "def", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "None", ",", "history", "=", "None", ",", "source", "=", "None", ",", "target", "=", "None", ",", "current_output", "=", "None", ",", "task_id", "=", "-", "1", ")", ":", "\n", "    ", "special_tokens_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "args", ".", "task", "]", ")", "\n", "if", "current_output", "is", "None", ":", "\n", "        ", "current_output", "=", "[", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "args", ".", "max_length", ")", ":", "\n", "        ", "if", "(", "args", ".", "task", "==", "\"dialogue\"", "or", "args", ".", "task", "==", "\"qa\"", "or", "args", ".", "task", "==", "\"smd\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "personality", ",", "history", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_nlg", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "elif", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "            ", "instance", ",", "_", "=", "build_input_from_segments_mtsm", "(", "source", ",", "current_output", ",", "tokenizer", ",", "with_eos", "=", "False", ",", "task", "=", "args", ".", "task", ")", "\n", "", "input_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"input_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "token_type_ids", "=", "torch", ".", "tensor", "(", "instance", "[", "\"token_type_ids\"", "]", ",", "device", "=", "args", ".", "device", ")", ".", "unsqueeze", "(", "0", ")", "\n", "#print(input_ids)", "\n", "#print(token_type_ids)", "\n", "logits", "=", "model", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "task_id", "=", "task_id", ")", "\n", "\n", "#logits = model(input_ids, token_type_ids=token_type_ids)", "\n", "if", "isinstance", "(", "logits", ",", "tuple", ")", ":", "# for gpt2 and maybe others", "\n", "            ", "logits", "=", "logits", "[", "0", "]", "\n", "#mask out some special tokens", "\n", "# mask = torch.zeros(50287).bool()", "\n", "# mask[50257:EOSLIST[args.task]] = True", "\n", "# mask[EOSLIST[args.task]+1:] = True", "\n", "# mask.unsqueeze(0).unsqueeze(0)", "\n", "# mask.to(args.device)", "\n", "\n", "#logits.masked_fill_(mask, -1e18)", "\n", "", "logits", "[", ":", ",", ":", ",", "50257", ":", "EOSLIST", "[", "args", ".", "task", "]", "]", "=", "-", "1e18", "\n", "logits", "[", ":", ",", ":", ",", "EOSLIST", "[", "args", ".", "task", "]", "+", "1", ":", "]", "=", "-", "1e18", "\n", "\n", "if", "args", ".", "self_copy", ":", "\n", "            ", "probs", "=", "top_filtering", "(", "logits", "[", "0", ",", "-", "1", ",", ":", "]", ",", "top_k", "=", "1", ",", "top_p", "=", "0", ")", "# generator output probs", "\n", "args", ".", "no_sample", "=", "True", "\n", "", "else", ":", "\n", "            ", "logits", "=", "logits", "[", "0", ",", "-", "1", ",", ":", "]", "/", "args", ".", "temperature", "\n", "logits", "=", "top_filtering", "(", "logits", ",", "top_k", "=", "args", ".", "top_k", ",", "top_p", "=", "args", ".", "top_p", ")", "\n", "probs", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "prev", "=", "torch", ".", "topk", "(", "probs", ",", "1", ")", "[", "1", "]", "if", "args", ".", "no_sample", "else", "torch", ".", "multinomial", "(", "probs", ",", "1", ")", "\n", "if", "i", "<", "args", ".", "min_length", "and", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "while", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "                ", "if", "probs", ".", "max", "(", ")", ".", "item", "(", ")", "==", "1", ":", "\n", "                    ", "warnings", ".", "warn", "(", "\"Warning: model generating special token with probability 1.\"", ")", "\n", "break", "# avoid infinitely looping over special token", "\n", "", "prev", "=", "torch", ".", "multinomial", "(", "probs", ",", "num_samples", "=", "1", ")", "\n", "\n", "", "", "if", "prev", ".", "item", "(", ")", "in", "special_tokens_ids", ":", "\n", "            ", "break", "\n", "", "current_output", ".", "append", "(", "prev", ".", "item", "(", ")", ")", "\n", "\n", "", "return", "current_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run": [[125, 301], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logging.getLogger", "logging.getLogger.info", "random.seed", "torch.random.manual_seed", "torch.random.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "logging.getLogger.info", "tokenizer_class.from_pretrained", "model_class.from_pretrained", "model_class.from_pretrained.to", "train.add_special_tokens_", "pprint.pformat", "os.path.exists", "os.makedirs", "utils.get_dataset", "util.eval_metrics.moses_multi_bleu", "util.eval_metrics.rouge", "print", "print", "utils.get_dataset", "utils.get_dataset", "print", "util.eval_metrics.moses_multi_bleu", "print", "utils.get_dataset", "json.dumps", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "numpy.array", "numpy.array", "open", "open", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "open", "open", "pair[].copy", "open", "open", "open", "numpy.array", "numpy.array", "open", "open", "open", "pair[].copy", "open", "f.write", "torch.cuda.is_available", "torch.cuda.is_available", "torch.no_grad", "torch.no_grad", "evaluate_vlm.sample_sequence", "tokenizer_class.from_pretrained.decode", "f.write", "f.write", "f.write", "f.write", "torch.no_grad", "torch.no_grad", "evaluate_vlm.sample_sequence", "tokenizer_class.from_pretrained.decode", "f.write", "f.write", "f.write", "f.write", "tokenizer_class.from_pretrained.decode", "output_text.append", "ref_text.append", "persona_text.append", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "f.write", "tokenizer_class.from_pretrained.decode", "output_text.append", "torch.no_grad", "torch.no_grad", "evaluate_vlm.sample_sequence", "tokenizer_class.from_pretrained.decode", "torch.no_grad", "torch.no_grad", "evaluate_vlm.sample_sequence", "tokenizer_class.from_pretrained.decode"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.sample_sequence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "run", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Model type (gpt or gpt2)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous utterances to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_sample\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"Set to use greedy decoding instead of sampling\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_length\"", ",", "type", "=", "int", ",", "default", "=", "150", ",", "help", "=", "\"Maximum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min_length\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Minimum length of the output utterances\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--seed\"", ",", "type", "=", "int", ",", "default", "=", "42", ",", "help", "=", "\"Seed\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--temperature\"", ",", "type", "=", "int", ",", "default", "=", "0.7", ",", "help", "=", "\"Sampling softmax temperature\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_k\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"Filter top-k tokens before sampling (<=0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--top_p\"", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "help", "=", "\"Nucleus filtering (top-p) before sampling (<=0.0: no filtering)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__file__", ")", "\n", "logger", ".", "info", "(", "pformat", "(", "args", ")", ")", "\n", "\n", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "random", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "logger", ".", "info", "(", "\"Get pretrained model and tokenizer\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "#model_class = GPT2LMHeadModel", "\n", "#model = model_class.from_pretrained(args.model_checkpoint, perturbation_layers=0, self_copy=False, adapter_bottleneck=BOTTLEBECK_MAP[args.task])", "\n", "\n", "model_class", "=", "VLM", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "bottleneck_map", "=", "BOTTLEBECK_MAP", ")", "\n", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "\"results/VLM_result/\"", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "\"results/VLM_result/\"", ")", "\n", "\n", "", "if", "(", "args", ".", "task", "==", "\"mt\"", "or", "args", ".", "task", "==", "\"summarization\"", ")", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"test\"", "]", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'src'", "]", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "#[:MAXLEN_MAP[args.task]['tgt']]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ",", "task_id", "=", "COMMAND2ID", "[", "args", ".", "task", "]", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "pair", "[", "\"tgt\"", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "\n", "", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "output_text", ")", ",", "np", ".", "array", "(", "ref_text", ")", ")", "\n", "r_1", ",", "r_2", ",", "r_l", ",", "r_m", "=", "rouge", "(", "output_text", ",", "ref_text", ")", "\n", "print", "(", "\"BLEU:{}\"", ".", "format", "(", "BLEU", ")", ")", "\n", "print", "(", "\"ROUGE_1:{}, ROUGE_2:{}, ROUGE_L:{}, ROUGE_mean:{}\"", ".", "format", "(", "r_1", ",", "r_2", ",", "r_l", ",", "r_m", ")", ")", "\n", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# nlg interact", "\n", "", "", "", "if", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"test\"", "]", ":", "\n", "            ", "source", "=", "pair", "[", "\"src\"", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "source", "=", "source", ",", "target", "=", "target", ",", "task_id", "=", "COMMAND2ID", "[", "args", ".", "task", "]", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "# print(\"input: \")", "\n", "# print([{k: tokenizer.decode(v, skip_special_tokens=True)} for k, v in pair[\"src\"].items()])", "\n", "# print(\"model output: \")", "\n", "# print(out_text)", "\n", "# print(\"ref: \")", "\n", "# print(tokenizer.decode(pair[\"tgt\"], skip_special_tokens=True))", "\n", "# print(\"======================================\")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "pair", "[", "\"tgt\"", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "", "with", "open", "(", "\"results/VLM_result/nlg_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/nlg_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "\n", "\n", "", "", "", "if", "args", ".", "task", "==", "\"dialogue\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "persona_text", "=", "[", "]", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"valid\"", "]", ":", "\n", "            ", "persona", "=", "pair", "[", "\"personality\"", "]", ".", "copy", "(", ")", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "persona", ",", "history", "=", "history", ",", "task_id", "=", "COMMAND2ID", "[", "args", ".", "task", "]", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "output_text", ".", "append", "(", "out_text", ")", "\n", "ref_text", ".", "append", "(", "tokenizer", ".", "decode", "(", "utterance", "[", "\"candidates\"", "]", "[", "-", "1", "]", ",", "skip_special_tokens", "=", "True", ")", ")", "\n", "persona_text", ".", "append", "(", "[", "tokenizer", ".", "decode", "(", "p", ",", "skip_special_tokens", "=", "True", ")", "for", "p", "in", "persona", "]", ")", "\n", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_persona.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "persona_text", ":", "\n", "                ", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "line", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "# print(\"Evaluate ENT score\")", "\n", "# ent_ref_arr = []", "\n", "# ent_pred_arr = []", "\n", "# for ref, pred, per in zip(ref_text,output_text,persona_text):", "\n", "#     ent_ref_arr.append(ent_score(ref,per))", "\n", "#     ent_pred_arr.append(ent_score(pred,per))", "\n", "", "", "print", "(", "\"Evaluate BLEU\"", ")", "\n", "\n", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "output_text", ")", ",", "np", ".", "array", "(", "ref_text", ")", ")", "\n", "print", "(", "\"BLEU:{}\"", ".", "format", "(", "BLEU", ")", ")", "\n", "# print(\"ENT REF:{}\".format(np.mean(ent_ref_arr)))", "\n", "# print(\"ENT PRED:{}\".format(np.mean(ent_pred_arr)))", "\n", "\n", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "output_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_ref.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "ref_text", ":", "\n", "                ", "f", ".", "write", "(", "line", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "", "", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_persona.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "persona_text", ":", "\n", "                ", "f", ".", "write", "(", "\"\\t\"", ".", "join", "(", "line", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "# qa interact", "\n", "", "", "", "if", "args", ".", "task", "==", "\"qa\"", ":", "\n", "        ", "output_text", "=", "[", "]", "\n", "ref_text", "=", "[", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "## load dev_set_with_ids here", "\n", "for", "pair", "in", "loaded_dataset", "[", "\"valid\"", "]", ":", "\n", "            ", "evidence", "=", "pair", "[", "\"document\"", "]", ".", "copy", "(", ")", "\n", "evidence", "=", "[", "evidence", "[", "0", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'document'", "]", "]", "]", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "out_ids", "=", "sample_sequence", "(", "tokenizer", ",", "model", ",", "args", ",", "personality", "=", "evidence", ",", "history", "=", "history", ",", "task_id", "=", "COMMAND2ID", "[", "args", ".", "task", "]", ")", "\n", "", "out_text", "=", "tokenizer", ".", "decode", "(", "out_ids", ",", "skip_special_tokens", "=", "True", ")", "\n", "output_text", ".", "append", "(", "{", "\"id\"", ":", "pair", "[", "'id'", "]", ",", "\"turn_id\"", ":", "utterance", "[", "'turn_id'", "]", ",", "\"answer\"", ":", "out_text", "}", ")", "\n", "\n", "", "", "data", "=", "json", ".", "dumps", "(", "output_text", ")", "\n", "with", "open", "(", "\"results/VLM_result/\"", "+", "args", ".", "task", "+", "\"_output.txt\"", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.average_distributed_scalar": [[55, 62], ["torch.distributed.all_reduce", "torch.distributed.all_reduce", "scalar_t.item", "torch.tensor", "torch.tensor", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["None"], ["def", "average_distributed_scalar", "(", "scalar", ",", "args", ")", ":", "\n", "    ", "\"\"\" Average a scalar over the nodes if we are in distributed training. We use this for distributed evaluation. \"\"\"", "\n", "if", "args", ".", "local_rank", "==", "-", "1", ":", "\n", "        ", "return", "scalar", "\n", "", "scalar_t", "=", "torch", ".", "tensor", "(", "scalar", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "args", ".", "device", ")", "/", "torch", ".", "distributed", ".", "get_world_size", "(", ")", "\n", "torch", ".", "distributed", ".", "all_reduce", "(", "scalar_t", ",", "op", "=", "torch", ".", "distributed", ".", "ReduceOp", ".", "SUM", ")", "\n", "return", "scalar_t", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.pad_dataset": [[64, 70], ["max", "len", "len"], "function", ["None"], ["", "def", "pad_dataset", "(", "dataset", ",", "padding", "=", "0", ")", ":", "\n", "    ", "\"\"\" Pad the dataset. This could be optimized by defining a Dataset class and padding at the batch level, but this is simpler. \"\"\"", "\n", "max_l", "=", "max", "(", "len", "(", "x", ")", "for", "x", "in", "dataset", "[", "\"input_ids\"", "]", ")", "\n", "for", "name", "in", "PADDED_INPUTS", ":", "\n", "        ", "dataset", "[", "name", "]", "=", "[", "x", "+", "[", "padding", "if", "name", "!=", "\"lm_labels\"", "else", "-", "1", "]", "*", "(", "max_l", "-", "len", "(", "x", ")", ")", "for", "x", "in", "dataset", "[", "name", "]", "]", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_": [[72, 80], ["len", "tokenizer.add_special_tokens", "model.resize_token_embeddings"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.resize_token_embeddings"], ["", "def", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Add special tokens to the tokenizer and the model if they have not already been added. \"\"\"", "\n", "orig_num_tokens", "=", "len", "(", "tokenizer", ".", "encoder", ")", "\n", "num_added_tokens", "=", "tokenizer", ".", "add_special_tokens", "(", "\n", "ATTR_TO_SPECIAL_TOKEN", ")", "# returns 0 and doesn't add if they are already there", "\n", "if", "num_added_tokens", ">", "0", ":", "\n", "        ", "model", ".", "resize_token_embeddings", "(", "\n", "new_num_tokens", "=", "orig_num_tokens", "+", "num_added_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_dialqa": [[81, 97], ["tokenizer.convert_tokens_to_ids", "list", "itertools.chain", "enumerate", "enumerate", "sum", "list", "itertools.chain", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "", "def", "build_input_from_segments_dialqa", "(", "persona", ",", "history", ",", "reply", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 3 segments for dialogue and coqa task: persona(document), history(question) and last reply(answer). \"\"\"", "\n", "bos", ",", "eos", ",", "speaker1", ",", "speaker2", ",", "persona_token", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "+", "[", "persona_token", "]", "+", "list", "(", "chain", "(", "*", "persona", ")", ")", "]", "+", "history", "+", "[", "reply", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "sequence", "=", "[", "sequence", "[", "0", "]", "]", "+", "[", "[", "speaker1", "if", "(", "len", "(", "sequence", ")", "-", "i", ")", "%", "2", "else", "speaker2", "]", "+", "s", "for", "i", ",", "s", "in", "enumerate", "(", "sequence", "[", "1", ":", "]", ")", "]", "\n", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "persona_token", "for", "_", "in", "sequence", "[", "0", "]", "]", "+", "[", "speaker2", "if", "i", "%", "2", "else", "speaker1", "for", "i", ",", "s", "in", "enumerate", "(", "sequence", "[", "1", ":", "]", ")", "for", "_", "in", "s", "]", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "instance", "[", "\"task_id\"", "]", "=", "COMMAND2ID", "[", "task", "]", "\n", "# print(\"input:\", tokenizer.decode(instance[\"input_ids\"]))", "\n", "# print(\"type:\", tokenizer.decode(instance[\"token_type_ids\"]))", "\n", "# print(\"lm_label:\", instance[\"lm_labels\"])", "\n", "# print(\"==================================================\")", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_nlg": [[99, 115], ["tokenizer.convert_tokens_to_ids", "list", "tokenizer.decode", "itertools.chain", "list", "len", "itertools.chain", "sum", "source.items", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "build_input_from_segments_nlg", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 2 segments: source and target for natrual langugage generation task. \"\"\"", "\n", "bos", ",", "eos", ",", "name", ",", "eatType", ",", "familyFriendly", ",", "priceRange", ",", "food", ",", "near", ",", "area", ",", "customerRating", ",", "tgt", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "nlg_map", "=", "{", "\"name\"", ":", "name", ",", "\"eatType\"", ":", "eatType", ",", "\"familyFriendly\"", ":", "familyFriendly", ",", "\"priceRange\"", ":", "priceRange", ",", "\"food\"", ":", "food", ",", "\"near\"", ":", "near", ",", "\"area\"", ":", "area", ",", "\"customer rating\"", ":", "customerRating", "}", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "]", "+", "[", "[", "nlg_map", "[", "k", "]", "]", "+", "v", "for", "k", ",", "v", "in", "source", ".", "items", "(", ")", "]", "+", "[", "[", "tgt", "]", "+", "target", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "tokenizer", ".", "decode", "(", "instance", "[", "\"input_ids\"", "]", ")", "\n", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "bos", "]", "+", "list", "(", "chain", "(", "*", "[", "[", "s", "[", "0", "]", "]", "*", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", "1", ":", "-", "1", "]", "]", ")", ")", "+", "[", "tgt", "]", "*", "len", "(", "sequence", "[", "-", "1", "]", ")", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "instance", "[", "\"task_id\"", "]", "=", "COMMAND2ID", "[", "task", "]", "\n", "# print(\"input:\", tokenizer.decode(instance[\"input_ids\"]))", "\n", "# print(\"type:\", tokenizer.decode(instance[\"token_type_ids\"]))", "\n", "# print(\"lm_label:\", instance[\"lm_labels\"])", "\n", "# print(\"==================================================\")", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.build_input_from_segments_mtsm": [[116, 128], ["tokenizer.convert_tokens_to_ids", "list", "itertools.chain", "len", "print", "len", "len", "sum", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "build_input_from_segments_mtsm", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "False", ",", "with_eos", "=", "True", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\" Build a sequence of input from 2 segments: source and target for machine translation and summarization task. \"\"\"", "\n", "bos", ",", "eos", ",", "src", ",", "tgt", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "SPECIAL_TOKENS", "[", "task", "]", ")", "\n", "instance", "=", "{", "}", "\n", "sequence", "=", "[", "[", "bos", "]", "]", "+", "[", "[", "src", "]", "+", "source", "]", "+", "[", "[", "tgt", "]", "+", "target", "+", "(", "[", "eos", "]", "if", "with_eos", "else", "[", "]", ")", "]", "\n", "instance", "[", "\"input_ids\"", "]", "=", "list", "(", "chain", "(", "*", "sequence", ")", ")", "\n", "if", "len", "(", "instance", "[", "\"input_ids\"", "]", ")", "==", "0", ":", "\n", "        ", "print", "(", "\"yes\"", ")", "\n", "", "instance", "[", "\"token_type_ids\"", "]", "=", "[", "bos", "]", "+", "[", "src", "]", "*", "len", "(", "sequence", "[", "1", "]", ")", "+", "[", "tgt", "]", "*", "len", "(", "sequence", "[", "2", "]", ")", "\n", "instance", "[", "\"lm_labels\"", "]", "=", "(", "[", "-", "1", "]", "*", "sum", "(", "len", "(", "s", ")", "for", "s", "in", "sequence", "[", ":", "-", "1", "]", ")", ")", "+", "[", "-", "1", "]", "+", "sequence", "[", "-", "1", "]", "[", "1", ":", "]", "\n", "instance", "[", "\"task_id\"", "]", "=", "COMMAND2ID", "[", "task", "]", "\n", "return", "instance", ",", "sequence", "# TODO: second arg is never used, delete it", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.get_data_loaders": [[130, 267], ["logger.info", "datasets.items", "logger.info", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "logger.info", "logger.info", "collections.defaultdict", "collections.defaultdict", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset.items", "utils.get_dataset", "logger.info", "train_vlm.pad_dataset", "torch.utils.data.TensorDataset", "torch.utils.data.TensorDataset", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "train_vlm.get_data_loaders.load_dial"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.pad_dataset"], ["", "def", "get_data_loaders", "(", "args", ",", "tokenizer", ")", ":", "\n", "    ", "\"\"\" Prepare the dataset for training and evaluation \"\"\"", "\n", "datasets", "=", "{", "\"train\"", ":", "defaultdict", "(", "list", ")", ",", "\"valid\"", ":", "defaultdict", "(", "list", ")", "}", "\n", "def", "load_dial", "(", ")", ":", "\n", "        ", "args", ".", "max_history", "=", "2", "\n", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"test\"", ":", "\n", "                ", "continue", "\n", "", "tgt", "=", "\"candidates\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_candidates\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "persona", "=", "pair", "[", "\"personality\"", "]", ".", "copy", "(", ")", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "candidate", "=", "utterance", "[", "tgt", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "persona", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "persona", "=", "[", "persona", "[", "-", "1", "]", "]", "+", "persona", "[", ":", "-", "1", "]", "# permuted personalities", "\n", "\n", "", "", "", "", "def", "load_smd", "(", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"test\"", ":", "\n", "                ", "continue", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "kb", "=", "pair", "[", "\"KB\"", "]", ".", "copy", "(", ")", "\n", "if", "len", "(", "list", "(", "chain", "(", "*", "kb", ")", ")", ")", ">", "800", ":", "\n", "                    ", "continue", "\n", "#print(\"Long KB:\", count)", "\n", "", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "\n", "\n", "candidate", "=", "utterance", "[", "\"candidates\"", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "kb", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "\n", "\n", "", "", "", "", "", "def", "load_qa", "(", ")", ":", "\n", "        ", "args", ".", "max_history", "=", "1", "\n", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"test\"", ":", "\n", "                ", "continue", "\n", "", "tgt", "=", "\"candidates\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_candidates\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "evidence", "=", "pair", "[", "\"document\"", "]", ".", "copy", "(", ")", "\n", "evidence", "=", "[", "evidence", "[", "0", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'document'", "]", "]", "]", "\n", "for", "utterance", "in", "pair", "[", "\"utterances\"", "]", ":", "\n", "                    ", "history", "=", "utterance", "[", "\"history\"", "]", "[", "-", "(", "2", "*", "args", ".", "max_history", "+", "1", ")", ":", "]", "\n", "candidate", "=", "utterance", "[", "tgt", "]", "[", "-", "1", "]", "#only last one candidate which is gold response", "\n", "lm_labels", "=", "True", "# always train language model", "\n", "instance", ",", "_", "=", "build_input_from_segments_dialqa", "(", "evidence", ",", "history", ",", "candidate", ",", "tokenizer", ",", "lm_labels", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                        ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "", "def", "load_nlg", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"test\"", ":", "\n", "                ", "continue", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "                ", "source", "=", "pair", "[", "\"src\"", "]", "\n", "target", "=", "pair", "[", "\"tgt\"", "]", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                    ", "target", "=", "pair", "[", "\"distillated_tgt\"", "]", "\n", "", "instance", ",", "_", "=", "build_input_from_segments_nlg", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "True", ",", "with_eos", "=", "True", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                    ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "def", "load_mtsm", "(", ")", ":", "\n", "        ", "for", "dataset_name", ",", "dataset", "in", "loaded_dataset", ".", "items", "(", ")", ":", "\n", "            ", "if", "dataset_name", "==", "\"test\"", ":", "\n", "                ", "if", "args", ".", "task", "==", "\"mt\"", ":", "\n", "                    ", "dataset_name", "=", "\"valid\"", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "", "if", "dataset_name", "==", "\"val\"", ":", "\n", "                ", "dataset_name", "=", "\"valid\"", "# fix dataset key error", "\n", "", "tgt", "=", "\"tgt\"", "\n", "if", "(", "args", ".", "distillation", "and", "dataset_name", "==", "\"train\"", ")", ":", "\n", "                ", "tgt", "=", "\"distillated_tgt\"", "\n", "", "for", "pair", "in", "dataset", ":", "\n", "#print(pair)", "\n", "                ", "if", "len", "(", "pair", "[", "\"src\"", "]", ")", "<", "2", "or", "len", "(", "pair", "[", "tgt", "]", ")", "<", "2", ":", "# filter the short sentence", "\n", "                    ", "continue", "\n", "", "source", "=", "pair", "[", "\"src\"", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'src'", "]", "]", "\n", "target", "=", "pair", "[", "tgt", "]", "[", ":", "MAXLEN_MAP", "[", "args", ".", "task", "]", "[", "'tgt'", "]", "]", "\n", "instance", ",", "_", "=", "build_input_from_segments_mtsm", "(", "source", ",", "target", ",", "tokenizer", ",", "lm_labels", "=", "True", ",", "with_eos", "=", "True", ",", "task", "=", "args", ".", "task", ")", "\n", "for", "input_name", ",", "input_array", "in", "instance", ".", "items", "(", ")", ":", "\n", "                    ", "datasets", "[", "dataset_name", "]", "[", "input_name", "]", ".", "append", "(", "input_array", ")", "\n", "", "", "", "", "logger", ".", "info", "(", "\"Pad inputs and convert to Tensor\"", ")", "\n", "tensor_datasets", "=", "{", "\"train\"", ":", "[", "]", ",", "\"valid\"", ":", "[", "]", "}", "\n", "for", "task", "in", "ID2COMMAND", ":", "\n", "        ", "args", ".", "task", "=", "task", "\n", "args", ".", "dataset_path", "=", "TASK2PATH", "[", "task", "]", "\n", "loaded_dataset", "=", "get_dataset", "(", "tokenizer", ",", "args", ".", "dataset_path", ",", "args", ".", "dataset_cache", ",", "args", ".", "task", ")", "\n", "logger", ".", "info", "(", "\"Build inputs and labels\"", ")", "\n", "\n", "if", "args", ".", "task", "==", "\"dialogue\"", ":", "\n", "            ", "load_dial", "(", ")", "\n", "\n", "", "elif", "args", ".", "task", "==", "\"qa\"", ":", "\n", "            ", "load_qa", "(", ")", "\n", "\n", "", "elif", "args", ".", "task", "==", "\"nlg\"", ":", "\n", "            ", "load_nlg", "(", ")", "\n", "", "elif", "args", ".", "task", "==", "\"mt\"", ":", "\n", "            ", "load_mtsm", "(", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "load_mtsm", "(", ")", "\n", "", "", "args", ".", "task", "=", "\"multi-task\"", "\n", "\n", "for", "dataset_name", ",", "dataset", "in", "datasets", ".", "items", "(", ")", ":", "\n", "        ", "dataset", "=", "pad_dataset", "(", "dataset", ",", "padding", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "ATTR_TO_SPECIAL_TOKEN", "[", "'pad_token'", "]", ")", ")", "\n", "for", "input_name", "in", "MODEL_INPUTS", ":", "\n", "            ", "tensor", "=", "torch", ".", "tensor", "(", "dataset", "[", "input_name", "]", ")", "\n", "\n", "tensor", "=", "tensor", ".", "view", "(", "(", "-", "1", ",", "1", ")", "+", "tensor", ".", "shape", "[", "1", ":", "]", ")", "#always one candidate", "\n", "\n", "tensor_datasets", "[", "dataset_name", "]", ".", "append", "(", "tensor", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Build train and validation dataloaders\"", ")", "\n", "train_dataset", ",", "valid_dataset", "=", "TensorDataset", "(", "*", "tensor_datasets", "[", "\"train\"", "]", ")", ",", "TensorDataset", "(", "*", "tensor_datasets", "[", "\"valid\"", "]", ")", "\n", "\n", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "if", "args", ".", "distributed", "else", "None", "\n", "valid_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "valid_dataset", ")", "if", "args", ".", "distributed", "else", "None", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "args", ".", "train_batch_size", ",", "shuffle", "=", "(", "not", "args", ".", "distributed", ")", ")", "\n", "valid_loader", "=", "DataLoader", "(", "valid_dataset", ",", "sampler", "=", "valid_sampler", ",", "batch_size", "=", "args", ".", "valid_batch_size", ",", "shuffle", "=", "False", ")", "\n", "\n", "logger", ".", "info", "(", "\"Train dataset (Batch, Candidates, Seq length): {}\"", ".", "format", "(", "train_dataset", ".", "tensors", "[", "0", "]", ".", "shape", ")", ")", "\n", "logger", ".", "info", "(", "\"Valid dataset (Batch, Candidates, Seq length): {}\"", ".", "format", "(", "valid_dataset", ".", "tensors", "[", "0", "]", ".", "shape", ")", ")", "\n", "return", "train_loader", ",", "valid_loader", ",", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.count_parameters": [[268, 270], ["sum", "p.numel"], "function", ["None"], ["", "def", "count_parameters", "(", "list_param", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "list_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.count_parameters_model": [[271, 273], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters_model", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.train": [[274, 453], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "logging.basicConfig", "logger.warning", "logger.info", "logger.info", "tokenizer_class.from_pretrained", "torch.nn.parallel.DistributedDataParallel.to", "train_vlm.add_special_tokens_", "pytorch_transformers.AdamW", "logger.info", "train_vlm.get_data_loaders", "ignite.engine.Engine", "ignite.engine.Engine", "ignite.engine.Engine.add_event_handler", "ignite.contrib.handlers.PiecewiseLinear", "ignite.engine.Engine.add_event_handler", "ignite.metrics.RunningAverage().attach", "metrics.update", "ignite.metrics.MetricsLambda", "metrics.items", "ignite.engine.Engine.run", "pprint.pformat", "torch.cuda.set_device", "torch.cuda.set_device", "torch.device", "torch.device", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "model_class.from_pretrained", "model_class.from_pretrained", "torch.nn.parallel.DistributedDataParallel.parameters", "amp.initialize", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.train", "tuple", "task_id.squeeze.squeeze", "loss.item", "torch.nn.parallel.DistributedDataParallel.eval", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.engine.Engine.add_event_handler", "ignite.metrics.Loss", "metric.attach", "ignite.contrib.handlers.ProgressBar", "ignite.contrib.handlers.ProgressBar.attach", "ignite.engine.Engine.add_event_handler", "utils.make_logdir", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.attach", "ignite.handlers.ModelCheckpoint", "ignite.engine.Engine.add_event_handler", "torch.save", "torch.save", "getattr().config.to_json_file", "tokenizer_class.from_pretrained.save_pretrained", "os.rename", "ignite.contrib.handlers.tensorboard_logger.TensorboardLogger.close", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "pytorch_transformers.AdamW.step", "pytorch_transformers.AdamW.zero_grad", "torch.no_grad", "torch.no_grad", "tuple", "task_id.squeeze.squeeze", "logger.info", "lm_logits[].contiguous().view", "lm_labels[].contiguous().view", "ignite.engine.Engine.run", "ignite.metrics.RunningAverage", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "ignite.metrics.MetricsLambda", "os.path.join", "os.path.join", "torch.cuda.is_available", "torch.cuda.is_available", "input_tensor.to", "amp.scale_loss", "scaled_loss.backward", "amp.master_params", "torch.nn.parallel.DistributedDataParallel.parameters", "tokenizer_class.from_pretrained.decode", "torch.nn.parallel.DistributedDataParallel.", "torch.nn.parallel.DistributedDataParallel.", "lm_logits.size", "ignite.engine.Engine.run", "ignite.engine.Engine.run", "train_sampler.set_epoch", "valid_sampler.set_epoch", "ignite.contrib.handlers.ProgressBar.log_message", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "ignite.contrib.handlers.tensorboard_logger.OptimizerParamsHandler", "ignite.contrib.handlers.tensorboard_logger.OutputHandler", "getattr", "input_tensor.to", "input_ids[].tolist", "lm_logits[].contiguous", "lm_labels[].contiguous", "len", "getattr", "pprint.pformat", "list", "metrics.keys"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.add_special_tokens_", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.get_data_loaders", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.None.train_vlm.train", "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.make_logdir", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.save_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.AdamW.step", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run"], ["", "def", "train", "(", ")", ":", "\n", "    ", "parser", "=", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_path\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Path or url of the dataset. If empty download from S3.\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dataset_cache\"", ",", "type", "=", "str", ",", "default", "=", "'./dataset_cache'", ",", "help", "=", "\"Path or url of the dataset cache\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_checkpoint\"", ",", "type", "=", "str", ",", "default", "=", "\"gpt2\"", ",", "help", "=", "\"Path, url or short name of the model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--task\"", ",", "type", "=", "str", ",", "default", "=", "\"dialogue\"", ",", "help", "=", "\"one of task from [dialogue, qa, mt, nlg, summarization]\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--emb_only\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"fine tune only task embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--linear_perturb\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"fine tune only task embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_history\"", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "\"Number of previous exchanges to keep in history\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--train_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--valid_batch_size\"", ",", "type", "=", "int", ",", "default", "=", "4", ",", "help", "=", "\"Batch size for validation\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--gradient_accumulation_steps\"", ",", "type", "=", "int", ",", "default", "=", "8", ",", "help", "=", "\"Accumulate gradients on several steps\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lr\"", ",", "type", "=", "float", ",", "default", "=", "6.25e-5", ",", "help", "=", "\"Learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--lm_coef\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"LM loss coefficient\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max_norm\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "\"Clipping gradient norm\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--n_epochs\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of training epochs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--personality_permutations\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "\"Number of permutations of personality sentences\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--eval_before_start\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"If true start with a first evaluation before training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--device\"", ",", "type", "=", "str", ",", "default", "=", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ",", "help", "=", "\"Device (cuda or cpu)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--fp16\"", ",", "type", "=", "str", ",", "default", "=", "\"\"", ",", "help", "=", "\"Set to O0, O1, O2 or O3 for fp16 training (see apex documentation)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--local_rank\"", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "\"Local rank for distributed training (-1: not distributed)\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--perturbation_layers\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of perturbation layers\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--self_copy\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"add self copy \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--adapter_bottleneck\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"adapter layer bottleneck\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--random_init\"", ",", "action", "=", "'store_true'", ",", "help", "=", "\"don't use GPT-2 pre-trained model \"", ")", "\n", "parser", ".", "add_argument", "(", "\"--distillation\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--outputlayer_only\"", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "\"--no_adapter\"", ",", "action", "=", "'store_true'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# logging is set to INFO (resp. WARN) for main (resp. auxiliary) process. logger.info => log main process only, logger.warning => log all processes", "\n", "logging", ".", "basicConfig", "(", "level", "=", "logging", ".", "INFO", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "else", "logging", ".", "WARN", ")", "\n", "logger", ".", "warning", "(", "\"Running process %d\"", ",", "args", ".", "local_rank", ")", "# This is a logger.warning: it will be printed by all distributed processes", "\n", "logger", ".", "info", "(", "\"Arguments: %s\"", ",", "pformat", "(", "args", ")", ")", "\n", "\n", "# Initialize distributed training if needed", "\n", "args", ".", "distributed", "=", "(", "args", ".", "local_rank", "!=", "-", "1", ")", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "local_rank", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", ",", "args", ".", "local_rank", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "backend", "=", "'nccl'", ",", "init_method", "=", "'env://'", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Prepare tokenizer, pretrained model and optimizer.\"", ")", "\n", "tokenizer_class", "=", "GPT2Tokenizer", "if", "\"gpt2\"", "in", "args", ".", "model_checkpoint", "else", "OpenAIGPTTokenizer", "# cant use Autotokenizer because checkpoint could be a Path", "\n", "tokenizer", "=", "tokenizer_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ")", "\n", "#config = GPT2Config()", "\n", "if", "args", ".", "no_adapter", ":", "\n", "        ", "model_class", "=", "GPT2LMHeadModel", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "perturbation_layers", "=", "0", ",", "self_copy", "=", "False", ",", "adapter_bottleneck", "=", "0", ")", "\n", "", "else", ":", "\n", "        ", "model_class", "=", "VLM", "\n", "model", "=", "model_class", ".", "from_pretrained", "(", "args", ".", "model_checkpoint", ",", "bottleneck_map", "=", "BOTTLEBECK_MAP", ")", "\n", "\n", "", "model", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "# Add special tokens if they are not already added", "\n", "add_special_tokens_", "(", "model", ",", "tokenizer", ")", "\n", "\n", "\n", "optimizer", "=", "AdamW", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "correct_bias", "=", "True", ")", "\n", "\n", "# Prepare model for FP16 and distributed training if needed (order is important, distributed should be the last)", "\n", "if", "args", ".", "fp16", ":", "\n", "        ", "from", "apex", "import", "amp", "# Apex is only required if we use fp16 training", "\n", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "opt_level", "=", "args", ".", "fp16", ")", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "model", "=", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "local_rank", "]", ",", "output_device", "=", "args", ".", "local_rank", ",", "find_unused_parameters", "=", "True", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Prepare datasets\"", ")", "\n", "train_loader", ",", "val_loader", ",", "train_sampler", ",", "valid_sampler", "=", "get_data_loaders", "(", "args", ",", "tokenizer", ")", "\n", "\n", "# Training function and trainer", "\n", "def", "update_all", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", ",", "task_id", "=", "batch", "\n", "task_id", "=", "task_id", ".", "squeeze", "(", ")", "\n", "#print(\"task_id,\", task_id.shape, task_id)", "\n", "if", "args", ".", "no_adapter", ":", "\n", "            ", "(", "lm_loss", ")", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "lm_labels", "\n", ")", "\n", "", "else", ":", "\n", "            ", "(", "lm_loss", ")", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "labels", "=", "lm_labels", ",", "task_id", "=", "task_id", "\n", ")", "\n", "", "loss", "=", "lm_loss", "/", "args", ".", "gradient_accumulation_steps", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "amp", ".", "master_params", "(", "optimizer", ")", ",", "args", ".", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "loss", ".", "backward", "(", ")", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "max_norm", ")", "\n", "", "if", "engine", ".", "state", ".", "iteration", "%", "args", ".", "gradient_accumulation_steps", "==", "0", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "return", "loss", ".", "item", "(", ")", "\n", "\n", "", "trainer", "=", "Engine", "(", "update_all", ")", "\n", "\n", "# Evaluation function and evaluator (evaluator output is the input of the metrics)", "\n", "def", "inference", "(", "engine", ",", "batch", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "batch", "=", "tuple", "(", "input_tensor", ".", "to", "(", "args", ".", "device", ")", "for", "input_tensor", "in", "batch", ")", "\n", "input_ids", ",", "lm_labels", ",", "token_type_ids", ",", "task_id", "=", "batch", "\n", "task_id", "=", "task_id", ".", "squeeze", "(", ")", "\n", "logger", ".", "info", "(", "tokenizer", ".", "decode", "(", "input_ids", "[", "0", ",", "-", "1", ",", ":", "]", ".", "tolist", "(", ")", ")", ")", "\n", "# if we dont send labels to model, it doesnt return losses", "\n", "if", "args", ".", "no_adapter", ":", "\n", "                ", "lm_logits", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", "\n", ")", "\n", "", "else", ":", "\n", "                ", "lm_logits", ",", "*", "_", "=", "model", "(", "\n", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "task_id", "=", "task_id", "\n", ")", "\n", "", "lm_logits_flat_shifted", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "lm_logits", ".", "size", "(", "-", "1", ")", ")", "\n", "lm_labels_flat_shifted", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "(", "lm_logits_flat_shifted", ",", ")", ",", "(", "lm_labels_flat_shifted", ",", ")", "\n", "", "", "evaluator", "=", "Engine", "(", "inference", ")", "\n", "\n", "# Attach evaluation to trainer: we evaluate when we start the training and at the end of each epoch", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "if", "args", ".", "n_epochs", "<", "1", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "", "if", "args", ".", "eval_before_start", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "STARTED", ",", "lambda", "_", ":", "evaluator", ".", "run", "(", "val_loader", ")", ")", "\n", "\n", "# Make sure distributed data samplers split the dataset nicely between the distributed processes", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", ",", "lambda", "engine", ":", "train_sampler", ".", "set_epoch", "(", "engine", ".", "state", ".", "epoch", ")", ")", "\n", "evaluator", ".", "add_event_handler", "(", "Events", ".", "EPOCH_STARTED", ",", "lambda", "engine", ":", "valid_sampler", ".", "set_epoch", "(", "engine", ".", "state", ".", "epoch", ")", ")", "\n", "\n", "# Linearly decrease the learning rate from lr to zero", "\n", "", "scheduler", "=", "PiecewiseLinear", "(", "optimizer", ",", "\"lr\"", ",", "[", "(", "0", ",", "args", ".", "lr", ")", ",", "(", "args", ".", "n_epochs", "*", "len", "(", "train_loader", ")", ",", "0.0", ")", "]", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "ITERATION_STARTED", ",", "scheduler", ")", "\n", "\n", "# Prepare metrics - note how we compute distributed metrics", "\n", "RunningAverage", "(", "output_transform", "=", "lambda", "x", ":", "x", ")", ".", "attach", "(", "trainer", ",", "\"loss\"", ")", "\n", "metrics", "=", "{", "\"nll\"", ":", "Loss", "(", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", ",", "output_transform", "=", "lambda", "x", ":", "(", "x", "[", "0", "]", "[", "0", "]", ",", "x", "[", "1", "]", "[", "0", "]", ")", ")", "}", "\n", "metrics", ".", "update", "(", "{", "\"average_nll\"", ":", "MetricsLambda", "(", "average_distributed_scalar", ",", "metrics", "[", "\"nll\"", "]", ",", "args", ")", "}", ")", "\n", "metrics", "[", "\"average_ppl\"", "]", "=", "MetricsLambda", "(", "math", ".", "exp", ",", "metrics", "[", "\"average_nll\"", "]", ")", "\n", "for", "name", ",", "metric", "in", "metrics", ".", "items", "(", ")", ":", "\n", "        ", "metric", ".", "attach", "(", "evaluator", ",", "name", ")", "\n", "\n", "# On the main process: add progress bar, tensorboard, checkpoints and save model, configuration and tokenizer before we start to train", "\n", "", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", ":", "\n", "        ", "pbar", "=", "ProgressBar", "(", "persist", "=", "True", ")", "\n", "pbar", ".", "attach", "(", "trainer", ",", "metric_names", "=", "[", "\"loss\"", "]", ")", "\n", "evaluator", ".", "add_event_handler", "(", "Events", ".", "COMPLETED", ",", "lambda", "_", ":", "pbar", ".", "log_message", "(", "\"Validation: %s\"", "%", "pformat", "(", "evaluator", ".", "state", ".", "metrics", ")", ")", ")", "\n", "\n", "log_dir", "=", "make_logdir", "(", "args", ".", "model_checkpoint", ",", "task", "=", "args", ".", "task", ",", "lr", "=", "args", ".", "lr", ",", "layer", "=", "args", ".", "perturbation_layers", ",", "self_copy", "=", "args", ".", "self_copy", ",", "n_epochs", "=", "args", ".", "n_epochs", ",", "adapter", "=", "args", ".", "adapter_bottleneck", ",", "random_init", "=", "args", ".", "random_init", ")", "\n", "if", "args", ".", "distillation", ":", "\n", "            ", "log_dir", "+=", "\"_distillation\"", "\n", "", "if", "args", ".", "outputlayer_only", ":", "\n", "            ", "log_dir", "+=", "\"_outputlayer_only\"", "\n", "", "tb_logger", "=", "TensorboardLogger", "(", "log_dir", ")", "\n", "\n", "tb_logger", ".", "attach", "(", "trainer", ",", "log_handler", "=", "OutputHandler", "(", "tag", "=", "\"training\"", ",", "metric_names", "=", "[", "\"loss\"", "]", ")", ",", "event_name", "=", "Events", ".", "ITERATION_COMPLETED", ")", "\n", "tb_logger", ".", "attach", "(", "trainer", ",", "log_handler", "=", "OptimizerParamsHandler", "(", "optimizer", ")", ",", "event_name", "=", "Events", ".", "ITERATION_STARTED", ")", "\n", "tb_logger", ".", "attach", "(", "evaluator", ",", "log_handler", "=", "OutputHandler", "(", "tag", "=", "\"validation\"", ",", "metric_names", "=", "list", "(", "metrics", ".", "keys", "(", ")", ")", ",", "another_engine", "=", "trainer", ")", ",", "event_name", "=", "Events", ".", "EPOCH_COMPLETED", ")", "\n", "\n", "checkpoint_handler", "=", "ModelCheckpoint", "(", "log_dir", ",", "'checkpoint'", ",", "save_interval", "=", "1", ",", "n_saved", "=", "3", ")", "\n", "trainer", ".", "add_event_handler", "(", "Events", ".", "EPOCH_COMPLETED", ",", "checkpoint_handler", ",", "{", "'mymodel'", ":", "getattr", "(", "model", ",", "'module'", ",", "model", ")", "}", ")", "# \"getattr\" takes care of distributed encapsulation", "\n", "\n", "torch", ".", "save", "(", "args", ",", "log_dir", "+", "'/model_training_args.bin'", ")", "\n", "getattr", "(", "model", ",", "'module'", ",", "model", ")", ".", "config", ".", "to_json_file", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "CONFIG_NAME", ")", ")", "\n", "tokenizer", ".", "save_pretrained", "(", "log_dir", ")", "\n", "\n", "# Run the training", "\n", "", "trainer", ".", "run", "(", "train_loader", ",", "max_epochs", "=", "args", ".", "n_epochs", ")", "\n", "\n", "# On the main process: close tensorboard logger and rename the last checkpoint (for easy re-loading with OpenAIGPTModel.from_pretrained method)", "\n", "if", "args", ".", "local_rank", "in", "[", "-", "1", ",", "0", "]", "and", "args", ".", "n_epochs", ">", "0", ":", "\n", "        ", "os", ".", "rename", "(", "checkpoint_handler", ".", "_saved", "[", "-", "1", "]", "[", "1", "]", "[", "-", "1", "]", ",", "os", ".", "path", ".", "join", "(", "log_dir", ",", "WEIGHTS_NAME", ")", ")", "# TODO: PR in ignite to have better access to saved file paths (cleaner)", "\n", "tb_logger", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.AttrDict.__init__": [[94, 97], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "AttrDict", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "__dict__", "=", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.download_pretrained_model": [[21, 30], ["pytorch_transformers.cached_path", "tempfile.mkdtemp", "logger.info", "tarfile.open", "archive.extractall"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path"], ["def", "download_pretrained_model", "(", ")", ":", "\n", "    ", "\"\"\" Download and extract finetuned model from S3 \"\"\"", "\n", "resolved_archive_file", "=", "cached_path", "(", "HF_FINETUNED_MODEL", ")", "\n", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"extracting archive file {} to temp dir {}\"", ".", "format", "(", "resolved_archive_file", ",", "tempdir", ")", ")", "\n", "with", "tarfile", ".", "open", "(", "resolved_archive_file", ",", "'r:gz'", ")", "as", "archive", ":", "\n", "        ", "archive", ".", "extractall", "(", "tempdir", ")", "\n", "", "return", "tempdir", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset": [[32, 60], ["os.path.isfile", "logger.info", "torch.load", "logger.info", "pytorch_transformers.cached_path", "logger.info", "utils.get_dataset.tokenize"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "get_dataset", "(", "tokenizer", ",", "dataset_path", ",", "dataset_cache", "=", "None", ",", "task", "=", "None", ",", "return_cachepath", "=", "False", ")", ":", "\n", "    ", "dataset_cache", "=", "dataset_cache", "+", "'_'", "+", "type", "(", "tokenizer", ")", ".", "__name__", "+", "'_'", "+", "task", "# Do avoid using GPT cache for GPT-2 and vice-versa", "\n", "if", "dataset_cache", "and", "os", ".", "path", ".", "isfile", "(", "dataset_cache", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Load tokenized dataset from cache at %s\"", ",", "dataset_cache", ")", "\n", "dataset", "=", "torch", ".", "load", "(", "dataset_cache", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Download dataset from %s\"", ",", "dataset_path", ")", "\n", "dataset_file", "=", "cached_path", "(", "dataset_path", ")", "\n", "with", "open", "(", "dataset_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "dataset", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Tokenize and encode the dataset\"", ")", "\n", "def", "tokenize", "(", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "str", ")", ":", "\n", "                ", "return", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "tokenize", "(", "obj", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "return", "dict", "(", "(", "n", ",", "o", ")", "if", "(", "n", "==", "'id'", "or", "n", "==", "'turn_id'", ")", "else", "(", "n", ",", "tokenize", "(", "o", ")", ")", "for", "n", ",", "o", "in", "obj", ".", "items", "(", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "int", ")", ":", "\n", "                ", "return", "obj", "\n", "", "return", "list", "(", "tokenize", "(", "o", ")", "for", "o", "in", "obj", ")", "\n", "\n", "", "dataset", "=", "tokenize", "(", "dataset", ")", "\n", "if", "dataset_cache", ":", "\n", "            ", "torch", ".", "save", "(", "dataset", ",", "dataset_cache", ")", "\n", "", "", "if", "return_cachepath", ":", "\n", "        ", "return", "dataset", ",", "dataset_cache", "\n", "", "else", ":", "\n", "        ", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.get_dataset_personalities": [[61, 92], ["os.path.isfile", "logger.info", "json.loads.values", "logger.info", "logger.info", "torch.load", "logger.info", "pytorch_transformers.cached_path", "logger.info", "utils.get_dataset.tokenize"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "", "def", "get_dataset_personalities", "(", "tokenizer", ",", "dataset_path", ",", "dataset_cache", "=", "None", ",", "task", "=", "None", ")", ":", "\n", "    ", "dataset_cache", "=", "dataset_cache", "+", "'_'", "+", "type", "(", "tokenizer", ")", ".", "__name__", "+", "'_'", "+", "task", "# Do avoid using GPT cache for GPT-2 and vice-versa", "\n", "if", "os", ".", "path", ".", "isfile", "(", "dataset_cache", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Load tokenized dataset from cache at %s\"", ",", "dataset_cache", ")", "\n", "personachat", "=", "torch", ".", "load", "(", "dataset_cache", ")", "\n", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"Download PERSONACHAT dataset from %s\"", ",", "dataset_path", ")", "\n", "dataset_file", "=", "cached_path", "(", "dataset_path", ")", "\n", "with", "open", "(", "dataset_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "personachat", "=", "json", ".", "loads", "(", "f", ".", "read", "(", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Tokenize and encode the dataset\"", ")", "\n", "def", "tokenize", "(", "obj", ")", ":", "\n", "            ", "if", "isinstance", "(", "obj", ",", "str", ")", ":", "\n", "                ", "return", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenizer", ".", "tokenize", "(", "obj", ")", ")", "\n", "", "if", "isinstance", "(", "obj", ",", "dict", ")", ":", "\n", "                ", "if", "(", "'id'", "in", "obj", ".", "keys", "(", ")", ")", "or", "(", "'turn_id'", "in", "obj", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "return", "obj", "\n", "", "return", "dict", "(", "(", "n", ",", "tokenize", "(", "o", ")", ")", "for", "n", ",", "o", "in", "obj", ".", "items", "(", ")", ")", "\n", "", "return", "list", "(", "tokenize", "(", "o", ")", "for", "o", "in", "obj", ")", "\n", "", "personachat", "=", "tokenize", "(", "personachat", ")", "\n", "torch", ".", "save", "(", "personachat", ",", "dataset_cache", ")", "\n", "", "logger", ".", "info", "(", "\"Filter personalities\"", ")", "\n", "personalities", "=", "[", "]", "\n", "for", "dataset", "in", "personachat", ".", "values", "(", ")", ":", "\n", "        ", "for", "dialog", "in", "dataset", ":", "\n", "            ", "personalities", ".", "append", "(", "dialog", "[", "\"personality\"", "]", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "\"Gathered {} personalities\"", ".", "format", "(", "len", "(", "personalities", ")", ")", ")", "\n", "return", "personalities", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.None.utils.make_logdir": [[99, 106], ["datetime.datetime.now().strftime", "os.path.join", "datetime.datetime.now", "str", "str", "str", "str", "str", "str", "socket.gethostname"], "function", ["None"], ["", "", "def", "make_logdir", "(", "model_name", ":", "str", ",", "task", ",", "lr", ",", "layer", ",", "self_copy", ",", "n_epochs", ",", "adapter", ",", "random_init", "=", "False", ")", ":", "\n", "    ", "\"\"\"Create unique path to save results and checkpoints, e.g. runs/Sep22_19-45-59_gpu-7_gpt2\"\"\"", "\n", "# Code copied from ignite repo", "\n", "current_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", "\n", "logdir", "=", "os", ".", "path", ".", "join", "(", "\n", "'runs'", ",", "current_time", "+", "'_'", "+", "socket", ".", "gethostname", "(", ")", "+", "'_'", "+", "model_name", "+", "'_'", "+", "task", "+", "'_'", "+", "str", "(", "lr", ")", "+", "'_'", "+", "str", "(", "layer", ")", "+", "'_'", "+", "str", "(", "self_copy", ")", "+", "'_epoch'", "+", "str", "(", "n_epochs", ")", "+", "'adapter'", "+", "str", "(", "adapter", ")", "+", "'random'", "+", "str", "(", "random_init", ")", ")", "\n", "return", "logdir", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu": [[43, 93], ["os.chmod", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.write", "tempfile.NamedTemporaryFile.flush", "tempfile.NamedTemporaryFile.close", "tempfile.NamedTemporaryFile.close", "numpy.size", "numpy.float32", "open", "subprocess.check_output", "bleu_out.decode.decode", "re.search().group", "float", "re.search", "print", "print", "numpy.float32"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["def", "moses_multi_bleu", "(", "hypotheses", ",", "references", ",", "lowercase", "=", "False", ")", ":", "\n", "    ", "\"\"\"Calculate the bleu score for hypotheses and references\n    using the MOSES ulti-bleu.perl script.\n    Args:\n    hypotheses: A numpy array of strings where each string is a single example.\n    references: A numpy array of strings where each string is a single example.\n    lowercase: If true, pass the \"-lc\" flag to the multi-bleu script\n    Returns:\n    The BLEU score as a float32 value.\n    \"\"\"", "\n", "\n", "if", "np", ".", "size", "(", "hypotheses", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "", "multi_bleu_path", "=", "\"util/multi-bleu.perl\"", "\n", "os", ".", "chmod", "(", "multi_bleu_path", ",", "0o755", ")", "\n", "\n", "\n", "# Dump hypotheses and references to tempfiles", "\n", "hypothesis_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "hypothesis_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "hypotheses", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "hypothesis_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "hypothesis_file", ".", "flush", "(", ")", "\n", "reference_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "reference_file", ".", "write", "(", "\"\\n\"", ".", "join", "(", "references", ")", ".", "encode", "(", "\"utf-8\"", ")", ")", "\n", "reference_file", ".", "write", "(", "b\"\\n\"", ")", "\n", "reference_file", ".", "flush", "(", ")", "\n", "\n", "\n", "# Calculate BLEU using multi-bleu script", "\n", "with", "open", "(", "hypothesis_file", ".", "name", ",", "\"r\"", ")", "as", "read_pred", ":", "\n", "        ", "bleu_cmd", "=", "[", "multi_bleu_path", "]", "\n", "if", "lowercase", ":", "\n", "            ", "bleu_cmd", "+=", "[", "\"-lc\"", "]", "\n", "", "bleu_cmd", "+=", "[", "reference_file", ".", "name", "]", "\n", "try", ":", "\n", "            ", "bleu_out", "=", "subprocess", ".", "check_output", "(", "bleu_cmd", ",", "stdin", "=", "read_pred", ",", "stderr", "=", "subprocess", ".", "STDOUT", ")", "\n", "bleu_out", "=", "bleu_out", ".", "decode", "(", "\"utf-8\"", ")", "\n", "bleu_score", "=", "re", ".", "search", "(", "r\"BLEU = (.+?),\"", ",", "bleu_out", ")", ".", "group", "(", "1", ")", "\n", "bleu_score", "=", "float", "(", "bleu_score", ")", "\n", "", "except", "subprocess", ".", "CalledProcessError", "as", "error", ":", "\n", "            ", "if", "error", ".", "output", "is", "not", "None", ":", "\n", "                ", "print", "(", "\"multi-bleu.perl script returned non-zero exit code\"", ")", "\n", "print", "(", "error", ".", "output", ")", "\n", "bleu_score", "=", "np", ".", "float32", "(", "0.0", ")", "\n", "\n", "# Close temp files", "\n", "", "", "", "hypothesis_file", ".", "close", "(", ")", "\n", "reference_file", ".", "close", "(", ")", "\n", "return", "bleu_score", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._get_ngrams": [[97, 111], ["set", "len", "range", "set.add", "tuple"], "function", ["None"], ["", "def", "_get_ngrams", "(", "n", ",", "text", ")", ":", "\n", "  ", "\"\"\"Calcualtes n-grams.\n  Args:\n    n: which n-grams to calculate\n    text: An array of tokens\n  Returns:\n    A set of n-grams\n  \"\"\"", "\n", "ngram_set", "=", "set", "(", ")", "\n", "text_length", "=", "len", "(", "text", ")", "\n", "max_index_ngram_start", "=", "text_length", "-", "n", "\n", "for", "i", "in", "range", "(", "max_index_ngram_start", "+", "1", ")", ":", "\n", "    ", "ngram_set", ".", "add", "(", "tuple", "(", "text", "[", "i", ":", "i", "+", "n", "]", ")", ")", "\n", "", "return", "ngram_set", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words": [[113, 116], ["list", "itertools.chain", "_.split"], "function", ["None"], ["", "def", "_split_into_words", "(", "sentences", ")", ":", "\n", "  ", "\"\"\"Splits multiple sentences into words and flattens the result\"\"\"", "\n", "return", "list", "(", "itertools", ".", "chain", "(", "*", "[", "_", ".", "split", "(", "\" \"", ")", "for", "_", "in", "sentences", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._get_word_ngrams": [[118, 126], ["eval_metrics._split_into_words", "eval_metrics._get_ngrams", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._get_ngrams"], ["", "def", "_get_word_ngrams", "(", "n", ",", "sentences", ")", ":", "\n", "  ", "\"\"\"Calculates word n-grams for multiple sentences.\n  \"\"\"", "\n", "assert", "len", "(", "sentences", ")", ">", "0", "\n", "assert", "n", ">", "0", "\n", "\n", "words", "=", "_split_into_words", "(", "sentences", ")", "\n", "return", "_get_ngrams", "(", "n", ",", "words", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._len_lcs": [[128, 142], ["eval_metrics._lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._lcs"], ["", "def", "_len_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Returns the length of the Longest Common Subsequence between sequences x\n  and y.\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n  Args:\n    x: sequence of words\n    y: sequence of words\n  Returns\n    integer: Length of LCS between x and y\n  \"\"\"", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "return", "table", "[", "n", ",", "m", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._lcs": [[144, 167], ["dict", "range", "len", "len", "range", "max"], "function", ["None"], ["", "def", "_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Computes the length of the longest common subsequence (lcs) between two\n  strings. The implementation below uses a DP programming algorithm and runs\n  in O(nm) time where n = len(x) and m = len(y).\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n  Args:\n    x: collection of words\n    y: collection of words\n  Returns:\n    Table of dictionary of coord and len lcs\n  \"\"\"", "\n", "n", ",", "m", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "dict", "(", ")", "\n", "for", "i", "in", "range", "(", "n", "+", "1", ")", ":", "\n", "    ", "for", "j", "in", "range", "(", "m", "+", "1", ")", ":", "\n", "      ", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "0", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "table", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "1", "\n", "", "else", ":", "\n", "        ", "table", "[", "i", ",", "j", "]", "=", "max", "(", "table", "[", "i", "-", "1", ",", "j", "]", ",", "table", "[", "i", ",", "j", "-", "1", "]", ")", "\n", "", "", "", "return", "table", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._recon_lcs": [[169, 195], ["eval_metrics._lcs", "tuple", "len", "len", "map", "eval_metrics._recon_lcs._recon"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._lcs"], ["", "def", "_recon_lcs", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Returns the Longest Subsequence between x and y.\n  Source: http://www.algorithmist.com/index.php/Longest_Common_Subsequence\n  Args:\n    x: sequence of words\n    y: sequence of words\n  Returns:\n    sequence: LCS of x and y\n  \"\"\"", "\n", "i", ",", "j", "=", "len", "(", "x", ")", ",", "len", "(", "y", ")", "\n", "table", "=", "_lcs", "(", "x", ",", "y", ")", "\n", "\n", "def", "_recon", "(", "i", ",", "j", ")", ":", "\n", "    ", "\"\"\"private recon calculation\"\"\"", "\n", "if", "i", "==", "0", "or", "j", "==", "0", ":", "\n", "      ", "return", "[", "]", "\n", "", "elif", "x", "[", "i", "-", "1", "]", "==", "y", "[", "j", "-", "1", "]", ":", "\n", "      ", "return", "_recon", "(", "i", "-", "1", ",", "j", "-", "1", ")", "+", "[", "(", "x", "[", "i", "-", "1", "]", ",", "i", ")", "]", "\n", "", "elif", "table", "[", "i", "-", "1", ",", "j", "]", ">", "table", "[", "i", ",", "j", "-", "1", "]", ":", "\n", "      ", "return", "_recon", "(", "i", "-", "1", ",", "j", ")", "\n", "", "else", ":", "\n", "      ", "return", "_recon", "(", "i", ",", "j", "-", "1", ")", "\n", "\n", "", "", "recon_tuple", "=", "tuple", "(", "map", "(", "lambda", "x", ":", "x", "[", "0", "]", ",", "_recon", "(", "i", ",", "j", ")", ")", ")", "\n", "return", "recon_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_n": [[197, 238], ["eval_metrics._get_word_ngrams", "eval_metrics._get_word_ngrams", "len", "len", "_get_word_ngrams.intersection", "len", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._get_word_ngrams", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._get_word_ngrams"], ["", "def", "rouge_n", "(", "evaluated_sentences", ",", "reference_sentences", ",", "n", "=", "2", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-N of two text collections of sentences.\n  Sourece: http://research.microsoft.com/en-us/um/people/cyl/download/\n  papers/rouge-working-note-v1.3.1.pdf\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentences: The sentences from the referene set\n    n: Size of ngram.  Defaults to 2.\n  Returns:\n    A tuple (f1, precision, recall) for ROUGE-N\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "evaluated_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "evaluated_sentences", ")", "\n", "reference_ngrams", "=", "_get_word_ngrams", "(", "n", ",", "reference_sentences", ")", "\n", "reference_count", "=", "len", "(", "reference_ngrams", ")", "\n", "evaluated_count", "=", "len", "(", "evaluated_ngrams", ")", "\n", "\n", "# Gets the overlapping ngrams between evaluated and reference", "\n", "overlapping_ngrams", "=", "evaluated_ngrams", ".", "intersection", "(", "reference_ngrams", ")", "\n", "overlapping_count", "=", "len", "(", "overlapping_ngrams", ")", "\n", "\n", "# Handle edge case. This isn't mathematically correct, but it's good enough", "\n", "if", "evaluated_count", "==", "0", ":", "\n", "    ", "precision", "=", "0.0", "\n", "", "else", ":", "\n", "    ", "precision", "=", "overlapping_count", "/", "evaluated_count", "\n", "\n", "", "if", "reference_count", "==", "0", ":", "\n", "    ", "recall", "=", "0.0", "\n", "", "else", ":", "\n", "    ", "recall", "=", "overlapping_count", "/", "reference_count", "\n", "\n", "", "f1_score", "=", "2.0", "*", "(", "(", "precision", "*", "recall", ")", "/", "(", "precision", "+", "recall", "+", "1e-8", ")", ")", "\n", "\n", "# return overlapping_count / reference_count", "\n", "return", "f1_score", ",", "precision", ",", "recall", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._f_p_r_lcs": [[240, 259], ["None"], "function", ["None"], ["", "def", "_f_p_r_lcs", "(", "llcs", ",", "m", ",", "n", ")", ":", "\n", "  ", "\"\"\"\n  Computes the LCS-based F-measure score\n  Source: http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n  Args:\n    llcs: Length of LCS\n    m: number of words in reference summary\n    n: number of words in candidate summary\n  Returns:\n    Float. LCS-based F-measure score\n  \"\"\"", "\n", "r_lcs", "=", "llcs", "/", "m", "\n", "p_lcs", "=", "llcs", "/", "n", "\n", "beta", "=", "p_lcs", "/", "(", "r_lcs", "+", "1e-12", ")", "\n", "num", "=", "(", "1", "+", "(", "beta", "**", "2", ")", ")", "*", "r_lcs", "*", "p_lcs", "\n", "denom", "=", "r_lcs", "+", "(", "(", "beta", "**", "2", ")", "*", "p_lcs", ")", "\n", "f_lcs", "=", "num", "/", "(", "denom", "+", "1e-12", ")", "\n", "return", "f_lcs", ",", "p_lcs", ",", "r_lcs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_l_sentence_level": [[261, 291], ["eval_metrics._split_into_words", "eval_metrics._split_into_words", "len", "len", "eval_metrics._len_lcs", "eval_metrics._f_p_r_lcs", "ValueError", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._len_lcs", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._f_p_r_lcs"], ["", "def", "rouge_l_sentence_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-L (sentence level) of two text collections of sentences.\n  http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n  Calculated according to:\n  R_lcs = LCS(X,Y)/m\n  P_lcs = LCS(X,Y)/n\n  F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n  where:\n  X = reference summary\n  Y = Candidate summary\n  m = length of reference summary\n  n = length of candidate summary\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentences: The sentences from the referene set\n  Returns:\n    A float: F_lcs\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "", "reference_words", "=", "_split_into_words", "(", "reference_sentences", ")", "\n", "evaluated_words", "=", "_split_into_words", "(", "evaluated_sentences", ")", "\n", "m", "=", "len", "(", "reference_words", ")", "\n", "n", "=", "len", "(", "evaluated_words", ")", "\n", "lcs", "=", "_len_lcs", "(", "evaluated_words", ",", "reference_words", ")", "\n", "return", "_f_p_r_lcs", "(", "lcs", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._union_lcs": [[293, 325], ["set", "eval_metrics._split_into_words", "len", "len", "ValueError", "eval_metrics._split_into_words", "set", "len", "lcs_union.union.union", "eval_metrics._recon_lcs"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._recon_lcs"], ["", "def", "_union_lcs", "(", "evaluated_sentences", ",", "reference_sentence", ")", ":", "\n", "  ", "\"\"\"\n  Returns LCS_u(r_i, C) which is the LCS score of the union longest common\n  subsequence between reference sentence ri and candidate summary C. For example\n  if r_i= w1 w2 w3 w4 w5, and C contains two sentences: c1 = w1 w2 w6 w7 w8 and\n  c2 = w1 w3 w8 w9 w5, then the longest common subsequence of r_i and c1 is\n  \"w1 w2\" and the longest common subsequence of r_i and c2 is \"w1 w3 w5\". The\n  union longest common subsequence of r_i, c1, and c2 is \"w1 w2 w3 w5\" and\n  LCS_u(r_i, C) = 4/5.\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentence: One of the sentences in the reference summaries\n  Returns:\n    float: LCS_u(r_i, C)\n  ValueError:\n    Raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "", "lcs_union", "=", "set", "(", ")", "\n", "reference_words", "=", "_split_into_words", "(", "[", "reference_sentence", "]", ")", "\n", "combined_lcs_length", "=", "0", "\n", "for", "eval_s", "in", "evaluated_sentences", ":", "\n", "    ", "evaluated_words", "=", "_split_into_words", "(", "[", "eval_s", "]", ")", "\n", "lcs", "=", "set", "(", "_recon_lcs", "(", "reference_words", ",", "evaluated_words", ")", ")", "\n", "combined_lcs_length", "+=", "len", "(", "lcs", ")", "\n", "lcs_union", "=", "lcs_union", ".", "union", "(", "lcs", ")", "\n", "\n", "", "union_lcs_count", "=", "len", "(", "lcs_union", ")", "\n", "union_lcs_value", "=", "union_lcs_count", "/", "combined_lcs_length", "\n", "return", "union_lcs_value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_l_summary_level": [[327, 364], ["len", "len", "eval_metrics._f_p_r_lcs", "ValueError", "eval_metrics._split_into_words", "eval_metrics._split_into_words", "eval_metrics._union_lcs", "len", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._f_p_r_lcs", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._split_into_words", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics._union_lcs"], ["", "def", "rouge_l_summary_level", "(", "evaluated_sentences", ",", "reference_sentences", ")", ":", "\n", "  ", "\"\"\"\n  Computes ROUGE-L (summary level) of two text collections of sentences.\n  http://research.microsoft.com/en-us/um/people/cyl/download/papers/\n  rouge-working-note-v1.3.1.pdf\n  Calculated according to:\n  R_lcs = SUM(1, u)[LCS<union>(r_i,C)]/m\n  P_lcs = SUM(1, u)[LCS<union>(r_i,C)]/n\n  F_lcs = ((1 + beta^2)*R_lcs*P_lcs) / (R_lcs + (beta^2) * P_lcs)\n  where:\n  SUM(i,u) = SUM from i through u\n  u = number of sentences in reference summary\n  C = Candidate summary made up of v sentences\n  m = number of words in reference summary\n  n = number of words in candidate summary\n  Args:\n    evaluated_sentences: The sentences that have been picked by the summarizer\n    reference_sentence: One of the sentences in the reference summaries\n  Returns:\n    A float: F_lcs\n  Raises:\n    ValueError: raises exception if a param has len <= 0\n  \"\"\"", "\n", "if", "len", "(", "evaluated_sentences", ")", "<=", "0", "or", "len", "(", "reference_sentences", ")", "<=", "0", ":", "\n", "    ", "raise", "ValueError", "(", "\"Collections must contain at least 1 sentence.\"", ")", "\n", "\n", "# total number of words in reference sentences", "\n", "", "m", "=", "len", "(", "_split_into_words", "(", "reference_sentences", ")", ")", "\n", "\n", "# total number of words in evaluated sentences", "\n", "n", "=", "len", "(", "_split_into_words", "(", "evaluated_sentences", ")", ")", "\n", "\n", "union_lcs_sum_across_all_references", "=", "0", "\n", "for", "ref_s", "in", "reference_sentences", ":", "\n", "    ", "union_lcs_sum_across_all_references", "+=", "_union_lcs", "(", "evaluated_sentences", ",", "\n", "ref_s", ")", "\n", "", "return", "_f_p_r_lcs", "(", "union_lcs_sum_across_all_references", ",", "m", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge": [[366, 394], ["map", "map", "map", "eval_metrics.rouge_n", "zip", "eval_metrics.rouge_n", "zip", "eval_metrics.rouge_l_sentence_level", "zip", "numpy.mean", "zip", "zip", "zip"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_n", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_n", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge_l_sentence_level"], ["", "def", "rouge", "(", "hypotheses", ",", "references", ")", ":", "\n", "  ", "\"\"\"Calculates average rouge scores for a list of hypotheses and\n  references\"\"\"", "\n", "\n", "# Filter out hyps that are of 0 length", "\n", "# hyps_and_refs = zip(hypotheses, references)", "\n", "# hyps_and_refs = [_ for _ in hyps_and_refs if len(_[0]) > 0]", "\n", "# hypotheses, references = zip(*hyps_and_refs)", "\n", "\n", "# Calculate ROUGE-1 F1, precision, recall scores", "\n", "rouge_1", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "1", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_1_f", ",", "rouge_1_p", ",", "rouge_1_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_1", ")", ")", "\n", "\n", "# Calculate ROUGE-2 F1, precision, recall scores", "\n", "rouge_2", "=", "[", "\n", "rouge_n", "(", "[", "hyp", "]", ",", "[", "ref", "]", ",", "2", ")", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_2_f", ",", "rouge_2_p", ",", "rouge_2_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_2", ")", ")", "\n", "\n", "# Calculate ROUGE-L F1, precision, recall scores", "\n", "rouge_l", "=", "[", "\n", "rouge_l_sentence_level", "(", "[", "hyp", "]", ",", "[", "ref", "]", ")", "\n", "for", "hyp", ",", "ref", "in", "zip", "(", "hypotheses", ",", "references", ")", "\n", "]", "\n", "rouge_l_f", ",", "rouge_l_p", ",", "rouge_l_r", "=", "map", "(", "np", ".", "mean", ",", "zip", "(", "*", "rouge_l", ")", ")", "\n", "return", "rouge_1_f", ",", "rouge_2_f", ",", "rouge_l_f", ",", "np", ".", "mean", "(", "[", "rouge_1_f", ",", "rouge_2_f", ",", "rouge_l_f", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.ent_score": [[409, 416], ["bert.predict_label", "range", "len"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.bert_model.predict_label"], ["", "def", "ent_score", "(", "hypotheses", ",", "persona", ")", ":", "\n", "  ", "'''\n  hypotheses: str \n  persona: [str]\n  '''", "\n", "score", "=", "bert", ".", "predict_label", "(", "[", "hypotheses", "for", "_", "in", "range", "(", "len", "(", "persona", ")", ")", "]", ",", "persona", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.test": [[419, 437], ["eval_metrics.moses_multi_bleu", "print", "eval_metrics.moses_multi_bleu", "print", "eval_metrics.rouge", "print", "eval_metrics.rouge", "print", "eval_metrics.ent_score", "print", "eval_metrics.ent_score", "print", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.moses_multi_bleu", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.rouge", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.ent_score", "home.repos.pwc.inspect_result.zlinao_VGLM.util.eval_metrics.ent_score"], ["", "def", "test", "(", ")", ":", "\n", "  ", "ref", "=", "\"I don't like dogs\"", "\n", "sent", "=", "\"I really love dogs\"", "\n", "persona", "=", "[", "\"I hate dogs\"", ",", "\"I like blue cars\"", "]", "\n", "\n", "\n", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "[", "sent", "]", ")", ",", "np", ".", "array", "(", "[", "ref", "]", ")", ")", "\n", "print", "(", "BLEU", ")", "\n", "BLEU", "=", "moses_multi_bleu", "(", "np", ".", "array", "(", "[", "ref", "]", ")", ",", "np", ".", "array", "(", "[", "ref", "]", ")", ")", "\n", "print", "(", "BLEU", ")", "\n", "ROUGE", "=", "rouge", "(", "[", "sent", "]", ",", "[", "ref", "]", ")", "\n", "print", "(", "ROUGE", ")", "\n", "ROUGE", "=", "rouge", "(", "[", "ref", "]", ",", "[", "ref", "]", ")", "\n", "print", "(", "ROUGE", ")", "\n", "ENT", "=", "ent_score", "(", "sent", ",", "persona", ")", "\n", "print", "(", "ENT", ")", "\n", "ENT", "=", "ent_score", "(", "ref", ",", "persona", ")", "\n", "print", "(", "ENT", ")", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.InputExample.__init__": [[22, 37], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Constructs a InputExample.\n\t\tArgs:\n\t\t\tguid: Unique id for the example.\n\t\t\ttext_a: string. The untokenized text of the first sequence. For single\n\t\t\tsequence tasks, only this sequence must be specified.\n\t\t\ttext_b: (Optional) string. The untokenized text of the second sequence.\n\t\t\tOnly must be specified for sequence pair tasks.\n\t\t\tlabel: (Optional) string. The label of the example. This should be\n\t\t\tspecified for train and dev examples, but not for test examples.\n\t\t\"\"\"", "\n", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.InputFeatures.__init__": [[42, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_id", ")", ":", "\n", "\t\t", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_id", "=", "label_id", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor.get_train_examples": [[52, 55], ["NotImplementedError"], "methods", ["None"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "\t\t", "\"\"\"Gets a collection of `InputExample`s for the train set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor.get_dev_examples": [[56, 59], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "\t\t", "\"\"\"Gets a collection of `InputExample`s for the dev set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor.get_labels": [[60, 63], ["NotImplementedError"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"Gets the list of labels for this data set.\"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor._read_tsv": [[64, 73], ["open", "csv.reader", "lines.append"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "_read_tsv", "(", "cls", ",", "input_file", ",", "quotechar", "=", "None", ")", ":", "\n", "\t\t", "\"\"\"Reads a tab separated value file.\"\"\"", "\n", "with", "open", "(", "input_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "\t\t\t", "reader", "=", "csv", ".", "reader", "(", "f", ",", "delimiter", "=", "\"\\t\"", ",", "quotechar", "=", "quotechar", ")", "\n", "lines", "=", "[", "]", "\n", "for", "line", "in", "reader", ":", "\n", "\t\t\t\t", "lines", ".", "append", "(", "line", ")", "\n", "", "return", "lines", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.get_train_examples": [[77, 81], ["load_bert.PersonanliProcessor._create_examples", "load_bert.PersonanliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor._create_examples", "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor._read_tsv"], ["def", "get_train_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "\t\t", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"train.tsv\"", ")", ")", ",", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.get_dev_examples": [[82, 87], ["load_bert.PersonanliProcessor._create_examples", "load_bert.PersonanliProcessor._read_tsv", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor._create_examples", "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.DataProcessor._read_tsv"], ["", "def", "get_dev_examples", "(", "self", ",", "data_dir", ")", ":", "\n", "\t\t", "\"\"\"See base class.\"\"\"", "\n", "return", "self", ".", "_create_examples", "(", "\n", "self", ".", "_read_tsv", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "\"test.tsv\"", ")", ")", ",", "\n", "\"test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.get_labels": [[88, 91], ["None"], "methods", ["None"], ["", "def", "get_labels", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"See base class.\"\"\"", "\n", "return", "[", "\"contradiction\"", ",", "\"entailment\"", ",", "\"neutral\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor._create_examples": [[92, 104], ["enumerate", "examples.append", "load_bert.InputExample"], "methods", ["None"], ["", "def", "_create_examples", "(", "self", ",", "lines", ",", "set_type", ")", ":", "\n", "\t\t", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "lines", ")", ":", "\n", "\t\t\t", "if", "i", "==", "0", ":", "\n", "\t\t\t\t", "continue", "\n", "", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "line", "[", "0", "]", ")", "\n", "text_a", "=", "line", "[", "1", "]", "\n", "text_b", "=", "line", "[", "2", "]", "\n", "label", "=", "line", "[", "3", "]", "\n", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.create_batch": [[105, 115], ["enumerate", "zip", "examples.append", "load_bert.InputExample"], "methods", ["None"], ["", "def", "create_batch", "(", "self", ",", "turn", ",", "persona", ",", "set_type", "=", "\"predict\"", ")", ":", "\n", "\t\t", "\"\"\"Creates examples for the training and dev sets.\"\"\"", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "zip", "(", "turn", ",", "persona", ")", ")", ":", "\n", "\t\t\t", "guid", "=", "\"%s-%s\"", "%", "(", "set_type", ",", "i", ")", "\n", "text_a", "=", "line", "[", "0", "]", "\n", "text_b", "=", "line", "[", "1", "]", "\n", "label", "=", "\"entailment\"", "\n", "examples", ".", "append", "(", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "text_b", ",", "label", "=", "label", ")", ")", "\n", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.bert_model.__init__": [[224, 326], ["torch.device", "load_bert.PersonanliProcessor", "load_bert.bert_model.processor.get_labels", "pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "os.path.join", "torch.load", "pytorch_pretrained_bert.modeling.BertForSequenceClassification.from_pretrained", "pytorch_pretrained_bert.modeling.BertForSequenceClassification.from_pretrained.to", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.get_labels", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "# parser = argparse.ArgumentParser()", "\n", "\n", "# ## Required parameters", "\n", "# parser.add_argument(\"--data_dir\",", "\n", "# \t\t\t\t\tdefault=\"data/dialogue_nli/\",", "\n", "# \t\t\t\t\ttype=str,", "\n", "# \t\t\t\t\trequired=False,", "\n", "# \t\t\t\t\thelp=\"The input data dir. Should contain the .tsv files (or other data files) for the task.\")", "\n", "# parser.add_argument(\"--bert_model\", default='bert-base-uncased', type=str, required=False,", "\n", "# \t\t\t\t\thelp=\"Bert pre-trained model selected in the list: bert-base-uncased, \"", "\n", "# \t\t\t\t\t\"bert-large-uncased, bert-base-cased, bert-large-cased, bert-base-multilingual-uncased, \"", "\n", "# \t\t\t\t\t\"bert-base-multilingual-cased, bert-base-chinese.\")", "\n", "# parser.add_argument(\"--task_name\",", "\n", "# \t\t\t\t\tdefault=\"persona\",", "\n", "# \t\t\t\t\ttype=str,", "\n", "# \t\t\t\t\trequired=False,", "\n", "# \t\t\t\t\thelp=\"The name of the task to train.\")", "\n", "# parser.add_argument(\"--output_dir\",", "\n", "# \t\t\t\t\tdefault=\"data/nli_model/\",", "\n", "# \t\t\t\t\ttype=str,", "\n", "# \t\t\t\t\trequired=False,", "\n", "# \t\t\t\t\thelp=\"The output directory where the model predictions and checkpoints will be written.\")", "\n", "\n", "# ## Other parameters", "\n", "# parser.add_argument(\"--max_seq_length\",", "\n", "# \t\t\t\t\tdefault=128,", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\thelp=\"The maximum total input sequence length after WordPiece tokenization. \\n\"", "\n", "# \t\t\t\t\t\t\t\"Sequences longer than this will be truncated, and sequences shorter \\n\"", "\n", "# \t\t\t\t\t\t\t\"than this will be padded.\")", "\n", "# parser.add_argument(\"--do_train\",", "\n", "# \t\t\t\t\taction='store_true',", "\n", "# \t\t\t\t\thelp=\"Whether to run training.\")", "\n", "# parser.add_argument(\"--do_eval\",", "\n", "# \t\t\t\t\taction='store_false',", "\n", "# \t\t\t\t\thelp=\"Whether to run eval on the dev set.\")", "\n", "# parser.add_argument(\"--do_lower_case\",", "\n", "# \t\t\t\t\taction='store_true',", "\n", "# \t\t\t\t\thelp=\"Set this flag if you are using an uncased model.\")", "\n", "# parser.add_argument(\"--train_batch_size\",", "\n", "# \t\t\t\t\tdefault=32,", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\thelp=\"Total batch size for training.\")", "\n", "# parser.add_argument(\"--eval_batch_size\",", "\n", "# \t\t\t\t\tdefault=32,", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\thelp=\"Total batch size for eval.\")", "\n", "# parser.add_argument(\"--learning_rate\",", "\n", "# \t\t\t\t\tdefault=5e-5,", "\n", "# \t\t\t\t\ttype=float,", "\n", "# \t\t\t\t\thelp=\"The initial learning rate for Adam.\")", "\n", "# parser.add_argument(\"--num_train_epochs\",", "\n", "# \t\t\t\t\tdefault=3.0,", "\n", "# \t\t\t\t\ttype=float,", "\n", "# \t\t\t\t\thelp=\"Total number of training epochs to perform.\")", "\n", "# parser.add_argument(\"--warmup_proportion\",", "\n", "# \t\t\t\t\tdefault=0.1,", "\n", "# \t\t\t\t\ttype=float,", "\n", "# \t\t\t\t\thelp=\"Proportion of training to perform linear learning rate warmup for. \"", "\n", "# \t\t\t\t\t\t\t\"E.g., 0.1 = 10%% of training.\")", "\n", "# parser.add_argument(\"--no_cuda\",", "\n", "# \t\t\t\t\taction='store_true',", "\n", "# \t\t\t\t\thelp=\"Whether not to use CUDA when available\")", "\n", "# parser.add_argument(\"--local_rank\",", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\tdefault=-1,", "\n", "# \t\t\t\t\thelp=\"local_rank for distributed training on gpus\")", "\n", "# parser.add_argument('--seed',", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\tdefault=42,", "\n", "# \t\t\t\t\thelp=\"random seed for initialization\")", "\n", "# parser.add_argument('--gradient_accumulation_steps',", "\n", "# \t\t\t\t\ttype=int,", "\n", "# \t\t\t\t\tdefault=1,", "\n", "# \t\t\t\t\thelp=\"Number of updates steps to accumulate before performing a backward/update pass.\")", "\n", "# parser.add_argument('--fp16',", "\n", "# \t\t\t\t\taction='store_true',", "\n", "# \t\t\t\t\thelp=\"Whether to use 16-bit float precision instead of 32-bit\")", "\n", "# parser.add_argument('--loss_scale',", "\n", "# \t\t\t\t\ttype=float, default=0,", "\n", "# \t\t\t\t\thelp=\"Loss scaling to improve fp16 numeric stability. Only used when fp16 set to True.\\n\"", "\n", "# \t\t\t\t\t\t\t\"0 (default value): dynamic loss scaling.\\n\"", "\n", "# \t\t\t\t\t\t\t\"Positive power of 2: static loss scaling value.\\n\")", "\n", "\n", "# args = parser.parse_args()", "\n", "# self.args = args", "\n", "\t\t", "self", ".", "max_seq_length", "=", "128", "\n", "self", ".", "eval_batch_size", "=", "32", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "False", "else", "\"cpu\"", ")", "\n", "self", ".", "processor", "=", "PersonanliProcessor", "(", ")", "\n", "self", ".", "num_labels", "=", "3", "\n", "self", ".", "label_list", "=", "self", ".", "processor", ".", "get_labels", "(", ")", "\n", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'bert-base-uncased'", ",", "do_lower_case", "=", "True", ")", "\n", "\n", "# Load a trained model that you have fine-tuned", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "\"data/nli_model/\"", ",", "\"pytorch_model.bin\"", ")", "\n", "model_state_dict", "=", "torch", ".", "load", "(", "output_model_file", ")", "\n", "model", "=", "BertForSequenceClassification", ".", "from_pretrained", "(", "'bert-base-uncased'", ",", "state_dict", "=", "model_state_dict", ",", "num_labels", "=", "self", ".", "num_labels", ")", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.bert_model.predict_label": [[327, 366], ["load_bert.bert_model.processor.create_batch", "load_bert.convert_examples_to_features", "logger.info", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "load_bert.bert_model.model.eval", "len", "int", "int", "int", "input_ids.to.to.to", "input_mask.to.to.to", "segment_ids.to.to.to", "label_ids.to.to.to", "load_bert.bert_model.detach().cpu().numpy", "numpy.argmax", "numpy.max", "enumerate", "torch.no_grad", "load_bert.bert_model.model", "load_bert.bert_model.model", "load_bert.bert_model.detach().cpu", "load_bert.bert_model.detach"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.PersonanliProcessor.create_batch", "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.convert_examples_to_features"], ["", "def", "predict_label", "(", "self", ",", "turn", ",", "personas_items", ")", ":", "\n", "\t\t", "eval_examples", "=", "self", ".", "processor", ".", "create_batch", "(", "turn", ",", "personas_items", ")", "\n", "eval_features", "=", "convert_examples_to_features", "(", "eval_examples", ",", "self", ".", "label_list", ",", "self", ".", "max_seq_length", ",", "self", ".", "tokenizer", ")", "\n", "logger", ".", "info", "(", "\"***** Running evaluation *****\"", ")", "\n", "logger", ".", "info", "(", "\"  Num examples = %d\"", ",", "len", "(", "eval_examples", ")", ")", "\n", "logger", ".", "info", "(", "\"  Batch size = %d\"", ",", "self", ".", "eval_batch_size", ")", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_id", "for", "f", "in", "eval_features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "eval_data", "=", "TensorDataset", "(", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", ")", "\n", "# # Run prediction for full data", "\n", "eval_sampler", "=", "SequentialSampler", "(", "eval_data", ")", "\n", "eval_dataloader", "=", "DataLoader", "(", "eval_data", ",", "sampler", "=", "eval_sampler", ",", "batch_size", "=", "self", ".", "eval_batch_size", ")", "\n", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "# eval_loss, eval_accuracy = 0, 0", "\n", "# nb_eval_steps, nb_eval_examples = 0, 0", "\n", "mapper", "=", "{", "int", "(", "\"0\"", ")", ":", "\"contradiction\"", ",", "int", "(", "\"1\"", ")", ":", "\"entailment\"", ",", "int", "(", "\"2\"", ")", ":", "\"neutral\"", "}", "\n", "for", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", "in", "eval_dataloader", ":", "\n", "\t\t\t", "input_ids", "=", "input_ids", ".", "to", "(", "self", ".", "device", ")", "\n", "input_mask", "=", "input_mask", ".", "to", "(", "self", ".", "device", ")", "\n", "segment_ids", "=", "segment_ids", ".", "to", "(", "self", ".", "device", ")", "\n", "label_ids", "=", "label_ids", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\t\t\t\t", "tmp_eval_loss", "=", "self", ".", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ",", "label_ids", ")", "\n", "logits", "=", "self", ".", "model", "(", "input_ids", ",", "segment_ids", ",", "input_mask", ")", "\n", "\n", "", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "idx_max", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "val_max", "=", "np", ".", "max", "(", "logits", ",", "axis", "=", "1", ")", "\n", "score", "=", "0", "\n", "for", "idx_p", ",", "val_p", "in", "enumerate", "(", "idx_max", ")", ":", "\n", "\t\t\t\t", "if", "(", "mapper", "[", "val_p", "]", "==", "\"entailment\"", ")", ":", "\n", "\t\t\t\t\t", "score", "+=", "1", "\n", "", "if", "(", "mapper", "[", "val_p", "]", "==", "\"contradiction\"", ")", ":", "\n", "\t\t\t\t\t", "score", "-=", "1", "\n", "", "", "return", "score", "", "", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.convert_examples_to_features": [[116, 196], ["enumerate", "tokenizer.tokenize", "tokenizer.convert_tokens_to_ids", "features.append", "enumerate", "tokenizer.tokenize", "load_bert._truncate_seq_pair", "len", "len", "len", "len", "len", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "load_bert.InputFeatures", "len", "len", "len", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert._truncate_seq_pair"], ["", "", "def", "convert_examples_to_features", "(", "examples", ",", "label_list", ",", "max_seq_length", ",", "tokenizer", ")", ":", "\n", "\t", "\"\"\"Loads a data file into a list of `InputBatch`s.\"\"\"", "\n", "\n", "label_map", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "label_list", ")", "}", "\n", "\n", "features", "=", "[", "]", "\n", "for", "(", "ex_index", ",", "example", ")", "in", "enumerate", "(", "examples", ")", ":", "\n", "\t\t", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "\n", "tokens_b", "=", "None", "\n", "if", "example", ".", "text_b", ":", "\n", "\t\t\t", "tokens_b", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_b", ")", "\n", "# Modifies `tokens_a` and `tokens_b` in place so that the total", "\n", "# length is less than the specified length.", "\n", "# Account for [CLS], [SEP], [SEP] with \"- 3\"", "\n", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_seq_length", "-", "3", ")", "\n", "", "else", ":", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "\t\t\t", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "\t\t\t\t", "tokens_a", "=", "tokens_a", "[", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "# The convention in BERT is:", "\n", "# (a) For sequence pairs:", "\n", "#  tokens:   [CLS] is this jack ##son ##ville ? [SEP] no it is not . [SEP]", "\n", "#  type_ids: 0   0  0    0    0     0       0 0    1  1  1  1   1 1", "\n", "# (b) For single sequences:", "\n", "#  tokens:   [CLS] the dog is hairy . [SEP]", "\n", "#  type_ids: 0   0   0   0  0     0 0", "\n", "#", "\n", "# Where \"type_ids\" are used to indicate whether this is the first", "\n", "# sequence or the second sequence. The embedding vectors for `type=0` and", "\n", "# `type=1` were learned during pre-training and are added to the wordpiece", "\n", "# embedding vector (and position vector). This is not *strictly* necessary", "\n", "# since the [SEP] token unambigiously separates the sequences, but it makes", "\n", "# it easier for the model to learn the concept of sequences.", "\n", "#", "\n", "# For classification tasks, the first vector (corresponding to [CLS]) is", "\n", "# used as as the \"sentence vector\". Note that this only makes sense because", "\n", "# the entire model is fine-tuned.", "\n", "", "", "tokens", "=", "[", "\"[CLS]\"", "]", "+", "tokens_a", "+", "[", "\"[SEP]\"", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "\n", "if", "tokens_b", ":", "\n", "\t\t\t", "tokens", "+=", "tokens_b", "+", "[", "\"[SEP]\"", "]", "\n", "segment_ids", "+=", "[", "1", "]", "*", "(", "len", "(", "tokens_b", ")", "+", "1", ")", "\n", "\n", "", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding", "=", "[", "0", "]", "*", "(", "max_seq_length", "-", "len", "(", "input_ids", ")", ")", "\n", "input_ids", "+=", "padding", "\n", "input_mask", "+=", "padding", "\n", "segment_ids", "+=", "padding", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "if", "ex_index", "<", "5", ":", "\n", "\t\t\t", "logger", ".", "info", "(", "\"*** Example ***\"", ")", "\n", "logger", ".", "info", "(", "\"guid: %s\"", "%", "(", "example", ".", "guid", ")", ")", "\n", "logger", ".", "info", "(", "\"tokens: %s\"", "%", "\" \"", ".", "join", "(", "\n", "[", "str", "(", "x", ")", "for", "x", "in", "tokens", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"input_mask: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "input_mask", "]", ")", ")", "\n", "logger", ".", "info", "(", "\n", "\"segment_ids: %s\"", "%", "\" \"", ".", "join", "(", "[", "str", "(", "x", ")", "for", "x", "in", "segment_ids", "]", ")", ")", "\n", "logger", ".", "info", "(", "\"label: %s (id = %d)\"", "%", "(", "example", ".", "label", ",", "label_id", ")", ")", "\n", "\n", "", "features", ".", "append", "(", "\n", "InputFeatures", "(", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_id", "=", "label_id", ")", ")", "\n", "", "return", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert._truncate_seq_pair": [[198, 213], ["len", "len", "len", "len", "tokens_a.pop", "tokens_b.pop"], "function", ["None"], ["", "def", "_truncate_seq_pair", "(", "tokens_a", ",", "tokens_b", ",", "max_length", ")", ":", "\n", "\t", "\"\"\"Truncates a sequence pair in place to the maximum length.\"\"\"", "\n", "\n", "# This is a simple heuristic which will always truncate the longer sequence", "\n", "# one token at a time. This makes more sense than truncating an equal percent", "\n", "# of tokens from each, since if one sequence is very short then each token", "\n", "# that's truncated likely contains more information than a longer sequence.", "\n", "while", "True", ":", "\n", "\t\t", "total_length", "=", "len", "(", "tokens_a", ")", "+", "len", "(", "tokens_b", ")", "\n", "if", "total_length", "<=", "max_length", ":", "\n", "\t\t\t", "break", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "len", "(", "tokens_b", ")", ":", "\n", "\t\t\t", "tokens_a", ".", "pop", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "tokens_b", ".", "pop", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.accuracy": [[214, 217], ["numpy.argmax", "numpy.sum"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "out", ",", "labels", ")", ":", "\n", "\t", "outputs", "=", "np", ".", "argmax", "(", "out", ",", "axis", "=", "1", ")", "\n", "return", "np", ".", "sum", "(", "outputs", "==", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.util.load_bert.warmup_linear": [[218, 222], ["None"], "function", ["None"], ["", "def", "warmup_linear", "(", "x", ",", "warmup", "=", "0.002", ")", ":", "\n", "\t", "if", "x", "<", "warmup", ":", "\n", "\t\t", "return", "x", "/", "warmup", "\n", "", "return", "1.0", "-", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.__init__": [[69, 103], ["tokenization_utils.PreTrainedTokenizer.__init__", "collections.Counter", "torch.load", "torch.load.items", "tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab"], ["def", "__init__", "(", "self", ",", "special", "=", "None", ",", "min_freq", "=", "0", ",", "max_size", "=", "None", ",", "lower_case", "=", "False", ",", "\n", "delimiter", "=", "None", ",", "vocab_file", "=", "None", ",", "pretrained_vocab_file", "=", "None", ",", "\n", "never_split", "=", "None", ",", "unk_token", "=", "\"<unk>\"", ",", "eos_token", "=", "\"<eos>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<formula>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "TransfoXLTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "eos_token", "=", "eos_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "self", ".", "all_special_tokens", "\n", "", "if", "special", "is", "None", ":", "\n", "            ", "special", "=", "[", "]", "\n", "", "self", ".", "counter", "=", "Counter", "(", ")", "\n", "self", ".", "special", "=", "special", "\n", "self", ".", "min_freq", "=", "min_freq", "\n", "self", ".", "max_size", "=", "max_size", "\n", "self", ".", "lower_case", "=", "lower_case", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "self", ".", "never_split", "=", "never_split", "\n", "\n", "if", "pretrained_vocab_file", "is", "not", "None", ":", "\n", "# Hack because, honestly this tokenizer was not made to be used", "\n", "# in a library like ours, at all.", "\n", "            ", "vocab_dict", "=", "torch", ".", "load", "(", "pretrained_vocab_file", ")", "\n", "for", "key", ",", "value", "in", "vocab_dict", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "self", ".", "__dict__", ":", "\n", "                    ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "\n", "", "", "", "if", "vocab_file", "is", "not", "None", ":", "\n", "            ", "self", ".", "build_vocab", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file": [[104, 118], ["os.path.exists", "logger.info", "io.open", "enumerate", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "sents.append", "logger.info"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "", "def", "count_file", "(", "self", ",", "path", ",", "verbose", "=", "False", ",", "add_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'counting file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n", "sents", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ")", "\n", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "sents", ".", "append", "(", "symbols", ")", "\n", "\n", "", "", "return", "sents", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_sents": [[119, 128], ["enumerate", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.counter.update", "logger.info", "len"], "methods", ["None"], ["", "def", "count_sents", "(", "self", ",", "sents", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            sents : a list of sentences, each a list of tokenized symbols\n        \"\"\"", "\n", "if", "verbose", ":", "logger", ".", "info", "(", "'counting {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "self", ".", "counter", ".", "update", "(", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file": [[129, 143], ["collections.OrderedDict", "io.open", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "ValueError", "line.strip().split", "line.strip"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "", "def", "_build_from_file", "(", "self", ",", "vocab_file", ")", ":", "\n", "        ", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "symb", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", "0", "]", "\n", "self", ".", "add_symbol", "(", "symb", ")", "\n", "", "", "if", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "unk_idx", "=", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'No <unkown> token in vocabulary'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.save_vocabulary": [[144, 150], ["os.path.isdir", "torch.save", "os.path.join"], "methods", ["None"], ["", "", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", ")", "\n", "", "torch", ".", "save", "(", "self", ".", "__dict__", ",", "vocab_file", ")", "\n", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab": [[151, 171], ["logger.info", "tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "logger.info", "logger.info", "collections.OrderedDict", "tokenization_transfo_xl.TransfoXLTokenizer.counter.most_common", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.add_special", "tokenization_transfo_xl.TransfoXLTokenizer.add_symbol", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer._build_from_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol"], ["", "def", "build_vocab", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "vocab_file", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab from {}'", ".", "format", "(", "self", ".", "vocab_file", ")", ")", "\n", "self", ".", "_build_from_file", "(", "self", ".", "vocab_file", ")", "\n", "logger", ".", "info", "(", "'final vocab size {}'", ".", "format", "(", "len", "(", "self", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "'building vocab with min_freq={}, max_size={}'", ".", "format", "(", "\n", "self", ".", "min_freq", ",", "self", ".", "max_size", ")", ")", "\n", "self", ".", "idx2sym", "=", "[", "]", "\n", "self", ".", "sym2idx", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "sym", "in", "self", ".", "special", ":", "\n", "                ", "self", ".", "add_special", "(", "sym", ")", "\n", "\n", "", "for", "sym", ",", "cnt", "in", "self", ".", "counter", ".", "most_common", "(", "self", ".", "max_size", ")", ":", "\n", "                ", "if", "cnt", "<", "self", ".", "min_freq", ":", "break", "\n", "self", ".", "add_symbol", "(", "sym", ")", "\n", "\n", "", "logger", ".", "info", "(", "'final vocab size {} from {} unique tokens'", ".", "format", "(", "\n", "len", "(", "self", ")", ",", "len", "(", "self", ".", "counter", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file": [[172, 189], ["os.path.exists", "logger.info", "io.open", "enumerate", "torch.cat", "tokenization_transfo_xl.TransfoXLTokenizer.tokenize", "torch.cat.append", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "", "def", "encode_file", "(", "self", ",", "path", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ",", "add_eos", "=", "True", ",", "\n", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding file {} ...'", ".", "format", "(", "path", ")", ")", "\n", "assert", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "encoded", "=", "[", "]", "\n", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "idx", ",", "line", "in", "enumerate", "(", "f", ")", ":", "\n", "                ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "symbols", "=", "self", ".", "tokenize", "(", "line", ",", "add_eos", "=", "add_eos", ",", "\n", "add_double_eos", "=", "add_double_eos", ")", "\n", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_sents": [[190, 202], ["enumerate", "logger.info", "torch.cat.append", "torch.cat", "logger.info", "tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor"], ["", "def", "encode_sents", "(", "self", ",", "sents", ",", "ordered", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "if", "verbose", ":", "logger", ".", "info", "(", "'encoding {} sents ...'", ".", "format", "(", "len", "(", "sents", ")", ")", ")", "\n", "encoded", "=", "[", "]", "\n", "for", "idx", ",", "symbols", "in", "enumerate", "(", "sents", ")", ":", "\n", "            ", "if", "verbose", "and", "idx", ">", "0", "and", "idx", "%", "500000", "==", "0", ":", "\n", "                ", "logger", ".", "info", "(", "'    line {}'", ".", "format", "(", "idx", ")", ")", "\n", "", "encoded", ".", "append", "(", "self", ".", "convert_to_tensor", "(", "symbols", ")", ")", "\n", "\n", "", "if", "ordered", ":", "\n", "            ", "encoded", "=", "torch", ".", "cat", "(", "encoded", ")", "\n", "\n", "", "return", "encoded", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_special": [[203, 208], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "setattr", "len", "sym.strip"], "methods", ["None"], ["", "def", "add_special", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "setattr", "(", "self", ",", "'{}_idx'", ".", "format", "(", "sym", ".", "strip", "(", "'<>'", ")", ")", ",", "self", ".", "sym2idx", "[", "sym", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.add_symbol": [[209, 213], ["tokenization_transfo_xl.TransfoXLTokenizer.idx2sym.append", "len"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "sym", ")", ":", "\n", "        ", "if", "sym", "not", "in", "self", ".", "sym2idx", ":", "\n", "            ", "self", ".", "idx2sym", ".", "append", "(", "sym", ")", "\n", "self", ".", "sym2idx", "[", "sym", "]", "=", "len", "(", "self", ".", "idx2sym", ")", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_id_to_token": [[214, 218], ["len"], "methods", ["None"], ["", "", "def", "_convert_id_to_token", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "assert", "0", "<=", "idx", "<", "len", "(", "self", ")", ",", "'Index {} out of vocabulary range'", ".", "format", "(", "idx", ")", "\n", "return", "self", ".", "idx2sym", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer._convert_token_to_id": [[219, 235], ["hasattr", "tokenization_transfo_xl.TransfoXLTokenizer.sym2idx.get", "ValueError"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "sym", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "if", "sym", "in", "self", ".", "sym2idx", ":", "\n", "            ", "return", "self", ".", "sym2idx", "[", "sym", "]", "\n", "", "else", ":", "\n", "# logger.info('encounter unk {}'.format(sym))", "\n", "# assert '<eos>' not in sym", "\n", "            ", "if", "hasattr", "(", "self", ",", "'unk_idx'", ")", ":", "\n", "                ", "return", "self", ".", "sym2idx", ".", "get", "(", "sym", ",", "self", ".", "unk_idx", ")", "\n", "# Backward compatibility with pre-trained models", "\n", "", "elif", "'<unk>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<unk>'", "]", "\n", "", "elif", "'<UNK>'", "in", "self", ".", "sym2idx", ":", "\n", "                ", "return", "self", ".", "sym2idx", "[", "'<UNK>'", "]", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "'Token not in vocabulary and no <unk> token in vocabulary for replacement'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_string": [[236, 240], ["None"], "methods", ["None"], ["", "", "", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.convert_to_tensor": [[241, 243], ["torch.LongTensor", "tokenization_transfo_xl.TransfoXLTokenizer.convert_tokens_to_ids"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "convert_to_tensor", "(", "self", ",", "symbols", ")", ":", "\n", "        ", "return", "torch", ".", "LongTensor", "(", "self", ".", "convert_tokens_to_ids", "(", "symbols", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.vocab_size": [[244, 247], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "idx2sym", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer._tokenize": [[248, 266], ["line.lower.lower.strip", "line.lower.lower.lower", "line.lower.lower.split"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "line", ",", "add_eos", "=", "False", ",", "add_double_eos", "=", "False", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", "\n", "# convert to lower case", "\n", "if", "self", ".", "lower_case", ":", "\n", "            ", "line", "=", "line", ".", "lower", "(", ")", "\n", "\n", "# empty delimiter '' will evaluate False", "\n", "", "if", "self", ".", "delimiter", "==", "''", ":", "\n", "            ", "symbols", "=", "line", "\n", "", "else", ":", "\n", "            ", "symbols", "=", "line", ".", "split", "(", "self", ".", "delimiter", ")", "\n", "\n", "", "if", "add_double_eos", ":", "# lm1b", "\n", "            ", "return", "[", "'<S>'", "]", "+", "symbols", "+", "[", "'<S>'", "]", "\n", "", "elif", "add_eos", ":", "\n", "            ", "return", "symbols", "+", "[", "'<eos>'", "]", "\n", "", "else", ":", "\n", "            ", "return", "symbols", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.__init__": [[269, 290], ["data.narrow.narrow.narrow", "data.narrow.narrow.view().t().contiguous().to", "data.narrow.narrow.size", "data.narrow.narrow.view().t().contiguous", "data.narrow.narrow.view().t", "data.narrow.narrow.view"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            data -- LongTensor -- the LongTensor is strictly ordered\n        \"\"\"", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "\n", "# Work out how cleanly we can divide the dataset into bsz parts.", "\n", "self", ".", "n_step", "=", "data", ".", "size", "(", "0", ")", "//", "bsz", "\n", "\n", "# Trim off any extra elements that wouldn't cleanly fit (remainders).", "\n", "data", "=", "data", ".", "narrow", "(", "0", ",", "0", ",", "self", ".", "n_step", "*", "bsz", ")", "\n", "\n", "# Evenly divide the data across the bsz batches.", "\n", "self", ".", "data", "=", "data", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "t", "(", ")", ".", "contiguous", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Number of mini-batches", "\n", "self", ".", "n_batch", "=", "(", "self", ".", "n_step", "+", "self", ".", "bptt", "-", "1", ")", "//", "self", ".", "bptt", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch": [[291, 305], ["min", "max", "data.transpose().contiguous().to", "target.transpose().contiguous().to", "data.transpose().contiguous", "target.transpose().contiguous", "tokenization_transfo_xl.LMOrderedIterator.data.size", "data.transpose", "target.transpose"], "methods", ["None"], ["", "def", "get_batch", "(", "self", ",", "i", ",", "bptt", "=", "None", ")", ":", "\n", "        ", "if", "bptt", "is", "None", ":", "bptt", "=", "self", ".", "bptt", "\n", "seq_len", "=", "min", "(", "bptt", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", "-", "i", ")", "\n", "\n", "end_idx", "=", "i", "+", "seq_len", "\n", "beg_idx", "=", "max", "(", "0", ",", "i", "-", "self", ".", "ext_len", ")", "\n", "\n", "data", "=", "self", ".", "data", "[", "beg_idx", ":", "end_idx", "]", "\n", "target", "=", "self", ".", "data", "[", "i", "+", "1", ":", "i", "+", "1", "+", "seq_len", "]", "\n", "\n", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "return", "data_out", ",", "target_out", ",", "seq_len", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter": [[306, 309], ["range", "tokenization_transfo_xl.LMOrderedIterator.data.size", "tokenization_transfo_xl.LMOrderedIterator.get_batch"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "def", "get_fixlen_iter", "(", "self", ",", "start", "=", "0", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "start", ",", "self", ".", "data", ".", "size", "(", "0", ")", "-", "1", ",", "self", ".", "bptt", ")", ":", "\n", "            ", "yield", "self", ".", "get_batch", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_varlen_iter": [[310, 321], ["min", "tokenization_transfo_xl.LMOrderedIterator.get_batch", "max", "numpy.random.random", "int", "tokenization_transfo_xl.LMOrderedIterator.data.size", "numpy.random.normal"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_batch"], ["", "", "def", "get_varlen_iter", "(", "self", ",", "start", "=", "0", ",", "std", "=", "5", ",", "min_len", "=", "5", ",", "max_deviation", "=", "3", ")", ":", "\n", "        ", "max_len", "=", "self", ".", "bptt", "+", "max_deviation", "*", "std", "\n", "i", "=", "start", "\n", "while", "True", ":", "\n", "            ", "bptt", "=", "self", ".", "bptt", "if", "np", ".", "random", ".", "random", "(", ")", "<", "0.95", "else", "self", ".", "bptt", "/", "2.", "\n", "bptt", "=", "min", "(", "max_len", ",", "max", "(", "min_len", ",", "int", "(", "np", ".", "random", ".", "normal", "(", "bptt", ",", "std", ")", ")", ")", ")", "\n", "data", ",", "target", ",", "seq_len", "=", "self", ".", "get_batch", "(", "i", ",", "bptt", ")", "\n", "i", "+=", "seq_len", "\n", "yield", "data", ",", "target", ",", "seq_len", "\n", "if", "i", ">=", "self", ".", "data", ".", "size", "(", "0", ")", "-", "2", ":", "\n", "                ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.__iter__": [[322, 324], ["tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMOrderedIterator.get_fixlen_iter"], ["", "", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_fixlen_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.__init__": [[327, 339], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "shuffle", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n            data -- list[LongTensor] -- there is no order among the LongTensors\n        \"\"\"", "\n", "self", ".", "data", "=", "data", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.get_sent_stream": [[340, 348], ["numpy.random.permutation", "numpy.array", "len", "range", "len"], "methods", ["None"], ["", "def", "get_sent_stream", "(", "self", ")", ":", "\n", "# index iterator", "\n", "        ", "epoch_indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ".", "data", ")", ")", "if", "self", ".", "shuffle", "else", "np", ".", "array", "(", "range", "(", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "# sentence iterator", "\n", "for", "idx", "in", "epoch_indices", ":", "\n", "            ", "yield", "self", ".", "data", "[", "idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator": [[349, 397], ["torch.LongTensor", "torch.LongTensor", "data[].fill_", "torch.LongTensor.fill_", "range", "torch.LongTensor.transpose().contiguous().to", "torch.LongTensor.transpose().contiguous().to", "min", "torch.LongTensor.resize_", "torch.LongTensor.size", "torch.LongTensor.size", "torch.LongTensor.transpose().contiguous", "torch.LongTensor.transpose().contiguous", "min", "next", "torch.LongTensor.transpose", "torch.LongTensor.transpose", "len", "len"], "methods", ["None"], ["", "", "def", "stream_iterator", "(", "self", ",", "sent_stream", ")", ":", "\n", "# streams for each data in the batch", "\n", "        ", "streams", "=", "[", "None", "]", "*", "self", ".", "bsz", "\n", "\n", "data", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "target", "=", "torch", ".", "LongTensor", "(", "self", ".", "bptt", ",", "self", ".", "bsz", ")", "\n", "\n", "n_retain", "=", "0", "\n", "\n", "while", "True", ":", "\n", "# data   : [n_retain+bptt x bsz]", "\n", "# target : [bptt x bsz]", "\n", "            ", "data", "[", "n_retain", ":", "]", ".", "fill_", "(", "-", "1", ")", "\n", "target", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "valid_batch", "=", "True", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "bsz", ")", ":", "\n", "                ", "n_filled", "=", "0", "\n", "try", ":", "\n", "                    ", "while", "n_filled", "<", "self", ".", "bptt", ":", "\n", "                        ", "if", "streams", "[", "i", "]", "is", "None", "or", "len", "(", "streams", "[", "i", "]", ")", "<=", "1", ":", "\n", "                            ", "streams", "[", "i", "]", "=", "next", "(", "sent_stream", ")", "\n", "# number of new tokens to fill in", "\n", "", "n_new", "=", "min", "(", "len", "(", "streams", "[", "i", "]", ")", "-", "1", ",", "self", ".", "bptt", "-", "n_filled", ")", "\n", "# first n_retain tokens are retained from last batch", "\n", "data", "[", "n_retain", "+", "n_filled", ":", "n_retain", "+", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", ":", "n_new", "]", "\n", "target", "[", "n_filled", ":", "n_filled", "+", "n_new", ",", "i", "]", "=", "streams", "[", "i", "]", "[", "1", ":", "n_new", "+", "1", "]", "\n", "streams", "[", "i", "]", "=", "streams", "[", "i", "]", "[", "n_new", ":", "]", "\n", "n_filled", "+=", "n_new", "\n", "", "", "except", "StopIteration", ":", "\n", "                    ", "valid_batch", "=", "False", "\n", "break", "\n", "\n", "", "", "if", "not", "valid_batch", ":", "\n", "                ", "return", "\n", "\n", "", "data_out", "=", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "target_out", "=", "target", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "yield", "data_out", ",", "target_out", ",", "self", ".", "bptt", "\n", "\n", "n_retain", "=", "min", "(", "data", ".", "size", "(", "0", ")", ",", "self", ".", "ext_len", ")", "\n", "if", "n_retain", ">", "0", ":", "\n", "                ", "data", "[", ":", "n_retain", "]", "=", "data", "[", "-", "n_retain", ":", "]", "\n", "", "data", ".", "resize_", "(", "n_retain", "+", "self", ".", "bptt", ",", "data", ".", "size", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.__iter__": [[398, 404], ["tokenization_transfo_xl.LMShuffledIterator.get_sent_stream", "tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "# sent_stream is an iterator", "\n", "        ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", ")", "\n", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "            ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMMultiFileIterator.__init__": [[407, 419], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paths", ",", "vocab", ",", "bsz", ",", "bptt", ",", "device", "=", "'cpu'", ",", "ext_len", "=", "None", ",", "\n", "shuffle", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "paths", "=", "paths", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n", "self", ".", "bsz", "=", "bsz", "\n", "self", ".", "bptt", "=", "bptt", "\n", "self", ".", "ext_len", "=", "ext_len", "if", "ext_len", "is", "not", "None", "else", "0", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream": [[420, 427], ["tokenization_transfo_xl.LMMultiFileIterator.vocab.encode_file", "iter", "numpy.random.shuffle"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file"], ["", "def", "get_sent_stream", "(", "self", ",", "path", ")", ":", "\n", "        ", "sents", "=", "self", ".", "vocab", ".", "encode_file", "(", "path", ",", "add_double_eos", "=", "True", ")", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "sents", ")", "\n", "", "sent_stream", "=", "iter", "(", "sents", ")", "\n", "\n", "return", "sent_stream", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMMultiFileIterator.__iter__": [[428, 437], ["numpy.random.shuffle", "tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "tokenization_transfo_xl.LMMultiFileIterator.stream_iterator"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMMultiFileIterator.get_sent_stream", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.LMShuffledIterator.stream_iterator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "            ", "np", ".", "random", ".", "shuffle", "(", "self", ".", "paths", ")", "\n", "\n", "", "for", "path", "in", "self", ".", "paths", ":", "\n", "# sent_stream is an iterator", "\n", "            ", "sent_stream", "=", "self", ".", "get_sent_stream", "(", "path", ")", "\n", "for", "batch", "in", "self", ".", "stream_iterator", "(", "sent_stream", ")", ":", "\n", "                ", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLCorpus.from_pretrained": [[440, 482], ["TransfoXLTokenizer.from_pretrained", "cls", "torch.load", "torch.load.items", "os.path.join", "file_utils.cached_path", "logger.info", "logger.info", "torch.tensor", "torch.tensor", "torch.tensor", "logger.error", "PRETRAINED_CORPUS_ARCHIVE_MAP.keys"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path"], ["    ", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "cache_dir", "=", "None", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Instantiate a pre-processed corpus.\n        \"\"\"", "\n", "vocab", "=", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "if", "pretrained_model_name_or_path", "in", "PRETRAINED_CORPUS_ARCHIVE_MAP", ":", "\n", "            ", "corpus_file", "=", "PRETRAINED_CORPUS_ARCHIVE_MAP", "[", "pretrained_model_name_or_path", "]", "\n", "", "else", ":", "\n", "            ", "corpus_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CORPUS_NAME", ")", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_corpus_file", "=", "cached_path", "(", "corpus_file", ",", "cache_dir", "=", "cache_dir", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"Corpus '{}' was not found in corpus list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find files {} \"", "\n", "\"at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "PRETRAINED_CORPUS_ARCHIVE_MAP", ".", "keys", "(", ")", ")", ",", "\n", "pretrained_model_name_or_path", ",", "\n", "corpus_file", ")", ")", "\n", "return", "None", "\n", "", "if", "resolved_corpus_file", "==", "corpus_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {}\"", ".", "format", "(", "corpus_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading corpus file {} from cache at {}\"", ".", "format", "(", "\n", "corpus_file", ",", "resolved_corpus_file", ")", ")", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "corpus", "=", "cls", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "corpus_dict", "=", "torch", ".", "load", "(", "resolved_corpus_file", ")", "\n", "for", "key", ",", "value", "in", "corpus_dict", ".", "items", "(", ")", ":", "\n", "            ", "corpus", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "corpus", ".", "vocab", "=", "vocab", "\n", "if", "corpus", ".", "train", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "train", "=", "torch", ".", "tensor", "(", "corpus", ".", "train", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "valid", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "valid", "=", "torch", ".", "tensor", "(", "corpus", ".", "valid", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "if", "corpus", ".", "test", "is", "not", "None", ":", "\n", "            ", "corpus", ".", "test", "=", "torch", ".", "tensor", "(", "corpus", ".", "test", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "corpus", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLCorpus.__init__": [[483, 489], ["tokenization_transfo_xl.TransfoXLTokenizer"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "TransfoXLTokenizer", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "dataset", "=", "None", "\n", "self", ".", "train", "=", "None", "\n", "self", ".", "valid", "=", "None", "\n", "self", ".", "test", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLCorpus.build_corpus": [[490, 528], ["tokenization_transfo_xl.TransfoXLCorpus.vocab.build_vocab", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.count_file", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join", "glob.glob", "os.path.join", "os.path.join", "os.path.join", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "tokenization_transfo_xl.TransfoXLCorpus.vocab.encode_file", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.build_vocab", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.count_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLTokenizer.encode_file"], ["", "def", "build_corpus", "(", "self", ",", "path", ",", "dataset", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ")", "\n", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'wt103'", ":", "\n", "            ", "self", ".", "vocab", ".", "count_file", "(", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "train_path_pattern", "=", "os", ".", "path", ".", "join", "(", "\n", "path", ",", "'1-billion-word-language-modeling-benchmark-r13output'", ",", "\n", "'training-monolingual.tokenized.shuffled'", ",", "'news.en-*'", ")", "\n", "train_paths", "=", "glob", ".", "glob", "(", "train_path_pattern", ")", "\n", "# the vocab will load from file when build_vocab() is called", "\n", "\n", "", "self", ".", "vocab", ".", "build_vocab", "(", ")", "\n", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ")", "\n", "", "elif", "self", ".", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "self", ".", "train", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'train.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "True", ",", "add_eos", "=", "False", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "            ", "self", ".", "train", "=", "train_paths", "\n", "self", ".", "valid", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'valid.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "self", ".", "test", "=", "self", ".", "vocab", ".", "encode_file", "(", "\n", "os", ".", "path", ".", "join", "(", "path", ",", "'test.txt'", ")", ",", "ordered", "=", "False", ",", "add_double_eos", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.TransfoXLCorpus.get_iterator": [[529, 544], ["tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMMultiFileIterator", "tokenization_transfo_xl.LMOrderedIterator", "tokenization_transfo_xl.LMShuffledIterator"], "methods", ["None"], ["", "", "def", "get_iterator", "(", "self", ",", "split", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "split", "==", "'train'", ":", "\n", "            ", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "self", ".", "train", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "kwargs", "[", "'shuffle'", "]", "=", "True", "\n", "data_iter", "=", "LMMultiFileIterator", "(", "self", ".", "train", ",", "self", ".", "vocab", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "elif", "split", "in", "[", "'valid'", ",", "'test'", "]", ":", "\n", "            ", "data", "=", "self", ".", "valid", "if", "split", "==", "'valid'", "else", "self", ".", "test", "\n", "if", "self", ".", "dataset", "in", "[", "'ptb'", ",", "'wt2'", ",", "'wt103'", ",", "'enwik8'", ",", "'text8'", "]", ":", "\n", "                ", "data_iter", "=", "LMOrderedIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "self", ".", "dataset", "==", "'lm1b'", ":", "\n", "                ", "data_iter", "=", "LMShuffledIterator", "(", "data", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "data_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_transfo_xl.get_lm_corpus": [[546, 576], ["os.path.join", "os.path.join", "os.path.exists", "logger.info", "torch.load", "os.path.exists", "logger.info", "logger.info", "tokenization_transfo_xl.TransfoXLCorpus", "torch.save", "io.open", "pickle.load", "os.path.join"], "function", ["None"], ["", "", "def", "get_lm_corpus", "(", "datadir", ",", "dataset", ")", ":", "\n", "    ", "fn", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pt'", ")", "\n", "fn_pickle", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'cache.pkl'", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset...'", ")", "\n", "corpus", "=", "torch", ".", "load", "(", "fn_pickle", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "fn", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Loading cached dataset from pickle...'", ")", "\n", "with", "open", "(", "fn", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ")", "\n", "", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'Producing dataset {}...'", ".", "format", "(", "dataset", ")", ")", "\n", "kwargs", "=", "{", "}", "\n", "if", "dataset", "in", "[", "'wt103'", ",", "'wt2'", "]", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "", "elif", "dataset", "==", "'ptb'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "'<eos>'", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "True", "\n", "", "elif", "dataset", "==", "'lm1b'", ":", "\n", "            ", "kwargs", "[", "'special'", "]", "=", "[", "]", "\n", "kwargs", "[", "'lower_case'", "]", "=", "False", "\n", "kwargs", "[", "'vocab_file'", "]", "=", "os", ".", "path", ".", "join", "(", "datadir", ",", "'1b_word_vocab.txt'", ")", "\n", "", "elif", "dataset", "in", "[", "'enwik8'", ",", "'text8'", "]", ":", "\n", "            ", "pass", "\n", "\n", "", "corpus", "=", "TransfoXLCorpus", "(", "datadir", ",", "dataset", ",", "**", "kwargs", ")", "\n", "torch", ".", "save", "(", "corpus", ",", "fn", ")", "\n", "\n", "", "return", "corpus", "\n", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_pytorch_checkpoint_to_tf.convert_pytorch_checkpoint_to_tf": [[26, 93], ["model.state_dict", "tensorflow.reset_default_graph", "os.path.isdir", "os.makedirs", "iter", "tensorflow.dtypes.as_dtype", "tensorflow.get_variable", "session.run", "session.run", "tensorflow.Session", "tensorflow.train.Saver", "tf.train.Saver.save", "name.replace.replace", "tensorflow.variables_initializer", "convert_pytorch_checkpoint_to_tf.convert_pytorch_checkpoint_to_tf.to_tf_var_name"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run", "home.repos.pwc.inspect_result.zlinao_VGLM.None.evaluate_vlm.run"], ["def", "convert_pytorch_checkpoint_to_tf", "(", "model", ":", "BertModel", ",", "ckpt_dir", ":", "str", ",", "model_name", ":", "str", ")", ":", "\n", "\n", "    ", "\"\"\"\n    :param model:BertModel Pytorch model instance to be converted\n    :param ckpt_dir: Tensorflow model directory\n    :param model_name: model name\n    :return:\n\n    Currently supported HF models:\n        Y BertModel\n        N BertForMaskedLM\n        N BertForPreTraining\n        N BertForMultipleChoice\n        N BertForNextSentencePrediction\n        N BertForSequenceClassification\n        N BertForQuestionAnswering\n    \"\"\"", "\n", "\n", "tensors_to_transpose", "=", "(", "\n", "\"dense.weight\"", ",", "\n", "\"attention.self.query\"", ",", "\n", "\"attention.self.key\"", ",", "\n", "\"attention.self.value\"", "\n", ")", "\n", "\n", "var_map", "=", "(", "\n", "(", "'layer.'", ",", "'layer_'", ")", ",", "\n", "(", "'word_embeddings.weight'", ",", "'word_embeddings'", ")", ",", "\n", "(", "'position_embeddings.weight'", ",", "'position_embeddings'", ")", ",", "\n", "(", "'token_type_embeddings.weight'", ",", "'token_type_embeddings'", ")", ",", "\n", "(", "'.'", ",", "'/'", ")", ",", "\n", "(", "'LayerNorm/weight'", ",", "'LayerNorm/gamma'", ")", ",", "\n", "(", "'LayerNorm/bias'", ",", "'LayerNorm/beta'", ")", ",", "\n", "(", "'weight'", ",", "'kernel'", ")", "\n", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "ckpt_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "ckpt_dir", ")", "\n", "\n", "", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "\n", "def", "to_tf_var_name", "(", "name", ":", "str", ")", ":", "\n", "        ", "for", "patt", ",", "repl", "in", "iter", "(", "var_map", ")", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "patt", ",", "repl", ")", "\n", "", "return", "'bert/{}'", ".", "format", "(", "name", ")", "\n", "\n", "", "def", "create_tf_var", "(", "tensor", ":", "np", ".", "ndarray", ",", "name", ":", "str", ",", "session", ":", "tf", ".", "Session", ")", ":", "\n", "        ", "tf_dtype", "=", "tf", ".", "dtypes", ".", "as_dtype", "(", "tensor", ".", "dtype", ")", "\n", "tf_var", "=", "tf", ".", "get_variable", "(", "dtype", "=", "tf_dtype", ",", "shape", "=", "tensor", ".", "shape", ",", "name", "=", "name", ",", "initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ")", "\n", "session", ".", "run", "(", "tf", ".", "variables_initializer", "(", "[", "tf_var", "]", ")", ")", "\n", "session", ".", "run", "(", "tf_var", ")", "\n", "return", "tf_var", "\n", "\n", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "with", "tf", ".", "Session", "(", ")", "as", "session", ":", "\n", "        ", "for", "var_name", "in", "state_dict", ":", "\n", "            ", "tf_name", "=", "to_tf_var_name", "(", "var_name", ")", "\n", "torch_tensor", "=", "state_dict", "[", "var_name", "]", ".", "numpy", "(", ")", "\n", "if", "any", "(", "[", "x", "in", "var_name", "for", "x", "in", "tensors_to_transpose", "]", ")", ":", "\n", "                ", "torch_tensor", "=", "torch_tensor", ".", "T", "\n", "", "tf_var", "=", "create_tf_var", "(", "tensor", "=", "torch_tensor", ",", "name", "=", "tf_name", ",", "session", "=", "session", ")", "\n", "tf", ".", "keras", ".", "backend", ".", "set_value", "(", "tf_var", ",", "torch_tensor", ")", "\n", "tf_weight", "=", "session", ".", "run", "(", "tf_var", ")", "\n", "print", "(", "\"Successfully created {}: {}\"", ".", "format", "(", "tf_name", ",", "np", ".", "allclose", "(", "tf_weight", ",", "torch_tensor", ")", ")", ")", "\n", "\n", "", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "tf", ".", "trainable_variables", "(", ")", ")", "\n", "saver", ".", "save", "(", "session", ",", "os", ".", "path", ".", "join", "(", "ckpt_dir", ",", "model_name", ".", "replace", "(", "\"-\"", ",", "\"_\"", ")", "+", "\".ckpt\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_pytorch_checkpoint_to_tf.main": [[95, 126], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "pytorch_transformers.modeling.BertModel.from_pretrained", "convert_pytorch_checkpoint_to_tf.convert_pytorch_checkpoint_to_tf", "torch.load"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_pytorch_checkpoint_to_tf.convert_pytorch_checkpoint_to_tf"], ["", "", "def", "main", "(", "raw_args", "=", "None", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model_name\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"model name e.g. bert-base-uncased\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "default", "=", "None", ",", "\n", "required", "=", "False", ",", "\n", "help", "=", "\"Directory containing pytorch model\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pytorch_model_path\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"/path/to/<pytorch-model-name>.bin\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--tf_cache_dir\"", ",", "\n", "type", "=", "str", ",", "\n", "required", "=", "True", ",", "\n", "help", "=", "\"Directory in which to save tensorflow model\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "raw_args", ")", "\n", "\n", "model", "=", "BertModel", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", "=", "args", ".", "model_name", ",", "\n", "state_dict", "=", "torch", ".", "load", "(", "args", ".", "pytorch_model_path", ")", ",", "\n", "cache_dir", "=", "args", ".", "cache_dir", "\n", ")", "\n", "\n", "convert_pytorch_checkpoint_to_tf", "(", "\n", "model", "=", "model", ",", "\n", "ckpt_dir", "=", "args", ".", "tf_cache_dir", ",", "\n", "model_name", "=", "args", ".", "model_name", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.__init__": [[64, 91], ["tokenization_utils.PreTrainedTokenizer.__init__", "spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "\n", "do_lower_case", "=", "False", ",", "remove_space", "=", "True", ",", "keep_accents", "=", "False", ",", "\n", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "sep_token", "=", "\"<sep>\"", ",", "\n", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"<cls>\"", ",", "mask_token", "=", "\"<mask>\"", ",", "\n", "additional_special_tokens", "=", "[", "\"<eop>\"", ",", "\"<eod>\"", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLNetTokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "\n", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "additional_special_tokens", "=", "\n", "additional_special_tokens", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "remove_space", "=", "remove_space", "\n", "self", ".", "keep_accents", "=", "keep_accents", "\n", "self", ".", "vocab_file", "=", "vocab_file", "\n", "\n", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.vocab_size": [[92, 95], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sp_model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.__getstate__": [[96, 100], ["tokenization_xlnet.XLNetTokenizer.__dict__.copy"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "\"sp_model\"", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.__setstate__": [[101, 110], ["spm.SentencePieceProcessor", "tokenization_xlnet.XLNetTokenizer.sp_model.Load", "logger.warning"], "methods", ["None"], ["", "def", "__setstate__", "(", "self", ",", "d", ")", ":", "\n", "        ", "self", ".", "__dict__", "=", "d", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"You need to install SentencePiece to use XLNetTokenizer: https://github.com/google/sentencepiece\"", "\n", "\"pip install sentencepiece\"", ")", "\n", "", "self", ".", "sp_model", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp_model", ".", "Load", "(", "self", ".", "vocab_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.preprocess_text": [[111, 128], ["outputs.lower.lower.replace().replace", "isinstance", "outputs.lower.lower.decode", "unicodedata.normalize", "outputs.lower.lower.lower", "inputs.strip().split", "outputs.lower.lower.replace", "inputs.strip", "unicodedata.combining"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "preprocess_text", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "if", "self", ".", "remove_space", ":", "\n", "            ", "outputs", "=", "' '", ".", "join", "(", "inputs", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "inputs", "\n", "", "outputs", "=", "outputs", ".", "replace", "(", "\"``\"", ",", "'\"'", ")", ".", "replace", "(", "\"''\"", ",", "'\"'", ")", "\n", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "outputs", ",", "str", ")", ":", "\n", "            ", "outputs", "=", "outputs", ".", "decode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "self", ".", "keep_accents", ":", "\n", "            ", "outputs", "=", "unicodedata", ".", "normalize", "(", "'NFKD'", ",", "outputs", ")", "\n", "outputs", "=", "''", ".", "join", "(", "[", "c", "for", "c", "in", "outputs", "if", "not", "unicodedata", ".", "combining", "(", "c", ")", "]", ")", "\n", "", "if", "self", ".", "do_lower_case", ":", "\n", "            ", "outputs", "=", "outputs", ".", "lower", "(", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer._tokenize": [[129, 167], ["tokenization_xlnet.XLNetTokenizer.preprocess_text", "isinstance", "text.encode.encode.encode", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.sp_model.SampleEncodeAsPieces", "piece[].isdigit", "tokenization_xlnet.XLNetTokenizer.sp_model.EncodeAsPieces", "tokenization_xlnet.XLNetTokenizer.append", "new_pieces.extend", "new_pieces.append", "isinstance", "ret_pieces.append", "len", "piece[].replace", "piece.decode.decode.decode", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.preprocess_text", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "return_unicode", "=", "True", ",", "sample", "=", "False", ")", ":", "\n", "        ", "\"\"\" Tokenize a string.\n            return_unicode is used only for py2\n        \"\"\"", "\n", "text", "=", "self", ".", "preprocess_text", "(", "text", ")", "\n", "# note(zhiliny): in some systems, sentencepiece only accepts str for py2", "\n", "if", "six", ".", "PY2", "and", "isinstance", "(", "text", ",", "unicode", ")", ":", "\n", "            ", "text", "=", "text", ".", "encode", "(", "'utf-8'", ")", "\n", "\n", "", "if", "not", "sample", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "pieces", "=", "self", ".", "sp_model", ".", "SampleEncodeAsPieces", "(", "text", ",", "64", ",", "0.1", ")", "\n", "", "new_pieces", "=", "[", "]", "\n", "for", "piece", "in", "pieces", ":", "\n", "            ", "if", "len", "(", "piece", ")", ">", "1", "and", "piece", "[", "-", "1", "]", "==", "','", "and", "piece", "[", "-", "2", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "cur_pieces", "=", "self", ".", "sp_model", ".", "EncodeAsPieces", "(", "\n", "piece", "[", ":", "-", "1", "]", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "''", ")", ")", "\n", "if", "piece", "[", "0", "]", "!=", "SPIECE_UNDERLINE", "and", "cur_pieces", "[", "0", "]", "[", "0", "]", "==", "SPIECE_UNDERLINE", ":", "\n", "                    ", "if", "len", "(", "cur_pieces", "[", "0", "]", ")", "==", "1", ":", "\n", "                        ", "cur_pieces", "=", "cur_pieces", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "                        ", "cur_pieces", "[", "0", "]", "=", "cur_pieces", "[", "0", "]", "[", "1", ":", "]", "\n", "", "", "cur_pieces", ".", "append", "(", "piece", "[", "-", "1", "]", ")", "\n", "new_pieces", ".", "extend", "(", "cur_pieces", ")", "\n", "", "else", ":", "\n", "                ", "new_pieces", ".", "append", "(", "piece", ")", "\n", "\n", "# note(zhiliny): convert back to unicode for py2", "\n", "", "", "if", "six", ".", "PY2", "and", "return_unicode", ":", "\n", "            ", "ret_pieces", "=", "[", "]", "\n", "for", "piece", "in", "new_pieces", ":", "\n", "                ", "if", "isinstance", "(", "piece", ",", "str", ")", ":", "\n", "                    ", "piece", "=", "piece", ".", "decode", "(", "'utf-8'", ")", "\n", "", "ret_pieces", ".", "append", "(", "piece", ")", "\n", "", "new_pieces", "=", "ret_pieces", "\n", "\n", "", "return", "new_pieces", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer._convert_token_to_id": [[168, 171], ["tokenization_xlnet.XLNetTokenizer.sp_model.PieceToId"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "sp_model", ".", "PieceToId", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer._convert_id_to_token": [[172, 178], ["tokenization_xlnet.XLNetTokenizer.sp_model.IdToPiece", "isinstance", "token.decode.decode.decode"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ",", "return_unicode", "=", "True", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "token", "=", "self", ".", "sp_model", ".", "IdToPiece", "(", "index", ")", "\n", "if", "six", ".", "PY2", "and", "return_unicode", "and", "isinstance", "(", "token", ",", "str", ")", ":", "\n", "            ", "token", "=", "token", ".", "decode", "(", "'utf-8'", ")", "\n", "", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.convert_tokens_to_string": [[179, 183], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\"Converts a sequence of tokens (strings for sub-words) in a single string.\"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "SPIECE_UNDERLINE", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.add_special_tokens_single_sentence": [[184, 192], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_single_sentence", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence pair for sequence classification tasks.\n        An XLNet sequence pair has the following format: A [SEP] B [SEP][CLS]\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "token_ids", "+", "sep", "+", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.add_special_tokens_sentences_pair": [[193, 201], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_sentences_pair", "(", "self", ",", "token_ids_0", ",", "token_ids_1", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence for sequence classification tasks.\n        An XLNet sequence has the following format: X [SEP][CLS]\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "+", "cls", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlnet.XLNetTokenizer.save_vocabulary": [[202, 215], ["os.path.join", "os.path.isdir", "logger.error", "os.path.abspath", "os.path.abspath", "shutil.copyfile"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the sentencepiece vocabulary (copy original file) and special tokens file\n            to a directory.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "out_vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "\n", "if", "os", ".", "path", ".", "abspath", "(", "self", ".", "vocab_file", ")", "!=", "os", ".", "path", ".", "abspath", "(", "out_vocab_file", ")", ":", "\n", "            ", "copyfile", "(", "self", ".", "vocab_file", ",", "out_vocab_file", ")", "\n", "\n", "", "return", "(", "out_vocab_file", ",", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_roberta_checkpoint_to_pytorch.convert_roberta_checkpoint_to_pytorch": [[42, 156], ["fairseq.models.roberta.RobertaModel.from_pretrained", "FairseqRobertaModel.from_pretrained.eval", "pytorch_transformers.modeling_bert.BertConfig", "print", "model.eval", "torch.zeros_like", "range", "FairseqRobertaModel.from_pretrained.encode().unsqueeze", "print", "torch.max().item", "print", "torch.allclose", "print", "print", "model.save_pretrained", "pytorch_transformers.modeling_roberta.RobertaForSequenceClassification", "pytorch_transformers.modeling_roberta.RobertaForMaskedLM", "model", "Exception", "torch.Size", "FairseqRobertaModel.from_pretrained.encode", "FairseqRobertaModel.from_pretrained.extract_features", "FairseqRobertaModel.from_pretrained.model", "torch.max", "torch.abs"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.save_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["def", "convert_roberta_checkpoint_to_pytorch", "(", "roberta_checkpoint_path", ",", "pytorch_dump_folder_path", ",", "classification_head", ")", ":", "\n", "    ", "\"\"\"\n    Copy/paste/tweak roberta's weights to our BERT structure.\n    \"\"\"", "\n", "roberta", "=", "FairseqRobertaModel", ".", "from_pretrained", "(", "roberta_checkpoint_path", ")", "\n", "roberta", ".", "eval", "(", ")", "# disable dropout", "\n", "config", "=", "BertConfig", "(", "\n", "vocab_size_or_config_json_file", "=", "50265", ",", "\n", "hidden_size", "=", "roberta", ".", "args", ".", "encoder_embed_dim", ",", "\n", "num_hidden_layers", "=", "roberta", ".", "args", ".", "encoder_layers", ",", "\n", "num_attention_heads", "=", "roberta", ".", "args", ".", "encoder_attention_heads", ",", "\n", "intermediate_size", "=", "roberta", ".", "args", ".", "encoder_ffn_embed_dim", ",", "\n", "max_position_embeddings", "=", "514", ",", "\n", "type_vocab_size", "=", "1", ",", "\n", "layer_norm_eps", "=", "1e-5", ",", "# PyTorch default used in fairseq", "\n", ")", "\n", "if", "classification_head", ":", "\n", "        ", "config", ".", "num_labels", "=", "roberta", ".", "args", ".", "num_classes", "\n", "", "print", "(", "\"Our BERT config:\"", ",", "config", ")", "\n", "\n", "model", "=", "RobertaForSequenceClassification", "(", "config", ")", "if", "classification_head", "else", "RobertaForMaskedLM", "(", "config", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "# Now let's copy all the weights.", "\n", "# Embeddings", "\n", "roberta_sent_encoder", "=", "roberta", ".", "model", ".", "decoder", ".", "sentence_encoder", "\n", "model", ".", "roberta", ".", "embeddings", ".", "word_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_tokens", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "position_embeddings", ".", "weight", "=", "roberta_sent_encoder", ".", "embed_positions", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ".", "data", "=", "torch", ".", "zeros_like", "(", "model", ".", "roberta", ".", "embeddings", ".", "token_type_embeddings", ".", "weight", ")", "# just zero them out b/c RoBERTa doesn't use them.", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "weight", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "weight", "\n", "model", ".", "roberta", ".", "embeddings", ".", "LayerNorm", ".", "bias", "=", "roberta_sent_encoder", ".", "emb_layer_norm", ".", "bias", "\n", "\n", "for", "i", "in", "range", "(", "config", ".", "num_hidden_layers", ")", ":", "\n", "# Encoder: start of layer", "\n", "        ", "layer", ":", "BertLayer", "=", "model", ".", "roberta", ".", "encoder", ".", "layer", "[", "i", "]", "\n", "roberta_layer", ":", "TransformerSentenceEncoderLayer", "=", "roberta_sent_encoder", ".", "layers", "[", "i", "]", "\n", "\n", "### self attention", "\n", "self_attn", ":", "BertSelfAttention", "=", "layer", ".", "attention", ".", "self", "\n", "assert", "(", "\n", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", ".", "shape", "==", "torch", ".", "Size", "(", "(", "3", "*", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", ")", "\n", ")", "\n", "# we use three distinct linear layers so we split the source layer here.", "\n", "self_attn", ".", "query", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", ":", "config", ".", "hidden_size", ",", ":", "]", "\n", "self_attn", ".", "query", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", ":", "config", ".", "hidden_size", "]", "\n", "self_attn", ".", "key", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", "config", ".", "hidden_size", ":", "2", "*", "config", ".", "hidden_size", ",", ":", "]", "\n", "self_attn", ".", "key", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", "config", ".", "hidden_size", ":", "2", "*", "config", ".", "hidden_size", "]", "\n", "self_attn", ".", "value", ".", "weight", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_weight", "[", "2", "*", "config", ".", "hidden_size", ":", ",", ":", "]", "\n", "self_attn", ".", "value", ".", "bias", ".", "data", "=", "roberta_layer", ".", "self_attn", ".", "in_proj_bias", "[", "2", "*", "config", ".", "hidden_size", ":", "]", "\n", "\n", "### self-attention output", "\n", "self_output", ":", "BertSelfOutput", "=", "layer", ".", "attention", ".", "output", "\n", "assert", "(", "\n", "self_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", ".", "shape", "\n", ")", "\n", "self_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "weight", "\n", "self_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "self_attn", ".", "out_proj", ".", "bias", "\n", "self_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "weight", "\n", "self_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "self_attn_layer_norm", ".", "bias", "\n", "\n", "### intermediate", "\n", "intermediate", ":", "BertIntermediate", "=", "layer", ".", "intermediate", "\n", "assert", "(", "\n", "intermediate", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc1", ".", "weight", ".", "shape", "\n", ")", "\n", "intermediate", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc1", ".", "weight", "\n", "intermediate", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc1", ".", "bias", "\n", "\n", "### output", "\n", "bert_output", ":", "BertOutput", "=", "layer", ".", "output", "\n", "assert", "(", "\n", "bert_output", ".", "dense", ".", "weight", ".", "shape", "==", "roberta_layer", ".", "fc2", ".", "weight", ".", "shape", "\n", ")", "\n", "bert_output", ".", "dense", ".", "weight", "=", "roberta_layer", ".", "fc2", ".", "weight", "\n", "bert_output", ".", "dense", ".", "bias", "=", "roberta_layer", ".", "fc2", ".", "bias", "\n", "bert_output", ".", "LayerNorm", ".", "weight", "=", "roberta_layer", ".", "final_layer_norm", ".", "weight", "\n", "bert_output", ".", "LayerNorm", ".", "bias", "=", "roberta_layer", ".", "final_layer_norm", ".", "bias", "\n", "#### end of layer", "\n", "\n", "", "if", "classification_head", ":", "\n", "        ", "model", ".", "classifier", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "weight", "\n", "model", ".", "classifier", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "dense", ".", "bias", "\n", "model", ".", "classifier", ".", "out_proj", ".", "weight", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "weight", "\n", "model", ".", "classifier", ".", "out_proj", ".", "bias", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", ".", "out_proj", ".", "bias", "\n", "", "else", ":", "\n", "# LM Head", "\n", "        ", "model", ".", "lm_head", ".", "dense", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "weight", "\n", "model", ".", "lm_head", ".", "dense", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "dense", ".", "bias", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "weight", "\n", "model", ".", "lm_head", ".", "layer_norm", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "layer_norm", ".", "bias", "\n", "model", ".", "lm_head", ".", "decoder", ".", "weight", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "weight", "\n", "model", ".", "lm_head", ".", "bias", "=", "roberta", ".", "model", ".", "decoder", ".", "lm_head", ".", "bias", "\n", "\n", "# Let's check that we get the same results.", "\n", "", "input_ids", ":", "torch", ".", "Tensor", "=", "roberta", ".", "encode", "(", "SAMPLE_TEXT", ")", ".", "unsqueeze", "(", "0", ")", "# batch of size 1", "\n", "\n", "our_output", "=", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "if", "classification_head", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", ".", "classification_heads", "[", "'mnli'", "]", "(", "roberta", ".", "extract_features", "(", "input_ids", ")", ")", "\n", "", "else", ":", "\n", "        ", "their_output", "=", "roberta", ".", "model", "(", "input_ids", ")", "[", "0", "]", "\n", "", "print", "(", "our_output", ".", "shape", ",", "their_output", ".", "shape", ")", "\n", "max_absolute_diff", "=", "torch", ".", "max", "(", "torch", ".", "abs", "(", "our_output", "-", "their_output", ")", ")", ".", "item", "(", ")", "\n", "print", "(", "f\"max_absolute_diff = {max_absolute_diff}\"", ")", "# ~ 1e-7", "\n", "success", "=", "torch", ".", "allclose", "(", "our_output", ",", "their_output", ",", "atol", "=", "1e-3", ")", "\n", "print", "(", "\n", "\"Do both models output the same tensors?\"", ",", "\n", "\"\ud83d\udd25\"", "if", "success", "else", "\"\ud83d\udca9\"", "\n", ")", "\n", "if", "not", "success", ":", "\n", "        ", "raise", "Exception", "(", "\"Something went wRoNg\"", ")", "\n", "\n", "", "print", "(", "f\"Saving model to {pytorch_dump_folder_path}\"", ")", "\n", "model", ".", "save_pretrained", "(", "pytorch_dump_folder_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertConfig.__init__": [[54, 95], ["pytorch_transformers.modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30522", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "sinusoidal_pos_embds", "=", "True", ",", "\n", "n_layers", "=", "6", ",", "\n", "n_heads", "=", "12", ",", "\n", "dim", "=", "768", ",", "\n", "hidden_dim", "=", "4", "*", "768", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "activation", "=", "'gelu'", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "tie_weights_", "=", "True", ",", "\n", "qa_dropout", "=", "0.1", ",", "\n", "seq_classif_dropout", "=", "0.2", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DistilBertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "sinusoidal_pos_embds", "=", "sinusoidal_pos_embds", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "tie_weights_", "=", "tie_weights_", "\n", "self", ".", "qa_dropout", "=", "qa_dropout", "\n", "self", ".", "seq_classif_dropout", "=", "seq_classif_dropout", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertConfig.hidden_size": [[96, 99], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertConfig.num_attention_heads": [[100, 103], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertConfig.num_hidden_layers": [[104, 107], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.Embeddings.__init__": [[124, 136], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LayerNorm", "torch.LayerNorm", "torch.Dropout", "torch.Dropout", "modeling_distilbert.create_sinusoidal_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.create_sinusoidal_embeddings"], ["    ", "def", "__init__", "(", "self", ",", "\n", "config", ")", ":", "\n", "        ", "super", "(", "Embeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_pos_embds", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "n_pos", "=", "config", ".", "max_position_embeddings", ",", "\n", "dim", "=", "config", ".", "dim", ",", "\n", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "\n", "", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.Embeddings.forward": [[137, 160], ["input_ids.size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "modeling_distilbert.Embeddings.word_embeddings", "modeling_distilbert.Embeddings.position_embeddings", "modeling_distilbert.Embeddings.LayerNorm", "modeling_distilbert.Embeddings.dropout", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        input_ids: torch.tensor(bs, max_seq_length)\n            The token ids to embed.\n\n        Outputs\n        -------\n        embeddings: torch.tensor(bs, max_seq_length, dim)\n            The embedded tokens (plus position embeddings, no token_type embeddings)\n        \"\"\"", "\n", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "# (max_seq_length)", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "# (bs, max_seq_length)", "\n", "\n", "word_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "# (bs, max_seq_length, dim)", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "# (bs, max_seq_length, dim)", "\n", "\n", "embeddings", "=", "word_embeddings", "+", "position_embeddings", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "# (bs, max_seq_length, dim)", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.MultiHeadSelfAttention.__init__": [[162, 178], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "attention_dropout", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.MultiHeadSelfAttention.prune_heads": [[179, 199], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "pytorch_transformers.modeling_utils.prune_linear_layer", "pytorch_transformers.modeling_utils.prune_linear_layer", "pytorch_transformers.modeling_utils.prune_linear_layer", "pytorch_transformers.modeling_utils.prune_linear_layer", "modeling_distilbert.MultiHeadSelfAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.MultiHeadSelfAttention.forward": [[200, 259], ["query.size", "key.size", "modeling_distilbert.MultiHeadSelfAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "query", ",", "key", ",", "value", ",", "mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        query: torch.tensor(bs, seq_length, dim)\n        key: torch.tensor(bs, seq_length, dim)\n        value: torch.tensor(bs, seq_length, dim)\n        mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            Attention weights\n        context: torch.tensor(bs, seq_length, dim)\n            Contextualized layer. Optional: only if `output_attentions=True`\n        \"\"\"", "\n", "bs", ",", "q_length", ",", "dim", "=", "query", ".", "size", "(", ")", "\n", "k_length", "=", "key", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "# assert key.size() == value.size()", "\n", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "\n", "assert", "2", "<=", "mask", ".", "dim", "(", ")", "<=", "3", "\n", "causal", "=", "(", "mask", ".", "dim", "(", ")", "==", "3", ")", "\n", "mask_reshp", "=", "(", "bs", ",", "1", ",", "1", ",", "k_length", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\" separate heads \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\" group heads \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "query", ")", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "key", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "value", ")", ")", "# (bs, n_heads, k_length, dim_per_head)", "\n", "\n", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshp", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "weights", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "scores", ")", "# (bs, n_heads, q_length, k_length)", "\n", "weights", "=", "self", ".", "dropout", "(", "weights", ")", "# (bs, n_heads, q_length, k_length)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, q_length, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, q_length, dim)", "\n", "context", "=", "self", ".", "out_lin", "(", "context", ")", "# (bs, q_length, dim)", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "(", "context", ",", "weights", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "context", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.FFN.__init__": [[261, 268], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "FFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "dim", ",", "out_features", "=", "config", ".", "hidden_dim", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "in_features", "=", "config", ".", "hidden_dim", ",", "out_features", "=", "config", ".", "dim", ")", "\n", "assert", "config", ".", "activation", "in", "[", "'relu'", ",", "'gelu'", "]", ",", "\"activation ({}) must be in ['relu', 'gelu']\"", ".", "format", "(", "config", ".", "activation", ")", "\n", "self", ".", "activation", "=", "gelu", "if", "config", ".", "activation", "==", "'gelu'", "else", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.FFN.forward": [[269, 275], ["modeling_distilbert.FFN.lin1", "modeling_distilbert.FFN.activation", "modeling_distilbert.FFN.lin2", "modeling_distilbert.FFN.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.TransformerBlock.__init__": [[277, 294], ["torch.Module.__init__", "torch.Dropout", "torch.Dropout", "modeling_distilbert.MultiHeadSelfAttention", "torch.LayerNorm", "torch.LayerNorm", "modeling_distilbert.FFN", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "\n", "self", ".", "dim", "=", "config", ".", "dim", "\n", "self", ".", "hidden_dim", "=", "config", ".", "hidden_dim", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "config", ".", "dropout", ")", "\n", "self", ".", "activation", "=", "config", ".", "activation", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "assert", "config", ".", "dim", "%", "config", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "attention", "=", "MultiHeadSelfAttention", "(", "config", ")", "\n", "self", ".", "sa_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n", "self", ".", "ffn", "=", "FFN", "(", "config", ")", "\n", "self", ".", "output_layer_norm", "=", "nn", ".", "LayerNorm", "(", "normalized_shape", "=", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.TransformerBlock.forward": [[295, 326], ["modeling_distilbert.TransformerBlock.attention", "modeling_distilbert.TransformerBlock.sa_layer_norm", "modeling_distilbert.TransformerBlock.ffn", "modeling_distilbert.TransformerBlock.output_layer_norm", "type"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n        attn_mask: torch.tensor(bs, seq_length)\n\n        Outputs\n        -------\n        sa_weights: torch.tensor(bs, n_heads, seq_length, seq_length)\n            The attention weights\n        ffn_output: torch.tensor(bs, seq_length, dim)\n            The output of the transformer block contextualization.\n        \"\"\"", "\n", "# Self-Attention", "\n", "sa_output", "=", "self", ".", "attention", "(", "query", "=", "x", ",", "key", "=", "x", ",", "value", "=", "x", ",", "mask", "=", "attn_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "sa_output", ",", "sa_weights", "=", "sa_output", "# (bs, seq_length, dim), (bs, n_heads, seq_length, seq_length)", "\n", "", "else", ":", "# To handle these `output_attention` or `output_hidden_states` cases returning tuples", "\n", "            ", "assert", "type", "(", "sa_output", ")", "==", "tuple", "\n", "sa_output", "=", "sa_output", "[", "0", "]", "\n", "", "sa_output", "=", "self", ".", "sa_layer_norm", "(", "sa_output", "+", "x", ")", "# (bs, seq_length, dim)", "\n", "\n", "# Feed Forward Network", "\n", "ffn_output", "=", "self", ".", "ffn", "(", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "ffn_output", "=", "self", ".", "output_layer_norm", "(", "ffn_output", "+", "sa_output", ")", "# (bs, seq_length, dim)", "\n", "\n", "output", "=", "(", "ffn_output", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "output", "=", "(", "sa_weights", ",", ")", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.Transformer.__init__": [[329, 337], ["torch.Module.__init__", "modeling_distilbert.TransformerBlock", "torch.ModuleList", "torch.ModuleList", "copy.deepcopy", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "Transformer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "layer", "=", "TransformerBlock", "(", "config", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "copy", ".", "deepcopy", "(", "layer", ")", "for", "_", "in", "range", "(", "config", ".", "n_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.Transformer.forward": [[338, 388], ["enumerate", "layer_module", "len", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        x: torch.tensor(bs, seq_length, dim)\n            Input sequence embedded.\n        attn_mask: torch.tensor(bs, seq_length)\n            Attention mask on the sequence.\n\n        Outputs\n        -------\n        hidden_state: torch.tensor(bs, seq_length, dim)\n            Sequence of hiddens states in the last (top) layer\n        all_hidden_states: Tuple[torch.tensor(bs, seq_length, dim)]\n            Tuple of length n_layers with the hidden states from each layer.\n            Optional: only if output_hidden_states=True\n        all_attentions: Tuple[torch.tensor(bs, n_heads, seq_length, seq_length)]\n            Tuple of length n_layers with the attention weights from each layer\n            Optional: only if output_attentions=True\n        \"\"\"", "\n", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "\n", "hidden_state", "=", "x", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "x", "=", "hidden_state", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "hidden_state", "=", "layer_outputs", "[", "-", "1", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "2", "\n", "attentions", "=", "layer_outputs", "[", "0", "]", "\n", "all_attentions", "=", "all_attentions", "+", "(", "attentions", ",", ")", "\n", "", "else", ":", "\n", "                ", "assert", "len", "(", "layer_outputs", ")", "==", "1", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_state", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_state", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertPreTrainedModel.__init__": [[400, 402], ["pytorch_transformers.modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DistilBertPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertPreTrainedModel._init_weights": [[403, 416], ["isinstance", "isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.normal_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "module", ".", "weight", ".", "requires_grad", ":", "\n", "                ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertModel.__init__": [[482, 489], ["modeling_distilbert.DistilBertPreTrainedModel.__init__", "modeling_distilbert.Embeddings", "modeling_distilbert.Transformer", "modeling_distilbert.DistilBertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "Embeddings", "(", "config", ")", "# Embeddings", "\n", "self", ".", "transformer", "=", "Transformer", "(", "config", ")", "# Encoder", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertModel._resize_token_embeddings": [[490, 495], ["modeling_distilbert.DistilBertModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "embeddings", ".", "word_embeddings", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "embeddings", ".", "word_embeddings", "=", "new_embeddings", "\n", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertModel._prune_heads": [[496, 503], ["heads_to_prune.items", "modeling_distilbert.DistilBertModel.transformer.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "transformer", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertModel.forward": [[504, 532], ["modeling_distilbert.DistilBertModel.embeddings", "modeling_distilbert.DistilBertModel.transformer", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_distilbert.DistilBertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "\n", "input_ids", ",", "attention_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "# (bs, seq_length)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ")", "# (bs, seq_length, dim)", "\n", "tfmr_output", "=", "self", ".", "transformer", "(", "x", "=", "embedding_output", ",", "\n", "attn_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_state", "=", "tfmr_output", "[", "0", "]", "\n", "output", "=", "(", "hidden_state", ",", ")", "+", "tfmr_output", "[", "1", ":", "]", "\n", "\n", "return", "output", "# last-layer hidden-state, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForMaskedLM.__init__": [[566, 580], ["modeling_distilbert.DistilBertPreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "modeling_distilbert.DistilBertForMaskedLM.init_weights", "modeling_distilbert.DistilBertForMaskedLM.tie_weights", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "vocab_transform", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "vocab_layer_norm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "dim", ",", "eps", "=", "1e-12", ")", "\n", "self", ".", "vocab_projector", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "vocab_size", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n", "self", ".", "mlm_loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForMaskedLM.tie_weights": [[581, 587], ["modeling_distilbert.DistilBertForMaskedLM._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "vocab_projector", ",", "\n", "self", ".", "distilbert", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForMaskedLM.forward": [[588, 605], ["modeling_distilbert.DistilBertForMaskedLM.distilbert", "modeling_distilbert.DistilBertForMaskedLM.vocab_transform", "modeling_distilbert.gelu", "modeling_distilbert.DistilBertForMaskedLM.vocab_layer_norm", "modeling_distilbert.DistilBertForMaskedLM.vocab_projector", "modeling_distilbert.DistilBertForMaskedLM.mlm_loss_fct", "modeling_distilbert.DistilBertForMaskedLM.view", "masked_lm_labels.view", "modeling_distilbert.DistilBertForMaskedLM.size"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.gelu"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "dlbrt_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "dlbrt_output", "[", "0", "]", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_transform", "(", "hidden_states", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "gelu", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_layer_norm", "(", "prediction_logits", ")", "# (bs, seq_length, dim)", "\n", "prediction_logits", "=", "self", ".", "vocab_projector", "(", "prediction_logits", ")", "# (bs, seq_length, vocab_size)", "\n", "\n", "outputs", "=", "(", "prediction_logits", ",", ")", "+", "dlbrt_output", "[", "1", ":", "]", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "mlm_loss", "=", "self", ".", "mlm_loss_fct", "(", "prediction_logits", ".", "view", "(", "-", "1", ",", "prediction_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "mlm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (mlm_loss), prediction_logits, (all hidden_states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForSequenceClassification.__init__": [[641, 651], ["modeling_distilbert.DistilBertPreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "pre_classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "dim", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "seq_classif_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForSequenceClassification.forward": [[652, 674], ["modeling_distilbert.DistilBertForSequenceClassification.distilbert", "modeling_distilbert.DistilBertForSequenceClassification.pre_classifier", "modeling_distilbert.DistilBertForSequenceClassification.dropout", "modeling_distilbert.DistilBertForSequenceClassification.classifier", "torch.ReLU", "torch.ReLU", "torch.MSELoss", "torch.MSELoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view", "modeling_distilbert.DistilBertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_state", "=", "distilbert_output", "[", "0", "]", "# (bs, seq_len, dim)", "\n", "pooled_output", "=", "hidden_state", "[", ":", ",", "0", "]", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "pre_classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "nn", ".", "ReLU", "(", ")", "(", "pooled_output", ")", "# (bs, dim)", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "# (bs, dim)", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "# (bs, dim)", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForQuestionAnswering.__init__": [[716, 725], ["modeling_distilbert.DistilBertPreTrainedModel.__init__", "modeling_distilbert.DistilBertModel", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "modeling_distilbert.DistilBertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "DistilBertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "distilbert", "=", "DistilBertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "dim", ",", "config", ".", "num_labels", ")", "\n", "assert", "config", ".", "num_labels", "==", "2", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "qa_dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.DistilBertForQuestionAnswering.forward": [[726, 757], ["modeling_distilbert.DistilBertForQuestionAnswering.distilbert", "modeling_distilbert.DistilBertForQuestionAnswering.dropout", "modeling_distilbert.DistilBertForQuestionAnswering.qa_outputs", "modeling_distilbert.DistilBertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "distilbert_output", "=", "self", ".", "distilbert", "(", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "distilbert_output", "[", "0", "]", "# (bs, max_query_len, dim)", "\n", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "# (bs, max_query_len, dim)", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "hidden_states", ")", "# (bs, max_query_len, 2)", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "# (bs, max_query_len)", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "distilbert_output", "[", "1", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "nn", ".", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.gelu": [[110, 112], ["torch.erf", "torch.erf", "math.sqrt"], "function", ["None"], ["", "", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_distilbert.create_sinusoidal_embeddings": [[113, 122], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Config.__init__": [[129, 200], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "50257", ",", "\n", "n_positions", "=", "1024", ",", "\n", "n_ctx", "=", "1024", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs GPT2Config.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `GPT2Model` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "GPT2Config", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Config.max_position_embeddings": [[203, 206], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Config.hidden_size": [[207, 210], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Config.num_attention_heads": [[211, 214], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Config.num_hidden_layers": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention.__init__": [[222, 240], ["torch.Module.__init__", "modeling_gpt2.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "bottleneck", "=", "0", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "bottleneck", "=", "bottleneck", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention.prune_heads": [[241, 262], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_gpt2.Attention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention._attn": [[263, 283], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_gpt2.Attention.attn_dropout", "modeling_gpt2.Attention.size", "modeling_gpt2.Attention.size", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "", "nd", ",", "ns", "=", "w", ".", "size", "(", "-", "2", ")", ",", "w", ".", "size", "(", "-", "1", ")", "\n", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention.merge_heads": [[284, 288], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention.split_heads": [[289, 296], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, head, head_features, seq_length)", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Attention.forward": [[297, 319], ["modeling_gpt2.Attention.c_attn", "modeling_gpt2.Attention.split", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "modeling_gpt2.Attention.split_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_gpt2.Attention._attn", "modeling_gpt2.Attention.merge_heads", "modeling_gpt2.Attention.c_proj", "modeling_gpt2.Attention.resid_dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer_past[].transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "layer_past", "[", "1", "]", "# transpose back cf below", "\n", "key", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "key", ")", ",", "dim", "=", "-", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "value", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "value", ")", ")", "# transpose to have same shapes for stacking", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.MLP.__init__": [[322, 329], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.MLP.forward": [[330, 334], ["modeling_gpt2.MLP.act", "modeling_gpt2.MLP.c_proj", "modeling_gpt2.MLP.dropout", "modeling_gpt2.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Block.__init__": [[337, 350], ["torch.Module.__init__", "modeling_bert.BertLayerNorm", "modeling_bert.BertLayerNorm", "modeling_gpt2.MLP", "modeling_gpt2.Attention", "modeling_gpt2.Attention", "modeling_gpt2.Adapter"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "perturbation", "=", "False", ",", "bottleneck", "=", "0", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "if", "perturbation", ":", "\n", "            ", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ",", "bottleneck", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "", "self", ".", "ln_2", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "self", ".", "bottleneck", "=", "bottleneck", "\n", "if", "self", ".", "bottleneck", ">", "0", ":", "\n", "            ", "self", ".", "adapter_block", "=", "Adapter", "(", "config", ",", "bottleneck", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Block.forward": [[350, 361], ["modeling_gpt2.Block.attn", "modeling_gpt2.Block.mlp", "modeling_gpt2.Block.ln_1", "modeling_gpt2.Block.ln_2", "modeling_gpt2.Block.adapter_block"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "output_attn", "=", "self", ".", "attn", "(", "self", ".", "ln_1", "(", "x", ")", ",", "layer_past", "=", "layer_past", ",", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "\n", "x", "=", "x", "+", "a", "\n", "m", "=", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "m", "\n", "if", "self", ".", "bottleneck", ">", "0", ":", "\n", "            ", "x", "=", "self", ".", "adapter_block", "(", "x", ")", "\n", "", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Adapter.__init__": [[381, 388], ["torch.Module.__init__", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck", ")", ":", "\n", "        ", "super", "(", "Adapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "project_down", "=", "nn", ".", "Linear", "(", "nx", ",", "bottleneck", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "project_up", "=", "nn", ".", "Linear", "(", "bottleneck", ",", "nx", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.Adapter.forward": [[388, 395], ["modeling_gpt2.Adapter.ln", "modeling_gpt2.Adapter.project_down", "modeling_gpt2.Adapter.relu", "modeling_gpt2.Adapter.project_up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_", "=", "self", ".", "ln", "(", "x", ")", "\n", "x_", "=", "self", ".", "project_down", "(", "x_", ")", "\n", "x_", "=", "self", ".", "relu", "(", "x_", ")", "\n", "x_", "=", "self", ".", "project_up", "(", "x_", ")", "\n", "x", "=", "x", "+", "x_", "#residual connection", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.MixAdapter.__init__": [[397, 401], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_gpt2.Adapter", "bottleneck_map.values"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_map", ")", ":", "\n", "        ", "super", "(", "MixAdapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#bottleneck_map = {\"mt\":300, \"summarization\":100, \"dialogue\":100, \"qa\": 300, \"nlg\": 10}", "\n", "self", ".", "mixadapter", "=", "nn", ".", "ModuleList", "(", "[", "Adapter", "(", "config", ",", "bottleneck", ")", "for", "bottleneck", "in", "bottleneck_map", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.MixAdapter.forward": [[402, 407], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "task_id", ")", ":", "\n", "        ", "if", "task_id", "==", "-", "1", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mixadapter", "[", "task_id", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2PreTrainedModel.__init__": [[417, 419], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2PreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2PreTrainedModel._init_weights": [[420, 432], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Model.__init__": [[508, 520], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_bert.BertLayerNorm", "modeling_gpt2.GPT2Model.init_weights", "modeling_gpt2.Block", "modeling_gpt2.Block", "range", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ",", "perturbation_layers", ",", "bottleneck", ")", ":", "\n", "        ", "super", "(", "GPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "wte", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "wpe", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ",", "bottleneck", "=", "bottleneck", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", "-", "perturbation_layers", ")", "]", "+", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ",", "perturbation", "=", "True", ",", "bottleneck", "=", "bottleneck", ")", "for", "_", "in", "range", "(", "perturbation_layers", ")", "]", ")", "\n", "self", ".", "ln_f", "=", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Model._resize_token_embeddings": [[521, 524], ["modeling_gpt2.GPT2Model._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "self", ".", "wte", "=", "self", ".", "_get_resized_embeddings", "(", "self", ".", "wte", ",", "new_num_tokens", ")", "\n", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Model._prune_heads": [[525, 531], ["heads_to_prune.items", "modeling_gpt2.GPT2Model.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2Model.forward": [[532, 602], ["input_ids.view.view.size", "input_ids.view.view.view", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.view", "modeling_gpt2.GPT2Model.wte", "modeling_gpt2.GPT2Model.wpe", "modeling_gpt2.GPT2Model.drop", "enumerate", "modeling_gpt2.GPT2Model.ln_f", "hidden_states.view.view.view", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.view.view.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.size", "token_type_ids.view.view.view", "modeling_gpt2.GPT2Model.wte", "zip", "block", "tuple", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "token_type_ids.view.view.size", "hidden_states.view.view.size", "tuple.append", "input_ids.view.view.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "t.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_gpt2.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_ids", ".", "size", "(", "-", "1", ")", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ")", "\n", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "layer_past", ",", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", "presents", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2LMHeadModel.__init__": [[645, 654], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_gpt2.GPT2LMHeadModel.init_weights", "modeling_gpt2.GPT2LMHeadModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2LMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "if", "model_kwargs", "[", "\"self_copy\"", "]", ":", "\n", "            ", "config", ".", "output_attentions", "=", "True", "\n", "", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ",", "model_kwargs", "[", "\"perturbation_layers\"", "]", ",", "model_kwargs", "[", "\"adapter_bottleneck\"", "]", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "p_gen_linear", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "1", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "", "def", "tie_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2LMHeadModel.tie_weights": [[654, 660], ["modeling_gpt2.GPT2LMHeadModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ",", "\n", "self", ".", "transformer", ".", "wte", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2LMHeadModel.forward": [[661, 711], ["modeling_gpt2.GPT2LMHeadModel.transformer", "modeling_gpt2.GPT2LMHeadModel.lm_head", "modeling_gpt2.GPT2LMHeadModel.p_gen_linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "vocab_dist_.squeeze().scatter_add().unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "labels[].contiguous", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.softmax", "torch.softmax", "torch.softmax", "dist[].contiguous", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "lm_logits[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "lm_logits[].contiguous.view", "labels[].contiguous.view", "vocab_dist_.squeeze().scatter_add", "lm_logits[].contiguous.size", "input_ids.repeat", "attn_dist_.squeeze", "vocab_dist_.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "labels", "=", "None", ",", "past", "=", "None", ",", "head_mask", "=", "None", ",", "self_copy", "=", "False", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "past", "=", "past", ",", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "#print(lm_logits.shape)", "\n", "if", "self_copy", ":", "\n", "            ", "p_gen", "=", "self", ".", "p_gen_linear", "(", "hidden_states", ")", "\n", "p_gen", "=", "torch", ".", "sigmoid", "(", "p_gen", ")", "\n", "vocab_dist", "=", "F", ".", "softmax", "(", "lm_logits", ",", "dim", "=", "-", "1", ")", "+", "0.00001", "# log(softmax(x)) is numerically unstable", "\n", "vocab_dist_", "=", "p_gen", "*", "vocab_dist", "\n", "#print(p_gen)", "\n", "#print(p_gen.shape, vocab_dist.shape)", "\n", "\n", "#print(transformer_outputs[-1][-1].shape)", "\n", "#last head for copy", "\n", "attn_dist", "=", "transformer_outputs", "[", "-", "1", "]", "[", "-", "1", "]", "[", ":", ",", ":", ",", "-", "1", "]", "#(batch_size, num_choices,  num_heads, sequence_length, sequence_length)", "\n", "#attn_dist = F.softmax(attn_dist, dim=-1)", "\n", "\n", "attn_dist_", "=", "(", "1", "-", "p_gen", ")", "*", "attn_dist", "\n", "#print(vocab_dist_.squeeze(1).shape, input_ids.repeat(1,attn_dist_.shape[-2], 1).shape, attn_dist_.squeeze(1).shape)", "\n", "\n", "dist", "=", "vocab_dist_", ".", "squeeze", "(", "1", ")", ".", "scatter_add", "(", "2", ",", "input_ids", ".", "repeat", "(", "1", ",", "attn_dist_", ".", "shape", "[", "-", "2", "]", ",", "1", ")", ",", "attn_dist_", ".", "squeeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# print(dist)", "\n", "# exit(1)", "\n", "#print(dist)", "\n", "dist", "=", "torch", ".", "log", "(", "dist", ")", "\n", "\n", "outputs", "=", "(", "dist", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "if", "self_copy", ":", "\n", "                ", "shift_logits", "=", "dist", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "# Flatten the tokens", "\n", "", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "# print(loss)", "\n", "# exit(1)", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits(dist if copy), presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2DoubleHeadsModel.__init__": [[800, 808], ["modeling_gpt2.GPT2PreTrainedModel.__init__", "modeling_gpt2.GPT2Model", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_gpt2.GPT2DoubleHeadsModel.init_weights", "modeling_gpt2.GPT2DoubleHeadsModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "GPT2DoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2DoubleHeadsModel.tie_weights": [[809, 815], ["modeling_gpt2.GPT2DoubleHeadsModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ",", "\n", "self", ".", "transformer", ".", "wte", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.GPT2DoubleHeadsModel.forward": [[816, 840], ["modeling_gpt2.GPT2DoubleHeadsModel.transformer", "modeling_gpt2.GPT2DoubleHeadsModel.lm_head", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_gpt2.GPT2DoubleHeadsModel.multiple_choice_head", "mc_logits.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "mc_logits.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "past", "=", "past", ",", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logjits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, presents, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.load_tf_weights_in_gpt2": [[49, 101], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logger.error", "tf.train.load_variable.squeeze", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "gpt2_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'w'", "or", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'wpe'", "or", "l", "[", "0", "]", "==", "'wte'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_gpt2.gelu": [[103, 105], ["torch.tanh", "torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch": [[29, 41], ["pytorch_transformers.modeling_bert.BertConfig.from_json_file", "print", "pytorch_transformers.modeling_bert.BertForPreTraining", "pytorch_transformers.modeling_bert.load_tf_weights_in_bert", "print", "torch.save", "pytorch_transformers.modeling_bert.BertForPreTraining.state_dict", "str"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.load_tf_weights_in_bert"], ["def", "convert_tf_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_path", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "BertConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "BertForPreTraining", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_dump_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_openai_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch": [[33, 52], ["pytorch_transformers.modeling_openai.OpenAIGPTModel", "pytorch_transformers.modeling_openai.load_tf_weights_in_openai_gpt", "print", "torch.save", "print", "pytorch_transformers.modeling_openai.OpenAIGPTConfig", "pytorch_transformers.modeling_openai.OpenAIGPTConfig.from_json_file", "pytorch_transformers.modeling_openai.OpenAIGPTModel.state_dict", "io.open", "f.write", "OpenAIGPTConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.load_tf_weights_in_openai_gpt", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["def", "convert_openai_checkpoint_to_pytorch", "(", "openai_checkpoint_folder_path", ",", "openai_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "openai_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "OpenAIGPTConfig", ".", "from_json_file", "(", "openai_config_file", ")", "\n", "", "model", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.__init__": [[238, 309], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "32000", ",", "\n", "d_model", "=", "1024", ",", "\n", "n_layer", "=", "24", ",", "\n", "n_head", "=", "16", ",", "\n", "d_inner", "=", "4096", ",", "\n", "ff_activation", "=", "\"gelu\"", ",", "\n", "untie_r", "=", "True", ",", "\n", "attn_type", "=", "\"bi\"", ",", "\n", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "\n", "dropout", "=", "0.1", ",", "\n", "mem_len", "=", "None", ",", "\n", "reuse_len", "=", "None", ",", "\n", "bi_data", "=", "False", ",", "\n", "clamp_len", "=", "-", "1", ",", "\n", "same_length", "=", "False", ",", "\n", "\n", "finetuning_task", "=", "None", ",", "\n", "num_labels", "=", "2", ",", "\n", "summary_type", "=", "'last'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "'tanh'", ",", "\n", "summary_last_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLNetConfig.\n        \"\"\"", "\n", "super", "(", "XLNetConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "n_token", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "assert", "d_model", "%", "n_head", "==", "0", "\n", "self", ".", "d_head", "=", "d_model", "//", "n_head", "\n", "self", ".", "ff_activation", "=", "ff_activation", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "reuse_len", "=", "reuse_len", "\n", "self", ".", "bi_data", "=", "bi_data", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "\n", "self", ".", "finetuning_task", "=", "finetuning_task", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_last_dropout", "=", "summary_last_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.max_position_embeddings": [[311, 314], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.vocab_size": [[319, 322], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.hidden_size": [[323, 326], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.num_attention_heads": [[327, 330], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetConfig.num_hidden_layers": [[331, 334], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.__init__": [[343, 370], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "XLNetLayerNorm", "torch.nn.Dropout", "ValueError", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetRelativeAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "if", "config", ".", "d_model", "%", "config", ".", "n_head", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "d_model", ",", "config", ".", "n_head", ")", ")", "\n", "\n", "", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "scale", "=", "1", "/", "(", "config", ".", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "q", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "k", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "v", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "o", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "config", ".", "d_model", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_s_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "seg_embed", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "2", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.prune_heads": [[371, 373], ["None"], "methods", ["None"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift": [[374, 386], ["torch.index_select.reshape", "torch.index_select.reshape", "torch.index_select", "torch.arange"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "rel_shift", "(", "x", ",", "klen", "=", "-", "1", ")", ":", "\n", "        ", "\"\"\"perform relative shift to form the relative attention score.\"\"\"", "\n", "x_size", "=", "x", ".", "shape", "\n", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "1", "]", ",", "x_size", "[", "0", "]", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "x", "=", "x", "[", "1", ":", ",", "...", "]", "\n", "x", "=", "x", ".", "reshape", "(", "x_size", "[", "0", "]", ",", "x_size", "[", "1", "]", "-", "1", ",", "x_size", "[", "2", "]", ",", "x_size", "[", "3", "]", ")", "\n", "# x = x[:, 0:klen, :, :]", "\n", "x", "=", "torch", ".", "index_select", "(", "x", ",", "1", ",", "torch", ".", "arange", "(", "klen", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core": [[387, 428], ["torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_shift", "torch.nn.functional.softmax", "modeling_xlnet.XLNetRelativeAttention.dropout", "torch.einsum", "torch.einsum", "torch.einsum"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_shift"], ["", "def", "rel_attn_core", "(", "self", ",", "q_head", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "None", ",", "attn_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"Core relative positional attention operations.\"\"\"", "\n", "\n", "# content based attention score", "\n", "ac", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_w_bias", ",", "k_head_h", ")", "\n", "\n", "# position based attention score", "\n", "bd", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "q_head", "+", "self", ".", "r_r_bias", ",", "k_head_r", ")", "\n", "bd", "=", "self", ".", "rel_shift", "(", "bd", ",", "klen", "=", "ac", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# segment based attention score", "\n", "if", "seg_mat", "is", "None", ":", "\n", "            ", "ef", "=", "0", "\n", "", "else", ":", "\n", "            ", "ef", "=", "torch", ".", "einsum", "(", "'ibnd,snd->ibns'", ",", "q_head", "+", "self", ".", "r_s_bias", ",", "self", ".", "seg_embed", ")", "\n", "ef", "=", "torch", ".", "einsum", "(", "'ijbs,ibns->ijbn'", ",", "seg_mat", ",", "ef", ")", "\n", "\n", "# merge attention scores and perform masking", "\n", "", "attn_score", "=", "(", "ac", "+", "bd", "+", "ef", ")", "*", "self", ".", "scale", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "# attn_score = attn_score * (1 - attn_mask) - 1e30 * attn_mask", "\n", "            ", "if", "attn_mask", ".", "dtype", "==", "torch", ".", "float16", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "65500", "*", "attn_mask", "\n", "", "else", ":", "\n", "                ", "attn_score", "=", "attn_score", "-", "1e30", "*", "attn_mask", "\n", "\n", "# attention probability", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropout", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "# attention output", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "attn_prob", ",", "v_head_h", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "return", "attn_vec", ",", "attn_prob", "\n", "\n", "", "return", "attn_vec", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.post_attention": [[429, 440], ["torch.einsum", "modeling_xlnet.XLNetRelativeAttention.dropout", "modeling_xlnet.XLNetRelativeAttention.layer_norm"], "methods", ["None"], ["", "def", "post_attention", "(", "self", ",", "h", ",", "attn_vec", ",", "residual", "=", "True", ")", ":", "\n", "        ", "\"\"\"Post-attention processing.\"\"\"", "\n", "# post-attention projection (back to `d_model`)", "\n", "attn_out", "=", "torch", ".", "einsum", "(", "'ibnd,hnd->ibh'", ",", "attn_vec", ",", "self", ".", "o", ")", "\n", "\n", "attn_out", "=", "self", ".", "dropout", "(", "attn_out", ")", "\n", "if", "residual", ":", "\n", "            ", "attn_out", "=", "attn_out", "+", "h", "\n", "", "output", "=", "self", ".", "layer_norm", "(", "attn_out", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.forward": [[441, 533], ["torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "modeling_xlnet.XLNetRelativeAttention.post_attention", "torch.cat", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.einsum", "modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "torch.cat", "mems.dim", "mems.dim"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.post_attention", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetRelativeAttention.rel_attn_core"], ["", "def", "forward", "(", "self", ",", "h", ",", "g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "\n", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "g", "is", "not", "None", ":", "\n", "###### Two-stream attention with relative positional encoding.", "\n", "# content based attention score", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content-based key head", "\n", "", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "\n", "# content-based value head", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# position-based key head", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "##### h-stream", "\n", "# content-stream query head", "\n", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec_h", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec_h", ",", "attn_prob_h", "=", "attn_vec_h", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec_h", ")", "\n", "\n", "##### g-stream", "\n", "# query-stream query head", "\n", "q_head_g", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "g", ",", "self", ".", "q", ")", "\n", "\n", "# core attention ops", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "                ", "q_head_g", "=", "torch", ".", "einsum", "(", "'mbnd,mlb->lbnd'", ",", "q_head_g", ",", "target_mapping", ")", "\n", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "", "attn_vec_g", "=", "torch", ".", "einsum", "(", "'lbnd,mlb->mbnd'", ",", "attn_vec_g", ",", "target_mapping", ")", "\n", "", "else", ":", "\n", "                ", "attn_vec_g", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_g", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_g", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attn_vec_g", ",", "attn_prob_g", "=", "attn_vec_g", "\n", "\n", "# post processing", "\n", "", "", "output_g", "=", "self", ".", "post_attention", "(", "g", ",", "attn_vec_g", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_prob", "=", "attn_prob_h", ",", "attn_prob_g", "\n", "\n", "", "", "else", ":", "\n", "###### Multi-head attention with relative positional encoding", "\n", "            ", "if", "mems", "is", "not", "None", "and", "mems", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "cat", "=", "h", "\n", "\n", "# content heads", "\n", "", "q_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "h", ",", "self", ".", "q", ")", "\n", "k_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "k", ")", "\n", "v_head_h", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "cat", ",", "self", ".", "v", ")", "\n", "\n", "# positional heads", "\n", "k_head_r", "=", "torch", ".", "einsum", "(", "'ibh,hnd->ibnd'", ",", "r", ",", "self", ".", "r", ")", "\n", "\n", "# core attention ops", "\n", "attn_vec", "=", "self", ".", "rel_attn_core", "(", "\n", "q_head_h", ",", "k_head_h", ",", "v_head_h", ",", "k_head_r", ",", "seg_mat", "=", "seg_mat", ",", "attn_mask", "=", "attn_mask_h", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attn_vec", ",", "attn_prob", "=", "attn_vec", "\n", "\n", "# post processing", "\n", "", "output_h", "=", "self", ".", "post_attention", "(", "h", ",", "attn_vec", ")", "\n", "output_g", "=", "None", "\n", "\n", "", "outputs", "=", "(", "output_h", ",", "output_g", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_prob", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetFeedForward.__init__": [[535, 546], ["torch.nn.Module.__init__", "XLNetLayerNorm", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetFeedForward", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_norm", "=", "XLNetLayerNorm", "(", "config", ".", "d_model", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "layer_1", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "d_inner", ")", "\n", "self", ".", "layer_2", "=", "nn", ".", "Linear", "(", "config", ".", "d_inner", ",", "config", ".", "d_model", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "if", "isinstance", "(", "config", ".", "ff_activation", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "ff_activation", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "activation_function", "=", "ACT2FN", "[", "config", ".", "ff_activation", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "activation_function", "=", "config", ".", "ff_activation", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetFeedForward.forward": [[547, 556], ["modeling_xlnet.XLNetFeedForward.layer_1", "modeling_xlnet.XLNetFeedForward.activation_function", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_2", "modeling_xlnet.XLNetFeedForward.dropout", "modeling_xlnet.XLNetFeedForward.layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "output", "=", "inp", "\n", "output", "=", "self", ".", "layer_1", "(", "output", ")", "\n", "output", "=", "self", ".", "activation_function", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_2", "(", "output", ")", "\n", "output", "=", "self", ".", "dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "layer_norm", "(", "output", "+", "inp", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetLayer.__init__": [[558, 563], ["torch.nn.Module.__init__", "modeling_xlnet.XLNetRelativeAttention", "modeling_xlnet.XLNetFeedForward", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "rel_attn", "=", "XLNetRelativeAttention", "(", "config", ")", "\n", "self", ".", "ff", "=", "XLNetFeedForward", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetLayer.forward": [[564, 578], ["modeling_xlnet.XLNetLayer.rel_attn", "modeling_xlnet.XLNetLayer.ff", "modeling_xlnet.XLNetLayer.ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output_h", ",", "output_g", ",", "\n", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "rel_attn", "(", "output_h", ",", "output_g", ",", "attn_mask_h", ",", "attn_mask_g", ",", "\n", "r", ",", "seg_mat", ",", "mems", "=", "mems", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "\n", "if", "output_g", "is", "not", "None", ":", "\n", "            ", "output_g", "=", "self", ".", "ff", "(", "output_g", ")", "\n", "", "output_h", "=", "self", ".", "ff", "(", "output_h", ")", "\n", "\n", "outputs", "=", "(", "output_h", ",", "output_g", ")", "+", "outputs", "[", "2", ":", "]", "# Add again attentions if there are there", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetPreTrainedModel._init_weights": [[589, 608], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_", "isinstance", "isinstance", "param.data.normal_", "module.mask_emb.data.normal_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "XLNetRelativeAttention", ")", ":", "\n", "            ", "for", "param", "in", "[", "module", ".", "q", ",", "module", ".", "k", ",", "module", ".", "v", ",", "module", ".", "o", ",", "module", ".", "r", ",", "\n", "module", ".", "r_r_bias", ",", "module", ".", "r_s_bias", ",", "module", ".", "r_w_bias", ",", "\n", "module", ".", "seg_embed", "]", ":", "\n", "                ", "param", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "XLNetModel", ")", ":", "\n", "                ", "module", ".", "mask_emb", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.__init__": [[717, 737], ["modeling_utils.PreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.ModuleList", "torch.nn.Dropout", "modeling_xlnet.XLNetModel.init_weights", "torch.FloatTensor", "modeling_xlnet.XLNetLayer", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "reuse_len", "=", "config", ".", "reuse_len", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "bi_data", "=", "config", ".", "bi_data", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "word_embedding", "=", "nn", ".", "Embedding", "(", "config", ".", "n_token", ",", "config", ".", "d_model", ")", "\n", "self", ".", "mask_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "1", ",", "config", ".", "d_model", ")", ")", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "XLNetLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel._resize_token_embeddings": [[738, 741], ["modeling_xlnet.XLNetModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "self", ".", "word_embedding", "=", "self", ".", "_get_resized_embeddings", "(", "self", ".", "word_embedding", ",", "new_num_tokens", ")", "\n", "return", "self", ".", "word_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel._prune_heads": [[742, 744], ["None"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.create_mask": [[745, 774], ["torch.ones", "torch.triu", "torch.zeros", "torch.cat", "torch.cat.to", "torch.tril", "torch.cat", "next", "modeling_xlnet.XLNetModel.parameters"], "methods", ["None"], ["", "def", "create_mask", "(", "self", ",", "qlen", ",", "mlen", ")", ":", "\n", "        ", "\"\"\"\n        Creates causal attention mask. Float mask where 1.0 indicates masked, 0.0 indicates not-masked.\n\n        Args:\n            qlen: TODO Lysandre didn't fill\n            mlen: TODO Lysandre didn't fill\n\n        ::\n\n                  same_length=False:      same_length=True:\n                  <mlen > <  qlen >       <mlen > <  qlen >\n               ^ [0 0 0 0 0 1 1 1 1]     [0 0 0 0 0 1 1 1 1]\n                 [0 0 0 0 0 0 1 1 1]     [1 0 0 0 0 0 1 1 1]\n            qlen [0 0 0 0 0 0 0 1 1]     [1 1 0 0 0 0 0 1 1]\n                 [0 0 0 0 0 0 0 0 1]     [1 1 1 0 0 0 0 0 1]\n               v [0 0 0 0 0 0 0 0 0]     [1 1 1 1 0 0 0 0 0]\n\n        \"\"\"", "\n", "attn_mask", "=", "torch", ".", "ones", "(", "[", "qlen", ",", "qlen", "]", ")", "\n", "mask_up", "=", "torch", ".", "triu", "(", "attn_mask", ",", "diagonal", "=", "1", ")", "\n", "attn_mask_pad", "=", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "attn_mask_pad", ",", "mask_up", "]", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "mask_lo", "=", "torch", ".", "tril", "(", "attn_mask", ",", "diagonal", "=", "-", "1", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "[", "ret", "[", ":", ",", ":", "qlen", "]", "+", "mask_lo", ",", "ret", "[", ":", ",", "qlen", ":", "]", "]", ",", "dim", "=", "1", ")", "\n", "\n", "", "ret", "=", "ret", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.cache_mem": [[775, 789], ["new_mem.detach", "torch.cat"], "methods", ["None"], ["", "def", "cache_mem", "(", "self", ",", "curr_out", ",", "prev_mem", ")", ":", "\n", "        ", "\"\"\"cache hidden states into memory.\"\"\"", "\n", "if", "self", ".", "mem_len", "is", "None", "or", "self", ".", "mem_len", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "reuse_len", "is", "not", "None", "and", "self", ".", "reuse_len", ">", "0", ":", "\n", "                ", "curr_out", "=", "curr_out", "[", ":", "self", ".", "reuse_len", "]", "\n", "\n", "", "if", "prev_mem", "is", "None", ":", "\n", "                ", "new_mem", "=", "curr_out", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "", "else", ":", "\n", "                ", "new_mem", "=", "torch", ".", "cat", "(", "[", "prev_mem", ",", "curr_out", "]", ",", "dim", "=", "0", ")", "[", "-", "self", ".", "mem_len", ":", "]", "\n", "\n", "", "", "return", "new_mem", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding": [[790, 800], ["torch.einsum", "torch.cat", "pos_emb.expand.expand.expand", "torch.sin", "torch.cos"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "positional_embedding", "(", "pos_seq", ",", "inv_freq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "einsum", "(", "'i,d->id'", ",", "pos_seq", ",", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "sinusoid_inp", ")", ",", "torch", ".", "cos", "(", "sinusoid_inp", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "pos_emb", "=", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "pos_emb", "=", "pos_emb", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.relative_positional_encoding": [[801, 839], ["torch.arange", "modeling_xlnet.XLNetModel.to", "torch.pow", "torch.arange", "torch.arange", "torch.cat", "torch.arange", "modeling_xlnet.XLNetModel.positional_embedding", "next", "ValueError", "fwd_pos_seq.clamp.clamp.clamp", "bwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "modeling_xlnet.XLNetModel.positional_embedding", "fwd_pos_seq.clamp.clamp.clamp", "modeling_xlnet.XLNetModel.parameters"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.positional_embedding"], ["", "def", "relative_positional_encoding", "(", "self", ",", "qlen", ",", "klen", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "\"\"\"create relative positional encoding.\"\"\"", "\n", "freq_seq", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "d_model", ",", "2.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "inv_freq", "=", "1", "/", "torch", ".", "pow", "(", "10000", ",", "(", "freq_seq", "/", "self", ".", "d_model", ")", ")", "\n", "\n", "if", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "# beg, end = klen - 1, -qlen", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "qlen", "\n", "", "elif", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "# beg, end = klen - 1, -1", "\n", "            ", "beg", ",", "end", "=", "klen", ",", "-", "1", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown `attn_type` {}.'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "", "if", "self", ".", "bi_data", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "bwd_pos_seq", "=", "torch", ".", "arange", "(", "-", "beg", ",", "-", "end", ",", "1.0", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "bwd_pos_seq", "=", "bwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "\n", "", "if", "bsz", "is", "not", "None", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ",", "bsz", "//", "2", ")", "\n", "", "else", ":", "\n", "                ", "fwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ")", "\n", "bwd_pos_emb", "=", "self", ".", "positional_embedding", "(", "bwd_pos_seq", ",", "inv_freq", ")", "\n", "\n", "", "pos_emb", "=", "torch", ".", "cat", "(", "[", "fwd_pos_emb", ",", "bwd_pos_emb", "]", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "fwd_pos_seq", "=", "torch", ".", "arange", "(", "beg", ",", "end", ",", "-", "1.0", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "fwd_pos_seq", "=", "fwd_pos_seq", ".", "clamp", "(", "-", "self", ".", "clamp_len", ",", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "positional_embedding", "(", "fwd_pos_seq", ",", "inv_freq", ",", "bsz", ")", "\n", "\n", "", "pos_emb", "=", "pos_emb", ".", "to", "(", "next", "(", "self", ".", "parameters", "(", ")", ")", ")", "\n", "return", "pos_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.forward": [[840, 983], ["input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "modeling_xlnet.XLNetModel.word_embedding", "modeling_xlnet.XLNetModel.dropout", "modeling_xlnet.XLNetModel.relative_positional_encoding", "modeling_xlnet.XLNetModel.dropout", "enumerate", "modeling_xlnet.XLNetModel.dropout", "token_type_ids.transpose().contiguous", "input_mask.transpose().contiguous", "attention_mask.transpose().contiguous", "perm_mask.permute().contiguous", "target_mapping.permute().contiguous", "next", "next", "modeling_xlnet.XLNetModel.create_mask", "torch.zeros().to", "torch.cat", "torch.cat", "modeling_xlnet.XLNetModel.mask_emb.expand", "modeling_xlnet.XLNetModel.dropout", "torch.zeros", "torch.cat", "torch.nn.functional.one_hot().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "layer_module", "tuple.append", "modeling_xlnet.XLNetModel.permute().contiguous", "tuple", "input_ids.transpose().contiguous.transpose().contiguous.transpose", "modeling_xlnet.XLNetModel.parameters", "modeling_xlnet.XLNetModel.parameters", "ValueError", "torch.eye().to", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "len", "tuple.append", "tuple.append", "tuple", "tuple", "token_type_ids.transpose", "input_mask.transpose", "attention_mask.transpose", "perm_mask.permute", "target_mapping.permute", "torch.zeros", "torch.zeros().to", "torch.nn.functional.one_hot", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.cache_mem", "modeling_xlnet.XLNetModel.permute", "t.permute().contiguous", "torch.eye", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "h.permute().contiguous", "hs.permute().contiguous", "torch.zeros", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlnet.XLNetModel.parameters", "t.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "h.permute", "hs.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.relative_positional_encoding", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.create_mask", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetModel.cache_mem"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# the original code for XLNet uses shapes [len, bsz] with the batch dimension at the end", "\n", "# but we want a unified interface in the library with the batch size on the first dimension", "\n", "# so we move here the first dimension (batch) to the end", "\n", "        ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "token_type_ids", "=", "token_type_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "input_mask", "=", "input_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "input_mask", "is", "not", "None", "else", "None", "\n", "attention_mask", "=", "attention_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "perm_mask", "=", "perm_mask", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "perm_mask", "is", "not", "None", "else", "None", "\n", "target_mapping", "=", "target_mapping", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "if", "target_mapping", "is", "not", "None", "else", "None", "\n", "\n", "qlen", ",", "bsz", "=", "input_ids", ".", "shape", "[", "0", "]", ",", "input_ids", ".", "shape", "[", "1", "]", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "shape", "[", "0", "]", "if", "mems", "is", "not", "None", "and", "mems", "[", "0", "]", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "\n", "dtype_float", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", "\n", "device", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "device", "\n", "\n", "##### Attention mask", "\n", "# causal attention mask", "\n", "if", "self", ".", "attn_type", "==", "'uni'", ":", "\n", "            ", "attn_mask", "=", "self", ".", "create_mask", "(", "qlen", ",", "mlen", ")", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "", "elif", "self", ".", "attn_type", "==", "'bi'", ":", "\n", "            ", "attn_mask", "=", "None", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unsupported attention type: {}'", ".", "format", "(", "self", ".", "attn_type", ")", ")", "\n", "\n", "# data mask: input mask & perm mask", "\n", "", "assert", "input_mask", "is", "None", "or", "attention_mask", "is", "None", ",", "\"You can only use one of input_mask (uses 1 for padding) \"", "\n", "\"or attention_mask (uses 0 for padding, added for compatbility with BERT). Please choose one.\"", "\n", "if", "input_mask", "is", "None", "and", "attention_mask", "is", "not", "None", ":", "\n", "            ", "input_mask", "=", "1.0", "-", "attention_mask", "\n", "", "if", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "+", "perm_mask", "\n", "", "elif", "input_mask", "is", "not", "None", "and", "perm_mask", "is", "None", ":", "\n", "            ", "data_mask", "=", "input_mask", "[", "None", "]", "\n", "", "elif", "input_mask", "is", "None", "and", "perm_mask", "is", "not", "None", ":", "\n", "            ", "data_mask", "=", "perm_mask", "\n", "", "else", ":", "\n", "            ", "data_mask", "=", "None", "\n", "\n", "", "if", "data_mask", "is", "not", "None", ":", "\n", "# all mems can be attended to", "\n", "            ", "mems_mask", "=", "torch", ".", "zeros", "(", "[", "data_mask", ".", "shape", "[", "0", "]", ",", "mlen", ",", "bsz", "]", ")", ".", "to", "(", "data_mask", ")", "\n", "data_mask", "=", "torch", ".", "cat", "(", "[", "mems_mask", ",", "data_mask", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "None", ":", "\n", "                ", "attn_mask", "=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "                ", "attn_mask", "+=", "data_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "(", "attn_mask", ">", "0", ")", ".", "to", "(", "dtype_float", ")", "\n", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "non_tgt_mask", "=", "-", "torch", ".", "eye", "(", "qlen", ")", ".", "to", "(", "attn_mask", ")", "\n", "non_tgt_mask", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros", "(", "[", "qlen", ",", "mlen", "]", ")", ".", "to", "(", "attn_mask", ")", ",", "non_tgt_mask", "]", ",", "dim", "=", "-", "1", ")", "\n", "non_tgt_mask", "=", "(", "(", "attn_mask", "+", "non_tgt_mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ">", "0", ")", ".", "to", "(", "attn_mask", ")", "\n", "", "else", ":", "\n", "            ", "non_tgt_mask", "=", "None", "\n", "\n", "##### Word embeddings and prepare h & g hidden states", "\n", "", "word_emb_k", "=", "self", ".", "word_embedding", "(", "input_ids", ")", "\n", "output_h", "=", "self", ".", "dropout", "(", "word_emb_k", ")", "\n", "if", "target_mapping", "is", "not", "None", ":", "\n", "            ", "word_emb_q", "=", "self", ".", "mask_emb", ".", "expand", "(", "target_mapping", ".", "shape", "[", "0", "]", ",", "bsz", ",", "-", "1", ")", "\n", "# else:  # We removed the inp_q input which was same as target mapping", "\n", "#     inp_q_ext = inp_q[:, :, None]", "\n", "#     word_emb_q = inp_q_ext * self.mask_emb + (1 - inp_q_ext) * word_emb_k", "\n", "output_g", "=", "self", ".", "dropout", "(", "word_emb_q", ")", "\n", "", "else", ":", "\n", "            ", "output_g", "=", "None", "\n", "\n", "##### Segment embedding", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "# Convert `token_type_ids` to one-hot `seg_mat`", "\n", "            ", "mem_pad", "=", "torch", ".", "zeros", "(", "[", "mlen", ",", "bsz", "]", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "device", ")", "\n", "cat_ids", "=", "torch", ".", "cat", "(", "[", "mem_pad", ",", "token_type_ids", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# `1` indicates not in the same segment [qlen x klen x bsz]", "\n", "seg_mat", "=", "(", "token_type_ids", "[", ":", ",", "None", "]", "!=", "cat_ids", "[", "None", ",", ":", "]", ")", ".", "long", "(", ")", "\n", "seg_mat", "=", "F", ".", "one_hot", "(", "seg_mat", ",", "num_classes", "=", "2", ")", ".", "to", "(", "dtype_float", ")", "\n", "", "else", ":", "\n", "            ", "seg_mat", "=", "None", "\n", "\n", "##### Positional encoding", "\n", "", "pos_emb", "=", "self", ".", "relative_positional_encoding", "(", "qlen", ",", "klen", ",", "bsz", "=", "bsz", ")", "\n", "pos_emb", "=", "self", ".", "dropout", "(", "pos_emb", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "new_mems", "=", "(", ")", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "[", "None", "]", "*", "len", "(", "self", ".", "layer", ")", "\n", "\n", "", "attentions", "=", "[", "]", "\n", "hidden_states", "=", "[", "]", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "# cache new mems", "\n", "            ", "new_mems", "=", "new_mems", "+", "(", "self", ".", "cache_mem", "(", "output_h", ",", "mems", "[", "i", "]", ")", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "outputs", "=", "layer_module", "(", "output_h", ",", "output_g", ",", "attn_mask_h", "=", "non_tgt_mask", ",", "attn_mask_g", "=", "attn_mask", ",", "\n", "r", "=", "pos_emb", ",", "seg_mat", "=", "seg_mat", ",", "mems", "=", "mems", "[", "i", "]", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "output_h", ",", "output_g", "=", "outputs", "[", ":", "2", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "# Add last hidden state", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", ".", "append", "(", "(", "output_h", ",", "output_g", ")", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "", "output", "=", "self", ".", "dropout", "(", "output_g", "if", "output_g", "is", "not", "None", "else", "output_h", ")", "\n", "\n", "# Prepare outputs, we transpose back here to shape [bsz, len, hidden_dim] (cf. beginning of forward() method)", "\n", "outputs", "=", "(", "output", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", ",", "new_mems", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "if", "output_g", "is", "not", "None", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "h", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", "for", "h", "in", "hs", ")", "\n", "", "else", ":", "\n", "                ", "hidden_states", "=", "tuple", "(", "hs", ".", "permute", "(", "1", ",", "0", ",", "2", ")", ".", "contiguous", "(", ")", "for", "hs", "in", "hidden_states", ")", "\n", "", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "attentions", "=", "tuple", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "\n", "", "return", "outputs", "# outputs, new_mems, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetLMHeadModel.__init__": [[1029, 1039], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "torch.nn.Linear", "modeling_xlnet.XLNetLMHeadModel.init_weights", "modeling_xlnet.XLNetLMHeadModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "lm_loss", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "n_token", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetLMHeadModel.tie_weights": [[1040, 1044], ["modeling_xlnet.XLNetLMHeadModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the embeddings\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_loss", ",", "self", ".", "transformer", ".", "word_embedding", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetLMHeadModel.forward": [[1045, 1065], ["modeling_xlnet.XLNetLMHeadModel.transformer", "modeling_xlnet.XLNetLMHeadModel.lm_loss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetLMHeadModel.view", "labels.view", "modeling_xlnet.XLNetLMHeadModel.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "perm_mask", "=", "perm_mask", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "\n", "logits", "=", "self", ".", "lm_loss", "(", "transformer_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Flatten the tokens", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, mems, (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetForSequenceClassification.__init__": [[1106, 1115], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.SequenceSummary", "torch.nn.Linear", "modeling_xlnet.XLNetForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "self", ".", "logits_proj", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetForSequenceClassification.forward": [[1116, 1141], ["modeling_xlnet.XLNetForSequenceClassification.transformer", "modeling_xlnet.XLNetForSequenceClassification.sequence_summary", "modeling_xlnet.XLNetForSequenceClassification.logits_proj", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view", "modeling_xlnet.XLNetForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "perm_mask", "=", "perm_mask", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "output", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "logits", "=", "self", ".", "logits_proj", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# return (loss), logits, mems, (hidden states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetForQuestionAnswering.__init__": [[1206, 1217], ["modeling_utils.PreTrainedModel.__init__", "modeling_xlnet.XLNetModel", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass", "modeling_xlnet.XLNetForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLNetForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "transformer", "=", "XLNetModel", "(", "config", ")", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.XLNetForQuestionAnswering.forward": [[1218, 1283], ["modeling_xlnet.XLNetForQuestionAnswering.transformer", "modeling_xlnet.XLNetForQuestionAnswering.start_logits", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_xlnet.XLNetForQuestionAnswering.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "modeling_xlnet.XLNetForQuestionAnswering.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "input_mask", "=", "None", ",", "attention_mask", "=", "None", ",", "\n", "mems", "=", "None", ",", "perm_mask", "=", "None", ",", "target_mapping", "=", "None", ",", "\n", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ",", "\n", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "attention_mask", "=", "attention_mask", ",", "\n", "mems", "=", "mems", ",", "perm_mask", "=", "perm_mask", ",", "target_mapping", "=", "target_mapping", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "# Keep mems, hidden states, attentions if there are in it", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "# get the representation of START as weighted sum of hidden states", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "# Shape (batch size,): one single `cls_logits` for each sample", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map": [[49, 118], ["hasattr", "tf_to_pt_map.update", "enumerate", "tf_to_pt_map.update", "hasattr", "tf_to_pt_map.update", "hasattr", "hasattr", "r_r_list.append", "r_w_list.append", "r_s_list.append", "seg_embed_list.append"], "function", ["None"], ["def", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", "=", "None", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        I use a map to keep the PyTorch model as\n        identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'lm_loss'", ")", ":", "\n", "# We will load also the output bias", "\n", "            ", "tf_to_pt_map", "[", "'model/lm_loss/bias'", "]", "=", "model", ".", "lm_loss", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'sequence_summary'", ")", "and", "'model/sequnece_summary/summary/kernel'", "in", "tf_weights", ":", "\n", "# We will load also the sequence summary", "\n", "            ", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/kernel'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/sequnece_summary/summary/bias'", "]", "=", "model", ".", "sequence_summary", ".", "summary", ".", "bias", "\n", "", "if", "hasattr", "(", "model", ",", "'logits_proj'", ")", "and", "config", ".", "finetuning_task", "is", "not", "None", "and", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "in", "tf_weights", ":", "\n", "            ", "tf_to_pt_map", "[", "'model/regression_{}/logit/kernel'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "weight", "\n", "tf_to_pt_map", "[", "'model/regression_{}/logit/bias'", ".", "format", "(", "config", ".", "finetuning_task", ")", "]", "=", "model", ".", "logits_proj", ".", "bias", "\n", "\n", "# Now load the rest of the transformer", "\n", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings and output", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "'model/transformer/word_embedding/lookup_table'", ":", "model", ".", "word_embedding", ".", "weight", ",", "\n", "'model/transformer/mask_emb/mask_emb'", ":", "model", ".", "mask_emb", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layer", ")", ":", "\n", "        ", "layer_str", "=", "\"model/transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "rel_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "rel_attn", ".", "o", ",", "\n", "layer_str", "+", "\"rel_attn/q/kernel\"", ":", "b", ".", "rel_attn", ".", "q", ",", "\n", "layer_str", "+", "\"rel_attn/k/kernel\"", ":", "b", ".", "rel_attn", ".", "k", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "rel_attn", ".", "r", ",", "\n", "layer_str", "+", "\"rel_attn/v/kernel\"", ":", "b", ".", "rel_attn", ".", "v", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "ff", ".", "layer_1", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "ff", ".", "layer_1", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "ff", ".", "layer_2", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "ff", ".", "layer_2", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "r_s_list", "=", "[", "]", "\n", "seg_embed_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layer", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_w_bias", ")", "\n", "r_s_list", ".", "append", "(", "b", ".", "rel_attn", ".", "r_s_bias", ")", "\n", "seg_embed_list", ".", "append", "(", "b", ".", "rel_attn", ".", "seg_embed", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "r_s_list", "=", "[", "model", ".", "r_s_bias", "]", "\n", "seg_embed_list", "=", "[", "model", ".", "seg_embed", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'model/transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'model/transformer/r_w_bias'", ":", "r_w_list", ",", "\n", "'model/transformer/r_s_bias'", ":", "r_s_list", ",", "\n", "'model/transformer/seg_embed'", ":", "seg_embed_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.load_tf_weights_in_xlnet": [[119, 177], ["tf.train.list_variables", "modeling_xlnet.build_tf_xlnet_to_pytorch_map", "build_tf_xlnet_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "logger.info", "isinstance", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "logger.info", "logger.info", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "len", "logger.info", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.build_tf_xlnet_to_pytorch_map"], ["", "def", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Load weights from TF model", "\n", "", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_xlnet_to_pytorch_map", "(", "model", ",", "config", ",", "tf_weights", ")", "\n", "\n", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Importing {}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "not", "in", "tf_weights", ":", "\n", "            ", "logger", ".", "info", "(", "\"{} not in tf pre-trained weights, skipping\"", ".", "format", "(", "name", ")", ")", "\n", "continue", "\n", "", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "and", "(", "'ff'", "in", "name", "or", "'summary'", "in", "name", "or", "'logit'", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Transposing\"", ")", "\n", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "isinstance", "(", "pointer", ",", "list", ")", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.gelu": [[179, 186], ["torch.tanh", "math.sqrt", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\" Implementation of the gelu activation function.\n        XLNet is using OpenAI GPT's gelu (not exactly the same as BERT)\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "cdf", "=", "0.5", "*", "(", "1.0", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "return", "x", "*", "cdf", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.swish": [[188, 190], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.ConstantLRSchedule.__init__": [[29, 31], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "ConstantLRSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "lambda", "_", ":", "1.0", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupConstantSchedule.__init__": [[38, 41], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "super", "(", "WarmupConstantSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupConstantSchedule.lr_lambda": [[42, 46], ["float", "float", "max"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "warmup_steps", ")", ")", "\n", "", "return", "1.", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupLinearSchedule.__init__": [[53, 57], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "t_total", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "super", "(", "WarmupLinearSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupLinearSchedule.lr_lambda": [[58, 62], ["max", "float", "float", "float", "float", "max", "max"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "self", ".", "t_total", "-", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupCosineSchedule.__init__": [[70, 75], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "t_total", ",", "cycles", "=", ".5", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "self", ".", "cycles", "=", "cycles", "\n", "super", "(", "WarmupCosineSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupCosineSchedule.lr_lambda": [[76, 82], ["max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1.0", ",", "self", ".", "warmup_steps", ")", ")", "\n", "# progress after warmup", "\n", "", "progress", "=", "float", "(", "step", "-", "self", ".", "warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", "\n", "return", "max", "(", "0.0", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "float", "(", "self", ".", "cycles", ")", "*", "2.0", "*", "progress", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupCosineWithHardRestartsSchedule.__init__": [[90, 95], ["torch.optim.lr_scheduler.LambdaLR.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "warmup_steps", ",", "t_total", ",", "cycles", "=", "1.", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "t_total", "=", "t_total", "\n", "self", ".", "cycles", "=", "cycles", "\n", "super", "(", "WarmupCosineWithHardRestartsSchedule", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "self", ".", "lr_lambda", ",", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.WarmupCosineWithHardRestartsSchedule.lr_lambda": [[96, 104], ["max", "float", "float", "float", "float", "max", "max", "math.cos", "float"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "return", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "warmup_steps", ")", ")", "\n", "# progress after warmup", "\n", "", "progress", "=", "float", "(", "step", "-", "self", ".", "warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "t_total", "-", "self", ".", "warmup_steps", ")", ")", "\n", "if", "progress", ">=", "1.0", ":", "\n", "            ", "return", "0.0", "\n", "", "return", "max", "(", "0.0", ",", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "(", "(", "float", "(", "self", ".", "cycles", ")", "*", "progress", ")", "%", "1.0", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.AdamW.__init__": [[117, 129], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-6", ",", "weight_decay", "=", "0.0", ",", "correct_bias", "=", "True", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {} - should be >= 0.0\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter: {} - should be in [0.0, 1.0[\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {} - should be >= 0.0\"", ".", "format", "(", "eps", ")", ")", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "correct_bias", "=", "correct_bias", ")", "\n", "super", "(", "AdamW", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.optimization.AdamW.step": [[130, 190], ["closure", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "exp_avg_sq.sqrt().add_", "p.data.addcdiv_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "p.data.add_", "exp_avg.mul_", "exp_avg_sq.mul_", "exp_avg_sq.sqrt", "math.sqrt"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "\n", "\n", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "# In-place operations to update the averages at the same time", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1.0", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1.0", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "if", "group", "[", "'correct_bias'", "]", ":", "# No bias correction for Bert", "\n", "                    ", "bias_correction1", "=", "1.0", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1.0", "-", "beta2", "**", "state", "[", "'step'", "]", "\n", "step_size", "=", "step_size", "*", "math", ".", "sqrt", "(", "bias_correction2", ")", "/", "bias_correction1", "\n", "\n", "", "p", ".", "data", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "denom", ")", "\n", "\n", "# Just adding the square of the weights to the loss function is *not*", "\n", "# the correct way of using L2 regularization/weight decay with Adam,", "\n", "# since that will interact with the m and v parameters in strange ways.", "\n", "#", "\n", "# Instead we want to decay the weights in a manner that doesn't interact", "\n", "# with the m/v parameters. This is equivalent to adding the square", "\n", "# of the weights to the loss with plain (non-momentum) SGD.", "\n", "# Add weight decay at the end (fixed version)", "\n", "if", "group", "[", "'weight_decay'", "]", ">", "0.0", ":", "\n", "                    ", "p", ".", "data", ".", "add_", "(", "-", "group", "[", "'lr'", "]", "*", "group", "[", "'weight_decay'", "]", ",", "p", ".", "data", ")", "\n", "\n", "", "", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer.__init__": [[112, 130], ["tokenization_utils.PreTrainedTokenizer.__init__", "json.load", "tokenization_gpt2.bytes_to_unicode", "dict", "regex.compile", "io.open", "io.open().read().split", "tuple", "zip", "tokenization_gpt2.GPT2Tokenizer.encoder.items", "tokenization_gpt2.GPT2Tokenizer.byte_encoder.items", "merge.split", "range", "io.open().read", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.bytes_to_unicode"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "unk_token", "=", "\"<|endoftext|>\"", ",", "\n", "bos_token", "=", "\"<|endoftext|>\"", ",", "eos_token", "=", "\"<|endoftext|>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2Tokenizer", ",", "self", ")", ".", "__init__", "(", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "bpe_data", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "bpe_merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "bpe_data", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "# Should haved added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions", "\n", "self", ".", "pat", "=", "re", ".", "compile", "(", "r\"\"\"'s|'t|'re|'ve|'m|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer.vocab_size": [[131, 134], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer.bpe": [[135, 175], ["tuple", "tokenization_gpt2.get_pairs", "min", "tuple", "len", "len", "tokenization_gpt2.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer._tokenize": [[176, 187], ["regex.findall", "bpe_tokens.extend", "tokenization_gpt2.GPT2Tokenizer.bpe().split", "token.encode", "ord", "tokenization_gpt2.GPT2Tokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string. \"\"\"", "\n", "text", "=", "' '", "+", "text", "# GPT-2 (and RoBERTa) tokenizers need at least one space to begin the sentence with.", "\n", "bpe_tokens", "=", "[", "]", "\n", "for", "token", "in", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "ord", "(", "b", ")", "]", "for", "b", "in", "token", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "else", ":", "\n", "                ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "# Maps all our bytes to unicode strings, avoiding controle tokens of the BPE (spaces in our case)", "\n", "", "bpe_tokens", ".", "extend", "(", "bpe_token", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer._convert_token_to_id": [[188, 191], ["tokenization_gpt2.GPT2Tokenizer.encoder.get", "tokenization_gpt2.GPT2Tokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer._convert_id_to_token": [[192, 195], ["tokenization_gpt2.GPT2Tokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer.convert_tokens_to_string": [[196, 201], ["bytearray().decode", "bytearray"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "text", "=", "''", ".", "join", "(", "tokens", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.GPT2Tokenizer.save_vocabulary": [[202, 225], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_gpt2.GPT2Tokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.bytes_to_unicode": [[64, 87], ["lru_cache", "range", "dict", "list", "_chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a mapping to unicode strings.\n    We specifically avoids mapping to whitespace/control characters the bpe code barfs on.\n    \n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    \"\"\"", "\n", "_chr", "=", "unichr", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "else", "chr", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "_chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_gpt2.get_pairs": [[88, 99], ["set", "set.add"], "function", ["None"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.__init__": [[215, 288], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "modeling_transfo_xl.TransfoXLConfig.cutoffs.extend", "ValueError", "reader.read", "len", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "267735", ",", "\n", "cutoffs", "=", "[", "20000", ",", "40000", ",", "200000", "]", ",", "\n", "d_model", "=", "1024", ",", "\n", "d_embed", "=", "1024", ",", "\n", "n_head", "=", "16", ",", "\n", "d_head", "=", "64", ",", "\n", "d_inner", "=", "4096", ",", "\n", "div_val", "=", "4", ",", "\n", "pre_lnorm", "=", "False", ",", "\n", "n_layer", "=", "18", ",", "\n", "tgt_len", "=", "128", ",", "\n", "ext_len", "=", "0", ",", "\n", "mem_len", "=", "1600", ",", "\n", "clamp_len", "=", "1000", ",", "\n", "same_length", "=", "True", ",", "\n", "proj_share_all_but_first", "=", "True", ",", "\n", "attn_type", "=", "0", ",", "\n", "sample_softmax", "=", "-", "1", ",", "\n", "adaptive", "=", "True", ",", "\n", "tie_weight", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "\n", "dropatt", "=", "0.0", ",", "\n", "untie_r", "=", "True", ",", "\n", "init", "=", "\"normal\"", ",", "\n", "init_range", "=", "0.01", ",", "\n", "proj_init_std", "=", "0.01", ",", "\n", "init_std", "=", "0.02", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs TransfoXLConfig.\n        \"\"\"", "\n", "super", "(", "TransfoXLConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "n_token", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "cutoffs", "=", "[", "]", "\n", "self", ".", "cutoffs", ".", "extend", "(", "cutoffs", ")", "\n", "self", ".", "tie_weight", "=", "tie_weight", "\n", "if", "proj_share_all_but_first", ":", "\n", "                ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "True", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tie_projs", "=", "[", "False", "]", "+", "[", "False", "]", "*", "len", "(", "self", ".", "cutoffs", ")", "\n", "", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "same_length", "=", "same_length", "\n", "self", ".", "attn_type", "=", "attn_type", "\n", "self", ".", "clamp_len", "=", "clamp_len", "\n", "self", ".", "sample_softmax", "=", "sample_softmax", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "dropatt", "=", "dropatt", "\n", "self", ".", "untie_r", "=", "untie_r", "\n", "self", ".", "init", "=", "init", "\n", "self", ".", "init_range", "=", "init_range", "\n", "self", ".", "proj_init_std", "=", "proj_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.max_position_embeddings": [[290, 293], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "tgt_len", "+", "self", ".", "ext_len", "+", "self", ".", "mem_len", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.vocab_size": [[298, 301], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.hidden_size": [[302, 305], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "d_model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.num_attention_heads": [[306, 309], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.num_hidden_layers": [[310, 313], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.PositionalEmbedding.__init__": [[316, 323], ["torch.Module.__init__", "modeling_transfo_xl.PositionalEmbedding.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "demb", ")", ":", "\n", "        ", "super", "(", "PositionalEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "demb", "=", "demb", "\n", "\n", "inv_freq", "=", "1", "/", "(", "10000", "**", "(", "torch", ".", "arange", "(", "0.0", ",", "demb", ",", "2.0", ")", "/", "demb", ")", ")", "\n", "self", ".", "register_buffer", "(", "'inv_freq'", ",", "inv_freq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.PositionalEmbedding.forward": [[324, 332], ["torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.ger", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pos_emb[].expand", "torch.ger.sin", "torch.ger.sin", "torch.ger.sin", "torch.ger.cos", "torch.ger.cos", "torch.ger.cos"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pos_seq", ",", "bsz", "=", "None", ")", ":", "\n", "        ", "sinusoid_inp", "=", "torch", ".", "ger", "(", "pos_seq", ",", "self", ".", "inv_freq", ")", "\n", "pos_emb", "=", "torch", ".", "cat", "(", "[", "sinusoid_inp", ".", "sin", "(", ")", ",", "sinusoid_inp", ".", "cos", "(", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "bsz", "is", "not", "None", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "-", "1", ",", "bsz", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "pos_emb", "[", ":", ",", "None", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.PositionwiseFF.__init__": [[336, 353], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "d_model", ",", "d_inner", ",", "dropout", ",", "pre_lnorm", "=", "False", ")", ":", "\n", "        ", "super", "(", "PositionwiseFF", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_inner", "=", "d_inner", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "CoreNet", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "d_model", ",", "d_inner", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "d_inner", ",", "d_model", ")", ",", "\n", "nn", ".", "Dropout", "(", "dropout", ")", ",", "\n", ")", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.PositionwiseFF.forward": [[354, 369], ["modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.CoreNet", "modeling_transfo_xl.PositionwiseFF.layer_norm", "modeling_transfo_xl.PositionwiseFF.layer_norm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization + positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "self", ".", "layer_norm", "(", "inp", ")", ")", "\n", "\n", "##### residual connection", "\n", "output", "=", "core_out", "+", "inp", "\n", "", "else", ":", "\n", "##### positionwise feed-forward", "\n", "            ", "core_out", "=", "self", ".", "CoreNet", "(", "inp", ")", "\n", "\n", "##### residual connection + layer normalization", "\n", "output", "=", "self", ".", "layer_norm", "(", "inp", "+", "core_out", ")", "\n", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.MultiHeadAttn.__init__": [[373, 402], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "pre_lnorm", "=", "False", ",", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "q_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "self", ".", "kv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "2", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "None", "or", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.MultiHeadAttn.forward": [[403, 460], ["modeling_transfo_xl.MultiHeadAttn.q_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "head_q.view.view.view", "head_k.view.view.view", "head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.mul_", "torch.einsum.mul_", "torch.einsum.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "modeling_transfo_xl.MultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "modeling_transfo_xl.MultiHeadAttn.o_net", "modeling_transfo_xl.MultiHeadAttn.drop", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl.MultiHeadAttn.layer_norm", "modeling_transfo_xl.MultiHeadAttn.kv_net", "h.size", "h.size", "modeling_transfo_xl.MultiHeadAttn.size", "modeling_transfo_xl.MultiHeadAttn.size", "modeling_transfo_xl.MultiHeadAttn.size", "modeling_transfo_xl.MultiHeadAttn.size", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "outputs.append", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "modeling_transfo_xl.MultiHeadAttn.layer_norm", "attn_mask.any", "attn_mask.dim", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "torch.einsum.masked_fill_", "float", "float"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "h", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "##### multihead attention", "\n", "# [hlen x bsz x n_head x d_head]", "\n", "\n", "        ", "if", "mems", "is", "not", "None", ":", "\n", "            ", "c", "=", "torch", ".", "cat", "(", "[", "mems", ",", "h", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "c", "=", "h", "\n", "\n", "", "if", "self", ".", "pre_lnorm", ":", "\n", "##### layer normalization", "\n", "            ", "c", "=", "self", ".", "layer_norm", "(", "c", ")", "\n", "\n", "", "head_q", "=", "self", ".", "q_net", "(", "h", ")", "\n", "head_k", ",", "head_v", "=", "torch", ".", "chunk", "(", "self", ".", "kv_net", "(", "c", ")", ",", "2", ",", "-", "1", ")", "\n", "\n", "head_q", "=", "head_q", ".", "view", "(", "h", ".", "size", "(", "0", ")", ",", "h", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_k", "=", "head_k", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "head_v", "=", "head_v", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "c", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "head_q", ",", "head_k", ")", ")", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "# [qlen x klen x bsz x n_head] + [klen x bsz x n_head x d_head] -> [qlen x bsz x n_head x d_head]", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "head_v", ")", ")", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "h", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "h", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn.__init__": [[462, 491], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_bert.BertLayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "dropatt", "=", "0", ",", "\n", "tgt_len", "=", "None", ",", "ext_len", "=", "None", ",", "mem_len", "=", "None", ",", "pre_lnorm", "=", "False", ",", "\n", "r_r_bias", "=", "None", ",", "r_w_bias", "=", "None", ",", "output_attentions", "=", "False", ")", ":", "\n", "        ", "super", "(", "RelMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "output_attentions", "=", "output_attentions", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "d_model", "=", "d_model", "\n", "self", ".", "d_head", "=", "d_head", "\n", "self", ".", "dropout", "=", "dropout", "\n", "\n", "self", ".", "qkv_net", "=", "nn", ".", "Linear", "(", "d_model", ",", "3", "*", "n_head", "*", "d_head", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout", ")", "\n", "self", ".", "dropatt", "=", "nn", ".", "Dropout", "(", "dropatt", ")", "\n", "self", ".", "o_net", "=", "nn", ".", "Linear", "(", "n_head", "*", "d_head", ",", "d_model", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "layer_norm", "=", "LayerNorm", "(", "d_model", ")", "\n", "\n", "self", ".", "scale", "=", "1", "/", "(", "d_head", "**", "0.5", ")", "\n", "\n", "self", ".", "pre_lnorm", "=", "pre_lnorm", "\n", "\n", "if", "r_r_bias", "is", "None", "or", "r_w_bias", "is", "None", ":", "# Biases are not shared", "\n", "            ", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "r_r_bias", "=", "r_r_bias", "\n", "self", ".", "r_w_bias", "=", "r_w_bias", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn._parallelogram_mask": [[492, 502], ["torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "torch.ones().byte", "min", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones().byte.flip", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["None"], ["", "", "def", "_parallelogram_mask", "(", "self", ",", "h", ",", "w", ",", "left", "=", "False", ")", ":", "\n", "        ", "mask", "=", "torch", ".", "ones", "(", "(", "h", ",", "w", ")", ")", ".", "byte", "(", ")", "\n", "m", "=", "min", "(", "h", ",", "w", ")", "\n", "mask", "[", ":", "m", ",", ":", "m", "]", "=", "torch", ".", "triu", "(", "mask", "[", ":", "m", ",", ":", "m", "]", ")", "\n", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", "=", "torch", ".", "tril", "(", "mask", "[", "-", "m", ":", ",", "-", "m", ":", "]", ")", "\n", "\n", "if", "left", ":", "\n", "            ", "return", "mask", "\n", "", "else", ":", "\n", "            ", "return", "mask", ".", "flip", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn._shift": [[503, 520], ["torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.cat().expand.masked_select().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mask.flip.flip.flip", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat().expand.masked_select().view.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "_shift", "(", "self", ",", "x", ",", "qlen", ",", "klen", ",", "mask", ",", "left", "=", "False", ")", ":", "\n", "        ", "if", "qlen", ">", "1", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "qlen", "-", "1", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "", "else", ":", "\n", "            ", "zero_pad", "=", "torch", ".", "zeros", "(", "0", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "\n", "", "if", "left", ":", "\n", "            ", "mask", "=", "mask", ".", "flip", "(", "1", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "x_padded", "=", "torch", ".", "cat", "(", "[", "x", ",", "zero_pad", "]", ",", "dim", "=", "1", ")", ".", "expand", "(", "qlen", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "x", "=", "x_padded", ".", "masked_select", "(", "mask", "[", ":", ",", ":", ",", "None", ",", "None", "]", ")", ".", "view", "(", "qlen", ",", "klen", ",", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn._rel_shift": [[521, 536], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_padded.view.view.view", "x_padded[].view_as", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "x_padded[].view_as.size", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "x_padded[].view_as.size", "x_padded[].view_as.size"], "methods", ["None"], ["", "def", "_rel_shift", "(", "self", ",", "x", ",", "zero_triu", "=", "False", ")", ":", "\n", "        ", "zero_pad_shape", "=", "(", "x", ".", "size", "(", "0", ")", ",", "1", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "zero_pad", "=", "torch", ".", "zeros", "(", "zero_pad_shape", ",", "device", "=", "x", ".", "device", ",", "dtype", "=", "x", ".", "dtype", ")", "\n", "x_padded", "=", "torch", ".", "cat", "(", "[", "zero_pad", ",", "x", "]", ",", "dim", "=", "1", ")", "\n", "\n", "x_padded_shape", "=", "(", "x", ".", "size", "(", "1", ")", "+", "1", ",", "x", ".", "size", "(", "0", ")", ")", "+", "x", ".", "size", "(", ")", "[", "2", ":", "]", "\n", "x_padded", "=", "x_padded", ".", "view", "(", "*", "x_padded_shape", ")", "\n", "\n", "x", "=", "x_padded", "[", "1", ":", "]", ".", "view_as", "(", "x", ")", "\n", "\n", "if", "zero_triu", ":", "\n", "            ", "ones", "=", "torch", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ")", "\n", "x", "=", "x", "*", "torch", ".", "tril", "(", "ones", ",", "x", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "0", ")", ")", "[", ":", ",", ":", ",", "None", ",", "None", "]", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn.forward": [[537, 539], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.__init__": [[541, 545], ["modeling_transfo_xl.RelMultiHeadAttn.__init__", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "r_net", "=", "nn", ".", "Linear", "(", "self", ".", "d_model", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.forward": [[546, 627], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn._rel_shift", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.o_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.drop", "w.size", "r.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.r_net", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "outputs.append", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_vec.contiguous().view.contiguous().view.contiguous", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn.layer_norm", "attn_mask.any", "attn_mask.dim", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float", "attn_score.float().masked_fill().type_as.float().masked_fill().type_as.float"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "rlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "r", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "r_head_k", "=", "self", ".", "r_net", "(", "r", ")", "\n", "\n", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x bsz x n_head x d_head", "\n", "\n", "r_head_k", "=", "r_head_k", ".", "view", "(", "rlen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "# qlen x n_head x d_head", "\n", "\n", "#### compute attention score", "\n", "rw_head_q", "=", "w_head_q", "+", "self", ".", "r_w_bias", "# qlen x bsz x n_head x d_head", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "\n", "rr_head_q", "=", "w_head_q", "+", "self", ".", "r_r_bias", "\n", "BD", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "rr_head_q", ",", "r_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "BD", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", "=", "attn_score", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "1e30", ")", ".", "type_as", "(", "attn_score", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelLearnableMultiHeadAttn.__init__": [[629, 631], ["modeling_transfo_xl.RelMultiHeadAttn.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableMultiHeadAttn", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelLearnableMultiHeadAttn.forward": [[632, 718], ["w_head_k.view.view.size", "w_head_q.view.view.view", "w_head_k.view.view.view", "w_head_v.view.view.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "modeling_transfo_xl.RelLearnableMultiHeadAttn._rel_shift", "attn_score.mul_", "torch.softmax", "torch.softmax", "torch.softmax", "modeling_transfo_xl.RelLearnableMultiHeadAttn.dropatt", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "attn_vec.contiguous().view.contiguous().view.contiguous().view", "modeling_transfo_xl.RelLearnableMultiHeadAttn.o_net", "modeling_transfo_xl.RelLearnableMultiHeadAttn.drop", "w.size", "w.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.chunk", "torch.cat.size", "torch.cat.size", "torch.cat.size", "r_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "r_bias[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_mask.any().item", "attn_vec.contiguous().view.contiguous().view.size", "attn_vec.contiguous().view.contiguous().view.size", "outputs.append", "modeling_transfo_xl.RelLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelLearnableMultiHeadAttn.qkv_net", "modeling_transfo_xl.RelLearnableMultiHeadAttn.qkv_net", "attn_mask.dim", "attn_score.masked_fill_", "attn_vec.contiguous().view.contiguous().view.contiguous", "modeling_transfo_xl.RelLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelLearnableMultiHeadAttn.layer_norm", "modeling_transfo_xl.RelLearnableMultiHeadAttn.layer_norm", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "attn_mask.any", "attn_mask.dim", "attn_score.masked_fill_", "float", "float"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelMultiHeadAttn._rel_shift"], ["", "def", "forward", "(", "self", ",", "w", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# r_emb: [klen, n_head, d_head], used for term B", "\n", "# r_w_bias: [n_head, d_head], used for term C", "\n", "# r_bias: [klen, n_head], used for term D", "\n", "\n", "        ", "qlen", ",", "bsz", "=", "w", ".", "size", "(", "0", ")", ",", "w", ".", "size", "(", "1", ")", "\n", "\n", "if", "mems", "is", "not", "None", ":", "\n", "            ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", ",", "w", "]", ",", "0", ")", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "cat", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "cat", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "w_head_q", "=", "w_head_q", "[", "-", "qlen", ":", "]", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "pre_lnorm", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "self", ".", "layer_norm", "(", "w", ")", ")", "\n", "", "else", ":", "\n", "                ", "w_heads", "=", "self", ".", "qkv_net", "(", "w", ")", "\n", "", "w_head_q", ",", "w_head_k", ",", "w_head_v", "=", "torch", ".", "chunk", "(", "w_heads", ",", "3", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "klen", "=", "w_head_k", ".", "size", "(", "0", ")", "\n", "\n", "w_head_q", "=", "w_head_q", ".", "view", "(", "qlen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_k", "=", "w_head_k", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "w_head_v", "=", "w_head_v", ".", "view", "(", "klen", ",", "bsz", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", "\n", "\n", "if", "klen", ">", "r_emb", ".", "size", "(", "0", ")", ":", "\n", "            ", "r_emb_pad", "=", "r_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_emb", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ")", "\n", "r_emb", "=", "torch", ".", "cat", "(", "[", "r_emb_pad", ",", "r_emb", "]", ",", "0", ")", "\n", "r_bias_pad", "=", "r_bias", "[", "0", ":", "1", "]", ".", "expand", "(", "klen", "-", "r_bias", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "r_bias", "=", "torch", ".", "cat", "(", "[", "r_bias_pad", ",", "r_bias", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "            ", "r_emb", "=", "r_emb", "[", "-", "klen", ":", "]", "\n", "r_bias", "=", "r_bias", "[", "-", "klen", ":", "]", "\n", "\n", "#### compute attention score", "\n", "", "rw_head_q", "=", "w_head_q", "+", "r_w_bias", "[", "None", "]", "# qlen x bsz x n_head x d_head", "\n", "\n", "AC", "=", "torch", ".", "einsum", "(", "'ibnd,jbnd->ijbn'", ",", "(", "rw_head_q", ",", "w_head_k", ")", ")", "# qlen x klen x bsz x n_head", "\n", "B_", "=", "torch", ".", "einsum", "(", "'ibnd,jnd->ijbn'", ",", "(", "w_head_q", ",", "r_emb", ")", ")", "# qlen x klen x bsz x n_head", "\n", "D_", "=", "r_bias", "[", "None", ",", ":", ",", "None", "]", "# 1    x klen x 1   x n_head", "\n", "BD", "=", "self", ".", "_rel_shift", "(", "B_", "+", "D_", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "attn_score", "=", "AC", "+", "BD", "\n", "attn_score", ".", "mul_", "(", "self", ".", "scale", ")", "\n", "\n", "#### compute attention probability", "\n", "if", "attn_mask", "is", "not", "None", "and", "attn_mask", ".", "any", "(", ")", ".", "item", "(", ")", ":", "\n", "            ", "if", "attn_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", "None", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "", "elif", "attn_mask", ".", "dim", "(", ")", "==", "3", ":", "\n", "                ", "attn_score", ".", "masked_fill_", "(", "attn_mask", "[", ":", ",", ":", ",", ":", ",", "None", "]", ",", "-", "float", "(", "'inf'", ")", ")", "\n", "\n", "# [qlen x klen x bsz x n_head]", "\n", "", "", "attn_prob", "=", "F", ".", "softmax", "(", "attn_score", ",", "dim", "=", "1", ")", "\n", "attn_prob", "=", "self", ".", "dropatt", "(", "attn_prob", ")", "\n", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attn_prob", "=", "attn_prob", "*", "head_mask", "\n", "\n", "#### compute attention vector", "\n", "", "attn_vec", "=", "torch", ".", "einsum", "(", "'ijbn,jbnd->ibnd'", ",", "(", "attn_prob", ",", "w_head_v", ")", ")", "\n", "\n", "# [qlen x bsz x n_head x d_head]", "\n", "attn_vec", "=", "attn_vec", ".", "contiguous", "(", ")", ".", "view", "(", "\n", "attn_vec", ".", "size", "(", "0", ")", ",", "attn_vec", ".", "size", "(", "1", ")", ",", "self", ".", "n_head", "*", "self", ".", "d_head", ")", "\n", "\n", "##### linear projection", "\n", "attn_out", "=", "self", ".", "o_net", "(", "attn_vec", ")", "\n", "attn_out", "=", "self", ".", "drop", "(", "attn_out", ")", "\n", "\n", "if", "self", ".", "pre_lnorm", ":", "\n", "##### residual connection", "\n", "            ", "outputs", "=", "[", "w", "+", "attn_out", "]", "\n", "", "else", ":", "\n", "##### residual connection + layer normalization", "\n", "            ", "outputs", "=", "[", "self", ".", "layer_norm", "(", "w", "+", "attn_out", ")", "]", "\n", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "attn_prob", ")", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.DecoderLayer.__init__": [[722, 728], ["torch.Module.__init__", "modeling_transfo_xl.MultiHeadAttn", "modeling_transfo_xl.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "DecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "MultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.DecoderLayer.forward": [[729, 738], ["modeling_transfo_xl.DecoderLayer.dec_attn", "modeling_transfo_xl.DecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn_outputs", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelLearnableDecoderLayer.__init__": [[740, 748], ["torch.Module.__init__", "modeling_transfo_xl.RelLearnableMultiHeadAttn", "modeling_transfo_xl.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "d_head", ",", "dropout", ",", "\n", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelLearnableDecoderLayer.forward": [[749, 759], ["modeling_transfo_xl.RelLearnableDecoderLayer.dec_attn", "modeling_transfo_xl.RelLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn_outputs", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r_emb", ",", "r_w_bias", ",", "r_bias", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.__init__": [[761, 769], ["torch.Module.__init__", "modeling_transfo_xl.RelPartialLearnableMultiHeadAttn", "modeling_transfo_xl.PositionwiseFF", "kwargs.get"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_head", ",", "d_model", ",", "d_head", ",", "d_inner", ",", "dropout", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RelPartialLearnableDecoderLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "dec_attn", "=", "RelPartialLearnableMultiHeadAttn", "(", "n_head", ",", "d_model", ",", "\n", "d_head", ",", "dropout", ",", "**", "kwargs", ")", "\n", "self", ".", "pos_ff", "=", "PositionwiseFF", "(", "d_model", ",", "d_inner", ",", "dropout", ",", "\n", "pre_lnorm", "=", "kwargs", ".", "get", "(", "'pre_lnorm'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.RelPartialLearnableDecoderLayer.forward": [[770, 780], ["modeling_transfo_xl.RelPartialLearnableDecoderLayer.dec_attn", "modeling_transfo_xl.RelPartialLearnableDecoderLayer.pos_ff"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "dec_inp", ",", "r", ",", "dec_attn_mask", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "\n", "        ", "attn_outputs", "=", "self", ".", "dec_attn", "(", "dec_inp", ",", "r", ",", "\n", "attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "ff_output", "=", "self", ".", "pos_ff", "(", "attn_outputs", "[", "0", "]", ")", "\n", "\n", "outputs", "=", "[", "ff_output", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.AdaptiveEmbedding.__init__": [[784, 813], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "len", "modeling_transfo_xl.AdaptiveEmbedding.emb_layers.append", "modeling_transfo_xl.AdaptiveEmbedding.emb_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "sample_softmax", "=", "False", ")", ":", "\n", "        ", "super", "(", "AdaptiveEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "div_val", "=", "div_val", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "emb_scale", "=", "d_proj", "**", "0.5", "\n", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "\n", "self", ".", "emb_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "emb_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "self", ".", "emb_layers", ".", "append", "(", "\n", "nn", ".", "Embedding", "(", "n_token", ",", "d_embed", ",", "sparse", "=", "sample_softmax", ">", "0", ")", "\n", ")", "\n", "if", "d_proj", "!=", "d_embed", ":", "\n", "                ", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "self", ".", "emb_layers", ".", "append", "(", "nn", ".", "Embedding", "(", "r_idx", "-", "l_idx", ",", "d_emb_i", ")", ")", "\n", "self", ".", "emb_projs", ".", "append", "(", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.AdaptiveEmbedding.forward": [[814, 845], ["torch.linear.mul_", "next", "inp.view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.view", "torch.zeros.view", "torch.zeros.view", "torch.linear", "torch.linear", "torch.linear", "modeling_transfo_xl.AdaptiveEmbedding.parameters", "len", "mask_i.nonzero().squeeze", "torch.linear", "torch.linear", "torch.linear", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "torch.zeros.index_copy_", "inp.size", "inp.view.size", "mask_i.nonzero().squeeze.numel", "inp.view.index_select", "mask_i.nonzero"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "inp", ")", ":", "\n", "        ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "            ", "embed", "=", "self", ".", "emb_layers", "[", "0", "]", "(", "inp", ")", "\n", "if", "self", ".", "d_proj", "!=", "self", ".", "d_embed", ":", "\n", "                ", "embed", "=", "F", ".", "linear", "(", "embed", ",", "self", ".", "emb_projs", "[", "0", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "inp_flat", "=", "inp", ".", "view", "(", "-", "1", ")", "\n", "emb_flat", "=", "torch", ".", "zeros", "(", "[", "inp_flat", ".", "size", "(", "0", ")", ",", "self", ".", "d_proj", "]", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "\n", "mask_i", "=", "(", "inp_flat", ">=", "l_idx", ")", "&", "(", "inp_flat", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                    ", "continue", "\n", "\n", "", "inp_i", "=", "inp_flat", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "emb_i", "=", "self", ".", "emb_layers", "[", "i", "]", "(", "inp_i", ")", "\n", "emb_i", "=", "F", ".", "linear", "(", "emb_i", ",", "self", ".", "emb_projs", "[", "i", "]", ")", "\n", "\n", "emb_flat", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "emb_i", ")", "\n", "\n", "", "embed_shape", "=", "inp", ".", "size", "(", ")", "+", "(", "self", ".", "d_proj", ",", ")", "\n", "embed", "=", "emb_flat", ".", "view", "(", "embed_shape", ")", "\n", "\n", "", "embed", ".", "mul_", "(", "self", ".", "emb_scale", ")", "\n", "\n", "return", "embed", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight": [[856, 861], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["None"], ["def", "_init_weight", "(", "self", ",", "weight", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "init", "==", "'uniform'", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "weight", ",", "-", "self", ".", "config", ".", "init_range", ",", "self", ".", "config", ".", "init_range", ")", "\n", "", "elif", "self", ".", "config", ".", "init", "==", "'normal'", ":", "\n", "            ", "nn", ".", "init", ".", "normal_", "(", "weight", ",", "0.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias": [[862, 864], ["torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "", "def", "_init_bias", "(", "self", ",", "bias", ")", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weights": [[865, 905], ["classname.find", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "classname.find", "hasattr", "range", "classname.find", "hasattr", "len", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "classname.find", "hasattr", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "range", "classname.find", "hasattr", "hasattr", "hasattr", "hasattr", "hasattr", "len", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "hasattr", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_weight", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel._init_bias"], ["", "def", "_init_weights", "(", "self", ",", "m", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "m", ".", "weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'AdaptiveEmbedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'emb_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "emb_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "emb_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "emb_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'Embedding'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "weight", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'ProjectedAdaptiveLogSoftmax'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'cluster_weight'", ")", "and", "m", ".", "cluster_weight", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "cluster_weight", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'cluster_bias'", ")", "and", "m", ".", "cluster_bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "cluster_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'out_projs'", ")", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "m", ".", "out_projs", ")", ")", ":", "\n", "                    ", "if", "m", ".", "out_projs", "[", "i", "]", "is", "not", "None", ":", "\n", "                        ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "out_projs", "[", "i", "]", ",", "0.0", ",", "self", ".", "config", ".", "proj_init_std", ")", "\n", "", "", "", "", "elif", "classname", ".", "find", "(", "'LayerNorm'", ")", "!=", "-", "1", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "1.0", ",", "self", ".", "config", ".", "init_std", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "bias", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'r_emb'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_emb", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_w_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_w_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_weight", "(", "m", ".", "r_r_bias", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'r_bias'", ")", ":", "\n", "                ", "self", ".", "_init_bias", "(", "m", ".", "r_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLPreTrainedModel.set_num_special_tokens": [[906, 908], ["None"], "methods", ["None"], ["", "", "", "def", "set_num_special_tokens", "(", "self", ",", "num_special_tokens", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel.__init__": [[979, 1060], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.AdaptiveEmbedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_transfo_xl.TransfoXLModel.init_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl.PositionalEmbedding", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "modeling_transfo_xl.TransfoXLModel.layers.append", "range", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.RelPartialLearnableDecoderLayer", "modeling_transfo_xl.TransfoXLModel.layers.append", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "modeling_transfo_xl.PositionalEmbedding", "modeling_transfo_xl.RelLearnableDecoderLayer", "modeling_transfo_xl.TransfoXLModel.layers.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.DecoderLayer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "n_token", "=", "config", ".", "n_token", "\n", "\n", "self", ".", "d_embed", "=", "config", ".", "d_embed", "\n", "self", ".", "d_model", "=", "config", ".", "d_model", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "d_head", "=", "config", ".", "d_head", "\n", "\n", "self", ".", "word_emb", "=", "AdaptiveEmbedding", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "config", ".", "cutoffs", ",", "\n", "div_val", "=", "config", ".", "div_val", ")", "\n", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "dropout", ")", "\n", "\n", "self", ".", "n_layer", "=", "config", ".", "n_layer", "\n", "\n", "self", ".", "tgt_len", "=", "config", ".", "tgt_len", "\n", "self", ".", "mem_len", "=", "config", ".", "mem_len", "\n", "self", ".", "ext_len", "=", "config", ".", "ext_len", "\n", "self", ".", "max_klen", "=", "config", ".", "tgt_len", "+", "config", ".", "ext_len", "+", "config", ".", "mem_len", "\n", "\n", "self", ".", "attn_type", "=", "config", ".", "attn_type", "\n", "\n", "if", "not", "config", ".", "untie_r", ":", "\n", "            ", "self", ".", "r_w_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "config", ".", "attn_type", "==", "0", ":", "# the default attention", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelPartialLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ")", "\n", ")", "\n", "", "", "elif", "config", ".", "attn_type", "==", "1", ":", "# learnable embeddings", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "RelLearnableDecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "tgt_len", "=", "config", ".", "tgt_len", ",", "ext_len", "=", "config", ".", "ext_len", ",", "mem_len", "=", "config", ".", "mem_len", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ")", "\n", ")", "\n", "", "", "elif", "config", ".", "attn_type", "in", "[", "2", ",", "3", "]", ":", "# absolute embeddings", "\n", "            ", "for", "i", "in", "range", "(", "config", ".", "n_layer", ")", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "DecoderLayer", "(", "\n", "config", ".", "n_head", ",", "config", ".", "d_model", ",", "config", ".", "d_head", ",", "config", ".", "d_inner", ",", "config", ".", "dropout", ",", "\n", "dropatt", "=", "config", ".", "dropatt", ",", "pre_lnorm", "=", "config", ".", "pre_lnorm", ",", "\n", "r_w_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_w_bias", ",", "\n", "r_r_bias", "=", "None", "if", "config", ".", "untie_r", "else", "self", ".", "r_r_bias", ",", "\n", "output_attentions", "=", "self", ".", "output_attentions", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "same_length", "=", "config", ".", "same_length", "\n", "self", ".", "clamp_len", "=", "config", ".", "clamp_len", "\n", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default attention", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "self", ".", "r_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ")", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute standard", "\n", "            ", "self", ".", "pos_emb", "=", "PositionalEmbedding", "(", "self", ".", "d_model", ")", "\n", "", "elif", "self", ".", "attn_type", "==", "3", ":", "# absolute deeper SA", "\n", "            ", "self", ".", "r_emb", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "\n", "self", ".", "n_layer", ",", "self", ".", "max_klen", ",", "self", ".", "n_head", ",", "self", ".", "d_head", ")", ")", "\n", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._resize_token_embeddings": [[1061, 1063], ["None"], "methods", ["None"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "return", "self", ".", "word_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel.backward_compatible": [[1064, 1066], ["None"], "methods", ["None"], ["", "def", "backward_compatible", "(", "self", ")", ":", "\n", "        ", "self", ".", "sample_softmax", "=", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel.reset_length": [[1067, 1071], ["None"], "methods", ["None"], ["", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "tgt_len", "=", "tgt_len", "\n", "self", ".", "mem_len", "=", "mem_len", "\n", "self", ".", "ext_len", "=", "ext_len", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._prune_heads": [[1072, 1075], ["logger.info"], "methods", ["None"], ["", "def", "_prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Head pruning is not implemented for Transformer-XL model\"", ")", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel.init_mems": [[1076, 1088], ["next", "range", "modeling_transfo_xl.TransfoXLModel.parameters", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "mems.append", "data.size"], "methods", ["None"], ["", "def", "init_mems", "(", "self", ",", "data", ")", ":", "\n", "        ", "if", "self", ".", "mem_len", ">", "0", ":", "\n", "            ", "mems", "=", "[", "]", "\n", "param", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layer", ")", ":", "\n", "                ", "empty", "=", "torch", ".", "zeros", "(", "self", ".", "mem_len", ",", "data", ".", "size", "(", "1", ")", ",", "self", ".", "config", ".", "d_model", ",", "\n", "dtype", "=", "param", ".", "dtype", ",", "device", "=", "param", ".", "device", ")", "\n", "mems", ".", "append", "(", "empty", ")", "\n", "\n", "", "return", "mems", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._update_mems": [[1089, 1111], ["len", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "range", "max", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "new_mems.append", "cat[].detach"], "methods", ["None"], ["", "", "def", "_update_mems", "(", "self", ",", "hids", ",", "mems", ",", "qlen", ",", "mlen", ")", ":", "\n", "# does not deal with None", "\n", "        ", "if", "mems", "is", "None", ":", "return", "None", "\n", "\n", "# mems is not None", "\n", "assert", "len", "(", "hids", ")", "==", "len", "(", "mems", ")", ",", "'len(hids) != len(mems)'", "\n", "\n", "# There are `mlen + qlen` steps that can be cached into mems", "\n", "# For the next step, the last `ext_len` of the `qlen` tokens", "\n", "# will be used as the extended context. Hence, we only cache", "\n", "# the tokens from `mlen + qlen - self.ext_len - self.mem_len`", "\n", "# to `mlen + qlen - self.ext_len`.", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "new_mems", "=", "[", "]", "\n", "end_idx", "=", "mlen", "+", "max", "(", "0", ",", "qlen", "-", "0", "-", "self", ".", "ext_len", ")", "\n", "beg_idx", "=", "max", "(", "0", ",", "end_idx", "-", "self", ".", "mem_len", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "hids", ")", ")", ":", "\n", "\n", "                ", "cat", "=", "torch", ".", "cat", "(", "[", "mems", "[", "i", "]", ",", "hids", "[", "i", "]", "]", ",", "dim", "=", "0", ")", "\n", "new_mems", ".", "append", "(", "cat", "[", "beg_idx", ":", "end_idx", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "return", "new_mems", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._forward": [[1112, 1242], ["dec_inp.size", "modeling_transfo_xl.TransfoXLModel.word_emb", "modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel._update_mems", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "mems[].size", "modeling_transfo_xl.TransfoXLModel.new_ones", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl.TransfoXLModel.pos_emb", "modeling_transfo_xl.TransfoXLModel.drop", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "modeling_transfo_xl.TransfoXLModel.transpose().contiguous", "list.append", "list", "outputs.append", "list", "outputs.append", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.triu().bool", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "list.append", "layer", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "list.append", "list.append", "layer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl.TransfoXLModel.pos_emb", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "modeling_transfo_xl.TransfoXLModel.transpose", "t.transpose().contiguous", "t.permute().contiguous", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "list.append", "torch.arange.clamp_", "torch.arange.clamp_", "torch.arange.clamp_", "list.append", "layer", "modeling_transfo_xl.TransfoXLModel.drop", "enumerate", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_transfo_xl.TransfoXLModel.parameters", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "modeling_transfo_xl.TransfoXLModel.new_ones", "list.append", "list.append", "[].view", "layer", "t.transpose", "t.permute", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.view", "torch.cat.view", "torch.cat.view", "list.append", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "cur_emb[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._update_mems"], ["", "def", "_forward", "(", "self", ",", "dec_inp", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "qlen", ",", "bsz", "=", "dec_inp", ".", "size", "(", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads] (a head_mask for each layer)", "\n", "# and head_mask is converted to shape [num_hidden_layers x qlen x klen x bsz x n_head]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layer", "\n", "\n", "", "word_emb", "=", "self", ".", "word_emb", "(", "dec_inp", ")", "\n", "\n", "mlen", "=", "mems", "[", "0", "]", ".", "size", "(", "0", ")", "if", "mems", "is", "not", "None", "else", "0", "\n", "klen", "=", "mlen", "+", "qlen", "\n", "if", "self", ".", "same_length", ":", "\n", "            ", "all_ones", "=", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", "\n", "mask_len", "=", "klen", "-", "self", ".", "mem_len", "\n", "if", "mask_len", ">", "0", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "-", "mask_len", "\n", "", "else", ":", "\n", "                ", "mask_shift_len", "=", "qlen", "\n", "", "dec_attn_mask", "=", "(", "torch", ".", "triu", "(", "all_ones", ",", "1", "+", "mlen", ")", "\n", "+", "torch", ".", "tril", "(", "all_ones", ",", "-", "mask_shift_len", ")", ")", ".", "bool", "(", ")", "[", ":", ",", ":", ",", "None", "]", "# -1", "\n", "", "else", ":", "\n", "            ", "dec_attn_mask", "=", "torch", ".", "triu", "(", "\n", "word_emb", ".", "new_ones", "(", "qlen", ",", "klen", ")", ",", "diagonal", "=", "1", "+", "mlen", ")", ".", "bool", "(", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "\n", "", "hids", "=", "[", "]", "\n", "attentions", "=", "[", "]", "\n", "if", "self", ".", "attn_type", "==", "0", ":", "# default", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "pos_emb", "=", "self", ".", "drop", "(", "pos_emb", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "core_out", ",", "pos_emb", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "elif", "self", ".", "attn_type", "==", "1", ":", "# learnable", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                    ", "r_emb", "=", "self", ".", "r_emb", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "r_bias", "=", "self", ".", "r_bias", "[", "i", "]", "[", "-", "self", ".", "clamp_len", ":", "]", "\n", "", "else", ":", "\n", "                    ", "r_emb", ",", "r_bias", "=", "self", ".", "r_emb", "[", "i", "]", ",", "self", ".", "r_bias", "[", "i", "]", "\n", "\n", "", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "layer_outputs", "=", "layer", "(", "core_out", ",", "r_emb", ",", "self", ".", "r_w_bias", "[", "i", "]", ",", "\n", "r_bias", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "elif", "self", ".", "attn_type", "==", "2", ":", "# absolute", "\n", "            ", "pos_seq", "=", "torch", ".", "arange", "(", "klen", "-", "1", ",", "-", "1", ",", "-", "1.0", ",", "device", "=", "word_emb", ".", "device", ",", "\n", "dtype", "=", "word_emb", ".", "dtype", ")", "\n", "if", "self", ".", "clamp_len", ">", "0", ":", "\n", "                ", "pos_seq", ".", "clamp_", "(", "max", "=", "self", ".", "clamp_len", ")", "\n", "", "pos_emb", "=", "self", ".", "pos_emb", "(", "pos_seq", ")", "\n", "\n", "core_out", "=", "self", ".", "drop", "(", "word_emb", "+", "pos_emb", "[", "-", "qlen", ":", "]", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "i", "==", "0", ":", "\n", "                    ", "mems_i", "+=", "pos_emb", "[", ":", "mlen", "]", "\n", "", "layer_outputs", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "", "", "", "elif", "self", ".", "attn_type", "==", "3", ":", "\n", "            ", "core_out", "=", "self", ".", "drop", "(", "word_emb", ")", "\n", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "                ", "hids", ".", "append", "(", "core_out", ")", "\n", "mems_i", "=", "None", "if", "mems", "is", "None", "else", "mems", "[", "i", "]", "\n", "if", "mems_i", "is", "not", "None", "and", "mlen", ">", "0", ":", "\n", "                    ", "cur_emb", "=", "self", ".", "r_emb", "[", "i", "]", "[", ":", "-", "qlen", "]", "\n", "cur_size", "=", "cur_emb", ".", "size", "(", "0", ")", "\n", "if", "cur_size", "<", "mlen", ":", "\n", "                        ", "cur_emb_pad", "=", "cur_emb", "[", "0", ":", "1", "]", ".", "expand", "(", "mlen", "-", "cur_size", ",", "-", "1", ",", "-", "1", ")", "\n", "cur_emb", "=", "torch", ".", "cat", "(", "[", "cur_emb_pad", ",", "cur_emb", "]", ",", "0", ")", "\n", "", "else", ":", "\n", "                        ", "cur_emb", "=", "cur_emb", "[", "-", "mlen", ":", "]", "\n", "", "mems_i", "+=", "cur_emb", ".", "view", "(", "mlen", ",", "1", ",", "-", "1", ")", "\n", "", "core_out", "+=", "self", ".", "r_emb", "[", "i", "]", "[", "-", "qlen", ":", "]", ".", "view", "(", "qlen", ",", "1", ",", "-", "1", ")", "\n", "\n", "layer_outputs", "=", "layer", "(", "core_out", ",", "dec_attn_mask", "=", "dec_attn_mask", ",", "\n", "mems", "=", "mems_i", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "core_out", "=", "layer_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                    ", "attentions", ".", "append", "(", "layer_outputs", "[", "1", "]", ")", "\n", "\n", "", "", "", "core_out", "=", "self", ".", "drop", "(", "core_out", ")", "\n", "\n", "new_mems", "=", "self", ".", "_update_mems", "(", "hids", ",", "mems", ",", "mlen", ",", "qlen", ")", "\n", "\n", "# We transpose back here to shape [bsz, len, hidden_dim]", "\n", "outputs", "=", "[", "core_out", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ",", "new_mems", "]", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "# Add last layer and transpose to library standard shape [bsz, len, hidden_dim]", "\n", "            ", "hids", ".", "append", "(", "core_out", ")", "\n", "hids", "=", "list", "(", "t", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "hids", ")", "\n", "outputs", ".", "append", "(", "hids", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# Transpose to library standard shape [bsz, n_heads, query_seq_len, key_seq_len]", "\n", "            ", "attentions", "=", "list", "(", "t", ".", "permute", "(", "2", ",", "3", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "for", "t", "in", "attentions", ")", "\n", "outputs", ".", "append", "(", "attentions", ")", "\n", "", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel.forward": [[1243, 1253], ["input_ids.transpose().contiguous.transpose().contiguous.transpose().contiguous", "modeling_transfo_xl.TransfoXLModel._forward", "modeling_transfo_xl.TransfoXLModel.init_mems", "input_ids.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLModel._forward", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "# the original code for Transformer-XL used shapes [len, bsz] but we want a unified interface in the library", "\n", "# so we transpose here from shape [bsz, len] to shape [len, bsz]", "\n", "        ", "input_ids", "=", "input_ids", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "\n", "if", "mems", "is", "None", ":", "\n", "            ", "mems", "=", "self", ".", "init_mems", "(", "input_ids", ")", "\n", "", "outputs", "=", "self", ".", "_forward", "(", "input_ids", ",", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "return", "outputs", "# last hidden state, new_mems, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.__init__": [[1294, 1308], ["modeling_utils.PreTrainedModel.__init__", "modeling_transfo_xl.TransfoXLModel", "modeling_transfo_xl.TransfoXLLMHeadModel.init_weights", "modeling_transfo_xl.TransfoXLLMHeadModel.tie_weights", "torch.Linear", "torch.Linear", "torch.Linear", "LogUniformSampler", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransfoXLLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "TransfoXLModel", "(", "config", ")", "\n", "self", ".", "sample_softmax", "=", "config", ".", "sample_softmax", "\n", "# use sampled softmax", "\n", "if", "config", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "self", ".", "out_layer", "=", "nn", ".", "Linear", "(", "config", ".", "d_model", ",", "config", ".", "n_token", ")", "\n", "self", ".", "sampler", "=", "LogUniformSampler", "(", "config", ".", "n_token", ",", "config", ".", "sample_softmax", ")", "\n", "# use adaptive softmax (including standard softmax)", "\n", "", "else", ":", "\n", "            ", "self", ".", "crit", "=", "ProjectedAdaptiveLogSoftmax", "(", "config", ".", "n_token", ",", "config", ".", "d_embed", ",", "config", ".", "d_model", ",", "\n", "config", ".", "cutoffs", ",", "div_val", "=", "config", ".", "div_val", ")", "\n", "", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.tie_weights": [[1309, 1335], ["range", "enumerate", "len", "modeling_transfo_xl.TransfoXLLMHeadModel._tie_or_clone_weights", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone", "torch.Parameter", "torch.Parameter", "torch.Parameter", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer.word_emb.emb_projs[].clone"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Run this to be sure output and input (adaptive) softmax weights are tied\n        \"\"\"", "\n", "# sampled softmax", "\n", "if", "self", ".", "sample_softmax", ">", "0", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "self", ".", "out_layer", ".", "weight", "=", "self", ".", "transformer", ".", "word_emb", ".", "weight", "\n", "# adaptive softmax (including standard softmax)", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "config", ".", "tie_weight", ":", "\n", "                ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "crit", ".", "out_layers", ")", ")", ":", "\n", "                    ", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "crit", ".", "out_layers", "[", "i", "]", ",", "\n", "self", ".", "transformer", ".", "word_emb", ".", "emb_layers", "[", "i", "]", ")", "\n", "", "", "if", "self", ".", "config", ".", "tie_projs", ":", "\n", "                ", "for", "i", ",", "tie_proj", "in", "enumerate", "(", "self", ".", "config", ".", "tie_projs", ")", ":", "\n", "                    ", "if", "tie_proj", "and", "self", ".", "config", ".", "div_val", "==", "1", "and", "self", ".", "config", ".", "d_model", "!=", "self", ".", "config", ".", "d_embed", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "0", "]", "\n", "", "", "elif", "tie_proj", "and", "self", ".", "config", ".", "div_val", "!=", "1", ":", "\n", "                        ", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "nn", ".", "Parameter", "(", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "                            ", "self", ".", "crit", ".", "out_projs", "[", "i", "]", "=", "self", ".", "transformer", ".", "word_emb", ".", "emb_projs", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length": [[1336, 1338], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.reset_length"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.reset_length"], ["", "", "", "", "", "", "def", "reset_length", "(", "self", ",", "tgt_len", ",", "ext_len", ",", "mem_len", ")", ":", "\n", "        ", "self", ".", "transformer", ".", "reset_length", "(", "tgt_len", ",", "ext_len", ",", "mem_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems": [[1339, 1341], ["modeling_transfo_xl.TransfoXLLMHeadModel.transformer.init_mems"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.init_mems"], ["", "def", "init_mems", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "self", ".", "transformer", ".", "init_mems", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel.forward": [[1342, 1369], ["input_ids.size", "input_ids.size", "modeling_transfo_xl.TransfoXLLMHeadModel.transformer", "modeling_transfo_xl_utilities.sample_logits", "modeling_transfo_xl.TransfoXLLMHeadModel.crit", "pred_hid.view", "softmax_output.view.view.view", "softmax_output.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "pred_hid.size"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.sample_logits"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "labels", "=", "None", ",", "mems", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "bsz", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "tgt_len", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "\n", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "mems", "=", "mems", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "last_hidden", "=", "transformer_outputs", "[", "0", "]", "\n", "pred_hid", "=", "last_hidden", "[", ":", ",", "-", "tgt_len", ":", "]", "\n", "outputs", "=", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "self", ".", "sample_softmax", ">", "0", "and", "self", ".", "training", ":", "\n", "            ", "assert", "self", ".", "config", ".", "tie_weight", "\n", "logit", "=", "sample_logits", "(", "self", ".", "transformer", ".", "word_emb", ",", "self", ".", "out_layer", ".", "bias", ",", "labels", ",", "pred_hid", ",", "self", ".", "sampler", ")", "\n", "softmax_output", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "-", "1", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# TODO: This is not implemented", "\n", "                ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "            ", "softmax_output", "=", "self", ".", "crit", "(", "pred_hid", ".", "view", "(", "-", "1", ",", "pred_hid", ".", "size", "(", "-", "1", ")", ")", ",", "labels", ")", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ",", "-", "1", ")", "\n", "outputs", "=", "[", "softmax_output", "]", "+", "outputs", "\n", "", "else", ":", "\n", "                ", "softmax_output", "=", "softmax_output", ".", "view", "(", "bsz", ",", "tgt_len", ")", "\n", "outputs", "=", "[", "softmax_output", ",", "None", "]", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "# (loss), logits or None if labels is not None (speed up adaptive softmax), new_mems, (all hidden states), (all attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.build_tf_to_pytorch_map": [[50, 121], ["hasattr", "enumerate", "enumerate", "tf_to_pt_map.update", "tf_to_pt_map.update", "enumerate", "zip", "tf_to_pt_map.update", "tf_to_pt_map.update", "zip", "r_r_list.append", "r_w_list.append", "tf_to_pt_map.update", "tf_to_pt_map.update", "tf_to_pt_map.update"], "function", ["None"], ["def", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", ":", "\n", "    ", "\"\"\" A map of modules from TF to PyTorch.\n        This time I use a map to keep the PyTorch model as identical to the original PyTorch model as possible.\n    \"\"\"", "\n", "tf_to_pt_map", "=", "{", "}", "\n", "\n", "if", "hasattr", "(", "model", ",", "'transformer'", ")", ":", "\n", "# We are loading in a TransfoXLLMHeadModel => we will load also the Adaptive Softmax", "\n", "        ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_W\"", ":", "model", ".", "crit", ".", "cluster_weight", ",", "\n", "\"transformer/adaptive_softmax/cutoff_0/cluster_b\"", ":", "model", ".", "crit", ".", "cluster_bias", "}", ")", "\n", "for", "i", ",", "(", "out_l", ",", "proj_l", ",", "tie_proj", ")", "in", "enumerate", "(", "zip", "(", "\n", "model", ".", "crit", ".", "out_layers", ",", "\n", "model", ".", "crit", ".", "out_projs", ",", "\n", "config", ".", "tie_projs", ")", ")", ":", "\n", "            ", "layer_str", "=", "\"transformer/adaptive_softmax/cutoff_%d/\"", "%", "i", "\n", "if", "config", ".", "tie_weight", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "\n", "# I don't think this is implemented in the TF code", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "out_l", ".", "weight", ",", "\n", "layer_str", "+", "'b'", ":", "out_l", ".", "bias", "}", ")", "\n", "", "if", "not", "tie_proj", ":", "\n", "                ", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'proj'", ":", "proj_l", "\n", "}", ")", "\n", "# Now load the rest of the transformer", "\n", "", "", "model", "=", "model", ".", "transformer", "\n", "\n", "# Embeddings", "\n", "", "for", "i", ",", "(", "embed_l", ",", "proj_l", ")", "in", "enumerate", "(", "zip", "(", "model", ".", "word_emb", ".", "emb_layers", ",", "model", ".", "word_emb", ".", "emb_projs", ")", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/adaptive_embed/cutoff_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "'lookup_table'", ":", "embed_l", ".", "weight", ",", "\n", "layer_str", "+", "'proj_W'", ":", "proj_l", "\n", "}", ")", "\n", "\n", "# Transformer blocks", "\n", "", "for", "i", ",", "b", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "layer_str", "=", "\"transformer/layer_%d/\"", "%", "i", "\n", "tf_to_pt_map", ".", "update", "(", "{", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/gamma\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/LayerNorm/beta\"", ":", "b", ".", "dec_attn", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"rel_attn/o/kernel\"", ":", "b", ".", "dec_attn", ".", "o_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/qkv/kernel\"", ":", "b", ".", "dec_attn", ".", "qkv_net", ".", "weight", ",", "\n", "layer_str", "+", "\"rel_attn/r/kernel\"", ":", "b", ".", "dec_attn", ".", "r_net", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/gamma\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/LayerNorm/beta\"", ":", "b", ".", "pos_ff", ".", "layer_norm", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_1/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_1/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "0", "]", ".", "bias", ",", "\n", "layer_str", "+", "\"ff/layer_2/kernel\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "weight", ",", "\n", "layer_str", "+", "\"ff/layer_2/bias\"", ":", "b", ".", "pos_ff", ".", "CoreNet", "[", "3", "]", ".", "bias", ",", "\n", "}", ")", "\n", "\n", "# Relative positioning biases", "\n", "", "if", "config", ".", "untie_r", ":", "\n", "        ", "r_r_list", "=", "[", "]", "\n", "r_w_list", "=", "[", "]", "\n", "for", "b", "in", "model", ".", "layers", ":", "\n", "            ", "r_r_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_r_bias", ")", "\n", "r_w_list", ".", "append", "(", "b", ".", "dec_attn", ".", "r_w_bias", ")", "\n", "", "", "else", ":", "\n", "        ", "r_r_list", "=", "[", "model", ".", "r_r_bias", "]", "\n", "r_w_list", "=", "[", "model", ".", "r_w_bias", "]", "\n", "", "tf_to_pt_map", ".", "update", "(", "{", "\n", "'transformer/r_r_bias'", ":", "r_r_list", ",", "\n", "'transformer/r_w_bias'", ":", "r_w_list", "}", ")", "\n", "return", "tf_to_pt_map", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl": [[122, 176], ["modeling_transfo_xl.build_tf_to_pytorch_map", "tf.train.list_variables", "build_tf_to_pytorch_map.items", "logger.info", "logger.info", "tf.train.load_variable", "tf_weights.pop", "tf_weights.pop", "tf_weights.pop", "logger.error", "np.transpose", "enumerate", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "len", "len", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "tf_weights.keys"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.build_tf_to_pytorch_map"], ["", "def", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow models in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "# Build TF to PyTorch weights loading map", "\n", "", "tf_to_pt_map", "=", "build_tf_to_pytorch_map", "(", "model", ",", "config", ")", "\n", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "tf_weights", "=", "{", "}", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "tf_weights", "[", "name", "]", "=", "array", "\n", "\n", "", "for", "name", ",", "pointer", "in", "tf_to_pt_map", ".", "items", "(", ")", ":", "\n", "        ", "assert", "name", "in", "tf_weights", "\n", "array", "=", "tf_weights", "[", "name", "]", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "'kernel'", "in", "name", "or", "'proj'", "in", "name", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "if", "(", "'r_r_bias'", "in", "name", "or", "'r_w_bias'", "in", "name", ")", "and", "len", "(", "pointer", ")", ">", "1", ":", "\n", "# Here we will split the TF weigths", "\n", "            ", "assert", "len", "(", "pointer", ")", "==", "array", ".", "shape", "[", "0", "]", "\n", "for", "i", ",", "p_i", "in", "enumerate", "(", "pointer", ")", ":", "\n", "                ", "arr_i", "=", "array", "[", "i", ",", "...", "]", "\n", "try", ":", "\n", "                    ", "assert", "p_i", ".", "shape", "==", "arr_i", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                    ", "e", ".", "args", "+=", "(", "p_i", ".", "shape", ",", "arr_i", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {} for layer {}\"", ".", "format", "(", "name", ",", "i", ")", ")", "\n", "p_i", ".", "data", "=", "torch", ".", "from_numpy", "(", "arr_i", ")", "\n", "", "", "else", ":", "\n", "            ", "try", ":", "\n", "                ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "                ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "tf_weights", ".", "pop", "(", "name", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam'", ",", "None", ")", "\n", "tf_weights", ".", "pop", "(", "name", "+", "'/Adam_1'", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Weights not copied to PyTorch model: {}\"", ".", "format", "(", "', '", ".", "join", "(", "tf_weights", ".", "keys", "(", ")", ")", ")", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.__init__": [[539, 573], ["tokenization_utils.PreTrainedTokenizer.__init__", "dict", "dict", "set", "json.load", "dict", "io.open", "io.open().read().split", "tuple", "zip", "len", "len", "tokenization_xlm.XLMTokenizer.encoder.items", "range", "io.open().read", "merge.split", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "bos_token", "=", "\"<s>\"", ",", "\n", "sep_token", "=", "\"</s>\"", ",", "pad_token", "=", "\"<pad>\"", ",", "cls_token", "=", "\"</s>\"", ",", "\n", "mask_token", "=", "\"<special1>\"", ",", "additional_special_tokens", "=", "[", "\"<special0>\"", ",", "\n", "\"<special1>\"", ",", "\"<special2>\"", ",", "\"<special3>\"", ",", "\"<special4>\"", ",", "\"<special5>\"", ",", "\n", "\"<special6>\"", ",", "\"<special7>\"", ",", "\"<special8>\"", ",", "\"<special9>\"", "]", ",", "\n", "lang2id", "=", "None", ",", "id2lang", "=", "None", ",", "do_lowercase_and_remove_accent", "=", "True", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "bos_token", "=", "bos_token", ",", "\n", "sep_token", "=", "sep_token", ",", "pad_token", "=", "pad_token", ",", "\n", "cls_token", "=", "cls_token", ",", "mask_token", "=", "mask_token", ",", "\n", "additional_special_tokens", "=", "additional_special_tokens", ",", "\n", "**", "kwargs", ")", "\n", "\n", "# cache of sm.MosesPunctNormalizer instance", "\n", "self", ".", "cache_moses_punct_normalizer", "=", "dict", "(", ")", "\n", "# cache of sm.MosesTokenizer instance", "\n", "self", ".", "cache_moses_tokenizer", "=", "dict", "(", ")", "\n", "self", ".", "lang_with_custom_tokenizer", "=", "set", "(", "[", "'zh'", ",", "'th'", ",", "'ja'", "]", ")", "\n", "# True for current supported model (v1.2.0), False for XLM-17 & 100", "\n", "self", ".", "do_lowercase_and_remove_accent", "=", "do_lowercase_and_remove_accent", "\n", "self", ".", "lang2id", "=", "lang2id", "\n", "self", ".", "id2lang", "=", "id2lang", "\n", "if", "lang2id", "is", "not", "None", "and", "id2lang", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "lang2id", ")", "==", "len", "(", "id2lang", ")", "\n", "\n", "", "self", ".", "ja_word_tokenizer", "=", "None", "\n", "self", ".", "zh_word_tokenizer", "=", "None", "\n", "\n", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", "[", ":", "2", "]", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm": [[574, 581], ["sacremoses.MosesPunctNormalizer.normalize", "sacremoses.MosesPunctNormalizer"], "methods", ["None"], ["", "def", "moses_punct_norm", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_punct_normalizer", ":", "\n", "            ", "punct_normalizer", "=", "sm", ".", "MosesPunctNormalizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "=", "punct_normalizer", "\n", "", "else", ":", "\n", "            ", "punct_normalizer", "=", "self", ".", "cache_moses_punct_normalizer", "[", "lang", "]", "\n", "", "return", "punct_normalizer", ".", "normalize", "(", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_tokenize": [[582, 589], ["sacremoses.MosesTokenizer.tokenize", "sacremoses.MosesTokenizer"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "moses_tokenize", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "if", "lang", "not", "in", "self", ".", "cache_moses_tokenizer", ":", "\n", "            ", "moses_tokenizer", "=", "sm", ".", "MosesTokenizer", "(", "lang", "=", "lang", ")", "\n", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "=", "moses_tokenizer", "\n", "", "else", ":", "\n", "            ", "moses_tokenizer", "=", "self", ".", "cache_moses_tokenizer", "[", "lang", "]", "\n", "", "return", "moses_tokenizer", ".", "tokenize", "(", "text", ",", "return_str", "=", "False", ",", "escape", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_pipeline": [[590, 595], ["tokenization_xlm.replace_unicode_punct", "tokenization_xlm.XLMTokenizer.moses_punct_norm", "tokenization_xlm.remove_non_printing_char"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.replace_unicode_punct", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_punct_norm", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.remove_non_printing_char"], ["", "def", "moses_pipeline", "(", "self", ",", "text", ",", "lang", ")", ":", "\n", "        ", "text", "=", "replace_unicode_punct", "(", "text", ")", "\n", "text", "=", "self", ".", "moses_punct_norm", "(", "text", ",", "lang", ")", "\n", "text", "=", "remove_non_printing_char", "(", "text", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.ja_tokenize": [[596, 610], ["list", "tokenization_xlm.XLMTokenizer.ja_word_tokenizer.getWS", "Mykytea.Mykytea", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "logger.error", "os.path.expanduser"], "methods", ["None"], ["", "def", "ja_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "if", "self", ".", "ja_word_tokenizer", "is", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "Mykytea", "\n", "self", ".", "ja_word_tokenizer", "=", "Mykytea", ".", "Mykytea", "(", "'-model %s/local/share/kytea/model.bin'", "%", "os", ".", "path", ".", "expanduser", "(", "'~'", ")", ")", "\n", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install KyTea (https://github.com/neubig/kytea) and it's python wrapper (https://github.com/chezou/Mykytea-python) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. git clone git@github.com:neubig/kytea.git && cd kytea\"", ")", "\n", "logger", ".", "error", "(", "\"2. autoreconf -i\"", ")", "\n", "logger", ".", "error", "(", "\"3. ./configure --prefix=$HOME/local\"", ")", "\n", "logger", ".", "error", "(", "\"4. make && make install\"", ")", "\n", "logger", ".", "error", "(", "\"5. pip install kytea\"", ")", "\n", "raise", "e", "\n", "", "", "return", "list", "(", "self", ".", "ja_word_tokenizer", ".", "getWS", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.vocab_size": [[611, 614], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.bpe": [[615, 657], ["tokenization_xlm.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_xlm.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_xlm.XLMTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer._tokenize": [[658, 743], ["logger.error", "tokenization_xlm.XLMTokenizer.split", "tokenization_xlm.lowercase_and_remove_accent", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.moses_tokenize", "split_tokens.extend", "tokenization_xlm.romanian_preprocessing", "tokenization_xlm.XLMTokenizer.moses_pipeline", "th_word_tokenize", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.split", "logger.error", "logger.error", "jieba.cut", "tokenization_xlm.XLMTokenizer.moses_pipeline", "tokenization_xlm.XLMTokenizer.ja_tokenize", "ValueError", "tokenization_xlm.XLMTokenizer.bpe().split", "logger.error", "logger.error", "tokenization_xlm.XLMTokenizer.bpe"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.lowercase_and_remove_accent", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.romanian_preprocessing", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.moses_pipeline", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.ja_tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "lang", "=", "'en'", ",", "bypass_tokenizer", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Tokenize a string given language code. For Chinese, Japanese and Thai, we use a language specific tokenizerself. Otherwise, we use Moses.\n\n        Details of tokenization:\n        - [sacremoses](https://github.com/alvations/sacremoses): port of Moses\n            - Install with `pip install sacremoses`\n        - [pythainlp](https://github.com/PyThaiNLP/pythainlp): Thai tokenizer\n            - Install with `pip install pythainlp`\n        - [kytea](https://github.com/chezou/Mykytea-python): Japanese tokenizer, wrapper of [KyTea](https://github.com/neubig/kytea)\n            - Install with the following steps:\n            ```\n            git clone git@github.com:neubig/kytea.git && cd kytea\n            autoreconf -i\n            ./configure --prefix=$HOME/local\n            make && make install\n            pip install kytea\n            ```\n        - [jieba](https://github.com/fxsjy/jieba): Chinese tokenizer *\n            - Install with `pip install jieba`\n\n        \\* The original XLM used [Stanford Segmenter](https://nlp.stanford.edu/software/stanford-segmenter-2018-10-16.zip).\n        However, the wrapper (`nltk.tokenize.stanford_segmenter`) is slow due to JVM overhead, and it will be deprecated.\n        Jieba is a lot faster and pip-installable. Note there is some mismatch with the Stanford Segmenter. It should be fine\n        if you fine-tune the model with Chinese supervisionself. If you want the same exact behaviour, use the original XLM\n        [preprocessing script](https://github.com/facebookresearch/XLM/tree/master/tools) to tokenize the sentence externally,\n        and set `bypass_tokenizer=True` to bypass the tokenizer.\n\n        Args:\n            - lang: ISO language code (default = 'en') (string). Languages should belong of the model supported languages. However, we don't enforce it.\n            - bypass_tokenizer: Allow users to preprocess and tokenize the sentences externally (default = False)  (bool). If True, we only apply BPE.\n\n        Returns:\n            List of tokens.\n        \"\"\"", "\n", "if", "lang", "and", "self", ".", "lang2id", "and", "lang", "not", "in", "self", ".", "lang2id", ":", "\n", "            ", "logger", ".", "error", "(", "\"Supplied language code not found in lang2id mapping. Please check that your language is supported by the loaded pretrained model.\"", ")", "\n", "", "if", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "not", "in", "self", ".", "lang_with_custom_tokenizer", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "# TODO: make sure we are using `xlm-mlm-enro-1024`, since XLM-100 doesn't have this step", "\n", "if", "lang", "==", "'ro'", ":", "\n", "                ", "text", "=", "romanian_preprocessing", "(", "text", ")", "\n", "", "text", "=", "self", ".", "moses_tokenize", "(", "text", ",", "lang", "=", "lang", ")", "\n", "", "elif", "lang", "==", "'th'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "try", ":", "\n", "                ", "if", "'pythainlp'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "from", "pythainlp", ".", "tokenize", "import", "word_tokenize", "as", "th_word_tokenize", "\n", "", "else", ":", "\n", "                    ", "th_word_tokenize", "=", "sys", ".", "modules", "[", "'pythainlp'", "]", ".", "word_tokenize", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install PyThaiNLP (https://github.com/PyThaiNLP/pythainlp) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install pythainlp\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "th_word_tokenize", "(", "text", ")", "\n", "", "elif", "lang", "==", "'zh'", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "'jieba'", "not", "in", "sys", ".", "modules", ":", "\n", "                    ", "import", "jieba", "\n", "", "else", ":", "\n", "                    ", "jieba", "=", "sys", ".", "modules", "[", "'jieba'", "]", "\n", "", "", "except", "(", "AttributeError", ",", "ImportError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Make sure you install Jieba (https://github.com/fxsjy/jieba) with the following steps\"", ")", "\n", "logger", ".", "error", "(", "\"1. pip install jieba\"", ")", "\n", "raise", "e", "\n", "", "text", "=", "' '", ".", "join", "(", "jieba", ".", "cut", "(", "text", ")", ")", "\n", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "text", ".", "split", "(", ")", "\n", "", "elif", "lang", "==", "'ja'", ":", "\n", "            ", "text", "=", "self", ".", "moses_pipeline", "(", "text", ",", "lang", "=", "lang", ")", "\n", "text", "=", "self", ".", "ja_tokenize", "(", "text", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'It should not reach here'", ")", "\n", "\n", "", "if", "self", ".", "do_lowercase_and_remove_accent", "and", "not", "bypass_tokenizer", ":", "\n", "            ", "text", "=", "lowercase_and_remove_accent", "(", "text", ")", "\n", "\n", "", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "text", ":", "\n", "            ", "if", "token", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer._convert_token_to_id": [[744, 747], ["tokenization_xlm.XLMTokenizer.encoder.get", "tokenization_xlm.XLMTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer._convert_id_to_token": [[748, 751], ["tokenization_xlm.XLMTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.convert_tokens_to_string": [[752, 756], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.add_special_tokens_single_sentence": [[757, 763], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_single_sentence", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence for sequence classification tasks.\n        An XLM sequence has the following format: [CLS] X [SEP]\n        \"\"\"", "\n", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids", "+", "[", "self", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.add_special_tokens_sentences_pair": [[764, 772], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_sentences_pair", "(", "self", ",", "token_ids_0", ",", "token_ids_1", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence pair for sequence classification tasks.\n        An XLM sequence pair has the following format: [CLS] A [SEP] B [SEP]\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.XLMTokenizer.save_vocabulary": [[773, 795], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "sorted", "json.dumps", "tokenization_xlm.XLMTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.get_pairs": [[415, 426], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.lowercase_and_remove_accent": [[428, 443], ["unicodedata.normalize.lower", "unicodedata.normalize", "unicodedata.category", "output.append"], "function", ["None"], ["", "def", "lowercase_and_remove_accent", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    Lowercase and strips accents from a piece of text based on\n    https://github.com/facebookresearch/XLM/blob/master/tools/lowercase_and_remove_accent.py\n    \"\"\"", "\n", "text", "=", "' '", ".", "join", "(", "text", ")", "\n", "text", "=", "text", ".", "lower", "(", ")", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", ".", "lower", "(", ")", ".", "split", "(", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.replace_unicode_punct": [[445, 486], ["text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "re.sub", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace", "text.replace.replace"], "function", ["None"], ["", "def", "replace_unicode_punct", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/replace-unicode-punctuation.perl\n    '''", "\n", "text", "=", "text", ".", "replace", "(", "'\uff0c'", ",", "','", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\u3002\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3001'", ",", "','", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u201c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2236'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1a'", ",", "':'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1f'", ",", "'?'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300a'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300b'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff09'", ",", "')'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff01'", ",", "'!'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff08'", ",", "'('", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff1b'", ",", "';'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff11'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300d'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u300c'", ",", "'\"'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff10'", ",", "'0'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff13'", ",", "'3'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff12'", ",", "'2'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff15'", ",", "'5'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff16'", ",", "'6'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff19'", ",", "'9'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff17'", ",", "'7'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff18'", ",", "'8'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff14'", ",", "'4'", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\uff0e\\s*'", ",", "'. '", ",", "text", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff5e'", ",", "'~'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2019'", ",", "'\\''", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2501'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3008'", ",", "'<'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3009'", ",", "'>'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3010'", ",", "'['", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u3011'", ",", "']'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\uff05'", ",", "'%'", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.remove_non_printing_char": [[488, 499], ["unicodedata.category", "unicodedata.category.startswith", "output.append"], "function", ["None"], ["", "def", "remove_non_printing_char", "(", "text", ")", ":", "\n", "    ", "'''\n    Port of https://github.com/moses-smt/mosesdecoder/blob/master/scripts/tokenizer/remove-non-printing-char.perl\n    '''", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "        ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "'C'", ")", ":", "\n", "            ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_xlm.romanian_preprocessing": [[501, 513], ["text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace().replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace", "text.replace().replace.replace"], "function", ["None"], ["", "def", "romanian_preprocessing", "(", "text", ")", ":", "\n", "    ", "'''Sennrich's WMT16 scripts for Romanian preprocessing, used by model `xlm-mlm-enro-1024`'''", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/normalise-romanian.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u015e\"", ",", "\"\\u0218\"", ")", ".", "replace", "(", "\"\\u015f\"", ",", "\"\\u0219\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0162\"", ",", "\"\\u021a\"", ")", ".", "replace", "(", "\"\\u0163\"", ",", "\"\\u021b\"", ")", "\n", "# https://github.com/rsennrich/wmt16-scripts/blob/master/preprocess/remove-diacritics.py", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0218\"", ",", "\"S\"", ")", ".", "replace", "(", "\"\\u0219\"", ",", "\"s\"", ")", "#s-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u021a\"", ",", "\"T\"", ")", ".", "replace", "(", "\"\\u021b\"", ",", "\"t\"", ")", "#t-comma", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u0102\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u0103\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00C2\"", ",", "\"A\"", ")", ".", "replace", "(", "\"\\u00E2\"", ",", "\"a\"", ")", "\n", "text", "=", "text", ".", "replace", "(", "\"\\u00CE\"", ",", "\"I\"", ")", ".", "replace", "(", "\"\\u00EE\"", ",", "\"i\"", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.__init__": [[123, 162], ["tokenization_utils.PreTrainedTokenizer.__init__", "tokenization_bert.load_vocab", "collections.OrderedDict", "tokenization_bert.WordpieceTokenizer", "os.path.isfile", "ValueError", "tokenization_bert.BasicTokenizer", "tokenization_bert.BertTokenizer.vocab.items"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.load_vocab"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "do_lower_case", "=", "True", ",", "do_basic_tokenize", "=", "True", ",", "never_split", "=", "None", ",", "\n", "unk_token", "=", "\"[UNK]\"", ",", "sep_token", "=", "\"[SEP]\"", ",", "pad_token", "=", "\"[PAD]\"", ",", "cls_token", "=", "\"[CLS]\"", ",", "\n", "mask_token", "=", "\"[MASK]\"", ",", "tokenize_chinese_chars", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs a BertTokenizer.\n\n        Args:\n            **vocab_file**: Path to a one-wordpiece-per-line vocabulary file\n            **do_lower_case**: (`optional`) boolean (default True)\n                Whether to lower case the input\n                Only has an effect when do_basic_tokenize=True\n            **do_basic_tokenize**: (`optional`) boolean (default True)\n                Whether to do basic tokenization before wordpiece.\n            **never_split**: (`optional`) list of string\n                List of tokens which will never be split during tokenization.\n                Only has an effect when do_basic_tokenize=True\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "super", "(", "BertTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "sep_token", "=", "sep_token", ",", "\n", "pad_token", "=", "pad_token", ",", "cls_token", "=", "cls_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "-", "2", "# take into account special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "-", "3", "# take into account special tokens", "\n", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "vocab_file", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Can't find a vocabulary file at path '{}'. To load the vocabulary from a Google pretrained \"", "\n", "\"model use `tokenizer = BertTokenizer.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "", "self", ".", "vocab", "=", "load_vocab", "(", "vocab_file", ")", "\n", "self", ".", "ids_to_tokens", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "(", "ids", ",", "tok", ")", "for", "tok", ",", "ids", "in", "self", ".", "vocab", ".", "items", "(", ")", "]", ")", "\n", "self", ".", "do_basic_tokenize", "=", "do_basic_tokenize", "\n", "if", "do_basic_tokenize", ":", "\n", "            ", "self", ".", "basic_tokenizer", "=", "BasicTokenizer", "(", "do_lower_case", "=", "do_lower_case", ",", "\n", "never_split", "=", "never_split", ",", "\n", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", ")", "\n", "", "self", ".", "wordpiece_tokenizer", "=", "WordpieceTokenizer", "(", "vocab", "=", "self", ".", "vocab", ",", "unk_token", "=", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.vocab_size": [[163, 166], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer._tokenize": [[167, 176], ["tokenization_bert.BertTokenizer.basic_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.wordpiece_tokenizer.tokenize", "tokenization_bert.BertTokenizer.append"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "do_basic_tokenize", ":", "\n", "            ", "for", "token", "in", "self", ".", "basic_tokenizer", ".", "tokenize", "(", "text", ",", "never_split", "=", "self", ".", "all_special_tokens", ")", ":", "\n", "                ", "for", "sub_token", "in", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", ":", "\n", "                    ", "split_tokens", ".", "append", "(", "sub_token", ")", "\n", "", "", "", "else", ":", "\n", "            ", "split_tokens", "=", "self", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "text", ")", "\n", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer._convert_token_to_id": [[177, 180], ["tokenization_bert.BertTokenizer.vocab.get", "tokenization_bert.BertTokenizer.vocab.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "vocab", ".", "get", "(", "token", ",", "self", ".", "vocab", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer._convert_id_to_token": [[181, 184], ["tokenization_bert.BertTokenizer.ids_to_tokens.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an index (integer) in a token (string/unicode) using the vocab.\"\"\"", "\n", "return", "self", ".", "ids_to_tokens", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.convert_tokens_to_string": [[185, 189], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "' '", ".", "join", "(", "tokens", ")", ".", "replace", "(", "' ##'", ",", "''", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.add_special_tokens_single_sentence": [[190, 196], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_single_sentence", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to the a sequence for sequence classification tasks.\n        A BERT sequence has the following format: [CLS] X [SEP]\n        \"\"\"", "\n", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids", "+", "[", "self", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.add_special_tokens_sentences_pair": [[197, 205], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_sentences_pair", "(", "self", ",", "token_ids_0", ",", "token_ids_1", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence pair for sequence classification tasks.\n        A BERT sequence pair has the following format: [CLS] A [SEP] B [SEP]\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BertTokenizer.save_vocabulary": [[206, 222], ["os.path.isdir", "os.path.join", "io.open", "sorted", "tokenization_bert.BertTokenizer.vocab.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary to a directory or file.\"\"\"", "\n", "index", "=", "0", "\n", "if", "os", ".", "path", ".", "isdir", "(", "vocab_path", ")", ":", "\n", "            ", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "vocab_path", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "", "else", ":", "\n", "            ", "vocab_file", "=", "vocab_path", "\n", "", "with", "open", "(", "vocab_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "for", "token", ",", "token_index", "in", "sorted", "(", "self", ".", "vocab", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: vocabulary indices are not consecutive.\"", "\n", "\" Please check that the vocabulary is not corrupted!\"", ".", "format", "(", "vocab_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "token", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "", "", "return", "(", "vocab_file", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer.__init__": [[227, 246], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "do_lower_case", "=", "True", ",", "never_split", "=", "None", ",", "tokenize_chinese_chars", "=", "True", ")", ":", "\n", "        ", "\"\"\" Constructs a BasicTokenizer.\n\n        Args:\n            **do_lower_case**: Whether to lower case the input.\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n            **tokenize_chinese_chars**: (`optional`) boolean (default True)\n                Whether to tokenize Chinese characters.\n                This should likely be deactivated for Japanese:\n                see: https://github.com/huggingface/pytorch-pretrained-BERT/issues/328\n        \"\"\"", "\n", "if", "never_split", "is", "None", ":", "\n", "            ", "never_split", "=", "[", "]", "\n", "", "self", ".", "do_lower_case", "=", "do_lower_case", "\n", "self", ".", "never_split", "=", "never_split", "\n", "self", ".", "tokenize_chinese_chars", "=", "tokenize_chinese_chars", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer.tokenize": [[247, 277], ["tokenization_bert.BasicTokenizer._clean_text", "tokenization_bert.whitespace_tokenize", "tokenization_bert.whitespace_tokenize", "tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "split_tokens.extend", "tokenization_bert.BasicTokenizer.lower", "tokenization_bert.BasicTokenizer._run_strip_accents", "tokenization_bert.BasicTokenizer._run_split_on_punc"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._clean_text", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.whitespace_tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._run_strip_accents", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._run_split_on_punc"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\" Basic Tokenization of a piece of text.\n            Split on \"white spaces\" only, for sub-word tokenization, see WordPieceTokenizer.\n\n        Args:\n            **never_split**: (`optional`) list of str\n                Kept for backward compatibility purposes.\n                Now implemented directly at the base class level (see :func:`PreTrainedTokenizer.tokenize`)\n                List of token not to split.\n        \"\"\"", "\n", "never_split", "=", "self", ".", "never_split", "+", "(", "never_split", "if", "never_split", "is", "not", "None", "else", "[", "]", ")", "\n", "text", "=", "self", ".", "_clean_text", "(", "text", ")", "\n", "# This was added on November 1st, 2018 for the multilingual and Chinese", "\n", "# models. This is also applied to the English models now, but it doesn't", "\n", "# matter since the English models were not trained on any Chinese data", "\n", "# and generally don't have any Chinese data in them (there are Chinese", "\n", "# characters in the vocabulary because Wikipedia does have some Chinese", "\n", "# words in the English Wikipedia.).", "\n", "if", "self", ".", "tokenize_chinese_chars", ":", "\n", "            ", "text", "=", "self", ".", "_tokenize_chinese_chars", "(", "text", ")", "\n", "", "orig_tokens", "=", "whitespace_tokenize", "(", "text", ")", "\n", "split_tokens", "=", "[", "]", "\n", "for", "token", "in", "orig_tokens", ":", "\n", "            ", "if", "self", ".", "do_lower_case", "and", "token", "not", "in", "never_split", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "token", "=", "self", ".", "_run_strip_accents", "(", "token", ")", "\n", "", "split_tokens", ".", "extend", "(", "self", ".", "_run_split_on_punc", "(", "token", ")", ")", "\n", "\n", "", "output_tokens", "=", "whitespace_tokenize", "(", "\" \"", ".", "join", "(", "split_tokens", ")", ")", "\n", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._run_strip_accents": [[278, 288], ["unicodedata.normalize", "unicodedata.category", "output.append"], "methods", ["None"], ["", "def", "_run_strip_accents", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Strips accents from a piece of text.\"\"\"", "\n", "text", "=", "unicodedata", ".", "normalize", "(", "\"NFD\"", ",", "text", ")", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Mn\"", ":", "\n", "                ", "continue", "\n", "", "output", ".", "append", "(", "char", ")", "\n", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._run_split_on_punc": [[289, 310], ["list", "len", "tokenization_bert._is_punctuation", "output.append", "output[].append", "output.append"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_punctuation"], ["", "def", "_run_split_on_punc", "(", "self", ",", "text", ",", "never_split", "=", "None", ")", ":", "\n", "        ", "\"\"\"Splits punctuation on a piece of text.\"\"\"", "\n", "if", "never_split", "is", "not", "None", "and", "text", "in", "never_split", ":", "\n", "            ", "return", "[", "text", "]", "\n", "", "chars", "=", "list", "(", "text", ")", "\n", "i", "=", "0", "\n", "start_new_word", "=", "True", "\n", "output", "=", "[", "]", "\n", "while", "i", "<", "len", "(", "chars", ")", ":", "\n", "            ", "char", "=", "chars", "[", "i", "]", "\n", "if", "_is_punctuation", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "[", "char", "]", ")", "\n", "start_new_word", "=", "True", "\n", "", "else", ":", "\n", "                ", "if", "start_new_word", ":", "\n", "                    ", "output", ".", "append", "(", "[", "]", ")", "\n", "", "start_new_word", "=", "False", "\n", "output", "[", "-", "1", "]", ".", "append", "(", "char", ")", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "[", "\"\"", ".", "join", "(", "x", ")", "for", "x", "in", "output", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._tokenize_chinese_chars": [[311, 323], ["ord", "tokenization_bert.BasicTokenizer._is_chinese_char", "output.append", "output.append", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._is_chinese_char"], ["", "def", "_tokenize_chinese_chars", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Adds whitespace around any CJK character.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "self", ".", "_is_chinese_char", "(", "cp", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "output", ".", "append", "(", "char", ")", "\n", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._is_chinese_char": [[324, 345], ["None"], "methods", ["None"], ["", "def", "_is_chinese_char", "(", "self", ",", "cp", ")", ":", "\n", "        ", "\"\"\"Checks whether CP is the codepoint of a CJK character.\"\"\"", "\n", "# This defines a \"chinese character\" as anything in the CJK Unicode block:", "\n", "#   https://en.wikipedia.org/wiki/CJK_Unified_Ideographs_(Unicode_block)", "\n", "#", "\n", "# Note that the CJK Unicode block is NOT all Japanese and Korean characters,", "\n", "# despite its name. The modern Korean Hangul alphabet is a different block,", "\n", "# as is Japanese Hiragana and Katakana. Those alphabets are used to write", "\n", "# space-separated words, so they are not treated specially and handled", "\n", "# like the all of the other languages.", "\n", "if", "(", "(", "cp", ">=", "0x4E00", "and", "cp", "<=", "0x9FFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x3400", "and", "cp", "<=", "0x4DBF", ")", "or", "#", "\n", "(", "cp", ">=", "0x20000", "and", "cp", "<=", "0x2A6DF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2A700", "and", "cp", "<=", "0x2B73F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B740", "and", "cp", "<=", "0x2B81F", ")", "or", "#", "\n", "(", "cp", ">=", "0x2B820", "and", "cp", "<=", "0x2CEAF", ")", "or", "\n", "(", "cp", ">=", "0xF900", "and", "cp", "<=", "0xFAFF", ")", "or", "#", "\n", "(", "cp", ">=", "0x2F800", "and", "cp", "<=", "0x2FA1F", ")", ")", ":", "#", "\n", "            ", "return", "True", "\n", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.BasicTokenizer._clean_text": [[346, 358], ["ord", "tokenization_bert._is_whitespace", "tokenization_bert._is_control", "output.append", "output.append"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_whitespace", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_control"], ["", "def", "_clean_text", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Performs invalid character removal and whitespace cleanup on text.\"\"\"", "\n", "output", "=", "[", "]", "\n", "for", "char", "in", "text", ":", "\n", "            ", "cp", "=", "ord", "(", "char", ")", "\n", "if", "cp", "==", "0", "or", "cp", "==", "0xfffd", "or", "_is_control", "(", "char", ")", ":", "\n", "                ", "continue", "\n", "", "if", "_is_whitespace", "(", "char", ")", ":", "\n", "                ", "output", ".", "append", "(", "\" \"", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "char", ")", "\n", "", "", "return", "\"\"", ".", "join", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.WordpieceTokenizer.__init__": [[363, 367], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_token", ",", "max_input_chars_per_word", "=", "100", ")", ":", "\n", "        ", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "unk_token", "=", "unk_token", "\n", "self", ".", "max_input_chars_per_word", "=", "max_input_chars_per_word", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.WordpieceTokenizer.tokenize": [[368, 418], ["tokenization_bert.whitespace_tokenize", "list", "len", "output_tokens.append", "len", "len", "sub_tokens.append", "output_tokens.append", "output_tokens.extend"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.whitespace_tokenize"], ["", "def", "tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\"Tokenizes a piece of text into its word pieces.\n\n        This uses a greedy longest-match-first algorithm to perform tokenization\n        using the given vocabulary.\n\n        For example:\n          input = \"unaffable\"\n          output = [\"un\", \"##aff\", \"##able\"]\n\n        Args:\n          text: A single token or whitespace separated tokens. This should have\n            already been passed through `BasicTokenizer`.\n\n        Returns:\n          A list of wordpiece tokens.\n        \"\"\"", "\n", "\n", "output_tokens", "=", "[", "]", "\n", "for", "token", "in", "whitespace_tokenize", "(", "text", ")", ":", "\n", "            ", "chars", "=", "list", "(", "token", ")", "\n", "if", "len", "(", "chars", ")", ">", "self", ".", "max_input_chars_per_word", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "continue", "\n", "\n", "", "is_bad", "=", "False", "\n", "start", "=", "0", "\n", "sub_tokens", "=", "[", "]", "\n", "while", "start", "<", "len", "(", "chars", ")", ":", "\n", "                ", "end", "=", "len", "(", "chars", ")", "\n", "cur_substr", "=", "None", "\n", "while", "start", "<", "end", ":", "\n", "                    ", "substr", "=", "\"\"", ".", "join", "(", "chars", "[", "start", ":", "end", "]", ")", "\n", "if", "start", ">", "0", ":", "\n", "                        ", "substr", "=", "\"##\"", "+", "substr", "\n", "", "if", "substr", "in", "self", ".", "vocab", ":", "\n", "                        ", "cur_substr", "=", "substr", "\n", "break", "\n", "", "end", "-=", "1", "\n", "", "if", "cur_substr", "is", "None", ":", "\n", "                    ", "is_bad", "=", "True", "\n", "break", "\n", "", "sub_tokens", ".", "append", "(", "cur_substr", ")", "\n", "start", "=", "end", "\n", "\n", "", "if", "is_bad", ":", "\n", "                ", "output_tokens", ".", "append", "(", "self", ".", "unk_token", ")", "\n", "", "else", ":", "\n", "                ", "output_tokens", ".", "extend", "(", "sub_tokens", ")", "\n", "", "", "return", "output_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.load_vocab": [[83, 92], ["collections.OrderedDict", "enumerate", "io.open", "reader.readlines", "token.rstrip.rstrip"], "function", ["None"], ["def", "load_vocab", "(", "vocab_file", ")", ":", "\n", "    ", "\"\"\"Loads a vocabulary file into a dictionary.\"\"\"", "\n", "vocab", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "with", "open", "(", "vocab_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "        ", "tokens", "=", "reader", ".", "readlines", "(", ")", "\n", "", "for", "index", ",", "token", "in", "enumerate", "(", "tokens", ")", ":", "\n", "        ", "token", "=", "token", ".", "rstrip", "(", "'\\n'", ")", "\n", "vocab", "[", "token", "]", "=", "index", "\n", "", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert.whitespace_tokenize": [[94, 101], ["text.strip.strip", "text.strip.split"], "function", ["None"], ["", "def", "whitespace_tokenize", "(", "text", ")", ":", "\n", "    ", "\"\"\"Runs basic whitespace cleaning and splitting on a piece of text.\"\"\"", "\n", "text", "=", "text", ".", "strip", "(", ")", "\n", "if", "not", "text", ":", "\n", "        ", "return", "[", "]", "\n", "", "tokens", "=", "text", ".", "split", "(", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_whitespace": [[420, 430], ["unicodedata.category"], "function", ["None"], ["", "", "def", "_is_whitespace", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a whitespace character.\"\"\"", "\n", "# \\t, \\n, and \\r are technically contorl characters but we treat them", "\n", "# as whitespace since they are generally considered as such.", "\n", "if", "char", "==", "\" \"", "or", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", "==", "\"Zs\"", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_control": [[432, 442], ["unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_control", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a control character.\"\"\"", "\n", "# These are technically control characters but we count them as whitespace", "\n", "# characters.", "\n", "if", "char", "==", "\"\\t\"", "or", "char", "==", "\"\\n\"", "or", "char", "==", "\"\\r\"", ":", "\n", "        ", "return", "False", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"C\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_bert._is_punctuation": [[444, 458], ["ord", "unicodedata.category", "unicodedata.category.startswith"], "function", ["None"], ["", "def", "_is_punctuation", "(", "char", ")", ":", "\n", "    ", "\"\"\"Checks whether `chars` is a punctuation character.\"\"\"", "\n", "cp", "=", "ord", "(", "char", ")", "\n", "# We treat all non-letter/number ASCII as punctuation.", "\n", "# Characters such as \"^\", \"$\", and \"`\" are not in the Unicode", "\n", "# Punctuation class but we treat them as punctuation anyways, for", "\n", "# consistency.", "\n", "if", "(", "(", "cp", ">=", "33", "and", "cp", "<=", "47", ")", "or", "(", "cp", ">=", "58", "and", "cp", "<=", "64", ")", "or", "\n", "(", "cp", ">=", "91", "and", "cp", "<=", "96", ")", "or", "(", "cp", ">=", "123", "and", "cp", "<=", "126", ")", ")", ":", "\n", "        ", "return", "True", "\n", "", "cat", "=", "unicodedata", ".", "category", "(", "char", ")", "\n", "if", "cat", ".", "startswith", "(", "\"P\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.__init__": [[32, 77], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ParameterList", "torch.ParameterList", "torch.ParameterList", "len", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "range", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "torch.Linear", "torch.Linear", "torch.Linear", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_layers.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.out_projs.append", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_token", ",", "d_embed", ",", "d_proj", ",", "cutoffs", ",", "div_val", "=", "1", ",", "\n", "keep_order", "=", "False", ")", ":", "\n", "        ", "super", "(", "ProjectedAdaptiveLogSoftmax", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_token", "=", "n_token", "\n", "self", ".", "d_embed", "=", "d_embed", "\n", "self", ".", "d_proj", "=", "d_proj", "\n", "\n", "self", ".", "cutoffs", "=", "cutoffs", "+", "[", "n_token", "]", "\n", "self", ".", "cutoff_ends", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "self", ".", "div_val", "=", "div_val", "\n", "\n", "self", ".", "shortlist_size", "=", "self", ".", "cutoffs", "[", "0", "]", "\n", "self", ".", "n_clusters", "=", "len", "(", "self", ".", "cutoffs", ")", "-", "1", "\n", "self", ".", "head_size", "=", "self", ".", "shortlist_size", "+", "self", ".", "n_clusters", "\n", "\n", "if", "self", ".", "n_clusters", ">", "0", ":", "\n", "            ", "self", ".", "cluster_weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ",", "self", ".", "d_embed", ")", ")", "\n", "self", ".", "cluster_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "self", ".", "n_clusters", ")", ")", "\n", "\n", "", "self", ".", "out_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "out_projs", "=", "nn", ".", "ParameterList", "(", ")", "\n", "\n", "if", "div_val", "==", "1", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "d_proj", "!=", "d_embed", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_embed", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "out_projs", ".", "append", "(", "None", ")", "\n", "\n", "", "", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_embed", ",", "n_token", ")", ")", "\n", "", "else", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "d_emb_i", "=", "d_embed", "//", "(", "div_val", "**", "i", ")", "\n", "\n", "self", ".", "out_projs", ".", "append", "(", "\n", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "d_proj", ",", "d_emb_i", ")", ")", "\n", ")", "\n", "\n", "self", ".", "out_layers", ".", "append", "(", "nn", ".", "Linear", "(", "d_emb_i", ",", "r_idx", "-", "l_idx", ")", ")", "\n", "\n", "", "", "self", ".", "keep_order", "=", "keep_order", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit": [[78, 91], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "proj.t().contiguous", "proj.t"], "methods", ["None"], ["", "def", "_compute_logit", "(", "self", ",", "hidden", ",", "weight", ",", "bias", ",", "proj", ")", ":", "\n", "        ", "if", "proj", "is", "None", ":", "\n", "            ", "logit", "=", "F", ".", "linear", "(", "hidden", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# if CUDA_MAJOR <= 9 and CUDA_MINOR <= 1:", "\n", "            ", "proj_hid", "=", "F", ".", "linear", "(", "hidden", ",", "proj", ".", "t", "(", ")", ".", "contiguous", "(", ")", ")", "\n", "logit", "=", "F", ".", "linear", "(", "proj_hid", ",", "weight", ",", "bias", "=", "bias", ")", "\n", "# else:", "\n", "#     logit = torch.einsum('bd,de,ev->bv', (hidden, proj, weight.t()))", "\n", "#     if bias is not None:", "\n", "#         logit = logit + bias", "\n", "\n", "", "return", "logit", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.forward": [[92, 196], ["labels.view.view.view", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "hidden.size", "labels.view.view.size", "RuntimeError", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "len", "weights.append", "biases.append", "hidden.new_empty", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.log_softmax().gather().squeeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "mask_i.nonzero().squeeze", "torch.log_softmax.index_select", "hidden.index_select", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "head_logprob.index_select.gather().squeeze.size", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "mask_i.nonzero().squeeze.numel", "labels.view.view.index_select", "F.log_softmax.index_select.gather().squeeze", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "torch.zeros_like.index_copy_", "out[].copy_", "torch.log_softmax().gather", "torch.log_softmax().gather", "torch.log_softmax().gather", "mask_i.nonzero", "torch.log_softmax.gather().squeeze", "hasattr", "labels.view.view.unsqueeze", "F.log_softmax.index_select.gather", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.gather", "head_logprob.index_select.gather().squeeze.size"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "forward", "(", "self", ",", "hidden", ",", "labels", "=", "None", ",", "keep_order", "=", "False", ")", ":", "\n", "        ", "'''\n            Params:\n                hidden :: [len*bsz x d_proj]\n                labels :: [len*bsz]\n            Return:\n                if labels is None:\n                    out :: [len*bsz] Negative log likelihood\n                else:\n                    out :: [len*bsz x n_tokens] log probabilities of tokens over the vocabulary\n            We could replace this implementation by the native PyTorch one\n            if their's had an option to set bias on all clusters in the native one.\n            here: https://github.com/pytorch/pytorch/blob/dbe6a7a9ff1a364a8706bf5df58a1ca96d2fd9da/torch/nn/modules/adaptive.py#L138\n        '''", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "labels", "=", "labels", ".", "view", "(", "-", "1", ")", "\n", "if", "hidden", ".", "size", "(", "0", ")", "!=", "labels", ".", "size", "(", "0", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Input and labels should have the same size '", "\n", "'in the batch dimension.'", ")", "\n", "\n", "", "", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                ", "out", "=", "-", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", ".", "gather", "(", "1", ",", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "if", "labels", "is", "None", ":", "\n", "                ", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "torch", ".", "zeros_like", "(", "labels", ",", "dtype", "=", "hidden", ".", "dtype", ",", "device", "=", "hidden", ".", "device", ")", "\n", "\n", "", "offset", "=", "0", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "l_idx", ",", "r_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "mask_i", "=", "(", "labels", ">=", "l_idx", ")", "&", "(", "labels", "<", "r_idx", ")", "\n", "indices_i", "=", "mask_i", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", "\n", "\n", "if", "indices_i", ".", "numel", "(", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "\n", "", "target_i", "=", "labels", ".", "index_select", "(", "0", ",", "indices_i", ")", "-", "l_idx", "\n", "head_logprob_i", "=", "head_logprob", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "hidden_i", "=", "hidden", ".", "index_select", "(", "0", ",", "indices_i", ")", "\n", "", "else", ":", "\n", "                    ", "hidden_i", "=", "hidden", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden_i", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "cluster_prob_idx", "=", "self", ".", "cutoffs", "[", "0", "]", "+", "i", "-", "1", "# No probability for the head cluster", "\n", "if", "labels", "is", "not", "None", ":", "\n", "                        ", "logprob_i", "=", "head_logprob_i", "[", ":", ",", "cluster_prob_idx", "]", "+", "tail_logprob_i", ".", "gather", "(", "1", ",", "target_i", "[", ":", ",", "None", "]", ")", ".", "squeeze", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "logprob_i", "=", "head_logprob", "[", ":", ",", "cluster_prob_idx", ",", "None", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "l_idx", ":", "r_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "if", "labels", "is", "not", "None", ":", "\n", "                    ", "if", "(", "hasattr", "(", "self", ",", "'keep_order'", ")", "and", "self", ".", "keep_order", ")", "or", "keep_order", ":", "\n", "                        ", "out", ".", "index_copy_", "(", "0", ",", "indices_i", ",", "-", "logprob_i", ")", "\n", "", "else", ":", "\n", "                        ", "out", "[", "offset", ":", "offset", "+", "logprob_i", ".", "size", "(", "0", ")", "]", ".", "copy_", "(", "-", "logprob_i", ")", "\n", "", "offset", "+=", "logprob_i", ".", "size", "(", "0", ")", "\n", "\n", "", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob": [[198, 258], ["modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "hidden.new_empty", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "range", "len", "weights.append", "biases.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.size", "len", "modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax._compute_logit"], ["", "def", "log_prob", "(", "self", ",", "hidden", ")", ":", "\n", "        ", "r\"\"\" Computes log probabilities for all :math:`n\\_classes`\n        From: https://github.com/pytorch/pytorch/blob/master/torch/nn/modules/adaptive.py\n        Args:\n            hidden (Tensor): a minibatch of examples\n        Returns:\n            log-probabilities of for each class :math:`c`\n            in range :math:`0 <= c <= n\\_classes`, where :math:`n\\_classes` is a\n            parameter passed to ``AdaptiveLogSoftmaxWithLoss`` constructor.\n        Shape:\n            - Input: :math:`(N, in\\_features)`\n            - Output: :math:`(N, n\\_classes)`\n        \"\"\"", "\n", "if", "self", ".", "n_clusters", "==", "0", ":", "\n", "            ", "logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "self", ".", "out_layers", "[", "0", "]", ".", "weight", ",", "\n", "self", ".", "out_layers", "[", "0", "]", ".", "bias", ",", "self", ".", "out_projs", "[", "0", "]", ")", "\n", "return", "F", ".", "log_softmax", "(", "logit", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "# construct weights and biases", "\n", "            ", "weights", ",", "biases", "=", "[", "]", ",", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoffs", ")", ")", ":", "\n", "                ", "if", "self", ".", "div_val", "==", "1", ":", "\n", "                    ", "l_idx", ",", "r_idx", "=", "self", ".", "cutoff_ends", "[", "i", "]", ",", "self", ".", "cutoff_ends", "[", "i", "+", "1", "]", "\n", "weight_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "weight", "[", "l_idx", ":", "r_idx", "]", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "0", "]", ".", "bias", "[", "l_idx", ":", "r_idx", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "weight", "\n", "bias_i", "=", "self", ".", "out_layers", "[", "i", "]", ".", "bias", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "weight_i", "=", "torch", ".", "cat", "(", "\n", "[", "weight_i", ",", "self", ".", "cluster_weight", "]", ",", "dim", "=", "0", ")", "\n", "bias_i", "=", "torch", ".", "cat", "(", "\n", "[", "bias_i", ",", "self", ".", "cluster_bias", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "weights", ".", "append", "(", "weight_i", ")", "\n", "biases", ".", "append", "(", "bias_i", ")", "\n", "\n", "", "head_weight", ",", "head_bias", ",", "head_proj", "=", "weights", "[", "0", "]", ",", "biases", "[", "0", "]", ",", "self", ".", "out_projs", "[", "0", "]", "\n", "head_logit", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "head_weight", ",", "head_bias", ",", "head_proj", ")", "\n", "\n", "out", "=", "hidden", ".", "new_empty", "(", "(", "head_logit", ".", "size", "(", "0", ")", ",", "self", ".", "n_token", ")", ")", "\n", "head_logprob", "=", "F", ".", "log_softmax", "(", "head_logit", ",", "dim", "=", "1", ")", "\n", "\n", "cutoff_values", "=", "[", "0", "]", "+", "self", ".", "cutoffs", "\n", "for", "i", "in", "range", "(", "len", "(", "cutoff_values", ")", "-", "1", ")", ":", "\n", "                ", "start_idx", ",", "stop_idx", "=", "cutoff_values", "[", "i", "]", ",", "cutoff_values", "[", "i", "+", "1", "]", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "out", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "=", "head_logprob", "[", ":", ",", ":", "self", ".", "cutoffs", "[", "0", "]", "]", "\n", "", "else", ":", "\n", "                    ", "weight_i", ",", "bias_i", ",", "proj_i", "=", "weights", "[", "i", "]", ",", "biases", "[", "i", "]", ",", "self", ".", "out_projs", "[", "i", "]", "\n", "\n", "tail_logit_i", "=", "self", ".", "_compute_logit", "(", "hidden", ",", "weight_i", ",", "bias_i", ",", "proj_i", ")", "\n", "tail_logprob_i", "=", "F", ".", "log_softmax", "(", "tail_logit_i", ",", "dim", "=", "1", ")", "\n", "\n", "logprob_i", "=", "head_logprob", "[", ":", ",", "-", "i", "]", "+", "tail_logprob_i", "\n", "out", "[", ":", ",", "start_idx", ",", "stop_idx", "]", "=", "logprob_i", "\n", "\n", "", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.LogUniformSampler.__init__": [[261, 279], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange().log_", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double().log1p_", "modeling_transfo_xl_utilities.LogUniformSampler.dist.double"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "range_max", ",", "n_sample", ")", ":", "\n", "        ", "\"\"\"\n        Reference : https://github.com/tensorflow/tensorflow/blob/r1.10/tensorflow/python/ops/candidate_sampling_ops.py\n            `P(class) = (log(class + 2) - log(class + 1)) / log(range_max + 1)`\n\n        expected count can be approximated by 1 - (1 - p)^n\n        and we use a numerically stable version -expm1(num_tries * log1p(-p))\n\n        Our implementation fixes num_tries at 2 * n_sample, and the actual #samples will vary from run to run\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "range_max", "=", "range_max", "\n", "log_indices", "=", "torch", ".", "arange", "(", "1.", ",", "range_max", "+", "2.", ",", "1.", ")", ".", "log_", "(", ")", "\n", "self", ".", "dist", "=", "(", "log_indices", "[", "1", ":", "]", "-", "log_indices", "[", ":", "-", "1", "]", ")", "/", "log_indices", "[", "-", "1", "]", "\n", "\n", "self", ".", "log_q", "=", "(", "-", "(", "-", "self", ".", "dist", ".", "double", "(", ")", ".", "log1p_", "(", ")", "*", "2", "*", "n_sample", ")", ".", "expm1_", "(", ")", ")", ".", "log_", "(", ")", ".", "float", "(", ")", "\n", "\n", "", "self", ".", "n_sample", "=", "n_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample": [[280, 300], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "torch.multinomial().unique", "neg_samples.to.to.to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "modeling_transfo_xl_utilities.LogUniformSampler.log_q[].to", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n            labels: [b1, b2]\n        Return\n            true_log_probs: [b1, b2]\n            samp_log_probs: [n_sample]\n            neg_samples: [n_sample]\n        \"\"\"", "\n", "\n", "# neg_samples = torch.empty(0).long()", "\n", "n_sample", "=", "self", ".", "n_sample", "\n", "n_tries", "=", "2", "*", "n_sample", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "neg_samples", "=", "torch", ".", "multinomial", "(", "self", ".", "dist", ",", "n_tries", ",", "replacement", "=", "True", ")", ".", "unique", "(", ")", "\n", "device", "=", "labels", ".", "device", "\n", "neg_samples", "=", "neg_samples", ".", "to", "(", "device", ")", "\n", "true_log_probs", "=", "self", ".", "log_q", "[", "labels", "]", ".", "to", "(", "device", ")", "\n", "samp_log_probs", "=", "self", ".", "log_q", "[", "neg_samples", "]", ".", "to", "(", "device", ")", "\n", "return", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.sample_logits": [[301, 333], ["sampler.sample", "neg_samples.size", "torch.cat", "torch.cat", "torch.cat", "embedding", "all_w[].view", "all_w[].view", "all_b[].view", "sample_logits.masked_fill_", "torch.cat", "torch.cat", "torch.cat", "labels.size", "labels.size", "labels.view", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.LogUniformSampler.sample"], ["", "", "", "def", "sample_logits", "(", "embedding", ",", "bias", ",", "labels", ",", "inputs", ",", "sampler", ")", ":", "\n", "    ", "\"\"\"\n        embedding: an nn.Embedding layer\n        bias: [n_vocab]\n        labels: [b1, b2]\n        inputs: [b1, b2, n_emb]\n        sampler: you may use a LogUniformSampler\n    Return\n        logits: [b1, b2, 1 + n_sample]\n    \"\"\"", "\n", "true_log_probs", ",", "samp_log_probs", ",", "neg_samples", "=", "sampler", ".", "sample", "(", "labels", ")", "\n", "n_sample", "=", "neg_samples", ".", "size", "(", "0", ")", "\n", "b1", ",", "b2", "=", "labels", ".", "size", "(", "0", ")", ",", "labels", ".", "size", "(", "1", ")", "\n", "all_ids", "=", "torch", ".", "cat", "(", "[", "labels", ".", "view", "(", "-", "1", ")", ",", "neg_samples", "]", ")", "\n", "all_w", "=", "embedding", "(", "all_ids", ")", "\n", "true_w", "=", "all_w", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ",", "-", "1", ")", "\n", "sample_w", "=", "all_w", "[", "-", "n_sample", ":", "]", ".", "view", "(", "n_sample", ",", "-", "1", ")", "\n", "\n", "all_b", "=", "bias", "[", "all_ids", "]", "\n", "true_b", "=", "all_b", "[", ":", "-", "n_sample", "]", ".", "view", "(", "b1", ",", "b2", ")", "\n", "sample_b", "=", "all_b", "[", "-", "n_sample", ":", "]", "\n", "\n", "hit", "=", "(", "labels", "[", ":", ",", ":", ",", "None", "]", "==", "neg_samples", ")", ".", "detach", "(", ")", "\n", "\n", "true_logits", "=", "torch", ".", "einsum", "(", "'ijk,ijk->ij'", ",", "\n", "[", "true_w", ",", "inputs", "]", ")", "+", "true_b", "-", "true_log_probs", "\n", "sample_logits", "=", "torch", ".", "einsum", "(", "'lk,ijk->ijl'", ",", "\n", "[", "sample_w", ",", "inputs", "]", ")", "+", "sample_b", "-", "samp_log_probs", "\n", "sample_logits", ".", "masked_fill_", "(", "hit", ",", "-", "1e30", ")", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "true_logits", "[", ":", ",", ":", ",", "None", "]", ",", "sample_logits", "]", ",", "-", "1", ")", "\n", "\n", "return", "logits", "\n", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.url_to_filename": [[53, 69], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode"], ["def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the url's, delimited\n    by a period.\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.filename_to_url": [[71, 95], ["os.path.join", "isinstance", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["None"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path": [[97, 128], ["urlparse", "isinstance", "str", "isinstance", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.get_from_cache"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    Args:\n        cache_dir: specify a cache directory to save the file to (overwrite the default cache dir).\n        force_download: if True, re-dowload the file even if it's already cached in the cache dir.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.split_s3_path": [[130, 141], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.s3_request": [[143, 160], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.s3_etag": [[162, 169], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object", "botocore.config.Config"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.s3_get": [[171, 177], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "botocore.config.Config", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ",", "config", "=", "Config", "(", "proxies", "=", "proxies", ")", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.http_get": [[179, 189], ["requests.get", "requests.get.headers.get", "tqdm.tqdm", "requests.get.iter_content", "tqdm.tqdm.close", "int", "tqdm.tqdm.update", "temp_file.write", "len"], "function", ["None"], ["", "def", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ",", "proxies", "=", "proxies", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.get_from_cache": [[191, 267], ["url.startswith", "file_utils.url_to_filename", "os.path.join", "isinstance", "str", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "response.headers.get.decode", "fnmatch.filter", "list", "isinstance", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "os.path.exists", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "isinstance", "unicode", "s.endswith"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.url_to_filename", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.s3_etag", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.s3_get", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.http_get"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ",", "force_download", "=", "False", ",", "proxies", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_TRANSFORMERS_CACHE", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "3", "and", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "not", "isinstance", "(", "cache_dir", ",", "str", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ",", "proxies", "=", "proxies", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "EnvironmentError", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "etag", "is", "not", "None", ":", "\n", "        ", "etag", "=", "etag", ".", "decode", "(", "'utf-8'", ")", "\n", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "or", "force_download", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache or force_download set to True, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ",", "proxies", "=", "proxies", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "output_string", ",", "str", ")", ":", "\n", "                    ", "output_string", "=", "unicode", "(", "output_string", ",", "'utf-8'", ")", "# The beauty of python 2", "\n", "", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Config.__init__": [[129, 200], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "50257", ",", "\n", "n_positions", "=", "1024", ",", "\n", "n_ctx", "=", "1024", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs GPT2Config.\n\n        Args:\n            vocab_size_or_config_json_file: Vocabulary size of `inputs_ids` in `GPT2Model` or a configuration json file.\n            n_positions: Number of positional embeddings.\n            n_ctx: Size of the causal mask (usually same as n_positions).\n            n_embd: Dimensionality of the embeddings and hidden states.\n            n_layer: Number of hidden layers in the Transformer encoder.\n            n_head: Number of attention heads for each attention layer in\n                the Transformer encoder.\n            layer_norm_epsilon: epsilon to use in the layer norm layers\n            resid_pdrop: The dropout probabilitiy for all fully connected\n                layers in the embeddings, encoder, and pooler.\n            attn_pdrop: The dropout ratio for the attention\n                probabilities.\n            embd_pdrop: The dropout ratio for the embeddings.\n            initializer_range: The sttdev of the truncated_normal_initializer for\n                initializing all weight matrices.\n        \"\"\"", "\n", "super", "(", "GPT2Config", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Config.max_position_embeddings": [[203, 206], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Config.hidden_size": [[207, 210], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Config.num_attention_heads": [[211, 214], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Config.num_hidden_layers": [[215, 218], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention.__init__": [[222, 240], ["torch.Module.__init__", "modeling_vlm.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "bottleneck", "=", "0", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "bottleneck", "=", "bottleneck", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention.prune_heads": [[241, 262], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_vlm.Attention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention._attn": [[263, 283], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_vlm.Attention.attn_dropout", "modeling_vlm.Attention.size", "modeling_vlm.Attention.size", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "", "nd", ",", "ns", "=", "w", ".", "size", "(", "-", "2", ")", ",", "w", ".", "size", "(", "-", "1", ")", "\n", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", "ns", "-", "nd", ":", "ns", ",", ":", "ns", "]", "\n", "w", "=", "w", "*", "b", "-", "1e4", "*", "(", "1", "-", "b", ")", "\n", "\n", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention.merge_heads": [[284, 288], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention.split_heads": [[289, 296], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "# (batch, head, head_features, seq_length)", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "# (batch, head, seq_length, head_features)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Attention.forward": [[297, 319], ["modeling_vlm.Attention.c_attn", "modeling_vlm.Attention.split", "modeling_vlm.Attention.split_heads", "modeling_vlm.Attention.split_heads", "modeling_vlm.Attention.split_heads", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "modeling_vlm.Attention._attn", "modeling_vlm.Attention.merge_heads", "modeling_vlm.Attention.c_proj", "modeling_vlm.Attention.resid_dropout", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "layer_past[].transpose", "torch.cat.transpose", "torch.cat.transpose", "torch.cat.transpose"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "if", "layer_past", "is", "not", "None", ":", "\n", "            ", "past_key", ",", "past_value", "=", "layer_past", "[", "0", "]", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "layer_past", "[", "1", "]", "# transpose back cf below", "\n", "key", "=", "torch", ".", "cat", "(", "(", "past_key", ",", "key", ")", ",", "dim", "=", "-", "1", ")", "\n", "value", "=", "torch", ".", "cat", "(", "(", "past_value", ",", "value", ")", ",", "dim", "=", "-", "2", ")", "\n", "", "present", "=", "torch", ".", "stack", "(", "(", "key", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ",", "value", ")", ")", "# transpose to have same shapes for stacking", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", ",", "present", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.MLP.__init__": [[322, 329], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "gelu", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.MLP.forward": [[330, 334], ["modeling_vlm.MLP.act", "modeling_vlm.MLP.c_proj", "modeling_vlm.MLP.dropout", "modeling_vlm.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Block.__init__": [[337, 346], ["torch.Module.__init__", "modeling_bert.BertLayerNorm", "modeling_vlm.Attention", "modeling_bert.BertLayerNorm", "modeling_vlm.MLP", "modeling_vlm.MixAdapter"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ",", "bottleneck_map", "=", "None", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "self", ".", "bottleneck_map", "=", "bottleneck_map", "\n", "self", ".", "adapter_block", "=", "MixAdapter", "(", "config", ",", "bottleneck_map", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ",", "task_id", "=", "-", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Block.forward": [[346, 356], ["modeling_vlm.Block.attn", "modeling_vlm.Block.mlp", "modeling_vlm.Block.adapter_block", "modeling_vlm.Block.ln_1", "modeling_vlm.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "layer_past", "=", "None", ",", "head_mask", "=", "None", ",", "task_id", "=", "-", "1", ")", ":", "\n", "        ", "output_attn", "=", "self", ".", "attn", "(", "self", ".", "ln_1", "(", "x", ")", ",", "layer_past", "=", "layer_past", ",", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "output_attn", "[", "0", "]", "# output_attn: a, present, (attentions)", "\n", "\n", "x", "=", "x", "+", "a", "\n", "m", "=", "self", ".", "mlp", "(", "self", ".", "ln_2", "(", "x", ")", ")", "\n", "x", "=", "x", "+", "m", "\n", "x", "=", "self", ".", "adapter_block", "(", "x", ",", "task_id", ")", "\n", "outputs", "=", "[", "x", "]", "+", "output_attn", "[", "1", ":", "]", "\n", "return", "outputs", "# x, present, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Adapter.__init__": [[360, 367], ["torch.Module.__init__", "modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck", ")", ":", "\n", "        ", "super", "(", "Adapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "project_down", "=", "nn", ".", "Linear", "(", "nx", ",", "bottleneck", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "project_up", "=", "nn", ".", "Linear", "(", "bottleneck", ",", "nx", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.Adapter.forward": [[367, 374], ["modeling_vlm.Adapter.ln", "modeling_vlm.Adapter.project_down", "modeling_vlm.Adapter.relu", "modeling_vlm.Adapter.project_up"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_", "=", "self", ".", "ln", "(", "x", ")", "\n", "x_", "=", "self", ".", "project_down", "(", "x_", ")", "\n", "x_", "=", "self", ".", "relu", "(", "x_", ")", "\n", "x_", "=", "self", ".", "project_up", "(", "x_", ")", "\n", "x", "=", "x", "+", "x_", "#residual connection", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.MixAdapter.__init__": [[376, 380], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_vlm.Adapter", "bottleneck_map.values"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "bottleneck_map", ")", ":", "\n", "        ", "super", "(", "MixAdapter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#bottleneck_map = {\"mt\":300, \"summarization\":100, \"dialogue\":100, \"qa\": 300, \"nlg\": 10}", "\n", "self", ".", "mixadapter", "=", "nn", ".", "ModuleList", "(", "[", "Adapter", "(", "config", ",", "bottleneck", ")", "for", "bottleneck", "in", "bottleneck_map", ".", "values", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.MixAdapter.forward": [[381, 386], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "task_id", ")", ":", "\n", "        ", "if", "task_id", "==", "-", "1", ":", "\n", "            ", "return", "x", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "mixadapter", "[", "task_id", "]", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2PreTrainedModel.__init__": [[397, 399], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "GPT2PreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2PreTrainedModel._init_weights": [[400, 412], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Model.__init__": [[488, 500], ["modeling_vlm.GPT2PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "modeling_bert.BertLayerNorm", "modeling_vlm.GPT2Model.init_weights", "modeling_vlm.Block", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ",", "bottleneck_map", "=", "None", ")", ":", "\n", "        ", "super", "(", "GPT2Model", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "wte", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "wpe", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ",", "bottleneck_map", "=", "bottleneck_map", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "self", ".", "ln_f", "=", "LayerNorm", "(", "config", ".", "n_embd", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Model._resize_token_embeddings": [[501, 504], ["modeling_vlm.GPT2Model._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "self", ".", "wte", "=", "self", ".", "_get_resized_embeddings", "(", "self", ".", "wte", ",", "new_num_tokens", ")", "\n", "return", "self", ".", "wte", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Model._prune_heads": [[505, 511], ["heads_to_prune.items", "modeling_vlm.GPT2Model.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.GPT2Model.forward": [[512, 582], ["input_ids.view.view.size", "input_ids.view.view.view", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.view", "modeling_vlm.GPT2Model.wte", "modeling_vlm.GPT2Model.wpe", "modeling_vlm.GPT2Model.drop", "enumerate", "modeling_vlm.GPT2Model.ln_f", "hidden_states.view.view.view", "[].size", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.view.view.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.size", "token_type_ids.view.view.view", "modeling_vlm.GPT2Model.wte", "zip", "block", "tuple", "len", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "token_type_ids.view.view.size", "hidden_states.view.view.size", "tuple.append", "input_ids.view.view.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "t.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "hidden_states.view.view.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_vlm.GPT2Model.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "past", "=", "None", ",", "head_mask", "=", "None", ",", "task_id", "=", "-", "1", ")", ":", "\n", "        ", "if", "past", "is", "None", ":", "\n", "            ", "past_length", "=", "0", "\n", "past", "=", "[", "None", "]", "*", "len", "(", "self", ".", "h", ")", "\n", "", "else", ":", "\n", "            ", "past_length", "=", "past", "[", "0", "]", "[", "0", "]", ".", "size", "(", "-", "2", ")", "\n", "", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "past_length", ",", "input_ids", ".", "size", "(", "-", "1", ")", "+", "past_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "inputs_embeds", "=", "self", ".", "wte", "(", "input_ids", ")", "\n", "position_embeds", "=", "self", ".", "wpe", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "token_type_embeds", "=", "self", ".", "wte", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "presents", "=", "(", ")", "\n", "all_attentions", "=", "[", "]", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "(", "block", ",", "layer_past", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "h", ",", "past", ")", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "layer_past", ",", "head_mask", "[", "i", "]", ",", "task_id", ")", "\n", "hidden_states", ",", "present", "=", "outputs", "[", ":", "2", "]", "\n", "presents", "=", "presents", "+", "(", "present", ",", ")", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", ".", "append", "(", "outputs", "[", "2", "]", ")", "\n", "\n", "", "", "hidden_states", "=", "self", ".", "ln_f", "(", "hidden_states", ")", "\n", "\n", "hidden_states", "=", "hidden_states", ".", "view", "(", "*", "output_shape", ")", "\n", "# Add last hidden state", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", "presents", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "# let the number of heads free (-1) so we can extract attention even after head pruning", "\n", "            ", "attention_output_shape", "=", "input_shape", "[", ":", "-", "1", "]", "+", "(", "-", "1", ",", ")", "+", "all_attentions", "[", "0", "]", ".", "shape", "[", "-", "2", ":", "]", "\n", "all_attentions", "=", "tuple", "(", "t", ".", "view", "(", "*", "attention_output_shape", ")", "for", "t", "in", "all_attentions", ")", "\n", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.VLM.__init__": [[625, 632], ["modeling_vlm.GPT2PreTrainedModel.__init__", "modeling_vlm.GPT2Model", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "modeling_vlm.VLM.init_weights", "modeling_vlm.VLM.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "VLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "GPT2Model", "(", "config", ",", "model_kwargs", "[", "\"bottleneck_map\"", "]", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "p_gen_linear", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "1", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "", "def", "tie_weights", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.VLM.tie_weights": [[632, 638], ["modeling_vlm.VLM._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ",", "\n", "self", ".", "transformer", ".", "wte", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.VLM.forward": [[639, 689], ["modeling_vlm.VLM.transformer", "modeling_vlm.VLM.lm_head", "modeling_vlm.VLM.p_gen_linear", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "vocab_dist_.squeeze().scatter_add().unsqueeze", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "labels[].contiguous", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.softmax", "torch.softmax", "torch.softmax", "dist[].contiguous", "torch.NLLLoss", "torch.NLLLoss", "torch.NLLLoss", "lm_logits[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "lm_logits[].contiguous.view", "labels[].contiguous.view", "vocab_dist_.squeeze().scatter_add", "lm_logits[].contiguous.size", "input_ids.repeat", "attn_dist_.squeeze", "vocab_dist_.squeeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "labels", "=", "None", ",", "past", "=", "None", ",", "head_mask", "=", "None", ",", "self_copy", "=", "False", ",", "task_id", "=", "-", "1", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "past", "=", "past", ",", "head_mask", "=", "head_mask", ",", "task_id", "=", "task_id", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "#print(lm_logits.shape)", "\n", "if", "self_copy", ":", "\n", "            ", "p_gen", "=", "self", ".", "p_gen_linear", "(", "hidden_states", ")", "\n", "p_gen", "=", "torch", ".", "sigmoid", "(", "p_gen", ")", "\n", "vocab_dist", "=", "F", ".", "softmax", "(", "lm_logits", ",", "dim", "=", "-", "1", ")", "+", "0.00001", "# log(softmax(x)) is numerically unstable", "\n", "vocab_dist_", "=", "p_gen", "*", "vocab_dist", "\n", "#print(p_gen)", "\n", "#print(p_gen.shape, vocab_dist.shape)", "\n", "\n", "#print(transformer_outputs[-1][-1].shape)", "\n", "#last head for copy", "\n", "attn_dist", "=", "transformer_outputs", "[", "-", "1", "]", "[", "-", "1", "]", "[", ":", ",", ":", ",", "-", "1", "]", "#(batch_size, num_choices,  num_heads, sequence_length, sequence_length)", "\n", "#attn_dist = F.softmax(attn_dist, dim=-1)", "\n", "\n", "attn_dist_", "=", "(", "1", "-", "p_gen", ")", "*", "attn_dist", "\n", "#print(vocab_dist_.squeeze(1).shape, input_ids.repeat(1,attn_dist_.shape[-2], 1).shape, attn_dist_.squeeze(1).shape)", "\n", "\n", "dist", "=", "vocab_dist_", ".", "squeeze", "(", "1", ")", ".", "scatter_add", "(", "2", ",", "input_ids", ".", "repeat", "(", "1", ",", "attn_dist_", ".", "shape", "[", "-", "2", "]", ",", "1", ")", ",", "attn_dist_", ".", "squeeze", "(", "1", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# print(dist)", "\n", "# exit(1)", "\n", "#print(dist)", "\n", "dist", "=", "torch", ".", "log", "(", "dist", ")", "\n", "\n", "outputs", "=", "(", "dist", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "", "else", ":", "\n", "            ", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "\n", "", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "if", "self_copy", ":", "\n", "                ", "shift_logits", "=", "dist", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "nn", ".", "NLLLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "# Flatten the tokens", "\n", "", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "# print(loss)", "\n", "# exit(1)", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits(dist if copy), presents, (all hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.load_tf_weights_in_gpt2": [[49, 101], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "logger.error", "tf.train.load_variable.squeeze", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "gpt2_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ".", "squeeze", "(", ")", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'w'", "or", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'wpe'", "or", "l", "[", "0", "]", "==", "'wte'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.gelu": [[103, 105], ["torch.tanh", "torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoConfig.__init__": [[57, 59], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoConfig is designed to be instantiated \"", "\n", "\"using the `AutoConfig.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoConfig.from_pretrained": [[61, 138], ["ValueError", "modeling_distilbert.DistilBertConfig.from_pretrained", "modeling_roberta.RobertaConfig.from_pretrained", "modeling_bert.BertConfig.from_pretrained", "modeling_openai.OpenAIGPTConfig.from_pretrained", "modeling_gpt2.GPT2Config.from_pretrained", "modeling_transfo_xl.TransfoXLConfig.from_pretrained", "modeling_xlnet.XLNetConfig.from_pretrained", "modeling_xlm.XLMConfig.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the configuration classes of the library\n        from a pre-trained model configuration.\n\n        The configuration class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertConfig (DistilBERT model)\n            - contains `bert`: BertConfig (Bert model)\n            - contains `openai-gpt`: OpenAIGPTConfig (OpenAI GPT model)\n            - contains `gpt2`: GPT2Config (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLConfig (Transformer-XL model)\n            - contains `xlnet`: XLNetConfig (XLNet model)\n            - contains `xlm`: XLMConfig (XLM model)\n            - contains `roberta`: RobertaConfig (RoBERTa model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~pytorch_transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            config = AutoConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = AutoConfig.from_pretrained('./test/bert_saved_model/my_configuration.json')\n            config = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = AutoConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Config", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMConfig", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModel.__init__": [[163, 165], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModel is designed to be instantiated \"", "\n", "\"using the `AutoModel.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModel.from_pretrained": [[167, 259], ["ValueError", "modeling_distilbert.DistilBertModel.from_pretrained", "modeling_roberta.RobertaModel.from_pretrained", "modeling_bert.BertModel.from_pretrained", "modeling_openai.OpenAIGPTModel.from_pretrained", "modeling_gpt2.GPT2Model.from_pretrained", "modeling_transfo_xl.TransfoXLModel.from_pretrained", "modeling_xlnet.XLNetModel.from_pretrained", "modeling_xlm.XLMModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the base model classes of the library\n        from a pre-trained model configuration.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertModel (DistilBERT model)\n            - contains `roberta`: RobertaModel (RoBERTa model)\n            - contains `bert`: BertModel (Bert model)\n            - contains `openai-gpt`: OpenAIGPTModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2Model (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLModel (Transformer-XL model)\n            - contains `xlnet`: XLNetModel (XLNet model)\n            - contains `xlm`: XLMModel (XLM model)\n\n            The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n            To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~pytorch_transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and :func:`~pytorch_transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~pytorch_transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModel.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModel.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Model", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelWithLMHead.__init__": [[284, 286], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelWithLMHead.from_pretrained": [[288, 383], ["ValueError", "modeling_distilbert.DistilBertForMaskedLM.from_pretrained", "modeling_roberta.RobertaForMaskedLM.from_pretrained", "modeling_bert.BertForMaskedLM.from_pretrained", "modeling_openai.OpenAIGPTLMHeadModel.from_pretrained", "modeling_gpt2.GPT2LMHeadModel.from_pretrained", "modeling_transfo_xl.TransfoXLLMHeadModel.from_pretrained", "modeling_xlnet.XLNetLMHeadModel.from_pretrained", "modeling_xlm.XLMWithLMHeadModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the language modeling model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForMaskedLM (DistilBERT model)\n            - contains `roberta`: RobertaForMaskedLM (RoBERTa model)\n            - contains `bert`: BertForMaskedLM (Bert model)\n            - contains `openai-gpt`: OpenAIGPTLMHeadModel (OpenAI GPT model)\n            - contains `gpt2`: GPT2LMHeadModel (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLLMHeadModel (Transformer-XL model)\n            - contains `xlnet`: XLNetLMHeadModel (XLNet model)\n            - contains `xlm`: XLMWithLMHeadModel (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~pytorch_transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and :func:`~pytorch_transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~pytorch_transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelWithLMHead.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelWithLMHead.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelWithLMHead.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForMaskedLM", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2LMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMWithLMHeadModel", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelForSequenceClassification.__init__": [[405, 407], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelForSequenceClassification.from_pretrained": [[409, 494], ["ValueError", "modeling_distilbert.DistilBertForSequenceClassification.from_pretrained", "modeling_roberta.RobertaForSequenceClassification.from_pretrained", "modeling_bert.BertForSequenceClassification.from_pretrained", "modeling_xlnet.XLNetForSequenceClassification.from_pretrained", "modeling_xlm.XLMForSequenceClassification.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the sequence classification model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForSequenceClassification (DistilBERT model)\n            - contains `roberta`: RobertaForSequenceClassification (RoBERTa model)\n            - contains `bert`: BertForSequenceClassification (Bert model)\n            - contains `xlnet`: XLNetForSequenceClassification (XLNet model)\n            - contains `xlm`: XLMForSequenceClassification (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~pytorch_transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and :func:`~pytorch_transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~pytorch_transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForSequenceClassification.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForSequenceClassification.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForSequenceClassification.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForSequenceClassification", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelForQuestionAnswering.__init__": [[515, 517], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoModelWithLMHead is designed to be instantiated \"", "\n", "\"using the `AutoModelWithLMHead.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_auto.AutoModelForQuestionAnswering.from_pretrained": [[519, 601], ["ValueError", "modeling_distilbert.DistilBertForQuestionAnswering.from_pretrained", "modeling_bert.BertForQuestionAnswering.from_pretrained", "modeling_xlnet.XLNetForQuestionAnswering.from_pretrained", "modeling_xlm.XLMForQuestionAnswering.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiates one of the question answering model classes of the library\n        from a pre-trained model configuration.\n\n        The `from_pretrained()` method takes care of returning the correct model class instance\n        using pattern matching on the `pretrained_model_name_or_path` string.\n\n        The model class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertForQuestionAnswering (DistilBERT model)\n            - contains `bert`: BertForQuestionAnswering (Bert model)\n            - contains `xlnet`: XLNetForQuestionAnswering (XLNet model)\n            - contains `xlm`: XLMForQuestionAnswering (XLM model)\n\n        The model is set in evaluation mode by default using `model.eval()` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with `model.train()`\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~pytorch_transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and :func:`~pytorch_transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~pytorch_transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = AutoModelForQuestionAnswering.from_pretrained('./test/bert_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = AutoModelForQuestionAnswering.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = AutoConfig.from_json_file('./tf_model/bert_tf_model_config.json')\n            model = AutoModelForQuestionAnswering.from_pretrained('./tf_model/bert_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMForQuestionAnswering", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'xlnet', 'xlm'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_xlnet_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch": [[46, 73], ["pytorch_transformers.modeling_xlnet.XLNetConfig.from_json_file", "pytorch_transformers.modeling_xlnet.load_tf_weights_in_xlnet", "os.path.join", "os.path.join", "print", "torch.save", "print", "finetuning_task.lower", "print", "pytorch_transformers.modeling_xlnet.XLNetForSequenceClassification", "pytorch_transformers.modeling_xlnet.XLNetLMHeadModel.state_dict", "open", "f.write", "pytorch_transformers.modeling_xlnet.XLNetForQuestionAnswering", "pytorch_transformers.modeling_xlnet.XLNetLMHeadModel", "os.path.abspath", "os.path.abspath", "XLNetConfig.from_json_file.to_json_string", "str"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlnet.load_tf_weights_in_xlnet", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["def", "convert_xlnet_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "bert_config_file", ",", "pytorch_dump_folder_path", ",", "finetuning_task", "=", "None", ")", ":", "\n", "# Initialise PyTorch model", "\n", "    ", "config", "=", "XLNetConfig", ".", "from_json_file", "(", "bert_config_file", ")", "\n", "\n", "finetuning_task", "=", "finetuning_task", ".", "lower", "(", ")", "if", "finetuning_task", "is", "not", "None", "else", "\"\"", "\n", "if", "finetuning_task", "in", "GLUE_TASKS_NUM_LABELS", ":", "\n", "        ", "print", "(", "\"Building PyTorch XLNetForSequenceClassification model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "config", ".", "num_labels", "=", "GLUE_TASKS_NUM_LABELS", "[", "finetuning_task", "]", "\n", "model", "=", "XLNetForSequenceClassification", "(", "config", ")", "\n", "", "elif", "'squad'", "in", "finetuning_task", ":", "\n", "        ", "config", ".", "finetuning_task", "=", "finetuning_task", "\n", "model", "=", "XLNetForQuestionAnswering", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "XLNetLMHeadModel", "(", "config", ")", "\n", "\n", "# Load weights from tf checkpoint", "\n", "", "load_tf_weights_in_xlnet", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaEmbeddings.__init__": [[53, 56], ["pytorch_transformers.modeling_bert.BertEmbeddings.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "padding_idx", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaEmbeddings.forward": [[57, 65], ["input_ids.size", "super().forward", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.forward"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "if", "position_ids", "is", "None", ":", "\n", "# Position numbers begin at padding_idx+1. Padding symbols are ignored.", "\n", "# cf. fairseq's `utils.make_positions`", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "self", ".", "padding_idx", "+", "1", ",", "seq_length", "+", "self", ".", "padding_idx", "+", "1", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "return", "super", "(", "RobertaEmbeddings", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "position_ids", "=", "position_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaModel.__init__": [[167, 172], ["pytorch_transformers.modeling_bert.BertModel.__init__", "modeling_roberta.RobertaEmbeddings", "modeling_roberta.RobertaModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "RobertaEmbeddings", "(", "config", ")", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaModel.forward": [[173, 179], ["super().forward", "input_ids[].sum().item", "logger.warning", "input_ids[].sum"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.forward"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "input_ids", "[", ":", ",", "0", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "!=", "0", ":", "\n", "            ", "logger", ".", "warning", "(", "\"A sequence with no special tokens has been passed to the RoBERTa model. \"", "\n", "\"This model requires special tokens in order to work. \"", "\n", "\"Please specify add_special_tokens=True in your encoding.\"", ")", "\n", "", "return", "super", "(", "RobertaModel", ",", "self", ")", ".", "forward", "(", "input_ids", ",", "token_type_ids", ",", "attention_mask", ",", "position_ids", ",", "head_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaForMaskedLM.__init__": [[217, 225], ["pytorch_transformers.modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaLMHead", "modeling_roberta.RobertaForMaskedLM.init_weights", "modeling_roberta.RobertaForMaskedLM.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "RobertaLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaForMaskedLM.tie_weights": [[226, 231], ["modeling_roberta.RobertaForMaskedLM._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ".", "decoder", ",", "self", ".", "roberta", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaForMaskedLM.forward": [[232, 247], ["modeling_roberta.RobertaForMaskedLM.roberta", "modeling_roberta.RobertaForMaskedLM.lm_head", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "position_ids", "=", "None", ",", "\n", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "lm_head", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaLMHead.__init__": [[252, 259], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "pytorch_transformers.modeling_bert.BertLayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "layer_norm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaLMHead.forward": [[260, 269], ["modeling_roberta.RobertaLMHead.dense", "pytorch_transformers.modeling_bert.gelu", "modeling_roberta.RobertaLMHead.layer_norm", "modeling_roberta.RobertaLMHead.decoder"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.gelu"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "self", ".", "dense", "(", "features", ")", "\n", "x", "=", "gelu", "(", "x", ")", "\n", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# project back to size of vocabulary with bias", "\n", "x", "=", "self", ".", "decoder", "(", "x", ")", "+", "self", ".", "bias", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaForSequenceClassification.__init__": [[309, 315], ["pytorch_transformers.modeling_bert.BertPreTrainedModel.__init__", "modeling_roberta.RobertaModel", "modeling_roberta.RobertaClassificationHead"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "roberta", "=", "RobertaModel", "(", "config", ")", "\n", "self", ".", "classifier", "=", "RobertaClassificationHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaForSequenceClassification.forward": [[316, 335], ["modeling_roberta.RobertaForSequenceClassification.roberta", "modeling_roberta.RobertaForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view", "modeling_roberta.RobertaForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "roberta", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaClassificationHead.__init__": [[341, 346], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "RobertaClassificationHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_roberta.RobertaClassificationHead.forward": [[347, 355], ["modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.dense", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "modeling_roberta.RobertaClassificationHead.dropout", "modeling_roberta.RobertaClassificationHead.out_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "[", ":", ",", "0", ",", ":", "]", "# take <s> token (equiv. to [CLS])", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.bos_token": [[130, 133], ["None"], "methods", ["None"], ["", "@", "bos_token", ".", "setter", "\n", "def", "bos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.eos_token": [[134, 137], ["None"], "methods", ["None"], ["", "@", "eos_token", ".", "setter", "\n", "def", "eos_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_eos_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.unk_token": [[138, 141], ["None"], "methods", ["None"], ["", "@", "unk_token", ".", "setter", "\n", "def", "unk_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_unk_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.sep_token": [[142, 145], ["None"], "methods", ["None"], ["", "@", "sep_token", ".", "setter", "\n", "def", "sep_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_sep_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.pad_token": [[146, 149], ["None"], "methods", ["None"], ["", "@", "pad_token", ".", "setter", "\n", "def", "pad_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_pad_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.cls_token": [[150, 153], ["None"], "methods", ["None"], ["", "@", "cls_token", ".", "setter", "\n", "def", "cls_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_cls_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.mask_token": [[154, 157], ["None"], "methods", ["None"], ["", "@", "mask_token", ".", "setter", "\n", "def", "mask_token", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_mask_token", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens": [[158, 161], ["None"], "methods", ["None"], ["", "@", "additional_special_tokens", ".", "setter", "\n", "def", "additional_special_tokens", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "_additional_special_tokens", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.bos_token_id": [[162, 168], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "bos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the beginning of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_bos_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using bos_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_bos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.eos_token_id": [[169, 175], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "eos_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the end of sentence token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_eos_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using eos_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_eos_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.unk_token_is": [[176, 182], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "unk_token_is", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the unknown token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_unk_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using unk_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.sep_token_id": [[183, 189], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "sep_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the separation token in the vocabulary. E.g. separate context and query in an input sequence. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_sep_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using sep_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_sep_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.pad_token_id": [[190, 196], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "pad_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the padding token in the vocabulary. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_pad_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using pad_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_pad_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.cls_token_id": [[197, 203], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "cls_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the classification token in the vocabulary. E.g. to extract a summary of an input sequence leveraging self-attention along the full depth of the model. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_cls_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using cls_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_cls_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.mask_token_id": [[204, 210], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "mask_token_id", "(", "self", ")", ":", "\n", "        ", "\"\"\" Id of the mask token in the vocabulary. E.g. when training a model with masked-language modeling. Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_mask_token", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using mask_token, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_mask_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.additional_special_tokens_ids": [[211, 217], ["tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "logger.error"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "@", "property", "\n", "def", "additional_special_tokens_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" Ids of all the additional special tokens in the vocabulary (list of integers). Log an error if used while not having been set. \"\"\"", "\n", "if", "self", ".", "_additional_special_tokens", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"Using additional_special_tokens, but it is not set yet.\"", ")", "\n", "", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "_additional_special_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.__init__": [[218, 245], ["kwargs.items", "int", "setattr", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "max_len", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_bos_token", "=", "None", "\n", "self", ".", "_eos_token", "=", "None", "\n", "self", ".", "_unk_token", "=", "None", "\n", "self", ".", "_sep_token", "=", "None", "\n", "self", ".", "_pad_token", "=", "None", "\n", "self", ".", "_cls_token", "=", "None", "\n", "self", ".", "_mask_token", "=", "None", "\n", "self", ".", "_additional_special_tokens", "=", "[", "]", "\n", "\n", "self", ".", "max_len", "=", "max_len", "if", "max_len", "is", "not", "None", "else", "int", "(", "1e12", ")", "\n", "\n", "# Added tokens", "\n", "self", ".", "added_tokens_encoder", "=", "{", "}", "\n", "self", ".", "added_tokens_decoder", "=", "{", "}", "\n", "\n", "# inputs and kwargs for saving and re-loading (see ``from_pretrained`` and ``save_pretrained``)", "\n", "self", ".", "init_inputs", "=", "(", ")", "\n", "self", ".", "init_kwargs", "=", "{", "}", "\n", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "                ", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "", "else", ":", "\n", "                    ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.from_pretrained": [[247, 294], ["cls._from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained"], ["", "", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"\n        Instantiate a :class:`~pytorch_transformers.PreTrainedTokenizer` (or a derived class) from a predefined tokenizer.\n\n        Args:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~pytorch_transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~pytorch_transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PreTrainedTokenizer` so let's show our examples on a derived class: BertTokenizer\n\n            # Download vocabulary from S3 and cache.\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n\n            # If vocabulary files are in a directory (e.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`)\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/')\n\n            # If the tokenizer uses a single vocabulary file, you can point directly to this file\n            tokenizer = BertTokenizer.from_pretrained('./test/saved_model/my_vocab.txt')\n\n            # You can link tokens to special vocabulary when instantiating\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased', unk_token='<unk>')\n            # You should be sure '<unk>' is in the vocabulary when doing that.\n            # Otherwise use tokenizer.add_special_tokens({'unk_token': '<unk>'}) instead)\n            assert tokenizer.unk_token == '<unk>'\n\n        \"\"\"", "\n", "return", "cls", ".", "_from_pretrained", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._from_pretrained": [[296, 435], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "list", "vocab_files.items", "resolved_vocab_files.pop", "json.load.update", "resolved_vocab_files.pop", "resolved_vocab_files.pop", "resolved_vocab_files.items", "cls", "cls.max_model_input_sizes.keys", "cls.pretrained_vocab_files_map.items", "logger.info", "cls.vocab_files_names.items", "additional_files_names.items", "all", "vocab_files.items", "json.load", "json.load.pop", "json.load", "json.load.items", "json.load", "cls.added_tokens_encoder.update", "cls.added_tokens_decoder.update", "os.path.isdir", "os.path.exists", "os.path.dirname", "os.path.join", "logger.error", "logger.info", "logger.info", "io.open", "isinstance", "min", "io.open", "io.open", "os.path.join", "os.path.exists", "logger.info", "os.path.isdir", "os.path.exists", "logger.info", "file_utils.cached_path", "logger.error", "logger.error", "json.load.get", "json.load.items", "vocab_files.values", "int", "str", "vocab_files.keys"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "_from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "init_inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "\n", "s3_models", "=", "list", "(", "cls", ".", "max_model_input_sizes", ".", "keys", "(", ")", ")", "\n", "vocab_files", "=", "{", "}", "\n", "init_configuration", "=", "{", "}", "\n", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "# Get the vocabulary from AWS S3 bucket", "\n", "            ", "for", "file_id", ",", "map_list", "in", "cls", ".", "pretrained_vocab_files_map", ".", "items", "(", ")", ":", "\n", "                ", "vocab_files", "[", "file_id", "]", "=", "map_list", "[", "pretrained_model_name_or_path", "]", "\n", "", "if", "cls", ".", "pretrained_init_configuration", "and", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_init_configuration", ":", "\n", "                ", "init_configuration", "=", "cls", ".", "pretrained_init_configuration", "[", "pretrained_model_name_or_path", "]", "\n", "", "", "else", ":", "\n", "# Get the vocabulary from local files", "\n", "            ", "logger", ".", "info", "(", "\n", "\"Model name '{}' not found in model shortcut name list ({}). \"", "\n", "\"Assuming '{}' is a path or url to a directory containing tokenizer files.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ")", ")", "\n", "\n", "# Look for the tokenizer main vocabulary files", "\n", "for", "file_id", ",", "file_name", "in", "cls", ".", "vocab_files_names", ".", "items", "(", ")", ":", "\n", "                ", "if", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "# If a directory is provided we look for the standard filenames", "\n", "                    ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "file_name", ")", "\n", "", "else", ":", "\n", "# If a path to a file is provided we use it (will only work for non-BPE tokenizer using a single vocabulary file)", "\n", "                    ", "full_file_name", "=", "pretrained_model_name_or_path", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "# Look for the additional tokens files", "\n", "", "additional_files_names", "=", "{", "'added_tokens_file'", ":", "ADDED_TOKENS_FILE", ",", "\n", "'special_tokens_map_file'", ":", "SPECIAL_TOKENS_MAP_FILE", ",", "\n", "'tokenizer_config_file'", ":", "TOKENIZER_CONFIG_FILE", ",", "\n", "}", "\n", "\n", "# If a path to a file was provided, get the parent directory", "\n", "saved_directory", "=", "pretrained_model_name_or_path", "\n", "if", "os", ".", "path", ".", "exists", "(", "saved_directory", ")", "and", "not", "os", ".", "path", ".", "isdir", "(", "saved_directory", ")", ":", "\n", "                ", "saved_directory", "=", "os", ".", "path", ".", "dirname", "(", "saved_directory", ")", "\n", "\n", "", "for", "file_id", ",", "file_name", "in", "additional_files_names", ".", "items", "(", ")", ":", "\n", "                ", "full_file_name", "=", "os", ".", "path", ".", "join", "(", "saved_directory", ",", "file_name", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "full_file_name", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Didn't find file {}. We won't load it.\"", ".", "format", "(", "full_file_name", ")", ")", "\n", "full_file_name", "=", "None", "\n", "", "vocab_files", "[", "file_id", "]", "=", "full_file_name", "\n", "\n", "", "if", "all", "(", "full_file_name", "is", "None", "for", "full_file_name", "in", "vocab_files", ".", "values", "(", ")", ")", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find tokenizer files\"", "\n", "\"at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", ")", ")", "\n", "return", "None", "\n", "\n", "# Get files from url, cache, or disk depending on the case", "\n", "", "", "try", ":", "\n", "            ", "resolved_vocab_files", "=", "{", "}", "\n", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "                ", "if", "file_path", "is", "None", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "None", "\n", "", "else", ":", "\n", "                    ", "resolved_vocab_files", "[", "file_id", "]", "=", "cached_path", "(", "file_path", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "", "", "except", "EnvironmentError", "as", "e", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "s3_models", ":", "\n", "                ", "logger", ".", "error", "(", "\"Couldn't reach server to download vocabulary.\"", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find files {} \"", "\n", "\"at this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "', '", ".", "join", "(", "s3_models", ")", ",", "\n", "pretrained_model_name_or_path", ",", "str", "(", "vocab_files", ".", "keys", "(", ")", ")", ")", ")", "\n", "", "raise", "e", "\n", "\n", "", "for", "file_id", ",", "file_path", "in", "vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "file_path", "==", "resolved_vocab_files", "[", "file_id", "]", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {}\"", ".", "format", "(", "file_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "info", "(", "\"loading file {} from cache at {}\"", ".", "format", "(", "\n", "file_path", ",", "resolved_vocab_files", "[", "file_id", "]", ")", ")", "\n", "\n", "# Prepare tokenizer initialization kwargs", "\n", "# Did we saved some inputs and kwargs to reload ?", "\n", "", "", "tokenizer_config_file", "=", "resolved_vocab_files", ".", "pop", "(", "'tokenizer_config_file'", ",", "None", ")", "\n", "if", "tokenizer_config_file", "is", "not", "None", ":", "\n", "            ", "init_kwargs", "=", "json", ".", "load", "(", "open", "(", "tokenizer_config_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "saved_init_inputs", "=", "init_kwargs", ".", "pop", "(", "'init_inputs'", ",", "(", ")", ")", "\n", "if", "not", "init_inputs", ":", "\n", "                ", "init_inputs", "=", "saved_init_inputs", "\n", "", "", "else", ":", "\n", "            ", "init_kwargs", "=", "init_configuration", "\n", "\n", "# Update with newly provided kwargs", "\n", "", "init_kwargs", ".", "update", "(", "kwargs", ")", "\n", "\n", "# Set max length if needed", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "max_model_input_sizes", ":", "\n", "# if we're using a pretrained model, ensure the tokenizer", "\n", "# wont index sequences longer than the number of positional embeddings", "\n", "            ", "max_len", "=", "cls", ".", "max_model_input_sizes", "[", "pretrained_model_name_or_path", "]", "\n", "if", "max_len", "is", "not", "None", "and", "isinstance", "(", "max_len", ",", "(", "int", ",", "float", ")", ")", ":", "\n", "                ", "init_kwargs", "[", "'max_len'", "]", "=", "min", "(", "init_kwargs", ".", "get", "(", "'max_len'", ",", "int", "(", "1e12", ")", ")", ",", "max_len", ")", "\n", "\n", "# Merge resolved_vocab_files arguments in init_kwargs.", "\n", "", "", "added_tokens_file", "=", "resolved_vocab_files", ".", "pop", "(", "'added_tokens_file'", ",", "None", ")", "\n", "special_tokens_map_file", "=", "resolved_vocab_files", ".", "pop", "(", "'special_tokens_map_file'", ",", "None", ")", "\n", "for", "args_name", ",", "file_path", "in", "resolved_vocab_files", ".", "items", "(", ")", ":", "\n", "            ", "if", "args_name", "not", "in", "init_kwargs", ":", "\n", "                ", "init_kwargs", "[", "args_name", "]", "=", "file_path", "\n", "", "", "if", "special_tokens_map_file", "is", "not", "None", ":", "\n", "            ", "special_tokens_map", "=", "json", ".", "load", "(", "open", "(", "special_tokens_map_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "for", "key", ",", "value", "in", "special_tokens_map", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", "not", "in", "init_kwargs", ":", "\n", "                    ", "init_kwargs", "[", "key", "]", "=", "value", "\n", "\n", "# Instantiate tokenizer.", "\n", "", "", "", "tokenizer", "=", "cls", "(", "*", "init_inputs", ",", "**", "init_kwargs", ")", "\n", "\n", "# Save inputs and kwargs for saving and re-loading with ``save_pretrained``", "\n", "tokenizer", ".", "init_inputs", "=", "init_inputs", "\n", "tokenizer", ".", "init_kwargs", "=", "init_kwargs", "\n", "\n", "# Add supplementary tokens.", "\n", "if", "added_tokens_file", "is", "not", "None", ":", "\n", "            ", "added_tok_encoder", "=", "json", ".", "load", "(", "open", "(", "added_tokens_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "tokenizer", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "tokenizer", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "", "return", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.save_pretrained": [[437, 477], ["os.path.join", "os.path.join", "os.path.join", "copy.deepcopy", "copy.deepcopy", "tokenization_utils.PreTrainedTokenizer.vocab_files_names.keys", "tokenization_utils.PreTrainedTokenizer.save_vocabulary", "os.path.isdir", "logger.error", "copy.deepcopy.pop", "io.open", "f.write", "io.open", "f.write", "io.open", "f.write", "json.dumps", "json.dumps", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary files together with:\n                - added tokens,\n                - special-tokens-to-class-attributes-mapping,\n                - tokenizer instantiation positional and keywords inputs (e.g. do_lower_case for Bert).\n\n            This won't save modifications other than (added tokens and special token mapping) you may have\n            applied to the tokenizer after the instantion (e.g. modifying tokenizer.do_lower_case after creation).\n\n            This method make sure the full tokenizer can then be re-loaded using the :func:`~pytorch_transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Saving directory ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "\n", "", "special_tokens_map_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "SPECIAL_TOKENS_MAP_FILE", ")", "\n", "added_tokens_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "ADDED_TOKENS_FILE", ")", "\n", "tokenizer_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "TOKENIZER_CONFIG_FILE", ")", "\n", "\n", "tokenizer_config", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_kwargs", ")", "\n", "tokenizer_config", "[", "'init_inputs'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "init_inputs", ")", "\n", "for", "file_id", "in", "self", ".", "vocab_files_names", ".", "keys", "(", ")", ":", "\n", "            ", "tokenizer_config", ".", "pop", "(", "file_id", ",", "None", ")", "\n", "\n", "", "with", "open", "(", "tokenizer_config_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "tokenizer_config", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "special_tokens_map_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "special_tokens_map", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "with", "open", "(", "added_tokens_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "if", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "out_str", "=", "json", ".", "dumps", "(", "self", ".", "added_tokens_encoder", ",", "ensure_ascii", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "out_str", "=", "u\"{}\"", "\n", "", "f", ".", "write", "(", "out_str", ")", "\n", "\n", "", "vocab_files", "=", "self", ".", "save_vocabulary", "(", "save_directory", ")", "\n", "\n", "return", "vocab_files", "+", "(", "special_tokens_map_file", ",", "added_tokens_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.save_vocabulary": [[479, 486], ["None"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save the tokenizer vocabulary to a directory. This method does *NOT* save added tokens\n            and special token mappings.\n\n            Please use :func:`~pytorch_transformers.PreTrainedTokenizer.save_pretrained` `()` to save the full Tokenizer state if you want to reload it using the :func:`~pytorch_transformers.PreTrainedTokenizer.from_pretrained` class method.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.vocab_size": [[488, 491], ["None"], "methods", ["None"], ["", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the base vocabulary (without the added tokens) \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.__len__": [[493, 496], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\" Size of the full vocabulary with the added tokens \"\"\"", "\n", "return", "self", ".", "vocab_size", "+", "len", "(", "self", ".", "added_tokens_encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_tokens": [[498, 536], ["dict", "tokenization_utils.PreTrainedTokenizer.added_tokens_encoder.update", "tokenization_utils.PreTrainedTokenizer.added_tokens_decoder.update", "len", "isinstance", "to_add_tokens.append", "logger.info", "dict.items", "isinstance", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "enumerate", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids"], ["", "def", "add_tokens", "(", "self", ",", "new_tokens", ")", ":", "\n", "        ", "\"\"\"\n        Add a list of new tokens to the tokenizer class. If the new tokens are not in the\n        vocabulary, they are added to it with indices starting from length of the current vocabulary.\n\n        Args:\n            new_tokens: list of string. Each string is a token to add. Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to increase the vocabulary of Bert model and tokenizer\n            tokenizer = BertTokenizer.from_pretrained('bert-base-uncased')\n            model = BertModel.from_pretrained('bert-base-uncased')\n\n            num_added_toks = tokenizer.add_tokens(['new_tok1', 'my_new-tok2'])\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n        \"\"\"", "\n", "if", "not", "new_tokens", ":", "\n", "            ", "return", "0", "\n", "\n", "", "to_add_tokens", "=", "[", "]", "\n", "for", "token", "in", "new_tokens", ":", "\n", "            ", "assert", "isinstance", "(", "token", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "token", ",", "unicode", ")", ")", "\n", "if", "token", "!=", "self", ".", "unk_token", "and", "self", ".", "convert_tokens_to_ids", "(", "token", ")", "==", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "unk_token", ")", ":", "\n", "                ", "to_add_tokens", ".", "append", "(", "token", ")", "\n", "logger", ".", "info", "(", "\"Adding %s to the vocabulary\"", ",", "token", ")", "\n", "\n", "", "", "added_tok_encoder", "=", "dict", "(", "(", "tok", ",", "len", "(", "self", ")", "+", "i", ")", "for", "i", ",", "tok", "in", "enumerate", "(", "to_add_tokens", ")", ")", "\n", "added_tok_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "added_tok_encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "added_tokens_encoder", ".", "update", "(", "added_tok_encoder", ")", "\n", "self", ".", "added_tokens_decoder", ".", "update", "(", "added_tok_decoder", ")", "\n", "\n", "return", "len", "(", "to_add_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens": [[538, 591], ["special_tokens_dict.items", "logger.info", "setattr", "tokenization_utils.PreTrainedTokenizer.add_tokens", "tokenization_utils.PreTrainedTokenizer.add_tokens", "isinstance", "all", "isinstance", "isinstance", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_tokens", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_tokens"], ["", "def", "add_special_tokens", "(", "self", ",", "special_tokens_dict", ")", ":", "\n", "        ", "\"\"\"\n        Add a dictionary of special tokens (eos, pad, cls...) to the encoder and link them\n        to class attributes. If special tokens are NOT in the vocabulary, they are added\n        to it (indexed starting from the last index of the current vocabulary).\n\n        Using `add_special_tokens` will ensure your special tokens can be used in several ways:\n\n        - special tokens are carefully handled by the tokenizer (they are never split)\n        - you can easily refer to special tokens using tokenizer class attributes like `tokenizer.cls_token`. This makes it easy to develop model-agnostic training and fine-tuning scripts.\n\n        When possible, special tokens are already registered for provided pretrained models (ex: BertTokenizer cls_token is already registered to be '[CLS]' and XLM's one is also registered to be '</s>')\n\n        Args:\n            special_tokens_dict: dict of string. Keys should be in the list of predefined special attributes:\n                [``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``,\n                ``additional_special_tokens``].\n\n                Tokens are only added if they are not already in the vocabulary (tested by checking if the tokenizer assign the index of the ``unk_token`` to them).\n\n        Returns:\n            Number of tokens added to the vocabulary.\n\n        Examples::\n\n            # Let's see how to add a new classification token to GPT-2\n            tokenizer = GPT2Tokenizer.from_pretrained('gpt2')\n            model = GPT2Model.from_pretrained('gpt2')\n\n            special_tokens_dict = {'cls_token': '<CLS>'}\n\n            num_added_toks = tokenizer.add_special_tokens(special_tokens_dict)\n            print('We have added', num_added_toks, 'tokens')\n            model.resize_token_embeddings(len(tokenizer))  # Notice: resize_token_embeddings expect to receive the full size of the new vocabulary, i.e. the length of the tokenizer.\n\n            assert tokenizer.cls_token == '<CLS>'\n        \"\"\"", "\n", "if", "not", "special_tokens_dict", ":", "\n", "            ", "return", "0", "\n", "\n", "", "added_tokens", "=", "0", "\n", "for", "key", ",", "value", "in", "special_tokens_dict", ".", "items", "(", ")", ":", "\n", "            ", "assert", "key", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", "\n", "if", "key", "==", "'additional_special_tokens'", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "(", "list", ",", "tuple", ")", ")", "and", "all", "(", "isinstance", "(", "t", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "t", ",", "unicode", ")", ")", "for", "t", "in", "value", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "value", ")", "\n", "", "else", ":", "\n", "                ", "assert", "isinstance", "(", "value", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "value", ",", "unicode", ")", ")", "\n", "added_tokens", "+=", "self", ".", "add_tokens", "(", "[", "value", "]", ")", "\n", "", "logger", ".", "info", "(", "\"Assigning %s to the %s key of the tokenizer\"", ",", "value", ",", "key", ")", "\n", "setattr", "(", "self", ",", "key", ",", "value", ")", "\n", "\n", "", "return", "added_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize": [[592, 642], ["tokenization_utils.PreTrainedTokenizer.tokenize.split_on_tokens"], "methods", ["None"], ["", "def", "tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Take care of added tokens.\n        \"\"\"", "\n", "def", "split_on_token", "(", "tok", ",", "text", ")", ":", "\n", "            ", "result", "=", "[", "]", "\n", "split_text", "=", "text", ".", "split", "(", "tok", ")", "\n", "for", "i", ",", "sub_text", "in", "enumerate", "(", "split_text", ")", ":", "\n", "                ", "sub_text", "=", "sub_text", ".", "strip", "(", ")", "\n", "if", "i", "==", "0", "and", "not", "sub_text", ":", "\n", "                    ", "result", "+=", "[", "tok", "]", "\n", "", "elif", "i", "==", "len", "(", "split_text", ")", "-", "1", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "else", ":", "\n", "                        ", "pass", "\n", "", "", "else", ":", "\n", "                    ", "if", "sub_text", ":", "\n", "                        ", "result", "+=", "[", "sub_text", "]", "\n", "", "result", "+=", "[", "tok", "]", "\n", "", "", "return", "result", "\n", "\n", "", "def", "split_on_tokens", "(", "tok_list", ",", "text", ")", ":", "\n", "            ", "if", "not", "text", ":", "\n", "                ", "return", "[", "]", "\n", "", "if", "not", "tok_list", ":", "\n", "                ", "return", "self", ".", "_tokenize", "(", "text", ",", "**", "kwargs", ")", "\n", "\n", "", "tokenized_text", "=", "[", "]", "\n", "text_list", "=", "[", "text", "]", "\n", "for", "tok", "in", "tok_list", ":", "\n", "                ", "tokenized_text", "=", "[", "]", "\n", "for", "sub_text", "in", "text_list", ":", "\n", "                    ", "if", "sub_text", "not", "in", "self", ".", "added_tokens_encoder", "and", "sub_text", "not", "in", "self", ".", "all_special_tokens", ":", "\n", "                        ", "tokenized_text", "+=", "split_on_token", "(", "tok", ",", "sub_text", ")", "\n", "", "else", ":", "\n", "                        ", "tokenized_text", "+=", "[", "sub_text", "]", "\n", "", "", "text_list", "=", "tokenized_text", "\n", "\n", "", "return", "sum", "(", "(", "self", ".", "_tokenize", "(", "token", ",", "**", "kwargs", ")", "if", "token", "not", "in", "self", ".", "added_tokens_encoder", "and", "token", "not", "in", "self", ".", "all_special_tokens", "else", "[", "token", "]", "for", "token", "in", "tokenized_text", ")", ",", "[", "]", ")", "\n", "\n", "", "added_tokens", "=", "list", "(", "self", ".", "added_tokens_encoder", ".", "keys", "(", ")", ")", "+", "self", ".", "all_special_tokens", "\n", "tokenized_text", "=", "split_on_tokens", "(", "added_tokens", ",", "text", ")", "\n", "return", "tokenized_text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._tokenize": [[643, 651], ["None"], "methods", ["None"], ["", "def", "_tokenize", "(", "self", ",", "text", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\" Converts a string in a sequence of tokens (string), using the tokenizer.\n            Split in words for word-based vocabulary or sub-words for sub-word-based\n            vocabularies (BPE/SentencePieces/WordPieces).\n\n            Do NOT take care of added tokens.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids": [[652, 667], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "ids.append", "len", "logger.warning", "isinstance", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc"], ["", "def", "convert_tokens_to_ids", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a single token, or a sequence of tokens, (str/unicode) in a single integer id\n            (resp. a sequence of ids), using the vocabulary.\n        \"\"\"", "\n", "if", "isinstance", "(", "tokens", ",", "str", ")", "or", "(", "six", ".", "PY2", "and", "isinstance", "(", "tokens", ",", "unicode", ")", ")", ":", "\n", "            ", "return", "self", ".", "_convert_token_to_id_with_added_voc", "(", "tokens", ")", "\n", "\n", "", "ids", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "ids", ".", "append", "(", "self", ".", "_convert_token_to_id_with_added_voc", "(", "token", ")", ")", "\n", "", "if", "len", "(", "ids", ")", ">", "self", ".", "max_len", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Token indices sequence length is longer than the specified maximum sequence length \"", "\n", "\"for this model ({} > {}). Running this sequence through the model will result in \"", "\n", "\"indexing errors\"", ".", "format", "(", "len", "(", "ids", ")", ",", "self", ".", "max_len", ")", ")", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id_with_added_voc": [[668, 672], ["tokenization_utils.PreTrainedTokenizer._convert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id"], ["", "def", "_convert_token_to_id_with_added_voc", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "            ", "return", "self", ".", "added_tokens_encoder", "[", "token", "]", "\n", "", "return", "self", ".", "_convert_token_to_id", "(", "token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._convert_token_to_id": [[673, 675], ["None"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.encode": [[676, 702], ["tokenization_utils.PreTrainedTokenizer._convert_token_to_id", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id", "tokenization_utils.PreTrainedTokenizer.add_special_tokens_sentences_pair", "tokenization_utils.PreTrainedTokenizer.add_special_tokens_single_sentence", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "tokenization_utils.PreTrainedTokenizer.tokenize", "tokenization_utils.PreTrainedTokenizer.tokenize", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "tokenization_utils.PreTrainedTokenizer.tokenize", "tokenization_utils.PreTrainedTokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_roberta.RobertaTokenizer.add_special_tokens_sentences_pair", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_roberta.RobertaTokenizer.add_special_tokens_single_sentence", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_ids", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize"], ["", "def", "encode", "(", "self", ",", "text", ",", "text_pair", "=", "None", ",", "add_special_tokens", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Converts a string in a sequence of ids (integer), using the tokenizer and vocabulary.\n        \n        Same as doing ``self.convert_tokens_to_ids(self.tokenize(text))``.\n\n        Args:\n            text: The first sequence to be encoded.\n            text_pair: Optional second sequence to be encoded.\n            add_special_tokens: if set to ``True``, the sequences will be encoded with the special tokens relative\n                to their model.\n            **kwargs: passed to the `self.tokenize()` method\n        \"\"\"", "\n", "if", "text_pair", "is", "None", ":", "\n", "            ", "if", "add_special_tokens", ":", "\n", "                ", "return", "self", ".", "add_special_tokens_single_sentence", "(", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenize", "(", "text", ",", "**", "kwargs", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "convert_tokens_to_ids", "(", "self", ".", "tokenize", "(", "text", ",", "**", "kwargs", ")", ")", "\n", "\n", "", "", "first_sentence_tokens", "=", "[", "self", ".", "_convert_token_to_id", "(", "token", ")", "for", "token", "in", "self", ".", "tokenize", "(", "text", ",", "**", "kwargs", ")", "]", "\n", "second_sentence_tokens", "=", "[", "self", ".", "_convert_token_to_id", "(", "token", ")", "for", "token", "in", "self", ".", "tokenize", "(", "text_pair", ",", "**", "kwargs", ")", "]", "\n", "\n", "if", "add_special_tokens", ":", "\n", "            ", "return", "self", ".", "add_special_tokens_sentences_pair", "(", "first_sentence_tokens", ",", "second_sentence_tokens", ")", "\n", "", "else", ":", "\n", "            ", "return", "first_sentence_tokens", ",", "second_sentence_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens_single_sentence": [[703, 706], ["logger.warning"], "methods", ["None"], ["", "", "def", "add_special_tokens_single_sentence", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"This tokenizer does not make use of special tokens. The sequence has been returned with no modification.\"", ")", "\n", "return", "token_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.add_special_tokens_sentences_pair": [[707, 710], ["logger.warning"], "methods", ["None"], ["", "def", "add_special_tokens_sentences_pair", "(", "self", ",", "token_ids_0", ",", "token_ids_1", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"This tokenizer does not make use of special tokens. The two sequences have been concatenated.\"", ")", "\n", "return", "token_ids_0", "+", "token_ids_1", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens": [[711, 732], ["isinstance", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token", "tokens.append", "tokens.append", "tokenization_utils.PreTrainedTokenizer._convert_id_to_token"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token"], ["", "def", "convert_ids_to_tokens", "(", "self", ",", "ids", ",", "skip_special_tokens", "=", "False", ")", ":", "\n", "        ", "\"\"\" Converts a single index or a sequence of indices (integers) in a token \"\n            (resp.) a sequence of tokens (str/unicode), using the vocabulary and added tokens.\n\n            Args:\n                skip_special_tokens: Don't decode special tokens (self.all_special_tokens). Default: False\n        \"\"\"", "\n", "if", "isinstance", "(", "ids", ",", "int", ")", ":", "\n", "            ", "if", "ids", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "return", "self", ".", "added_tokens_decoder", "[", "ids", "]", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_convert_id_to_token", "(", "ids", ")", "\n", "", "", "tokens", "=", "[", "]", "\n", "for", "index", "in", "ids", ":", "\n", "            ", "if", "skip_special_tokens", "and", "index", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "index", "in", "self", ".", "added_tokens_decoder", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "added_tokens_decoder", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "                ", "tokens", ".", "append", "(", "self", ".", "_convert_id_to_token", "(", "index", ")", ")", "\n", "", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer._convert_id_to_token": [[733, 735], ["None"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string": [[736, 742], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string.\n            The most simple way to do it is ' '.join(self.convert_ids_to_tokens(token_ids))\n            but we often want to remove sub-word tokenization artifacts at the same time.\n        \"\"\"", "\n", "return", "' '", ".", "join", "(", "self", ".", "convert_ids_to_tokens", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.decode": [[743, 784], ["tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "sub_texts.append", "text.replace.replace.replace", "list", "sub_texts.append", "current_sub_text.append", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string", "filter", "tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "sub_texts.append", "text.replace.replace.split", "tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "tokenization_utils.PreTrainedTokenizer.convert_tokens_to_string", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.convert_ids_to_tokens", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string"], ["", "def", "decode", "(", "self", ",", "token_ids", ",", "skip_special_tokens", "=", "False", ",", "clean_up_tokenization_spaces", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Converts a sequence of ids (integer) in a string, using the tokenizer and vocabulary\n        with options to remove special tokens and clean up tokenization spaces.\n        Similar to doing ``self.convert_tokens_to_string(self.convert_ids_to_tokens(token_ids))``.\n        \"\"\"", "\n", "filtered_tokens", "=", "self", ".", "convert_ids_to_tokens", "(", "token_ids", ",", "skip_special_tokens", "=", "skip_special_tokens", ")", "\n", "\n", "# To avoid mixing byte-level and unicode for byte-level BPT", "\n", "# we need to build string separatly for added tokens and byte-level tokens", "\n", "# cf. https://github.com/huggingface/pytorch-transformers/issues/1133", "\n", "sub_texts", "=", "[", "]", "\n", "current_sub_text", "=", "[", "]", "\n", "for", "token", "in", "filtered_tokens", ":", "\n", "            ", "if", "skip_special_tokens", "and", "token", "in", "self", ".", "all_special_ids", ":", "\n", "                ", "continue", "\n", "", "if", "token", "in", "self", ".", "added_tokens_encoder", ":", "\n", "                ", "if", "current_sub_text", ":", "\n", "                    ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "current_sub_text", "=", "[", "]", "\n", "", "sub_texts", ".", "append", "(", "\" \"", "+", "token", ")", "\n", "", "else", ":", "\n", "                ", "current_sub_text", ".", "append", "(", "token", ")", "\n", "", "", "if", "current_sub_text", ":", "\n", "            ", "sub_texts", ".", "append", "(", "self", ".", "convert_tokens_to_string", "(", "current_sub_text", ")", ")", "\n", "", "text", "=", "''", ".", "join", "(", "sub_texts", ")", "\n", "\n", "if", "self", ".", "_sep_token", "is", "not", "None", "and", "self", ".", "_sep_token", "in", "text", ":", "\n", "            ", "text", "=", "text", ".", "replace", "(", "self", ".", "_cls_token", ",", "self", ".", "_sep_token", ")", "\n", "split_text", "=", "list", "(", "filter", "(", "lambda", "sentence", ":", "len", "(", "sentence", ")", ">", "0", ",", "text", ".", "split", "(", "self", ".", "_sep_token", ")", ")", ")", "\n", "if", "clean_up_tokenization_spaces", ":", "\n", "                ", "clean_text", "=", "[", "self", ".", "clean_up_tokenization", "(", "text", ")", "for", "text", "in", "split_text", "]", "\n", "return", "clean_text", "\n", "", "else", ":", "\n", "                ", "return", "split_text", "\n", "", "", "else", ":", "\n", "            ", "if", "clean_up_tokenization_spaces", ":", "\n", "                ", "clean_text", "=", "self", ".", "clean_up_tokenization", "(", "text", ")", "\n", "return", "clean_text", "\n", "", "else", ":", "\n", "                ", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.special_tokens_map": [[785, 796], ["getattr"], "methods", ["None"], ["", "", "", "@", "property", "\n", "def", "special_tokens_map", "(", "self", ")", ":", "\n", "        ", "\"\"\" A dictionary mapping special token class attribute (cls_token, unk_token...) to their\n            values ('<unk>', '<cls>'...)\n        \"\"\"", "\n", "set_attr", "=", "{", "}", "\n", "for", "attr", "in", "self", ".", "SPECIAL_TOKENS_ATTRIBUTES", ":", "\n", "            ", "attr_value", "=", "getattr", "(", "self", ",", "\"_\"", "+", "attr", ")", "\n", "if", "attr_value", ":", "\n", "                ", "set_attr", "[", "attr", "]", "=", "attr_value", "\n", "", "", "return", "set_attr", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.all_special_tokens": [[797, 808], ["set_attr.values", "list", "set", "isinstance", "list"], "methods", ["None"], ["", "@", "property", "\n", "def", "all_special_tokens", "(", "self", ")", ":", "\n", "        ", "\"\"\" List all the special tokens ('<unk>', '<cls>'...) mapped to class attributes\n            (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "[", "]", "\n", "set_attr", "=", "self", ".", "special_tokens_map", "\n", "for", "attr_value", "in", "set_attr", ".", "values", "(", ")", ":", "\n", "            ", "all_toks", "=", "all_toks", "+", "(", "list", "(", "attr_value", ")", "if", "isinstance", "(", "attr_value", ",", "(", "list", ",", "tuple", ")", ")", "else", "[", "attr_value", "]", ")", "\n", "", "all_toks", "=", "list", "(", "set", "(", "all_toks", ")", ")", "\n", "return", "all_toks", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.all_special_ids": [[809, 817], ["list", "tokenization_utils.PreTrainedTokenizer._convert_token_to_id"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id"], ["", "@", "property", "\n", "def", "all_special_ids", "(", "self", ")", ":", "\n", "        ", "\"\"\" List the vocabulary indices of the special tokens ('<unk>', '<cls>'...) mapped to\n            class attributes (cls_token, unk_token...).\n        \"\"\"", "\n", "all_toks", "=", "self", ".", "all_special_tokens", "\n", "all_ids", "=", "list", "(", "self", ".", "_convert_token_to_id", "(", "t", ")", "for", "t", "in", "all_toks", ")", "\n", "return", "all_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.clean_up_tokenization": [[818, 826], ["out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace", "out_string.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace().replace().replace().replace().replace().replace().replace().replace().replace().replace().replace.replace"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "clean_up_tokenization", "(", "out_string", ")", ":", "\n", "        ", "\"\"\" Clean up a list of simple English tokenization artifacts like spaces before punctuations and abreviated forms.\n        \"\"\"", "\n", "out_string", "=", "out_string", ".", "replace", "(", "' .'", ",", "'.'", ")", ".", "replace", "(", "' ?'", ",", "'?'", ")", ".", "replace", "(", "' !'", ",", "'!'", ")", ".", "replace", "(", "' ,'", ",", "','", "\n", ")", ".", "replace", "(", "\" ' \"", ",", "\"'\"", ")", ".", "replace", "(", "\" n't\"", ",", "\"n't\"", ")", ".", "replace", "(", "\" 'm\"", ",", "\"'m\"", ")", ".", "replace", "(", "\" do not\"", ",", "\" don't\"", "\n", ")", ".", "replace", "(", "\" 's\"", ",", "\"'s\"", ")", ".", "replace", "(", "\" 've\"", ",", "\"'ve\"", ")", ".", "replace", "(", "\" 're\"", ",", "\"'re\"", ")", "\n", "return", "out_string", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.__init__": [[101, 108], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "finetuning_task", "=", "kwargs", ".", "pop", "(", "'finetuning_task'", ",", "None", ")", "\n", "self", ".", "num_labels", "=", "kwargs", ".", "pop", "(", "'num_labels'", ",", "2", ")", "\n", "self", ".", "output_attentions", "=", "kwargs", ".", "pop", "(", "'output_attentions'", ",", "False", ")", "\n", "self", ".", "output_hidden_states", "=", "kwargs", ".", "pop", "(", "'output_hidden_states'", ",", "False", ")", "\n", "self", ".", "torchscript", "=", "kwargs", ".", "pop", "(", "'torchscript'", ",", "False", ")", "\n", "self", ".", "pruned_heads", "=", "kwargs", ".", "pop", "(", "'pruned_heads'", ",", "{", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.save_pretrained": [[109, 119], ["os.path.isdir", "os.path.join", "modeling_utils.PretrainedConfig.to_json_file"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_file"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a configuration object to the directory `save_directory`, so that it\n            can be re-loaded using the :func:`~pytorch_transformers.PretrainedConfig.from_pretrained` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_config_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "CONFIG_NAME", ")", "\n", "\n", "self", ".", "to_json_file", "(", "output_config_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_pretrained": [[120, 221], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "cls.from_json_file", "hasattr", "kwargs.items", "logger.info", "os.path.isdir", "file_utils.cached_path", "logger.info", "logger.info", "dict", "hasattr", "kwargs.pop", "os.path.join", "setattr", "to_remove.append", "logger.error", "logger.error", "int", "set", "cls.from_json_file.pruned_heads.items", "cls.pretrained_config_archive_map.keys"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.file_utils.cached_path"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a :class:`~pytorch_transformers.PretrainedConfig` (or a derived class) from a pre-trained model configuration.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model configuration to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing a configuration file saved using the :func:`~pytorch_transformers.PretrainedConfig.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - a path or url to a saved configuration JSON `file`, e.g.: ``./my_model_directory/configuration.json``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            kwargs: (`optional`) dict: key/value pairs with which to update the configuration object after loading.\n\n                - The values in kwargs of any keys which are configuration attributes will be used to override the loaded values.\n                - Behavior concerning key/value pairs whose keys are *not* configuration attributes is controlled by the `return_unused_kwargs` keyword parameter.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            return_unused_kwargs: (`optional`) bool:\n\n                - If False, then this function returns just the final configuration object.\n                - If True, then this functions returns a tuple `(config, unused_kwargs)` where `unused_kwargs` is a dictionary consisting of the key/value pairs whose keys are not configuration attributes: ie the part of kwargs which has not been used to update `config` and is otherwise ignored.\n\n        Examples::\n\n            # We can't instantiate directly the base class `PretrainedConfig` so let's show the examples on a\n            # derived class: BertConfig\n            config = BertConfig.from_pretrained('bert-base-uncased')    # Download configuration from S3 and cache.\n            config = BertConfig.from_pretrained('./test/saved_model/')  # E.g. config (or model) was saved using `save_pretrained('./test/saved_model/')`\n            config = BertConfig.from_pretrained('./test/saved_model/my_configuration.json')\n            config = BertConfig.from_pretrained('bert-base-uncased', output_attention=True, foo=False)\n            assert config.output_attention == True\n            config, unused_kwargs = BertConfig.from_pretrained('bert-base-uncased', output_attention=True,\n                                                               foo=False, return_unused_kwargs=True)\n            assert config.output_attention == True\n            assert unused_kwargs == {'foo': False}\n\n        \"\"\"", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "return_unused_kwargs", "=", "kwargs", ".", "pop", "(", "'return_unused_kwargs'", ",", "False", ")", "\n", "\n", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "            ", "config_file", "=", "cls", ".", "pretrained_config_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "config_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "CONFIG_NAME", ")", "\n", "", "else", ":", "\n", "            ", "config_file", "=", "pretrained_model_name_or_path", "\n", "# redirect to the cache, if necessary", "\n", "", "try", ":", "\n", "            ", "resolved_config_file", "=", "cached_path", "(", "config_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", "as", "e", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_config_archive_map", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Couldn't reach server at '{}' to download pretrained model configuration file.\"", ".", "format", "(", "\n", "config_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_config_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "config_file", ")", ")", "\n", "", "raise", "e", "\n", "", "if", "resolved_config_file", "==", "config_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {}\"", ".", "format", "(", "config_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading configuration file {} from cache at {}\"", ".", "format", "(", "\n", "config_file", ",", "resolved_config_file", ")", ")", "\n", "\n", "# Load config", "\n", "", "config", "=", "cls", ".", "from_json_file", "(", "resolved_config_file", ")", "\n", "\n", "if", "hasattr", "(", "config", ",", "'pruned_heads'", ")", ":", "\n", "            ", "config", ".", "pruned_heads", "=", "dict", "(", "(", "int", "(", "key", ")", ",", "set", "(", "value", ")", ")", "for", "key", ",", "value", "in", "config", ".", "pruned_heads", ".", "items", "(", ")", ")", "\n", "\n", "# Update config with kwargs if needed", "\n", "", "to_remove", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "key", ")", ":", "\n", "                ", "setattr", "(", "config", ",", "key", ",", "value", ")", "\n", "to_remove", ".", "append", "(", "key", ")", "\n", "", "", "for", "key", "in", "to_remove", ":", "\n", "            ", "kwargs", ".", "pop", "(", "key", ",", "None", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Model config %s\"", ",", "config", ")", "\n", "if", "return_unused_kwargs", ":", "\n", "            ", "return", "config", ",", "kwargs", "\n", "", "else", ":", "\n", "            ", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_dict": [[222, 229], ["cls", "json_object.items"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "from_dict", "(", "cls", ",", "json_object", ")", ":", "\n", "        ", "\"\"\"Constructs a `Config` from a Python dictionary of parameters.\"\"\"", "\n", "config", "=", "cls", "(", "vocab_size_or_config_json_file", "=", "-", "1", ")", "\n", "for", "key", ",", "value", "in", "json_object", ".", "items", "(", ")", ":", "\n", "            ", "config", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file": [[230, 236], ["cls.from_dict", "io.open", "reader.read", "json.loads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_dict"], ["", "@", "classmethod", "\n", "def", "from_json_file", "(", "cls", ",", "json_file", ")", ":", "\n", "        ", "\"\"\"Constructs a `BertConfig` from a json file of parameters.\"\"\"", "\n", "with", "open", "(", "json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "            ", "text", "=", "reader", ".", "read", "(", ")", "\n", "", "return", "cls", ".", "from_dict", "(", "json", ".", "loads", "(", "text", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.__eq__": [[237, 239], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__dict__", "==", "other", ".", "__dict__", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.__repr__": [[240, 242], ["str", "modeling_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "str", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_dict": [[243, 247], ["copy.deepcopy"], "methods", ["None"], ["", "def", "to_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a Python dictionary.\"\"\"", "\n", "output", "=", "copy", ".", "deepcopy", "(", "self", ".", "__dict__", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string": [[248, 251], ["json.dumps", "modeling_utils.PretrainedConfig.to_dict"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_dict"], ["", "def", "to_json_string", "(", "self", ")", ":", "\n", "        ", "\"\"\"Serializes this instance to a JSON string.\"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "to_dict", "(", ")", ",", "indent", "=", "2", ",", "sort_keys", "=", "True", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_file": [[252, 256], ["io.open", "writer.write", "modeling_utils.PretrainedConfig.to_json_string"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["", "def", "to_json_file", "(", "self", ",", "json_file_path", ")", ":", "\n", "        ", "\"\"\" Save this instance to a json file.\"\"\"", "\n", "with", "open", "(", "json_file_path", ",", "\"w\"", ",", "encoding", "=", "'utf-8'", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "self", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.__init__": [[280, 291], ["torch.nn.Module.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "PreTrainedModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "config", ",", "PretrainedConfig", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Parameter config in `{}(config)` should be an instance of class `PretrainedConfig`. \"", "\n", "\"To create a model from a pretrained model use \"", "\n", "\"`model = {}.from_pretrained(PRETRAINED_MODEL_NAME)`\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "__class__", ".", "__name__", "\n", ")", ")", "\n", "# Save config in model", "\n", "", "self", ".", "config", "=", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings": [[292, 325], ["old_embeddings.weight.size", "torch.nn.Embedding", "torch.nn.Embedding.to", "modeling_utils.PreTrainedModel._init_weights", "min"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTPreTrainedModel._init_weights"], ["", "def", "_get_resized_embeddings", "(", "self", ",", "old_embeddings", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Build a resized Embedding Module from a provided token Embedding Module.\n            Increasing the size will add newly initialized vectors at the end\n            Reducing the size will remove vectors from the end\n\n        Args:\n            new_num_tokens: (`optional`) int\n                New number of tokens in the embedding matrix.\n                Increasing the size will add newly initialized vectors at the end\n                Reducing the size will remove vectors from the end\n                If not provided or None: return the provided token Embedding Module.\n        Return: ``torch.nn.Embeddings``\n            Pointer to the resized Embedding Module or the old Embedding Module if new_num_tokens is None\n        \"\"\"", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "", "old_num_tokens", ",", "old_embedding_dim", "=", "old_embeddings", ".", "weight", ".", "size", "(", ")", "\n", "if", "old_num_tokens", "==", "new_num_tokens", ":", "\n", "            ", "return", "old_embeddings", "\n", "\n", "# Build new embeddings", "\n", "", "new_embeddings", "=", "nn", ".", "Embedding", "(", "new_num_tokens", ",", "old_embedding_dim", ")", "\n", "new_embeddings", ".", "to", "(", "old_embeddings", ".", "weight", ".", "device", ")", "\n", "\n", "# initialize all new embeddings (in particular added tokens)", "\n", "self", ".", "_init_weights", "(", "new_embeddings", ")", "\n", "\n", "# Copy word embeddings from the previous weights", "\n", "num_tokens_to_copy", "=", "min", "(", "old_num_tokens", ",", "new_num_tokens", ")", "\n", "new_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "=", "old_embeddings", ".", "weight", ".", "data", "[", ":", "num_tokens_to_copy", ",", ":", "]", "\n", "\n", "return", "new_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights": [[326, 340], ["torch.nn.Parameter", "hasattr", "torch.nn.functional.pad", "second_module.weight.clone"], "methods", ["None"], ["", "def", "_tie_or_clone_weights", "(", "self", ",", "first_module", ",", "second_module", ")", ":", "\n", "        ", "\"\"\" Tie or clone module weights depending of weither we are using TorchScript or not\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "torchscript", ":", "\n", "            ", "first_module", ".", "weight", "=", "nn", ".", "Parameter", "(", "second_module", ".", "weight", ".", "clone", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "first_module", ".", "weight", "=", "second_module", ".", "weight", "\n", "\n", "", "if", "hasattr", "(", "first_module", ",", "'bias'", ")", "and", "first_module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "first_module", ".", "bias", ".", "data", "=", "torch", ".", "nn", ".", "functional", ".", "pad", "(", "\n", "first_module", ".", "bias", ".", "data", ",", "\n", "(", "0", ",", "first_module", ".", "weight", ".", "shape", "[", "0", "]", "-", "first_module", ".", "bias", ".", "shape", "[", "0", "]", ")", ",", "\n", "'constant'", ",", "\n", "0", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.resize_token_embeddings": [[342, 369], ["getattr", "getattr._resize_token_embeddings", "hasattr", "modeling_utils.PreTrainedModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel._resize_token_embeddings", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["", "", "def", "resize_token_embeddings", "(", "self", ",", "new_num_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\" Resize input token embeddings matrix of the model if new_num_tokens != config.vocab_size.\n        Take care of tying weights embeddings afterwards if the model class has a `tie_weights()` method.\n\n        Arguments:\n\n            new_num_tokens: (`optional`) int:\n                New number of tokens in the embedding matrix. Increasing the size will add newly initialized vectors at the end. Reducing the size will remove vectors from the end. \n                If not provided or None: does nothing and just returns a pointer to the input tokens ``torch.nn.Embeddings`` Module of the model.\n\n        Return: ``torch.nn.Embeddings``\n            Pointer to the input tokens Embeddings Module of the model\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "# get the base model if needed", "\n", "model_embeds", "=", "base_model", ".", "_resize_token_embeddings", "(", "new_num_tokens", ")", "\n", "if", "new_num_tokens", "is", "None", ":", "\n", "            ", "return", "model_embeds", "\n", "\n", "# Update base model and current model config", "\n", "", "self", ".", "config", ".", "vocab_size", "=", "new_num_tokens", "\n", "base_model", ".", "vocab_size", "=", "new_num_tokens", "\n", "\n", "# Tie weights again if needed", "\n", "if", "hasattr", "(", "self", ",", "'tie_weights'", ")", ":", "\n", "            ", "self", ".", "tie_weights", "(", ")", "\n", "\n", "", "return", "model_embeds", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights": [[370, 378], ["modeling_utils.PreTrainedModel.apply", "modeling_utils.PreTrainedModel.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Initialize and prunes weights if needed. \"\"\"", "\n", "# Initialize weights", "\n", "self", ".", "apply", "(", "self", ".", "_init_weights", ")", "\n", "\n", "# Prune heads if needed", "\n", "if", "self", ".", "config", ".", "pruned_heads", ":", "\n", "            ", "self", ".", "prune_heads", "(", "self", ".", "config", ".", "pruned_heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.prune_heads": [[379, 395], ["getattr", "heads_to_prune.items", "getattr._prune_heads", "list", "set", "set", "modeling_utils.PreTrainedModel.config.pruned_heads.get"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel._prune_heads"], ["", "", "def", "prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the base model.\n\n            Arguments:\n\n                heads_to_prune: dict with keys being selected layer indices (`int`) and associated values being the list of heads to prune in said layer (list of `int`).\n                E.g. {1: [0, 2], 2: [2, 3]} will prune heads 0 and 2 on layer 1 and heads 2 and 3 on layer 2.\n        \"\"\"", "\n", "base_model", "=", "getattr", "(", "self", ",", "self", ".", "base_model_prefix", ",", "self", ")", "# get the base model if needed", "\n", "\n", "# save new sets of pruned heads as union of previously stored pruned heads and newly pruned heads", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "union_heads", "=", "set", "(", "self", ".", "config", ".", "pruned_heads", ".", "get", "(", "layer", ",", "[", "]", ")", ")", "|", "set", "(", "heads", ")", "\n", "self", ".", "config", ".", "pruned_heads", "[", "layer", "]", "=", "list", "(", "union_heads", ")", "# Unfortunately we have to store it as list for JSON", "\n", "\n", "", "base_model", ".", "_prune_heads", "(", "heads_to_prune", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.save_pretrained": [[396, 412], ["os.path.isdir", "model_to_save.config.save_pretrained", "os.path.join", "torch.save", "hasattr", "model_to_save.state_dict"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.save_pretrained"], ["", "def", "save_pretrained", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\" Save a model and its configuration file to a directory, so that it\n            can be re-loaded using the `:func:`~pytorch_transformers.PreTrainedModel.from_pretrained`` class method.\n        \"\"\"", "\n", "assert", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ",", "\"Saving path should be a directory where the model and configuration can be saved\"", "\n", "\n", "# Only save the model it-self if we are using distributed training", "\n", "model_to_save", "=", "self", ".", "module", "if", "hasattr", "(", "self", ",", "'module'", ")", "else", "self", "\n", "\n", "# Save configuration file", "\n", "model_to_save", ".", "config", ".", "save_pretrained", "(", "save_directory", ")", "\n", "\n", "# If we save using the predefined names, we can load using `from_pretrained`", "\n", "output_model_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "WEIGHTS_NAME", ")", "\n", "\n", "torch", ".", "save", "(", "model_to_save", ".", "state_dict", "(", ")", ",", "output_model_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.from_pretrained": [[413, 608], ["kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "kwargs.pop", "print", "print", "cls", "torch.load.keys", "zip", "getattr", "torch.load.copy", "modeling_utils.PreTrainedModel.from_pretrained.load"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\"Instantiate a pretrained pytorch model from a pre-trained model configuration.\n\n        The model is set in evaluation mode by default using ``model.eval()`` (Dropout modules are deactivated)\n        To train the model, you should first set it back in training mode with ``model.train()``\n\n        The warning ``Weights from XXX not initialized from pretrained model`` means that the weights of XXX do not come pre-trained with the rest of the model.\n        It is up to you to train those weights with a downstream fine-tuning task.\n\n        The warning ``Weights from XXX not used in YYY`` means that the layer XXX is not used by YYY, therefore those weights are discarded.\n\n        Parameters:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a pre-trained model to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing model weights saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained`, e.g.: ``./my_model_directory/``.\n                - a path or url to a `tensorflow index checkpoint file` (e.g. `./tf_model/model.ckpt.index`). In this case, ``from_tf`` should be set to True and a configuration object should be provided as ``config`` argument. This loading path is slower than converting the TensorFlow checkpoint in a PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.\n\n            model_args: (`optional`) Sequence of positional arguments:\n                All remaning positional arguments will be passed to the underlying model's ``__init__`` method\n\n            config: (`optional`) instance of a class derived from :class:`~pytorch_transformers.PretrainedConfig`:\n                Configuration for the model to use instead of an automatically loaded configuation. Configuration can be automatically loaded when:\n\n                - the model is a model provided by the library (loaded with the ``shortcut-name`` string of a pretrained model), or\n                - the model was saved using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and is reloaded by suppling the save directory.\n                - the model is loaded by suppling a local directory as ``pretrained_model_name_or_path`` and a configuration JSON file named `config.json` is found in the directory.\n\n            state_dict: (`optional`) dict:\n                an optional state dictionnary for the model to use instead of a state dictionary loaded from saved weights file.\n                This option can be used if you want to create a model from a pretrained configuration but load your own weights.\n                In this case though, you should check if using :func:`~pytorch_transformers.PreTrainedModel.save_pretrained` and :func:`~pytorch_transformers.PreTrainedModel.from_pretrained` is not a simpler option.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded pre-trained model\n                configuration should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the model weights and configuration files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            output_loading_info: (`optional`) boolean:\n                Set to ``True`` to also return a dictionnary containing missing keys, unexpected keys and error messages.\n\n            kwargs: (`optional`) Remaining dictionary of keyword arguments:\n                Can be used to update the configuration object (after it being loaded) and initiate the model. (e.g. ``output_attention=True``). Behave differently depending on whether a `config` is provided or automatically loaded:\n\n                - If a configuration is provided with ``config``, ``**kwargs`` will be directly passed to the underlying model's ``__init__`` method (we assume all relevant updates to the configuration have already been done)\n                - If a configuration is not provided, ``kwargs`` will be first passed to the configuration class initialization function (:func:`~pytorch_transformers.PretrainedConfig.from_pretrained`). Each key of ``kwargs`` that corresponds to a configuration attribute will be used to override said attribute with the supplied ``kwargs`` value. Remaining keys that do not correspond to any configuration attribute will be passed to the underlying model's ``__init__`` function.\n\n        Examples::\n\n            model = BertModel.from_pretrained('bert-base-uncased')    # Download model and configuration from S3 and cache.\n            model = BertModel.from_pretrained('./test/saved_model/')  # E.g. model was saved using `save_pretrained('./test/saved_model/')`\n            model = BertModel.from_pretrained('bert-base-uncased', output_attention=True)  # Update configuration during loading\n            assert model.config.output_attention == True\n            # Loading from a TF checkpoint file instead of a PyTorch model (slower)\n            config = BertConfig.from_json_file('./tf_model/my_tf_model_config.json')\n            model = BertModel.from_pretrained('./tf_model/my_tf_checkpoint.ckpt.index', from_tf=True, config=config)\n\n        \"\"\"", "\n", "config", "=", "kwargs", ".", "pop", "(", "'config'", ",", "None", ")", "\n", "state_dict", "=", "kwargs", ".", "pop", "(", "'state_dict'", ",", "None", ")", "\n", "cache_dir", "=", "kwargs", ".", "pop", "(", "'cache_dir'", ",", "None", ")", "\n", "from_tf", "=", "kwargs", ".", "pop", "(", "'from_tf'", ",", "False", ")", "\n", "force_download", "=", "kwargs", ".", "pop", "(", "'force_download'", ",", "False", ")", "\n", "proxies", "=", "kwargs", ".", "pop", "(", "'proxies'", ",", "None", ")", "\n", "output_loading_info", "=", "kwargs", ".", "pop", "(", "'output_loading_info'", ",", "False", ")", "\n", "\n", "# Load config", "\n", "if", "config", "is", "None", ":", "\n", "            ", "config", ",", "model_kwargs", "=", "cls", ".", "config_class", ".", "from_pretrained", "(", "\n", "pretrained_model_name_or_path", ",", "*", "model_args", ",", "\n", "cache_dir", "=", "cache_dir", ",", "return_unused_kwargs", "=", "True", ",", "\n", "force_download", "=", "force_download", ",", "\n", "**", "kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "model_kwargs", "=", "kwargs", "\n", "\n", "# Load model", "\n", "", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "            ", "archive_file", "=", "cls", ".", "pretrained_model_archive_map", "[", "pretrained_model_name_or_path", "]", "\n", "", "elif", "os", ".", "path", ".", "isdir", "(", "pretrained_model_name_or_path", ")", ":", "\n", "            ", "if", "from_tf", ":", "\n", "# Directly load from a TensorFlow checkpoint", "\n", "                ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "TF_WEIGHTS_NAME", "+", "\".index\"", ")", "\n", "", "else", ":", "\n", "                ", "archive_file", "=", "os", ".", "path", ".", "join", "(", "pretrained_model_name_or_path", ",", "WEIGHTS_NAME", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "from_tf", ":", "\n", "# Directly load from a TensorFlow checkpoint", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "+", "\".index\"", "\n", "", "else", ":", "\n", "                ", "archive_file", "=", "pretrained_model_name_or_path", "\n", "# redirect to the cache, if necessary", "\n", "", "", "try", ":", "\n", "            ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "cache_dir", ",", "force_download", "=", "force_download", ",", "proxies", "=", "proxies", ")", "\n", "", "except", "EnvironmentError", "as", "e", ":", "\n", "            ", "if", "pretrained_model_name_or_path", "in", "cls", ".", "pretrained_model_archive_map", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Couldn't reach server at '{}' to download pretrained weights.\"", ".", "format", "(", "\n", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\n", "\"Model name '{}' was not found in model name list ({}). \"", "\n", "\"We assumed '{}' was a path or url but couldn't find any file \"", "\n", "\"associated to this path or url.\"", ".", "format", "(", "\n", "pretrained_model_name_or_path", ",", "\n", "', '", ".", "join", "(", "cls", ".", "pretrained_model_archive_map", ".", "keys", "(", ")", ")", ",", "\n", "archive_file", ")", ")", "\n", "", "raise", "e", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading weights file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading weights file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "", "print", "(", "model_kwargs", ")", "\n", "print", "(", "cls", ")", "\n", "# Instantiate model.", "\n", "model", "=", "cls", "(", "config", ",", "*", "model_args", ",", "**", "model_kwargs", ")", "\n", "\n", "if", "state_dict", "is", "None", "and", "not", "from_tf", ":", "\n", "            ", "state_dict", "=", "torch", ".", "load", "(", "resolved_archive_file", ",", "map_location", "=", "'cpu'", ")", "\n", "", "if", "from_tf", ":", "\n", "# Directly load from a TensorFlow checkpoint", "\n", "            ", "return", "cls", ".", "load_tf_weights", "(", "model", ",", "config", ",", "resolved_archive_file", "[", ":", "-", "6", "]", ")", "# Remove the '.index'", "\n", "\n", "# Convert old format to new format if needed from a PyTorch state_dict", "\n", "", "old_keys", "=", "[", "]", "\n", "new_keys", "=", "[", "]", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "new_key", "=", "None", "\n", "if", "'gamma'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'gamma'", ",", "'weight'", ")", "\n", "", "if", "'beta'", "in", "key", ":", "\n", "                ", "new_key", "=", "key", ".", "replace", "(", "'beta'", ",", "'bias'", ")", "\n", "", "if", "new_key", ":", "\n", "                ", "old_keys", ".", "append", "(", "key", ")", "\n", "new_keys", ".", "append", "(", "new_key", ")", "\n", "", "", "for", "old_key", ",", "new_key", "in", "zip", "(", "old_keys", ",", "new_keys", ")", ":", "\n", "            ", "state_dict", "[", "new_key", "]", "=", "state_dict", ".", "pop", "(", "old_key", ")", "\n", "\n", "# Load from a PyTorch state_dict", "\n", "", "missing_keys", "=", "[", "]", "\n", "unexpected_keys", "=", "[", "]", "\n", "error_msgs", "=", "[", "]", "\n", "# copy state_dict so _load_from_state_dict can modify it", "\n", "metadata", "=", "getattr", "(", "state_dict", ",", "'_metadata'", ",", "None", ")", "\n", "state_dict", "=", "state_dict", ".", "copy", "(", ")", "\n", "if", "metadata", "is", "not", "None", ":", "\n", "            ", "state_dict", ".", "_metadata", "=", "metadata", "\n", "\n", "", "def", "load", "(", "module", ",", "prefix", "=", "''", ")", ":", "\n", "            ", "local_metadata", "=", "{", "}", "if", "metadata", "is", "None", "else", "metadata", ".", "get", "(", "prefix", "[", ":", "-", "1", "]", ",", "{", "}", ")", "\n", "module", ".", "_load_from_state_dict", "(", "\n", "state_dict", ",", "prefix", ",", "local_metadata", ",", "True", ",", "missing_keys", ",", "unexpected_keys", ",", "error_msgs", ")", "\n", "for", "name", ",", "child", "in", "module", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "child", "is", "not", "None", ":", "\n", "                    ", "load", "(", "child", ",", "prefix", "+", "name", "+", "'.'", ")", "\n", "\n", "# Make sure we are able to load base models as well as derived models (with heads)", "\n", "", "", "", "start_prefix", "=", "''", "\n", "model_to_load", "=", "model", "\n", "if", "not", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "start_prefix", "=", "cls", ".", "base_model_prefix", "+", "'.'", "\n", "", "if", "hasattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "and", "not", "any", "(", "s", ".", "startswith", "(", "cls", ".", "base_model_prefix", ")", "for", "s", "in", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "model_to_load", "=", "getattr", "(", "model", ",", "cls", ".", "base_model_prefix", ")", "\n", "\n", "", "load", "(", "model_to_load", ",", "prefix", "=", "start_prefix", ")", "\n", "if", "len", "(", "missing_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights of {} not initialized from pretrained model: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "missing_keys", ")", ")", "\n", "", "if", "len", "(", "unexpected_keys", ")", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "\"Weights from pretrained model not used in {}: {}\"", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "unexpected_keys", ")", ")", "\n", "", "if", "len", "(", "error_msgs", ")", ">", "0", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Error(s) in loading state_dict for {}:\\n\\t{}'", ".", "format", "(", "\n", "model", ".", "__class__", ".", "__name__", ",", "\"\\n\\t\"", ".", "join", "(", "error_msgs", ")", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'tie_weights'", ")", ":", "\n", "            ", "model", ".", "tie_weights", "(", ")", "# make sure word embedding weights are still tied", "\n", "\n", "# Set model in evaluation mode to desactivate DropOut modules by default", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "if", "output_loading_info", ":", "\n", "            ", "loading_info", "=", "{", "\"missing_keys\"", ":", "missing_keys", ",", "\"unexpected_keys\"", ":", "unexpected_keys", ",", "\"error_msgs\"", ":", "error_msgs", "}", "\n", "return", "model", ",", "loading_info", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.Conv1D.__init__": [[611, 621], ["torch.nn.Module.__init__", "torch.empty", "torch.nn.init.normal_", "torch.nn.Parameter", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nf", ",", "nx", ")", ":", "\n", "        ", "\"\"\" Conv1D layer as defined by Radford et al. for OpenAI GPT (and also used in GPT-2)\n            Basically works like a Linear layer but the weights are transposed\n        \"\"\"", "\n", "super", "(", "Conv1D", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "nf", "=", "nf", "\n", "w", "=", "torch", ".", "empty", "(", "nx", ",", "nf", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "w", ",", "std", "=", "0.02", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "w", ")", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "nf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.Conv1D.forward": [[622, 627], ["torch.addmm", "x.view.view.view", "x.view.view.view", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "size_out", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "nf", ",", ")", "\n", "x", "=", "torch", ".", "addmm", "(", "self", ".", "bias", ",", "x", ".", "view", "(", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", ",", "self", ".", "weight", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "size_out", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerStartLogits.__init__": [[631, 634], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerStartLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerStartLogits.forward": [[635, 647], ["modeling_utils.PoolerStartLogits.dense().squeeze", "modeling_utils.PoolerStartLogits.dense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape `(batch_size, seq_len)`\n                invalid position mask such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "x", "=", "self", ".", "dense", "(", "hidden_states", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerEndLogits.__init__": [[652, 658], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.LayerNorm", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerEndLogits", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "LayerNorm", "=", "nn", ".", "LayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerEndLogits.forward": [[659, 688], ["modeling_utils.PoolerEndLogits.dense_0", "modeling_utils.PoolerEndLogits.activation", "modeling_utils.PoolerEndLogits.LayerNorm", "modeling_utils.PoolerEndLogits.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather", "start_states.expand.expand.expand", "torch.cat", "modeling_utils.PoolerEndLogits.dense_1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\" Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to hidden_states\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span:\n            **p_mask**: (`optional`) ``torch.FloatTensor`` of shape ``(batch_size, seq_len)``\n                Mask of invalid position such as query and special symbols (PAD, SEP, CLS)\n                1.0 means token should be masked.\n        \"\"\"", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "slen", ",", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "2", ":", "]", "\n", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "start_states", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ")", "# shape (bsz, slen, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "hidden_states", ",", "start_states", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "LayerNorm", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "if", "p_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", "*", "(", "1", "-", "p_mask", ")", "-", "1e30", "*", "p_mask", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerAnswerClass.__init__": [[692, 697], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "PoolerAnswerClass", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense_0", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", "*", "2", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "dense_1", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PoolerAnswerClass.forward": [[698, 732], ["modeling_utils.PoolerAnswerClass.dense_0", "modeling_utils.PoolerAnswerClass.activation", "modeling_utils.PoolerAnswerClass.dense_1().squeeze", "start_positions[].expand", "hidden_states.gather().squeeze", "cls_index[].expand", "hidden_states.gather().squeeze", "torch.cat", "modeling_utils.PoolerAnswerClass.dense_1", "hidden_states.gather", "hidden_states.gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_states", "=", "None", ",", "start_positions", "=", "None", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            One of ``start_states``, ``start_positions`` should be not None.\n            If both are set, ``start_positions`` overrides ``start_states``.\n\n            **start_states**: ``torch.LongTensor`` of shape identical to ``hidden_states``.\n                hidden states of the first tokens for the labeled span.\n            **start_positions**: ``torch.LongTensor`` of shape ``(batch_size,)``\n                position of the first token for the labeled span.\n            **cls_index**: torch.LongTensor of shape ``(batch_size,)``\n                position of the CLS token. If None, take the last token.\n\n            note(Original repo):\n                no dependency on end_feature so that we can obtain one single `cls_logits`\n                for each sample\n        \"\"\"", "\n", "hsz", "=", "hidden_states", ".", "shape", "[", "-", "1", "]", "\n", "assert", "start_states", "is", "not", "None", "or", "start_positions", "is", "not", "None", ",", "\"One of start_states, start_positions should be not None\"", "\n", "if", "start_positions", "is", "not", "None", ":", "\n", "            ", "start_positions", "=", "start_positions", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "start_states", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "start_positions", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "\n", "", "if", "cls_index", "is", "not", "None", ":", "\n", "            ", "cls_index", "=", "cls_index", "[", ":", ",", "None", ",", "None", "]", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, 1, hsz)", "\n", "cls_token_state", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, hsz)", "\n", "", "else", ":", "\n", "            ", "cls_token_state", "=", "hidden_states", "[", ":", ",", "-", "1", ",", ":", "]", "# shape (bsz, hsz)", "\n", "\n", "", "x", "=", "self", ".", "dense_0", "(", "torch", ".", "cat", "(", "[", "start_states", ",", "cls_token_state", "]", ",", "dim", "=", "-", "1", ")", ")", "\n", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "x", "=", "self", ".", "dense_1", "(", "x", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.SQuADHead.__init__": [[774, 782], ["torch.nn.Module.__init__", "modeling_utils.PoolerStartLogits", "modeling_utils.PoolerEndLogits", "modeling_utils.PoolerAnswerClass"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SQuADHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_n_top", "=", "config", ".", "start_n_top", "\n", "self", ".", "end_n_top", "=", "config", ".", "end_n_top", "\n", "\n", "self", ".", "start_logits", "=", "PoolerStartLogits", "(", "config", ")", "\n", "self", ".", "end_logits", "=", "PoolerEndLogits", "(", "config", ")", "\n", "self", ".", "answer_class", "=", "PoolerAnswerClass", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.SQuADHead.forward": [[783, 841], ["modeling_utils.SQuADHead.start_logits", "modeling_utils.SQuADHead.end_logits", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "hidden_states.size", "torch.nn.functional.softmax", "torch.topk", "start_top_index.unsqueeze().expand", "torch.gather", "torch.einsum.unsqueeze().expand", "hidden_states.unsqueeze().expand_as", "modeling_utils.SQuADHead.end_logits", "torch.nn.functional.softmax", "torch.topk", "end_top_log_probs.view.view.view", "end_top_index.view.view.view", "torch.einsum", "modeling_utils.SQuADHead.answer_class", "modeling_utils.SQuADHead.answer_class", "torch.nn.BCEWithLogitsLoss", "torch.nn.BCEWithLogitsLoss.", "p_mask.unsqueeze", "x.squeeze_", "start_top_index.unsqueeze", "torch.einsum.unsqueeze", "hidden_states.unsqueeze", "x.dim"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "(", ")", "\n", "\n", "start_logits", "=", "self", ".", "start_logits", "(", "hidden_states", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, let's remove the dimension added by batch splitting", "\n", "            ", "for", "x", "in", "(", "start_positions", ",", "end_positions", ",", "cls_index", ",", "is_impossible", ")", ":", "\n", "                ", "if", "x", "is", "not", "None", "and", "x", ".", "dim", "(", ")", ">", "1", ":", "\n", "                    ", "x", ".", "squeeze_", "(", "-", "1", ")", "\n", "\n", "# during training, compute the end logits based on the ground truth of the start position", "\n", "", "", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "\n", "if", "cls_index", "is", "not", "None", "and", "is_impossible", "is", "not", "None", ":", "\n", "# Predict answerability from the representation of CLS and START", "\n", "                ", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_positions", "=", "start_positions", ",", "cls_index", "=", "cls_index", ")", "\n", "loss_fct_cls", "=", "nn", ".", "BCEWithLogitsLoss", "(", ")", "\n", "cls_loss", "=", "loss_fct_cls", "(", "cls_logits", ",", "is_impossible", ")", "\n", "\n", "# note(zhiliny): by default multiply the loss by 0.5 so that the scale is comparable to start_loss and end_loss", "\n", "total_loss", "+=", "cls_loss", "*", "0.5", "\n", "\n", "", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "else", ":", "\n", "# during inference, compute the end logits based on beam search", "\n", "            ", "bsz", ",", "slen", ",", "hsz", "=", "hidden_states", ".", "size", "(", ")", "\n", "start_log_probs", "=", "F", ".", "softmax", "(", "start_logits", ",", "dim", "=", "-", "1", ")", "# shape (bsz, slen)", "\n", "\n", "start_top_log_probs", ",", "start_top_index", "=", "torch", ".", "topk", "(", "start_log_probs", ",", "self", ".", "start_n_top", ",", "dim", "=", "-", "1", ")", "# shape (bsz, start_n_top)", "\n", "start_top_index_exp", "=", "start_top_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "-", "1", ",", "-", "1", ",", "hsz", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "torch", ".", "gather", "(", "hidden_states", ",", "-", "2", ",", "start_top_index_exp", ")", "# shape (bsz, start_n_top, hsz)", "\n", "start_states", "=", "start_states", ".", "unsqueeze", "(", "1", ")", ".", "expand", "(", "-", "1", ",", "slen", ",", "-", "1", ",", "-", "1", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "\n", "hidden_states_expanded", "=", "hidden_states", ".", "unsqueeze", "(", "2", ")", ".", "expand_as", "(", "start_states", ")", "# shape (bsz, slen, start_n_top, hsz)", "\n", "p_mask", "=", "p_mask", ".", "unsqueeze", "(", "-", "1", ")", "if", "p_mask", "is", "not", "None", "else", "None", "\n", "end_logits", "=", "self", ".", "end_logits", "(", "hidden_states_expanded", ",", "start_states", "=", "start_states", ",", "p_mask", "=", "p_mask", ")", "\n", "end_log_probs", "=", "F", ".", "softmax", "(", "end_logits", ",", "dim", "=", "1", ")", "# shape (bsz, slen, start_n_top)", "\n", "\n", "end_top_log_probs", ",", "end_top_index", "=", "torch", ".", "topk", "(", "end_log_probs", ",", "self", ".", "end_n_top", ",", "dim", "=", "1", ")", "# shape (bsz, end_n_top, start_n_top)", "\n", "end_top_log_probs", "=", "end_top_log_probs", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "end_top_index", "=", "end_top_index", ".", "view", "(", "-", "1", ",", "self", ".", "start_n_top", "*", "self", ".", "end_n_top", ")", "\n", "\n", "start_states", "=", "torch", ".", "einsum", "(", "\"blh,bl->bh\"", ",", "hidden_states", ",", "start_log_probs", ")", "\n", "cls_logits", "=", "self", ".", "answer_class", "(", "hidden_states", ",", "start_states", "=", "start_states", ",", "cls_index", "=", "cls_index", ")", "\n", "\n", "outputs", "=", "(", "start_top_log_probs", ",", "start_top_index", ",", "end_top_log_probs", ",", "end_top_index", ",", "cls_logits", ")", "+", "outputs", "\n", "\n", "# return start_top_log_probs, start_top_index, end_top_log_probs, end_top_index, cls_logits", "\n", "# or (if labels are provided) (total_loss,)", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.SequenceSummary.__init__": [[858, 887], ["torch.nn.Module.__init__", "Identity", "Identity", "Identity", "Identity", "hasattr", "hasattr", "torch.nn.Linear", "hasattr", "torch.nn.Tanh", "hasattr", "torch.nn.Dropout", "hasattr", "torch.nn.Dropout", "hasattr"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "SequenceSummary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "summary_type", "=", "config", ".", "summary_type", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "else", "'last'", "\n", "if", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "# We should use a standard multi-head attention module with absolute positional embedding for that.", "\n", "# Cf. https://github.com/zihangdai/xlnet/blob/master/modeling.py#L253-L276", "\n", "# We can probably just use the multi-head attention module of PyTorch >=1.1.0", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "self", ".", "summary", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_use_proj'", ")", "and", "config", ".", "summary_use_proj", ":", "\n", "            ", "if", "hasattr", "(", "config", ",", "'summary_proj_to_labels'", ")", "and", "config", ".", "summary_proj_to_labels", "and", "config", ".", "num_labels", ">", "0", ":", "\n", "                ", "num_classes", "=", "config", ".", "num_labels", "\n", "", "else", ":", "\n", "                ", "num_classes", "=", "config", ".", "hidden_size", "\n", "", "self", ".", "summary", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "activation", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_activation'", ")", "and", "config", ".", "summary_activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n", "", "self", ".", "first_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_first_dropout'", ")", "and", "config", ".", "summary_first_dropout", ">", "0", ":", "\n", "            ", "self", ".", "first_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_first_dropout", ")", "\n", "\n", "", "self", ".", "last_dropout", "=", "Identity", "(", ")", "\n", "if", "hasattr", "(", "config", ",", "'summary_last_dropout'", ")", "and", "config", ".", "summary_last_dropout", ">", "0", ":", "\n", "            ", "self", ".", "last_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "summary_last_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.SequenceSummary.forward": [[888, 918], ["modeling_utils.SequenceSummary.first_dropout", "modeling_utils.SequenceSummary.summary", "modeling_utils.SequenceSummary.activation", "modeling_utils.SequenceSummary.last_dropout", "hidden_states.mean", "hidden_states.gather().squeeze", "torch.full_like", "cls_index.expand.expand.unsqueeze().unsqueeze", "cls_index.expand.expand.expand", "hidden_states.gather", "cls_index.expand.expand.unsqueeze", "hidden_states.size", "cls_index.expand.expand.dim"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ",", "cls_index", "=", "None", ")", ":", "\n", "        ", "\"\"\" hidden_states: float Tensor in shape [bsz, seq_len, hidden_size], the hidden-states of the last layer.\n            cls_index: [optional] position of the classification token if summary_type == 'cls_index',\n                shape (bsz,) or more generally (bsz, ...) where ... are optional leading dimensions of hidden_states.\n                if summary_type == 'cls_index' and cls_index is None:\n                    we take the last token of the sequence as classification token\n        \"\"\"", "\n", "if", "self", ".", "summary_type", "==", "'last'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "-", "1", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'first'", ":", "\n", "            ", "output", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "", "elif", "self", ".", "summary_type", "==", "'mean'", ":", "\n", "            ", "output", "=", "hidden_states", ".", "mean", "(", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "summary_type", "==", "'cls_index'", ":", "\n", "            ", "if", "cls_index", "is", "None", ":", "\n", "                ", "cls_index", "=", "torch", ".", "full_like", "(", "hidden_states", "[", "...", ",", ":", "1", ",", ":", "]", ",", "hidden_states", ".", "shape", "[", "-", "2", "]", "-", "1", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "else", ":", "\n", "                ", "cls_index", "=", "cls_index", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "cls_index", "=", "cls_index", ".", "expand", "(", "(", "-", "1", ",", ")", "*", "(", "cls_index", ".", "dim", "(", ")", "-", "1", ")", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", ")", "\n", "# shape of cls_index: (bsz, XX, 1, hidden_size) where XX are optional leading dim of hidden_states", "\n", "", "output", "=", "hidden_states", ".", "gather", "(", "-", "2", ",", "cls_index", ")", ".", "squeeze", "(", "-", "2", ")", "# shape (bsz, XX, hidden_size)", "\n", "", "elif", "self", ".", "summary_type", "==", "'attn'", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n", "", "output", "=", "self", ".", "first_dropout", "(", "output", ")", "\n", "output", "=", "self", ".", "summary", "(", "output", ")", "\n", "output", "=", "self", ".", "activation", "(", "output", ")", "\n", "output", "=", "self", ".", "last_dropout", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer": [[920, 943], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "torch.nn.Linear().to", "nn.Linear().to.weight.copy_", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "nn.Linear().to.bias.copy_", "layer.weight.index_select().clone", "layer.bias.clone().detach", "layer.bias[].clone().detach", "torch.nn.Linear", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select", "layer.bias.clone", "layer.bias[].clone"], "function", ["None"], ["", "", "def", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", ")", ":", "\n", "    ", "\"\"\" Prune a linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "if", "dim", "==", "1", ":", "\n", "            ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "            ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "nn", ".", "Linear", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ",", "bias", "=", "layer", ".", "bias", "is", "not", "None", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "if", "layer", ".", "bias", "is", "not", "None", ":", "\n", "        ", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer": [[945, 967], ["index.to.to", "layer.weight.index_select().clone().detach", "list", "len", "Conv1D().to", "Conv1D().to.weight.copy_", "Conv1D().to.bias.copy_", "layer.bias.clone().detach", "layer.bias[].clone().detach", "layer.weight.size", "layer.weight.index_select().clone().detach.contiguous", "layer.bias[].clone().detach.contiguous", "layer.weight.index_select().clone", "modeling_utils.Conv1D", "layer.bias.clone", "layer.bias[].clone", "layer.weight.index_select"], "function", ["None"], ["", "def", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D layer (a model parameters) to keep only entries in index.\n        A Conv1D work as a Linear layer (see e.g. BERT) but the weights are transposed.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "index", "=", "index", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "W", "=", "layer", ".", "weight", ".", "index_select", "(", "dim", ",", "index", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "if", "dim", "==", "0", ":", "\n", "        ", "b", "=", "layer", ".", "bias", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "layer", ".", "bias", "[", "index", "]", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "new_size", "=", "list", "(", "layer", ".", "weight", ".", "size", "(", ")", ")", "\n", "new_size", "[", "dim", "]", "=", "len", "(", "index", ")", "\n", "new_layer", "=", "Conv1D", "(", "new_size", "[", "1", "]", ",", "new_size", "[", "0", "]", ")", ".", "to", "(", "layer", ".", "weight", ".", "device", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "weight", ".", "copy_", "(", "W", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "weight", ".", "requires_grad", "=", "True", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "False", "\n", "new_layer", ".", "bias", ".", "copy_", "(", "b", ".", "contiguous", "(", ")", ")", "\n", "new_layer", ".", "bias", ".", "requires_grad", "=", "True", "\n", "return", "new_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_layer": [[969, 980], ["isinstance", "modeling_utils.prune_linear_layer", "isinstance", "modeling_utils.prune_conv1d_layer", "ValueError"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_layer", "(", "layer", ",", "index", ",", "dim", "=", "None", ")", ":", "\n", "    ", "\"\"\" Prune a Conv1D or nn.Linear layer (a model parameters) to keep only entries in index.\n        Return the pruned layer as a new layer with requires_grad=True.\n        Used to remove heads.\n    \"\"\"", "\n", "if", "isinstance", "(", "layer", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "return", "prune_linear_layer", "(", "layer", ",", "index", ",", "dim", "=", "0", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "elif", "isinstance", "(", "layer", ",", "Conv1D", ")", ":", "\n", "        ", "return", "prune_conv1d_layer", "(", "layer", ",", "index", ",", "dim", "=", "1", "if", "dim", "is", "None", "else", "dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Can't prune layer of class {}\"", ".", "format", "(", "layer", ".", "__class__", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertConfig.__init__": [[183, 219], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30522", ",", "\n", "hidden_size", "=", "768", ",", "\n", "num_hidden_layers", "=", "12", ",", "\n", "num_attention_heads", "=", "12", ",", "\n", "intermediate_size", "=", "3072", ",", "\n", "hidden_act", "=", "\"gelu\"", ",", "\n", "hidden_dropout_prob", "=", "0.1", ",", "\n", "attention_probs_dropout_prob", "=", "0.1", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "type_vocab_size", "=", "2", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BertConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_hidden_layers", "=", "num_hidden_layers", "\n", "self", ".", "num_attention_heads", "=", "num_attention_heads", "\n", "self", ".", "hidden_act", "=", "hidden_act", "\n", "self", ".", "intermediate_size", "=", "intermediate_size", "\n", "self", ".", "hidden_dropout_prob", "=", "hidden_dropout_prob", "\n", "self", ".", "attention_probs_dropout_prob", "=", "attention_probs_dropout_prob", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "type_vocab_size", "=", "type_vocab_size", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertEmbeddings.__init__": [[232, 242], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Embedding", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEmbeddings", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "word_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "hidden_size", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "token_type_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "type_vocab_size", ",", "config", ".", "hidden_size", ")", "\n", "\n", "# self.LayerNorm is not snake-cased to stick with TensorFlow model variable name and be able to load", "\n", "# any TensorFlow checkpoint file", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertEmbeddings.forward": [[243, 259], ["input_ids.size", "modeling_bert.BertEmbeddings.word_embeddings", "modeling_bert.BertEmbeddings.position_embeddings", "modeling_bert.BertEmbeddings.token_type_embeddings", "modeling_bert.BertEmbeddings.LayerNorm", "modeling_bert.BertEmbeddings.dropout", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "torch.zeros_like", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "position_ids", "=", "None", ")", ":", "\n", "        ", "seq_length", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "seq_length", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "", "words_embeddings", "=", "self", ".", "word_embeddings", "(", "input_ids", ")", "\n", "position_embeddings", "=", "self", ".", "position_embeddings", "(", "position_ids", ")", "\n", "token_type_embeddings", "=", "self", ".", "token_type_embeddings", "(", "token_type_ids", ")", "\n", "\n", "embeddings", "=", "words_embeddings", "+", "position_embeddings", "+", "token_type_embeddings", "\n", "embeddings", "=", "self", ".", "LayerNorm", "(", "embeddings", ")", "\n", "embeddings", "=", "self", ".", "dropout", "(", "embeddings", ")", "\n", "return", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.__init__": [[262, 279], ["torch.nn.Module.__init__", "int", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "ValueError"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "config", ".", "hidden_size", "%", "config", ".", "num_attention_heads", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"The hidden size (%d) is not a multiple of the number of attention \"", "\n", "\"heads (%d)\"", "%", "(", "config", ".", "hidden_size", ",", "config", ".", "num_attention_heads", ")", ")", "\n", "", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "num_attention_heads", "=", "config", ".", "num_attention_heads", "\n", "self", ".", "attention_head_size", "=", "int", "(", "config", ".", "hidden_size", "/", "config", ".", "num_attention_heads", ")", "\n", "self", ".", "all_head_size", "=", "self", ".", "num_attention_heads", "*", "self", ".", "attention_head_size", "\n", "\n", "self", ".", "query", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "key", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "self", ".", "value", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "all_head_size", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attention_probs_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.transpose_for_scores": [[280, 284], ["x.view.view.view", "x.view.view.permute", "x.view.view.size"], "methods", ["None"], ["", "def", "transpose_for_scores", "(", "self", ",", "x", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "num_attention_heads", ",", "self", ".", "attention_head_size", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "\n", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.forward": [[285, 319], ["modeling_bert.BertSelfAttention.query", "modeling_bert.BertSelfAttention.key", "modeling_bert.BertSelfAttention.value", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "modeling_bert.BertSelfAttention.transpose_for_scores", "torch.matmul", "modeling_bert.BertSelfAttention.dropout", "torch.matmul", "context_layer.view.view.permute().contiguous", "context_layer.view.view.view", "modeling_bert.BertSelfAttention.transpose", "math.sqrt", "torch.nn.Softmax", "context_layer.view.view.permute", "context_layer.view.view.size"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.transpose_for_scores", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfAttention.transpose_for_scores"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "mixed_query_layer", "=", "self", ".", "query", "(", "hidden_states", ")", "\n", "mixed_key_layer", "=", "self", ".", "key", "(", "hidden_states", ")", "\n", "mixed_value_layer", "=", "self", ".", "value", "(", "hidden_states", ")", "\n", "\n", "query_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_query_layer", ")", "\n", "key_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_key_layer", ")", "\n", "value_layer", "=", "self", ".", "transpose_for_scores", "(", "mixed_value_layer", ")", "\n", "\n", "# Take the dot product between \"query\" and \"key\" to get the raw attention scores.", "\n", "attention_scores", "=", "torch", ".", "matmul", "(", "query_layer", ",", "key_layer", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", ")", "\n", "attention_scores", "=", "attention_scores", "/", "math", ".", "sqrt", "(", "self", ".", "attention_head_size", ")", "\n", "# Apply the attention mask is (precomputed for all layers in BertModel forward() function)", "\n", "attention_scores", "=", "attention_scores", "+", "attention_mask", "\n", "\n", "# Normalize the attention scores to probabilities.", "\n", "attention_probs", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "attention_scores", ")", "\n", "\n", "# This is actually dropping out entire tokens to attend to, which might", "\n", "# seem a bit unusual, but is taken from the original Transformer paper.", "\n", "attention_probs", "=", "self", ".", "dropout", "(", "attention_probs", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "attention_probs", "=", "attention_probs", "*", "head_mask", "\n", "\n", "", "context_layer", "=", "torch", ".", "matmul", "(", "attention_probs", ",", "value_layer", ")", "\n", "\n", "context_layer", "=", "context_layer", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_context_layer_shape", "=", "context_layer", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "self", ".", "all_head_size", ",", ")", "\n", "context_layer", "=", "context_layer", ".", "view", "(", "*", "new_context_layer_shape", ")", "\n", "\n", "outputs", "=", "(", "context_layer", ",", "attention_probs", ")", "if", "self", ".", "output_attentions", "else", "(", "context_layer", ",", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfOutput.__init__": [[322, 327], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertSelfOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertSelfOutput.forward": [[328, 333], ["modeling_bert.BertSelfOutput.dense", "modeling_bert.BertSelfOutput.dropout", "modeling_bert.BertSelfOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertAttention.__init__": [[336, 341], ["torch.nn.Module.__init__", "modeling_bert.BertSelfAttention", "modeling_bert.BertSelfOutput", "set"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "self", "=", "BertSelfAttention", "(", "config", ")", "\n", "self", ".", "output", "=", "BertSelfOutput", "(", "config", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertAttention.prune_heads": [[342, 364], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_bert.BertAttention.pruned_heads.union", "len", "set", "len", "sum", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "self", ".", "num_attention_heads", ",", "self", ".", "self", ".", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "# Convert to set and emove already pruned heads", "\n", "for", "head", "in", "heads", ":", "\n", "# Compute how many pruned heads are before the head and move the index accordingly", "\n", "            ", "head", "=", "head", "-", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "\n", "# Prune linear layers", "\n", "self", ".", "self", ".", "query", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "query", ",", "index", ")", "\n", "self", ".", "self", ".", "key", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "key", ",", "index", ")", "\n", "self", ".", "self", ".", "value", "=", "prune_linear_layer", "(", "self", ".", "self", ".", "value", ",", "index", ")", "\n", "self", ".", "output", ".", "dense", "=", "prune_linear_layer", "(", "self", ".", "output", ".", "dense", ",", "index", ",", "dim", "=", "1", ")", "\n", "\n", "# Update hyper params and store pruned heads", "\n", "self", ".", "self", ".", "num_attention_heads", "=", "self", ".", "self", ".", "num_attention_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "self", ".", "all_head_size", "=", "self", ".", "self", ".", "attention_head_size", "*", "self", ".", "self", ".", "num_attention_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertAttention.forward": [[365, 370], ["modeling_bert.BertAttention.self", "modeling_bert.BertAttention.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_tensor", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "self_outputs", "=", "self", ".", "self", "(", "input_tensor", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "self", ".", "output", "(", "self_outputs", "[", "0", "]", ",", "input_tensor", ")", "\n", "outputs", "=", "(", "attention_output", ",", ")", "+", "self_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertIntermediate.__init__": [[373, 380], ["torch.nn.Module.__init__", "torch.nn.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertIntermediate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "intermediate_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "intermediate_act_fn", "=", "config", ".", "hidden_act", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertIntermediate.forward": [[381, 385], ["modeling_bert.BertIntermediate.dense", "modeling_bert.BertIntermediate.intermediate_act_fn"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "intermediate_act_fn", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOutput.__init__": [[388, 393], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOutput", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "intermediate_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOutput.forward": [[394, 399], ["modeling_bert.BertOutput.dense", "modeling_bert.BertOutput.dropout", "modeling_bert.BertOutput.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "input_tensor", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "dropout", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", "+", "input_tensor", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertLayer.__init__": [[402, 407], ["torch.nn.Module.__init__", "modeling_bert.BertAttention", "modeling_bert.BertIntermediate", "modeling_bert.BertOutput"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "BertAttention", "(", "config", ")", "\n", "self", ".", "intermediate", "=", "BertIntermediate", "(", "config", ")", "\n", "self", ".", "output", "=", "BertOutput", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertLayer.forward": [[408, 415], ["modeling_bert.BertLayer.attention", "modeling_bert.BertLayer.intermediate", "modeling_bert.BertLayer.output"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attention_outputs", "=", "self", ".", "attention", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", ")", "\n", "attention_output", "=", "attention_outputs", "[", "0", "]", "\n", "intermediate_output", "=", "self", ".", "intermediate", "(", "attention_output", ")", "\n", "layer_output", "=", "self", ".", "output", "(", "intermediate_output", ",", "attention_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_outputs", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertEncoder.__init__": [[418, 423], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "modeling_bert.BertLayer", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "self", ".", "layer", "=", "nn", ".", "ModuleList", "(", "[", "BertLayer", "(", "config", ")", "for", "_", "in", "range", "(", "config", ".", "num_hidden_layers", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertEncoder.forward": [[424, 447], ["enumerate", "layer_module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ",", "attention_mask", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "all_hidden_states", "=", "(", ")", "\n", "all_attentions", "=", "(", ")", "\n", "for", "i", ",", "layer_module", "in", "enumerate", "(", "self", ".", "layer", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "layer_outputs", "=", "layer_module", "(", "hidden_states", ",", "attention_mask", ",", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", "=", "layer_outputs", "[", "0", "]", "\n", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "layer_outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last-layer hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPooler.__init__": [[450, 454], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Tanh"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPooler", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "self", ".", "activation", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPooler.forward": [[455, 462], ["modeling_bert.BertPooler.dense", "modeling_bert.BertPooler.activation"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "# We \"pool\" the model by simply taking the hidden state corresponding", "\n", "# to the first token.", "\n", "        ", "first_token_tensor", "=", "hidden_states", "[", ":", ",", "0", "]", "\n", "pooled_output", "=", "self", ".", "dense", "(", "first_token_tensor", ")", "\n", "pooled_output", "=", "self", ".", "activation", "(", "pooled_output", ")", "\n", "return", "pooled_output", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPredictionHeadTransform.__init__": [[465, 473], ["torch.nn.Module.__init__", "torch.nn.Linear", "BertLayerNorm", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPredictionHeadTransform", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "hidden_size", ")", "\n", "if", "isinstance", "(", "config", ".", "hidden_act", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "and", "isinstance", "(", "config", ".", "hidden_act", ",", "unicode", ")", ")", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "ACT2FN", "[", "config", ".", "hidden_act", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform_act_fn", "=", "config", ".", "hidden_act", "\n", "", "self", ".", "LayerNorm", "=", "BertLayerNorm", "(", "config", ".", "hidden_size", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPredictionHeadTransform.forward": [[474, 479], ["modeling_bert.BertPredictionHeadTransform.dense", "modeling_bert.BertPredictionHeadTransform.transform_act_fn", "modeling_bert.BertPredictionHeadTransform.LayerNorm"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "dense", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "transform_act_fn", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "LayerNorm", "(", "hidden_states", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertLMPredictionHead.__init__": [[482, 493], ["torch.nn.Module.__init__", "modeling_bert.BertPredictionHeadTransform", "torch.nn.Linear", "torch.nn.Parameter", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertLMPredictionHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "transform", "=", "BertPredictionHeadTransform", "(", "config", ")", "\n", "\n", "# The output weights are the same as the input embeddings, but there is", "\n", "# an output-only bias for each token.", "\n", "self", ".", "decoder", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "\n", "config", ".", "vocab_size", ",", "\n", "bias", "=", "False", ")", "\n", "\n", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "config", ".", "vocab_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertLMPredictionHead.forward": [[494, 498], ["modeling_bert.BertLMPredictionHead.transform", "modeling_bert.BertLMPredictionHead.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "hidden_states", "=", "self", ".", "transform", "(", "hidden_states", ")", "\n", "hidden_states", "=", "self", ".", "decoder", "(", "hidden_states", ")", "+", "self", ".", "bias", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOnlyMLMHead.__init__": [[501, 504], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyMLMHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOnlyMLMHead.forward": [[505, 508], ["modeling_bert.BertOnlyMLMHead.predictions"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "return", "prediction_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOnlyNSPHead.__init__": [[511, 514], ["torch.nn.Module.__init__", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertOnlyNSPHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertOnlyNSPHead.forward": [[515, 518], ["modeling_bert.BertOnlyNSPHead.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "pooled_output", ")", ":", "\n", "        ", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPreTrainingHeads.__init__": [[521, 525], ["torch.nn.Module.__init__", "modeling_bert.BertLMPredictionHead", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertPreTrainingHeads", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "predictions", "=", "BertLMPredictionHead", "(", "config", ")", "\n", "self", ".", "seq_relationship", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPreTrainingHeads.forward": [[526, 530], ["modeling_bert.BertPreTrainingHeads.predictions", "modeling_bert.BertPreTrainingHeads.seq_relationship"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "sequence_output", ",", "pooled_output", ")", ":", "\n", "        ", "prediction_scores", "=", "self", ".", "predictions", "(", "sequence_output", ")", "\n", "seq_relationship_score", "=", "self", ".", "seq_relationship", "(", "pooled_output", ")", "\n", "return", "prediction_scores", ",", "seq_relationship_score", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertPreTrainedModel._init_weights": [[541, 552], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "", "elif", "isinstance", "(", "module", ",", "BertLayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertModel.__init__": [[648, 656], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertEmbeddings", "modeling_bert.BertEncoder", "modeling_bert.BertPooler", "modeling_bert.BertModel.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "embeddings", "=", "BertEmbeddings", "(", "config", ")", "\n", "self", ".", "encoder", "=", "BertEncoder", "(", "config", ")", "\n", "self", ".", "pooler", "=", "BertPooler", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertModel._resize_token_embeddings": [[657, 662], ["modeling_bert.BertModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "old_embeddings", "=", "self", ".", "embeddings", ".", "word_embeddings", "\n", "new_embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "old_embeddings", ",", "new_num_tokens", ")", "\n", "self", ".", "embeddings", ".", "word_embeddings", "=", "new_embeddings", "\n", "return", "self", ".", "embeddings", ".", "word_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertModel._prune_heads": [[663, 670], ["heads_to_prune.items", "modeling_bert.BertModel.encoder.layer[].attention.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "encoder", ".", "layer", "[", "layer", "]", ".", "attention", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertModel.forward": [[671, 716], ["torch.ones_like.unsqueeze().unsqueeze", "extended_attention_mask.to.to.to", "modeling_bert.BertModel.embeddings", "modeling_bert.BertModel.encoder", "modeling_bert.BertModel.pooler", "torch.ones_like", "torch.zeros_like", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "torch.ones_like.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_bert.BertModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "attention_mask", "is", "None", ":", "\n", "            ", "attention_mask", "=", "torch", ".", "ones_like", "(", "input_ids", ")", "\n", "", "if", "token_type_ids", "is", "None", ":", "\n", "            ", "token_type_ids", "=", "torch", ".", "zeros_like", "(", "input_ids", ")", "\n", "\n", "# We create a 3D attention mask from a 2D tensor mask.", "\n", "# Sizes are [batch_size, 1, 1, to_seq_length]", "\n", "# So we can broadcast to [batch_size, num_heads, from_seq_length, to_seq_length]", "\n", "# this attention mask is more simple than the triangular masking of causal attention", "\n", "# used in OpenAI GPT, we just need to prepare the broadcast dimension here.", "\n", "", "extended_attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "\n", "# Since attention_mask is 1.0 for positions we want to attend and 0.0 for", "\n", "# masked positions, this operation will create a tensor which is 0.0 for", "\n", "# positions we want to attend and -10000.0 for masked positions.", "\n", "# Since we are adding it to the raw scores before the softmax, this is", "\n", "# effectively the same as removing these entirely.", "\n", "extended_attention_mask", "=", "extended_attention_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# fp16 compatibility", "\n", "extended_attention_mask", "=", "(", "1.0", "-", "extended_attention_mask", ")", "*", "-", "10000.0", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x seq_length x seq_length]", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "num_hidden_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "num_hidden_layers", "\n", "\n", "", "embedding_output", "=", "self", ".", "embeddings", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ")", "\n", "encoder_outputs", "=", "self", ".", "encoder", "(", "embedding_output", ",", "\n", "extended_attention_mask", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "sequence_output", "=", "encoder_outputs", "[", "0", "]", "\n", "pooled_output", "=", "self", ".", "pooler", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "sequence_output", ",", "pooled_output", ",", ")", "+", "encoder_outputs", "[", "1", ":", "]", "# add hidden_states and attentions if they are here", "\n", "return", "outputs", "# sequence_output, pooled_output, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForPreTraining.__init__": [[758, 766], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertPreTrainingHeads", "modeling_bert.BertForPreTraining.init_weights", "modeling_bert.BertForPreTraining.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForPreTraining", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertPreTrainingHeads", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForPreTraining.tie_weights": [[767, 773], ["modeling_bert.BertForPreTraining._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "cls", ".", "predictions", ".", "decoder", ",", "\n", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForPreTraining.forward": [[774, 792], ["modeling_bert.BertForPreTraining.bert", "modeling_bert.BertForPreTraining.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "prediction_scores.view", "masked_lm_labels.view", "seq_relationship_score.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "\n", "next_sentence_label", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", ",", "pooled_output", "=", "outputs", "[", ":", "2", "]", "\n", "prediction_scores", ",", "seq_relationship_score", "=", "self", ".", "cls", "(", "sequence_output", ",", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "masked_lm_labels", "is", "not", "None", "and", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "total_loss", "=", "masked_lm_loss", "+", "next_sentence_loss", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), prediction_scores, seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForMaskedLM.__init__": [[826, 834], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyMLMHead", "modeling_bert.BertForMaskedLM.init_weights", "modeling_bert.BertForMaskedLM.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMaskedLM", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyMLMHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForMaskedLM.tie_weights": [[835, 841], ["modeling_bert.BertForMaskedLM._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "cls", ".", "predictions", ".", "decoder", ",", "\n", "self", ".", "bert", ".", "embeddings", ".", "word_embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForMaskedLM.forward": [[842, 857], ["modeling_bert.BertForMaskedLM.bert", "modeling_bert.BertForMaskedLM.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForMaskedLM.view", "masked_lm_labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "masked_lm_labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "prediction_scores", "=", "self", ".", "cls", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "prediction_scores", ",", ")", "+", "outputs", "[", "2", ":", "]", "# Add hidden states and attention if they are here", "\n", "if", "masked_lm_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "masked_lm_loss", "=", "loss_fct", "(", "prediction_scores", ".", "view", "(", "-", "1", ",", "self", ".", "config", ".", "vocab_size", ")", ",", "masked_lm_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "masked_lm_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (masked_lm_loss), prediction_scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForNextSentencePrediction.__init__": [[891, 898], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "modeling_bert.BertOnlyNSPHead", "modeling_bert.BertForNextSentencePrediction.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForNextSentencePrediction", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "cls", "=", "BertOnlyNSPHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForNextSentencePrediction.forward": [[899, 914], ["modeling_bert.BertForNextSentencePrediction.bert", "modeling_bert.BertForNextSentencePrediction.cls", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForNextSentencePrediction.view", "next_sentence_label.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "next_sentence_label", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "seq_relationship_score", "=", "self", ".", "cls", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "seq_relationship_score", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "next_sentence_label", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "next_sentence_loss", "=", "loss_fct", "(", "seq_relationship_score", ".", "view", "(", "-", "1", ",", "2", ")", ",", "next_sentence_label", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "next_sentence_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (next_sentence_loss), seq_relationship_score, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForSequenceClassification.__init__": [[950, 959], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "self", ".", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForSequenceClassification.forward": [[960, 982], ["modeling_bert.BertForSequenceClassification.bert", "modeling_bert.BertForSequenceClassification.dropout", "modeling_bert.BertForSequenceClassification.classifier", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_bert.BertForSequenceClassification.view", "labels.view", "modeling_bert.BertForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForMultipleChoice.__init__": [[1055, 1063], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForMultipleChoice.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForMultipleChoice", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "1", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForMultipleChoice.forward": [[1064, 1088], ["input_ids.view", "modeling_bert.BertForMultipleChoice.bert", "modeling_bert.BertForMultipleChoice.dropout", "modeling_bert.BertForMultipleChoice.classifier", "modeling_bert.BertForMultipleChoice.view", "input_ids.size", "position_ids.view", "token_type_ids.view", "attention_mask.view", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "position_ids.size", "token_type_ids.size", "attention_mask.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "num_choices", "=", "input_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "flat_position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "if", "position_ids", "is", "not", "None", "else", "None", "\n", "flat_token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "if", "token_type_ids", "is", "not", "None", "else", "None", "\n", "flat_attention_mask", "=", "attention_mask", ".", "view", "(", "-", "1", ",", "attention_mask", ".", "size", "(", "-", "1", ")", ")", "if", "attention_mask", "is", "not", "None", "else", "None", "\n", "outputs", "=", "self", ".", "bert", "(", "flat_input_ids", ",", "position_ids", "=", "flat_position_ids", ",", "token_type_ids", "=", "flat_token_type_ids", ",", "\n", "attention_mask", "=", "flat_attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "pooled_output", "=", "outputs", "[", "1", "]", "\n", "\n", "pooled_output", "=", "self", ".", "dropout", "(", "pooled_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "pooled_output", ")", "\n", "reshaped_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "num_choices", ")", "\n", "\n", "outputs", "=", "(", "reshaped_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "reshaped_logits", ",", "labels", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), reshaped_logits, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForTokenClassification.__init__": [[1122, 1131], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Dropout", "torch.nn.Linear", "modeling_bert.BertForTokenClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForTokenClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "hidden_dropout_prob", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForTokenClassification.forward": [[1132, 1155], ["modeling_bert.BertForTokenClassification.bert", "modeling_bert.BertForTokenClassification.dropout", "modeling_bert.BertForTokenClassification.classifier", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "attention_mask.view", "modeling_bert.BertForTokenClassification.view", "labels.view", "modeling_bert.BertForTokenClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "labels", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "sequence_output", "=", "self", ".", "dropout", "(", "sequence_output", ")", "\n", "logits", "=", "self", ".", "classifier", "(", "sequence_output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "# add hidden states and attention if they are here", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "# Only keep active parts of the loss", "\n", "if", "attention_mask", "is", "not", "None", ":", "\n", "                ", "active_loss", "=", "attention_mask", ".", "view", "(", "-", "1", ")", "==", "1", "\n", "active_logits", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", "[", "active_loss", "]", "\n", "active_labels", "=", "labels", ".", "view", "(", "-", "1", ")", "[", "active_loss", "]", "\n", "loss", "=", "loss_fct", "(", "active_logits", ",", "active_labels", ")", "\n", "", "else", ":", "\n", "                ", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), scores, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForQuestionAnswering.__init__": [[1197, 1205], ["modeling_utils.PreTrainedModel.__init__", "modeling_bert.BertModel", "torch.nn.Linear", "modeling_bert.BertForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "BertForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "bert", "=", "BertModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "nn", ".", "Linear", "(", "config", ".", "hidden_size", ",", "config", ".", "num_labels", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.BertForQuestionAnswering.forward": [[1206, 1236], ["modeling_bert.BertForQuestionAnswering.bert", "modeling_bert.BertForQuestionAnswering.qa_outputs", "modeling_bert.BertForQuestionAnswering.split", "start_logits.squeeze.squeeze.squeeze", "end_logits.squeeze.squeeze.squeeze", "start_logits.squeeze.squeeze.size", "start_positions.squeeze.squeeze.clamp_", "end_positions.squeeze.squeeze.clamp_", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "len", "start_positions.squeeze.squeeze.squeeze", "len", "end_positions.squeeze.squeeze.squeeze", "start_positions.squeeze.squeeze.size", "end_positions.squeeze.squeeze.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "start_positions", "=", "None", ",", "\n", "end_positions", "=", "None", ",", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "bert", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "head_mask", "=", "head_mask", ")", "\n", "sequence_output", "=", "outputs", "[", "0", "]", "\n", "\n", "logits", "=", "self", ".", "qa_outputs", "(", "sequence_output", ")", "\n", "start_logits", ",", "end_logits", "=", "logits", ".", "split", "(", "1", ",", "dim", "=", "-", "1", ")", "\n", "start_logits", "=", "start_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "end_logits", "=", "end_logits", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "start_logits", ",", "end_logits", ",", ")", "+", "outputs", "[", "2", ":", "]", "\n", "if", "start_positions", "is", "not", "None", "and", "end_positions", "is", "not", "None", ":", "\n", "# If we are on multi-GPU, split add a dimension", "\n", "            ", "if", "len", "(", "start_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "start_positions", "=", "start_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "len", "(", "end_positions", ".", "size", "(", ")", ")", ">", "1", ":", "\n", "                ", "end_positions", "=", "end_positions", ".", "squeeze", "(", "-", "1", ")", "\n", "# sometimes the start/end positions are outside our model inputs, we ignore these terms", "\n", "", "ignored_index", "=", "start_logits", ".", "size", "(", "1", ")", "\n", "start_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "end_positions", ".", "clamp_", "(", "0", ",", "ignored_index", ")", "\n", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "ignored_index", ")", "\n", "start_loss", "=", "loss_fct", "(", "start_logits", ",", "start_positions", ")", "\n", "end_loss", "=", "loss_fct", "(", "end_logits", ",", "end_positions", ")", "\n", "total_loss", "=", "(", "start_loss", "+", "end_loss", ")", "/", "2", "\n", "outputs", "=", "(", "total_loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), start_logits, end_logits, (hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.load_tf_weights_in_bert": [[69, 134], ["os.path.abspath", "logger.info", "tf.train.list_variables", "zip", "logger.info", "tf.train.load_variable", "names.append", "arrays.append", "name.split.split", "any", "logger.info", "torch.from_numpy", "logger.error", "logger.info", "re.fullmatch", "getattr", "re.split", "getattr", "len", "int", "np.transpose", "getattr", "getattr", "getattr", "getattr", "logger.info"], "function", ["None"], ["def", "load_tf_weights_in_bert", "(", "model", ",", "config", ",", "tf_checkpoint_path", ")", ":", "\n", "    ", "\"\"\" Load tf checkpoints in a pytorch model.\n    \"\"\"", "\n", "try", ":", "\n", "        ", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "import", "tensorflow", "as", "tf", "\n", "", "except", "ImportError", ":", "\n", "        ", "logger", ".", "error", "(", "\"Loading a TensorFlow model in PyTorch, requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "logger", ".", "info", "(", "\"Converting TensorFlow checkpoint from {}\"", ".", "format", "(", "tf_path", ")", ")", "\n", "# Load weights from TF model", "\n", "init_vars", "=", "tf", ".", "train", ".", "list_variables", "(", "tf_path", ")", "\n", "names", "=", "[", "]", "\n", "arrays", "=", "[", "]", "\n", "for", "name", ",", "shape", "in", "init_vars", ":", "\n", "        ", "logger", ".", "info", "(", "\"Loading TF weight {} with shape {}\"", ".", "format", "(", "name", ",", "shape", ")", ")", "\n", "array", "=", "tf", ".", "train", ".", "load_variable", "(", "tf_path", ",", "name", ")", "\n", "names", ".", "append", "(", "name", ")", "\n", "arrays", ".", "append", "(", "array", ")", "\n", "\n", "", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "arrays", ")", ":", "\n", "        ", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "# adam_v and adam_m are variables used in AdamWeightDecayOptimizer to calculated m and v", "\n", "# which are not required for using pretrained model", "\n", "if", "any", "(", "n", "in", "[", "\"adam_v\"", ",", "\"adam_m\"", ",", "\"global_step\"", "]", "for", "n", "in", "name", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+_\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'_(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'kernel'", "or", "l", "[", "0", "]", "==", "'gamma'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_bias'", "or", "l", "[", "0", "]", "==", "'beta'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'output_weights'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'squad'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'classifier'", ")", "\n", "", "else", ":", "\n", "                ", "try", ":", "\n", "                    ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "except", "AttributeError", ":", "\n", "                    ", "logger", ".", "info", "(", "\"Skipping {}\"", ".", "format", "(", "\"/\"", ".", "join", "(", "name", ")", ")", ")", "\n", "continue", "\n", "", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "if", "m_name", "[", "-", "11", ":", "]", "==", "'_embeddings'", ":", "\n", "            ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "m_name", "==", "'kernel'", ":", "\n", "            ", "array", "=", "np", ".", "transpose", "(", "array", ")", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.gelu": [[136, 143], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"Implementation of the gelu activation function.\n        For information: OpenAI GPT's gelu is slightly different (and gives slightly different results):\n        0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))\n        Also see https://arxiv.org/abs/1606.08415\n    \"\"\"", "\n", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_bert.swish": [[145, 147], ["torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.__main__.main": [[2, 126], ["print", "len", "len", "len", "print", "sys.argv.pop", "sys.argv.pop", "sys.argv.pop", "convert_tf_checkpoint_to_pytorch", "print", "print", "convert_openai_checkpoint_to_pytorch", "len", "len", "len", "print", "convert_transfo_xl_checkpoint_to_pytorch", "print", "len", "len", "sys.argv[].lower", "len", "print", "convert_gpt2_checkpoint_to_pytorch", "print", "len", "len", "len", "print", "convert_xlnet_checkpoint_to_pytorch", "print", "len", "len", "len", "len", "print", "convert_xlm_checkpoint_to_pytorch"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_tf_checkpoint_to_pytorch.convert_tf_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_openai_checkpoint_to_pytorch.convert_openai_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_transfo_xl_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_gpt2_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_xlnet_checkpoint_to_pytorch.convert_xlnet_checkpoint_to_pytorch", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_xlm_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch"], ["def", "main", "(", ")", ":", "\n", "    ", "import", "sys", "\n", "if", "(", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ")", "or", "sys", ".", "argv", "[", "1", "]", "not", "in", "[", "\"bert\"", ",", "\"gpt\"", ",", "\"transfo_xl\"", ",", "\"gpt2\"", ",", "\"xlnet\"", ",", "\"xlm\"", "]", ":", "\n", "        ", "print", "(", "\n", "\"Should be used as one of: \\n\"", "\n", "\">> pytorch_transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT, \\n\"", "\n", "\">> pytorch_transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG], \\n\"", "\n", "\">> pytorch_transformers transfo_xl TF_CHECKPOINT_OR_DATASET PYTORCH_DUMP_OUTPUT [TF_CONFIG] or \\n\"", "\n", "\">> pytorch_transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [GPT2_CONFIG] or \\n\"", "\n", "\">> pytorch_transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME] or \\n\"", "\n", "\">> pytorch_transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT\"", ")", "\n", "", "else", ":", "\n", "        ", "if", "sys", ".", "argv", "[", "1", "]", "==", "\"bert\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_tf_checkpoint_to_pytorch", "import", "convert_tf_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"pytorch_transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "!=", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers bert TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CONFIG", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "TF_CHECKPOINT", "=", "sys", ".", "argv", ".", "pop", "(", ")", "\n", "convert_tf_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt\"", ":", "\n", "            ", "from", ".", "convert_openai_checkpoint_to_pytorch", "import", "convert_openai_checkpoint_to_pytorch", "\n", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers gpt OPENAI_GPT_CHECKPOINT_FOLDER_PATH PYTORCH_DUMP_OUTPUT [OPENAI_GPT_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "OPENAI_GPT_CONFIG", "=", "\"\"", "\n", "", "convert_openai_checkpoint_to_pytorch", "(", "OPENAI_GPT_CHECKPOINT_FOLDER_PATH", ",", "\n", "OPENAI_GPT_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"transfo_xl\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_transfo_xl_checkpoint_to_pytorch", "import", "convert_transfo_xl_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"pytorch_transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers transfo_xl TF_CHECKPOINT/TF_DATASET_FILE PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "if", "'ckpt'", "in", "sys", ".", "argv", "[", "2", "]", ".", "lower", "(", ")", ":", "\n", "                    ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_DATASET_FILE", "=", "\"\"", "\n", "", "else", ":", "\n", "                    ", "TF_DATASET_FILE", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CHECKPOINT", "=", "\"\"", "\n", "", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_transfo_xl_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ",", "TF_DATASET_FILE", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"gpt2\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_gpt2_checkpoint_to_pytorch", "import", "convert_gpt2_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"pytorch_transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "4", "or", "len", "(", "sys", ".", "argv", ")", ">", "5", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers gpt2 TF_CHECKPOINT PYTORCH_DUMP_OUTPUT [TF_CONFIG]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "5", ":", "\n", "                    ", "TF_CONFIG", "=", "sys", ".", "argv", "[", "4", "]", "\n", "", "else", ":", "\n", "                    ", "TF_CONFIG", "=", "\"\"", "\n", "", "convert_gpt2_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "TF_CONFIG", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlnet\"", ":", "\n", "            ", "try", ":", "\n", "                ", "from", ".", "convert_xlnet_checkpoint_to_pytorch", "import", "convert_xlnet_checkpoint_to_pytorch", "\n", "", "except", "ImportError", ":", "\n", "                ", "print", "(", "\"pytorch_transformers can only be used from the commandline to convert TensorFlow models in PyTorch, \"", "\n", "\"In that case, it requires TensorFlow to be installed. Please see \"", "\n", "\"https://www.tensorflow.org/install/ for installation instructions.\"", ")", "\n", "raise", "\n", "\n", "", "if", "len", "(", "sys", ".", "argv", ")", "<", "5", "or", "len", "(", "sys", ".", "argv", ")", ">", "6", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers xlnet TF_CHECKPOINT TF_CONFIG PYTORCH_DUMP_OUTPUT [FINETUNING_TASK_NAME]`\"", ")", "\n", "", "else", ":", "\n", "                ", "TF_CHECKPOINT", "=", "sys", ".", "argv", "[", "2", "]", "\n", "TF_CONFIG", "=", "sys", ".", "argv", "[", "3", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "4", "]", "\n", "if", "len", "(", "sys", ".", "argv", ")", "==", "6", ":", "\n", "                    ", "FINETUNING_TASK", "=", "sys", ".", "argv", "[", "5", "]", "\n", "", "else", ":", "\n", "                    ", "FINETUNING_TASK", "=", "None", "\n", "\n", "", "convert_xlnet_checkpoint_to_pytorch", "(", "TF_CHECKPOINT", ",", "\n", "TF_CONFIG", ",", "\n", "PYTORCH_DUMP_OUTPUT", ",", "\n", "FINETUNING_TASK", ")", "\n", "", "", "elif", "sys", ".", "argv", "[", "1", "]", "==", "\"xlm\"", ":", "\n", "            ", "from", ".", "convert_xlm_checkpoint_to_pytorch", "import", "convert_xlm_checkpoint_to_pytorch", "\n", "\n", "if", "len", "(", "sys", ".", "argv", ")", "!=", "4", ":", "\n", "# pylint: disable=line-too-long", "\n", "                ", "print", "(", "\"Should be used as `pytorch_transformers xlm XLM_CHECKPOINT_PATH PYTORCH_DUMP_OUTPUT`\"", ")", "\n", "", "else", ":", "\n", "                ", "XLM_CHECKPOINT_PATH", "=", "sys", ".", "argv", "[", "2", "]", "\n", "PYTORCH_DUMP_OUTPUT", "=", "sys", ".", "argv", "[", "3", "]", "\n", "\n", "convert_xlm_checkpoint_to_pytorch", "(", "XLM_CHECKPOINT_PATH", ",", "PYTORCH_DUMP_OUTPUT", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMConfig.__init__": [[109, 187], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "30145", ",", "\n", "emb_dim", "=", "2048", ",", "\n", "n_layers", "=", "12", ",", "\n", "n_heads", "=", "16", ",", "\n", "dropout", "=", "0.1", ",", "\n", "attention_dropout", "=", "0.1", ",", "\n", "gelu_activation", "=", "True", ",", "\n", "sinusoidal_embeddings", "=", "False", ",", "\n", "causal", "=", "False", ",", "\n", "asm", "=", "False", ",", "\n", "n_langs", "=", "1", ",", "\n", "use_lang_emb", "=", "True", ",", "\n", "max_position_embeddings", "=", "512", ",", "\n", "embed_init_std", "=", "2048", "**", "-", "0.5", ",", "\n", "layer_norm_eps", "=", "1e-12", ",", "\n", "init_std", "=", "0.02", ",", "\n", "bos_index", "=", "0", ",", "\n", "eos_index", "=", "1", ",", "\n", "pad_index", "=", "2", ",", "\n", "unk_index", "=", "3", ",", "\n", "mask_index", "=", "5", ",", "\n", "is_encoder", "=", "True", ",", "\n", "\n", "finetuning_task", "=", "None", ",", "\n", "num_labels", "=", "2", ",", "\n", "summary_type", "=", "'first'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "start_n_top", "=", "5", ",", "\n", "end_n_top", "=", "5", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Constructs XLMConfig.\n        \"\"\"", "\n", "super", "(", "XLMConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "n_words", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "emb_dim", "=", "emb_dim", "\n", "self", ".", "n_layers", "=", "n_layers", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "attention_dropout", "=", "attention_dropout", "\n", "self", ".", "gelu_activation", "=", "gelu_activation", "\n", "self", ".", "sinusoidal_embeddings", "=", "sinusoidal_embeddings", "\n", "self", ".", "causal", "=", "causal", "\n", "self", ".", "asm", "=", "asm", "\n", "self", ".", "n_langs", "=", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "use_lang_emb", "\n", "self", ".", "layer_norm_eps", "=", "layer_norm_eps", "\n", "self", ".", "bos_index", "=", "bos_index", "\n", "self", ".", "eos_index", "=", "eos_index", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "self", ".", "unk_index", "=", "unk_index", "\n", "self", ".", "mask_index", "=", "mask_index", "\n", "self", ".", "is_encoder", "=", "is_encoder", "\n", "self", ".", "max_position_embeddings", "=", "max_position_embeddings", "\n", "self", ".", "embed_init_std", "=", "embed_init_std", "\n", "self", ".", "init_std", "=", "init_std", "\n", "self", ".", "finetuning_task", "=", "finetuning_task", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "start_n_top", "=", "start_n_top", "\n", "self", ".", "end_n_top", "=", "end_n_top", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"First argument must be either a vocabulary size (int)\"", "\n", "\" or the path to a pretrained model config file (str)\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMConfig.vocab_size": [[193, 196], ["None"], "methods", ["None"], ["", "@", "vocab_size", ".", "setter", "\n", "def", "vocab_size", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "n_words", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMConfig.hidden_size": [[197, 200], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "emb_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMConfig.num_attention_heads": [[201, 204], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_heads", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMConfig.num_hidden_layers": [[205, 208], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.MultiHeadAttention.__init__": [[261, 275], ["torch.nn.Module.__init__", "next", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "set"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "n_heads", ",", "dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "MultiHeadAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer_id", "=", "next", "(", "MultiHeadAttention", ".", "NEW_ID", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "dim", "=", "dim", "\n", "self", ".", "n_heads", "=", "n_heads", "\n", "self", ".", "dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", "\n", "\n", "self", ".", "q_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "k_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "v_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "out_lin", "=", "nn", ".", "Linear", "(", "dim", ",", "dim", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.MultiHeadAttention.prune_heads": [[276, 296], ["torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_utils.prune_linear_layer", "modeling_xlm.MultiHeadAttention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_linear_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "attention_head_size", "=", "self", ".", "dim", "//", "self", ".", "n_heads", "\n", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_heads", ",", "attention_head_size", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "# Prune linear layers", "\n", "self", ".", "q_lin", "=", "prune_linear_layer", "(", "self", ".", "q_lin", ",", "index", ")", "\n", "self", ".", "k_lin", "=", "prune_linear_layer", "(", "self", ".", "k_lin", ",", "index", ")", "\n", "self", ".", "v_lin", "=", "prune_linear_layer", "(", "self", ".", "v_lin", ",", "index", ")", "\n", "self", ".", "out_lin", "=", "prune_linear_layer", "(", "self", ".", "out_lin", ",", "index", ",", "dim", "=", "1", ")", "\n", "# Update hyper params", "\n", "self", ".", "n_heads", "=", "self", ".", "n_heads", "-", "len", "(", "heads", ")", "\n", "self", ".", "dim", "=", "attention_head_size", "*", "self", ".", "n_heads", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.MultiHeadAttention.forward": [[297, 359], ["input.size", "modeling_xlm.MultiHeadAttention.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "mask", ",", "kv", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Self-attention (if kv is None) or attention over source sentence (provided by kv).\n        \"\"\"", "\n", "# Input is (bs, qlen, dim)", "\n", "# Mask is (bs, klen) (non-causal) or (bs, klen, klen)", "\n", "bs", ",", "qlen", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "klen", "=", "qlen", "if", "cache", "is", "None", "else", "cache", "[", "'slen'", "]", "+", "qlen", "\n", "", "else", ":", "\n", "            ", "klen", "=", "kv", ".", "size", "(", "1", ")", "\n", "# assert dim == self.dim, 'Dimensions do not match: %s input vs %s configured' % (dim, self.dim)", "\n", "", "n_heads", "=", "self", ".", "n_heads", "\n", "dim_per_head", "=", "self", ".", "dim", "//", "n_heads", "\n", "mask_reshape", "=", "(", "bs", ",", "1", ",", "qlen", ",", "klen", ")", "if", "mask", ".", "dim", "(", ")", "==", "3", "else", "(", "bs", ",", "1", ",", "1", ",", "klen", ")", "\n", "\n", "def", "shape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  projection \"\"\"", "\n", "return", "x", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", ",", "dim_per_head", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "x", ")", ":", "\n", "            ", "\"\"\"  compute context \"\"\"", "\n", "return", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "bs", ",", "-", "1", ",", "self", ".", "n_heads", "*", "dim_per_head", ")", "\n", "\n", "", "q", "=", "shape", "(", "self", ".", "q_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "if", "kv", "is", "None", ":", "\n", "            ", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "input", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "", "elif", "cache", "is", "None", "or", "self", ".", "layer_id", "not", "in", "cache", ":", "\n", "            ", "k", "=", "v", "=", "kv", "\n", "k", "=", "shape", "(", "self", ".", "k_lin", "(", "k", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "v", "=", "shape", "(", "self", ".", "v_lin", "(", "v", ")", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "layer_id", "in", "cache", ":", "\n", "                ", "if", "kv", "is", "None", ":", "\n", "                    ", "k_", ",", "v_", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k_", ",", "k", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v_", ",", "v", "]", ",", "dim", "=", "2", ")", "# (bs, n_heads, klen, dim_per_head)", "\n", "", "else", ":", "\n", "                    ", "k", ",", "v", "=", "cache", "[", "self", ".", "layer_id", "]", "\n", "", "", "cache", "[", "self", ".", "layer_id", "]", "=", "(", "k", ",", "v", ")", "\n", "\n", "", "q", "=", "q", "/", "math", ".", "sqrt", "(", "dim_per_head", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "scores", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "2", ",", "3", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "mask", "=", "(", "mask", "==", "0", ")", ".", "view", "(", "mask_reshape", ")", ".", "expand_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "scores", ".", "masked_fill_", "(", "mask", ",", "-", "float", "(", "'inf'", ")", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "weights", "=", "F", ".", "softmax", "(", "scores", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "scores", ")", "# (bs, n_heads, qlen, klen)", "\n", "weights", "=", "F", ".", "dropout", "(", "weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "# (bs, n_heads, qlen, klen)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "weights", "=", "weights", "*", "head_mask", "\n", "\n", "", "context", "=", "torch", ".", "matmul", "(", "weights", ",", "v", ")", "# (bs, n_heads, qlen, dim_per_head)", "\n", "context", "=", "unshape", "(", "context", ")", "# (bs, qlen, dim)", "\n", "\n", "outputs", "=", "(", "self", ".", "out_lin", "(", "context", ")", ",", ")", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.TransformerFFN.__init__": [[363, 369], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "dim_hidden", ",", "out_dim", ",", "config", ")", ":", "\n", "        ", "super", "(", "TransformerFFN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "lin1", "=", "nn", ".", "Linear", "(", "in_dim", ",", "dim_hidden", ")", "\n", "self", ".", "lin2", "=", "nn", ".", "Linear", "(", "dim_hidden", ",", "out_dim", ")", "\n", "self", ".", "act", "=", "gelu", "if", "config", ".", "gelu_activation", "else", "F", ".", "relu", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.TransformerFFN.forward": [[370, 376], ["modeling_xlm.TransformerFFN.lin1", "modeling_xlm.TransformerFFN.act", "modeling_xlm.TransformerFFN.lin2", "torch.nn.functional.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "x", "=", "self", ".", "lin1", "(", "input", ")", "\n", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "x", "=", "self", ".", "lin2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMPreTrainedModel.__init__": [[387, 389], ["modeling_utils.PreTrainedModel.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "XLMPreTrainedModel", ",", "self", ")", ".", "__init__", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMPreTrainedModel._init_weights": [[390, 403], ["isinstance", "isinstance", "isinstance", "module.bias.data.zero_", "module.weight.data.fill_", "torch.nn.init.normal_", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_"], "methods", ["None"], ["", "def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights. \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "embed_init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "embed_init_std", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "if", "self", ".", "config", "is", "not", "None", "and", "self", ".", "config", ".", "init_std", "is", "not", "None", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "module", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "config", ".", "init_std", ")", "\n", "if", "hasattr", "(", "module", ",", "'bias'", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "module", ".", "bias", ",", "0.", ")", "\n", "", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMModel.__init__": [[505, 574], ["modeling_xlm.XLMPreTrainedModel.__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.LayerNorm", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "range", "hasattr", "modeling_xlm.XLMModel.init_weights", "NotImplementedError", "modeling_xlm.create_sinusoidal_embeddings", "torch.nn.Embedding", "modeling_xlm.XLMModel.attentions.append", "modeling_xlm.XLMModel.layer_norm1.append", "modeling_xlm.XLMModel.ffns.append", "modeling_xlm.XLMModel.layer_norm2.append", "config.pruned_heads.copy().items", "modeling_xlm.MultiHeadAttention", "torch.nn.LayerNorm", "modeling_xlm.TransformerFFN", "torch.nn.LayerNorm", "config.pruned_heads.copy", "modeling_xlm.XLMModel.prune_heads", "int", "list", "int", "map"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.create_sinusoidal_embeddings", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "#, dico, is_encoder, with_output):", "\n", "        ", "super", "(", "XLMModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "# encoder / decoder, output layer", "\n", "self", ".", "is_encoder", "=", "config", ".", "is_encoder", "\n", "self", ".", "is_decoder", "=", "not", "config", ".", "is_encoder", "\n", "if", "self", ".", "is_decoder", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Currently XLM can only be used as an encoder\"", ")", "\n", "# self.with_output = with_output", "\n", "", "self", ".", "causal", "=", "config", ".", "causal", "\n", "\n", "# dictionary / languages", "\n", "self", ".", "n_langs", "=", "config", ".", "n_langs", "\n", "self", ".", "use_lang_emb", "=", "config", ".", "use_lang_emb", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "eos_index", "=", "config", ".", "eos_index", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "# self.dico = dico", "\n", "# self.id2lang = config.id2lang", "\n", "# self.lang2id = config.lang2id", "\n", "# assert len(self.dico) == self.n_words", "\n", "# assert len(self.id2lang) == len(self.lang2id) == self.n_langs", "\n", "\n", "# model parameters", "\n", "self", ".", "dim", "=", "config", ".", "emb_dim", "# 512 by default", "\n", "self", ".", "hidden_dim", "=", "self", ".", "dim", "*", "4", "# 2048 by default", "\n", "self", ".", "n_heads", "=", "config", ".", "n_heads", "# 8 by default", "\n", "self", ".", "n_layers", "=", "config", ".", "n_layers", "\n", "self", ".", "dropout", "=", "config", ".", "dropout", "\n", "self", ".", "attention_dropout", "=", "config", ".", "attention_dropout", "\n", "assert", "self", ".", "dim", "%", "self", ".", "n_heads", "==", "0", ",", "'transformer dim must be a multiple of n_heads'", "\n", "\n", "# embeddings", "\n", "self", ".", "position_embeddings", "=", "nn", ".", "Embedding", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ")", "\n", "if", "config", ".", "sinusoidal_embeddings", ":", "\n", "            ", "create_sinusoidal_embeddings", "(", "config", ".", "max_position_embeddings", ",", "self", ".", "dim", ",", "out", "=", "self", ".", "position_embeddings", ".", "weight", ")", "\n", "", "if", "config", ".", "n_langs", ">", "1", "and", "config", ".", "use_lang_emb", ":", "\n", "            ", "self", ".", "lang_embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_langs", ",", "self", ".", "dim", ")", "\n", "", "self", ".", "embeddings", "=", "nn", ".", "Embedding", "(", "self", ".", "n_words", ",", "self", ".", "dim", ",", "padding_idx", "=", "self", ".", "pad_index", ")", "\n", "self", ".", "layer_norm_emb", "=", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", "\n", "\n", "# transformer layers", "\n", "self", ".", "attentions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm1", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "ffns", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "layer_norm2", "=", "nn", ".", "ModuleList", "(", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15 = nn.ModuleList()", "\n", "#     self.encoder_attn = nn.ModuleList()", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "attentions", ".", "append", "(", "MultiHeadAttention", "(", "self", ".", "n_heads", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm1", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "# if self.is_decoder:", "\n", "#     self.layer_norm15.append(nn.LayerNorm(self.dim, eps=config.layer_norm_eps))", "\n", "#     self.encoder_attn.append(MultiHeadAttention(self.n_heads, self.dim, dropout=self.attention_dropout))", "\n", "self", ".", "ffns", ".", "append", "(", "TransformerFFN", "(", "self", ".", "dim", ",", "self", ".", "hidden_dim", ",", "self", ".", "dim", ",", "config", "=", "config", ")", ")", "\n", "self", ".", "layer_norm2", ".", "append", "(", "nn", ".", "LayerNorm", "(", "self", ".", "dim", ",", "eps", "=", "config", ".", "layer_norm_eps", ")", ")", "\n", "\n", "", "if", "hasattr", "(", "config", ",", "\"pruned_heads\"", ")", ":", "\n", "            ", "pruned_heads", "=", "config", ".", "pruned_heads", ".", "copy", "(", ")", ".", "items", "(", ")", "\n", "config", ".", "pruned_heads", "=", "{", "}", "\n", "for", "layer", ",", "heads", "in", "pruned_heads", ":", "\n", "                ", "if", "self", ".", "attentions", "[", "int", "(", "layer", ")", "]", ".", "n_heads", "==", "config", ".", "n_heads", ":", "\n", "                    ", "self", ".", "prune_heads", "(", "{", "int", "(", "layer", ")", ":", "list", "(", "map", "(", "int", ",", "heads", ")", ")", "}", ")", "\n", "\n", "", "", "", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMModel._resize_token_embeddings": [[575, 578], ["modeling_xlm.XLMModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "self", ".", "embeddings", "=", "self", ".", "_get_resized_embeddings", "(", "self", ".", "embeddings", ",", "new_num_tokens", ")", "\n", "return", "self", ".", "embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMModel._prune_heads": [[579, 586], ["heads_to_prune.items", "modeling_xlm.XLMModel.attentions[].prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n            See base class PreTrainedModel\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "attentions", "[", "layer", "]", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMModel.forward": [[587, 702], ["input_ids.size", "modeling_xlm.get_masks", "modeling_xlm.XLMModel.embeddings", "modeling_xlm.XLMModel.layer_norm_emb", "torch.nn.functional.dropout", "mask.unsqueeze().to", "range", "lengths.size", "lengths.max().item", "input_ids.new().long", "torch.arange().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "modeling_xlm.XLMModel.position_embeddings().expand_as", "torch.nn.functional.dropout", "mask.unsqueeze().to", "torch.nn.functional.dropout.size", "torch.arange().unsqueeze.size", "langs.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "modeling_xlm.XLMModel.lang_embeddings", "modeling_xlm.XLMModel.embeddings", "mask.unsqueeze", "lengths.max", "input_ids.new", "torch.arange", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_xlm.XLMModel.position_embeddings", "mask.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_xlm.XLMModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.get_masks"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "lengths", "=", "None", ",", "position_ids", "=", "None", ",", "langs", "=", "None", ",", "\n", "token_type_ids", "=", "None", ",", "attention_mask", "=", "None", ",", "cache", "=", "None", ",", "head_mask", "=", "None", ")", ":", "# src_enc=None, src_len=None, ", "\n", "        ", "if", "lengths", "is", "None", ":", "\n", "            ", "lengths", "=", "(", "input_ids", "!=", "self", ".", "pad_index", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "long", "(", ")", "\n", "# mask = input_ids != self.pad_index", "\n", "\n", "# check inputs", "\n", "", "bs", ",", "slen", "=", "input_ids", ".", "size", "(", ")", "\n", "assert", "lengths", ".", "size", "(", "0", ")", "==", "bs", "\n", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "# input_ids = input_ids.transpose(0, 1)  # batch size as dimension 0", "\n", "# assert (src_enc is None) == (src_len is None)", "\n", "# if src_enc is not None:", "\n", "#     assert self.is_decoder", "\n", "#     assert src_enc.size(0) == bs", "\n", "\n", "# generate masks", "\n", "mask", ",", "attn_mask", "=", "get_masks", "(", "slen", ",", "lengths", ",", "self", ".", "causal", ",", "padding_mask", "=", "attention_mask", ")", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     src_mask = torch.arange(src_len.max(), dtype=torch.long, device=lengths.device) < src_len[:, None]", "\n", "\n", "# position_ids", "\n", "if", "position_ids", "is", "None", ":", "\n", "            ", "position_ids", "=", "input_ids", ".", "new", "(", "(", "slen", ",", ")", ")", ".", "long", "(", ")", "\n", "position_ids", "=", "torch", ".", "arange", "(", "slen", ",", "out", "=", "position_ids", ")", ".", "unsqueeze", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "assert", "position_ids", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# position_ids = position_ids.transpose(0, 1)", "\n", "\n", "# langs", "\n", "", "if", "langs", "is", "not", "None", ":", "\n", "            ", "assert", "langs", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "# (slen, bs)", "\n", "# langs = langs.transpose(0, 1)", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# input head_mask has shape [num_heads] or [num_hidden_layers x num_heads]", "\n", "# and head_mask is converted to shape [num_hidden_layers x batch x num_heads x qlen x klen]", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "n_layers", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "n_layers", "\n", "\n", "# do not recompute cached elements", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "_slen", "=", "slen", "-", "cache", "[", "'slen'", "]", "\n", "input_ids", "=", "input_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "position_ids", "=", "position_ids", "[", ":", ",", "-", "_slen", ":", "]", "\n", "if", "langs", "is", "not", "None", ":", "\n", "                ", "langs", "=", "langs", "[", ":", ",", "-", "_slen", ":", "]", "\n", "", "mask", "=", "mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "attn_mask", "=", "attn_mask", "[", ":", ",", "-", "_slen", ":", "]", "\n", "\n", "# embeddings", "\n", "", "tensor", "=", "self", ".", "embeddings", "(", "input_ids", ")", "\n", "tensor", "=", "tensor", "+", "self", ".", "position_embeddings", "(", "position_ids", ")", ".", "expand_as", "(", "tensor", ")", "\n", "if", "langs", "is", "not", "None", "and", "self", ".", "use_lang_emb", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "lang_embeddings", "(", "langs", ")", "\n", "", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "tensor", "=", "tensor", "+", "self", ".", "embeddings", "(", "token_type_ids", ")", "\n", "", "tensor", "=", "self", ".", "layer_norm_emb", "(", "tensor", ")", "\n", "tensor", "=", "F", ".", "dropout", "(", "tensor", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# transformer layers", "\n", "hidden_states", "=", "(", ")", "\n", "attentions", "=", "(", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# self attention", "\n", "", "attn_outputs", "=", "self", ".", "attentions", "[", "i", "]", "(", "tensor", ",", "attn_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", "[", "i", "]", ")", "\n", "attn", "=", "attn_outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "attentions", "=", "attentions", "+", "(", "attn_outputs", "[", "1", "]", ",", ")", "\n", "", "attn", "=", "F", ".", "dropout", "(", "attn", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "tensor", "=", "tensor", "+", "attn", "\n", "tensor", "=", "self", ".", "layer_norm1", "[", "i", "]", "(", "tensor", ")", "\n", "\n", "# encoder attention (for decoder only)", "\n", "# if self.is_decoder and src_enc is not None:", "\n", "#     attn = self.encoder_attn[i](tensor, src_mask, kv=src_enc, cache=cache)", "\n", "#     attn = F.dropout(attn, p=self.dropout, training=self.training)", "\n", "#     tensor = tensor + attn", "\n", "#     tensor = self.layer_norm15[i](tensor)", "\n", "\n", "# FFN", "\n", "tensor", "=", "tensor", "+", "self", ".", "ffns", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "=", "self", ".", "layer_norm2", "[", "i", "]", "(", "tensor", ")", "\n", "tensor", "*=", "mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "\n", "# Add last hidden state", "\n", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "hidden_states", "=", "hidden_states", "+", "(", "tensor", ",", ")", "\n", "\n", "# update cache length", "\n", "", "if", "cache", "is", "not", "None", ":", "\n", "            ", "cache", "[", "'slen'", "]", "+=", "tensor", ".", "size", "(", "1", ")", "\n", "\n", "# move back sequence length to dimension 0", "\n", "# tensor = tensor.transpose(0, 1)", "\n", "\n", "", "outputs", "=", "(", "tensor", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attentions", ",", ")", "\n", "", "return", "outputs", "# outputs, (hidden_states), (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMPredLayer.__init__": [[708, 724], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.AdaptiveLogSoftmaxWithLoss"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMPredLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "asm", "=", "config", ".", "asm", "\n", "self", ".", "n_words", "=", "config", ".", "n_words", "\n", "self", ".", "pad_index", "=", "config", ".", "pad_index", "\n", "dim", "=", "config", ".", "emb_dim", "\n", "\n", "if", "config", ".", "asm", "is", "False", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "Linear", "(", "dim", ",", "config", ".", "n_words", ",", "bias", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "proj", "=", "nn", ".", "AdaptiveLogSoftmaxWithLoss", "(", "\n", "in_features", "=", "dim", ",", "\n", "n_classes", "=", "config", ".", "n_words", ",", "\n", "cutoffs", "=", "config", ".", "asm_cutoffs", ",", "\n", "div_value", "=", "config", ".", "asm_div_value", ",", "\n", "head_bias", "=", "True", ",", "# default is False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMPredLayer.forward": [[726, 744], ["modeling_xlm.XLMPredLayer.proj().view", "modeling_xlm.XLMPredLayer.proj.log_prob", "torch.nn.functional.cross_entropy", "modeling_xlm.XLMPredLayer.proj", "modeling_xlm.XLMPredLayer.proj"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl_utilities.ProjectedAdaptiveLogSoftmax.log_prob"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "y", "=", "None", ")", ":", "\n", "        ", "\"\"\" Compute the loss, and optionally the scores.\n        \"\"\"", "\n", "outputs", "=", "(", ")", "\n", "if", "self", ".", "asm", "is", "False", ":", "\n", "            ", "scores", "=", "self", ".", "proj", "(", "x", ")", ".", "view", "(", "-", "1", ",", "self", ".", "n_words", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "loss", "=", "F", ".", "cross_entropy", "(", "scores", ",", "y", ",", "reduction", "=", "'elementwise_mean'", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "", "else", ":", "\n", "            ", "scores", "=", "self", ".", "proj", ".", "log_prob", "(", "x", ")", "\n", "outputs", "=", "(", "scores", ",", ")", "+", "outputs", "\n", "if", "y", "is", "not", "None", ":", "\n", "                ", "_", ",", "loss", "=", "self", ".", "proj", "(", "x", ",", "y", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMWithLMHeadModel.__init__": [[780, 787], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_xlm.XLMPredLayer", "modeling_xlm.XLMWithLMHeadModel.init_weights", "modeling_xlm.XLMWithLMHeadModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMWithLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "pred_layer", "=", "XLMPredLayer", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMWithLMHeadModel.tie_weights": [[788, 792], ["modeling_xlm.XLMWithLMHeadModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the embeddings\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "pred_layer", ".", "proj", ",", "self", ".", "transformer", ".", "embeddings", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMWithLMHeadModel.forward": [[793, 804], ["modeling_xlm.XLMWithLMHeadModel.transformer", "modeling_xlm.XLMWithLMHeadModel.pred_layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "lengths", "=", "None", ",", "position_ids", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "cache", "=", "None", ",", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "lengths", "=", "lengths", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "langs", "=", "langs", ",", "\n", "attention_mask", "=", "attention_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "outputs", "=", "self", ".", "pred_layer", "(", "output", ",", "labels", ")", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMForSequenceClassification.__init__": [[840, 848], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SequenceSummary", "modeling_xlm.XLMForSequenceClassification.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForSequenceClassification", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "num_labels", "=", "config", ".", "num_labels", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "sequence_summary", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMForSequenceClassification.forward": [[849, 871], ["modeling_xlm.XLMForSequenceClassification.transformer", "modeling_xlm.XLMForSequenceClassification.sequence_summary", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "modeling_xlm.XLMForSequenceClassification.view", "labels.view", "modeling_xlm.XLMForSequenceClassification.view", "labels.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "lengths", "=", "None", ",", "position_ids", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "cache", "=", "None", ",", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "lengths", "=", "lengths", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "langs", "=", "langs", ",", "\n", "attention_mask", "=", "attention_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "logits", "=", "self", ".", "sequence_summary", "(", "output", ")", "\n", "\n", "outputs", "=", "(", "logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "if", "labels", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "num_labels", "==", "1", ":", "\n", "#  We are doing regression", "\n", "                ", "loss_fct", "=", "MSELoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_labels", ")", ",", "labels", ".", "view", "(", "-", "1", ")", ")", "\n", "", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMForQuestionAnswering.__init__": [[919, 926], ["modeling_xlm.XLMPreTrainedModel.__init__", "modeling_xlm.XLMModel", "modeling_utils.SQuADHead", "modeling_xlm.XLMForQuestionAnswering.init_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "XLMForQuestionAnswering", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "XLMModel", "(", "config", ")", "\n", "self", ".", "qa_outputs", "=", "SQuADHead", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.XLMForQuestionAnswering.forward": [[927, 942], ["modeling_xlm.XLMForQuestionAnswering.transformer", "modeling_xlm.XLMForQuestionAnswering.qa_outputs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "lengths", "=", "None", ",", "position_ids", "=", "None", ",", "langs", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "None", ",", "cache", "=", "None", ",", "start_positions", "=", "None", ",", "end_positions", "=", "None", ",", "\n", "cls_index", "=", "None", ",", "is_impossible", "=", "None", ",", "p_mask", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "lengths", "=", "lengths", ",", "position_ids", "=", "position_ids", ",", "\n", "token_type_ids", "=", "token_type_ids", ",", "langs", "=", "langs", ",", "\n", "attention_mask", "=", "attention_mask", ",", "cache", "=", "cache", ",", "head_mask", "=", "head_mask", ")", "\n", "\n", "output", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "outputs", "=", "self", ".", "qa_outputs", "(", "output", ",", "start_positions", "=", "start_positions", ",", "end_positions", "=", "end_positions", ",", "\n", "cls_index", "=", "cls_index", ",", "is_impossible", "=", "is_impossible", ",", "p_mask", "=", "p_mask", ")", "\n", "\n", "outputs", "=", "outputs", "+", "transformer_outputs", "[", "1", ":", "]", "# Keep new_mems and attention/hidden states if they are here", "\n", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.create_sinusoidal_embeddings": [[210, 219], ["numpy.array", "torch.FloatTensor", "torch.FloatTensor", "out.detach_", "numpy.sin", "numpy.cos", "range", "numpy.power", "range"], "function", ["None"], ["", "", "def", "create_sinusoidal_embeddings", "(", "n_pos", ",", "dim", ",", "out", ")", ":", "\n", "    ", "position_enc", "=", "np", ".", "array", "(", "[", "\n", "[", "pos", "/", "np", ".", "power", "(", "10000", ",", "2", "*", "(", "j", "//", "2", ")", "/", "dim", ")", "for", "j", "in", "range", "(", "dim", ")", "]", "\n", "for", "pos", "in", "range", "(", "n_pos", ")", "\n", "]", ")", "\n", "out", "[", ":", ",", "0", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "sin", "(", "position_enc", "[", ":", ",", "0", ":", ":", "2", "]", ")", ")", "\n", "out", "[", ":", ",", "1", ":", ":", "2", "]", "=", "torch", ".", "FloatTensor", "(", "np", ".", "cos", "(", "position_enc", "[", ":", ",", "1", ":", ":", "2", "]", ")", ")", "\n", "out", ".", "detach_", "(", ")", "\n", "out", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.gelu": [[221, 230], ["torch.erf", "math.sqrt"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    GELU activation\n    https://arxiv.org/abs/1606.08415\n    https://github.com/huggingface/pytorch-openai-transformer-lm/blob/master/model_pytorch.py#L14\n    https://github.com/huggingface/pytorch-transformers/blob/master/modeling.py\n    \"\"\"", "\n", "# return 0.5 * x * (1 + torch.tanh(math.sqrt(2 / math.pi) * (x + 0.044715 * torch.pow(x, 3))))", "\n", "return", "0.5", "*", "x", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_xlm.get_masks": [[232, 255], ["lengths.size", "torch.arange", "mask.size", "lengths.max().item", "alen[].repeat", "attn_mask.size", "lengths.max"], "function", ["None"], ["", "def", "get_masks", "(", "slen", ",", "lengths", ",", "causal", ",", "padding_mask", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generate hidden states mask, and optionally an attention mask.\n    \"\"\"", "\n", "bs", "=", "lengths", ".", "size", "(", "0", ")", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "        ", "mask", "=", "padding_mask", "\n", "", "else", ":", "\n", "        ", "assert", "lengths", ".", "max", "(", ")", ".", "item", "(", ")", "<=", "slen", "\n", "alen", "=", "torch", ".", "arange", "(", "slen", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "lengths", ".", "device", ")", "\n", "mask", "=", "alen", "<", "lengths", "[", ":", ",", "None", "]", "\n", "\n", "# attention mask is the same as mask, or triangular inferior attention (causal)", "\n", "", "if", "causal", ":", "\n", "        ", "attn_mask", "=", "alen", "[", "None", ",", "None", ",", ":", "]", ".", "repeat", "(", "bs", ",", "slen", ",", "1", ")", "<=", "alen", "[", "None", ",", ":", ",", "None", "]", "\n", "", "else", ":", "\n", "        ", "attn_mask", "=", "mask", "\n", "\n", "# sanity check", "\n", "", "assert", "mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ")", "\n", "assert", "causal", "is", "False", "or", "attn_mask", ".", "size", "(", ")", "==", "(", "bs", ",", "slen", ",", "slen", ")", "\n", "\n", "return", "mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_gpt2_checkpoint_to_pytorch.convert_gpt2_checkpoint_to_pytorch": [[33, 52], ["pytorch_transformers.modeling_gpt2.GPT2Model", "pytorch_transformers.modeling_gpt2.load_tf_weights_in_gpt2", "print", "torch.save", "print", "pytorch_transformers.modeling_gpt2.GPT2Config", "pytorch_transformers.modeling_gpt2.GPT2Config.from_json_file", "pytorch_transformers.modeling_gpt2.GPT2Model.state_dict", "io.open", "f.write", "GPT2Config.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_vlm.load_tf_weights_in_gpt2", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["def", "convert_gpt2_checkpoint_to_pytorch", "(", "gpt2_checkpoint_path", ",", "gpt2_config_file", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Construct model", "\n", "    ", "if", "gpt2_config_file", "==", "\"\"", ":", "\n", "        ", "config", "=", "GPT2Config", "(", ")", "\n", "", "else", ":", "\n", "        ", "config", "=", "GPT2Config", ".", "from_json_file", "(", "gpt2_config_file", ")", "\n", "", "model", "=", "GPT2Model", "(", "config", ")", "\n", "\n", "# Load weights from numpy", "\n", "load_tf_weights_in_gpt2", "(", "model", ",", "config", ",", "gpt2_checkpoint_path", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_transfo_xl_checkpoint_to_pytorch.convert_transfo_xl_checkpoint_to_pytorch": [[48, 91], ["print", "torch.save", "corpus_dict_no_vocab.pop", "print", "torch.save", "os.path.abspath", "os.path.abspath", "print", "print", "pytorch_transformers.modeling_transfo_xl.TransfoXLLMHeadModel", "pytorch_transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl", "os.path.join", "os.path.join", "print", "torch.save", "print", "io.open", "pickle.load", "pytorch_transformers.modeling_transfo_xl.TransfoXLConfig", "pytorch_transformers.modeling_transfo_xl.TransfoXLConfig.from_json_file", "pytorch_transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl.state_dict", "io.open", "f.write", "str", "os.path.abspath", "os.path.abspath", "TransfoXLConfig.from_json_file.to_json_string"], "function", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_transfo_xl.load_tf_weights_in_transfo_xl", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.from_json_file", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PretrainedConfig.to_json_string"], ["def", "convert_transfo_xl_checkpoint_to_pytorch", "(", "tf_checkpoint_path", ",", "\n", "transfo_xl_config_file", ",", "\n", "pytorch_dump_folder_path", ",", "\n", "transfo_xl_dataset_file", ")", ":", "\n", "    ", "if", "transfo_xl_dataset_file", ":", "\n", "# Convert a pre-processed corpus (see original TensorFlow repo)", "\n", "        ", "with", "open", "(", "transfo_xl_dataset_file", ",", "\"rb\"", ")", "as", "fp", ":", "\n", "            ", "corpus", "=", "pickle", ".", "load", "(", "fp", ",", "encoding", "=", "\"latin1\"", ")", "\n", "# Save vocabulary and dataset cache as Dictionaries (should be better than pickles for the long-term)", "\n", "", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'pretrained_vocab_file'", "]", "\n", "print", "(", "\"Save vocabulary to {}\"", ".", "format", "(", "pytorch_vocab_dump_path", ")", ")", "\n", "corpus_vocab_dict", "=", "corpus", ".", "vocab", ".", "__dict__", "\n", "torch", ".", "save", "(", "corpus_vocab_dict", ",", "pytorch_vocab_dump_path", ")", "\n", "\n", "corpus_dict_no_vocab", "=", "corpus", ".", "__dict__", "\n", "corpus_dict_no_vocab", ".", "pop", "(", "'vocab'", ",", "None", ")", "\n", "pytorch_dataset_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CORPUS_NAME", "\n", "print", "(", "\"Save dataset to {}\"", ".", "format", "(", "pytorch_dataset_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "corpus_dict_no_vocab", ",", "pytorch_dataset_dump_path", ")", "\n", "\n", "", "if", "tf_checkpoint_path", ":", "\n", "# Convert a pre-trained TensorFlow model", "\n", "        ", "config_path", "=", "os", ".", "path", ".", "abspath", "(", "transfo_xl_config_file", ")", "\n", "tf_path", "=", "os", ".", "path", ".", "abspath", "(", "tf_checkpoint_path", ")", "\n", "\n", "print", "(", "\"Converting Transformer XL checkpoint from {} with config at {}\"", ".", "format", "(", "tf_path", ",", "config_path", ")", ")", "\n", "# Initialise PyTorch model", "\n", "if", "transfo_xl_config_file", "==", "\"\"", ":", "\n", "            ", "config", "=", "TransfoXLConfig", "(", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "TransfoXLConfig", ".", "from_json_file", "(", "transfo_xl_config_file", ")", "\n", "", "print", "(", "\"Building PyTorch model from configuration: {}\"", ".", "format", "(", "str", "(", "config", ")", ")", ")", "\n", "model", "=", "TransfoXLLMHeadModel", "(", "config", ")", "\n", "\n", "model", "=", "load_tf_weights_in_transfo_xl", "(", "model", ",", "config", ",", "tf_path", ")", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "WEIGHTS_NAME", ")", "\n", "pytorch_config_dump_path", "=", "os", ".", "path", ".", "join", "(", "pytorch_dump_folder_path", ",", "CONFIG_NAME", ")", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_weights_dump_path", ")", ")", ")", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "pytorch_weights_dump_path", ")", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "os", ".", "path", ".", "abspath", "(", "pytorch_config_dump_path", ")", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "config", ".", "to_json_string", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_roberta.RobertaTokenizer.__init__": [[77, 83], ["tokenization_gpt2.GPT2Tokenizer.__init__"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "errors", "=", "'replace'", ",", "bos_token", "=", "\"<s>\"", ",", "eos_token", "=", "\"</s>\"", ",", "sep_token", "=", "\"</s>\"", ",", "\n", "cls_token", "=", "\"<s>\"", ",", "unk_token", "=", "\"<unk>\"", ",", "pad_token", "=", "'<pad>'", ",", "mask_token", "=", "'<mask>'", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "RobertaTokenizer", ",", "self", ")", ".", "__init__", "(", "vocab_file", "=", "vocab_file", ",", "merges_file", "=", "merges_file", ",", "errors", "=", "errors", ",", "\n", "bos_token", "=", "bos_token", ",", "eos_token", "=", "eos_token", ",", "unk_token", "=", "unk_token", ",", "\n", "sep_token", "=", "sep_token", ",", "cls_token", "=", "cls_token", ",", "pad_token", "=", "pad_token", ",", "\n", "mask_token", "=", "mask_token", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_roberta.RobertaTokenizer.add_special_tokens_single_sentence": [[84, 90], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_single_sentence", "(", "self", ",", "token_ids", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence for sequence classification tasks.\n        A RoBERTa sequence has the following format: <s> X </s>\n        \"\"\"", "\n", "return", "[", "self", ".", "cls_token_id", "]", "+", "token_ids", "+", "[", "self", ".", "sep_token_id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_roberta.RobertaTokenizer.add_special_tokens_sentences_pair": [[91, 99], ["None"], "methods", ["None"], ["", "def", "add_special_tokens_sentences_pair", "(", "self", ",", "token_ids_0", ",", "token_ids_1", ")", ":", "\n", "        ", "\"\"\"\n        Adds special tokens to a sequence pair for sequence classification tasks.\n        A RoBERTa sequence pair has the following format: <s> A </s></s> B </s>\n        \"\"\"", "\n", "sep", "=", "[", "self", ".", "sep_token_id", "]", "\n", "cls", "=", "[", "self", ".", "cls_token_id", "]", "\n", "return", "cls", "+", "token_ids_0", "+", "sep", "+", "sep", "+", "token_ids_1", "+", "sep", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTConfig.__init__": [[157, 215], ["modeling_utils.PretrainedConfig.__init__", "isinstance", "json.loads.items", "isinstance", "isinstance", "io.open", "json.loads", "ValueError", "reader.read"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size_or_config_json_file", "=", "40478", ",", "\n", "n_positions", "=", "512", ",", "\n", "n_ctx", "=", "512", ",", "\n", "n_embd", "=", "768", ",", "\n", "n_layer", "=", "12", ",", "\n", "n_head", "=", "12", ",", "\n", "afn", "=", "\"gelu\"", ",", "\n", "resid_pdrop", "=", "0.1", ",", "\n", "embd_pdrop", "=", "0.1", ",", "\n", "attn_pdrop", "=", "0.1", ",", "\n", "layer_norm_epsilon", "=", "1e-5", ",", "\n", "initializer_range", "=", "0.02", ",", "\n", "predict_special_tokens", "=", "True", ",", "\n", "\n", "num_labels", "=", "1", ",", "\n", "summary_type", "=", "'cls_index'", ",", "\n", "summary_use_proj", "=", "True", ",", "\n", "summary_activation", "=", "None", ",", "\n", "summary_proj_to_labels", "=", "True", ",", "\n", "summary_first_dropout", "=", "0.1", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs OpenAIGPTConfig.\n        \"\"\"", "\n", "super", "(", "OpenAIGPTConfig", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "if", "isinstance", "(", "vocab_size_or_config_json_file", ",", "str", ")", "or", "(", "sys", ".", "version_info", "[", "0", "]", "==", "2", "\n", "and", "isinstance", "(", "vocab_size_or_config_json_file", ",", "unicode", ")", ")", ":", "\n", "            ", "with", "open", "(", "vocab_size_or_config_json_file", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "reader", ":", "\n", "                ", "json_config", "=", "json", ".", "loads", "(", "reader", ".", "read", "(", ")", ")", "\n", "", "for", "key", ",", "value", "in", "json_config", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "__dict__", "[", "key", "]", "=", "value", "\n", "", "", "elif", "isinstance", "(", "vocab_size_or_config_json_file", ",", "int", ")", ":", "\n", "            ", "self", ".", "vocab_size", "=", "vocab_size_or_config_json_file", "\n", "self", ".", "n_ctx", "=", "n_ctx", "\n", "self", ".", "n_positions", "=", "n_positions", "\n", "self", ".", "n_embd", "=", "n_embd", "\n", "self", ".", "n_layer", "=", "n_layer", "\n", "self", ".", "n_head", "=", "n_head", "\n", "self", ".", "afn", "=", "afn", "\n", "self", ".", "resid_pdrop", "=", "resid_pdrop", "\n", "self", ".", "embd_pdrop", "=", "embd_pdrop", "\n", "self", ".", "attn_pdrop", "=", "attn_pdrop", "\n", "self", ".", "layer_norm_epsilon", "=", "layer_norm_epsilon", "\n", "self", ".", "initializer_range", "=", "initializer_range", "\n", "self", ".", "predict_special_tokens", "=", "predict_special_tokens", "\n", "\n", "self", ".", "num_labels", "=", "num_labels", "\n", "self", ".", "summary_type", "=", "summary_type", "\n", "self", ".", "summary_use_proj", "=", "summary_use_proj", "\n", "self", ".", "summary_activation", "=", "summary_activation", "\n", "self", ".", "summary_first_dropout", "=", "summary_first_dropout", "\n", "self", ".", "summary_proj_to_labels", "=", "summary_proj_to_labels", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"First argument must be either a vocabulary size (int)\"", "\n", "\"or the path to a pretrained model config file (str)\"", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTConfig.max_position_embeddings": [[218, 221], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "max_position_embeddings", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTConfig.hidden_size": [[222, 225], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "hidden_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_embd", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTConfig.num_attention_heads": [[226, 229], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_attention_heads", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_head", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTConfig.num_hidden_layers": [[230, 233], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_hidden_layers", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n_layer", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.__init__": [[236, 253], ["torch.Module.__init__", "modeling_openai.Attention.register_buffer", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "set", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril().view", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "nx", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "n_state", "=", "nx", "# in Attention: n_state=768 (nx=n_embd)", "\n", "# [switch nx => n_state from Block to Attention to keep identical to TF implem]", "\n", "assert", "n_state", "%", "config", ".", "n_head", "==", "0", "\n", "self", ".", "register_buffer", "(", "\"bias\"", ",", "torch", ".", "tril", "(", "torch", ".", "ones", "(", "n_ctx", ",", "n_ctx", ")", ")", ".", "view", "(", "1", ",", "1", ",", "n_ctx", ",", "n_ctx", ")", ")", "\n", "self", ".", "n_head", "=", "config", ".", "n_head", "\n", "self", ".", "split_size", "=", "n_state", "\n", "self", ".", "scale", "=", "scale", "\n", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "\n", "self", ".", "c_attn", "=", "Conv1D", "(", "n_state", "*", "3", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "attn_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "attn_pdrop", ")", "\n", "self", ".", "resid_dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "self", ".", "pruned_heads", "=", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads": [[254, 272], ["torch.ones", "torch.ones", "torch.ones", "torch.ones", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous().eq", "[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "modeling_utils.prune_conv1d_layer", "modeling_utils.prune_conv1d_layer", "modeling_openai.Attention.pruned_heads.union", "len", "set", "sum", "len", "mask.view().contiguous().eq.view().contiguous().eq.view().contiguous", "len", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "mask.view().contiguous().eq.view().contiguous().eq.view", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.prune_conv1d_layer"], ["", "def", "prune_heads", "(", "self", ",", "heads", ")", ":", "\n", "        ", "if", "len", "(", "heads", ")", "==", "0", ":", "\n", "            ", "return", "\n", "", "mask", "=", "torch", ".", "ones", "(", "self", ".", "n_head", ",", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "\n", "heads", "=", "set", "(", "heads", ")", "-", "self", ".", "pruned_heads", "\n", "for", "head", "in", "heads", ":", "\n", "            ", "head", "-=", "sum", "(", "1", "if", "h", "<", "head", "else", "0", "for", "h", "in", "self", ".", "pruned_heads", ")", "\n", "mask", "[", "head", "]", "=", "0", "\n", "", "mask", "=", "mask", ".", "view", "(", "-", "1", ")", ".", "contiguous", "(", ")", ".", "eq", "(", "1", ")", "\n", "index", "=", "torch", ".", "arange", "(", "len", "(", "mask", ")", ")", "[", "mask", "]", ".", "long", "(", ")", "\n", "index_attn", "=", "torch", ".", "cat", "(", "[", "index", ",", "index", "+", "self", ".", "split_size", ",", "index", "+", "(", "2", "*", "self", ".", "split_size", ")", "]", ")", "\n", "# Prune conv1d layers", "\n", "self", ".", "c_attn", "=", "prune_conv1d_layer", "(", "self", ".", "c_attn", ",", "index_attn", ",", "dim", "=", "1", ")", "\n", "self", ".", "c_proj", "=", "prune_conv1d_layer", "(", "self", ".", "c_proj", ",", "index", ",", "dim", "=", "0", ")", "\n", "# Update hyper params", "\n", "self", ".", "split_size", "=", "(", "self", ".", "split_size", "//", "self", ".", "n_head", ")", "*", "(", "self", ".", "n_head", "-", "len", "(", "heads", ")", ")", "\n", "self", ".", "n_head", "=", "self", ".", "n_head", "-", "len", "(", "heads", ")", "\n", "self", ".", "pruned_heads", "=", "self", ".", "pruned_heads", ".", "union", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention._attn": [[273, 293], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "modeling_openai.Attention.attn_dropout", "torch.Softmax", "torch.Softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "outputs.append", "math.sqrt", "v.size", "modeling_openai.Attention.size", "modeling_openai.Attention.size"], "methods", ["None"], ["", "def", "_attn", "(", "self", ",", "q", ",", "k", ",", "v", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "w", "=", "torch", ".", "matmul", "(", "q", ",", "k", ")", "\n", "if", "self", ".", "scale", ":", "\n", "            ", "w", "=", "w", "/", "math", ".", "sqrt", "(", "v", ".", "size", "(", "-", "1", ")", ")", "\n", "# w = w * self.bias + -1e9 * (1 - self.bias)  # TF implem method: mask_attn_weights", "\n", "# XD: self.b may be larger than w, so we need to crop it", "\n", "", "b", "=", "self", ".", "bias", "[", ":", ",", ":", ",", ":", "w", ".", "size", "(", "-", "2", ")", ",", ":", "w", ".", "size", "(", "-", "1", ")", "]", "\n", "w", "=", "w", "*", "b", "+", "-", "1e9", "*", "(", "1", "-", "b", ")", "\n", "\n", "w", "=", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "(", "w", ")", "\n", "w", "=", "self", ".", "attn_dropout", "(", "w", ")", "\n", "\n", "# Mask heads if we want to", "\n", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "w", "=", "w", "*", "head_mask", "\n", "\n", "", "outputs", "=", "[", "torch", ".", "matmul", "(", "w", ",", "v", ")", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", ".", "append", "(", "w", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.merge_heads": [[294, 298], ["x.permute().contiguous.permute().contiguous.permute().contiguous", "x.permute().contiguous.permute().contiguous.view", "x.permute().contiguous.permute().contiguous.permute", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size", "x.permute().contiguous.permute().contiguous.size"], "methods", ["None"], ["", "def", "merge_heads", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "2", "]", "+", "(", "x", ".", "size", "(", "-", "2", ")", "*", "x", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "return", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct merge_states", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads": [[299, 306], ["x.view.view.view", "x.view.view.permute", "x.view.view.permute", "x.view.view.size", "x.view.view.size"], "methods", ["None"], ["", "def", "split_heads", "(", "self", ",", "x", ",", "k", "=", "False", ")", ":", "\n", "        ", "new_x_shape", "=", "x", ".", "size", "(", ")", "[", ":", "-", "1", "]", "+", "(", "self", ".", "n_head", ",", "x", ".", "size", "(", "-", "1", ")", "//", "self", ".", "n_head", ")", "\n", "x", "=", "x", ".", "view", "(", "*", "new_x_shape", ")", "# in Tensorflow implem: fct split_states", "\n", "if", "k", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.forward": [[307, 323], ["modeling_openai.Attention.c_attn", "modeling_openai.Attention.split", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention.split_heads", "modeling_openai.Attention._attn", "modeling_openai.Attention.merge_heads", "modeling_openai.Attention.c_proj", "modeling_openai.Attention.resid_dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.split_heads", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention._attn", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.merge_heads"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "c_attn", "(", "x", ")", "\n", "query", ",", "key", ",", "value", "=", "x", ".", "split", "(", "self", ".", "split_size", ",", "dim", "=", "2", ")", "\n", "query", "=", "self", ".", "split_heads", "(", "query", ")", "\n", "key", "=", "self", ".", "split_heads", "(", "key", ",", "k", "=", "True", ")", "\n", "value", "=", "self", ".", "split_heads", "(", "value", ")", "\n", "\n", "attn_outputs", "=", "self", ".", "_attn", "(", "query", ",", "key", ",", "value", ",", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "a", "=", "self", ".", "merge_heads", "(", "a", ")", "\n", "a", "=", "self", ".", "c_proj", "(", "a", ")", "\n", "a", "=", "self", ".", "resid_dropout", "(", "a", ")", "\n", "\n", "outputs", "=", "[", "a", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "# a, (attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.MLP.__init__": [[326, 333], ["torch.Module.__init__", "modeling_utils.Conv1D", "modeling_utils.Conv1D", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_state", ",", "config", ")", ":", "# in MLP: n_state=3072 (4 * n_embd)", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "c_fc", "=", "Conv1D", "(", "n_state", ",", "nx", ")", "\n", "self", ".", "c_proj", "=", "Conv1D", "(", "nx", ",", "n_state", ")", "\n", "self", ".", "act", "=", "ACT_FNS", "[", "config", ".", "afn", "]", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "config", ".", "resid_pdrop", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.MLP.forward": [[334, 338], ["modeling_openai.MLP.act", "modeling_openai.MLP.c_proj", "modeling_openai.MLP.dropout", "modeling_openai.MLP.c_fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "act", "(", "self", ".", "c_fc", "(", "x", ")", ")", "\n", "h2", "=", "self", ".", "c_proj", "(", "h", ")", "\n", "return", "self", ".", "dropout", "(", "h2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Block.__init__": [[341, 348], ["torch.Module.__init__", "modeling_openai.Attention", "modeling_bert.BertLayerNorm", "modeling_openai.MLP", "modeling_bert.BertLayerNorm"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_ctx", ",", "config", ",", "scale", "=", "False", ")", ":", "\n", "        ", "super", "(", "Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nx", "=", "config", ".", "n_embd", "\n", "self", ".", "attn", "=", "Attention", "(", "nx", ",", "n_ctx", ",", "config", ",", "scale", ")", "\n", "self", ".", "ln_1", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "self", ".", "mlp", "=", "MLP", "(", "4", "*", "nx", ",", "config", ")", "\n", "self", ".", "ln_2", "=", "LayerNorm", "(", "nx", ",", "eps", "=", "config", ".", "layer_norm_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Block.forward": [[349, 359], ["modeling_openai.Block.attn", "modeling_openai.Block.ln_1", "modeling_openai.Block.mlp", "modeling_openai.Block.ln_2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "attn_outputs", "=", "self", ".", "attn", "(", "x", ",", "head_mask", "=", "head_mask", ")", "\n", "a", "=", "attn_outputs", "[", "0", "]", "\n", "\n", "n", "=", "self", ".", "ln_1", "(", "x", "+", "a", ")", "\n", "m", "=", "self", ".", "mlp", "(", "n", ")", "\n", "h", "=", "self", ".", "ln_2", "(", "n", "+", "m", ")", "\n", "\n", "outputs", "=", "[", "h", "]", "+", "attn_outputs", "[", "1", ":", "]", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTPreTrainedModel._init_weights": [[370, 382], ["isinstance", "module.weight.data.normal_", "isinstance", "isinstance", "module.bias.data.zero_", "module.bias.data.zero_", "module.weight.data.fill_"], "methods", ["None"], ["def", "_init_weights", "(", "self", ",", "module", ")", ":", "\n", "        ", "\"\"\" Initialize the weights.\n        \"\"\"", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Embedding", ",", "Conv1D", ")", ")", ":", "\n", "# Slightly different from the TF version which uses truncated_normal for initialization", "\n", "# cf https://github.com/pytorch/pytorch/pull/5617", "\n", "            ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "self", ".", "config", ".", "initializer_range", ")", "\n", "if", "isinstance", "(", "module", ",", "(", "nn", ".", "Linear", ",", "Conv1D", ")", ")", "and", "module", ".", "bias", "is", "not", "None", ":", "\n", "                ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "module", ",", "LayerNorm", ")", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "module", ".", "weight", ".", "data", ".", "fill_", "(", "1.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel.__init__": [[450, 461], ["modeling_utils.PreTrainedModel.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Dropout", "torch.Dropout", "torch.ModuleList", "torch.ModuleList", "modeling_openai.OpenAIGPTModel.init_weights", "modeling_openai.Block", "range"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "output_attentions", "=", "config", ".", "output_attentions", "\n", "self", ".", "output_hidden_states", "=", "config", ".", "output_hidden_states", "\n", "\n", "self", ".", "tokens_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "vocab_size", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "positions_embed", "=", "nn", ".", "Embedding", "(", "config", ".", "n_positions", ",", "config", ".", "n_embd", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "config", ".", "embd_pdrop", ")", "\n", "self", ".", "h", "=", "nn", ".", "ModuleList", "(", "[", "Block", "(", "config", ".", "n_ctx", ",", "config", ",", "scale", "=", "True", ")", "for", "_", "in", "range", "(", "config", ".", "n_layer", ")", "]", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel._resize_token_embeddings": [[462, 465], ["modeling_openai.OpenAIGPTModel._get_resized_embeddings"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._get_resized_embeddings"], ["", "def", "_resize_token_embeddings", "(", "self", ",", "new_num_tokens", ")", ":", "\n", "        ", "self", ".", "tokens_embed", "=", "self", ".", "_get_resized_embeddings", "(", "self", ".", "tokens_embed", ",", "new_num_tokens", ")", "\n", "return", "self", ".", "tokens_embed", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel._prune_heads": [[466, 472], ["heads_to_prune.items", "modeling_openai.OpenAIGPTModel.h[].attn.prune_heads"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.Attention.prune_heads"], ["", "def", "_prune_heads", "(", "self", ",", "heads_to_prune", ")", ":", "\n", "        ", "\"\"\" Prunes heads of the model.\n            heads_to_prune: dict of {layer_num: list of heads to prune in this layer}\n        \"\"\"", "\n", "for", "layer", ",", "heads", "in", "heads_to_prune", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "h", "[", "layer", "]", ".", "attn", ".", "prune_heads", "(", "heads", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTModel.forward": [[473, 533], ["input_ids.view.view.size", "input_ids.view.view.view", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.view", "modeling_openai.OpenAIGPTModel.tokens_embed", "modeling_openai.OpenAIGPTModel.positions_embed", "modeling_openai.OpenAIGPTModel.drop", "enumerate", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze().expand_as", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.to", "input_ids.view.view.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.size", "token_type_ids.view.view.view", "modeling_openai.OpenAIGPTModel.tokens_embed", "block", "modeling_openai.OpenAIGPTModel.view", "input_ids.view.view.size", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.expand", "token_type_ids.view.view.size", "modeling_openai.OpenAIGPTModel.size", "position_ids.unsqueeze().expand_as.unsqueeze().expand_as.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.dim", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze", "next", "modeling_openai.OpenAIGPTModel.view", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "modeling_openai.OpenAIGPTModel.parameters", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze", "head_mask.unsqueeze().unsqueeze().unsqueeze.unsqueeze().unsqueeze().unsqueeze.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "if", "position_ids", "is", "None", ":", "\n", "# This was used when we had a single embedding matrice from position and token embeddings", "\n", "# start = self.config.vocab_size + self.config.n_special", "\n", "# end = start + input_ids.size(-1)", "\n", "# position_ids = torch.arange(start, end, dtype=torch.long, device=input_ids.device)", "\n", "            ", "position_ids", "=", "torch", ".", "arange", "(", "input_ids", ".", "size", "(", "-", "1", ")", ",", "dtype", "=", "torch", ".", "long", ",", "device", "=", "input_ids", ".", "device", ")", "\n", "position_ids", "=", "position_ids", ".", "unsqueeze", "(", "0", ")", ".", "expand_as", "(", "input_ids", ")", "\n", "\n", "# Prepare head mask if needed", "\n", "# 1.0 in head_mask indicate we keep the head", "\n", "# attention_probs has shape bsz x n_heads x N x N", "\n", "# head_mask has shape n_layer x batch x n_heads x N x N", "\n", "", "if", "head_mask", "is", "not", "None", ":", "\n", "            ", "if", "head_mask", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "0", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "head_mask", "=", "head_mask", ".", "expand", "(", "self", ".", "config", ".", "n_layer", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "", "elif", "head_mask", ".", "dim", "(", ")", "==", "2", ":", "\n", "                ", "head_mask", "=", "head_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", "# We can specify head_mask for each layer", "\n", "", "head_mask", "=", "head_mask", ".", "to", "(", "dtype", "=", "next", "(", "self", ".", "parameters", "(", ")", ")", ".", "dtype", ")", "# switch to fload if need + fp16 compatibility", "\n", "", "else", ":", "\n", "            ", "head_mask", "=", "[", "None", "]", "*", "self", ".", "config", ".", "n_layer", "\n", "\n", "", "input_shape", "=", "input_ids", ".", "size", "(", ")", "\n", "input_ids", "=", "input_ids", ".", "view", "(", "-", "1", ",", "input_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "position_ids", "=", "position_ids", ".", "view", "(", "-", "1", ",", "position_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "inputs_embeds", "=", "self", ".", "tokens_embed", "(", "input_ids", ")", "\n", "position_embeds", "=", "self", ".", "positions_embed", "(", "position_ids", ")", "\n", "if", "token_type_ids", "is", "not", "None", ":", "\n", "            ", "token_type_ids", "=", "token_type_ids", ".", "view", "(", "-", "1", ",", "token_type_ids", ".", "size", "(", "-", "1", ")", ")", "\n", "token_type_embeds", "=", "self", ".", "tokens_embed", "(", "token_type_ids", ")", "\n", "", "else", ":", "\n", "            ", "token_type_embeds", "=", "0", "\n", "", "hidden_states", "=", "inputs_embeds", "+", "position_embeds", "+", "token_type_embeds", "\n", "hidden_states", "=", "self", ".", "drop", "(", "hidden_states", ")", "\n", "\n", "output_shape", "=", "input_shape", "+", "(", "hidden_states", ".", "size", "(", "-", "1", ")", ",", ")", "\n", "\n", "all_attentions", "=", "(", ")", "\n", "all_hidden_states", "=", "(", ")", "\n", "for", "i", ",", "block", "in", "enumerate", "(", "self", ".", "h", ")", ":", "\n", "            ", "if", "self", ".", "output_hidden_states", ":", "\n", "                ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "block", "(", "hidden_states", ",", "head_mask", "[", "i", "]", ")", "\n", "hidden_states", "=", "outputs", "[", "0", "]", "\n", "if", "self", ".", "output_attentions", ":", "\n", "                ", "all_attentions", "=", "all_attentions", "+", "(", "outputs", "[", "1", "]", ",", ")", "\n", "\n", "# Add last layer", "\n", "", "", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "all_hidden_states", "=", "all_hidden_states", "+", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "\n", "", "outputs", "=", "(", "hidden_states", ".", "view", "(", "*", "output_shape", ")", ",", ")", "\n", "if", "self", ".", "output_hidden_states", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_hidden_states", ",", ")", "\n", "", "if", "self", ".", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "all_attentions", ",", ")", "\n", "", "return", "outputs", "# last hidden state, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTLMHeadModel.__init__": [[568, 575], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_openai.OpenAIGPTLMHeadModel.init_weights", "modeling_openai.OpenAIGPTLMHeadModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTLMHeadModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTLMHeadModel.tie_weights": [[576, 582], ["modeling_openai.OpenAIGPTLMHeadModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ",", "\n", "self", ".", "transformer", ".", "tokens_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTLMHeadModel.forward": [[583, 601], ["modeling_openai.OpenAIGPTLMHeadModel.transformer", "modeling_openai.OpenAIGPTLMHeadModel.lm_head", "lm_logits[].contiguous", "labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous.view", "labels[].contiguous.view", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "position_ids", "=", "None", ",", "token_type_ids", "=", "None", ",", "labels", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "labels", "is", "not", "None", ":", "\n", "# Shift so that tokens < n predict n", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "# Flatten the tokens", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (loss), lm_logits, (all hidden states), (all attentions)", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.__init__": [[673, 682], ["modeling_utils.PreTrainedModel.__init__", "modeling_openai.OpenAIGPTModel", "torch.Linear", "torch.Linear", "modeling_utils.SequenceSummary", "modeling_openai.OpenAIGPTDoubleHeadsModel.init_weights", "modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel.init_weights", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTDoubleHeadsModel", ",", "self", ")", ".", "__init__", "(", "config", ")", "\n", "\n", "self", ".", "transformer", "=", "OpenAIGPTModel", "(", "config", ")", "\n", "self", ".", "lm_head", "=", "nn", ".", "Linear", "(", "config", ".", "n_embd", ",", "config", ".", "vocab_size", ",", "bias", "=", "False", ")", "\n", "self", ".", "multiple_choice_head", "=", "SequenceSummary", "(", "config", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "self", ".", "tie_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.tie_weights": [[683, 689], ["modeling_openai.OpenAIGPTDoubleHeadsModel._tie_or_clone_weights"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_utils.PreTrainedModel._tie_or_clone_weights"], ["", "def", "tie_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Make sure we are sharing the input and output embeddings.\n            Export to TorchScript can't handle parameter sharing so we are cloning them instead.\n        \"\"\"", "\n", "self", ".", "_tie_or_clone_weights", "(", "self", ".", "lm_head", ",", "\n", "self", ".", "transformer", ".", "tokens_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.OpenAIGPTDoubleHeadsModel.forward": [[690, 714], ["modeling_openai.OpenAIGPTDoubleHeadsModel.transformer", "modeling_openai.OpenAIGPTDoubleHeadsModel.lm_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head().squeeze", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "lm_logits[].contiguous", "lm_labels[].contiguous", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss.", "torch.nn.CrossEntropyLoss.", "modeling_openai.OpenAIGPTDoubleHeadsModel.multiple_choice_head", "modeling_openai.OpenAIGPTDoubleHeadsModel.view", "mc_labels.view", "lm_logits[].contiguous.view", "lm_labels[].contiguous.view", "modeling_openai.OpenAIGPTDoubleHeadsModel.size", "lm_logits[].contiguous.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "mc_token_ids", "=", "None", ",", "lm_labels", "=", "None", ",", "mc_labels", "=", "None", ",", "token_type_ids", "=", "None", ",", "\n", "position_ids", "=", "None", ",", "head_mask", "=", "None", ")", ":", "\n", "        ", "transformer_outputs", "=", "self", ".", "transformer", "(", "input_ids", ",", "position_ids", "=", "position_ids", ",", "token_type_ids", "=", "token_type_ids", ",", "\n", "head_mask", "=", "head_mask", ")", "\n", "hidden_states", "=", "transformer_outputs", "[", "0", "]", "\n", "\n", "lm_logits", "=", "self", ".", "lm_head", "(", "hidden_states", ")", "\n", "mc_logits", "=", "self", ".", "multiple_choice_head", "(", "hidden_states", ",", "mc_token_ids", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n", "outputs", "=", "(", "lm_logits", ",", "mc_logits", ")", "+", "transformer_outputs", "[", "1", ":", "]", "\n", "if", "mc_labels", "is", "not", "None", ":", "\n", "            ", "loss_fct", "=", "CrossEntropyLoss", "(", ")", "\n", "loss", "=", "loss_fct", "(", "mc_logits", ".", "view", "(", "-", "1", ",", "mc_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "mc_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "", "if", "lm_labels", "is", "not", "None", ":", "\n", "            ", "shift_logits", "=", "lm_logits", "[", "...", ",", ":", "-", "1", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "shift_labels", "=", "lm_labels", "[", "...", ",", "1", ":", "]", ".", "contiguous", "(", ")", "\n", "loss_fct", "=", "CrossEntropyLoss", "(", "ignore_index", "=", "-", "1", ")", "\n", "loss", "=", "loss_fct", "(", "shift_logits", ".", "view", "(", "-", "1", ",", "shift_logits", ".", "size", "(", "-", "1", ")", ")", ",", "\n", "shift_labels", ".", "view", "(", "-", "1", ")", ")", "\n", "outputs", "=", "(", "loss", ",", ")", "+", "outputs", "\n", "\n", "", "return", "outputs", "# (lm loss), (mc loss), lm logits, mc logits, (all hidden_states), (attentions)", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.load_tf_weights_in_openai_gpt": [[44, 117], ["logger.info", "json.load", "json.load", "np.cumsum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "json.load.pop", "init_params.pop", "init_params.pop", "zip", "os.path.dirname", "io.open", "io.open", "np.load", "np.split", "param.reshape", "arr.squeeze", "name.split.split", "logger.info", "torch.from_numpy", "torch.from_numpy", "np.prod", "range", "np.concatenate", "zip", "re.fullmatch", "re.split", "getattr", "len", "int", "getattr", "getattr", "getattr"], "function", ["None"], ["def", "load_tf_weights_in_openai_gpt", "(", "model", ",", "config", ",", "openai_checkpoint_folder_path", ")", ":", "\n", "    ", "\"\"\" Load tf pre-trained weights in a pytorch model (from NumPy arrays here)\n    \"\"\"", "\n", "import", "re", "\n", "import", "numpy", "as", "np", "\n", "\n", "if", "'.ckpt'", "in", "openai_checkpoint_folder_path", ":", "\n", "        ", "openai_checkpoint_folder_path", "=", "os", ".", "path", ".", "dirname", "(", "openai_checkpoint_folder_path", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loading weights from {}\"", ".", "format", "(", "openai_checkpoint_folder_path", ")", ")", "\n", "\n", "names", "=", "json", ".", "load", "(", "open", "(", "openai_checkpoint_folder_path", "+", "'/parameters_names.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "shapes", "=", "json", ".", "load", "(", "open", "(", "openai_checkpoint_folder_path", "+", "'/params_shapes.json'", ",", "\"r\"", ",", "encoding", "=", "'utf-8'", ")", ")", "\n", "offsets", "=", "np", ".", "cumsum", "(", "[", "np", ".", "prod", "(", "shape", ")", "for", "shape", "in", "shapes", "]", ")", "\n", "init_params", "=", "[", "np", ".", "load", "(", "openai_checkpoint_folder_path", "+", "'/params_{}.npy'", ".", "format", "(", "n", ")", ")", "for", "n", "in", "range", "(", "10", ")", "]", "\n", "init_params", "=", "np", ".", "split", "(", "np", ".", "concatenate", "(", "init_params", ",", "0", ")", ",", "offsets", ")", "[", ":", "-", "1", "]", "\n", "init_params", "=", "[", "param", ".", "reshape", "(", "shape", ")", "for", "param", ",", "shape", "in", "zip", "(", "init_params", ",", "shapes", ")", "]", "\n", "\n", "# This was used when we had a single embedding matrix for positions and tokens", "\n", "# init_params[0] = np.concatenate([init_params[1], init_params[0]], 0)", "\n", "# del init_params[1]", "\n", "init_params", "=", "[", "arr", ".", "squeeze", "(", ")", "for", "arr", "in", "init_params", "]", "\n", "\n", "try", ":", "\n", "        ", "assert", "model", ".", "tokens_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "1", "]", ".", "shape", "\n", "assert", "model", ".", "positions_embed", ".", "weight", ".", "shape", "==", "init_params", "[", "0", "]", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "        ", "e", ".", "args", "+=", "(", "model", ".", "tokens_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "1", "]", ".", "shape", ")", "\n", "e", ".", "args", "+=", "(", "model", ".", "positions_embed", ".", "weight", ".", "shape", ",", "init_params", "[", "0", "]", ".", "shape", ")", "\n", "raise", "\n", "\n", "", "model", ".", "tokens_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "1", "]", ")", "\n", "model", ".", "positions_embed", ".", "weight", ".", "data", "=", "torch", ".", "from_numpy", "(", "init_params", "[", "0", "]", ")", "\n", "names", ".", "pop", "(", "0", ")", "\n", "# Pop position and token embedding arrays", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "init_params", ".", "pop", "(", "0", ")", "\n", "\n", "for", "name", ",", "array", "in", "zip", "(", "names", ",", "init_params", ")", ":", "# names[1:n_transfer], init_params[1:n_transfer]):", "\n", "        ", "name", "=", "name", "[", "6", ":", "]", "# skip \"model/\"", "\n", "assert", "name", "[", "-", "2", ":", "]", "==", "\":0\"", "\n", "name", "=", "name", "[", ":", "-", "2", "]", "\n", "name", "=", "name", ".", "split", "(", "'/'", ")", "\n", "pointer", "=", "model", "\n", "for", "m_name", "in", "name", ":", "\n", "            ", "if", "re", ".", "fullmatch", "(", "r'[A-Za-z]+\\d+'", ",", "m_name", ")", ":", "\n", "                ", "l", "=", "re", ".", "split", "(", "r'(\\d+)'", ",", "m_name", ")", "\n", "", "else", ":", "\n", "                ", "l", "=", "[", "m_name", "]", "\n", "", "if", "l", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'b'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'bias'", ")", "\n", "", "elif", "l", "[", "0", "]", "==", "'w'", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "'weight'", ")", "\n", "", "else", ":", "\n", "                ", "pointer", "=", "getattr", "(", "pointer", ",", "l", "[", "0", "]", ")", "\n", "", "if", "len", "(", "l", ")", ">=", "2", ":", "\n", "                ", "num", "=", "int", "(", "l", "[", "1", "]", ")", "\n", "pointer", "=", "pointer", "[", "num", "]", "\n", "", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "try", ":", "\n", "            ", "assert", "pointer", ".", "shape", "==", "array", ".", "shape", "\n", "", "except", "AssertionError", "as", "e", ":", "\n", "            ", "e", ".", "args", "+=", "(", "pointer", ".", "shape", ",", "array", ".", "shape", ")", "\n", "raise", "\n", "", "logger", ".", "info", "(", "\"Initialize PyTorch weight {}\"", ".", "format", "(", "name", ")", ")", "\n", "pointer", ".", "data", "=", "torch", ".", "from_numpy", "(", "array", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.gelu": [[119, 121], ["torch.tanh", "torch.tanh", "math.sqrt", "torch.pow", "torch.pow"], "function", ["None"], ["", "def", "gelu", "(", "x", ")", ":", "\n", "    ", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.modeling_openai.swish": [[123, 125], ["torch.sigmoid", "torch.sigmoid"], "function", ["None"], ["", "def", "swish", "(", "x", ")", ":", "\n", "    ", "return", "x", "*", "torch", ".", "sigmoid", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.__init__": [[54, 56], ["EnvironmentError"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"AutoTokenizer is designed to be instantiated \"", "\n", "\"using the `AutoTokenizer.from_pretrained(pretrained_model_name_or_path)` method.\"", ")", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained": [[58, 121], ["ValueError", "tokenization_distilbert.DistilBertTokenizer.from_pretrained", "tokenization_roberta.RobertaTokenizer.from_pretrained", "tokenization_bert.BertTokenizer.from_pretrained", "tokenization_openai.OpenAIGPTTokenizer.from_pretrained", "tokenization_gpt2.GPT2Tokenizer.from_pretrained", "tokenization_transfo_xl.TransfoXLTokenizer.from_pretrained", "tokenization_xlnet.XLNetTokenizer.from_pretrained", "tokenization_xlm.XLMTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_auto.AutoTokenizer.from_pretrained"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "r\"\"\" Instantiate a one of the tokenizer classes of the library\n        from a pre-trained model vocabulary.\n\n        The tokenizer class to instantiate is selected as the first pattern matching\n        in the `pretrained_model_name_or_path` string (in the following order):\n            - contains `distilbert`: DistilBertTokenizer (DistilBert model)\n            - contains `roberta`: RobertaTokenizer (XLM model)\n            - contains `bert`: BertTokenizer (Bert model)\n            - contains `openai-gpt`: OpenAIGPTTokenizer (OpenAI GPT model)\n            - contains `gpt2`: GPT2Tokenizer (OpenAI GPT-2 model)\n            - contains `transfo-xl`: TransfoXLTokenizer (Transformer-XL model)\n            - contains `xlnet`: XLNetTokenizer (XLNet model)\n            - contains `xlm`: XLMTokenizer (XLM model)\n\n        Params:\n            pretrained_model_name_or_path: either:\n\n                - a string with the `shortcut name` of a predefined tokenizer to load from cache or download, e.g.: ``bert-base-uncased``.\n                - a path to a `directory` containing vocabulary files required by the tokenizer, for instance saved using the :func:`~pytorch_transformers.PreTrainedTokenizer.save_pretrained` method, e.g.: ``./my_model_directory/``.\n                - (not applicable to all derived classes) a path or url to a single saved vocabulary file if and only if the tokenizer only requires a single vocabulary file (e.g. Bert, XLNet), e.g.: ``./my_model_directory/vocab.txt``.\n\n            cache_dir: (`optional`) string:\n                Path to a directory in which a downloaded predefined tokenizer vocabulary files should be cached if the standard cache should not be used.\n\n            force_download: (`optional`) boolean, default False:\n                Force to (re-)download the vocabulary files and override the cached versions if they exists.\n\n            proxies: (`optional`) dict, default None:\n                A dictionary of proxy servers to use by protocol or endpoint, e.g.: {'http': 'foo.bar:3128', 'http://hostname': 'foo.bar:4012'}.\n                The proxies are used on each request.\n\n            inputs: (`optional`) positional arguments: will be passed to the Tokenizer ``__init__`` method.\n\n            kwargs: (`optional`) keyword arguments: will be passed to the Tokenizer ``__init__`` method. Can be used to set special tokens like ``bos_token``, ``eos_token``, ``unk_token``, ``sep_token``, ``pad_token``, ``cls_token``, ``mask_token``, ``additional_special_tokens``. See parameters in the doc string of :class:`~pytorch_transformers.PreTrainedTokenizer` for details.\n\n        Examples::\n\n            tokenizer = AutoTokenizer.from_pretrained('bert-base-uncased')    # Download vocabulary from S3 and cache.\n            tokenizer = AutoTokenizer.from_pretrained('./test/bert_saved_model/')  # E.g. tokenizer was saved using `save_pretrained('./test/saved_model/')`\n\n        \"\"\"", "\n", "if", "'distilbert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "DistilBertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'roberta'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "RobertaTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'bert'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "BertTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'openai-gpt'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "OpenAIGPTTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'gpt2'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "GPT2Tokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'transfo-xl'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "TransfoXLTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlnet'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLNetTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "elif", "'xlm'", "in", "pretrained_model_name_or_path", ":", "\n", "            ", "return", "XLMTokenizer", ".", "from_pretrained", "(", "pretrained_model_name_or_path", ",", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n", "", "raise", "ValueError", "(", "\"Unrecognized model identifier in {}. Should contains one of \"", "\n", "\"'bert', 'openai-gpt', 'gpt2', 'transfo-xl', 'xlnet', \"", "\n", "\"'xlm', 'roberta'\"", ".", "format", "(", "pretrained_model_name_or_path", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.convert_xlm_checkpoint_to_pytorch.convert_xlm_checkpoint_to_pytorch": [[32, 59], ["torch.load", "dict", "dict", "print", "torch.save", "print", "print", "io.open", "f.write", "io.open", "f.write", "dict.items", "dict.items", "json.dumps", "json.dumps", "isinstance", "s.replace", "s.find"], "function", ["None"], ["def", "convert_xlm_checkpoint_to_pytorch", "(", "xlm_checkpoint_path", ",", "pytorch_dump_folder_path", ")", ":", "\n", "# Load checkpoint", "\n", "    ", "chkpt", "=", "torch", ".", "load", "(", "xlm_checkpoint_path", ",", "map_location", "=", "'cpu'", ")", "\n", "\n", "model", "=", "chkpt", "[", "'model'", "]", "\n", "\n", "config", "=", "chkpt", "[", "'params'", "]", "\n", "config", "=", "dict", "(", "(", "n", ",", "v", ")", "for", "n", ",", "v", "in", "config", ".", "items", "(", ")", "if", "not", "isinstance", "(", "v", ",", "(", "torch", ".", "FloatTensor", ",", "numpy", ".", "ndarray", ")", ")", ")", "\n", "\n", "vocab", "=", "chkpt", "[", "'dico_word2id'", "]", "\n", "vocab", "=", "dict", "(", "(", "s", "+", "'</w>'", "if", "s", ".", "find", "(", "'@@'", ")", "==", "-", "1", "and", "i", ">", "13", "else", "s", ".", "replace", "(", "'@@'", ",", "''", ")", ",", "i", ")", "for", "s", ",", "i", "in", "vocab", ".", "items", "(", ")", ")", "\n", "\n", "# Save pytorch-model", "\n", "pytorch_weights_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "WEIGHTS_NAME", "\n", "pytorch_config_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "CONFIG_NAME", "\n", "pytorch_vocab_dump_path", "=", "pytorch_dump_folder_path", "+", "'/'", "+", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", "\n", "\n", "print", "(", "\"Save PyTorch model to {}\"", ".", "format", "(", "pytorch_weights_dump_path", ")", ")", "\n", "torch", ".", "save", "(", "model", ",", "pytorch_weights_dump_path", ")", "\n", "\n", "print", "(", "\"Save configuration file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_config_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "config", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "print", "(", "\"Save vocab file to {}\"", ".", "format", "(", "pytorch_config_dump_path", ")", ")", "\n", "with", "open", "(", "pytorch_vocab_dump_path", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "json", ".", "dumps", "(", "vocab", ",", "indent", "=", "2", ")", "+", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__": [[87, 110], ["tokenization_utils.PreTrainedTokenizer.__init__", "json.load", "dict", "English", "English.Defaults.create_tokenizer", "io.open", "io.open().read().split", "tuple", "zip", "logger.warning", "tokenization_bert.BasicTokenizer", "tokenization_openai.OpenAIGPTTokenizer.encoder.items", "merge.split", "range", "io.open().read", "len", "io.open"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.__init__"], ["def", "__init__", "(", "self", ",", "vocab_file", ",", "merges_file", ",", "unk_token", "=", "\"<unk>\"", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "OpenAIGPTTokenizer", ",", "self", ")", ".", "__init__", "(", "unk_token", "=", "unk_token", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "max_len_single_sentence", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "self", ".", "max_len_sentences_pair", "=", "self", ".", "max_len", "# no default special tokens - you can update this value if you add special tokens", "\n", "\n", "try", ":", "\n", "            ", "import", "ftfy", "\n", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "_nlp", "=", "English", "(", ")", "\n", "self", ".", "nlp", "=", "_nlp", ".", "Defaults", ".", "create_tokenizer", "(", "_nlp", ")", "\n", "self", ".", "fix_text", "=", "ftfy", ".", "fix_text", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\"ftfy or spacy is not installed using BERT BasicTokenizer instead of SpaCy & ftfy.\"", ")", "\n", "self", ".", "nlp", "=", "BasicTokenizer", "(", "do_lower_case", "=", "True", ")", "\n", "self", ".", "fix_text", "=", "None", "\n", "\n", "", "self", ".", "encoder", "=", "json", ".", "load", "(", "open", "(", "vocab_file", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "merges", "=", "open", "(", "merges_file", ",", "encoding", "=", "'utf-8'", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "\n", "merges", "=", "[", "tuple", "(", "merge", ".", "split", "(", ")", ")", "for", "merge", "in", "merges", "]", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "merges", ",", "range", "(", "len", "(", "merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.vocab_size": [[111, 114], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "vocab_size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.bpe": [[115, 157], ["tokenization_openai.get_pairs", "tuple", "min", "tuple", "len", "len", "tokenization_openai.get_pairs", "word.index", "tuple.extend", "tuple.append", "tuple.append", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "word", "=", "tuple", "(", "token", "[", ":", "-", "1", "]", ")", "+", "(", "token", "[", "-", "1", "]", "+", "'</w>'", ",", ")", "\n", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "+", "'</w>'", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "if", "word", "==", "'\\n  </w>'", ":", "\n", "            ", "word", "=", "'\\n</w>'", "\n", "", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._tokenize": [[158, 172], ["tokenization_openai.OpenAIGPTTokenizer.nlp.tokenize", "tokenization_openai.OpenAIGPTTokenizer.nlp", "split_tokens.extend", "tokenization_openai.text_standardize", "split_tokens.extend", "tokenization_openai.OpenAIGPTTokenizer.fix_text", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe().split", "tokenization_openai.OpenAIGPTTokenizer.bpe", "tokenization_openai.OpenAIGPTTokenizer.bpe", "token.text.lower"], "methods", ["home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_utils.PreTrainedTokenizer.tokenize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.text_standardize", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.bpe", "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.bpe"], ["", "def", "_tokenize", "(", "self", ",", "text", ")", ":", "\n", "        ", "\"\"\" Tokenize a string. \"\"\"", "\n", "split_tokens", "=", "[", "]", "\n", "if", "self", ".", "fix_text", "is", "None", ":", "\n", "# Using BERT's BasicTokenizer", "\n", "            ", "text", "=", "self", ".", "nlp", ".", "tokenize", "(", "text", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "else", ":", "\n", "# Using SpaCy & ftfy (original tokenization process of OpenAI GPT)", "\n", "            ", "text", "=", "self", ".", "nlp", "(", "text_standardize", "(", "self", ".", "fix_text", "(", "text", ")", ")", ")", "\n", "for", "token", "in", "text", ":", "\n", "                ", "split_tokens", ".", "extend", "(", "[", "t", "for", "t", "in", "self", ".", "bpe", "(", "token", ".", "text", ".", "lower", "(", ")", ")", ".", "split", "(", "' '", ")", "]", ")", "\n", "", "", "return", "split_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_token_to_id": [[173, 176], ["tokenization_openai.OpenAIGPTTokenizer.encoder.get", "tokenization_openai.OpenAIGPTTokenizer.encoder.get"], "methods", ["None"], ["", "def", "_convert_token_to_id", "(", "self", ",", "token", ")", ":", "\n", "        ", "\"\"\" Converts a token (str/unicode) in an id using the vocab. \"\"\"", "\n", "return", "self", ".", "encoder", ".", "get", "(", "token", ",", "self", ".", "encoder", ".", "get", "(", "self", ".", "unk_token", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer._convert_id_to_token": [[177, 180], ["tokenization_openai.OpenAIGPTTokenizer.decoder.get"], "methods", ["None"], ["", "def", "_convert_id_to_token", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Converts an id in a token (BPE) using the vocab.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "get", "(", "index", ",", "self", ".", "unk_token", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.convert_tokens_to_string": [[181, 185], ["None"], "methods", ["None"], ["", "def", "convert_tokens_to_string", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "\"\"\" Converts a sequence of tokens (string) in a single string. \"\"\"", "\n", "out_string", "=", "''", ".", "join", "(", "tokens", ")", ".", "replace", "(", "'</w>'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "return", "out_string", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.OpenAIGPTTokenizer.save_vocabulary": [[186, 209], ["os.path.join", "os.path.join", "os.path.isdir", "logger.error", "io.open", "f.write", "io.open", "writer.write", "sorted", "json.dumps", "tokenization_openai.OpenAIGPTTokenizer.bpe_ranks.items", "writer.write", "logger.warning"], "methods", ["None"], ["", "def", "save_vocabulary", "(", "self", ",", "save_directory", ")", ":", "\n", "        ", "\"\"\"Save the tokenizer vocabulary and merge files to a directory.\"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "save_directory", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\"Vocabulary path ({}) should be a directory\"", ".", "format", "(", "save_directory", ")", ")", "\n", "return", "\n", "", "vocab_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'vocab_file'", "]", ")", "\n", "merge_file", "=", "os", ".", "path", ".", "join", "(", "save_directory", ",", "VOCAB_FILES_NAMES", "[", "'merges_file'", "]", ")", "\n", "\n", "with", "open", "(", "vocab_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "json", ".", "dumps", "(", "self", ".", "encoder", ",", "ensure_ascii", "=", "False", ")", ")", "\n", "\n", "", "index", "=", "0", "\n", "with", "open", "(", "merge_file", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "writer", ":", "\n", "            ", "writer", ".", "write", "(", "u'#version: 0.2\\n'", ")", "\n", "for", "bpe_tokens", ",", "token_index", "in", "sorted", "(", "self", ".", "bpe_ranks", ".", "items", "(", ")", ",", "key", "=", "lambda", "kv", ":", "kv", "[", "1", "]", ")", ":", "\n", "                ", "if", "index", "!=", "token_index", ":", "\n", "                    ", "logger", ".", "warning", "(", "\"Saving vocabulary to {}: BPE merge indices are not consecutive.\"", "\n", "\" Please check that the tokenizer is not corrupted!\"", ".", "format", "(", "merge_file", ")", ")", "\n", "index", "=", "token_index", "\n", "", "writer", ".", "write", "(", "' '", ".", "join", "(", "bpe_tokens", ")", "+", "u'\\n'", ")", "\n", "index", "+=", "1", "\n", "\n", "", "", "return", "vocab_file", ",", "merge_file", "\n", "", "", ""]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.get_pairs": [[50, 61], ["set", "set.add"], "function", ["None"], ["def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"\n    Return set of symbol pairs in a word.\n    word is represented as tuple of symbols (symbols being variable-length strings)\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.zlinao_VGLM.pytorch_transformers.tokenization_openai.text_standardize": [[62, 76], ["re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub.replace", "re.sub", "re.sub", "re.sub", "re.sub.strip"], "function", ["None"], ["", "def", "text_standardize", "(", "text", ")", ":", "\n", "    ", "\"\"\"\n    fixes some issues the spacy tokenizer had on books corpus\n    also does some whitespace standardization\n    \"\"\"", "\n", "text", "=", "text", ".", "replace", "(", "'\u2014'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2013'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2015'", ",", "'-'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u2026'", ",", "'...'", ")", "\n", "text", "=", "text", ".", "replace", "(", "'\u00b4'", ",", "\"'\"", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'''(-+|~+|!+|\"+|;+|\\?+|\\++|,+|\\)+|\\(+|\\\\+|\\/+|\\*+|\\[+|\\]+|}+|{+|\\|+|_+)'''", ",", "r' \\1 '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'\\s*\\n\\s*'", ",", "' \\n '", ",", "text", ")", "\n", "text", "=", "re", ".", "sub", "(", "r'[^\\S\\n]+'", ",", "' '", ",", "text", ")", "\n", "return", "text", ".", "strip", "(", ")", "\n", "\n"]]}