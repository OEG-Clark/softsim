{"home.repos.pwc.inspect_result.fabiopoiesi_dip.None.preprocess_3dmatch_lrf_train.get_T": [[23, 34], ["numpy.empty", "enumerate", "open", "f.readlines", "numpy.fromstring"], "function", ["None"], ["", "def", "get_T", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "T", "=", "np", ".", "empty", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "float", ")", "\n", "j", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "i", "<", "1", ":", "\n", "            ", "continue", "\n", "", "T", "[", "j", ",", ":", "]", "=", "np", ".", "fromstring", "(", "l", ",", "dtype", "=", "float", ",", "sep", "=", "'\\t'", ")", "\n", "j", "+=", "1", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.preprocess_3dmatch_correspondences_train.get_T": [[6, 17], ["numpy.empty", "enumerate", "open", "f.readlines", "numpy.fromstring"], "function", ["None"], ["def", "get_T", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "T", "=", "np", ".", "empty", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "float", ")", "\n", "j", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "i", "<", "1", ":", "\n", "            ", "continue", "\n", "", "T", "[", "j", ",", ":", "]", "=", "np", ".", "fromstring", "(", "l", ",", "dtype", "=", "float", ",", "sep", "=", "'\\t'", ")", "\n", "j", "+=", "1", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.lrf.lrf.__init__": [[11, 18], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pcd", ",", "pcd_tree", ",", "lrf_kernel", ",", "patch_size", ",", "viz", "=", "False", ")", ":", "\n", "\n", "        ", "self", ".", "pcd", "=", "pcd", "\n", "self", ".", "pcd_tree", "=", "pcd_tree", "\n", "self", ".", "do_viz", "=", "viz", "\n", "self", ".", "patch_kernel", "=", "lrf_kernel", "\n", "self", ".", "patch_size", "=", "patch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.lrf.lrf.get": [[19, 79], ["lrf.lrf.pcd_tree.search_radius_vector_3d", "numpy.linalg.eig", "numpy.argmin", "xp.squeeze.squeeze.squeeze", "numpy.cross", "numpy.zeros", "numpy.random.choice", "numpy.dot", "len", "lrf.lrf.pcd_tree.search_knn_vector_3d", "numpy.dot().squeeze", "numpy.dot", "numpy.asarray", "lrf.lrf.pcd.paint_uniform_color", "lrf.lrf.pcd.estimate_normals", "open3d.geometry.TriangleMesh.create_coordinate_frame", "open3d.geometry.TriangleMesh.create_coordinate_frame.transform", "open3d.visualization.draw_geometries", "numpy.concatenate", "numpy.asarray", "numpy.asarray", "len", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.asarray", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.zeros"], "methods", ["None"], ["", "def", "get", "(", "self", ",", "pt", ")", ":", "\n", "\n", "        ", "_", ",", "patch_idx", ",", "_", "=", "self", ".", "pcd_tree", ".", "search_radius_vector_3d", "(", "pt", ",", "self", ".", "patch_kernel", ")", "\n", "\n", "ptnn", "=", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "points", ")", "[", "patch_idx", "[", "1", ":", "]", ",", ":", "]", ".", "T", "\n", "ptall", "=", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "points", ")", "[", "patch_idx", ",", ":", "]", ".", "T", "\n", "\n", "# eq. 3", "\n", "ptnn_cov", "=", "1", "/", "len", "(", "ptnn", ")", "*", "np", ".", "dot", "(", "(", "ptnn", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", ",", "(", "ptnn", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "T", ")", "\n", "\n", "if", "len", "(", "patch_idx", ")", "<", "self", ".", "patch_kernel", "/", "2", ":", "\n", "            ", "_", ",", "patch_idx", ",", "_", "=", "self", ".", "pcd_tree", ".", "search_knn_vector_3d", "(", "pt", ",", "self", ".", "patch_kernel", ")", "\n", "\n", "# The normalized (unit \u201clength\u201d) eigenvectors, s.t. the column v[:,i] is the eigenvector corresponding to the eigenvalue w[i].", "\n", "", "a", ",", "v", "=", "np", ".", "linalg", ".", "eig", "(", "ptnn_cov", ")", "\n", "smallest_eigevalue_idx", "=", "np", ".", "argmin", "(", "a", ")", "\n", "np_hat", "=", "v", "[", ":", ",", "smallest_eigevalue_idx", "]", "\n", "\n", "# eq. 4", "\n", "zp", "=", "np_hat", "if", "np", ".", "sum", "(", "np", ".", "dot", "(", "np_hat", ",", "pt", "[", ":", ",", "np", ".", "newaxis", "]", "-", "ptnn", ")", ")", ">", "0", "else", "-", "np_hat", "\n", "\n", "v", "=", "(", "ptnn", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", "-", "(", "np", ".", "dot", "(", "(", "ptnn", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "T", ",", "zp", "[", ":", ",", "np", ".", "newaxis", "]", ")", "*", "zp", ")", ".", "T", "\n", "alpha", "=", "(", "self", ".", "patch_kernel", "-", "np", ".", "linalg", ".", "norm", "(", "pt", "[", ":", ",", "np", ".", "newaxis", "]", "-", "ptnn", ",", "axis", "=", "0", ")", ")", "**", "2", "\n", "beta", "=", "np", ".", "dot", "(", "(", "ptnn", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "T", ",", "zp", "[", ":", ",", "np", ".", "newaxis", "]", ")", ".", "squeeze", "(", ")", "**", "2", "\n", "\n", "# e.q. 5", "\n", "xp", "=", "1", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "dot", "(", "v", ",", "(", "alpha", "*", "beta", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "*", "np", ".", "dot", "(", "v", ",", "(", "alpha", "*", "beta", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "xp", "=", "xp", ".", "squeeze", "(", ")", "\n", "\n", "yp", "=", "np", ".", "cross", "(", "xp", ",", "zp", ")", "\n", "\n", "lRg", "=", "np", ".", "asarray", "(", "[", "xp", ",", "yp", ",", "zp", "]", ")", ".", "T", "\n", "\n", "# rotate w.r.t local frame and centre in zero using the chosen point", "\n", "ptall", "=", "(", "lRg", ".", "T", "@", "(", "ptall", "-", "pt", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", ".", "T", "\n", "\n", "# this is our normalisation", "\n", "ptall", "/=", "self", ".", "patch_kernel", "\n", "\n", "T", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ")", "\n", "T", "[", "-", "1", ",", "-", "1", "]", "=", "1", "\n", "T", "[", ":", "3", ",", ":", "3", "]", "=", "lRg", "\n", "T", "[", ":", "3", ",", "-", "1", "]", "=", "pt", "\n", "\n", "# visualise patch and local reference frame", "\n", "if", "self", ".", "do_viz", ":", "\n", "            ", "self", ".", "pcd", ".", "paint_uniform_color", "(", "[", ".3", ",", ".3", ",", ".3", "]", ")", "\n", "self", ".", "pcd", ".", "estimate_normals", "(", ")", "\n", "np", ".", "asarray", "(", "self", ".", "pcd", ".", "colors", ")", "[", "patch_idx", "[", "1", ":", "]", "]", "=", "[", "0", ",", "1", ",", "0", "]", "\n", "local_frame", "=", "o3d", ".", "geometry", ".", "TriangleMesh", ".", "create_coordinate_frame", "(", "size", "=", "0.2", ")", "\n", "local_frame", ".", "transform", "(", "T", ")", "\n", "o3d", ".", "visualization", ".", "draw_geometries", "(", "[", "self", ".", "pcd", ",", "local_frame", "]", ")", "\n", "\n", "# to make sure that there are at least self.patch_size points, pad with zeros if not", "\n", "", "if", "ptall", ".", "shape", "[", "0", "]", "<", "self", ".", "patch_size", ":", "\n", "            ", "ptall", "=", "np", ".", "concatenate", "(", "(", "ptall", ",", "np", ".", "zeros", "(", "(", "self", ".", "patch_size", "-", "ptall", ".", "shape", "[", "0", "]", ",", "3", ")", ")", ")", ")", "\n", "\n", "", "inds", "=", "np", ".", "random", ".", "choice", "(", "ptall", ".", "shape", "[", "0", "]", ",", "self", ".", "patch_size", ",", "replace", "=", "False", ")", "\n", "\n", "return", "ptall", "[", "inds", "]", ",", "pt", ",", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.STN3d.__init__": [[7, 30], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "STN3d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "3", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "9", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.STN3d.forward": [[31, 54], ["network.STN3d.conv1", "network.STN3d.conv2", "network.STN3d.conv3", "x.view.view.view", "network.STN3d.fc1", "network.STN3d.fc2", "network.STN3d.fc3", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "torch.Tensor().view().repeat", "x.view.view.view", "x.view.view.size", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "iden.cuda.cuda.cuda", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor().view", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "batchsize", "=", "x", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "x", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "[", "0", "]", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "iden", "=", "torch", ".", "Tensor", "(", "[", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "0", ",", "0", ",", "0", ",", "1", "]", ")", ".", "view", "(", "1", ",", "9", ")", ".", "repeat", "(", "batchsize", ",", "1", ")", "\n", "if", "x", ".", "is_cuda", ":", "\n", "            ", "iden", "=", "iden", ".", "cuda", "(", ")", "\n", "", "x", "=", "x", "+", "iden", "\n", "\n", "x", "=", "x", ".", "view", "(", "-", "1", ",", "3", ",", "3", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature.__init__": [[58, 87], ["torch.Module.__init__", "network.STN3d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "32", ",", "l2norm", "=", "True", ",", "tnet", "=", "True", ")", ":", "\n", "        ", "super", "(", "PointNetFeature", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "l2norm", "=", "l2norm", "\n", "self", ".", "tnet", "=", "tnet", "\n", "\n", "self", ".", "stn3d", "=", "STN3d", "(", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "3", ",", "256", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "256", ",", "512", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Conv1d", "(", "512", ",", "1024", ",", "1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "1024", ")", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "1024", ",", "512", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "fc2", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "0.3", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "self", ".", "fc3", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "256", ",", "dim", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward": [[88, 114], ["network.PointNetFeature.conv1", "network.PointNetFeature.conv2", "network.PointNetFeature.conv3", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mx.view", "network.PointNetFeature.fc1", "network.PointNetFeature.fc2", "network.PointNetFeature.fc3", "network.PointNetFeature.stn3d", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "_forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "if", "self", ".", "tnet", ":", "\n", "            ", "trans", "=", "self", ".", "stn3d", "(", "x", ")", "\n", "xtrans", "=", "torch", ".", "bmm", "(", "trans", ",", "x", ")", "\n", "", "else", ":", "\n", "            ", "xtrans", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "xtrans", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "\n", "mx", ",", "amx", "=", "torch", ".", "max", "(", "x", ",", "2", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "mx", ".", "view", "(", "-", "1", ",", "1024", ")", "\n", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "if", "self", ".", "l2norm", ":", "\n", "            ", "if", "self", ".", "tnet", ":", "\n", "                ", "return", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "xtrans", ",", "trans", ",", "mx", ",", "amx", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "normalize", "(", "x", ",", "p", "=", "2", ",", "dim", "=", "1", ")", ",", "mx", ",", "amx", "\n", "", "", "else", ":", "\n", "            ", "return", "x", ",", "xtrans", ",", "trans", ",", "mx", ",", "amx", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature.forward": [[115, 132], ["torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "xp.nelement", "network.PointNetFeature._forward", "network.PointNetFeature._forward", "network.PointNetFeature._forward", "network.PointNetFeature._forward", "network.PointNetFeature._forward", "network.PointNetFeature._forward"], "methods", ["home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward", "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward", "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward", "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward", "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward", "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.network.PointNetFeature._forward"], ["", "", "def", "forward", "(", "self", ",", "xa", ",", "xp", "=", "torch", ".", "Tensor", "(", "[", "]", ")", ",", "trans", "=", "False", ")", ":", "\n", "\n", "        ", "if", "xp", ".", "nelement", "(", ")", "==", "0", ":", "\n", "            ", "if", "trans", "or", "not", "self", ".", "tnet", ":", "\n", "                ", "out", ",", "mx", ",", "amx", "=", "self", ".", "_forward", "(", "xa", ")", "\n", "return", "out", ",", "mx", ",", "amx", "\n", "", "else", ":", "\n", "                ", "out", ",", "_", ",", "_", ",", "mx", ",", "amx", "=", "self", ".", "_forward", "(", "xa", ")", "\n", "return", "out", ",", "mx", ",", "amx", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "tnet", ":", "\n", "                ", "out1a", ",", "out1b", ",", "out1c", ",", "_", ",", "_", "=", "self", ".", "_forward", "(", "xa", ")", "\n", "out2a", ",", "out2b", ",", "out2c", ",", "_", ",", "_", "=", "self", ".", "_forward", "(", "xp", ")", "\n", "return", "out1a", ",", "out1b", ",", "out1c", ",", "out2a", ",", "out2b", ",", "out2c", "\n", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "_forward", "(", "xa", ")", ",", "self", ".", "_forward", "(", "xp", ")", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.__init__": [[12, 57], ["os.path.join", "os.path.join", "os.listdir", "dataset.Dataset.list_ptcld_overlap_files.sort", "numpy.empty", "numpy.empty", "len", "h5py.File", "numpy.asarray", "numpy.random.shuffle", "_list_ptcld_overlap_files.append", "os.path.join", "list", "int", "list", "numpy.delete", "numpy.vstack", "h5py.File.keys", "range", "numpy.vstack", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "\n", "dataset", ",", "\n", "dataset_to_train", ",", "\n", "ratio_to_eval", "=", "None", ",", "\n", "do_data_aug", "=", "True", ")", ":", "\n", "\n", "        ", "self", ".", "root_ptcld", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset", ")", "\n", "self", ".", "root_ptcld_overlap", "=", "os", ".", "path", ".", "join", "(", "root", ",", "dataset", "+", "'_pre'", ",", "'correspondences'", ")", "\n", "\n", "self", ".", "list_ptcld_overlap_files", "=", "os", ".", "listdir", "(", "self", ".", "root_ptcld_overlap", ")", "\n", "self", ".", "list_ptcld_overlap_files", ".", "sort", "(", ")", "\n", "\n", "self", ".", "list_pointers_to_train", "=", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ")", "\n", "self", ".", "list_pointers_to_eval", "=", "np", ".", "empty", "(", "(", "0", ",", "2", ")", ")", "\n", "\n", "self", ".", "ratio_to_eval", "=", "ratio_to_eval", "\n", "\n", "self", ".", "do_data_aug", "=", "do_data_aug", "\n", "\n", "# if dataset_to_train is different from None only the dataset specified are used for training", "\n", "# we used this option for the ablation study in the paper", "\n", "if", "dataset_to_train", "!=", "None", ":", "\n", "            ", "_list_ptcld_overlap_files", "=", "[", "]", "\n", "for", "p", "in", "dataset_to_train", ":", "\n", "                ", "_list_ptcld_overlap_files", ".", "append", "(", "self", ".", "list_ptcld_overlap_files", "[", "p", "]", ")", "\n", "", "self", ".", "list_ptcld_overlap_files", "=", "_list_ptcld_overlap_files", "\n", "\n", "", "for", "f", "in", "self", ".", "list_ptcld_overlap_files", ":", "\n", "            ", "hf", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld_overlap", ",", "f", ")", ",", "'r'", ")", "\n", "corrs_to_train", "=", "np", ".", "asarray", "(", "list", "(", "hf", ".", "keys", "(", ")", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "corrs_to_train", ")", "\n", "\n", "# use some correspondences for validation during training", "\n", "if", "self", ".", "ratio_to_eval", "!=", "None", ":", "\n", "                ", "n_to_eval", "=", "int", "(", "self", ".", "ratio_to_eval", "*", "len", "(", "corrs_to_train", ")", ")", "\n", "idx_to_eval", "=", "list", "(", "range", "(", "n_to_eval", ")", ")", "\n", "corrs_to_eval", "=", "corrs_to_train", "[", "idx_to_eval", "]", "\n", "for", "c", "in", "corrs_to_eval", ":", "\n", "                    ", "self", ".", "list_pointers_to_eval", "=", "np", ".", "vstack", "(", "(", "self", ".", "list_pointers_to_eval", ",", "(", "f", ",", "c", ")", ")", ")", "\n", "", "corrs_to_train", "=", "np", ".", "delete", "(", "corrs_to_train", ",", "idx_to_eval", ")", "\n", "\n", "", "for", "c", "in", "corrs_to_train", ":", "\n", "                ", "self", ".", "list_pointers_to_train", "=", "np", ".", "vstack", "(", "(", "self", ".", "list_pointers_to_train", ",", "(", "f", ",", "c", ")", ")", ")", "\n", "\n", "", "", "self", ".", "length", "=", "len", "(", "self", ".", "list_pointers_to_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.__getitem__": [[59, 109], ["h5py.File", "h5py.File", "h5py.File", "h5py.File", "numpy.asarray", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "h5py.File.close", "h5py.File.close", "h5py.File.close", "h5py.File.close", "pointer[].split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "scipy.spatial.transform.Rotation.from_euler().as_matrix", "scipy.spatial.transform.Rotation.from_euler().as_matrix", "numpy.dot().transpose", "numpy.dot().transpose", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "scipy.spatial.transform.Rotation.from_euler", "scipy.spatial.transform.Rotation.from_euler", "numpy.dot", "numpy.dot", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform", "random.uniform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "pointer", "=", "self", ".", "list_pointers_to_train", "[", "index", "]", "\n", "\n", "dataset", "=", "pointer", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "frags", "=", "pointer", "[", "1", "]", "\n", "\n", "hf_patches", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'patches_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_points", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'points_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_rotations", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'rotations_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_lrfs", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'lrfs'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "\n", "patches", "=", "np", ".", "asarray", "(", "hf_patches", "[", "frags", "]", ")", "\n", "frag1_batch", "=", "patches", "[", "0", "]", "\n", "frag2_batch", "=", "patches", "[", "1", "]", "\n", "\n", "rotations", "=", "np", ".", "asarray", "(", "hf_rotations", "[", "frags", "]", ")", "\n", "R1", "=", "rotations", "[", "0", "]", "\n", "R2", "=", "rotations", "[", "1", "]", "\n", "\n", "if", "self", ".", "do_data_aug", ":", "\n", "            ", "rot_int", "=", "np", ".", "pi", "/", "30", "\n", "R1", "=", "rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", ",", "\n", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", ",", "\n", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", "]", ")", ".", "as_matrix", "(", ")", "\n", "\n", "R2", "=", "rotation", ".", "from_euler", "(", "'zyx'", ",", "[", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", ",", "\n", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", ",", "\n", "random", ".", "uniform", "(", "0", ",", "rot_int", ")", "]", ")", ".", "as_matrix", "(", ")", "\n", "\n", "frag1_batch", "=", "np", ".", "dot", "(", "R1", ",", "frag1_batch", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "frag2_batch", "=", "np", ".", "dot", "(", "R2", ",", "frag2_batch", ")", ".", "transpose", "(", "(", "1", ",", "0", ",", "2", ")", ")", "\n", "\n", "", "frag1_batch", "=", "torch", ".", "Tensor", "(", "frag1_batch", ")", "\n", "frag2_batch", "=", "torch", ".", "Tensor", "(", "frag2_batch", ")", "\n", "\n", "points", "=", "np", ".", "asarray", "(", "hf_points", "[", "frags", "]", ")", "\n", "fps_pcd1_pts", "=", "torch", ".", "Tensor", "(", "points", "[", "0", "]", ")", "\n", "fps_pcd2_pts", "=", "torch", ".", "Tensor", "(", "points", "[", "1", "]", ")", "\n", "\n", "lrfs", "=", "np", ".", "asarray", "(", "hf_lrfs", "[", "frags", "]", ")", "\n", "lrf1", "=", "torch", ".", "Tensor", "(", "lrfs", "[", "0", "]", ")", "\n", "lrf2", "=", "torch", ".", "Tensor", "(", "lrfs", "[", "1", "]", ")", "\n", "\n", "hf_patches", ".", "close", "(", ")", "\n", "hf_points", ".", "close", "(", ")", "\n", "hf_rotations", ".", "close", "(", ")", "\n", "hf_lrfs", ".", "close", "(", ")", "\n", "\n", "return", "frag1_batch", ",", "frag2_batch", ",", "fps_pcd1_pts", ",", "fps_pcd2_pts", ",", "torch", ".", "Tensor", "(", "R1", ")", ",", "torch", ".", "Tensor", "(", "R2", ")", ",", "lrf1", ",", "lrf2", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.__len__": [[111, 113], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.get_eval_length": [[115, 117], ["len"], "methods", ["None"], ["", "def", "get_eval_length", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "list_pointers_to_eval", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.dataset.Dataset.get_eval_item": [[119, 156], ["h5py.File", "h5py.File", "h5py.File", "h5py.File", "numpy.asarray", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "numpy.asarray", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "h5py.File.close", "h5py.File.close", "h5py.File.close", "h5py.File.close", "pointer[].split", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["", "def", "get_eval_item", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "pointer", "=", "self", ".", "list_pointers_to_eval", "[", "index", "]", "\n", "\n", "dataset", "=", "pointer", "[", "0", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "frags", "=", "pointer", "[", "1", "]", "\n", "\n", "hf_patches", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'patches_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_points", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'points_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_rotations", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'rotations_lrf'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "hf_lrfs", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "self", ".", "root_ptcld", "+", "'_pre'", ",", "'lrfs'", ",", "'{}.hdf5'", ".", "format", "(", "dataset", ")", ")", ",", "'r'", ")", "\n", "\n", "patches", "=", "np", ".", "asarray", "(", "hf_patches", "[", "frags", "]", ")", "\n", "frag1_batch", "=", "patches", "[", "0", "]", "\n", "frag2_batch", "=", "patches", "[", "1", "]", "\n", "\n", "rotations", "=", "np", ".", "asarray", "(", "hf_rotations", "[", "frags", "]", ")", "\n", "R1", "=", "rotations", "[", "0", "]", "\n", "R2", "=", "rotations", "[", "1", "]", "\n", "\n", "frag1_batch", "=", "torch", ".", "Tensor", "(", "frag1_batch", ")", "\n", "frag2_batch", "=", "torch", ".", "Tensor", "(", "frag2_batch", ")", "\n", "\n", "points", "=", "np", ".", "asarray", "(", "hf_points", "[", "frags", "]", ")", "\n", "fps_pcd1_pts", "=", "torch", ".", "Tensor", "(", "points", "[", "0", "]", ")", "\n", "fps_pcd2_pts", "=", "torch", ".", "Tensor", "(", "points", "[", "1", "]", ")", "\n", "\n", "lrfs", "=", "np", ".", "asarray", "(", "hf_lrfs", "[", "frags", "]", ")", "\n", "lrf1", "=", "torch", ".", "Tensor", "(", "lrfs", "[", "0", "]", ")", "\n", "lrf2", "=", "torch", ".", "Tensor", "(", "lrfs", "[", "1", "]", ")", "\n", "\n", "hf_patches", ".", "close", "(", ")", "\n", "hf_points", ".", "close", "(", ")", "\n", "hf_rotations", ".", "close", "(", ")", "\n", "hf_lrfs", ".", "close", "(", ")", "\n", "\n", "return", "frag1_batch", ",", "frag2_batch", ",", "fps_pcd1_pts", ",", "fps_pcd2_pts", ",", "torch", ".", "Tensor", "(", "R1", ")", ",", "torch", ".", "Tensor", "(", "R2", ")", ",", "lrf1", ",", "lrf2", "", "", "", ""]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.preprocess_3dmatch_correspondences_test.get_T": [[9, 20], ["numpy.empty", "enumerate", "open", "f.readlines", "numpy.fromstring"], "function", ["None"], ["def", "get_T", "(", "file", ")", ":", "\n", "    ", "with", "open", "(", "file", ")", "as", "f", ":", "\n", "        ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "T", "=", "np", ".", "empty", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "float", ")", "\n", "j", "=", "0", "\n", "for", "i", ",", "l", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "if", "i", "<", "1", ":", "\n", "            ", "continue", "\n", "", "T", "[", "j", ",", ":", "]", "=", "np", ".", "fromstring", "(", "l", ",", "dtype", "=", "float", ",", "sep", "=", "'\\t'", ")", "\n", "j", "+=", "1", "\n", "", "return", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.None.losses.hardest_contrastive": [[9, 39], ["torch.stack", "torch.stack", "torch.stack().transpose", "torch.stack().transpose", "torch.min", "torch.min", "torch.min", "torch.min", "torch.norm", "torch.norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.eye().cuda", "torch.eye().cuda", "torch.relu().pow().sum", "len", "torch.relu().pow", "torch.relu().pow", "torch.median", "torch.median", "torch.median", "torch.median", "torch.stack", "torch.stack", "torch.norm", "torch.norm", "torch.eye", "torch.eye", "torch.relu().pow", "torch.relu", "torch.relu", "torch.relu"], "function", ["None"], ["def", "hardest_contrastive", "(", "fxd", ",", "fxm", ")", ":", "\n", "    ", "big_eye", "=", "1e9", "*", "torch", ".", "eye", "(", "fxd", ".", "shape", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "fxd_r", "=", "torch", ".", "stack", "(", "[", "fxd", "]", "*", "fxd", ".", "shape", "[", "0", "]", ")", "\n", "fxm_r", "=", "torch", ".", "stack", "(", "[", "fxm", "]", "*", "fxm", ".", "shape", "[", "0", "]", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "fdists_all", "=", "torch", ".", "norm", "(", "fxd_r", "-", "fxm_r", ",", "dim", "=", "2", ")", ".", "T", "+", "big_eye", "\n", "\n", "'''\n    fdists_all =\n\n    ||fxd[0]-fxm[0] ||fxd[0]-fxm[1]|| ... ||fxd[0]-fxm[N]||\n    ||fxd[1]-fxm[0] ||fxd[1]-fxm[1]|| ... ||fxd[1]-fxm[N]|| \n    .                                       .\n    .                                       .\n    .                                       .\n    ||fxd[N]-fxm[0] ||fxd[N]-fxm[1]|| ... ||fxd[N]-fxm[N]||\n    '''", "\n", "\n", "fdm_mins", ",", "fdm_argmins", "=", "torch", ".", "min", "(", "fdists_all", ",", "dim", "=", "1", ")", "\n", "fmd_mins", ",", "fmd_argmins", "=", "torch", ".", "min", "(", "fdists_all", ",", "dim", "=", "0", ")", "\n", "\n", "fdists_pos", "=", "torch", ".", "norm", "(", "fxd", "-", "fxm", ",", "dim", "=", "1", ")", "\n", "\n", "a", "=", "F", ".", "relu", "(", "fdists_pos", "-", "mp", ")", ".", "pow", "(", "2", ")", ".", "sum", "(", ")", "/", "len", "(", "fdists_pos", ")", "\n", "b", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "mn", "-", "fdm_mins", ")", ".", "pow", "(", "2", ")", ")", "\n", "c", "=", "torch", ".", "mean", "(", "F", ".", "relu", "(", "mn", "-", "fmd_mins", ")", ".", "pow", "(", "2", ")", ")", "\n", "\n", "l", "=", "a", "+", "(", "b", "+", "c", ")", "/", "2", "\n", "\n", "return", "l", ",", "fdists_pos", ",", "torch", ".", "median", "(", "fdists_all", ",", "dim", "=", "1", ")", ",", "torch", ".", "median", "(", "fdists_all", ",", "dim", "=", "0", ")", "", "", ""]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.torch-nndistance.build.find_in_path": [[6, 14], ["path.split", "os.path.join", "os.path.exists", "os.path.abspath"], "function", ["None"], ["def", "find_in_path", "(", "name", ",", "path", ")", ":", "\n", "    ", "\"Find a file in a search path\"", "\n", "#adapted fom http://code.activestate.com/recipes/52224-find-a-file-given-a-search-path/", "\n", "for", "dir", "in", "path", ".", "split", "(", "os", ".", "pathsep", ")", ":", "\n", "        ", "binpath", "=", "pjoin", "(", "dir", ",", "name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "binpath", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "abspath", "(", "binpath", ")", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.torch-nndistance.build.locate_cuda": [[16, 46], ["cudaconfig.items", "os.path.join", "build.find_in_path", "os.path.dirname", "os.path.join", "os.path.join", "EnvironmentError", "os.path.dirname", "os.path.exists", "EnvironmentError"], "function", ["home.repos.pwc.inspect_result.fabiopoiesi_dip.torch-nndistance.build.find_in_path"], ["", "def", "locate_cuda", "(", ")", ":", "\n", "    ", "\"\"\"Locate the CUDA environment on the system\n\n    Returns a dict with keys 'home', 'nvcc', 'include', and 'lib64'\n    and values giving the absolute path to each directory.\n\n    Starts by looking for the CUDA_HOME env variable. If not found, everything\n    is based on finding 'nvcc' in the PATH.\n    \"\"\"", "\n", "\n", "# first check if the CUDA_HOME env variable is in use", "\n", "if", "'CUDA_HOME'", "in", "os", ".", "environ", ":", "\n", "        ", "home", "=", "os", ".", "environ", "[", "'CUDA_HOME'", "]", "\n", "nvcc", "=", "pjoin", "(", "home", ",", "'bin'", ",", "'nvcc'", ")", "\n", "", "else", ":", "\n", "# otherwise, search the PATH for NVCC", "\n", "        ", "nvcc", "=", "find_in_path", "(", "'nvcc'", ",", "os", ".", "environ", "[", "'PATH'", "]", ")", "\n", "if", "nvcc", "is", "None", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The nvcc binary could not be '", "\n", "'located in your $PATH. Either add it to your path, or set $CUDA_HOME'", ")", "\n", "", "home", "=", "os", ".", "path", ".", "dirname", "(", "os", ".", "path", ".", "dirname", "(", "nvcc", ")", ")", "\n", "\n", "", "cudaconfig", "=", "{", "'home'", ":", "home", ",", "'nvcc'", ":", "nvcc", ",", "\n", "'include'", ":", "pjoin", "(", "home", ",", "'include'", ")", ",", "\n", "'lib64'", ":", "pjoin", "(", "home", ",", "'lib64'", ")", "}", "\n", "for", "k", ",", "v", "in", "cudaconfig", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "v", ")", ":", "\n", "            ", "raise", "EnvironmentError", "(", "'The CUDA %s path could not be located in %s'", "%", "(", "k", ",", "v", ")", ")", "\n", "\n", "", "", "return", "cudaconfig", "\n", "", "CUDA", "=", "locate_cuda", "(", ")", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.torch_nndistance.__init__.NNDFunction.forward": [[11, 36], ["xyz1.size", "xyz2.size", "torch.zeros", "torch.zeros", "torch.zeros().type", "torch.zeros().type", "__init__.NNDFunction.save_for_backward", "torch_nndistance_aten.nnd_forward", "dist1.cuda.cuda.cuda", "dist2.cuda.cuda.cuda", "idx1.cuda.cuda.cuda", "idx2.cuda.cuda.cuda", "torch_nndistance_aten.nnd_forward_cuda", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "self", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "        ", "batchsize", ",", "n", ",", "_", "=", "xyz1", ".", "size", "(", ")", "\n", "_", ",", "m", ",", "_", "=", "xyz2", ".", "size", "(", ")", "\n", "#        self.xyz1 = xyz1[...]", "\n", "#        self.xyz2 = xyz2[...]", "\n", "dist1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", "\n", "dist2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", "\n", "idx1", "=", "torch", ".", "zeros", "(", "batchsize", ",", "n", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "idx2", "=", "torch", ".", "zeros", "(", "batchsize", ",", "m", ")", ".", "type", "(", "torch", ".", "IntTensor", ")", "\n", "\n", "if", "not", "xyz1", ".", "is_cuda", ":", "\n", "            ", "my_lib", ".", "nnd_forward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "dist1", "=", "dist1", ".", "cuda", "(", ")", "\n", "dist2", "=", "dist2", ".", "cuda", "(", ")", "\n", "idx1", "=", "idx1", ".", "cuda", "(", ")", "\n", "idx2", "=", "idx2", ".", "cuda", "(", ")", "\n", "my_lib", ".", "nnd_forward_cuda", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "\n", "# self.dist1=dist1", "\n", "# self.dist2=dist2", "\n", "# print(batchsize, n, m)", "\n", "", "self", ".", "save_for_backward", "(", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", ")", "\n", "return", "dist1", ",", "dist2", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.torch_nndistance.__init__.NNDFunction.backward": [[37, 58], ["graddist1.contiguous.contiguous.contiguous", "graddist2.contiguous.contiguous.contiguous", "torch.zeros", "torch.zeros", "xyz1.size", "xyz2.size", "torch_nndistance_aten.nnd_backward", "gradxyz1.cuda.cuda.cuda", "gradxyz2.cuda.cuda.cuda", "torch_nndistance_aten.nnd_backward_cuda"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "self", ",", "graddist1", ",", "graddist2", ")", ":", "\n", "        ", "xyz1", ",", "xyz2", ",", "dist1", ",", "dist2", ",", "idx1", ",", "idx2", "=", "self", ".", "saved_tensors", "\n", "graddist1", "=", "graddist1", ".", "contiguous", "(", ")", "\n", "graddist2", "=", "graddist2", ".", "contiguous", "(", ")", "\n", "gradxyz1", "=", "torch", ".", "zeros", "(", "xyz1", ".", "size", "(", ")", ")", "\n", "gradxyz2", "=", "torch", ".", "zeros", "(", "xyz2", ".", "size", "(", ")", ")", "\n", "\n", "if", "not", "graddist1", ".", "is_cuda", ":", "\n", "            ", "my_lib", ".", "nnd_backward", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "", "else", ":", "\n", "            ", "gradxyz1", "=", "gradxyz1", ".", "cuda", "(", ")", "\n", "gradxyz2", "=", "gradxyz2", ".", "cuda", "(", ")", "\n", "my_lib", ".", "nnd_backward_cuda", "(", "xyz1", ",", "xyz2", ",", "gradxyz1", ",", "gradxyz2", ",", "graddist1", ",", "graddist2", ",", "idx1", ",", "idx2", ")", "\n", "# print(gradxyz1)", "\n", "# print(gradxyz2)", "\n", "# print(dist1)", "\n", "# print(dist2)", "\n", "# print(idx1)", "\n", "# print(idx2)", "\n", "", "return", "gradxyz1", ",", "gradxyz2", "\n", "\n"]], "home.repos.pwc.inspect_result.fabiopoiesi_dip.torch_nndistance.__init__.nnd": [[60, 62], ["NNDFunction.apply"], "function", ["None"], ["", "", "def", "nnd", "(", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "return", "NNDFunction", ".", "apply", "(", "xyz1", ",", "xyz2", ")", "\n", "# return NNDFunction()(xyz1, xyz2)", "\n"]]}