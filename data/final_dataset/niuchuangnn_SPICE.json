{"home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.pre_compute_embedding.main": [[52, 93], ["parser.parse_args", "spice.config.Config.fromfile", "os.path.join", "spice.utils.miscellaneous.save_config", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "spice.utils.miscellaneous.mkdir", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "pre_compute_embedding.main_worker", "Config.fromfile.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config_file", ")", "\n", "output_dir", "=", "cfg", ".", "results", ".", "output_dir", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.py'", ")", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "cfg", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "cfg", ".", "distributed", "=", "cfg", ".", "world_size", ">", "1", "or", "cfg", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "cfg", ".", "world_size", "=", "ngpus_per_node", "*", "cfg", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "cfg", ".", "copy", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.pre_compute_embedding.main_worker": [[95, 178], ["spice.model.build_model_sim.build_model_sim", "print", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model_sim.cuda.eval", "torch.AdaptiveAvgPool2d", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feas_sim.numpy.numpy", "numpy.save", "print", "torch.init_process_group", "spice.utils.load_model_weights.load_model_weights", "images.to.to", "print", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model_sim.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model_sim.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model_sim.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model_sim.cuda.", "torch.functional.normalize", "feas_sim.numpy.append", "len", "nn.AdaptiveAvgPool2d.", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten.cpu"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.build_model_sim.build_model_sim", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.load_model_weights.load_model_weights"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", ":", "\n", "    ", "cfg", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "cfg", ".", "multiprocessing_distributed", "and", "cfg", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "cfg", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "", "if", "cfg", ".", "distributed", ":", "\n", "        ", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "rank", "==", "-", "1", ":", "\n", "            ", "cfg", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "cfg", ".", "rank", "=", "cfg", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "cfg", ".", "dist_backend", ",", "init_method", "=", "cfg", ".", "dist_url", ",", "\n", "world_size", "=", "cfg", ".", "world_size", ",", "rank", "=", "cfg", ".", "rank", ")", "\n", "# create model", "\n", "", "model_sim", "=", "build_model_sim", "(", "cfg", ".", "model_sim", ")", "\n", "print", "(", "model_sim", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model_sim", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "cfg", ".", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "cfg", ".", "workers", "=", "int", "(", "(", "cfg", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model_sim", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_sim", ",", "device_ids", "=", "[", "cfg", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model_sim", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model_sim", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model_sim", ")", "\n", "", "", "elif", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model_sim", "=", "model_sim", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# Load similarity model", "\n", "\n", "", "if", "cfg", ".", "model_sim", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "load_model_weights", "(", "model_sim", ",", "cfg", ".", "model_sim", ".", "pretrained", ",", "cfg", ".", "model_sim", ".", "model_type", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "dataset_val", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_val", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "model_sim", ".", "eval", "(", ")", "\n", "\n", "pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "\n", "feas_sim", "=", "[", "]", "\n", "for", "_", ",", "(", "images", ",", "_", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "print", "(", "images", ".", "shape", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "feas_sim_i", "=", "model_sim", "(", "images", ")", "\n", "if", "len", "(", "feas_sim_i", ".", "shape", ")", "==", "4", ":", "\n", "                ", "feas_sim_i", "=", "pool", "(", "feas_sim_i", ")", "\n", "feas_sim_i", "=", "torch", ".", "flatten", "(", "feas_sim_i", ",", "start_dim", "=", "1", ")", "\n", "", "feas_sim_i", "=", "nn", ".", "functional", ".", "normalize", "(", "feas_sim_i", ",", "dim", "=", "1", ")", "\n", "feas_sim", ".", "append", "(", "feas_sim_i", ".", "cpu", "(", ")", ")", "\n", "\n", "", "", "feas_sim", "=", "torch", ".", "cat", "(", "feas_sim", ",", "dim", "=", "0", ")", "\n", "feas_sim", "=", "feas_sim", ".", "numpy", "(", ")", "\n", "\n", "np", ".", "save", "(", "\"{}/feas_moco_512_l2.npy\"", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ",", "feas_sim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.AverageMeter.__init__": [[529, 533], ["train_self_v2.AverageMeter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.AverageMeter.reset": [[534, 539], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.AverageMeter.update": [[540, 545], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.AverageMeter.__str__": [[546, 549], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.ProgressMeter.__init__": [[552, 556], ["train_self_v2.ProgressMeter.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.ProgressMeter.display": [[557, 561], ["print", "str", "train_self_v2.ProgressMeter.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.ProgressMeter._get_batch_fmtstr": [[562, 566], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.main": [[53, 110], ["parser.parse_args", "spice.config.Config.fromfile", "str", "os.path.join", "spice.utils.miscellaneous.save_config", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "spice.utils.miscellaneous.mkdir", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "train_self_v2.main_worker", "Config.fromfile.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config_file", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "cfg", ".", "device_id", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "results", ".", "output_dir", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.py'", ")", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "cfg", ".", "all", "=", "args", ".", "all", "\n", "if", "cfg", ".", "all", ":", "\n", "        ", "cfg", ".", "data_train", ".", "split", "=", "\"train+test\"", "\n", "cfg", ".", "data_train", ".", "all", "=", "True", "\n", "cfg", ".", "data_test", ".", "split", "=", "\"train+test\"", "\n", "cfg", ".", "data_test", ".", "all", "=", "True", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "data_train", ".", "split", "=", "\"train\"", "\n", "cfg", ".", "data_train", ".", "all", "=", "False", "\n", "cfg", ".", "data_train", ".", "train", "=", "True", "\n", "cfg", ".", "data_test", ".", "split", "=", "\"train\"", "\n", "cfg", ".", "data_test", ".", "all", "=", "False", "\n", "cfg", ".", "data_test", ".", "train", "=", "True", "\n", "\n", "", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "cfg", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "cfg", ".", "distributed", "=", "cfg", ".", "world_size", ">", "1", "or", "cfg", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "cfg", ".", "world_size", "=", "ngpus_per_node", "*", "cfg", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "cfg", ".", "copy", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.main_worker": [[112, 390], ["spice.utils.logger.setup_logger", "spice.model.sim2sem.Sim2Sem", "spice.utils.logger.setup_logger.info", "spice.solver.make_optimizer", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "spice.utils.comm.get_rank", "spice.utils.logger.setup_logger.info", "torch.init_process_group", "spice.solver.make_lr_scheduler", "spice.utils.load_model_weights.load_model_weights", "os.path.isfile", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "train_self_v2.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "spice.utils.logger.setup_logger.info", "model.cuda.load_state_dict", "spice.solver.make_optimizer.load_state_dict", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "spice.solver.make_lr_scheduler.step", "train_self_v2.save_checkpoint", "train_self_v2.save_checkpoint", "model.cuda.eval", "torch.CrossEntropyLoss", "len", "range", "enumerate", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feas_sim.to.to", "range", "model.cuda.", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.array.max", "numpy.where", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "model.cuda.train", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train_self_v2.save_checkpoint", "pred_labels.append", "scores_all.append", "images.to.to", "feas_sim.to.append", "range", "torch.cat().long().cpu().numpy.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_labels[].long().cpu().numpy", "nn.CrossEntropyLoss.", "spice.utils.evaluation.calculate_nmi", "spice.utils.evaluation.calculate_ari", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.where", "numpy.array().argmax", "model.cuda.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "np.array.min", "np.array.min", "model.cuda.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "len", "scores[].argmax", "pred_labels[].append", "scores_all[].append", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "pred_scores_select.cpu", "scores_all[].mean", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "spice.utils.evaluation.calculate_acc", "loss_fn.item", "model.state_dict.keys", "k.startswith", "model.state_dict.keys", "k.startswith", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "pred_labels[].long().cpu", "idx_select[].cpu", "np.array.min", "numpy.array", "k.startswith", "k.startswith", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "pred_labels[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "len", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.logger.setup_logger", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_optimizer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_lr_scheduler", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.load_model_weights.load_model_weights", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", ":", "\n", "    ", "cfg", ".", "gpu", "=", "gpu", "\n", "# logger = logging.getLogger(\"{}.trainer\".format(cfg.logger_name))", "\n", "logger_name", "=", "\"spice\"", "\n", "cfg", ".", "logger_name", "=", "logger_name", "\n", "\n", "logger", "=", "setup_logger", "(", "logger_name", ",", "cfg", ".", "results", ".", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "\n", "# suppress printing if not master", "\n", "if", "cfg", ".", "multiprocessing_distributed", "and", "cfg", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "cfg", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "", "if", "cfg", ".", "distributed", ":", "\n", "        ", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "rank", "==", "-", "1", ":", "\n", "            ", "cfg", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "cfg", ".", "rank", "=", "cfg", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "cfg", ".", "dist_backend", ",", "init_method", "=", "cfg", ".", "dist_url", ",", "\n", "world_size", "=", "cfg", ".", "world_size", ",", "rank", "=", "cfg", ".", "rank", ")", "\n", "# create model", "\n", "", "model", "=", "Sim2Sem", "(", "**", "cfg", ".", "model", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "cfg", ".", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "cfg", ".", "workers", "=", "int", "(", "(", "cfg", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "cfg", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "scheduler", "=", "None", "\n", "\n", "if", "\"lr_type\"", "in", "cfg", ".", "solver", ":", "\n", "        ", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "cfg", ".", "model", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "load_model_weights", "(", "model", ",", "cfg", ".", "model", ".", "pretrained", ",", "cfg", ".", "model", ".", "model_type", ")", "\n", "\n", "", "if", "cfg", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "cfg", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "if", "cfg", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "cfg", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "cfg", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "cfg", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "\n", "# Load similarity model", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "train_dataset", "=", "build_dataset", "(", "cfg", ".", "data_train", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "cfg", ".", "target_sub_batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "dataset_val", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_val", ",", "batch_size", "=", "cfg", ".", "batch_size_test", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "best_acc", "=", "-", "2", "\n", "best_nmi", "=", "-", "1", "\n", "best_ari", "=", "-", "1", "\n", "best_head", "=", "-", "1", "\n", "best_epoch", "=", "-", "1", "\n", "min_loss", "=", "1e10", "\n", "loss_head", "=", "-", "1", "\n", "loss_acc", "=", "-", "2", "\n", "loss_nmi", "=", "-", "1", "\n", "loss_ari", "=", "-", "1", "\n", "loss_epoch", "=", "-", "1", "\n", "eval_ent", "=", "cfg", ".", "eval_ent", "\n", "eval_ent_weight", "=", "cfg", ".", "eval_ent_weight", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "start_epoch", ",", "cfg", ".", "epochs", ")", ":", "\n", "        ", "if", "cfg", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "cfg", ")", "\n", "\n", "if", "not", "cfg", ".", "multiprocessing_distributed", "or", "(", "cfg", ".", "multiprocessing_distributed", "\n", "and", "cfg", ".", "rank", "%", "ngpus_per_node", "==", "0", "and", "(", "epoch", "+", "1", ")", "%", "cfg", ".", "test_freq", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_{:04d}.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ",", "epoch", ")", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_last.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "if", "(", "epoch", "+", "1", ")", "==", "cfg", ".", "epochs", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_final.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "gt_labels", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "scores_all", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "aris", "=", "[", "]", "\n", "nmis", "=", "[", "]", "\n", "feas_sim", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "pred_labels", ".", "append", "(", "[", "]", ")", "\n", "scores_all", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "for", "_", ",", "(", "images", ",", "_", ",", "embs", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "images", "=", "images", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "scores", "=", "model", "(", "images", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "", "feas_sim", ".", "append", "(", "embs", ")", "\n", "\n", "assert", "len", "(", "scores", ")", "==", "num_heads", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "pred_idx", "=", "scores", "[", "h", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_labels", "[", "h", "]", ".", "append", "(", "pred_idx", ")", "\n", "scores_all", "[", "h", "]", ".", "append", "(", "scores", "[", "h", "]", ")", "\n", "\n", "", "gt_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "gt_labels", "=", "torch", ".", "cat", "(", "gt_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feas_sim", "=", "torch", ".", "cat", "(", "feas_sim", ",", "dim", "=", "0", ")", "\n", "feas_sim", "=", "feas_sim", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "scores_all", "[", "h", "]", "=", "torch", ".", "cat", "(", "scores_all", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "pred_labels", "[", "h", "]", "=", "torch", ".", "cat", "(", "pred_labels", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "idx_select", ",", "gt_cluster_labels", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores_all", ",", "epoch", "=", "epoch", ",", "\n", "forward_type", "=", "\"sim2sem\"", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "pred_labels_h", "=", "pred_labels", "[", "h", "]", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_scores_select", "=", "scores_all", "[", "h", "]", "[", "idx_select", "[", "h", "]", ".", "cpu", "(", ")", "]", "\n", "gt_labels_select", "=", "gt_cluster_labels", "[", "h", "]", "\n", "loss", "=", "loss_fn", "(", "pred_scores_select", ".", "cpu", "(", ")", ",", "gt_labels_select", ")", "\n", "\n", "if", "eval_ent", ":", "\n", "                    ", "probs", "=", "scores_all", "[", "h", "]", ".", "mean", "(", "dim", "=", "0", ")", "\n", "probs", "=", "torch", ".", "clamp", "(", "probs", ",", "min", "=", "1e-8", ")", "\n", "ent", "=", "-", "(", "probs", "*", "torch", ".", "log", "(", "probs", ")", ")", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "-", "eval_ent_weight", "*", "ent", "\n", "\n", "", "try", ":", "\n", "                    ", "acc", "=", "calculate_acc", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "", "except", ":", "\n", "                    ", "acc", "=", "-", "1", "\n", "\n", "", "nmi", "=", "calculate_nmi", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "\n", "ari", "=", "calculate_ari", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "nmis", ".", "append", "(", "nmi", ")", "\n", "aris", ".", "append", "(", "ari", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "accs", "=", "np", ".", "array", "(", "accs", ")", "\n", "nmis", "=", "np", ".", "array", "(", "nmis", ")", "\n", "aris", "=", "np", ".", "array", "(", "aris", ")", "\n", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "\n", "best_acc_real", "=", "accs", ".", "max", "(", ")", "\n", "head_real", "=", "np", ".", "where", "(", "accs", "==", "best_acc_real", ")", "\n", "head_real", "=", "head_real", "[", "0", "]", "[", "0", "]", "\n", "best_nmi_real", "=", "nmis", "[", "head_real", "]", "\n", "best_ari_real", "=", "aris", "[", "head_real", "]", "\n", "logger", ".", "info", "(", "\"Real: ACC: {}, NMI: {}, ARI: {}, head: {}\"", ".", "format", "(", "best_acc_real", ",", "best_nmi_real", ",", "best_ari_real", ",", "head_real", ")", ")", "\n", "\n", "head_loss", "=", "np", ".", "where", "(", "losses", "==", "losses", ".", "min", "(", ")", ")", "[", "0", "]", "\n", "head_loss", "=", "head_loss", "[", "0", "]", "\n", "best_acc_loss", "=", "accs", "[", "head_loss", "]", "\n", "best_nmi_loss", "=", "nmis", "[", "head_loss", "]", "\n", "best_ari_loss", "=", "aris", "[", "head_loss", "]", "\n", "logger", ".", "info", "(", "\"Loss: ACC: {}, NMI: {}, ARI: {}, head: {}\"", ".", "format", "(", "best_acc_loss", ",", "best_nmi_loss", ",", "best_ari_loss", ",", "head_loss", ")", ")", "\n", "if", "best_acc_real", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "best_acc_real", "\n", "best_nmi", "=", "best_nmi_real", "\n", "best_ari", "=", "best_ari_real", "\n", "best_epoch", "=", "epoch", "\n", "best_head", "=", "np", ".", "array", "(", "accs", ")", ".", "argmax", "(", ")", "\n", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "state_dict_save", "=", "{", "}", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "not", "k", ".", "startswith", "(", "'module.head'", ")", ":", "\n", "                        ", "state_dict_save", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "# print(k)", "\n", "", "if", "k", ".", "startswith", "(", "'module.head.head_{}'", ".", "format", "(", "best_head", ")", ")", ":", "\n", "                        ", "state_dict_save", "[", "'module.head.head_0.{}'", ".", "format", "(", "k", "[", "len", "(", "'module.head.head_{}.'", ".", "format", "(", "best_head", ")", ")", ":", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "", "torch", ".", "save", "(", "state_dict_save", ",", "'{}/checkpoint_best.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "# save_checkpoint({", "\n", "#     'epoch': epoch + 1,", "\n", "#     'state_dict': model.state_dict(),", "\n", "#     'optimizer': optimizer.state_dict(),", "\n", "# }, is_best=False, filename='{}/checkpoint_best.pth.tar'.format(cfg.results.output_dir))", "\n", "\n", "", "if", "min_loss", ">", "losses", ".", "min", "(", ")", ":", "\n", "                ", "min_loss", "=", "losses", ".", "min", "(", ")", "\n", "loss_head", "=", "head_loss", "\n", "loss_epoch", "=", "epoch", "\n", "loss_acc", "=", "best_acc_loss", "\n", "loss_nmi", "=", "best_nmi_loss", "\n", "loss_ari", "=", "best_ari_loss", "\n", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "state_dict_save", "=", "{", "}", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "not", "k", ".", "startswith", "(", "'module.head'", ")", ":", "\n", "                        ", "state_dict_save", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "# print(k)", "\n", "", "if", "k", ".", "startswith", "(", "'module.head.head_{}'", ".", "format", "(", "loss_head", ")", ")", ":", "\n", "                        ", "state_dict_save", "[", "'module.head.head_0.{}'", ".", "format", "(", "k", "[", "len", "(", "'module.head.head_{}.'", ".", "format", "(", "loss_head", ")", ")", ":", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "", "torch", ".", "save", "(", "state_dict_save", ",", "'{}/checkpoint_select.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"FINAL -- Best ACC: {}, Best NMI: {}, Best ARI: {}, epoch: {}, head: {}\"", ".", "format", "(", "best_acc", ",", "best_nmi", ",", "best_ari", ",", "best_epoch", ",", "best_head", ")", ")", "\n", "logger", ".", "info", "(", "\"FINAL -- Select ACC: {}, Select NMI: {}, Select ARI: {}, epoch: {}, head: {}\"", ".", "format", "(", "loss_acc", ",", "loss_nmi", ",", "loss_ari", ",", "loss_epoch", ",", "loss_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.train": [[392, 519], ["logging.getLogger", "train_self_v2.AverageMeter", "train_self_v2.AverageMeter", "info.append", "info.append", "len", "range", "train_self_v2.AverageMeter", "train_self_v2.AverageMeter.update", "info.append", "train_self_v2.ProgressMeter", "len", "range", "train_self_v2.AverageMeter", "losses.append", "info.append", "len", "time.time", "model.eval", "range", "enumerate", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feas_sim.to().to.to().to", "model", "range", "model.train", "list", "range", "train_self_v2.AverageMeter.update", "time.time", "scores.append", "train_self_v2.AverageMeter.update", "images_ori_l_batch.to.to", "range", "torch.cat.append", "feas_sim.to().to.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "images_trans.append", "range", "random.shuffle", "range", "logging.getLogger.info", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "len", "scores[].append", "len", "train_loader.sampler.set_epoch", "feas_sim.to().to.to", "min", "range", "model", "sum", "optimizer.zero_grad", "loss_mean.backward", "optimizer.step", "range", "time.time", "train_self_v2.ProgressMeter.display", "time.time", "scores_nl[].detach", "imgs_i.append", "targets_i.append", "losses[].update", "[].to", "[].to", "loss_dict[].item", "imgs_i[].size", "model.values"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter.display", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "cfg", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"{}.trainer\"", ".", "format", "(", "cfg", ".", "logger_name", ")", ")", "\n", "\n", "info", "=", "[", "]", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "info", ".", "append", "(", "batch_time", ")", "\n", "info", ".", "append", "(", "data_time", ")", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "losses", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "        ", "losses_h", "=", "AverageMeter", "(", "'Loss_{}'", ".", "format", "(", "h", ")", ",", "':.4e'", ")", "\n", "losses", ".", "append", "(", "losses_h", ")", "\n", "info", ".", "append", "(", "losses_h", ")", "\n", "", "lr", "=", "AverageMeter", "(", "'lr'", ",", "':.6f'", ")", "\n", "lr", ".", "update", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "info", ".", "append", "(", "lr", ")", "\n", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "info", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "target_sub_batch_size", "=", "cfg", ".", "solver", ".", "target_sub_batch_size", "\n", "batch_size", "=", "cfg", ".", "solver", ".", "batch_size", "\n", "train_sub_batch_size", "=", "cfg", ".", "solver", ".", "train_sub_batch_size", "\n", "\n", "num_repeat", "=", "cfg", ".", "solver", ".", "num_repeat", "\n", "\n", "num_imgs_all", "=", "len", "(", "train_loader", ".", "dataset", ")", "\n", "\n", "iters_end", "=", "batch_size", "//", "target_sub_batch_size", "\n", "num_iters_l", "=", "num_imgs_all", "//", "batch_size", "\n", "for", "ii", "in", "range", "(", "num_iters_l", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "model", ".", "eval", "(", ")", "\n", "scores", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "scores", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "images_trans_l", "=", "[", "]", "\n", "feas_sim", "=", "[", "]", "\n", "\n", "for", "_", ",", "(", "images_ori_l_batch", ",", "images_trans_l_batch", ",", "feas_sim_batch", ",", "_", ",", "idx_l_batch", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "            ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "# print(images_ori_l_batch.shape)", "\n", "\n", "# Generate ground truth.", "\n", "\n", "# Select samples and estimate the ground-truth relationship between samples.", "\n", "images_ori_l_batch", "=", "images_ori_l_batch", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "scores_nl", "=", "model", "(", "images_ori_l_batch", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "", "assert", "num_heads", "==", "len", "(", "scores_nl", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "scores", "[", "h", "]", ".", "append", "(", "scores_nl", "[", "h", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "images_trans_l", ".", "append", "(", "images_trans_l_batch", ")", "\n", "feas_sim", ".", "append", "(", "feas_sim_batch", ")", "\n", "\n", "if", "len", "(", "feas_sim", ")", ">=", "iters_end", ":", "\n", "                ", "train_loader", ".", "sampler", ".", "set_epoch", "(", "train_loader", ".", "sampler", ".", "epoch", "+", "1", ")", "\n", "break", "\n", "\n", "", "", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "scores", "[", "h", "]", "=", "torch", ".", "cat", "(", "scores", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "images_trans_l", "=", "torch", ".", "cat", "(", "images_trans_l", ")", "\n", "feas_sim", "=", "torch", ".", "cat", "(", "feas_sim", ")", "\n", "\n", "feas_sim", "=", "feas_sim", ".", "to", "(", "cfg", ".", "gpu", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "idx_select", ",", "gt_cluster_labels", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores", ",", "epoch", "=", "epoch", ",", "forward_type", "=", "\"sim2sem\"", ")", "\n", "\n", "images_trans", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "images_trans", ".", "append", "(", "images_trans_l", "[", "idx_select", "[", "h", "]", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "num_imgs", "=", "images_trans", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "\n", "# Train with the generated ground truth", "\n", "model", ".", "train", "(", ")", "\n", "img_idx", "=", "list", "(", "range", "(", "num_imgs", ")", ")", "\n", "# Select a set of images for training.", "\n", "\n", "num_train", "=", "num_imgs", "\n", "# train_sub_iters = int(torch.ceil(float(num_train) / train_sub_batch_size))", "\n", "train_sub_iters", "=", "num_train", "//", "train_sub_batch_size", "\n", "\n", "for", "n", "in", "range", "(", "num_repeat", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "img_idx", ")", "\n", "\n", "for", "i", "in", "range", "(", "train_sub_iters", ")", ":", "\n", "                ", "start_idx", "=", "i", "*", "train_sub_batch_size", "\n", "end_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "train_sub_batch_size", ",", "num_train", ")", "\n", "img_idx_i", "=", "img_idx", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "imgs_i", "=", "[", "]", "\n", "targets_i", "=", "[", "]", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "imgs_i", ".", "append", "(", "images_trans", "[", "h", "]", "[", "img_idx_i", ",", ":", ",", ":", ",", ":", "]", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", ")", "\n", "targets_i", ".", "append", "(", "gt_cluster_labels", "[", "h", "]", "[", "img_idx_i", "]", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", ")", "\n", "\n", "", "loss_dict", "=", "model", "(", "imgs_i", ",", "target", "=", "targets_i", ",", "forward_type", "=", "\"loss\"", ")", "\n", "\n", "loss", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "loss_mean", "=", "loss", "/", "num_heads", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_mean", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "# measure accuracy and record loss", "\n", "                    ", "losses", "[", "h", "]", ".", "update", "(", "loss_dict", "[", "'head_{}'", ".", "format", "(", "h", ")", "]", ".", "item", "(", ")", ",", "imgs_i", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "ii", "%", "cfg", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "progress", ".", "display", "(", "ii", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.save_checkpoint": [[521, 525], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self_v2.adjust_learning_rate": [[568, 578], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.AverageMeter.__init__": [[482, 486], ["train_self.AverageMeter.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.AverageMeter.reset": [[487, 492], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.AverageMeter.update": [[493, 498], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.AverageMeter.__str__": [[499, 502], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.ProgressMeter.__init__": [[505, 509], ["train_self.ProgressMeter.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.ProgressMeter.display": [[510, 515], ["str", "train_self.ProgressMeter.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "# print('\\t'.join(entries))", "\n", "return", "'\\t'", ".", "join", "(", "entries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.ProgressMeter._get_batch_fmtstr": [[516, 520], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.main": [[47, 90], ["parser.parse_args", "spice.config.Config.fromfile", "str", "os.path.join", "spice.utils.miscellaneous.save_config", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "spice.utils.miscellaneous.mkdir", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "train_self.main_worker", "Config.fromfile.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config_file", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "cfg", ".", "device_id", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "results", ".", "output_dir", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.py'", ")", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "cfg", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "cfg", ".", "distributed", "=", "cfg", ".", "world_size", ">", "1", "or", "cfg", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "cfg", ".", "world_size", "=", "ngpus_per_node", "*", "cfg", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "cfg", ".", "copy", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.main_worker": [[92, 352], ["spice.utils.logger.setup_logger", "spice.model.sim2sem.Sim2Sem", "spice.utils.logger.setup_logger.info", "spice.solver.make_optimizer", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "spice.utils.comm.get_rank", "spice.utils.logger.setup_logger.info", "torch.init_process_group", "spice.solver.make_lr_scheduler", "spice.utils.load_model_weights.load_model_weights", "os.path.isfile", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "train_self.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "spice.utils.logger.setup_logger.info", "model.cuda.load_state_dict", "spice.solver.make_optimizer.load_state_dict", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "torch.utils.data.distributed.DistributedSampler.set_epoch", "spice.solver.make_lr_scheduler.step", "train_self.save_checkpoint", "train_self.save_checkpoint", "model.cuda.eval", "torch.CrossEntropyLoss", "len", "range", "enumerate", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "feas_sim.to.to", "range", "model.cuda.", "range", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.array.max", "numpy.where", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "model.cuda.train", "spice.utils.logger.setup_logger.info", "spice.utils.logger.setup_logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "train_self.save_checkpoint", "pred_labels.append", "scores_all.append", "images.to.to", "feas_sim.to.append", "range", "torch.cat().long().cpu().numpy.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pred_labels[].long().cpu().numpy", "nn.CrossEntropyLoss.", "spice.utils.evaluation.calculate_nmi", "spice.utils.evaluation.calculate_ari", "np.array.append", "np.array.append", "np.array.append", "np.array.append", "numpy.where", "numpy.array().argmax", "train_self.save_checkpoint", "np.array.min", "np.array.min", "model.cuda.state_dict", "list", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "len", "scores[].argmax", "pred_labels[].append", "scores_all[].append", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "pred_scores_select.cpu", "spice.utils.evaluation.calculate_acc", "loss_fn.item", "model.state_dict.keys", "k.startswith", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "pred_labels[].long().cpu", "idx_select[].cpu", "np.array.min", "numpy.array", "model.cuda.state_dict", "spice.solver.make_optimizer.state_dict", "k.startswith", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "pred_labels[].long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.logger.setup_logger", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_optimizer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_lr_scheduler", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.load_model_weights.load_model_weights", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", ":", "\n", "    ", "cfg", ".", "gpu", "=", "gpu", "\n", "# logger = logging.getLogger(\"{}.trainer\".format(cfg.logger_name))", "\n", "logger_name", "=", "\"spice\"", "\n", "cfg", ".", "logger_name", "=", "logger_name", "\n", "\n", "logger", "=", "setup_logger", "(", "logger_name", ",", "cfg", ".", "results", ".", "output_dir", ",", "get_rank", "(", ")", ")", "\n", "\n", "# suppress printing if not master", "\n", "if", "cfg", ".", "multiprocessing_distributed", "and", "cfg", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "cfg", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "logger", ".", "info", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "", "if", "cfg", ".", "distributed", ":", "\n", "        ", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "rank", "==", "-", "1", ":", "\n", "            ", "cfg", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "cfg", ".", "rank", "=", "cfg", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "cfg", ".", "dist_backend", ",", "init_method", "=", "cfg", ".", "dist_url", ",", "\n", "world_size", "=", "cfg", ".", "world_size", ",", "rank", "=", "cfg", ".", "rank", ")", "\n", "# create model", "\n", "", "model", "=", "Sim2Sem", "(", "**", "cfg", ".", "model", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "cfg", ".", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "cfg", ".", "workers", "=", "int", "(", "(", "cfg", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "cfg", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "optimizer", "=", "make_optimizer", "(", "cfg", ",", "model", ")", "\n", "scheduler", "=", "None", "\n", "\n", "if", "\"lr_type\"", "in", "cfg", ".", "solver", ":", "\n", "        ", "scheduler", "=", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "", "if", "cfg", ".", "model", ".", "pretrained", "is", "not", "None", ":", "\n", "        ", "load_model_weights", "(", "model", ",", "cfg", ".", "model", ".", "pretrained", ",", "cfg", ".", "model", ".", "model_type", ")", "\n", "\n", "", "if", "cfg", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "cfg", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "if", "cfg", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "cfg", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "cfg", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "cfg", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "cfg", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "cfg", ".", "resume", ")", ")", "\n", "\n", "# Load similarity model", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "train_dataset", "=", "build_dataset", "(", "cfg", ".", "data_train", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "cfg", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "dataset_val", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_val", ",", "batch_size", "=", "cfg", ".", "batch_size_test", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "best_acc", "=", "-", "2", "\n", "best_nmi", "=", "-", "1", "\n", "best_ari", "=", "-", "1", "\n", "best_head", "=", "-", "1", "\n", "best_epoch", "=", "-", "1", "\n", "min_loss", "=", "1e10", "\n", "loss_head", "=", "-", "1", "\n", "loss_acc", "=", "-", "2", "\n", "loss_nmi", "=", "-", "1", "\n", "loss_ari", "=", "-", "1", "\n", "loss_epoch", "=", "-", "1", "\n", "for", "epoch", "in", "range", "(", "cfg", ".", "start_epoch", ",", "cfg", ".", "epochs", ")", ":", "\n", "        ", "if", "cfg", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "if", "scheduler", "is", "not", "None", ":", "\n", "            ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# train for one epoch", "\n", "", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "cfg", ")", "\n", "\n", "if", "not", "cfg", ".", "multiprocessing_distributed", "or", "(", "cfg", ".", "multiprocessing_distributed", "\n", "and", "cfg", ".", "rank", "%", "ngpus_per_node", "==", "0", "and", "(", "epoch", "+", "1", ")", "%", "cfg", ".", "test_freq", "==", "0", ")", ":", "\n", "            ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_{:04d}.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ",", "epoch", ")", ")", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_last.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "if", "(", "epoch", "+", "1", ")", "==", "cfg", ".", "epochs", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_final.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "gt_labels", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "scores_all", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "aris", "=", "[", "]", "\n", "nmis", "=", "[", "]", "\n", "feas_sim", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "pred_labels", ".", "append", "(", "[", "]", ")", "\n", "scores_all", ".", "append", "(", "[", "]", ")", "\n", "\n", "", "for", "_", ",", "(", "images", ",", "_", ",", "embs", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "                ", "images", "=", "images", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "scores", "=", "model", "(", "images", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "", "feas_sim", ".", "append", "(", "embs", ")", "\n", "\n", "assert", "len", "(", "scores", ")", "==", "num_heads", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "pred_idx", "=", "scores", "[", "h", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_labels", "[", "h", "]", ".", "append", "(", "pred_idx", ")", "\n", "scores_all", "[", "h", "]", ".", "append", "(", "scores", "[", "h", "]", ")", "\n", "\n", "", "gt_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "gt_labels", "=", "torch", ".", "cat", "(", "gt_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "feas_sim", "=", "torch", ".", "cat", "(", "feas_sim", ",", "dim", "=", "0", ")", "\n", "feas_sim", "=", "feas_sim", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "losses", "=", "[", "]", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "scores_all", "[", "h", "]", "=", "torch", ".", "cat", "(", "scores_all", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "pred_labels", "[", "h", "]", "=", "torch", ".", "cat", "(", "pred_labels", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "idx_select", ",", "gt_cluster_labels", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores_all", ",", "epoch", "=", "epoch", ",", "\n", "forward_type", "=", "\"sim2sem\"", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "pred_labels_h", "=", "pred_labels", "[", "h", "]", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_scores_select", "=", "scores_all", "[", "h", "]", "[", "idx_select", "[", "h", "]", ".", "cpu", "(", ")", "]", "\n", "gt_labels_select", "=", "gt_cluster_labels", "[", "h", "]", "\n", "loss", "=", "loss_fn", "(", "pred_scores_select", ".", "cpu", "(", ")", ",", "gt_labels_select", ")", "\n", "\n", "try", ":", "\n", "                    ", "acc", "=", "calculate_acc", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "", "except", ":", "\n", "                    ", "acc", "=", "-", "1", "\n", "\n", "", "nmi", "=", "calculate_nmi", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "\n", "ari", "=", "calculate_ari", "(", "pred_labels_h", ",", "gt_labels", ")", "\n", "\n", "accs", ".", "append", "(", "acc", ")", "\n", "nmis", ".", "append", "(", "nmi", ")", "\n", "aris", ".", "append", "(", "ari", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "", "accs", "=", "np", ".", "array", "(", "accs", ")", "\n", "nmis", "=", "np", ".", "array", "(", "nmis", ")", "\n", "aris", "=", "np", ".", "array", "(", "aris", ")", "\n", "losses", "=", "np", ".", "array", "(", "losses", ")", "\n", "\n", "best_acc_real", "=", "accs", ".", "max", "(", ")", "\n", "head_real", "=", "np", ".", "where", "(", "accs", "==", "best_acc_real", ")", "\n", "head_real", "=", "head_real", "[", "0", "]", "[", "0", "]", "\n", "best_nmi_real", "=", "nmis", "[", "head_real", "]", "\n", "best_ari_real", "=", "aris", "[", "head_real", "]", "\n", "logger", ".", "info", "(", "\"Real: ACC: {}, NMI: {}, ARI: {}, head: {}\"", ".", "format", "(", "best_acc_real", ",", "best_nmi_real", ",", "best_ari_real", ",", "head_real", ")", ")", "\n", "\n", "head_loss", "=", "np", ".", "where", "(", "losses", "==", "losses", ".", "min", "(", ")", ")", "[", "0", "]", "\n", "head_loss", "=", "head_loss", "[", "0", "]", "\n", "best_acc_loss", "=", "accs", "[", "head_loss", "]", "\n", "best_nmi_loss", "=", "nmis", "[", "head_loss", "]", "\n", "best_ari_loss", "=", "aris", "[", "head_loss", "]", "\n", "logger", ".", "info", "(", "\"Loss: ACC: {}, NMI: {}, ARI: {}, head: {}\"", ".", "format", "(", "best_acc_loss", ",", "best_nmi_loss", ",", "best_ari_loss", ",", "head_loss", ")", ")", "\n", "if", "best_acc_real", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "best_acc_real", "\n", "best_nmi", "=", "best_nmi_real", "\n", "best_ari", "=", "best_ari_real", "\n", "best_epoch", "=", "epoch", "\n", "best_head", "=", "np", ".", "array", "(", "accs", ")", ".", "argmax", "(", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_best.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "\n", "", "if", "min_loss", ">", "losses", ".", "min", "(", ")", ":", "\n", "                ", "min_loss", "=", "losses", ".", "min", "(", ")", "\n", "loss_head", "=", "head_loss", "\n", "loss_epoch", "=", "epoch", "\n", "loss_acc", "=", "best_acc_loss", "\n", "loss_nmi", "=", "best_nmi_loss", "\n", "loss_ari", "=", "best_ari_loss", "\n", "\n", "state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "state_dict_save", "=", "{", "}", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "if", "not", "k", ".", "startswith", "(", "'module.head'", ")", ":", "\n", "                        ", "state_dict_save", "[", "k", "]", "=", "state_dict", "[", "k", "]", "\n", "# print(k)", "\n", "", "if", "k", ".", "startswith", "(", "'module.head.head_{}'", ".", "format", "(", "loss_head", ")", ")", ":", "\n", "                        ", "state_dict_save", "[", "'module.head.head_0.{}'", ".", "format", "(", "k", "[", "len", "(", "'module.head.head_{}.'", ".", "format", "(", "loss_head", ")", ")", ":", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "", "torch", ".", "save", "(", "state_dict_save", ",", "'{}/checkpoint_select.pth.tar'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ")", ")", "\n", "\n", "", "model", ".", "train", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"FINAL -- Best ACC: {}, Best NMI: {}, Best ARI: {}, epoch: {}, head: {}\"", ".", "format", "(", "best_acc", ",", "best_nmi", ",", "best_ari", ",", "best_epoch", ",", "best_head", ")", ")", "\n", "logger", ".", "info", "(", "\"FINAL -- Select ACC: {}, Select NMI: {}, Select ARI: {}, epoch: {}, head: {}\"", ".", "format", "(", "loss_acc", ",", "loss_nmi", ",", "loss_ari", ",", "loss_epoch", ",", "loss_head", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.train": [[354, 472], ["logging.getLogger", "train_self.AverageMeter", "train_self.AverageMeter", "info.append", "info.append", "len", "range", "train_self.AverageMeter", "train_self.AverageMeter.update", "info.append", "train_self.ProgressMeter", "time.time", "enumerate", "train_self.AverageMeter", "losses.append", "info.append", "len", "train_self.AverageMeter.update", "model.eval", "int", "range", "range", "range", "feas_sim.to().to.to().to", "model", "range", "model.train", "list", "range", "train_self.AverageMeter.update", "time.time", "math.ceil", "scores.append", "min", "images_ori_l[].to", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "images_ori.append", "images_trans.append", "range", "random.shuffle", "range", "logging.getLogger.info", "time.time", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "len", "scores[].append", "feas_sim.to().to.to", "min", "range", "model", "sum", "optimizer.zero_grad", "loss_mean.backward", "optimizer.step", "range", "time.time", "train_self.ProgressMeter.display", "float", "scores_nl[].detach", "imgs_i.append", "targets_i.append", "losses[].update", "[].to", "loss_dict[].item", "imgs_i[].size", "model.values"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter.display", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "optimizer", ",", "epoch", ",", "cfg", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "\"{}.trainer\"", ".", "format", "(", "cfg", ".", "logger_name", ")", ")", "\n", "\n", "info", "=", "[", "]", "\n", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "info", ".", "append", "(", "batch_time", ")", "\n", "info", ".", "append", "(", "data_time", ")", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "losses", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "        ", "losses_h", "=", "AverageMeter", "(", "'Loss_{}'", ".", "format", "(", "h", ")", ",", "':.4e'", ")", "\n", "losses", ".", "append", "(", "losses_h", ")", "\n", "info", ".", "append", "(", "losses_h", ")", "\n", "", "lr", "=", "AverageMeter", "(", "'lr'", ",", "':.6f'", ")", "\n", "lr", ".", "update", "(", "optimizer", ".", "param_groups", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "info", ".", "append", "(", "lr", ")", "\n", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "info", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "target_sub_batch_size", "=", "cfg", ".", "solver", ".", "target_sub_batch_size", "\n", "batch_size", "=", "cfg", ".", "solver", ".", "batch_size", "\n", "train_sub_batch_size", "=", "cfg", ".", "solver", ".", "train_sub_batch_size", "\n", "\n", "num_repeat", "=", "cfg", ".", "solver", ".", "num_repeat", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "ii", ",", "(", "images_ori_l", ",", "images_trans_l", ",", "feas_sim", ",", "_", ",", "idx_l", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "images_ori_l", ".", "shape", "[", "0", "]", "<", "batch_size", ":", "\n", "            ", "continue", "\n", "\n", "# Generate ground truth.", "\n", "\n", "# Select samples and estimate the ground-truth relationship between samples.", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "num_imgs_l", "=", "images_ori_l", ".", "shape", "[", "0", "]", "\n", "num_iters_l", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "num_imgs_l", ")", "/", "target_sub_batch_size", ")", ")", "\n", "\n", "scores", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "scores", ".", "append", "(", "[", "]", ")", "\n", "", "for", "nl", "in", "range", "(", "num_iters_l", ")", ":", "\n", "            ", "start_idx", "=", "nl", "*", "target_sub_batch_size", "\n", "end_idx", "=", "min", "(", "(", "nl", "+", "1", ")", "*", "target_sub_batch_size", ",", "num_imgs_l", ")", "\n", "images_ori_l_batch", "=", "images_ori_l", "[", "start_idx", ":", "end_idx", "]", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "scores_nl", "=", "model", "(", "images_ori_l_batch", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "", "assert", "num_heads", "==", "len", "(", "scores_nl", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                ", "scores", "[", "h", "]", ".", "append", "(", "scores_nl", "[", "h", "]", ".", "detach", "(", ")", ")", "\n", "\n", "", "", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "scores", "[", "h", "]", "=", "torch", ".", "cat", "(", "scores", "[", "h", "]", ",", "dim", "=", "0", ")", "\n", "\n", "", "feas_sim", "=", "feas_sim", ".", "to", "(", "cfg", ".", "gpu", ")", ".", "to", "(", "torch", ".", "float32", ")", "\n", "\n", "idx_select", ",", "gt_cluster_labels", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores", ",", "epoch", "=", "-", "1", ",", "forward_type", "=", "\"sim2sem\"", ")", "\n", "\n", "images_ori", "=", "[", "]", "\n", "images_trans", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "            ", "images_ori", ".", "append", "(", "images_ori_l", "[", "idx_select", "[", "h", "]", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "images_trans", ".", "append", "(", "images_trans_l", "[", "idx_select", "[", "h", "]", ",", ":", ",", ":", ",", ":", "]", ")", "\n", "\n", "", "num_imgs", "=", "images_ori", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "# print(num_imgs)", "\n", "\n", "# Train with the generated ground truth", "\n", "model", ".", "train", "(", ")", "\n", "img_idx", "=", "list", "(", "range", "(", "num_imgs", ")", ")", "\n", "# Select a set of images for training.", "\n", "\n", "num_train", "=", "num_imgs", "\n", "# train_sub_iters = int(torch.ceil(float(num_train) / train_sub_batch_size))", "\n", "train_sub_iters", "=", "num_train", "//", "train_sub_batch_size", "\n", "\n", "for", "n", "in", "range", "(", "num_repeat", ")", ":", "\n", "            ", "random", ".", "shuffle", "(", "img_idx", ")", "\n", "\n", "for", "i", "in", "range", "(", "train_sub_iters", ")", ":", "\n", "                ", "start_idx", "=", "i", "*", "train_sub_batch_size", "\n", "end_idx", "=", "min", "(", "(", "i", "+", "1", ")", "*", "train_sub_batch_size", ",", "num_train", ")", "\n", "img_idx_i", "=", "img_idx", "[", "start_idx", ":", "end_idx", "]", "\n", "\n", "imgs_i", "=", "[", "]", "\n", "targets_i", "=", "[", "]", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "imgs_i", ".", "append", "(", "images_trans", "[", "h", "]", "[", "img_idx_i", ",", ":", ",", ":", ",", ":", "]", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", ")", "\n", "targets_i", ".", "append", "(", "gt_cluster_labels", "[", "h", "]", "[", "img_idx_i", "]", ")", "\n", "\n", "", "loss_dict", "=", "model", "(", "imgs_i", ",", "target", "=", "targets_i", ",", "forward_type", "=", "\"loss\"", ")", "\n", "\n", "loss", "=", "sum", "(", "loss", "for", "loss", "in", "loss_dict", ".", "values", "(", ")", ")", "\n", "loss_mean", "=", "loss", "/", "num_heads", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss_mean", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "losses", "[", "h", "]", ".", "update", "(", "loss_dict", "[", "'head_{}'", ".", "format", "(", "h", ")", "]", ".", "item", "(", ")", ",", "imgs_i", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "", "", "", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "ii", "%", "cfg", ".", "print_freq", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "progress", ".", "display", "(", "ii", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.save_checkpoint": [[474, 478], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_self.adjust_learning_rate": [[522, 532], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.eval_semi.calculate_acc": [[19, 56], ["numpy.unique", "numpy.unique", "len", "numpy.zeros", "range", "numpy.amax", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "len", "numpy.unique", "range", "numpy.logical_and", "numpy.count_nonzero", "numpy.unique", "numpy.unique", "numpy.logical_and", "numpy.count_nonzero", "len", "len"], "function", ["None"], ["def", "calculate_acc", "(", "ypred", ",", "y", ",", "return_idx", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculating the clustering accuracy. The predicted result must have the same number of clusters as the ground truth.\n\n    ypred: 1-D numpy vector, predicted labels\n    y: 1-D numpy vector, ground truth\n    The problem of finding the best permutation to calculate the clustering accuracy is a linear assignment problem.\n    This function construct a N-by-N cost matrix, then pass it to scipy.optimize.linear_sum_assignment to solve the assignment problem.\n\n    \"\"\"", "\n", "assert", "len", "(", "y", ")", ">", "0", "\n", "assert", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "==", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "\n", "s", "=", "np", ".", "unique", "(", "ypred", ")", "\n", "t", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "N", "=", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "i", "]", ",", "y", "==", "t", "[", "j", "]", ")", "\n", "C", "[", "i", "]", "[", "j", "]", "=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "# convert the C matrix to the 'true' cost", "\n", "", "", "Cmax", "=", "np", ".", "amax", "(", "C", ")", "\n", "C", "=", "Cmax", "-", "C", "\n", "row", ",", "col", "=", "linear_sum_assignment", "(", "C", ")", "\n", "# calculating the accuracy according to the optimal assignment", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "row", "[", "i", "]", "]", ",", "y", "==", "t", "[", "col", "[", "i", "]", "]", ")", "\n", "count", "+=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "", "if", "return_idx", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", ",", "row", ",", "col", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.eval_semi.calculate_nmi": [[58, 62], ["sklearn.metrics.normalized_mutual_info_score"], "function", ["None"], ["", "", "def", "calculate_nmi", "(", "predict_labels", ",", "true_labels", ")", ":", "\n", "# NMI", "\n", "    ", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "true_labels", ",", "predict_labels", ",", "average_method", "=", "'geometric'", ")", "\n", "return", "nmi", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.eval_semi.calculate_ari": [[64, 68], ["sklearn.metrics.adjusted_rand_score"], "function", ["None"], ["", "def", "calculate_ari", "(", "predict_labels", ",", "true_labels", ")", ":", "\n", "# ARI", "\n", "    ", "ari", "=", "metrics", ".", "adjusted_rand_score", "(", "true_labels", ",", "predict_labels", ")", "\n", "return", "ari", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.AverageMeter.__init__": [[383, 387], ["train_moco.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.AverageMeter.reset": [[388, 393], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.AverageMeter.update": [[394, 399], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.AverageMeter.__str__": [[400, 403], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter.__init__": [[406, 410], ["train_moco.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter.display": [[411, 415], ["print", "str", "train_moco.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter._get_batch_fmtstr": [[416, 420], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.main": [[113, 149], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.exists", "os.makedirs", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "train_moco.main_worker"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "save_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_folder", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.main_worker": [[151, 326], ["print", "moco.builder.MoCo", "moco.builder.MoCo", "print", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "print", "torch.init_process_group", "model.cuda.parameters", "os.path.isfile", "moco.stl10.STL10", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "train_moco.adjust_learning_rate", "train_moco.train", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.CrossEntropyLoss", "print", "model.cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.RandomResizedCrop", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.RandomApply", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.RandomResizedCrop", "torchvision.RandomGrayscale", "torchvision.ColorJitter", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "moco.cifar.CIFAR10", "torch.utils.data.distributed.DistributedSampler.set_epoch", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "moco.cifar.CIFAR100", "train_moco.save_checkpoint", "train_moco.save_checkpoint", "train_moco.save_checkpoint", "torchvision.ColorJitter", "moco.loader.GaussianBlur", "moco.loader.GaussianBlur", "torchvision.Compose", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "torchvision.Compose", "moco.loader.TwoCropsTransform", "moco.loader.TwoCropsTransform", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "model.cuda.state_dict", "torch.optim.SGD.state_dict", "torchvision.Compose"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.adjust_learning_rate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "args", ".", "multiprocessing_distributed", "and", "args", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "args", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "print", "(", "\"=> creating model '{}'\"", ".", "format", "(", "args", ".", "arch", ")", ")", "\n", "if", "args", ".", "arch", "==", "\"clusterresnet\"", ":", "\n", "        ", "base_model", "=", "ClusterResNet", "\n", "", "elif", "args", ".", "arch", "==", "\"resnet18\"", ":", "\n", "        ", "base_model", "=", "resnet18", "\n", "", "elif", "args", ".", "arch", "==", "\"resnet18_cifar\"", ":", "\n", "        ", "base_model", "=", "resnet18_cifar", "\n", "", "else", ":", "\n", "        ", "base_model", "=", "models", ".", "__dict__", "[", "args", ".", "arch", "]", "\n", "", "model", "=", "moco", ".", "builder", ".", "MoCo", "(", "\n", "base_model", ",", "\n", "args", ".", "moco_dim", ",", "args", ".", "moco_k", ",", "args", ".", "moco_m", ",", "args", ".", "moco_t", ",", "args", ".", "mlp", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "if", "args", ".", "aug_plus", ":", "\n", "# MoCo v2's aug: similar to SimCLR https://arxiv.org/abs/2002.05709", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "img_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.1", ")", "# not strengthened", "\n", "]", ",", "p", "=", "0.8", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "moco", ".", "loader", ".", "GaussianBlur", "(", "[", ".1", ",", "2.", "]", ")", "]", ",", "p", "=", "0.5", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "", "else", ":", "\n", "# MoCo v1's aug: the same as InstDisc https://arxiv.org/abs/1805.01978", "\n", "        ", "augmentation", "=", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "args", ".", "img_size", ",", "scale", "=", "(", "0.2", ",", "1.", ")", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "p", "=", "0.2", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "0.4", ",", "0.4", ",", "0.4", ",", "0.4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", "\n", "\n", "", "if", "args", ".", "data_type", "==", "'stl10'", ":", "\n", "        ", "if", "args", ".", "all", ":", "\n", "            ", "split", "=", "\"train+test+unlabeled\"", "\n", "", "else", ":", "\n", "            ", "split", "=", "\"train+unlabeled\"", "\n", "", "train_dataset", "=", "STL10", "(", "args", ".", "data", ",", "split", "=", "split", ",", "\n", "transform", "=", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", ")", "\n", "", "elif", "args", ".", "data_type", "==", "'cifar10'", ":", "\n", "        ", "train_dataset", "=", "CIFAR10", "(", "args", ".", "data", ",", "all", "=", "args", ".", "all", ",", "\n", "transform", "=", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", ")", "\n", "", "elif", "args", ".", "data_type", "==", "'cifar100'", ":", "\n", "        ", "train_dataset", "=", "CIFAR100", "(", "args", ".", "data", ",", "all", "=", "args", ".", "all", ",", "\n", "transform", "=", "moco", ".", "loader", ".", "TwoCropsTransform", "(", "transforms", ".", "Compose", "(", "augmentation", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ",", "drop_last", "=", "True", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "# train for one epoch", "\n", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "\n", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "(", "epoch", "+", "1", ")", "%", "args", ".", "save_freq", "==", "0", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_{:04d}.pth.tar'", ".", "format", "(", "args", ".", "save_folder", ",", "epoch", ")", ")", "\n", "\n", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_last.pth.tar'", ".", "format", "(", "args", ".", "save_folder", ")", ")", "\n", "\n", "", "if", "(", "epoch", "+", "1", ")", "==", "args", ".", "epochs", ":", "\n", "                ", "save_checkpoint", "(", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'arch'", ":", "args", ".", "arch", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "is_best", "=", "False", ",", "filename", "=", "'{}/checkpoint_final.pth.tar'", ".", "format", "(", "args", ".", "save_folder", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.train": [[328, 373], ["train_moco.AverageMeter", "train_moco.AverageMeter", "train_moco.AverageMeter", "train_moco.AverageMeter", "train_moco.AverageMeter", "train_moco.ProgressMeter", "model.train", "time.time", "enumerate", "len", "train_moco.AverageMeter.update", "model", "criterion", "train_moco.accuracy", "train_moco.AverageMeter.update", "train_moco.AverageMeter.update", "train_moco.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "train_moco.AverageMeter.update", "time.time", "images[].cuda", "images[].cuda", "criterion.item", "images[].size", "images[].size", "images[].size", "train_moco.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.accuracy", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.ProgressMeter.display"], ["", "", "", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "_", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "[", "0", "]", "=", "images", "[", "0", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "images", "[", "1", "]", "=", "images", "[", "1", "]", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", ",", "target", "=", "model", "(", "im_q", "=", "images", "[", "0", "]", ",", "im_k", "=", "images", "[", "1", "]", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# acc1/acc5 are (K+1)-way contrast classifier accuracy", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.save_checkpoint": [[375, 379], ["torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "", "", "def", "save_checkpoint", "(", "state", ",", "is_best", ",", "filename", "=", "'checkpoint.pth.tar'", ")", ":", "\n", "    ", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "filename", ",", "'model_best.pth.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.adjust_learning_rate": [[422, 432], ["math.cos"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "\"\"\"Decay the learning rate based on schedule\"\"\"", "\n", "lr", "=", "args", ".", "lr", "\n", "if", "args", ".", "cos", ":", "# cosine lr schedule", "\n", "        ", "lr", "*=", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "epoch", "/", "args", ".", "epochs", ")", ")", "\n", "", "else", ":", "# stepwise lr schedule", "\n", "        ", "for", "milestone", "in", "args", ".", "schedule", ":", "\n", "            ", "lr", "*=", "0.1", "if", "epoch", ">=", "milestone", "else", "1.", "\n", "", "", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_moco.accuracy": [[434, 450], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "# correct_k = correct[:k].view(-1).float().sum(0, keepdim=True)", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "k", "*", "correct", ".", "shape", "[", "1", "]", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.eval_self.main": [[66, 124], ["parser.parse_args", "spice.config.Config.fromfile", "str", "os.path.join", "spice.utils.miscellaneous.save_config", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "spice.utils.miscellaneous.mkdir", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "eval_self.main_worker", "spice.utils.miscellaneous.mkdir", "Config.fromfile.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config_file", ")", "\n", "cfg", ".", "model", ".", "pretrained", "=", "args", ".", "weight", "\n", "cfg", ".", "proto", "=", "args", ".", "proto", "\n", "cfg", ".", "embedding", "=", "args", ".", "embedding", "\n", "cfg", ".", "all", "=", "args", ".", "all", "\n", "if", "cfg", ".", "all", ":", "\n", "        ", "cfg", ".", "data_test", ".", "split", "=", "\"train+test\"", "\n", "cfg", ".", "data_test", ".", "all", "=", "True", "\n", "", "else", ":", "\n", "        ", "cfg", ".", "data_test", ".", "split", "=", "\"test\"", "\n", "cfg", ".", "data_test", ".", "all", "=", "False", "\n", "\n", "", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "cfg", ".", "device_id", ")", "\n", "\n", "output_dir", "=", "cfg", ".", "results", ".", "output_dir", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "if", "cfg", ".", "proto", ":", "\n", "            ", "mkdir", "(", "\"{}/proto\"", ".", "format", "(", "output_dir", ")", ")", "\n", "\n", "", "", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.py'", ")", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "cfg", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "cfg", ".", "distributed", "=", "cfg", ".", "world_size", ">", "1", "or", "cfg", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "False", ":", "#cfg.multiprocessing_distributed:", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "cfg", ".", "world_size", "=", "ngpus_per_node", "*", "cfg", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "cfg", ".", "copy", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "args", ".", "gpu", "=", "0", "\n", "cfg", ".", "gpu", "=", "0", "\n", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.eval_self.main_worker": [[126, 276], ["spice.model.sim2sem.Sim2Sem", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.cuda.eval", "len", "enumerate", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "spice.utils.evaluation.calculate_nmi", "spice.utils.evaluation.calculate_ari", "print", "print", "torch.init_process_group", "images.to.to", "scores[].argmax", "torch.cat().long().cpu().numpy.append", "scores_all.append", "torch.cat().long().cpu().numpy.append", "spice.utils.evaluation.calculate_acc", "numpy.load", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.cuda.", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "range", "range", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "len", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "imgs.append", "range", "range", "torch.from_numpy.cpu", "model.cpu", "img_c[].transpose", "matplotlib.pyplot.imsave", "len", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.unsqueeze().to", "model.reshape", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "np.asarray.reshape", "np.asarray.cpu().numpy", "[].transpose", "PIL.Image.fromarray", "np.asarray.resize", "numpy.asarray", "numpy.zeros_like", "matplotlib.get_cmap", "plt.get_cmap.", "attMap.astype.astype", "matplotlib.pyplot.imsave", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "numpy.uint8", "numpy.delete", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "center.cpu", "model.cpu", "np.asarray.min", "np.asarray.max", "np.asarray.min", "np.asarray.cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", ":", "\n", "    ", "cfg", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "cfg", ".", "multiprocessing_distributed", "and", "cfg", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "cfg", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "", "if", "cfg", ".", "distributed", ":", "\n", "        ", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "rank", "==", "-", "1", ":", "\n", "            ", "cfg", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "cfg", ".", "rank", "=", "cfg", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "cfg", ".", "dist_backend", ",", "init_method", "=", "cfg", ".", "dist_url", ",", "\n", "world_size", "=", "cfg", ".", "world_size", ",", "rank", "=", "cfg", ".", "rank", ")", "\n", "# create model", "\n", "", "model", "=", "Sim2Sem", "(", "**", "cfg", ".", "model", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "cfg", ".", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "cfg", ".", "workers", "=", "int", "(", "(", "cfg", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "cfg", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "model", ".", "pretrained", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# Load similarity model", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "dataset_val", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_val", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "assert", "num_heads", "==", "1", "\n", "gt_labels", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "scores_all", "=", "[", "]", "\n", "# feas_sim = []", "\n", "\n", "for", "_", ",", "(", "images", ",", "_", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "scores", "=", "model", "(", "images", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "", "assert", "len", "(", "scores", ")", "==", "num_heads", "\n", "\n", "pred_idx", "=", "scores", "[", "0", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_labels", ".", "append", "(", "pred_idx", ")", "\n", "scores_all", ".", "append", "(", "scores", "[", "0", "]", ")", "\n", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "gt_labels", "=", "torch", ".", "cat", "(", "gt_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "pred_labels", "=", "torch", ".", "cat", "(", "pred_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "scores_all", ")", ".", "cpu", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "acc", "=", "calculate_acc", "(", "pred_labels", ",", "gt_labels", ")", "\n", "", "except", ":", "\n", "        ", "acc", "=", "-", "1", "\n", "\n", "", "nmi", "=", "calculate_nmi", "(", "pred_labels", ",", "gt_labels", ")", "\n", "ari", "=", "calculate_ari", "(", "pred_labels", ",", "gt_labels", ")", "\n", "\n", "print", "(", "\"ACC: {}, NMI: {}, ARI: {}\"", ".", "format", "(", "acc", ",", "nmi", ",", "ari", ")", ")", "\n", "\n", "if", "cfg", ".", "proto", ":", "\n", "        ", "data", "=", "val_loader", ".", "dataset", ".", "data", "\n", "feas_sim", "=", "np", ".", "load", "(", "cfg", ".", "embedding", ")", "\n", "feas_sim", "=", "torch", ".", "from_numpy", "(", "feas_sim", ")", "\n", "centers", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores", ",", "forward_type", "=", "\"proto\"", ")", "\n", "\n", "sim_all", "=", "torch", ".", "einsum", "(", "'nd,cd->nc'", ",", "[", "feas_sim", ".", "cpu", "(", ")", ",", "centers", ".", "cpu", "(", ")", "]", ")", "\n", "\n", "_", ",", "top_10", "=", "torch", ".", "topk", "(", "sim_all", ",", "10", ",", "0", ")", "\n", "\n", "imgs", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "cfg", ".", "num_cluster", ")", ":", "\n", "            ", "idx_c", "=", "top_10", "[", ":", ",", "c", "]", "\n", "img_c", "=", "data", "[", "idx_c", ",", "...", "]", "\n", "imgs", ".", "append", "(", "img_c", ")", "\n", "for", "ii", "in", "range", "(", "10", ")", ":", "\n", "                ", "img_c_ii", "=", "img_c", "[", "ii", ",", "...", "]", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "imsave", "(", "'{}/proto/{}_{}.png'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ",", "c", ",", "ii", ")", ",", "img_c_ii", ")", "\n", "\n", "", "", "for", "c", "in", "range", "(", "cfg", ".", "num_cluster", ")", ":", "\n", "            ", "dataset_val", ".", "data", "=", "imgs", "[", "c", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset_val", ")", ")", ":", "\n", "                ", "img", ",", "_", ",", "labels", ",", "idx", "=", "dataset_val", "[", "i", "]", "\n", "img", "=", "torch", ".", "unsqueeze", "(", "img", ",", "dim", "=", "0", ")", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "fea_conv", "=", "model", "(", "img", ",", "forward_type", "=", "\"feature_only\"", ")", "\n", "", "fea_conv", "=", "fea_conv", ".", "reshape", "(", "512", ",", "49", ")", "\n", "center", "=", "centers", "[", "c", ":", "c", "+", "1", ",", ":", "]", "\n", "sim_map", "=", "torch", ".", "einsum", "(", "'nd,dm->nm'", ",", "[", "center", ".", "cpu", "(", ")", ",", "fea_conv", ".", "cpu", "(", ")", "]", ")", "\n", "sim_map", "=", "sim_map", ".", "reshape", "(", "[", "7", ",", "7", "]", ")", "\n", "sim_map", "=", "(", "sim_map", "-", "sim_map", ".", "min", "(", ")", ")", "/", "(", "sim_map", ".", "max", "(", ")", "-", "sim_map", ".", "min", "(", ")", ")", "\n", "sim_map", "=", "sim_map", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "img_c_ii", "=", "imgs", "[", "c", "]", "[", "i", ",", "...", "]", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "\n", "sim_map", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "sim_map", "*", "255", ")", ")", "\n", "sim_map", "=", "sim_map", ".", "resize", "(", "(", "img_c_ii", ".", "shape", "[", "1", "]", ",", "img_c_ii", ".", "shape", "[", "0", "]", ")", ",", "resample", "=", "PIL", ".", "Image", ".", "BILINEAR", ")", "\n", "sim_map", "=", "np", ".", "asarray", "(", "sim_map", ")", "\n", "\n", "att_mask", "=", "np", ".", "zeros_like", "(", "img_c_ii", ")", "\n", "att_mask", "[", ":", ",", ":", ",", "0", "]", "=", "sim_map", "\n", "\n", "cmap", "=", "plt", ".", "get_cmap", "(", "'jet'", ")", "\n", "attMap", "=", "sim_map", "\n", "attMapV", "=", "cmap", "(", "attMap", ")", "\n", "attMapV", "=", "np", ".", "delete", "(", "attMapV", ",", "3", ",", "2", ")", "*", "255", "\n", "\n", "attMap", "=", "0.6", "*", "img_c_ii", "+", "0.4", "*", "attMapV", "\n", "attMap", "=", "attMap", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "imsave", "(", "'{}/proto/{}_{}_att.png'", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ",", "c", ",", "i", ")", ",", "attMap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_semi.main": [[23, 65], ["os.path.join", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "os.path.exists", "Exception", "warnings.warn", "warnings.warn", "int", "torch.spawn", "train_semi.main_worker", "Exception", "Exception", "os.path.abspath", "os.path.abspath"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "'''\n    For (Distributed)DataParallelism,\n    main(args) spawn each process (main_worker) to each GPU.\n    '''", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "save_path", ")", "and", "not", "args", ".", "overwrite", ":", "\n", "        ", "raise", "Exception", "(", "'already existing model: {}'", ".", "format", "(", "save_path", ")", ")", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "args", ".", "load_path", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Resume of training requires --load_path in the args'", ")", "\n", "", "if", "os", ".", "path", ".", "abspath", "(", "save_path", ")", "==", "os", ".", "path", ".", "abspath", "(", "args", ".", "load_path", ")", "and", "not", "args", ".", "overwrite", ":", "\n", "            ", "raise", "Exception", "(", "'Saving & Loading pathes are same. \\\n                            If you want over-write, give --overwrite in the argument.'", ")", "\n", "\n", "", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "#distributed: true if manually selected or if world_size > 1", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "# number of gpus of each node", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# now, args.world_size means num of total processes in all nodes", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "\n", "#args=(,) means the arguments of main_worker", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.train_semi.main_worker": [[67, 232], ["random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "numpy.random.seed", "os.path.join", "fixmatch.utils.get_logger", "fixmatch.utils.get_logger.warning", "fixmatch.models.fixmatch.rfixmatch_v1.FixMatch", "fixmatch.utils.get_logger.info", "fixmatch.train_utils.get_SGD", "fixmatch.train_utils.get_cosine_schedule_with_warmup", "torch.nn.parallel.DistributedDataParallel.set_optimizer", "fixmatch.utils.get_logger.info", "fixmatch.utils.get_logger.info", "fixmatch.datasets.ssl_dataset_robust.SSL_Dataset", "fixmatch.datasets.ssl_dataset_robust.SSL_Dataset.get_ssl_dset", "fixmatch.datasets.ssl_dataset_robust.SSL_Dataset", "fixmatch.datasets.ssl_dataset_robust.SSL_Dataset.get_dset", "fixmatch.datasets.data_utils.get_data_loader", "fixmatch.datasets.data_utils.get_data_loader", "fixmatch.datasets.data_utils.get_data_loader", "torch.nn.parallel.DistributedDataParallel.set_data_loader", "os.path.exists", "range", "logging.warning", "torch.init_process_group", "fixmatch.train_utils.TBLog", "fixmatch.utils.net_builder", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "Exception", "torch.nn.parallel.DistributedDataParallel.load_model", "trainer", "torch.nn.parallel.DistributedDataParallel.save_model", "int", "fixmatch.utils.count_parameters", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "int", "torch.nn.parallel.DistributedDataParallel.train_model.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel.eval_model.cuda", "torch.nn.parallel.DistributedDataParallel.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.parallel.DistributedDataParallel.train_model.cuda", "torch.nn.parallel.DistributedDataParallel.eval_model.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.get_logger", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.get_SGD", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.get_cosine_schedule_with_warmup", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.set_optimizer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_ssl_dset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_dset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_data_loader", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_data_loader", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_data_loader", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.set_data_loader", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.load_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.count_parameters"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "'''\n    main_worker is conducted on each GPU.\n    '''", "\n", "\n", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "# random seed has to be set for the syncronization of labeled data sampling in each process.", "\n", "assert", "args", ".", "seed", "is", "not", "None", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "\n", "\n", "# SET UP FOR DISTRIBUTED TRAINING", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "# compute global rank", "\n", "\n", "# set distributed group:", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "\n", "\n", "#SET save_path and logger", "\n", "", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "logger_level", "=", "\"WARNING\"", "\n", "tb_log", "=", "None", "\n", "if", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ":", "\n", "        ", "tb_log", "=", "TBLog", "(", "save_path", ",", "'tensorboard'", ")", "\n", "logger_level", "=", "\"INFO\"", "\n", "\n", "", "logger", "=", "get_logger", "(", "args", ".", "save_name", ",", "save_path", ",", "logger_level", ")", "\n", "logger", ".", "warning", "(", "f\"USE GPU: {args.gpu} for training\"", ")", "\n", "\n", "# SET FixMatch: class FixMatch in models.fixmatch", "\n", "args", ".", "bn_momentum", "=", "1.0", "-", "args", ".", "ema_m", "\n", "if", "args", ".", "net", "in", "[", "'WideResNet'", ",", "'WideResNet_stl10'", ",", "'WideResNet_tiny'", ",", "'resnet18'", ",", "'resnet18_cifar'", ",", "'resnet34'", "]", ":", "\n", "        ", "_net_builder", "=", "net_builder", "(", "args", ".", "net", ",", "\n", "args", ".", "net_from_name", ",", "\n", "{", "'depth'", ":", "args", ".", "depth", ",", "\n", "'widen_factor'", ":", "args", ".", "widen_factor", ",", "\n", "'leaky_slope'", ":", "args", ".", "leaky_slope", ",", "\n", "'bn_momentum'", ":", "args", ".", "bn_momentum", ",", "\n", "'dropRate'", ":", "args", ".", "dropout", "}", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "\n", "", "model", "=", "FixMatch", "(", "_net_builder", ",", "\n", "args", ".", "num_classes", ",", "\n", "args", ".", "ema_m", ",", "\n", "args", ".", "T", ",", "\n", "args", ".", "p_cutoff", ",", "\n", "args", ".", "ulb_loss_ratio", ",", "\n", "args", ".", "hard_label", ",", "\n", "num_eval_iter", "=", "args", ".", "num_eval_iter", ",", "\n", "tb_log", "=", "tb_log", ",", "\n", "logger", "=", "logger", ")", "\n", "\n", "logger", ".", "info", "(", "f'Number of Trainable Params: {count_parameters(model.train_model)}'", ")", "\n", "\n", "\n", "# SET Optimizer & LR Scheduler", "\n", "## construct SGD and cosine lr scheduler", "\n", "optimizer", "=", "get_SGD", "(", "model", ".", "train_model", ",", "'SGD'", ",", "args", ".", "lr", ",", "args", ".", "momentum", ",", "args", ".", "weight_decay", ")", "\n", "scheduler", "=", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "\n", "args", ".", "num_train_iter", ",", "\n", "num_warmup_steps", "=", "args", ".", "num_train_iter", "*", "0", ")", "\n", "## set SGD and cosine lr on FixMatch ", "\n", "model", ".", "set_optimizer", "(", "optimizer", ",", "scheduler", ")", "\n", "\n", "\n", "# SET Devices for (Distributed) DataParallel", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "raise", "Exception", "(", "'ONLY GPU TRAINING IS SUPPORTED'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "\n", "'''\n            batch_size: batch_size per node -> batch_size per gpu\n            workers: workers per node -> workers per gpu\n            '''", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "model", ".", "train_model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", ".", "train_model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ".", "train_model", ",", "\n", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "model", ".", "eval_model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "", "else", ":", "\n", "# if arg.gpu is None, DDP will divide and allocate batch_size", "\n", "# to all available GPUs if device_ids are not set.", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "train_model", "=", "model", ".", "train_model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "model", ".", "eval_model", "=", "model", ".", "eval_model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", ".", "train_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "train_model", ")", ".", "cuda", "(", ")", "\n", "model", ".", "eval_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "eval_model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"model_arch: {model}\"", ")", "\n", "logger", ".", "info", "(", "f\"Arguments: {args}\"", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "\n", "# Construct Dataset & DataLoader", "\n", "train_dset", "=", "SSL_Dataset", "(", "name", "=", "args", ".", "dataset", ",", "train", "=", "True", ",", "label_file", "=", "args", ".", "label_file", ",", "all", "=", "args", ".", "all", ",", "unlabeled", "=", "args", ".", "unlabeled", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "data_dir", "=", "args", ".", "data_dir", ")", "\n", "lb_dset", ",", "ulb_dset", "=", "train_dset", ".", "get_ssl_dset", "(", "args", ".", "num_labels", ")", "\n", "\n", "_eval_dset", "=", "SSL_Dataset", "(", "name", "=", "args", ".", "dataset", ",", "train", "=", "False", ",", "label_file", "=", "None", ",", "all", "=", "args", ".", "all", ",", "unlabeled", "=", "False", ",", "\n", "num_classes", "=", "args", ".", "num_classes", ",", "data_dir", "=", "args", ".", "data_dir", ")", "\n", "eval_dset", "=", "_eval_dset", ".", "get_dset", "(", ")", "\n", "\n", "loader_dict", "=", "{", "}", "\n", "dset_dict", "=", "{", "'train_lb'", ":", "lb_dset", ",", "'train_ulb'", ":", "ulb_dset", ",", "'eval'", ":", "eval_dset", "}", "\n", "\n", "loader_dict", "[", "'train_lb'", "]", "=", "get_data_loader", "(", "dset_dict", "[", "'train_lb'", "]", ",", "\n", "args", ".", "batch_size", ",", "\n", "data_sampler", "=", "args", ".", "train_sampler", ",", "\n", "num_iters", "=", "args", ".", "num_train_iter", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ")", "\n", "\n", "loader_dict", "[", "'train_ulb'", "]", "=", "get_data_loader", "(", "dset_dict", "[", "'train_ulb'", "]", ",", "\n", "args", ".", "batch_size", "*", "args", ".", "uratio", ",", "\n", "data_sampler", "=", "args", ".", "train_sampler", ",", "\n", "num_iters", "=", "args", ".", "num_train_iter", ",", "\n", "num_workers", "=", "4", "*", "args", ".", "num_workers", ",", "\n", "distributed", "=", "args", ".", "distributed", ")", "\n", "\n", "loader_dict", "[", "'eval'", "]", "=", "get_data_loader", "(", "dset_dict", "[", "'eval'", "]", ",", "\n", "args", ".", "eval_batch_size", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ")", "\n", "\n", "## set DataLoader on FixMatch", "\n", "model", ".", "set_data_loader", "(", "loader_dict", ")", "\n", "\n", "#If args.resume, load checkpoints from args.load_path", "\n", "resume", "=", "'{}/{}/model_last.pth'", ".", "format", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "resume", ")", ":", "\n", "        ", "args", ".", "load_path", "=", "resume", "\n", "args", ".", "resume", "=", "True", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "model", ".", "load_model", "(", "args", ".", "load_path", ")", "\n", "\n", "# START TRAINING of FixMatch", "\n", "", "trainer", "=", "model", ".", "train", "\n", "for", "epoch", "in", "range", "(", "args", ".", "epoch", ")", ":", "\n", "        ", "trainer", "(", "args", ",", "logger", "=", "logger", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "        ", "model", ".", "save_model", "(", "'latest_model.pth'", ",", "save_path", ")", "\n", "\n", "", "logging", ".", "warning", "(", "f\"GPU {args.rank} training is FINISHED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main": [[54, 102], ["parser.parse_args", "spice.config.Config.fromfile", "str", "os.path.join", "spice.utils.miscellaneous.save_config", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "spice.utils.miscellaneous.mkdir", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "local_consistency.main_worker", "Config.fromfile.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "cfg", "=", "Config", ".", "fromfile", "(", "args", ".", "config_file", ")", "\n", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "str", "(", "cfg", ".", "device_id", ")", "\n", "\n", "cfg", ".", "embedding", "=", "args", ".", "embedding", "\n", "\n", "output_dir", "=", "cfg", ".", "results", ".", "output_dir", "\n", "if", "output_dir", ":", "\n", "        ", "mkdir", "(", "output_dir", ")", "\n", "\n", "", "output_config_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'config.py'", ")", "\n", "save_config", "(", "cfg", ",", "output_config_path", ")", "\n", "\n", "if", "cfg", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "cfg", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "cfg", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "cfg", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "cfg", ".", "distributed", "=", "cfg", ".", "world_size", ">", "1", "or", "cfg", ".", "multiprocessing_distributed", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "False", ":", "#cfg.multiprocessing_distributed:", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "cfg", ".", "world_size", "=", "ngpus_per_node", "*", "cfg", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "cfg", ".", "copy", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "args", ".", "gpu", "=", "0", "\n", "cfg", ".", "gpu", "=", "0", "\n", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.tools.local_consistency.main_worker": [[104, 219], ["spice.model.sim2sem.Sim2Sem", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.cuda.load_state_dict", "spice.data.build_dataset.build_dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "model.cuda.eval", "len", "enumerate", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().long().cpu().numpy", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "torch.cat().cpu", "spice.utils.evaluation.calculate_nmi", "spice.utils.evaluation.calculate_ari", "print", "model.cuda.", "spice.utils.evaluation.calculate_acc", "print", "numpy.save", "print", "torch.init_process_group", "torch.load.keys", "images.to.to", "scores[].argmax", "torch.cat().long().cpu().numpy.append", "scores_all.append", "torch.cat().long().cpu().numpy.append", "numpy.load", "spice.utils.evaluation.calculate_acc", "numpy.zeros", "int", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "model.cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "model.cuda.cuda", "NotImplementedError", "NotImplementedError", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.cuda.", "len", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat().long().cpu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "cfg", ")", ":", "\n", "    ", "cfg", ".", "gpu", "=", "gpu", "\n", "\n", "# suppress printing if not master", "\n", "if", "cfg", ".", "multiprocessing_distributed", "and", "cfg", ".", "gpu", "!=", "0", ":", "\n", "        ", "def", "print_pass", "(", "*", "cfg", ")", ":", "\n", "            ", "pass", "\n", "", "builtins", ".", "print", "=", "print_pass", "\n", "\n", "", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "cfg", ".", "gpu", ")", ")", "\n", "\n", "", "if", "cfg", ".", "distributed", ":", "\n", "        ", "if", "cfg", ".", "dist_url", "==", "\"env://\"", "and", "cfg", ".", "rank", "==", "-", "1", ":", "\n", "            ", "cfg", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "cfg", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "cfg", ".", "rank", "=", "cfg", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "cfg", ".", "dist_backend", ",", "init_method", "=", "cfg", ".", "dist_url", ",", "\n", "world_size", "=", "cfg", ".", "world_size", ",", "rank", "=", "cfg", ".", "rank", ")", "\n", "# create model", "\n", "", "model", "=", "Sim2Sem", "(", "**", "cfg", ".", "model", ")", "\n", "print", "(", "model", ")", "\n", "\n", "if", "cfg", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "cfg", ".", "batch_size", "=", "int", "(", "cfg", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "cfg", ".", "workers", "=", "int", "(", "(", "cfg", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "cfg", ".", "gpu", "]", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "cfg", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "cfg", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "cfg", ".", "gpu", ")", "\n", "# comment out the following line for debugging", "\n", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "", "else", ":", "\n", "# AllGather implementation (batch shuffle, queue update, etc.) in", "\n", "# this code only supports DistributedDataParallel.", "\n", "        ", "raise", "NotImplementedError", "(", "\"Only DistributedDataParallel is supported.\"", ")", "\n", "\n", "", "state_dict", "=", "torch", ".", "load", "(", "cfg", ".", "model", ".", "pretrained", ")", "\n", "if", "'state_dict'", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "state_dict", "=", "state_dict", "[", "'state_dict'", "]", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "dataset_val", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "dataset_val", ",", "batch_size", "=", "cfg", ".", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "1", ")", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "num_heads", "=", "len", "(", "cfg", ".", "model", ".", "head", ".", "multi_heads", ")", "\n", "assert", "num_heads", "==", "1", "\n", "gt_labels", "=", "[", "]", "\n", "pred_labels", "=", "[", "]", "\n", "scores_all", "=", "[", "]", "\n", "# feas_sim = []", "\n", "\n", "for", "_", ",", "(", "images", ",", "_", ",", "labels", ",", "idx", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "        ", "images", "=", "images", ".", "to", "(", "cfg", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "scores", "=", "model", "(", "images", ",", "forward_type", "=", "\"sem\"", ")", "\n", "\n", "# feas_sim.append(embs)", "\n", "\n", "", "assert", "len", "(", "scores", ")", "==", "num_heads", "\n", "\n", "pred_idx", "=", "scores", "[", "0", "]", ".", "argmax", "(", "dim", "=", "1", ")", "\n", "pred_labels", ".", "append", "(", "pred_idx", ")", "\n", "scores_all", ".", "append", "(", "scores", "[", "0", "]", ")", "\n", "\n", "gt_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "gt_labels", "=", "torch", ".", "cat", "(", "gt_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "# feas_sim = torch.cat(feas_sim, dim=0)", "\n", "feas_sim", "=", "torch", ".", "from_numpy", "(", "np", ".", "load", "(", "cfg", ".", "embedding", ")", ")", "\n", "\n", "pred_labels", "=", "torch", ".", "cat", "(", "pred_labels", ")", ".", "long", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "scores", "=", "torch", ".", "cat", "(", "scores_all", ")", ".", "cpu", "(", ")", "\n", "\n", "try", ":", "\n", "        ", "acc", "=", "calculate_acc", "(", "pred_labels", ",", "gt_labels", ")", "\n", "", "except", ":", "\n", "        ", "acc", "=", "-", "1", "\n", "\n", "", "nmi", "=", "calculate_nmi", "(", "pred_labels", ",", "gt_labels", ")", "\n", "ari", "=", "calculate_ari", "(", "pred_labels", ",", "gt_labels", ")", "\n", "\n", "print", "(", "\"ACC: {}, NMI: {}, ARI: {}\"", ".", "format", "(", "acc", ",", "nmi", ",", "ari", ")", ")", "\n", "\n", "idx_select", ",", "labels_select", "=", "model", "(", "feas_sim", "=", "feas_sim", ",", "scores", "=", "scores", ",", "forward_type", "=", "\"local_consistency\"", ")", "\n", "\n", "gt_labels_select", "=", "gt_labels", "[", "idx_select", "]", "\n", "\n", "acc", "=", "calculate_acc", "(", "labels_select", ",", "gt_labels_select", ")", "\n", "print", "(", "'ACC of local consistency: {}, number of samples: {}'", ".", "format", "(", "acc", ",", "len", "(", "gt_labels_select", ")", ")", ")", "\n", "\n", "labels_correct", "=", "np", ".", "zeros", "(", "[", "feas_sim", ".", "shape", "[", "0", "]", "]", ")", "-", "100", "\n", "labels_correct", "[", "idx_select", "]", "=", "labels_select", "\n", "\n", "np", ".", "save", "(", "\"{}/labels_reliable_{:4f}_{}.npy\"", ".", "format", "(", "cfg", ".", "results", ".", "output_dir", ",", "acc", ",", "len", "(", "idx_select", ")", ")", ",", "labels_correct", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.TBLog.__init__": [[17, 20], ["torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "os.path.join"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "tb_dir", ",", "file_name", ")", ":", "\n", "        ", "self", ".", "tb_dir", "=", "tb_dir", "\n", "self", ".", "writer", "=", "SummaryWriter", "(", "os", ".", "path", ".", "join", "(", "self", ".", "tb_dir", ",", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.TBLog.update": [[21, 33], ["tb_dict.items", "train_utils.TBLog.writer.add_scalar"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "tb_dict", ",", "it", ",", "suffix", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            tb_dict: contains scalar values for updating tensorboard\n            it: contains information of iteration (int).\n            suffix: If not None, the update key has the suffix.\n        \"\"\"", "\n", "if", "suffix", "is", "None", ":", "\n", "            ", "suffix", "=", "''", "\n", "\n", "", "for", "key", ",", "value", "in", "tb_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "suffix", "+", "key", ",", "value", ",", "it", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.__init__": [[40, 42], ["train_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.reset": [[43, 48], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.AverageMeter.update": [[49, 54], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.SelfAdaptiveTrainingCE.__init__": [[159, 165], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ",", "gpu", "=", "None", ")", ":", "\n", "# initialize soft labels to onthot vectors", "\n", "        ", "self", ".", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", ".", "cuda", "(", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "self", ".", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.SelfAdaptiveTrainingCE.__call__": [[166, 185], ["torch.softmax", "torch.softmax", "torch.softmax", "train_utils.SelfAdaptiveTrainingCE.soft_labels[].max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "logits.detach", "weights.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "logits", ",", "targets", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "es", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "\n", "# obtain prob, then update running avg", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "prob", "\n", "\n", "# obtain weights", "\n", "weights", ",", "_", "=", "self", ".", "soft_labels", "[", "index", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "weights", "*=", "logits", ".", "shape", "[", "0", "]", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "# compute cross entropy loss, without reduction", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# sample weighted mean", "\n", "loss", "=", "(", "loss", "*", "weights", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.SATCE.__init__": [[188, 197], ["torch.Module.__init__", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "train_utils.SATCE.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "# initialize soft labels to onthot vectors", "\n", "        ", "super", "(", "SATCE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "register_buffer", "(", "\"soft_labels\"", ",", "soft_labels", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.SATCE.forward": [[198, 217], ["torch.softmax", "torch.softmax", "torch.softmax", "train_utils.SATCE.soft_labels[].max", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "logits.detach", "weights.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits", ",", "targets", ",", "index", ",", "epoch", ")", ":", "\n", "        ", "if", "epoch", "<", "self", ".", "es", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ")", "\n", "\n", "# obtain prob, then update running avg", "\n", "", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "prob", "\n", "\n", "# obtain weights", "\n", "weights", ",", "_", "=", "self", ".", "soft_labels", "[", "index", "]", ".", "max", "(", "dim", "=", "1", ")", "\n", "weights", "*=", "logits", ".", "shape", "[", "0", "]", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "# compute cross entropy loss, without reduction", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "*", "self", ".", "soft_labels", "[", "index", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# sample weighted mean", "\n", "loss", "=", "(", "loss", "*", "weights", ")", ".", "mean", "(", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.get_SGD": [[56, 79], ["getattr", "net.named_parameters", "getattr.", "no_decay.append", "decay.append"], "function", ["None"], ["", "", "def", "get_SGD", "(", "net", ",", "name", "=", "'SGD'", ",", "lr", "=", "0.1", ",", "momentum", "=", "0.9", ",", "weight_decay", "=", "5e-4", ",", "nesterov", "=", "True", ",", "bn_wd_skip", "=", "True", ")", ":", "\n", "    ", "'''\n    return optimizer (name) in torch.optim.\n    If bn_wd_skip, the optimizer does not apply\n    weight decay regularization on parameters in batch normalization.\n    '''", "\n", "optim", "=", "getattr", "(", "torch", ".", "optim", ",", "name", ")", "\n", "\n", "decay", "=", "[", "]", "\n", "no_decay", "=", "[", "]", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "(", "'bn'", "in", "name", ")", "and", "bn_wd_skip", ":", "\n", "            ", "no_decay", ".", "append", "(", "param", ")", "\n", "", "else", ":", "\n", "            ", "decay", ".", "append", "(", "param", ")", "\n", "\n", "", "", "per_param_args", "=", "[", "{", "'params'", ":", "decay", "}", ",", "\n", "{", "'params'", ":", "no_decay", ",", "'weight_decay'", ":", "0.0", "}", "]", "\n", "\n", "optimizer", "=", "optim", "(", "per_param_args", ",", "lr", "=", "lr", ",", "\n", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ",", "nesterov", "=", "nesterov", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.get_cosine_schedule_with_warmup": [[81, 106], ["torch.optim.lr_scheduler.LambdaLR", "float", "max", "float", "float", "float", "math.cos", "max", "max"], "function", ["None"], ["", "def", "get_cosine_schedule_with_warmup", "(", "optimizer", ",", "\n", "num_training_steps", ",", "\n", "num_cycles", "=", "7.", "/", "16.", ",", "\n", "num_warmup_steps", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "'''\n    Get cosine scheduler (LambdaLR).\n    if warmup is needed, set num_warmup_steps (int) > 0.\n    '''", "\n", "\n", "def", "_lr_lambda", "(", "current_step", ")", ":", "\n", "        ", "'''\n        _lr_lambda returns a multiplicative factor given an interger parameter epochs.\n        Decaying criteria: last_epoch\n        '''", "\n", "\n", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "_lr", "=", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "else", ":", "\n", "            ", "num_cos_steps", "=", "float", "(", "current_step", "-", "num_warmup_steps", ")", "\n", "num_cos_steps", "=", "num_cos_steps", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", "\n", "_lr", "=", "max", "(", "0.0", ",", "math", ".", "cos", "(", "math", ".", "pi", "*", "num_cycles", "*", "num_cos_steps", ")", ")", "\n", "", "return", "_lr", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "_lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.accuracy": [[108, 138], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"\n    Computes the accuracy over the k top predictions for the specified values of k\n    \n    Args\n        output: logits or probs (num of batch, num of classes)\n        target: (num of batch, 1) or (num of batch, )\n        topk: list of returned k\n    \n    refer: https://github.com/pytorch/examples/blob/master/imagenet/main.py\n    \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "#get k in top-k", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "#get batch size of target", "\n", "\n", "# torch.topk(input, k, dim=None, largest=True, sorted=True, out=None)", "\n", "# return: value, index", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "k", "=", "maxk", ",", "dim", "=", "1", ",", "largest", "=", "True", ",", "sorted", "=", "True", ")", "# pred: [num of batch, k]", "\n", "pred", "=", "pred", ".", "t", "(", ")", "# pred: [k, num of batch]", "\n", "\n", "#[1, num of batch] -> [k, num_of_batch] : bool", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "#np.shape(res): [k, 1]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss": [[140, 156], ["torch.cross_entropy", "torch.log_softmax", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "ce_loss", "(", "logits", ",", "targets", ",", "use_hard_labels", "=", "True", ",", "reduction", "=", "'none'", ")", ":", "\n", "    ", "\"\"\"\n    wrapper for cross entropy loss in pytorch.\n    \n    Args\n        logits: logit values, shape=[Batch size, # of classes]\n        targets: integer or vector, shape=[Batch size] or [Batch size, # of classes]\n        use_hard_labels: If True, targets have [Batch size] shape with int values. If False, the target is vector (default True)\n    \"\"\"", "\n", "if", "use_hard_labels", ":", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "logits", ",", "targets", ",", "reduction", "=", "reduction", ")", "\n", "", "else", ":", "\n", "        ", "assert", "logits", ".", "shape", "==", "targets", ".", "shape", "\n", "log_pred", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "nll_loss", "=", "torch", ".", "sum", "(", "-", "targets", "*", "log_pred", ",", "dim", "=", "1", ")", "\n", "return", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.sat_loss": [[219, 230], ["soft_labels.max", "torch.sum", "torch.sum", "torch.sum", "weights.sum", "torch.log_softmax"], "function", ["None"], ["", "", "def", "sat_loss", "(", "logits", ",", "soft_labels", ")", ":", "\n", "# obtain weights", "\n", "    ", "weights", ",", "_", "=", "soft_labels", ".", "max", "(", "dim", "=", "1", ")", "\n", "weights", "*=", "logits", ".", "shape", "[", "0", "]", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "# compute cross entropy loss, without reduction", "\n", "loss", "=", "torch", ".", "sum", "(", "-", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "1", ")", "*", "soft_labels", ",", "dim", "=", "1", ")", "\n", "\n", "# sample weighted mean", "\n", "loss", "=", "(", "loss", "*", "weights", ")", ".", "mean", "(", ")", "\n", "return", "loss", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.setattr_cls_from_kwargs": [[6, 13], ["kwargs.keys", "hasattr", "setattr", "print", "getattr"], "function", ["None"], ["def", "setattr_cls_from_kwargs", "(", "cls", ",", "kwargs", ")", ":", "\n", "#if default values are in the cls,", "\n", "#overlap the value by kwargs", "\n", "    ", "for", "key", "in", "kwargs", ".", "keys", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "cls", ",", "key", ")", ":", "\n", "            ", "print", "(", "f\"{key} in {cls} is overlapped by kwargs: {getattr(cls,key)} -> {kwargs[key]}\"", ")", "\n", "", "setattr", "(", "cls", ",", "key", ",", "kwargs", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.test_setattr_cls_from_kwargs": [[15, 25], ["_test_cls", "utils.setattr_cls_from_kwargs", "config.keys", "print", "getattr"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.setattr_cls_from_kwargs"], ["", "", "def", "test_setattr_cls_from_kwargs", "(", ")", ":", "\n", "    ", "class", "_test_cls", ":", "\n", "        ", "def", "__init__", "(", "self", ")", ":", "\n", "            ", "self", ".", "a", "=", "1", "\n", "self", ".", "b", "=", "'hello'", "\n", "", "", "test_cls", "=", "_test_cls", "(", ")", "\n", "config", "=", "{", "'a'", ":", "3", ",", "'b'", ":", "'change_hello'", ",", "'c'", ":", "5", "}", "\n", "setattr_cls_from_kwargs", "(", "test_cls", ",", "config", ")", "\n", "for", "key", "in", "config", ".", "keys", "(", ")", ":", "\n", "        ", "print", "(", "f\"{key}:\\t {getattr(test_cls, key)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder": [[27, 75], ["sorted", "utils.setattr_cls_from_kwargs", "Exception", "getattr", "getattr", "name.islower", "callable", "getattr", "name.startswith", "getattr", "getattr", "getattr", "Exception", "getattr"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.setattr_cls_from_kwargs"], ["", "", "def", "net_builder", "(", "net_name", ",", "from_name", ":", "bool", ",", "net_conf", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    return **class** of backbone network (not instance).\n    Args\n        net_name: 'WideResNet' or network names in torchvision.models\n        from_name: If True, net_buidler takes models in torch.vision models. Then, net_conf is ignored.\n        net_conf: When from_name is False, net_conf is the configuration of backbone network (now, only WRN is supported).\n    \"\"\"", "\n", "if", "from_name", ":", "\n", "        ", "import", "torchvision", ".", "models", "as", "models", "\n", "model_name_list", "=", "sorted", "(", "name", "for", "name", "in", "models", ".", "__dict__", "\n", "if", "name", ".", "islower", "(", ")", "and", "not", "name", ".", "startswith", "(", "\"__\"", ")", "\n", "and", "callable", "(", "models", ".", "__dict__", "[", "name", "]", ")", ")", "\n", "\n", "if", "net_name", "not", "in", "model_name_list", ":", "\n", "            ", "assert", "Exception", "(", "f\"[!] Networks\\' Name is wrong, check net config, \\\n                               expected: {model_name_list}  \\\n                               received: {net_name}\"", ")", "\n", "", "else", ":", "\n", "            ", "return", "models", ".", "__dict__", "[", "net_name", "]", "\n", "\n", "", "", "else", ":", "\n", "        ", "if", "net_name", "==", "'WideResNet'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "wrn", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_WideResNet'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'WideResNet_stl10'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "wrn_stl10", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_WideResNet'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'ClusterResNet'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "cluster_resnet", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_ClusterResNet'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'WideResNet_tiny'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "wrn_tiny", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_WideResNet'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'resnet18'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "resnet_stl", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_ResNet18'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'resnet18_cifar'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "resnet_cifar", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_ResNet18'", ")", "(", ")", "\n", "", "elif", "net_name", "==", "'resnet34'", ":", "\n", "            ", "import", "fixmatch", ".", "models", ".", "nets", ".", "imagenet", "as", "net", "\n", "builder", "=", "getattr", "(", "net", ",", "'build_ResNet34'", ")", "(", ")", "\n", "", "else", ":", "\n", "            ", "assert", "Exception", "(", "\"Not Implemented Error\"", ")", "\n", "\n", "", "setattr_cls_from_kwargs", "(", "builder", ",", "net_conf", ")", "\n", "return", "builder", ".", "build", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.test_net_builder": [[77, 81], ["utils.net_builder", "print", "print"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["", "", "def", "test_net_builder", "(", "net_name", ",", "from_name", ",", "net_conf", "=", "None", ")", ":", "\n", "    ", "builder", "=", "net_builder", "(", "net_name", ",", "from_name", ",", "net_conf", ")", "\n", "print", "(", "f\"net_name: {net_name}, from_name: {from_name}, net_conf: {net_conf}\"", ")", "\n", "print", "(", "builder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.get_logger": [[83, 99], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "getattr", "os.makedirs", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["", "def", "get_logger", "(", "name", ",", "save_path", "=", "None", ",", "level", "=", "'INFO'", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "getattr", "(", "logging", ",", "level", ")", ")", "\n", "\n", "log_format", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s %(levelname)s] %(message)s'", ")", "\n", "streamHandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "streamHandler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "streamHandler", ")", "\n", "\n", "if", "not", "save_path", "is", "None", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_path", ",", "exist_ok", "=", "True", ")", "\n", "fileHandler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "'log.txt'", ")", ")", "\n", "fileHandler", ".", "setFormatter", "(", "log_format", ")", "\n", "logger", ".", "addHandler", "(", "fileHandler", ")", "\n", "\n", "", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.count_parameters": [[101, 103], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.__init__": [[60, 114], ["super().__init__", "net_builder", "net_builder", "fixmatch_utils.Get_Scalar", "fixmatch_utils.Get_Scalar", "zip", "fixmatch_sem.FixMatch.eval_model.eval", "fixmatch_sem.FixMatch.train_model.parameters", "fixmatch_sem.FixMatch.eval_model.parameters", "param_k.data.copy_", "param_q.detach"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "num_classes", ",", "ema_m", ",", "T", ",", "p_cutoff", ",", "lambda_u", ",", "hard_label", "=", "True", ",", "t_fn", "=", "None", ",", "p_fn", "=", "None", ",", "it", "=", "0", ",", "num_eval_iter", "=", "1000", ",", "\n", "tb_log", "=", "None", ",", "logger", "=", "None", ",", "sup_loss_type", "=", "\"bce\"", ",", "sup_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class Fixmatch contains setter of data_loader, optimizer, and model update methods.\n        Args:\n            net_builder: backbone network class (see net_builder in utils.py)\n            num_classes: # of label classes \n            ema_m: momentum of exponential moving average for eval_model\n            T: Temperature scaling parameter for output sharpening (only when hard_label = False)\n            p_cutoff: confidence cutoff parameters for loss masking\n            lambda_u: ratio of unsupervised loss to supervised loss\n            hard_label: If True, consistency regularization use a hard pseudo label.\n            it: initial iteration count\n            num_eval_iter: freqeuncy of iteration (after 500,000 iters)\n            tb_log: tensorboard writer (see train_utils.py)\n            logger: logger (see utils.py)\n        \"\"\"", "\n", "\n", "super", "(", "FixMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# momentum update param", "\n", "self", ".", "loader", "=", "{", "}", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ema_m", "=", "ema_m", "\n", "\n", "# create the encoders", "\n", "# network is builded only by num_classes,", "\n", "# other configs are covered in main.py", "\n", "\n", "self", ".", "train_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "eval_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "num_eval_iter", "=", "num_eval_iter", "\n", "self", ".", "t_fn", "=", "Get_Scalar", "(", "T", ")", "#temperature params function", "\n", "self", ".", "p_fn", "=", "Get_Scalar", "(", "p_cutoff", ")", "#confidence cutoff function", "\n", "self", ".", "lambda_u", "=", "lambda_u", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "use_hard_label", "=", "hard_label", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n", "self", ".", "it", "=", "0", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "print_fn", "=", "print", "if", "logger", "is", "None", "else", "logger", ".", "info", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "self", ".", "sup_loss", "=", "sup_loss", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "train_model", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "detach", "(", ")", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient for eval_net", "\n", "\n", "", "self", ".", "eval_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch._eval_model_update": [[116, 126], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "fixmatch_sem.FixMatch.train_model.module.parameters", "fixmatch_sem.FixMatch.eval_model.parameters", "param_eval.copy_", "fixmatch_sem.FixMatch.train_model.buffers", "fixmatch_sem.FixMatch.eval_model.buffers", "buffer_eval.copy_", "param_train.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_eval_model_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of evaluation model (exponential moving average)\n        \"\"\"", "\n", "for", "param_train", ",", "param_eval", "in", "zip", "(", "self", ".", "train_model", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_eval", ".", "copy_", "(", "param_eval", "*", "self", ".", "ema_m", "+", "param_train", ".", "detach", "(", ")", "*", "(", "1", "-", "self", ".", "ema_m", ")", ")", "\n", "\n", "", "for", "buffer_train", ",", "buffer_eval", "in", "zip", "(", "self", ".", "train_model", ".", "buffers", "(", ")", ",", "self", ".", "eval_model", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "buffer_eval", ".", "copy_", "(", "buffer_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.set_data_loader": [[128, 131], ["fixmatch_sem.FixMatch.print_fn", "fixmatch_sem.FixMatch.loader_dict.keys"], "methods", ["None"], ["", "", "def", "set_data_loader", "(", "self", ",", "loader_dict", ")", ":", "\n", "        ", "self", ".", "loader_dict", "=", "loader_dict", "\n", "self", ".", "print_fn", "(", "f'[!] data loader keys: {self.loader_dict.keys()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.set_optimizer": [[133, 136], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "optimizer", ",", "scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.train": [[138, 269], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "fixmatch_sem.FixMatch.train_model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "zip", "fixmatch_sem.FixMatch.evaluate", "fixmatch_sem.FixMatch.update", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "y_lb.cuda.cuda.cuda", "index.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fixmatch_sem.FixMatch.scheduler.step", "fixmatch_sem.FixMatch.train_model.zero_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "fixmatch_sem.FixMatch.detach", "unsup_loss.detach", "total_loss.detach", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "x_lb.cuda", "x_ulb_w.cuda", "x_ulb_s.cuda", "amp_cm", "fixmatch_sem.FixMatch.train_model", "logits[].chunk", "fixmatch_sem.FixMatch.t_fn", "fixmatch_sem.FixMatch.p_fn", "fixmatch_utils.consistency_loss", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "total_loss.backward", "fixmatch_sem.FixMatch.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fixmatch_sem.FixMatch._eval_model_update", "mask.detach", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "fixmatch_sem.FixMatch.evaluate", "tb_dict.update", "os.path.join", "fixmatch_sem.FixMatch.print_fn", "train_utils.ce_loss", "fixmatch_sem.FixMatch.save_model", "fixmatch_sem.FixMatch.save_model", "fixmatch_sem.FixMatch.save_model", "fixmatch_sem.FixMatch.tb_log.update", "fixmatch_sem.FixMatch.sup_loss", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "hasattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "def", "train", "(", "self", ",", "args", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Train function of FixMatch.\n        From data_loader, it inference training data, computes losses, and update the networks.\n        \"\"\"", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "#lb: labeled, ulb: unlabeled", "\n", "self", ".", "train_model", ".", "train", "(", ")", "\n", "\n", "# for gpu profiling", "\n", "start_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_batch", ".", "record", "(", ")", "\n", "best_eval_acc", ",", "best_it", "=", "0.0", ",", "0", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "amp_cm", "=", "autocast", "if", "args", ".", "amp", "else", "contextlib", ".", "nullcontext", "\n", "\n", "for", "(", "x_lb", ",", "y_lb", ",", "index", ")", ",", "(", "x_ulb_w", ",", "x_ulb_s", ",", "_", ")", "in", "zip", "(", "self", ".", "loader_dict", "[", "'train_lb'", "]", ",", "self", ".", "loader_dict", "[", "'train_ulb'", "]", ")", ":", "\n", "\n", "# prevent the training iterations exceed args.num_train_iter", "\n", "            ", "if", "self", ".", "it", ">", "args", ".", "num_train_iter", ":", "\n", "                ", "break", "\n", "\n", "", "end_batch", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_run", ".", "record", "(", ")", "\n", "\n", "num_lb", "=", "x_lb", ".", "shape", "[", "0", "]", "\n", "num_ulb", "=", "x_ulb_w", ".", "shape", "[", "0", "]", "\n", "assert", "num_ulb", "==", "x_ulb_s", ".", "shape", "[", "0", "]", "\n", "\n", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", "=", "x_lb", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_w", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_s", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "y_lb", "=", "y_lb", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "index", "=", "index", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", ")", ")", "\n", "\n", "# inference and calculate sup/unsup losses", "\n", "with", "amp_cm", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "train_model", "(", "inputs", ")", "\n", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "# hyper-params for update", "\n", "T", "=", "self", ".", "t_fn", "(", "self", ".", "it", ")", "\n", "p_cutoff", "=", "self", ".", "p_fn", "(", "self", ".", "it", ")", "\n", "\n", "if", "self", ".", "sup_loss_type", "==", "\"bce\"", ":", "\n", "                    ", "sup_loss", "=", "ce_loss", "(", "logits_x_lb", ",", "y_lb", ",", "reduction", "=", "'mean'", ")", "\n", "", "elif", "self", ".", "sup_loss_type", "==", "\"sat\"", ":", "\n", "                    ", "sup_loss", "=", "self", ".", "sup_loss", "(", "logits_x_lb", ",", "y_lb", ",", "index", ",", "self", ".", "it", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "\n", "", "unsup_loss", ",", "mask", "=", "consistency_loss", "(", "logits_x_ulb_w", ",", "\n", "logits_x_ulb_s", ",", "\n", "'ce'", ",", "T", ",", "p_cutoff", ",", "\n", "use_hard_labels", "=", "args", ".", "hard_label", ")", "\n", "\n", "total_loss", "=", "sup_loss", "+", "self", ".", "lambda_u", "*", "unsup_loss", "\n", "\n", "# parameter updates", "\n", "", "if", "args", ".", "amp", ":", "\n", "                ", "scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "train_model", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "_eval_model_update", "(", ")", "\n", "\n", "", "end_run", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "#tensorboard_dict update", "\n", "tb_dict", "=", "{", "}", "\n", "tb_dict", "[", "'train/sup_loss'", "]", "=", "sup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/unsup_loss'", "]", "=", "unsup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/total_loss'", "]", "=", "total_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/mask_ratio'", "]", "=", "1.0", "-", "mask", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'lr'", "]", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "tb_dict", "[", "'train/prefecth_time'", "]", "=", "start_batch", ".", "elapsed_time", "(", "end_batch", ")", "/", "1000.", "\n", "tb_dict", "[", "'train/run_time'", "]", "=", "start_run", ".", "elapsed_time", "(", "end_run", ")", "/", "1000.", "\n", "\n", "\n", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                ", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "tb_dict", ".", "update", "(", "eval_dict", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "\n", "if", "tb_dict", "[", "'eval/top-1-acc'", "]", ">", "best_eval_acc", ":", "\n", "                    ", "best_eval_acc", "=", "tb_dict", "[", "'eval/top-1-acc'", "]", "\n", "best_it", "=", "self", ".", "it", "\n", "\n", "", "self", ".", "print_fn", "(", "f\"{self.it} iteration, USE_EMA: {hasattr(self, 'eval_model')}, {tb_dict}, BEST_EVAL_ACC: {best_eval_acc}, at {best_it} iters\"", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "\n", "                ", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_last.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_{}.pth'", ".", "format", "(", "self", ".", "it", ")", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "==", "best_it", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_best.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "not", "self", ".", "tb_log", "is", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "update", "(", "tb_dict", ",", "self", ".", "it", ")", "\n", "\n", "", "", "self", ".", "it", "+=", "1", "\n", "del", "tb_dict", "\n", "start_batch", ".", "record", "(", ")", "\n", "if", "self", ".", "it", ">", "2", "**", "19", ":", "\n", "                ", "self", ".", "num_eval_iter", "=", "1000", "\n", "\n", "", "", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "eval_dict", ".", "update", "(", "{", "'eval/best_acc'", ":", "best_eval_acc", ",", "'eval/best_it'", ":", "best_it", "}", ")", "\n", "return", "eval_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.evaluate": [[271, 300], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "eval_model.eval", "numpy.concatenate", "numpy.concatenate", "eval_model", "numpy.concatenate.append", "numpy.concatenate.append", "fixmatch_sem.calculate_acc", "eval_model.train", "x.cuda", "y.cuda", "[].cpu().numpy", "y.cpu().numpy", "[].cpu", "y.cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "eval_loader", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "use_ema", "=", "hasattr", "(", "self", ",", "'eval_model'", ")", "\n", "\n", "eval_model", "=", "self", ".", "eval_model", "if", "use_ema", "else", "self", ".", "train_model", "\n", "eval_model", ".", "eval", "(", ")", "\n", "if", "eval_loader", "is", "None", ":", "\n", "            ", "eval_loader", "=", "self", ".", "loader_dict", "[", "'eval'", "]", "\n", "\n", "", "labels_pred", "=", "[", "]", "\n", "labels_gt", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "idx", "in", "eval_loader", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "y", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "logits", "=", "eval_model", "(", "x", ")", "\n", "\n", "labels_pred", ".", "append", "(", "torch", ".", "max", "(", "logits", ",", "dim", "=", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_gt", ".", "append", "(", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "labels_pred", "=", "np", ".", "concatenate", "(", "labels_pred", ",", "axis", "=", "0", ")", "\n", "labels_gt", "=", "np", ".", "concatenate", "(", "labels_gt", ",", "axis", "=", "0", ")", "\n", "try", ":", "\n", "            ", "acc", "=", "calculate_acc", "(", "labels_pred", ",", "labels_gt", ")", "\n", "", "except", ":", "\n", "            ", "acc", "=", "-", "1", "\n", "\n", "", "if", "not", "use_ema", ":", "\n", "            ", "eval_model", ".", "train", "(", ")", "\n", "\n", "", "return", "{", "'eval/loss'", ":", "-", "1", ",", "'eval/top-1-acc'", ":", "acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.save_model": [[302, 319], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "fixmatch_sem.FixMatch.print_fn", "hasattr", "hasattr", "train_model.state_dict", "eval_model.state_dict", "fixmatch_sem.FixMatch.optimizer.state_dict", "fixmatch_sem.FixMatch.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "def", "save_model", "(", "self", ",", "save_name", ",", "save_path", ")", ":", "\n", "        ", "save_filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "save_name", ")", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "\n", "save_dict", "=", "{", "'train_model'", ":", "train_model", ".", "state_dict", "(", ")", ",", "\n", "'eval_model'", ":", "eval_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'it'", ":", "self", ".", "it", "}", "\n", "\n", "if", "self", ".", "sup_loss_type", "==", "\"sat\"", ":", "\n", "            ", "save_dict", "[", "'sat_labels'", "]", "=", "self", ".", "sup_loss", ".", "soft_labels", "\n", "\n", "", "torch", ".", "save", "(", "save_dict", ",", "save_filename", ")", "\n", "\n", "self", ".", "print_fn", "(", "f\"model saved: {save_filename}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.FixMatch.load_model": [[321, 343], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "hasattr", "hasattr", "hasattr", "fixmatch_sem.FixMatch.print_fn", "getattr", "train_model.load_state_dict", "fixmatch_sem.FixMatch.print_fn", "fixmatch_sem.FixMatch.print_fn", "eval_model.load_state_dict", "getattr().load_state_dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "\n", "for", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "key", ")", "and", "getattr", "(", "self", ",", "key", ")", "is", "not", "None", ":", "\n", "                ", "if", "'train_model'", "in", "key", ":", "\n", "                    ", "train_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "'eval_model'", "in", "key", ":", "\n", "                    ", "eval_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'it'", ":", "\n", "                    ", "self", ".", "it", "=", "checkpoint", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ",", "key", ")", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is LOADED\"", ")", "\n", "", "elif", "key", "==", "\"sat_labels\"", ":", "\n", "                ", "self", ".", "sup_loss", ".", "soft_labels", "=", "checkpoint", "[", "key", "]", "\n", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is LOADED\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is **NOT** LOADED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_sem.calculate_acc": [[17, 58], ["numpy.unique", "numpy.unique", "len", "numpy.zeros", "range", "numpy.amax", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "len", "numpy.unique", "range", "numpy.logical_and", "numpy.count_nonzero", "numpy.unique", "numpy.unique", "numpy.logical_and", "numpy.count_nonzero", "len", "len"], "function", ["None"], ["def", "calculate_acc", "(", "ypred", ",", "y", ",", "return_idx", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculating the clustering accuracy. The predicted result must have the same number of clusters as the ground truth.\n\n    ypred: 1-D numpy vector, predicted labels\n    y: 1-D numpy vector, ground truth\n    The problem of finding the best permutation to calculate the clustering accuracy is a linear assignment problem.\n    This function construct a N-by-N cost matrix, then pass it to scipy.optimize.linear_sum_assignment to solve the assignment problem.\n\n    \"\"\"", "\n", "assert", "len", "(", "y", ")", ">", "0", "\n", "assert", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "==", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "\n", "s", "=", "np", ".", "unique", "(", "ypred", ")", "\n", "t", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "N", "=", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "i", "]", ",", "y", "==", "t", "[", "j", "]", ")", "\n", "C", "[", "i", "]", "[", "j", "]", "=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "# convert the C matrix to the 'true' cost", "\n", "", "", "Cmax", "=", "np", ".", "amax", "(", "C", ")", "\n", "C", "=", "Cmax", "-", "C", "\n", "#", "\n", "# indices = linear_sum_assignment(C)", "\n", "# row = indices[:][:, 0]", "\n", "# col = indices[:][:, 1]", "\n", "row", ",", "col", "=", "linear_sum_assignment", "(", "C", ")", "\n", "# calculating the accuracy according to the optimal assignment", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "row", "[", "i", "]", "]", ",", "y", "==", "t", "[", "col", "[", "i", "]", "]", ")", "\n", "count", "+=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "", "if", "return_idx", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", ",", "row", ",", "col", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.__init__": [[61, 113], ["super().__init__", "net_builder", "net_builder", "fixmatch_utils.Get_Scalar", "fixmatch_utils.Get_Scalar", "zip", "rfixmatch.RFixMatch.eval_model.eval", "rfixmatch.RFixMatch.train_model.parameters", "rfixmatch.RFixMatch.eval_model.parameters", "param_k.data.copy_", "param_q.detach"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["if", "self", ".", "training", ":", "\n", "            ", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "sup_soft_labels", "=", "None", "\n", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", "and", "it", ">", "self", ".", "es", ":", "\n", "# obtain prob, then update running avg", "\n", "\n", "                ", "self", ".", "_momentum_update_soft_labels", "(", "logits_x_lb", ",", "sup_index", ")", "\n", "sup_soft_labels", "=", "self", ".", "soft_labels", "[", "sup_index", "]", "\n", "\n", "", "return", "logits_x_lb", ",", "logits_x_ulb_w", ",", "logits_x_ulb_s", ",", "sup_soft_labels", "\n", "\n", "", "return", "logits", "\n", "\n", "\n", "# utils", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n", "\n", "", "def", "build_rfm", "(", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "    ", "return", "RFMModel", "(", "net_builder", ",", "sup_loss_type", "=", "sup_loss_type", ",", "labels", "=", "labels", ",", "num_classes", "=", "num_classes", ",", "momentum", "=", "momentum", ",", "es", "=", "es", ")", "\n", "\n", "\n", "", "class", "RMFBuilder", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "        ", "self", ".", "net_builder", "=", "net_builder", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n", "", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "return", "RFMModel", "(", "self", ".", "net_builder", ",", "sup_loss_type", "=", "self", ".", "sup_loss_type", ",", "\n", "labels", "=", "self", ".", "labels", ",", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "es", "=", "self", ".", "es", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch._eval_model_update": [[114, 124], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "rfixmatch.RFixMatch.train_model.module.parameters", "rfixmatch.RFixMatch.eval_model.parameters", "param_eval.copy_", "rfixmatch.RFixMatch.train_model.buffers", "rfixmatch.RFixMatch.eval_model.buffers", "buffer_eval.copy_", "param_train.detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.set_data_loader": [[125, 128], ["rfixmatch.RFixMatch.print_fn", "rfixmatch.RFixMatch.loader_dict.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.set_optimizer": [[129, 132], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.train": [[136, 268], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "rfixmatch.RFixMatch.train_model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "zip", "rfixmatch.RFixMatch.evaluate", "rfixmatch.RFixMatch.update", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "y_lb.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rfixmatch.RFixMatch.scheduler.step", "rfixmatch.RFixMatch.train_model.zero_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_utils.ce_loss.detach", "unsup_loss.detach", "total_loss.detach", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "x_lb.cuda", "x_ulb_w.cuda", "x_ulb_s.cuda", "amp_cm", "rfixmatch.RFixMatch.train_model", "rfixmatch.RFixMatch.t_fn", "rfixmatch.RFixMatch.p_fn", "fixmatch_utils.consistency_loss", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "total_loss.backward", "rfixmatch.RFixMatch.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rfixmatch.RFixMatch._eval_model_update", "mask.detach", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "rfixmatch.RFixMatch.evaluate", "tb_dict.update", "os.path.join", "rfixmatch.RFixMatch.print_fn", "train_utils.sat_loss", "train_utils.ce_loss", "rfixmatch.RFixMatch.save_model", "rfixmatch.RFixMatch.save_model", "rfixmatch.RFixMatch.save_model", "rfixmatch.RFixMatch.tb_log.update", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "hasattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.sat_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.evaluate": [[269, 298], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "eval_model.eval", "numpy.concatenate", "numpy.concatenate", "eval_model", "numpy.concatenate.append", "numpy.concatenate.append", "rfixmatch.calculate_acc", "eval_model.train", "x.cuda", "y.cuda", "[].cpu().numpy", "y.cpu().numpy", "[].cpu", "y.cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.save_model": [[299, 311], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "rfixmatch.RFixMatch.print_fn", "hasattr", "hasattr", "train_model.state_dict", "eval_model.state_dict", "rfixmatch.RFixMatch.optimizer.state_dict", "rfixmatch.RFixMatch.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.RFixMatch.load_model": [[312, 332], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "hasattr", "hasattr", "hasattr", "rfixmatch.RFixMatch.print_fn", "rfixmatch.RFixMatch.print_fn", "getattr", "train_model.load_state_dict", "eval_model.load_state_dict", "getattr().load_state_dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch.calculate_acc": [[17, 58], ["numpy.unique", "numpy.unique", "len", "numpy.zeros", "range", "numpy.amax", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "len", "numpy.unique", "range", "numpy.logical_and", "numpy.count_nonzero", "numpy.unique", "numpy.unique", "numpy.logical_and", "numpy.count_nonzero", "len", "len"], "function", ["None"], ["\n", "super", "(", "RFMModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", ":", "\n", "            ", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "register_buffer", "(", "\"soft_labels\"", ",", "soft_labels", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n", "\n", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_soft_labels", "(", "self", ",", "logits", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the soft labels\n        \"\"\"", "\n", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "prob", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "num_lb", "=", "None", ",", "it", "=", "None", ",", "sup_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.Get_Scalar.__init__": [[7, 9], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "value", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.Get_Scalar.get_value": [[10, 12], ["None"], "methods", ["None"], ["", "def", "get_value", "(", "self", ",", "iter", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.Get_Scalar.__call__": [[13, 15], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "iter", ")", ":", "\n", "        ", "return", "self", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss": [[17, 41], ["logits_w.detach.detach", "torch.mse_loss", "logits_w.detach.size", "logits_s.size", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "max_probs.ge().float", "Exception", "torch.softmax", "torch.softmax", "masked_loss.mean", "max_probs.ge().float.mean", "max_probs.ge", "fixmatch.train_utils.ce_loss", "fixmatch.train_utils.ce_loss"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss"], ["", "", "def", "consistency_loss", "(", "logits_w", ",", "logits_s", ",", "name", "=", "'ce'", ",", "T", "=", "1.0", ",", "p_cutoff", "=", "0.0", ",", "use_hard_labels", "=", "True", ")", ":", "\n", "    ", "assert", "name", "in", "[", "'ce'", ",", "'L2'", "]", "\n", "logits_w", "=", "logits_w", ".", "detach", "(", ")", "\n", "if", "name", "==", "'L2'", ":", "\n", "        ", "assert", "logits_w", ".", "size", "(", ")", "==", "logits_s", ".", "size", "(", ")", "\n", "return", "F", ".", "mse_loss", "(", "logits_s", ",", "logits_w", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "", "elif", "name", "==", "'L2_mask'", ":", "\n", "        ", "pass", "\n", "\n", "", "elif", "name", "==", "'ce'", ":", "\n", "        ", "pseudo_label", "=", "torch", ".", "softmax", "(", "logits_w", ",", "dim", "=", "-", "1", ")", "\n", "max_probs", ",", "max_idx", "=", "torch", ".", "max", "(", "pseudo_label", ",", "dim", "=", "-", "1", ")", "\n", "mask", "=", "max_probs", ".", "ge", "(", "p_cutoff", ")", ".", "float", "(", ")", "\n", "\n", "if", "use_hard_labels", ":", "\n", "            ", "masked_loss", "=", "ce_loss", "(", "logits_s", ",", "max_idx", ",", "use_hard_labels", ",", "reduction", "=", "'none'", ")", "*", "mask", "\n", "", "else", ":", "\n", "            ", "pseudo_label", "=", "torch", ".", "softmax", "(", "logits_w", "/", "T", ",", "dim", "=", "-", "1", ")", "\n", "masked_loss", "=", "ce_loss", "(", "logits_s", ",", "pseudo_label", ",", "use_hard_labels", ")", "*", "mask", "\n", "", "return", "masked_loss", ".", "mean", "(", ")", ",", "mask", ".", "mean", "(", ")", "\n", "\n", "", "else", ":", "\n", "        ", "assert", "Exception", "(", "'Not Implemented consistency_loss'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.__init__": [[19, 70], ["super().__init__", "net_builder", "net_builder", "fixmatch_utils.Get_Scalar", "fixmatch_utils.Get_Scalar", "zip", "rfixmatch_v1.FixMatch.eval_model.eval", "rfixmatch_v1.FixMatch.train_model.parameters", "rfixmatch_v1.FixMatch.eval_model.parameters", "param_k.data.copy_", "param_q.detach"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "num_classes", ",", "ema_m", ",", "T", ",", "p_cutoff", ",", "lambda_u", ",", "hard_label", "=", "True", ",", "t_fn", "=", "None", ",", "p_fn", "=", "None", ",", "it", "=", "0", ",", "num_eval_iter", "=", "1000", ",", "tb_log", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class Fixmatch contains setter of data_loader, optimizer, and model update methods.\n        Args:\n            net_builder: backbone network class (see net_builder in utils.py)\n            num_classes: # of label classes \n            ema_m: momentum of exponential moving average for eval_model\n            T: Temperature scaling parameter for output sharpening (only when hard_label = False)\n            p_cutoff: confidence cutoff parameters for loss masking\n            lambda_u: ratio of unsupervised loss to supervised loss\n            hard_label: If True, consistency regularization use a hard pseudo label.\n            it: initial iteration count\n            num_eval_iter: freqeuncy of iteration (after 500,000 iters)\n            tb_log: tensorboard writer (see train_utils.py)\n            logger: logger (see utils.py)\n        \"\"\"", "\n", "\n", "super", "(", "FixMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# momentum update param", "\n", "self", ".", "loader", "=", "{", "}", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ema_m", "=", "ema_m", "\n", "\n", "# create the encoders", "\n", "# network is builded only by num_classes,", "\n", "# other configs are covered in main.py", "\n", "\n", "self", ".", "train_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "eval_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "num_eval_iter", "=", "num_eval_iter", "\n", "self", ".", "t_fn", "=", "Get_Scalar", "(", "T", ")", "#temperature params function", "\n", "self", ".", "p_fn", "=", "Get_Scalar", "(", "p_cutoff", ")", "#confidence cutoff function", "\n", "self", ".", "lambda_u", "=", "lambda_u", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "use_hard_label", "=", "hard_label", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n", "self", ".", "it", "=", "0", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "print_fn", "=", "print", "if", "logger", "is", "None", "else", "logger", ".", "info", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "train_model", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "detach", "(", ")", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient for eval_net", "\n", "\n", "", "self", ".", "eval_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch._eval_model_update": [[72, 82], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "rfixmatch_v1.FixMatch.train_model.module.parameters", "rfixmatch_v1.FixMatch.eval_model.parameters", "param_eval.copy_", "rfixmatch_v1.FixMatch.train_model.buffers", "rfixmatch_v1.FixMatch.eval_model.buffers", "buffer_eval.copy_", "param_train.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_eval_model_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of evaluation model (exponential moving average)\n        \"\"\"", "\n", "for", "param_train", ",", "param_eval", "in", "zip", "(", "self", ".", "train_model", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_eval", ".", "copy_", "(", "param_eval", "*", "self", ".", "ema_m", "+", "param_train", ".", "detach", "(", ")", "*", "(", "1", "-", "self", ".", "ema_m", ")", ")", "\n", "\n", "", "for", "buffer_train", ",", "buffer_eval", "in", "zip", "(", "self", ".", "train_model", ".", "buffers", "(", ")", ",", "self", ".", "eval_model", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "buffer_eval", ".", "copy_", "(", "buffer_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.set_data_loader": [[84, 87], ["rfixmatch_v1.FixMatch.print_fn", "rfixmatch_v1.FixMatch.loader_dict.keys"], "methods", ["None"], ["", "", "def", "set_data_loader", "(", "self", ",", "loader_dict", ")", ":", "\n", "        ", "self", ".", "loader_dict", "=", "loader_dict", "\n", "self", ".", "print_fn", "(", "f'[!] data loader keys: {self.loader_dict.keys()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.set_optimizer": [[89, 92], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "optimizer", ",", "scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.train": [[94, 220], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "rfixmatch_v1.FixMatch.train_model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "zip", "rfixmatch_v1.FixMatch.evaluate", "rfixmatch_v1.FixMatch.update", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "y_lb.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "rfixmatch_v1.FixMatch.scheduler.step", "rfixmatch_v1.FixMatch.train_model.zero_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "fixmatch.train_utils.ce_loss.detach", "unsup_loss.detach", "total_loss.detach", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "x_lb.cuda", "x_ulb_w.cuda", "x_ulb_s.cuda", "amp_cm", "rfixmatch_v1.FixMatch.train_model", "logits[].chunk", "rfixmatch_v1.FixMatch.t_fn", "rfixmatch_v1.FixMatch.p_fn", "fixmatch.train_utils.ce_loss", "fixmatch_utils.consistency_loss", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "total_loss.backward", "rfixmatch_v1.FixMatch.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rfixmatch_v1.FixMatch._eval_model_update", "mask.detach", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "rfixmatch_v1.FixMatch.evaluate", "tb_dict.update", "os.path.join", "rfixmatch_v1.FixMatch.print_fn", "rfixmatch_v1.FixMatch.save_model", "rfixmatch_v1.FixMatch.save_model", "rfixmatch_v1.FixMatch.save_model", "rfixmatch_v1.FixMatch.tb_log.update", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "hasattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "def", "train", "(", "self", ",", "args", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Train function of FixMatch.\n        From data_loader, it inference training data, computes losses, and update the networks.\n        \"\"\"", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "#lb: labeled, ulb: unlabeled", "\n", "self", ".", "train_model", ".", "train", "(", ")", "\n", "\n", "# for gpu profiling", "\n", "start_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_batch", ".", "record", "(", ")", "\n", "best_eval_acc", ",", "best_it", "=", "0.0", ",", "0", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "amp_cm", "=", "autocast", "if", "args", ".", "amp", "else", "contextlib", ".", "nullcontext", "\n", "\n", "for", "(", "x_lb", ",", "y_lb", ",", "idx", ")", ",", "(", "x_ulb_w", ",", "x_ulb_s", ",", "_", ")", "in", "zip", "(", "self", ".", "loader_dict", "[", "'train_lb'", "]", ",", "self", ".", "loader_dict", "[", "'train_ulb'", "]", ")", ":", "\n", "\n", "# prevent the training iterations exceed args.num_train_iter", "\n", "            ", "if", "self", ".", "it", ">", "args", ".", "num_train_iter", ":", "\n", "                ", "break", "\n", "\n", "", "end_batch", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_run", ".", "record", "(", ")", "\n", "\n", "num_lb", "=", "x_lb", ".", "shape", "[", "0", "]", "\n", "num_ulb", "=", "x_ulb_w", ".", "shape", "[", "0", "]", "\n", "assert", "num_ulb", "==", "x_ulb_s", ".", "shape", "[", "0", "]", "\n", "\n", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", "=", "x_lb", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_w", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_s", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "y_lb", "=", "y_lb", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", ")", ")", "\n", "\n", "# inference and calculate sup/unsup losses", "\n", "with", "amp_cm", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "train_model", "(", "inputs", ")", "\n", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "# hyper-params for update", "\n", "T", "=", "self", ".", "t_fn", "(", "self", ".", "it", ")", "\n", "p_cutoff", "=", "self", ".", "p_fn", "(", "self", ".", "it", ")", "\n", "\n", "sup_loss", "=", "ce_loss", "(", "logits_x_lb", ",", "y_lb", ",", "reduction", "=", "'mean'", ")", "\n", "unsup_loss", ",", "mask", "=", "consistency_loss", "(", "logits_x_ulb_w", ",", "\n", "logits_x_ulb_s", ",", "\n", "'ce'", ",", "T", ",", "p_cutoff", ",", "\n", "use_hard_labels", "=", "args", ".", "hard_label", ")", "\n", "\n", "total_loss", "=", "sup_loss", "+", "self", ".", "lambda_u", "*", "unsup_loss", "\n", "\n", "# parameter updates", "\n", "", "if", "args", ".", "amp", ":", "\n", "                ", "scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "train_model", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "_eval_model_update", "(", ")", "\n", "\n", "", "end_run", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "#tensorboard_dict update", "\n", "tb_dict", "=", "{", "}", "\n", "tb_dict", "[", "'train/sup_loss'", "]", "=", "sup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/unsup_loss'", "]", "=", "unsup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/total_loss'", "]", "=", "total_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/mask_ratio'", "]", "=", "1.0", "-", "mask", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'lr'", "]", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "tb_dict", "[", "'train/prefecth_time'", "]", "=", "start_batch", ".", "elapsed_time", "(", "end_batch", ")", "/", "1000.", "\n", "tb_dict", "[", "'train/run_time'", "]", "=", "start_run", ".", "elapsed_time", "(", "end_run", ")", "/", "1000.", "\n", "\n", "\n", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                ", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "tb_dict", ".", "update", "(", "eval_dict", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "\n", "if", "tb_dict", "[", "'eval/top-1-acc'", "]", ">", "best_eval_acc", ":", "\n", "                    ", "best_eval_acc", "=", "tb_dict", "[", "'eval/top-1-acc'", "]", "\n", "best_it", "=", "self", ".", "it", "\n", "\n", "", "self", ".", "print_fn", "(", "f\"{self.it} iteration, USE_EMA: {hasattr(self, 'eval_model')}, {tb_dict}, BEST_EVAL_ACC: {best_eval_acc}, at {best_it} iters\"", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "\n", "                ", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_last.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_{}.pth'", ".", "format", "(", "self", ".", "it", ")", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "==", "best_it", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_best.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "not", "self", ".", "tb_log", "is", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "update", "(", "tb_dict", ",", "self", ".", "it", ")", "\n", "\n", "", "", "self", ".", "it", "+=", "1", "\n", "del", "tb_dict", "\n", "start_batch", ".", "record", "(", ")", "\n", "if", "self", ".", "it", ">", "2", "**", "19", ":", "\n", "                ", "self", ".", "num_eval_iter", "=", "1000", "\n", "\n", "", "", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "eval_dict", ".", "update", "(", "{", "'eval/best_acc'", ":", "best_eval_acc", ",", "'eval/best_it'", ":", "best_it", "}", ")", "\n", "return", "eval_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.evaluate": [[221, 254], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "eval_model.eval", "numpy.concatenate", "numpy.concatenate", "spice.utils.evaluation.calculate_nmi", "spice.utils.evaluation.calculate_ari", "eval_model", "numpy.concatenate.append", "numpy.concatenate.append", "spice.utils.evaluation.calculate_acc", "eval_model.train", "x.cuda", "y.cuda", "[].cpu().numpy", "y.cpu().numpy", "[].cpu", "y.cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "eval_loader", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "use_ema", "=", "hasattr", "(", "self", ",", "'eval_model'", ")", "\n", "\n", "eval_model", "=", "self", ".", "eval_model", "if", "use_ema", "else", "self", ".", "train_model", "\n", "eval_model", ".", "eval", "(", ")", "\n", "if", "eval_loader", "is", "None", ":", "\n", "            ", "eval_loader", "=", "self", ".", "loader_dict", "[", "'eval'", "]", "\n", "\n", "", "labels_pred", "=", "[", "]", "\n", "labels_gt", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "idx", "in", "eval_loader", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "y", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "logits", "=", "eval_model", "(", "x", ")", "\n", "\n", "labels_pred", ".", "append", "(", "torch", ".", "max", "(", "logits", ",", "dim", "=", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_gt", ".", "append", "(", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "labels_pred", "=", "np", ".", "concatenate", "(", "labels_pred", ",", "axis", "=", "0", ")", "\n", "labels_gt", "=", "np", ".", "concatenate", "(", "labels_gt", ",", "axis", "=", "0", ")", "\n", "try", ":", "\n", "            ", "acc", "=", "calculate_acc", "(", "labels_pred", ",", "labels_gt", ")", "\n", "", "except", ":", "\n", "            ", "acc", "=", "-", "1", "\n", "\n", "", "nmi", "=", "calculate_nmi", "(", "labels_pred", ",", "labels_gt", ")", "\n", "\n", "ari", "=", "calculate_ari", "(", "labels_pred", ",", "labels_gt", ")", "\n", "\n", "if", "not", "use_ema", ":", "\n", "            ", "eval_model", ".", "train", "(", ")", "\n", "\n", "", "return", "{", "'eval/loss'", ":", "-", "1", ",", "'eval/top-1-acc'", ":", "acc", ",", "'eval/nmi'", ":", "nmi", ",", "'eval/ari'", ":", "ari", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.save_model": [[256, 267], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "rfixmatch_v1.FixMatch.print_fn", "hasattr", "hasattr", "train_model.state_dict", "eval_model.state_dict", "rfixmatch_v1.FixMatch.optimizer.state_dict", "rfixmatch_v1.FixMatch.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "def", "save_model", "(", "self", ",", "save_name", ",", "save_path", ")", ":", "\n", "        ", "save_filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "save_name", ")", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "torch", ".", "save", "(", "{", "'train_model'", ":", "train_model", ".", "state_dict", "(", ")", ",", "\n", "'eval_model'", ":", "eval_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'it'", ":", "self", ".", "it", "}", ",", "save_filename", ")", "\n", "\n", "self", ".", "print_fn", "(", "f\"model saved: {save_filename}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.rfixmatch_v1.FixMatch.load_model": [[269, 288], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "hasattr", "hasattr", "hasattr", "rfixmatch_v1.FixMatch.print_fn", "rfixmatch_v1.FixMatch.print_fn", "getattr", "train_model.load_state_dict", "eval_model.load_state_dict", "getattr().load_state_dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "\n", "for", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "key", ")", "and", "getattr", "(", "self", ",", "key", ")", "is", "not", "None", ":", "\n", "                ", "if", "'train_model'", "in", "key", ":", "\n", "                    ", "train_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "'eval_model'", "in", "key", ":", "\n", "                    ", "eval_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'it'", ":", "\n", "                    ", "self", ".", "it", "=", "checkpoint", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ",", "key", ")", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is LOADED\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is **NOT** LOADED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.__init__": [[61, 115], ["super().__init__", "net_builder", "net_builder", "fixmatch_utils.Get_Scalar", "fixmatch_utils.Get_Scalar", "zip", "fixmatch_robust.FixMatch.eval_model.eval", "fixmatch_robust.FixMatch.train_model.parameters", "fixmatch_robust.FixMatch.eval_model.parameters", "param_k.data.copy_", "param_q.detach"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "num_classes", ",", "ema_m", ",", "T", ",", "p_cutoff", ",", "lambda_u", ",", "\n", "hard_label", "=", "True", ",", "t_fn", "=", "None", ",", "p_fn", "=", "None", ",", "it", "=", "0", ",", "num_eval_iter", "=", "1000", ",", "tb_log", "=", "None", ",", "logger", "=", "None", ",", "\n", "sup_loss_type", "=", "'bce'", ")", ":", "\n", "        ", "\"\"\"\n        class Fixmatch contains setter of data_loader, optimizer, and model update methods.\n        Args:\n            net_builder: backbone network class (see net_builder in utils.py)\n            num_classes: # of label classes \n            ema_m: momentum of exponential moving average for eval_model\n            T: Temperature scaling parameter for output sharpening (only when hard_label = False)\n            p_cutoff: confidence cutoff parameters for loss masking\n            lambda_u: ratio of unsupervised loss to supervised loss\n            hard_label: If True, consistency regularization use a hard pseudo label.\n            it: initial iteration count\n            num_eval_iter: freqeuncy of iteration (after 500,000 iters)\n            tb_log: tensorboard writer (see train_utils.py)\n            logger: logger (see utils.py)\n        \"\"\"", "\n", "\n", "super", "(", "FixMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# momentum update param", "\n", "self", ".", "loader", "=", "{", "}", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ema_m", "=", "ema_m", "\n", "\n", "# create the encoders", "\n", "# network is builded only by num_classes,", "\n", "# other configs are covered in main.py", "\n", "\n", "self", ".", "train_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "eval_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "num_eval_iter", "=", "num_eval_iter", "\n", "self", ".", "t_fn", "=", "Get_Scalar", "(", "T", ")", "# temperature params function", "\n", "self", ".", "p_fn", "=", "Get_Scalar", "(", "p_cutoff", ")", "# confidence cutoff function", "\n", "self", ".", "lambda_u", "=", "lambda_u", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "use_hard_label", "=", "hard_label", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n", "self", ".", "it", "=", "0", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "print_fn", "=", "print", "if", "logger", "is", "None", "else", "logger", ".", "info", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "train_model", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "detach", "(", ")", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient for eval_net", "\n", "\n", "", "self", ".", "eval_model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch._eval_model_update": [[117, 127], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "fixmatch_robust.FixMatch.train_model.module.parameters", "fixmatch_robust.FixMatch.eval_model.parameters", "param_eval.copy_", "fixmatch_robust.FixMatch.train_model.buffers", "fixmatch_robust.FixMatch.eval_model.buffers", "buffer_eval.copy_", "param_train.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_eval_model_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of evaluation model (exponential moving average)\n        \"\"\"", "\n", "for", "param_train", ",", "param_eval", "in", "zip", "(", "self", ".", "train_model", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_eval", ".", "copy_", "(", "param_eval", "*", "self", ".", "ema_m", "+", "param_train", ".", "detach", "(", ")", "*", "(", "1", "-", "self", ".", "ema_m", ")", ")", "\n", "\n", "", "for", "buffer_train", ",", "buffer_eval", "in", "zip", "(", "self", ".", "train_model", ".", "buffers", "(", ")", ",", "self", ".", "eval_model", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "buffer_eval", ".", "copy_", "(", "buffer_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.set_data_loader": [[128, 131], ["fixmatch_robust.FixMatch.print_fn", "fixmatch_robust.FixMatch.loader_dict.keys"], "methods", ["None"], ["", "", "def", "set_data_loader", "(", "self", ",", "loader_dict", ")", ":", "\n", "        ", "self", ".", "loader_dict", "=", "loader_dict", "\n", "self", ".", "print_fn", "(", "f'[!] data loader keys: {self.loader_dict.keys()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.set_optimizer": [[132, 135], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "optimizer", ",", "scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.set_criterion": [[136, 138], ["None"], "methods", ["None"], ["", "def", "set_criterion", "(", "self", ",", "fn", ")", ":", "\n", "        ", "self", ".", "sup_loss_fn", "=", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.train": [[139, 272], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "fixmatch_robust.FixMatch.train_model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "zip", "fixmatch_robust.FixMatch.evaluate", "fixmatch_robust.FixMatch.update", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "y_lb.cuda.cuda.cuda", "idx.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fixmatch_robust.FixMatch.scheduler.step", "fixmatch_robust.FixMatch.train_model.zero_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "fixmatch_robust.FixMatch.detach", "unsup_loss.detach", "total_loss.detach", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "x_lb.cuda", "x_ulb_w.cuda", "x_ulb_s.cuda", "amp_cm", "fixmatch_robust.FixMatch.train_model", "logits[].chunk", "fixmatch_robust.FixMatch.t_fn", "fixmatch_robust.FixMatch.p_fn", "fixmatch_utils.consistency_loss", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "total_loss.backward", "fixmatch_robust.FixMatch.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fixmatch_robust.FixMatch._eval_model_update", "mask.detach", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "fixmatch_robust.FixMatch.evaluate", "tb_dict.update", "os.path.join", "fixmatch_robust.FixMatch.print_fn", "fixmatch_robust.FixMatch.sup_loss_fn", "fixmatch_robust.FixMatch.save_model", "fixmatch_robust.FixMatch.save_model", "fixmatch_robust.FixMatch.save_model", "fixmatch_robust.FixMatch.tb_log.update", "fixmatch_robust.FixMatch.sup_loss_fn", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "hasattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "def", "train", "(", "self", ",", "args", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Train function of FixMatch.\n        From data_loader, it inference training data, computes losses, and update the networks.\n        \"\"\"", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "# lb: labeled, ulb: unlabeled", "\n", "self", ".", "train_model", ".", "train", "(", ")", "\n", "\n", "# for gpu profiling", "\n", "start_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_batch", ".", "record", "(", ")", "\n", "best_eval_acc", ",", "best_it", "=", "0.0", ",", "0", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "amp_cm", "=", "autocast", "if", "args", ".", "amp", "else", "contextlib", ".", "nullcontext", "\n", "\n", "for", "(", "x_lb", ",", "y_lb", ",", "idx", ")", ",", "(", "x_ulb_w", ",", "x_ulb_s", ",", "_", ")", "in", "zip", "(", "self", ".", "loader_dict", "[", "'train_lb'", "]", ",", "\n", "self", ".", "loader_dict", "[", "'train_ulb'", "]", ")", ":", "\n", "\n", "# prevent the training iterations exceed args.num_train_iter", "\n", "            ", "if", "self", ".", "it", ">", "args", ".", "num_train_iter", ":", "\n", "                ", "break", "\n", "\n", "", "end_batch", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_run", ".", "record", "(", ")", "\n", "\n", "num_lb", "=", "x_lb", ".", "shape", "[", "0", "]", "\n", "num_ulb", "=", "x_ulb_w", ".", "shape", "[", "0", "]", "\n", "assert", "num_ulb", "==", "x_ulb_s", ".", "shape", "[", "0", "]", "\n", "\n", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", "=", "x_lb", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_w", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_s", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "y_lb", "=", "y_lb", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "idx", "=", "idx", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", ")", ")", "\n", "\n", "# inference and calculate sup/unsup losses", "\n", "with", "amp_cm", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "train_model", "(", "inputs", ")", "\n", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "# hyper-params for update", "\n", "T", "=", "self", ".", "t_fn", "(", "self", ".", "it", ")", "\n", "p_cutoff", "=", "self", ".", "p_fn", "(", "self", ".", "it", ")", "\n", "\n", "# sup_loss = ce_loss(logits_x_lb, y_lb, reduction='mean')", "\n", "if", "self", ".", "sup_loss_type", "==", "'ce'", ":", "\n", "                    ", "sup_loss", "=", "self", ".", "sup_loss_fn", "(", "logits_x_lb", ",", "y_lb", ")", "\n", "", "elif", "self", ".", "sup_loss_type", "==", "'sat'", ":", "\n", "                    ", "sup_loss", "=", "self", ".", "sup_loss_fn", "(", "logits_x_lb", ",", "y_lb", ",", "idx", ",", "self", ".", "it", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "\n", "", "unsup_loss", ",", "mask", "=", "consistency_loss", "(", "logits_x_ulb_w", ",", "\n", "logits_x_ulb_s", ",", "\n", "'ce'", ",", "T", ",", "p_cutoff", ",", "\n", "use_hard_labels", "=", "args", ".", "hard_label", ")", "\n", "\n", "total_loss", "=", "sup_loss", "+", "self", ".", "lambda_u", "*", "unsup_loss", "\n", "\n", "# parameter updates", "\n", "", "if", "args", ".", "amp", ":", "\n", "                ", "scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "train_model", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "_eval_model_update", "(", ")", "\n", "\n", "", "end_run", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "# tensorboard_dict update", "\n", "tb_dict", "=", "{", "}", "\n", "tb_dict", "[", "'train/sup_loss'", "]", "=", "sup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/unsup_loss'", "]", "=", "unsup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/total_loss'", "]", "=", "total_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/mask_ratio'", "]", "=", "1.0", "-", "mask", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'lr'", "]", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "tb_dict", "[", "'train/prefecth_time'", "]", "=", "start_batch", ".", "elapsed_time", "(", "end_batch", ")", "/", "1000.", "\n", "tb_dict", "[", "'train/run_time'", "]", "=", "start_run", ".", "elapsed_time", "(", "end_run", ")", "/", "1000.", "\n", "\n", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                ", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "tb_dict", ".", "update", "(", "eval_dict", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "\n", "if", "tb_dict", "[", "'eval/top-1-acc'", "]", ">", "best_eval_acc", ":", "\n", "                    ", "best_eval_acc", "=", "tb_dict", "[", "'eval/top-1-acc'", "]", "\n", "best_it", "=", "self", ".", "it", "\n", "\n", "", "self", ".", "print_fn", "(", "\n", "f\"{self.it} iteration, USE_EMA: {hasattr(self, 'eval_model')}, {tb_dict}, BEST_EVAL_ACC: {best_eval_acc}, at {best_it} iters\"", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "\n", "                ", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_last.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_{}.pth'", ".", "format", "(", "self", ".", "it", ")", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "==", "best_it", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_best.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "not", "self", ".", "tb_log", "is", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "update", "(", "tb_dict", ",", "self", ".", "it", ")", "\n", "\n", "", "", "self", ".", "it", "+=", "1", "\n", "del", "tb_dict", "\n", "start_batch", ".", "record", "(", ")", "\n", "if", "self", ".", "it", ">", "2", "**", "19", ":", "\n", "                ", "self", ".", "num_eval_iter", "=", "1000", "\n", "\n", "", "", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "eval_dict", ".", "update", "(", "{", "'eval/best_acc'", ":", "best_eval_acc", ",", "'eval/best_it'", ":", "best_it", "}", ")", "\n", "return", "eval_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.evaluate": [[273, 302], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "eval_model.eval", "numpy.concatenate", "numpy.concatenate", "eval_model", "numpy.concatenate.append", "numpy.concatenate.append", "fixmatch_robust.calculate_acc", "eval_model.train", "x.cuda", "y.cuda", "[].cpu().numpy", "y.cpu().numpy", "[].cpu", "y.cpu", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "eval_loader", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "use_ema", "=", "hasattr", "(", "self", ",", "'eval_model'", ")", "\n", "\n", "eval_model", "=", "self", ".", "eval_model", "if", "use_ema", "else", "self", ".", "train_model", "\n", "eval_model", ".", "eval", "(", ")", "\n", "if", "eval_loader", "is", "None", ":", "\n", "            ", "eval_loader", "=", "self", ".", "loader_dict", "[", "'eval'", "]", "\n", "\n", "", "labels_pred", "=", "[", "]", "\n", "labels_gt", "=", "[", "]", "\n", "for", "x", ",", "y", ",", "idx", "in", "eval_loader", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "y", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "logits", "=", "eval_model", "(", "x", ")", "\n", "\n", "labels_pred", ".", "append", "(", "torch", ".", "max", "(", "logits", ",", "dim", "=", "-", "1", ")", "[", "1", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "labels_gt", ".", "append", "(", "y", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "", "labels_pred", "=", "np", ".", "concatenate", "(", "labels_pred", ",", "axis", "=", "0", ")", "\n", "labels_gt", "=", "np", ".", "concatenate", "(", "labels_gt", ",", "axis", "=", "0", ")", "\n", "try", ":", "\n", "            ", "acc", "=", "calculate_acc", "(", "labels_pred", ",", "labels_gt", ")", "\n", "", "except", ":", "\n", "            ", "acc", "=", "-", "1", "\n", "\n", "", "if", "not", "use_ema", ":", "\n", "            ", "eval_model", ".", "train", "(", ")", "\n", "\n", "", "return", "{", "'eval/loss'", ":", "-", "1", ",", "'eval/top-1-acc'", ":", "acc", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.save_model": [[303, 322], ["os.path.join", "fixmatch_robust.FixMatch.print_fn", "hasattr", "hasattr", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "train_model.state_dict", "eval_model.state_dict", "fixmatch_robust.FixMatch.optimizer.state_dict", "fixmatch_robust.FixMatch.scheduler.state_dict", "train_model.state_dict", "eval_model.state_dict", "fixmatch_robust.FixMatch.sup_loss_fn.state_dict", "fixmatch_robust.FixMatch.optimizer.state_dict", "fixmatch_robust.FixMatch.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "def", "save_model", "(", "self", ",", "save_name", ",", "save_path", ")", ":", "\n", "        ", "save_filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "save_name", ")", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "if", "self", ".", "sup_loss_type", "==", "'bce'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'train_model'", ":", "train_model", ".", "state_dict", "(", ")", ",", "\n", "'eval_model'", ":", "eval_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'it'", ":", "self", ".", "it", "}", ",", "save_filename", ")", "\n", "", "elif", "self", ".", "sup_loss_type", "==", "'sat'", ":", "\n", "            ", "torch", ".", "save", "(", "{", "'train_model'", ":", "train_model", ".", "state_dict", "(", ")", ",", "\n", "'eval_model'", ":", "eval_model", ".", "state_dict", "(", ")", ",", "\n", "'sup_loss_fn'", ":", "self", ".", "sup_loss_fn", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'it'", ":", "self", ".", "it", "}", ",", "save_filename", ")", "\n", "\n", "", "self", ".", "print_fn", "(", "f\"model saved: {save_filename}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.FixMatch.load_model": [[323, 344], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "hasattr", "hasattr", "hasattr", "fixmatch_robust.FixMatch.print_fn", "fixmatch_robust.FixMatch.print_fn", "getattr", "train_model.load_state_dict", "eval_model.load_state_dict", "fixmatch_robust.FixMatch.sup_loss_fn.load_state_dict", "getattr().load_state_dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "\n", "for", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "key", ")", "and", "getattr", "(", "self", ",", "key", ")", "is", "not", "None", ":", "\n", "                ", "if", "'train_model'", "in", "key", ":", "\n", "                    ", "train_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "'eval_model'", "in", "key", ":", "\n", "                    ", "eval_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "'sup_loss_fn'", "in", "key", ":", "\n", "                    ", "self", ".", "sup_loss_fn", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'it'", ":", "\n", "                    ", "self", ".", "it", "=", "checkpoint", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ",", "key", ")", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is LOADED\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is **NOT** LOADED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_robust.calculate_acc": [[17, 58], ["numpy.unique", "numpy.unique", "len", "numpy.zeros", "range", "numpy.amax", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "len", "numpy.unique", "range", "numpy.logical_and", "numpy.count_nonzero", "numpy.unique", "numpy.unique", "numpy.logical_and", "numpy.count_nonzero", "len", "len"], "function", ["None"], ["def", "calculate_acc", "(", "ypred", ",", "y", ",", "return_idx", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculating the clustering accuracy. The predicted result must have the same number of clusters as the ground truth.\n\n    ypred: 1-D numpy vector, predicted labels\n    y: 1-D numpy vector, ground truth\n    The problem of finding the best permutation to calculate the clustering accuracy is a linear assignment problem.\n    This function construct a N-by-N cost matrix, then pass it to scipy.optimize.linear_sum_assignment to solve the assignment problem.\n\n    \"\"\"", "\n", "assert", "len", "(", "y", ")", ">", "0", "\n", "assert", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "==", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "\n", "s", "=", "np", ".", "unique", "(", "ypred", ")", "\n", "t", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "N", "=", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "i", "]", ",", "y", "==", "t", "[", "j", "]", ")", "\n", "C", "[", "i", "]", "[", "j", "]", "=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "# convert the C matrix to the 'true' cost", "\n", "", "", "Cmax", "=", "np", ".", "amax", "(", "C", ")", "\n", "C", "=", "Cmax", "-", "C", "\n", "#", "\n", "# indices = linear_sum_assignment(C)", "\n", "# row = indices[:][:, 0]", "\n", "# col = indices[:][:, 1]", "\n", "row", ",", "col", "=", "linear_sum_assignment", "(", "C", ")", "\n", "# calculating the accuracy according to the optimal assignment", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "row", "[", "i", "]", "]", ",", "y", "==", "t", "[", "col", "[", "i", "]", "]", ")", "\n", "count", "+=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "", "if", "return_idx", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", ",", "row", ",", "col", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.__init__": [[17, 68], ["super().__init__", "net_builder", "net_builder", "fixmatch_utils.Get_Scalar", "fixmatch_utils.Get_Scalar", "zip", "fixmatch.FixMatch.eval_model.eval", "fixmatch.FixMatch.train_model.parameters", "fixmatch.FixMatch.eval_model.parameters", "param_k.data.copy_", "param_q.detach"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "num_classes", ",", "ema_m", ",", "T", ",", "p_cutoff", ",", "lambda_u", ",", "hard_label", "=", "True", ",", "t_fn", "=", "None", ",", "p_fn", "=", "None", ",", "it", "=", "0", ",", "num_eval_iter", "=", "1000", ",", "tb_log", "=", "None", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class Fixmatch contains setter of data_loader, optimizer, and model update methods.\n        Args:\n            net_builder: backbone network class (see net_builder in utils.py)\n            num_classes: # of label classes \n            ema_m: momentum of exponential moving average for eval_model\n            T: Temperature scaling parameter for output sharpening (only when hard_label = False)\n            p_cutoff: confidence cutoff parameters for loss masking\n            lambda_u: ratio of unsupervised loss to supervised loss\n            hard_label: If True, consistency regularization use a hard pseudo label.\n            it: initial iteration count\n            num_eval_iter: freqeuncy of iteration (after 500,000 iters)\n            tb_log: tensorboard writer (see train_utils.py)\n            logger: logger (see utils.py)\n        \"\"\"", "\n", "\n", "super", "(", "FixMatch", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# momentum update param", "\n", "self", ".", "loader", "=", "{", "}", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "ema_m", "=", "ema_m", "\n", "\n", "# create the encoders", "\n", "# network is builded only by num_classes,", "\n", "# other configs are covered in main.py", "\n", "\n", "self", ".", "train_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "eval_model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "num_eval_iter", "=", "num_eval_iter", "\n", "self", ".", "t_fn", "=", "Get_Scalar", "(", "T", ")", "#temperature params function", "\n", "self", ".", "p_fn", "=", "Get_Scalar", "(", "p_cutoff", ")", "#confidence cutoff function", "\n", "self", ".", "lambda_u", "=", "lambda_u", "\n", "self", ".", "tb_log", "=", "tb_log", "\n", "self", ".", "use_hard_label", "=", "hard_label", "\n", "\n", "self", ".", "optimizer", "=", "None", "\n", "self", ".", "scheduler", "=", "None", "\n", "\n", "self", ".", "it", "=", "0", "\n", "\n", "self", ".", "logger", "=", "logger", "\n", "self", ".", "print_fn", "=", "print", "if", "logger", "is", "None", "else", "logger", ".", "info", "\n", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "train_model", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "detach", "(", ")", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient for eval_net", "\n", "\n", "", "self", ".", "eval_model", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update": [[70, 80], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "zip", "fixmatch.FixMatch.train_model.module.parameters", "fixmatch.FixMatch.eval_model.parameters", "param_eval.copy_", "fixmatch.FixMatch.train_model.buffers", "fixmatch.FixMatch.eval_model.buffers", "buffer_eval.copy_", "param_train.detach"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_eval_model_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of evaluation model (exponential moving average)\n        \"\"\"", "\n", "for", "param_train", ",", "param_eval", "in", "zip", "(", "self", ".", "train_model", ".", "module", ".", "parameters", "(", ")", ",", "self", ".", "eval_model", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_eval", ".", "copy_", "(", "param_eval", "*", "self", ".", "ema_m", "+", "param_train", ".", "detach", "(", ")", "*", "(", "1", "-", "self", ".", "ema_m", ")", ")", "\n", "\n", "", "for", "buffer_train", ",", "buffer_eval", "in", "zip", "(", "self", ".", "train_model", ".", "buffers", "(", ")", ",", "self", ".", "eval_model", ".", "buffers", "(", ")", ")", ":", "\n", "            ", "buffer_eval", ".", "copy_", "(", "buffer_train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.set_data_loader": [[82, 85], ["fixmatch.FixMatch.print_fn", "fixmatch.FixMatch.loader_dict.keys"], "methods", ["None"], ["", "", "def", "set_data_loader", "(", "self", ",", "loader_dict", ")", ":", "\n", "        ", "self", ".", "loader_dict", "=", "loader_dict", "\n", "self", ".", "print_fn", "(", "f'[!] data loader keys: {self.loader_dict.keys()}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.set_optimizer": [[87, 90], ["None"], "methods", ["None"], ["", "def", "set_optimizer", "(", "self", ",", "optimizer", ",", "scheduler", "=", "None", ")", ":", "\n", "        ", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train": [[92, 217], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "fixmatch.FixMatch.train_model.train", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "torch.cuda.amp.GradScaler", "zip", "fixmatch.FixMatch.evaluate", "fixmatch.FixMatch.update", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "y_lb.cuda.cuda.cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fixmatch.FixMatch.scheduler.step", "fixmatch.FixMatch.train_model.zero_grad", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.synchronize", "train_utils.ce_loss.detach", "unsup_loss.detach", "total_loss.detach", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.Event.record", "x_lb.cuda", "x_ulb_w.cuda", "x_ulb_s.cuda", "amp_cm", "fixmatch.FixMatch.train_model", "logits[].chunk", "fixmatch.FixMatch.t_fn", "fixmatch.FixMatch.p_fn", "train_utils.ce_loss", "fixmatch_utils.consistency_loss", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "torch.cuda.amp.GradScaler.update", "total_loss.backward", "fixmatch.FixMatch.optimizer.step", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "fixmatch.FixMatch._eval_model_update", "mask.detach", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "torch.cuda.Event.elapsed_time", "fixmatch.FixMatch.evaluate", "tb_dict.update", "os.path.join", "fixmatch.FixMatch.print_fn", "fixmatch.FixMatch.save_model", "fixmatch.FixMatch.save_model", "fixmatch.FixMatch.save_model", "fixmatch.FixMatch.tb_log.update", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "torch.cuda.amp.GradScaler.scale", "hasattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.train_utils.ce_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch_utils.consistency_loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch._eval_model_update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "def", "train", "(", "self", ",", "args", ",", "logger", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Train function of FixMatch.\n        From data_loader, it inference training data, computes losses, and update the networks.\n        \"\"\"", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "\n", "#lb: labeled, ulb: unlabeled", "\n", "self", ".", "train_model", ".", "train", "(", ")", "\n", "\n", "# for gpu profiling", "\n", "start_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_batch", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end_run", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "\n", "start_batch", ".", "record", "(", ")", "\n", "best_eval_acc", ",", "best_it", "=", "0.0", ",", "0", "\n", "\n", "scaler", "=", "GradScaler", "(", ")", "\n", "amp_cm", "=", "autocast", "if", "args", ".", "amp", "else", "contextlib", ".", "nullcontext", "\n", "\n", "for", "(", "x_lb", ",", "y_lb", ")", ",", "(", "x_ulb_w", ",", "x_ulb_s", ",", "_", ")", "in", "zip", "(", "self", ".", "loader_dict", "[", "'train_lb'", "]", ",", "self", ".", "loader_dict", "[", "'train_ulb'", "]", ")", ":", "\n", "\n", "# prevent the training iterations exceed args.num_train_iter", "\n", "            ", "if", "self", ".", "it", ">", "args", ".", "num_train_iter", ":", "\n", "                ", "break", "\n", "\n", "", "end_batch", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "start_run", ".", "record", "(", ")", "\n", "\n", "num_lb", "=", "x_lb", ".", "shape", "[", "0", "]", "\n", "num_ulb", "=", "x_ulb_w", ".", "shape", "[", "0", "]", "\n", "assert", "num_ulb", "==", "x_ulb_s", ".", "shape", "[", "0", "]", "\n", "\n", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", "=", "x_lb", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_w", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "x_ulb_s", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "y_lb", "=", "y_lb", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "inputs", "=", "torch", ".", "cat", "(", "(", "x_lb", ",", "x_ulb_w", ",", "x_ulb_s", ")", ")", "\n", "\n", "# inference and calculate sup/unsup losses", "\n", "with", "amp_cm", "(", ")", ":", "\n", "                ", "logits", "=", "self", ".", "train_model", "(", "inputs", ")", "\n", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "# hyper-params for update", "\n", "T", "=", "self", ".", "t_fn", "(", "self", ".", "it", ")", "\n", "p_cutoff", "=", "self", ".", "p_fn", "(", "self", ".", "it", ")", "\n", "\n", "sup_loss", "=", "ce_loss", "(", "logits_x_lb", ",", "y_lb", ",", "reduction", "=", "'mean'", ")", "\n", "unsup_loss", ",", "mask", "=", "consistency_loss", "(", "logits_x_ulb_w", ",", "\n", "logits_x_ulb_s", ",", "\n", "'ce'", ",", "T", ",", "p_cutoff", ",", "\n", "use_hard_labels", "=", "args", ".", "hard_label", ")", "\n", "\n", "total_loss", "=", "sup_loss", "+", "self", ".", "lambda_u", "*", "unsup_loss", "\n", "\n", "# parameter updates", "\n", "", "if", "args", ".", "amp", ":", "\n", "                ", "scaler", ".", "scale", "(", "total_loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "", "else", ":", "\n", "                ", "total_loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "self", ".", "scheduler", ".", "step", "(", ")", "\n", "self", ".", "train_model", ".", "zero_grad", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "_eval_model_update", "(", ")", "\n", "\n", "", "end_run", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "\n", "#tensorboard_dict update", "\n", "tb_dict", "=", "{", "}", "\n", "tb_dict", "[", "'train/sup_loss'", "]", "=", "sup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/unsup_loss'", "]", "=", "unsup_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/total_loss'", "]", "=", "total_loss", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'train/mask_ratio'", "]", "=", "1.0", "-", "mask", ".", "detach", "(", ")", "\n", "tb_dict", "[", "'lr'", "]", "=", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "tb_dict", "[", "'train/prefecth_time'", "]", "=", "start_batch", ".", "elapsed_time", "(", "end_batch", ")", "/", "1000.", "\n", "tb_dict", "[", "'train/run_time'", "]", "=", "start_run", ".", "elapsed_time", "(", "end_run", ")", "/", "1000.", "\n", "\n", "\n", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                ", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "tb_dict", ".", "update", "(", "eval_dict", ")", "\n", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "args", ".", "save_name", ")", "\n", "\n", "if", "tb_dict", "[", "'eval/top-1-acc'", "]", ">", "best_eval_acc", ":", "\n", "                    ", "best_eval_acc", "=", "tb_dict", "[", "'eval/top-1-acc'", "]", "\n", "best_it", "=", "self", ".", "it", "\n", "\n", "", "self", ".", "print_fn", "(", "f\"{self.it} iteration, USE_EMA: {hasattr(self, 'eval_model')}, {tb_dict}, BEST_EVAL_ACC: {best_eval_acc}, at {best_it} iters\"", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "\n", "                ", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_last.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "%", "self", ".", "num_eval_iter", "==", "0", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_{}.pth'", ".", "format", "(", "self", ".", "it", ")", ",", "save_path", ")", "\n", "\n", "", "if", "self", ".", "it", "==", "best_it", ":", "\n", "                    ", "self", ".", "save_model", "(", "'model_best.pth'", ",", "save_path", ")", "\n", "\n", "", "if", "not", "self", ".", "tb_log", "is", "None", ":", "\n", "                    ", "self", ".", "tb_log", ".", "update", "(", "tb_dict", ",", "self", ".", "it", ")", "\n", "\n", "", "", "self", ".", "it", "+=", "1", "\n", "del", "tb_dict", "\n", "start_batch", ".", "record", "(", ")", "\n", "if", "self", ".", "it", ">", "2", "**", "19", ":", "\n", "                ", "self", ".", "num_eval_iter", "=", "1000", "\n", "\n", "", "", "eval_dict", "=", "self", ".", "evaluate", "(", "args", "=", "args", ")", "\n", "eval_dict", ".", "update", "(", "{", "'eval/best_acc'", ":", "best_eval_acc", ",", "'eval/best_it'", ":", "best_it", "}", ")", "\n", "return", "eval_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.evaluate": [[219, 246], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "eval_model.eval", "eval_model", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.detach", "torch.sum.detach", "torch.sum.detach", "eval_model.train", "x.cuda", "y.cuda", "torch.cross_entropy.detach", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.train"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "evaluate", "(", "self", ",", "eval_loader", "=", "None", ",", "args", "=", "None", ")", ":", "\n", "        ", "use_ema", "=", "hasattr", "(", "self", ",", "'eval_model'", ")", "\n", "\n", "eval_model", "=", "self", ".", "eval_model", "if", "use_ema", "else", "self", ".", "train_model", "\n", "eval_model", ".", "eval", "(", ")", "\n", "if", "eval_loader", "is", "None", ":", "\n", "            ", "eval_loader", "=", "self", ".", "loader_dict", "[", "'eval'", "]", "\n", "\n", "", "total_loss", "=", "0.0", "\n", "total_acc", "=", "0.0", "\n", "total_num", "=", "0.0", "\n", "for", "x", ",", "y", "in", "eval_loader", ":", "\n", "            ", "x", ",", "y", "=", "x", ".", "cuda", "(", "args", ".", "gpu", ")", ",", "y", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "num_batch", "=", "x", ".", "shape", "[", "0", "]", "\n", "total_num", "+=", "num_batch", "\n", "logits", "=", "eval_model", "(", "x", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "logits", ",", "y", ",", "reduction", "=", "'mean'", ")", "\n", "acc", "=", "torch", ".", "sum", "(", "torch", ".", "max", "(", "logits", ",", "dim", "=", "-", "1", ")", "[", "1", "]", "==", "y", ")", "\n", "\n", "total_loss", "+=", "loss", ".", "detach", "(", ")", "*", "num_batch", "\n", "total_acc", "+=", "acc", ".", "detach", "(", ")", "\n", "\n", "", "if", "not", "use_ema", ":", "\n", "            ", "eval_model", ".", "train", "(", ")", "\n", "\n", "", "return", "{", "'eval/loss'", ":", "total_loss", "/", "total_num", ",", "'eval/top-1-acc'", ":", "total_acc", "/", "total_num", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.save_model": [[248, 259], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "fixmatch.FixMatch.print_fn", "hasattr", "hasattr", "train_model.state_dict", "eval_model.state_dict", "fixmatch.FixMatch.optimizer.state_dict", "fixmatch.FixMatch.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save"], ["", "def", "save_model", "(", "self", ",", "save_name", ",", "save_path", ")", ":", "\n", "        ", "save_filename", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "save_name", ")", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "torch", ".", "save", "(", "{", "'train_model'", ":", "train_model", ".", "state_dict", "(", ")", ",", "\n", "'eval_model'", ":", "eval_model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'scheduler'", ":", "self", ".", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'it'", ":", "self", ".", "it", "}", ",", "save_filename", ")", "\n", "\n", "self", ".", "print_fn", "(", "f\"model saved: {save_filename}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.fixmatch.FixMatch.load_model": [[261, 280], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.keys", "torch.load.keys", "torch.load.keys", "hasattr", "hasattr", "hasattr", "fixmatch.FixMatch.print_fn", "fixmatch.FixMatch.print_fn", "getattr", "train_model.load_state_dict", "eval_model.load_state_dict", "getattr().load_state_dict", "getattr"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "checkpoint", "=", "torch", ".", "load", "(", "load_path", ")", "\n", "\n", "train_model", "=", "self", ".", "train_model", ".", "module", "if", "hasattr", "(", "self", ".", "train_model", ",", "'module'", ")", "else", "self", ".", "train_model", "\n", "eval_model", "=", "self", ".", "eval_model", ".", "module", "if", "hasattr", "(", "self", ".", "eval_model", ",", "'module'", ")", "else", "self", ".", "eval_model", "\n", "\n", "for", "key", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "key", ")", "and", "getattr", "(", "self", ",", "key", ")", "is", "not", "None", ":", "\n", "                ", "if", "'train_model'", "in", "key", ":", "\n", "                    ", "train_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "'eval_model'", "in", "key", ":", "\n", "                    ", "eval_model", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "elif", "key", "==", "'it'", ":", "\n", "                    ", "self", ".", "it", "=", "checkpoint", "[", "key", "]", "\n", "", "else", ":", "\n", "                    ", "getattr", "(", "self", ",", "key", ")", ".", "load_state_dict", "(", "checkpoint", "[", "key", "]", ")", "\n", "", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is LOADED\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "print_fn", "(", "f\"Check Point Loading: {key} is **NOT** LOADED\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10.__init__": [[55, 99], ["torchvision.datasets.vision.VisionDataset.__init__", "numpy.vstack().reshape", "cifar.CIFAR10.data.transpose", "cifar.CIFAR10._load_meta", "cifar.CIFAR10.download", "cifar.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "cifar.CIFAR10.data.append", "numpy.vstack", "pickle.load", "pickle.load", "cifar.CIFAR10.targets.extend", "cifar.CIFAR10.targets.extend"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._load_meta", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["def", "__init__", "(", "self", ",", "root", ",", "all", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "if", "all", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "+", "self", ".", "test_list", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10._load_meta": [[100, 112], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10.__getitem__": [[113, 134], ["PIL.Image.fromarray", "cifar.CIFAR10.transform", "cifar.CIFAR10.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10.__len__": [[135, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10._check_integrity": [[138, 146], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10.download": [[147, 152], ["cifar.CIFAR10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR10.extra_repr": [[153, 155], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Split: {}\"", ".", "format", "(", "\"Train\"", "if", "self", ".", "train", "is", "True", "else", "\"Test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar.CIFAR20.__init__": [[202, 210], ["cifar.CIFAR10.__init__", "enumerate", "cifar._cifar100_to_cifar20"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar._cifar100_to_cifar20"], ["def", "__init__", "(", "self", ",", "root", ",", "all", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ")", ":", "\n", "        ", "super", "(", "CIFAR20", ",", "self", ")", ".", "__init__", "(", "root", ",", "all", ",", "train", ",", "transform", ",", "target_transform", ")", "\n", "# Remap classes from cifar-100 to cifar-20", "\n", "new_", "=", "self", ".", "targets", "\n", "for", "idx", ",", "target", "in", "enumerate", "(", "self", ".", "targets", ")", ":", "\n", "            ", "new_", "[", "idx", "]", "=", "_cifar100_to_cifar20", "(", "target", ")", "\n", "", "self", ".", "targets", "=", "new_", "\n", "self", ".", "classes", "=", "[", "'aquatic mammals'", ",", "'fish'", ",", "'flowers'", ",", "'food containers'", ",", "'fruit and vegetables'", ",", "'household electrical devices'", ",", "'househould furniture'", ",", "'insects'", ",", "'large carnivores'", ",", "'large man-made outdoor things'", ",", "'large natural outdoor scenes'", ",", "'large omnivores and herbivores'", ",", "'medium-sized mammals'", ",", "'non-insect invertebrates'", ",", "'people'", ",", "'reptiles'", ",", "'small mammals'", ",", "'trees'", ",", "'vehicles 1'", ",", "'vehicles 2'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.cifar._cifar100_to_cifar20": [[212, 316], ["None"], "function", ["None"], ["", "", "def", "_cifar100_to_cifar20", "(", "target", ")", ":", "\n", "  ", "_dict", "=", "{", "0", ":", "4", ",", "\n", "1", ":", "1", ",", "\n", "2", ":", "14", ",", "\n", "3", ":", "8", ",", "\n", "4", ":", "0", ",", "\n", "5", ":", "6", ",", "\n", "6", ":", "7", ",", "\n", "7", ":", "7", ",", "\n", "8", ":", "18", ",", "\n", "9", ":", "3", ",", "\n", "10", ":", "3", ",", "\n", "11", ":", "14", ",", "\n", "12", ":", "9", ",", "\n", "13", ":", "18", ",", "\n", "14", ":", "7", ",", "\n", "15", ":", "11", ",", "\n", "16", ":", "3", ",", "\n", "17", ":", "9", ",", "\n", "18", ":", "7", ",", "\n", "19", ":", "11", ",", "\n", "20", ":", "6", ",", "\n", "21", ":", "11", ",", "\n", "22", ":", "5", ",", "\n", "23", ":", "10", ",", "\n", "24", ":", "7", ",", "\n", "25", ":", "6", ",", "\n", "26", ":", "13", ",", "\n", "27", ":", "15", ",", "\n", "28", ":", "3", ",", "\n", "29", ":", "15", ",", "\n", "30", ":", "0", ",", "\n", "31", ":", "11", ",", "\n", "32", ":", "1", ",", "\n", "33", ":", "10", ",", "\n", "34", ":", "12", ",", "\n", "35", ":", "14", ",", "\n", "36", ":", "16", ",", "\n", "37", ":", "9", ",", "\n", "38", ":", "11", ",", "\n", "39", ":", "5", ",", "\n", "40", ":", "5", ",", "\n", "41", ":", "19", ",", "\n", "42", ":", "8", ",", "\n", "43", ":", "8", ",", "\n", "44", ":", "15", ",", "\n", "45", ":", "13", ",", "\n", "46", ":", "14", ",", "\n", "47", ":", "17", ",", "\n", "48", ":", "18", ",", "\n", "49", ":", "10", ",", "\n", "50", ":", "16", ",", "\n", "51", ":", "4", ",", "\n", "52", ":", "17", ",", "\n", "53", ":", "4", ",", "\n", "54", ":", "2", ",", "\n", "55", ":", "0", ",", "\n", "56", ":", "17", ",", "\n", "57", ":", "4", ",", "\n", "58", ":", "18", ",", "\n", "59", ":", "17", ",", "\n", "60", ":", "10", ",", "\n", "61", ":", "3", ",", "\n", "62", ":", "2", ",", "\n", "63", ":", "12", ",", "\n", "64", ":", "12", ",", "\n", "65", ":", "16", ",", "\n", "66", ":", "12", ",", "\n", "67", ":", "1", ",", "\n", "68", ":", "9", ",", "\n", "69", ":", "19", ",", "\n", "70", ":", "2", ",", "\n", "71", ":", "10", ",", "\n", "72", ":", "0", ",", "\n", "73", ":", "1", ",", "\n", "74", ":", "16", ",", "\n", "75", ":", "12", ",", "\n", "76", ":", "9", ",", "\n", "77", ":", "13", ",", "\n", "78", ":", "15", ",", "\n", "79", ":", "13", ",", "\n", "80", ":", "16", ",", "\n", "81", ":", "19", ",", "\n", "82", ":", "2", ",", "\n", "83", ":", "4", ",", "\n", "84", ":", "6", ",", "\n", "85", ":", "19", ",", "\n", "86", ":", "5", ",", "\n", "87", ":", "5", ",", "\n", "88", ":", "8", ",", "\n", "89", ":", "19", ",", "\n", "90", ":", "18", ",", "\n", "91", ":", "1", ",", "\n", "92", ":", "2", ",", "\n", "93", ":", "15", ",", "\n", "94", ":", "6", ",", "\n", "95", ":", "0", ",", "\n", "96", ":", "17", ",", "\n", "97", ":", "8", ",", "\n", "98", ":", "14", ",", "\n", "99", ":", "13", "}", "\n", "\n", "return", "_dict", "[", "target", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.__init__": [[49, 118], ["torchvision.datasets.vision.VisionDataset.__init__", "torchvision.datasets.utils.verify_str_arg", "stl10.STL10._verify_folds", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "stl10.STL10.download", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10._check_integrity", "RuntimeError", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "open", "f.read().splitlines", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "f.read", "numpy.asarray", "stl10.STL10.__loadfile", "numpy.asarray", "stl10.STL10.__loadfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10._verify_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "split", ":", "str", "=", "\"train\"", ",", "\n", "folds", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "STL10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "self", ".", "splits", ")", "\n", "self", ".", "folds", "=", "self", ".", "_verify_folds", "(", "folds", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "elif", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found or corrupted. '", "\n", "'You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "self", ".", "labels", ":", "np", ".", "ndarray", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'train+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ")", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "# self.split == 'test':", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "targets", "=", "self", ".", "labels", "\n", "\n", "class_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "class_names_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "class_file", ")", ":", "\n", "            ", "with", "open", "(", "class_file", ")", "as", "f", ":", "\n", "                ", "self", ".", "classes", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10._verify_folds": [[119, 131], ["isinstance", "ValueError", "ValueError", "range", "msg.format", "msg.format", "type"], "methods", ["None"], ["", "", "", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.__getitem__": [[132, 157], ["PIL.Image.fromarray", "numpy.transpose", "stl10.STL10.transform", "stl10.STL10.target_transform", "int"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.__len__": [[158, 160], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.__loadfile": [[161, 177], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromfile", "numpy.reshape", "numpy.transpose", "open", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile"], ["", "def", "__loadfile", "(", "self", ",", "data_file", ":", "str", ",", "labels_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10._check_integrity": [[178, 186], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.download": [[187, 193], ["stl10.STL10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "stl10.STL10._check_integrity", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["", "def", "download", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "self", ".", "_check_integrity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.extra_repr": [[194, 196], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.stl10.STL10.__load_folds": [[197, 207], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromstring", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "__load_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "None", ":", "\n", "# loads one of the folds if specified", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "\n", "", "path_to_folds", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "folds_list_file", ")", "\n", "with", "open", "(", "path_to_folds", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "str_idx", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "folds", "]", "\n", "list_idx", "=", "np", ".", "fromstring", "(", "str_idx", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "' '", ")", "\n", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "data", "[", "list_idx", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "labels", "[", "list_idx", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.split_ssl_data": [[12, 27], ["data_utils.sample_labeled_data", "numpy.array", "numpy.array", "numpy.array", "sorted", "list", "set", "set", "range", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.sample_labeled_data"], ["def", "split_ssl_data", "(", "data", ",", "target", ",", "num_labels", ",", "num_classes", ",", "index", "=", "None", ",", "include_lb_to_ulb", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    data & target is splitted into labeled and unlabeld data.\n    \n    Args\n        index: If np.array of index is given, select the data[index], target[index] as labeled samples.\n        include_lb_to_ulb: If True, labeled data is also included in unlabeld data\n    \"\"\"", "\n", "data", ",", "target", "=", "np", ".", "array", "(", "data", ")", ",", "np", ".", "array", "(", "target", ")", "\n", "lb_data", ",", "lbs", ",", "lb_idx", "=", "sample_labeled_data", "(", "data", ",", "target", ",", "num_labels", ",", "num_classes", ",", "index", ")", "\n", "ulb_idx", "=", "np", ".", "array", "(", "sorted", "(", "list", "(", "set", "(", "range", "(", "len", "(", "data", ")", ")", ")", "-", "set", "(", "lb_idx", ")", ")", ")", ")", "#unlabeled_data index of data", "\n", "if", "include_lb_to_ulb", ":", "\n", "        ", "return", "lb_data", ",", "lbs", ",", "data", ",", "target", "\n", "", "else", ":", "\n", "        ", "return", "lb_data", ",", "lbs", ",", "data", "[", "ulb_idx", "]", ",", "target", "[", "ulb_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.sample_labeled_data": [[29, 56], ["int", "range", "numpy.array", "numpy.random.choice", "lb_idx.extend", "lb_data.extend", "lbs.extend", "numpy.array", "numpy.array", "numpy.array", "numpy.where"], "function", ["None"], ["", "", "def", "sample_labeled_data", "(", "data", ",", "target", ",", "\n", "num_labels", ",", "\n", "num_classes", ",", "\n", "index", "=", "None", ")", ":", "\n", "    ", "'''\n    samples for labeled data\n    (sampling with balanced ratio over classes)\n    '''", "\n", "assert", "num_labels", "%", "num_classes", "==", "0", "\n", "if", "not", "index", "is", "None", ":", "\n", "        ", "index", "=", "np", ".", "array", "(", "index", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "return", "data", "[", "index", "]", ",", "target", "[", "index", "]", ",", "index", "\n", "\n", "", "samples_per_class", "=", "int", "(", "num_labels", "/", "num_classes", ")", "\n", "\n", "lb_data", "=", "[", "]", "\n", "lbs", "=", "[", "]", "\n", "lb_idx", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "num_classes", ")", ":", "\n", "        ", "idx", "=", "np", ".", "where", "(", "target", "==", "c", ")", "[", "0", "]", "\n", "idx", "=", "np", ".", "random", ".", "choice", "(", "idx", ",", "samples_per_class", ",", "False", ")", "\n", "lb_idx", ".", "extend", "(", "idx", ")", "\n", "\n", "lb_data", ".", "extend", "(", "data", "[", "idx", "]", ")", "\n", "lbs", ".", "extend", "(", "target", "[", "idx", "]", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "lb_data", ")", ",", "np", ".", "array", "(", "lbs", ")", ",", "np", ".", "array", "(", "lb_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_sampler_by_name": [[58, 72], ["sorted", "getattr", "print", "print", "repr", "callable", "name.startswith"], "function", ["None"], ["", "def", "get_sampler_by_name", "(", "name", ")", ":", "\n", "    ", "'''\n    get sampler in torch.utils.data.sampler by name\n    '''", "\n", "sampler_name_list", "=", "sorted", "(", "name", "for", "name", "in", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "__dict__", "\n", "if", "not", "name", ".", "startswith", "(", "'_'", ")", "and", "callable", "(", "sampler", ".", "__dict__", "[", "name", "]", ")", ")", "\n", "try", ":", "\n", "        ", "if", "name", "==", "'DistributedSampler'", ":", "\n", "            ", "return", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "\n", "", "else", ":", "\n", "            ", "return", "getattr", "(", "torch", ".", "utils", ".", "data", ".", "sampler", ",", "name", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "repr", "(", "e", ")", ")", "\n", "print", "(", "'[!] select sampler in:\\t'", ",", "sampler_name_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_data_loader": [[74, 134], ["torch.utils.data.DataLoader", "isinstance", "torch.utils.data.sampler.BatchSampler", "torch.utils.data.DataLoader", "data_utils.get_sampler_by_name", "torch.is_available", "torch.get_world_size", "fixmatch.datasets.DistributedProxySampler.DistributedProxySampler.", "RuntimeError", "fixmatch.datasets.DistributedProxySampler.DistributedProxySampler", "len", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_sampler_by_name", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["", "", "def", "get_data_loader", "(", "dset", ",", "\n", "batch_size", "=", "None", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "4", ",", "\n", "pin_memory", "=", "True", ",", "\n", "data_sampler", "=", "None", ",", "\n", "replacement", "=", "True", ",", "\n", "num_epochs", "=", "None", ",", "\n", "num_iters", "=", "None", ",", "\n", "generator", "=", "None", ",", "\n", "drop_last", "=", "True", ",", "\n", "distributed", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    get_data_loader returns torch.utils.data.DataLoader for a Dataset.\n    All arguments are comparable with those of pytorch DataLoader.\n    However, if distributed, DistributedProxySampler, which is a wrapper of data_sampler, is used.\n    \n    Args\n        num_epochs: total batch -> (# of batches in dset) * num_epochs \n        num_iters: total batch -> num_iters\n    \"\"\"", "\n", "\n", "assert", "batch_size", "is", "not", "None", "\n", "\n", "if", "data_sampler", "is", "None", ":", "\n", "        ", "return", "DataLoader", "(", "dset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n", "", "else", ":", "\n", "        ", "if", "isinstance", "(", "data_sampler", ",", "str", ")", ":", "\n", "            ", "data_sampler", "=", "get_sampler_by_name", "(", "data_sampler", ")", "\n", "\n", "", "if", "distributed", ":", "\n", "            ", "assert", "dist", ".", "is_available", "(", ")", "\n", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "num_replicas", "=", "1", "\n", "\n", "", "if", "(", "num_epochs", "is", "not", "None", ")", "and", "(", "num_iters", "is", "None", ")", ":", "\n", "            ", "num_samples", "=", "len", "(", "dset", ")", "*", "num_epochs", "\n", "", "elif", "(", "num_epochs", "is", "None", ")", "and", "(", "num_iters", "is", "not", "None", ")", ":", "\n", "            ", "num_samples", "=", "batch_size", "*", "num_iters", "*", "num_replicas", "\n", "", "else", ":", "\n", "            ", "num_samples", "=", "len", "(", "dset", ")", "\n", "\n", "", "if", "data_sampler", ".", "__name__", "==", "'RandomSampler'", ":", "\n", "            ", "data_sampler", "=", "data_sampler", "(", "dset", ",", "replacement", ",", "num_samples", ",", "generator", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"{data_sampler.__name__} is not implemented.\"", ")", "\n", "\n", "", "if", "distributed", ":", "\n", "            ", "'''\n            Different with DistributedSampler, \n            the DistribuedProxySampler does not shuffle the data (just wrapper for dist).\n            '''", "\n", "data_sampler", "=", "DistributedProxySampler", "(", "data_sampler", ")", "\n", "\n", "", "batch_sampler", "=", "BatchSampler", "(", "data_sampler", ",", "batch_size", ",", "drop_last", ")", "\n", "return", "DataLoader", "(", "dset", ",", "batch_sampler", "=", "batch_sampler", ",", "\n", "num_workers", "=", "num_workers", ",", "pin_memory", "=", "pin_memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_onehot": [[136, 140], ["numpy.zeros"], "function", ["None"], ["", "", "def", "get_onehot", "(", "num_classes", ",", "idx", ")", ":", "\n", "    ", "onehot", "=", "np", ".", "zeros", "(", "[", "num_classes", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "onehot", "[", "idx", "]", "+=", "1.0", "\n", "return", "onehot", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_robust.BasicDataset.__init__": [[18, 52], ["torch.utils.data.Dataset.__init__", "copy.deepcopy", "dataset_robust.BasicDataset.strong_transform.transforms.insert", "augmentation.randaugment.RandAugment"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data", ",", "\n", "targets", "=", "None", ",", "\n", "num_classes", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "use_strong_transform", "=", "False", ",", "\n", "strong_transform", "=", "None", ",", "\n", "onehot", "=", "False", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            data: x_data\n            targets: y_data (if not exist, None)\n            num_classes: number of label classes\n            transform: basic transformation of data\n            use_strong_transform: If True, this dataset returns both weakly and strongly augmented images.\n            strong_transform: list of transformation functions for strong augmentation\n            onehot: If True, label is converted into onehot vector.\n        \"\"\"", "\n", "super", "(", "BasicDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_strong_transform", "=", "use_strong_transform", "\n", "self", ".", "onehot", "=", "onehot", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "use_strong_transform", ":", "\n", "            ", "if", "strong_transform", "is", "None", ":", "\n", "                ", "self", ".", "strong_transform", "=", "copy", ".", "deepcopy", "(", "transform", ")", "\n", "self", ".", "strong_transform", ".", "transforms", ".", "insert", "(", "0", ",", "RandAugment", "(", "3", ",", "5", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "strong_transform", "=", "strong_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_robust.BasicDataset.__getitem__": [[54, 82], ["isinstance", "dataset_robust.BasicDataset.transform", "data_utils.get_onehot", "PIL.Image.fromarray", "torchvision.transforms.ToTensor", "dataset_robust.BasicDataset.strong_transform"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_onehot"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        If strong augmentation is not used,\n            return weak_augment_image, target\n        else:\n            return weak_augment_image, strong_augment_image, target\n        \"\"\"", "\n", "\n", "#set idx-th target", "\n", "if", "self", ".", "targets", "is", "None", ":", "\n", "            ", "target", "=", "None", "\n", "", "else", ":", "\n", "            ", "target_", "=", "self", ".", "targets", "[", "idx", "]", "\n", "target", "=", "target_", "if", "not", "self", ".", "onehot", "else", "get_onehot", "(", "self", ".", "num_classes", ",", "target_", ")", "\n", "\n", "#set augmented images", "\n", "\n", "", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "return", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", ",", "target", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "img_w", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "not", "self", ".", "use_strong_transform", ":", "\n", "                ", "return", "img_w", ",", "target", ",", "idx", "\n", "", "else", ":", "\n", "                ", "return", "img_w", ",", "self", ".", "strong_transform", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_robust.BasicDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset.BasicDataset.__init__": [[18, 52], ["torch.utils.data.Dataset.__init__", "copy.deepcopy", "dataset.BasicDataset.strong_transform.transforms.insert", "augmentation.randaugment.RandAugment"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data", ",", "\n", "targets", "=", "None", ",", "\n", "num_classes", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "use_strong_transform", "=", "False", ",", "\n", "strong_transform", "=", "None", ",", "\n", "onehot", "=", "False", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            data: x_data\n            targets: y_data (if not exist, None)\n            num_classes: number of label classes\n            transform: basic transformation of data\n            use_strong_transform: If True, this dataset returns both weakly and strongly augmented images.\n            strong_transform: list of transformation functions for strong augmentation\n            onehot: If True, label is converted into onehot vector.\n        \"\"\"", "\n", "super", "(", "BasicDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_strong_transform", "=", "use_strong_transform", "\n", "self", ".", "onehot", "=", "onehot", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "use_strong_transform", ":", "\n", "            ", "if", "strong_transform", "is", "None", ":", "\n", "                ", "self", ".", "strong_transform", "=", "copy", ".", "deepcopy", "(", "transform", ")", "\n", "self", ".", "strong_transform", ".", "transforms", ".", "insert", "(", "0", ",", "RandAugment", "(", "3", ",", "5", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "strong_transform", "=", "strong_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset.BasicDataset.__getitem__": [[54, 82], ["isinstance", "dataset.BasicDataset.transform", "data_utils.get_onehot", "PIL.Image.fromarray", "torchvision.transforms.ToTensor", "dataset.BasicDataset.strong_transform"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_onehot"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        If strong augmentation is not used,\n            return weak_augment_image, target\n        else:\n            return weak_augment_image, strong_augment_image, target\n        \"\"\"", "\n", "\n", "#set idx-th target", "\n", "if", "self", ".", "targets", "is", "None", ":", "\n", "            ", "target", "=", "None", "\n", "", "else", ":", "\n", "            ", "target_", "=", "self", ".", "targets", "[", "idx", "]", "\n", "target", "=", "target_", "if", "not", "self", ".", "onehot", "else", "get_onehot", "(", "self", ".", "num_classes", ",", "target_", ")", "\n", "\n", "#set augmented images", "\n", "\n", "", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "return", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", ",", "target", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "img_w", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "not", "self", ".", "use_strong_transform", ":", "\n", "                ", "return", "img_w", ",", "target", ",", "idx", "\n", "", "else", ":", "\n", "                ", "return", "img_w", ",", "self", ".", "strong_transform", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset.BasicDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset_robust.SSL_Dataset.__init__": [[56, 80], ["ssl_dataset_robust.get_transform"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.get_transform"], ["def", "__init__", "(", "self", ",", "\n", "name", "=", "'cifar10'", ",", "\n", "train", "=", "True", ",", "\n", "all", "=", "True", ",", "\n", "unlabeled", "=", "False", ",", "\n", "label_file", "=", "None", ",", "\n", "num_classes", "=", "10", ",", "\n", "data_dir", "=", "'./data'", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            name: name of dataset in torchvision.datasets (cifar10, cifar100)\n            train: True means the dataset is training dataset (default=True)\n            num_classes: number of label classes\n            data_dir: path of directory, where data is downloaed or stored.\n        \"\"\"", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "transform", "=", "get_transform", "(", "mean", "[", "name", "]", ",", "std", "[", "name", "]", ",", "self", ".", "name", ",", "train", ")", "\n", "self", ".", "label_file", "=", "label_file", "\n", "self", ".", "all", "=", "all", "\n", "self", ".", "unlabeled", "=", "unlabeled", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset_robust.SSL_Dataset.get_data": [[81, 125], ["cifar.CIFAR10", "numpy.load().astype", "numpy.zeros().astype", "len", "cifar.CIFAR20", "stl10.STL10", "npy.NPY.data.transpose", "numpy.load", "numpy.zeros", "npy.NPY"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get_data returns data (images) and targets (labels)\n        \"\"\"", "\n", "# dset = getattr(torchvision.datasets, self.name.upper())", "\n", "# dset = dset(self.data_dir, train=self.train, download=False)", "\n", "if", "self", ".", "name", "==", "\"cifar10\"", ":", "\n", "            ", "dset", "=", "CIFAR10", "(", "root", "=", "self", ".", "data_dir", ",", "all", "=", "self", ".", "all", ",", "train", "=", "self", ".", "train", ")", "\n", "data", "=", "dset", ".", "data", "\n", "", "elif", "self", ".", "name", "==", "\"cifar100\"", ":", "\n", "            ", "dset", "=", "CIFAR20", "(", "root", "=", "self", ".", "data_dir", ",", "all", "=", "self", ".", "all", ",", "train", "=", "self", ".", "train", ")", "\n", "data", "=", "dset", ".", "data", "\n", "", "elif", "self", ".", "name", "==", "\"stl10\"", ":", "\n", "            ", "if", "self", ".", "unlabeled", ":", "\n", "                ", "split", "=", "\"train+test+unlabeled\"", "\n", "", "elif", "self", ".", "all", ":", "\n", "                ", "split", "=", "\"train+test\"", "\n", "", "elif", "self", ".", "train", ":", "\n", "                ", "split", "=", "\"train\"", "\n", "", "else", ":", "\n", "                ", "split", "=", "'test'", "\n", "", "dset", "=", "STL10", "(", "root", "=", "self", ".", "data_dir", ",", "split", "=", "split", ")", "\n", "data", "=", "dset", ".", "data", ".", "transpose", "(", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "elif", "self", ".", "name", "==", "\"npy\"", "or", "self", ".", "name", "==", "'npy224'", ":", "\n", "            ", "dset", "=", "NPY", "(", "root", "=", "self", ".", "data_dir", ")", "\n", "data", "=", "dset", ".", "data", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "# data, targets = dset.data, dset.targets", "\n", "", "if", "self", ".", "label_file", "is", "not", "None", ":", "\n", "            ", "targets", "=", "np", ".", "load", "(", "self", ".", "label_file", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "", "else", ":", "\n", "            ", "targets", "=", "dset", ".", "targets", "\n", "\n", "", "if", "self", ".", "unlabeled", ":", "\n", "            ", "assert", "data", ".", "shape", "[", "0", "]", ">", "targets", ".", "shape", "[", "0", "]", "\n", "targets1", "=", "np", ".", "zeros", "(", "[", "data", ".", "shape", "[", "0", "]", ",", "]", ")", ".", "astype", "(", "np", ".", "long", ")", "\n", "targets1", "[", "0", ":", "targets", ".", "shape", "[", "0", "]", "]", "=", "targets", "\n", "targets1", "[", "targets", ".", "shape", "[", "0", "]", ":", ":", "]", "=", "-", "100", "\n", "targets", "=", "targets1", "\n", "\n", "", "assert", "data", ".", "shape", "[", "0", "]", "==", "len", "(", "targets", ")", "\n", "return", "data", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset_robust.SSL_Dataset.get_dset": [[127, 145], ["ssl_dataset_robust.SSL_Dataset.get_data", "dataset_robust.BasicDataset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_data"], ["", "def", "get_dset", "(", "self", ",", "use_strong_transform", "=", "False", ",", "\n", "strong_transform", "=", "None", ",", "onehot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        get_dset returns class BasicDataset, containing the returns of get_data.\n        \n        Args\n            use_strong_tranform: If True, returned dataset generates a pair of weak and strong augmented images.\n            strong_transform: list of strong_transform (augmentation) if use_strong_transform is True\n            onehot: If True, the label is not integer, but one-hot vector.\n        \"\"\"", "\n", "\n", "data", ",", "targets", "=", "self", ".", "get_data", "(", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "transform", "=", "self", ".", "transform", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "return", "BasicDataset", "(", "data", ",", "targets", ",", "num_classes", ",", "transform", ",", "\n", "use_strong_transform", ",", "strong_transform", ",", "onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset_robust.SSL_Dataset.get_ssl_dset": [[147, 185], ["ssl_dataset_robust.SSL_Dataset.get_data", "data_utils.split_ssl_data", "dataset_robust.BasicDataset", "dataset_robust.BasicDataset", "numpy.where"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_data", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.split_ssl_data"], ["", "def", "get_ssl_dset", "(", "self", ",", "num_labels", ",", "index", "=", "None", ",", "include_lb_to_ulb", "=", "True", ",", "\n", "use_strong_transform", "=", "True", ",", "strong_transform", "=", "None", ",", "\n", "onehot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        get_ssl_dset split training samples into labeled and unlabeled samples.\n        The labeled data is balanced samples over classes.\n        \n        Args:\n            num_labels: number of labeled data.\n            index: If index of np.array is given, labeled data is not randomly sampled, but use index for sampling.\n            include_lb_to_ulb: If True, consistency regularization is also computed for the labeled data.\n            use_strong_transform: If True, unlabeld dataset returns weak & strong augmented image pair. \n                                  If False, unlabeled datasets returns only weak augmented image.\n            strong_transform: list of strong transform (RandAugment in FixMatch)\n            oenhot: If True, the target is converted into onehot vector.\n            \n        Returns:\n            BasicDataset (for labeled data), BasicDataset (for unlabeld data)\n        \"\"\"", "\n", "\n", "data", ",", "targets", "=", "self", ".", "get_data", "(", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "transform", "=", "self", ".", "transform", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "index", "=", "np", ".", "where", "(", "targets", ">=", "0", ")", "[", "0", "]", "\n", "\n", "lb_data", ",", "lb_targets", ",", "ulb_data", ",", "ulb_targets", "=", "split_ssl_data", "(", "data", ",", "targets", ",", "\n", "num_labels", ",", "num_classes", ",", "\n", "index", ",", "include_lb_to_ulb", ")", "\n", "\n", "lb_dset", "=", "BasicDataset", "(", "lb_data", ",", "lb_targets", ",", "num_classes", ",", "\n", "transform", ",", "False", ",", "None", ",", "onehot", ")", "\n", "\n", "ulb_dset", "=", "BasicDataset", "(", "data", ",", "targets", ",", "num_classes", ",", "\n", "transform", ",", "use_strong_transform", ",", "strong_transform", ",", "onehot", ")", "\n", "\n", "return", "lb_dset", ",", "ulb_dset", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset_robust.get_transform": [[31, 48], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_transform", "(", "mean", ",", "std", ",", "dataset", ",", "train", "=", "True", ")", ":", "\n", "    ", "if", "dataset", "in", "[", "'cifar10'", ",", "'cifar20'", ",", "'cifar100'", "]", ":", "\n", "        ", "crop_size", "=", "32", "\n", "", "elif", "dataset", "in", "[", "'stl10'", ",", "'npy'", "]", ":", "\n", "        ", "crop_size", "=", "96", "\n", "", "elif", "dataset", "in", "[", "'npy224'", "]", ":", "\n", "        ", "crop_size", "=", "224", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "", "if", "train", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "crop_size", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.__init__": [[15, 29], ["torchvision.datasets.vision.VisionDataset.__init__", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "NPY", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "\n", "# now load the picked numpy arrays", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "\"{}/data.npy\"", ".", "format", "(", "root", ")", ")", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "\"{}/label.npy\"", ".", "format", "(", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY._verify_folds": [[30, 42], ["isinstance", "ValueError", "ValueError", "range", "msg.format", "msg.format", "type"], "methods", ["None"], ["", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.__getitem__": [[43, 68], ["PIL.Image.fromarray", "numpy.transpose", "npy.NPY.transform", "npy.NPY.target_transform", "int"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.__len__": [[69, 71], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.__loadfile": [[72, 88], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromfile", "numpy.reshape", "numpy.transpose", "open", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile"], ["", "def", "__loadfile", "(", "self", ",", "data_file", ":", "str", ",", "labels_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY._check_integrity": [[89, 97], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.download": [[98, 104], ["npy.NPY._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "npy.NPY._check_integrity", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["", "def", "download", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "self", ".", "_check_integrity", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.extra_repr": [[105, 107], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.npy.NPY.__load_folds": [[108, 118], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromstring", "f.read().splitlines", "f.read"], "methods", ["None"], ["", "def", "__load_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "None", ":", "\n", "# loads one of the folds if specified", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "\n", "", "path_to_folds", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "folds_list_file", ")", "\n", "with", "open", "(", "path_to_folds", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "str_idx", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "folds", "]", "\n", "list_idx", "=", "np", ".", "fromstring", "(", "str_idx", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "' '", ")", "\n", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "data", "[", "list_idx", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "labels", "[", "list_idx", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.__init__": [[39, 57], ["ssl_dataset.get_transform"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.get_transform"], ["def", "__init__", "(", "self", ",", "\n", "name", "=", "'cifar10'", ",", "\n", "train", "=", "True", ",", "\n", "num_classes", "=", "10", ",", "\n", "data_dir", "=", "'./data'", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            name: name of dataset in torchvision.datasets (cifar10, cifar100)\n            train: True means the dataset is training dataset (default=True)\n            num_classes: number of label classes\n            data_dir: path of directory, where data is downloaed or stored.\n        \"\"\"", "\n", "\n", "self", ".", "name", "=", "name", "\n", "self", ".", "train", "=", "train", "\n", "self", ".", "data_dir", "=", "data_dir", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "transform", "=", "get_transform", "(", "mean", "[", "name", "]", ",", "std", "[", "name", "]", ",", "train", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_data": [[58, 66], ["getattr", "dset.", "ssl_dataset.SSL_Dataset.name.upper"], "methods", ["None"], ["", "def", "get_data", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        get_data returns data (images) and targets (labels)\n        \"\"\"", "\n", "dset", "=", "getattr", "(", "torchvision", ".", "datasets", ",", "self", ".", "name", ".", "upper", "(", ")", ")", "\n", "dset", "=", "dset", "(", "self", ".", "data_dir", ",", "train", "=", "self", ".", "train", ",", "download", "=", "False", ")", "\n", "data", ",", "targets", "=", "dset", ".", "data", ",", "dset", ".", "targets", "\n", "return", "data", ",", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_dset": [[68, 86], ["ssl_dataset.SSL_Dataset.get_data", "dataset_ori.BasicDataset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_data"], ["", "def", "get_dset", "(", "self", ",", "use_strong_transform", "=", "False", ",", "\n", "strong_transform", "=", "None", ",", "onehot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        get_dset returns class BasicDataset, containing the returns of get_data.\n        \n        Args\n            use_strong_tranform: If True, returned dataset generates a pair of weak and strong augmented images.\n            strong_transform: list of strong_transform (augmentation) if use_strong_transform is True\n            onehot: If True, the label is not integer, but one-hot vector.\n        \"\"\"", "\n", "\n", "data", ",", "targets", "=", "self", ".", "get_data", "(", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "transform", "=", "self", ".", "transform", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "return", "BasicDataset", "(", "data", ",", "targets", ",", "num_classes", ",", "transform", ",", "\n", "use_strong_transform", ",", "strong_transform", ",", "onehot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_ssl_dset": [[88, 124], ["ssl_dataset.SSL_Dataset.get_data", "data_utils.split_ssl_data", "dataset_ori.BasicDataset", "dataset_ori.BasicDataset"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.SSL_Dataset.get_data", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.split_ssl_data"], ["", "def", "get_ssl_dset", "(", "self", ",", "num_labels", ",", "index", "=", "None", ",", "include_lb_to_ulb", "=", "True", ",", "\n", "use_strong_transform", "=", "True", ",", "strong_transform", "=", "None", ",", "\n", "onehot", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        get_ssl_dset split training samples into labeled and unlabeled samples.\n        The labeled data is balanced samples over classes.\n        \n        Args:\n            num_labels: number of labeled data.\n            index: If index of np.array is given, labeled data is not randomly sampled, but use index for sampling.\n            include_lb_to_ulb: If True, consistency regularization is also computed for the labeled data.\n            use_strong_transform: If True, unlabeld dataset returns weak & strong augmented image pair. \n                                  If False, unlabeled datasets returns only weak augmented image.\n            strong_transform: list of strong transform (RandAugment in FixMatch)\n            oenhot: If True, the target is converted into onehot vector.\n            \n        Returns:\n            BasicDataset (for labeled data), BasicDataset (for unlabeld data)\n        \"\"\"", "\n", "\n", "data", ",", "targets", "=", "self", ".", "get_data", "(", ")", "\n", "num_classes", "=", "self", ".", "num_classes", "\n", "transform", "=", "self", ".", "transform", "\n", "data_dir", "=", "self", ".", "data_dir", "\n", "\n", "lb_data", ",", "lb_targets", ",", "ulb_data", ",", "ulb_targets", "=", "split_ssl_data", "(", "data", ",", "targets", ",", "\n", "num_labels", ",", "num_classes", ",", "\n", "index", ",", "include_lb_to_ulb", ")", "\n", "\n", "lb_dset", "=", "BasicDataset", "(", "lb_data", ",", "lb_targets", ",", "num_classes", ",", "\n", "transform", ",", "False", ",", "None", ",", "onehot", ")", "\n", "\n", "ulb_dset", "=", "BasicDataset", "(", "data", ",", "targets", ",", "num_classes", ",", "\n", "transform", ",", "use_strong_transform", ",", "strong_transform", ",", "onehot", ")", "\n", "\n", "return", "lb_dset", ",", "ulb_dset", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.ssl_dataset.get_transform": [[22, 31], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "get_transform", "(", "mean", ",", "std", ",", "train", "=", "True", ")", ":", "\n", "    ", "if", "train", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", ",", "std", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_ori.BasicDataset.__init__": [[18, 52], ["torch.utils.data.Dataset.__init__", "copy.deepcopy", "dataset_ori.BasicDataset.strong_transform.transforms.insert", "augmentation.randaugment.RandAugment"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "\n", "data", ",", "\n", "targets", "=", "None", ",", "\n", "num_classes", "=", "None", ",", "\n", "transform", "=", "None", ",", "\n", "use_strong_transform", "=", "False", ",", "\n", "strong_transform", "=", "None", ",", "\n", "onehot", "=", "False", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args\n            data: x_data\n            targets: y_data (if not exist, None)\n            num_classes: number of label classes\n            transform: basic transformation of data\n            use_strong_transform: If True, this dataset returns both weakly and strongly augmented images.\n            strong_transform: list of transformation functions for strong augmentation\n            onehot: If True, label is converted into onehot vector.\n        \"\"\"", "\n", "super", "(", "BasicDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "targets", "=", "targets", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "use_strong_transform", "=", "use_strong_transform", "\n", "self", ".", "onehot", "=", "onehot", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "if", "use_strong_transform", ":", "\n", "            ", "if", "strong_transform", "is", "None", ":", "\n", "                ", "self", ".", "strong_transform", "=", "copy", ".", "deepcopy", "(", "transform", ")", "\n", "self", ".", "strong_transform", ".", "transforms", ".", "insert", "(", "0", ",", "RandAugment", "(", "3", ",", "5", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "strong_transform", "=", "strong_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_ori.BasicDataset.__getitem__": [[54, 82], ["isinstance", "dataset_ori.BasicDataset.transform", "data_utils.get_onehot", "PIL.Image.fromarray", "torchvision.transforms.ToTensor", "dataset_ori.BasicDataset.strong_transform"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.data_utils.get_onehot"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        If strong augmentation is not used,\n            return weak_augment_image, target\n        else:\n            return weak_augment_image, strong_augment_image, target\n        \"\"\"", "\n", "\n", "#set idx-th target", "\n", "if", "self", ".", "targets", "is", "None", ":", "\n", "            ", "target", "=", "None", "\n", "", "else", ":", "\n", "            ", "target_", "=", "self", ".", "targets", "[", "idx", "]", "\n", "target", "=", "target_", "if", "not", "self", ".", "onehot", "else", "get_onehot", "(", "self", ".", "num_classes", ",", "target_", ")", "\n", "\n", "#set augmented images", "\n", "\n", "", "img", "=", "self", ".", "data", "[", "idx", "]", "\n", "if", "self", ".", "transform", "is", "None", ":", "\n", "            ", "return", "transforms", ".", "ToTensor", "(", ")", "(", "img", ")", ",", "target", "\n", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "", "img_w", "=", "self", ".", "transform", "(", "img", ")", "\n", "if", "not", "self", ".", "use_strong_transform", ":", "\n", "                ", "return", "img_w", ",", "target", "\n", "", "else", ":", "\n", "                ", "return", "img_w", ",", "self", ".", "strong_transform", "(", "img", ")", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.dataset_ori.BasicDataset.__len__": [[84, 86], ["len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.DistributedProxySampler.DistributedProxySampler.__init__": [[26, 29], ["torch.utils.data.distributed.DistributedSampler.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "sampler", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "super", "(", "DistributedProxySampler", ",", "self", ")", ".", "__init__", "(", "sampler", ",", "num_replicas", "=", "num_replicas", ",", "rank", "=", "rank", ",", "shuffle", "=", "False", ")", "\n", "self", ".", "sampler", "=", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.datasets.DistributedProxySampler.DistributedProxySampler.__iter__": [[30, 46], ["torch.manual_seed", "list", "iter", "len", "RuntimeError", "len", "RuntimeError", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "# deterministically shuffle based on epoch", "\n", "        ", "torch", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "list", "(", "self", ".", "sampler", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "if", "len", "(", "indices", ")", "!=", "self", ".", "total_size", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "total_size", ")", ")", "\n", "\n", "# subsample", "\n", "", "indices", "=", "indices", "[", "self", ".", "rank", ":", "self", ".", "total_size", ":", "self", ".", "num_replicas", "]", "\n", "if", "len", "(", "indices", ")", "!=", "self", ".", "num_samples", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"{} vs {}\"", ".", "format", "(", "len", "(", "indices", ")", ",", "self", ".", "num_samples", ")", ")", "\n", "\n", "", "return", "iter", "(", "indices", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.RandAugment.__init__": [[164, 168], ["randaugment.augment_list"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "m", "=", "m", "# [0, 30] in fixmatch, deprecated.", "\n", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.RandAugment.__call__": [[169, 177], ["random.choices", "randaugment.Cutout", "op", "random.random", "float", "random.random"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Cutout"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "min_val", ",", "max_val", "in", "ops", ":", "\n", "            ", "val", "=", "min_val", "+", "float", "(", "max_val", "-", "min_val", ")", "*", "random", ".", "random", "(", ")", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "", "cutout_val", "=", "random", ".", "random", "(", ")", "*", "0.5", "\n", "img", "=", "Cutout", "(", "img", ",", "cutout_val", ")", "#for fixmatch", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.AutoContrast": [[14, 16], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Brightness": [[18, 21], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "\n", "    ", "assert", "v", ">=", "0.0", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Color": [[23, 26], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "\n", "    ", "assert", "v", ">=", "0.0", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Contrast": [[28, 31], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "\n", "    ", "assert", "v", ">=", "0.0", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Equalize": [[33, 35], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Invert": [[37, 39], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Identity": [[41, 43], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Posterize": [[45, 49], ["int", "max", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "# [4, 8]", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "v", "=", "max", "(", "1", ",", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Rotate": [[51, 56], ["img.rotate"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "# [-30, 30]", "\n", "#assert -30 <= v <= 30", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Sharpness": [[59, 62], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "# [0.1,1.9]", "\n", "    ", "assert", "v", ">=", "0.0", "\n", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.ShearX": [[64, 69], ["img.transform"], "function", ["None"], ["", "def", "ShearX", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "#assert -0.3 <= v <= 0.3", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.ShearY": [[71, 76], ["img.transform"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "# [-0.3, 0.3]", "\n", "#assert -0.3 <= v <= 0.3", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.TranslateX": [[78, 84], ["img.transform"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "#assert -0.3 <= v <= 0.3", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.TranslateXabs": [[86, 91], ["img.transform"], "function", ["None"], ["", "def", "TranslateXabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "#assert v >= 0.0", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.TranslateY": [[93, 99], ["img.transform"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "#assert -0.3 <= v <= 0.3", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.TranslateYabs": [[101, 106], ["img.transform"], "function", ["None"], ["", "def", "TranslateYabs", "(", "img", ",", "v", ")", ":", "# [-150, 150] => percentage: [-0.45, 0.45]", "\n", "#assert 0 <= v", "\n", "#if random.random() > 0.5:", "\n", "#    v = -v", "\n", "    ", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Solarize": [[108, 111], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "# [0, 256]", "\n", "    ", "assert", "0", "<=", "v", "<=", "256", "\n", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Cutout": [[113, 120], ["randaugment.CutoutAbs"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.CutoutAbs"], ["", "def", "Cutout", "(", "img", ",", "v", ")", ":", "#[0, 60] => percentage: [0, 0.2] => change to [0, 0.5]", "\n", "    ", "assert", "0.0", "<=", "v", "<=", "0.5", "\n", "if", "v", "<=", "0.", ":", "\n", "        ", "return", "img", "\n", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "CutoutAbs", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.CutoutAbs": [[122, 141], ["numpy.random.uniform", "numpy.random.uniform", "int", "int", "min", "min", "img.copy.copy", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "PIL.ImageDraw.Draw().rectangle", "max", "max", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw", "PIL.ImageDraw.Draw"], "function", ["None"], ["", "def", "CutoutAbs", "(", "img", ",", "v", ")", ":", "# [0, 60] => percentage: [0, 0.2]", "\n", "# assert 0 <= v <= 20", "\n", "    ", "if", "v", "<", "0", ":", "\n", "        ", "return", "img", "\n", "", "w", ",", "h", "=", "img", ".", "size", "\n", "x0", "=", "np", ".", "random", ".", "uniform", "(", "w", ")", "\n", "y0", "=", "np", ".", "random", ".", "uniform", "(", "h", ")", "\n", "\n", "x0", "=", "int", "(", "max", "(", "0", ",", "x0", "-", "v", "/", "2.", ")", ")", "\n", "y0", "=", "int", "(", "max", "(", "0", ",", "y0", "-", "v", "/", "2.", ")", ")", "\n", "x1", "=", "min", "(", "w", ",", "x0", "+", "v", ")", "\n", "y1", "=", "min", "(", "h", ",", "y0", "+", "v", ")", "\n", "\n", "xy", "=", "(", "x0", ",", "y0", ",", "x1", ",", "y1", ")", "\n", "color", "=", "(", "125", ",", "123", ",", "114", ")", "\n", "# color = (0, 0, 0)", "\n", "img", "=", "img", ".", "copy", "(", ")", "\n", "PIL", ".", "ImageDraw", ".", "Draw", "(", "img", ")", ".", "rectangle", "(", "xy", ",", "color", ")", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.augment_list": [[143, 161], ["None"], "function", ["None"], ["", "def", "augment_list", "(", ")", ":", "\n", "    ", "l", "=", "[", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Brightness", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Color", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Contrast", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Identity", ",", "0", ",", "1", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "8", ")", ",", "\n", "(", "Rotate", ",", "-", "30", ",", "30", ")", ",", "\n", "(", "Sharpness", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "ShearX", ",", "-", "0.3", ",", "0.3", ")", ",", "\n", "(", "ShearY", ",", "-", "0.3", ",", "0.3", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "TranslateX", ",", "-", "0.3", ",", "0.3", ")", ",", "\n", "(", "TranslateY", ",", "-", "0.3", ",", "0.3", ")", "\n", "]", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RFMModel.__init__": [[12, 29], ["torch.Module.__init__", "net_builder", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rfixmatch.RFMModel.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["def", "__init__", "(", "self", ",", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "RFMModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", ":", "\n", "            ", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "register_buffer", "(", "\"soft_labels\"", ",", "soft_labels", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RFMModel._momentum_update_soft_labels": [[31, 38], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "logits.detach"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_soft_labels", "(", "self", ",", "logits", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the soft labels\n        \"\"\"", "\n", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RFMModel._dequeue_and_enqueue": [[39, 54], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "rfixmatch.concat_all_gather", "int"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.concat_all_gather"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "T", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RFMModel.forward": [[55, 77], ["rfixmatch.RFMModel.model", "logits[].chunk", "rfixmatch.RFMModel._momentum_update_soft_labels"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RFMModel._momentum_update_soft_labels"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "num_lb", "=", "None", ",", "it", "=", "None", ",", "sup_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "sup_soft_labels", "=", "None", "\n", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", "and", "it", ">", "self", ".", "es", ":", "\n", "# obtain prob, then update running avg", "\n", "\n", "                ", "self", ".", "_momentum_update_soft_labels", "(", "logits_x_lb", ",", "sup_index", ")", "\n", "sup_soft_labels", "=", "self", ".", "soft_labels", "[", "sup_index", "]", "\n", "\n", "", "return", "logits_x_lb", ",", "logits_x_ulb_w", ",", "logits_x_ulb_s", ",", "sup_soft_labels", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RMFBuilder.__init__": [[99, 106], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "        ", "self", ".", "net_builder", "=", "net_builder", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.RMFBuilder.build_model": [[107, 111], ["rfixmatch.RFMModel"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "return", "RFMModel", "(", "self", ".", "net_builder", ",", "sup_loss_type", "=", "self", ".", "sup_loss_type", ",", "\n", "labels", "=", "self", ".", "labels", ",", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "es", "=", "self", ".", "es", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.concat_all_gather": [[80, 92], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch.build_rfm": [[94, 96], ["rfixmatch.RFMModel"], "function", ["None"], ["", "def", "build_rfm", "(", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "    ", "return", "RFMModel", "(", "net_builder", ",", "sup_loss_type", "=", "sup_loss_type", ",", "labels", "=", "labels", ",", "num_classes", "=", "num_classes", ",", "momentum", "=", "momentum", ",", "es", "=", "es", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RFMModel.__init__": [[12, 29], ["torch.Module.__init__", "net_builder", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "rfixmatch_v2.RFMModel.register_buffer", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.fixmatch.utils.net_builder"], ["def", "__init__", "(", "self", ",", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "RFMModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "net_builder", "(", "num_classes", "=", "num_classes", ")", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", ":", "\n", "            ", "soft_labels", "=", "torch", ".", "zeros", "(", "labels", ".", "shape", "[", "0", "]", ",", "num_classes", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "soft_labels", "[", "torch", ".", "arange", "(", "labels", ".", "shape", "[", "0", "]", ")", ",", "labels", "]", "=", "1", "\n", "self", ".", "register_buffer", "(", "\"soft_labels\"", ",", "soft_labels", ")", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RFMModel._momentum_update_soft_labels": [[31, 38], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "logits.detach"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_soft_labels", "(", "self", ",", "logits", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the soft labels\n        \"\"\"", "\n", "prob", "=", "F", ".", "softmax", "(", "logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", "\n", "self", ".", "soft_labels", "[", "index", "]", "=", "self", ".", "momentum", "*", "self", ".", "soft_labels", "[", "index", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RFMModel.forward": [[39, 61], ["rfixmatch_v2.RFMModel.model", "logits[].chunk", "rfixmatch_v2.RFMModel._momentum_update_soft_labels"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RFMModel._momentum_update_soft_labels"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "num_lb", "=", "None", ",", "it", "=", "None", ",", "sup_index", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "logits", "=", "self", ".", "model", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "training", ":", "\n", "            ", "logits_x_lb", "=", "logits", "[", ":", "num_lb", "]", "\n", "logits_x_ulb_w", ",", "logits_x_ulb_s", "=", "logits", "[", "num_lb", ":", "]", ".", "chunk", "(", "2", ")", "\n", "del", "logits", "\n", "\n", "sup_soft_labels", "=", "None", "\n", "\n", "if", "self", ".", "sup_loss_type", "==", "'sat'", "and", "it", ">", "self", ".", "es", ":", "\n", "# obtain prob, then update running avg", "\n", "\n", "                ", "self", ".", "_momentum_update_soft_labels", "(", "logits_x_lb", ",", "sup_index", ")", "\n", "sup_soft_labels", "=", "self", ".", "soft_labels", "[", "sup_index", "]", "\n", "\n", "", "return", "logits_x_lb", ",", "logits_x_ulb_w", ",", "logits_x_ulb_s", ",", "sup_soft_labels", "\n", "\n", "", "return", "logits", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RMFBuilder.__init__": [[83, 90], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "        ", "self", ".", "net_builder", "=", "net_builder", "\n", "self", ".", "sup_loss_type", "=", "sup_loss_type", "\n", "self", ".", "labels", "=", "labels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "es", "=", "es", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.RMFBuilder.build_model": [[91, 95], ["rfixmatch_v2.RFMModel"], "methods", ["None"], ["", "def", "build_model", "(", "self", ")", ":", "\n", "        ", "return", "RFMModel", "(", "self", ".", "net_builder", ",", "sup_loss_type", "=", "self", ".", "sup_loss_type", ",", "\n", "labels", "=", "self", ".", "labels", ",", "num_classes", "=", "self", ".", "num_classes", ",", "\n", "momentum", "=", "self", ".", "momentum", ",", "es", "=", "self", ".", "es", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.concat_all_gather": [[64, 76], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.rfixmatch_v2.build_rfm": [[78, 80], ["rfixmatch_v2.RFMModel"], "function", ["None"], ["", "def", "build_rfm", "(", "net_builder", ",", "sup_loss_type", "=", "'sat'", ",", "labels", "=", "None", ",", "num_classes", "=", "10", ",", "momentum", "=", "0.9", ",", "es", "=", "40", ")", ":", "\n", "    ", "return", "RFMModel", "(", "net_builder", ",", "sup_loss_type", "=", "sup_loss_type", ",", "labels", "=", "labels", ",", "num_classes", "=", "num_classes", ",", "momentum", "=", "momentum", ",", "es", "=", "es", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.sim2sem.Sim2Sem.__init__": [[9, 16], ["torch.Module.__init__", "feature_modules.build_feature_module", "heads.build_head", "sim2sem.Sim2Sem.feature_module.named_parameters"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.build_feature_module.build_feature_module", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.build_head.build_head"], ["    ", "def", "__init__", "(", "self", ",", "feature", ",", "head", ",", "freeze_conv", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Sim2Sem", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "feature_module", "=", "build_feature_module", "(", "feature", ")", "\n", "self", ".", "head", "=", "build_head", "(", "head", ")", "\n", "if", "freeze_conv", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "feature_module", ".", "named_parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.sim2sem.Sim2Sem.forward": [[17, 49], ["isinstance", "sim2sem.Sim2Sem.head.forward", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sim2sem.Sim2Sem.feature_module", "range", "sim2sem.Sim2Sem.feature_module", "sim2sem.Sim2Sem.head.select_samples", "sim2sem.Sim2Sem.append", "sim2sem.Sim2Sem.head.local_consistency", "sim2sem.Sim2Sem.head.compute_cluster_proto", "sim2sem.Sim2Sem.head.loss"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.forward", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.select_samples", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.local_consistency", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.compute_cluster_proto", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.loss"], ["", "", "", "def", "forward", "(", "self", ",", "images", "=", "None", ",", "target", "=", "None", ",", "forward_type", "=", "\"sem\"", ",", "feas_sim", "=", "None", ",", "scores", "=", "None", ",", "epoch", "=", "None", ",", "return_centers", "=", "False", ")", ":", "\n", "\n", "        ", "if", "forward_type", "not", "in", "[", "\"sim2sem\"", ",", "\"proto\"", ",", "\"local_consistency\"", "]", ":", "\n", "            ", "if", "isinstance", "(", "images", ",", "list", ")", ":", "\n", "                ", "fea", "=", "[", "]", "\n", "# for image in images:", "\n", "#     fea.append(self.feature_module(image))", "\n", "num_heads", "=", "len", "(", "images", ")", "\n", "num_each", "=", "images", "[", "0", "]", ".", "shape", "[", "0", "]", "\n", "image", "=", "torch", ".", "cat", "(", "images", ",", "dim", "=", "0", ")", "\n", "fea_all", "=", "self", ".", "feature_module", "(", "image", ")", "\n", "for", "h", "in", "range", "(", "num_heads", ")", ":", "\n", "                    ", "s", "=", "h", "*", "num_each", "\n", "e", "=", "s", "+", "num_each", "\n", "fea", ".", "append", "(", "fea_all", "[", "s", ":", "e", ",", "...", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "fea", "=", "self", ".", "feature_module", "(", "images", ")", "\n", "\n", "", "", "if", "forward_type", "==", "\"sem\"", ":", "\n", "            ", "return", "self", ".", "head", ".", "forward", "(", "fea", ")", "\n", "", "elif", "forward_type", "==", "\"sim2sem\"", ":", "\n", "            ", "return", "self", ".", "head", ".", "select_samples", "(", "feas_sim", ",", "scores", ",", "epoch", ")", "\n", "", "elif", "forward_type", "==", "\"local_consistency\"", ":", "\n", "            ", "return", "self", ".", "head", ".", "local_consistency", "(", "feas_sim", ",", "scores", ")", "\n", "", "elif", "forward_type", "==", "\"proto\"", ":", "\n", "            ", "return", "self", ".", "head", ".", "compute_cluster_proto", "(", "feas_sim", ",", "scores", ")", "\n", "", "elif", "forward_type", "==", "\"loss\"", ":", "\n", "            ", "return", "self", ".", "head", ".", "loss", "(", "fea", ",", "target", ")", "\n", "", "elif", "forward_type", "==", "\"feature_only\"", ":", "\n", "            ", "return", "fea", "\n", "", "else", ":", "\n", "            ", "raise", "TypeError", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.model.build_model_sim.build_model_sim": [[4, 6], ["feature_modules.build_feature_module"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.build_feature_module.build_feature_module"], ["def", "build_model_sim", "(", "cfg", ")", ":", "\n", "    ", "return", "build_feature_module", "(", "cfg", ")", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.imagenet.build_ResNet34.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.imagenet.build_ResNet34.build": [[8, 10], ["spice.model.feature_modules.resnet_all.resnet34"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet34"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "resnet34", "(", "num_classes", "=", "num_classes", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.BasicBlock.__init__": [[12, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.BasicBlock.forward": [[27, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.Bottleneck.__init__": [[42, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.Bottleneck.forward": [[59, 70], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn3", "resnet_cifar.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn1", "resnet_cifar.Bottleneck.bn2", "resnet_cifar.Bottleneck.conv3", "resnet_cifar.Bottleneck.conv1", "resnet_cifar.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.ResNet.__init__": [[73, 112], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet.modules", "isinstance", "resnet_cifar.ResNet.modules", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "in_channel", "=", "3", ",", "zero_init_residual", "=", "False", ",", "num_classes", "=", "128", ",", "\n", "feature_only", "=", "False", ",", "test", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves", "\n", "# like an identity. This improves the model by 0.2~0.3% according to:", "\n", "# https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "test", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.ResNet._make_layer": [[113, 121], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.ResNet.forward": [[122, 135], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet.layer1", "resnet_cifar.ResNet.layer2", "resnet_cifar.ResNet.layer3", "resnet_cifar.ResNet.layer4", "resnet_cifar.ResNet.bn1", "resnet_cifar.ResNet.avgpool", "resnet_cifar.ResNet.view", "resnet_cifar.ResNet.fc", "resnet_cifar.ResNet.conv1", "resnet_cifar.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.build_ResNet18.__init__": [[142, 144], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.build_ResNet18.build": [[145, 149], ["resnet_cifar.ResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "ResNet", "(", "BasicBlock", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "num_classes", "=", "num_classes", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_cifar.resnet18_cifar": [[137, 139], ["resnet_cifar.ResNet"], "function", ["None"], ["", "", "def", "resnet18_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.BasicBlock.__init__": [[12, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.BasicBlock.forward": [[27, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet_stl.BasicBlock.bn2", "resnet_stl.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.BasicBlock.bn1", "resnet_stl.BasicBlock.conv2", "resnet_stl.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.Bottleneck.__init__": [[42, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.Bottleneck.forward": [[59, 70], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.Bottleneck.bn3", "resnet_stl.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.Bottleneck.bn1", "resnet_stl.Bottleneck.bn2", "resnet_stl.Bottleneck.conv3", "resnet_stl.Bottleneck.conv1", "resnet_stl.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.ResNet.__init__": [[73, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "resnet_stl.ResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "in_channel", "=", "3", ",", "zero_init_residual", "=", "False", ",", "\n", "test", "=", "True", ",", "feature_only", "=", "False", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "if", "test", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves", "\n", "# like an identity. This improves the model by 0.2~0.3% according to:", "\n", "# https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.ResNet._make_layer": [[114, 122], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.ResNet.forward": [[123, 136], ["resnet_stl.ResNet.maxpool", "resnet_stl.ResNet.layer1", "resnet_stl.ResNet.layer2", "resnet_stl.ResNet.layer3", "resnet_stl.ResNet.layer4", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.ResNet.avgpool", "resnet_stl.ResNet.view", "resnet_stl.ResNet.fc", "resnet_stl.ResNet.bn1", "resnet_stl.ResNet.size", "resnet_stl.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.build_ResNet18.__init__": [[143, 145], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.build_ResNet18.build": [[146, 150], ["resnet_stl.ResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "ResNet", "(", "BasicBlock", ",", "\n", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "\n", "num_classes", "=", "num_classes", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.resnet_stl.resnet18": [[138, 140], ["resnet_stl.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.BasicBlock.forward": [[24, 40], ["wrn_stl10.BasicBlock.conv2", "wrn_stl10.BasicBlock.relu1", "wrn_stl10.BasicBlock.relu1", "wrn_stl10.BasicBlock.relu2", "wrn_stl10.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn_stl10.BasicBlock.bn1", "wrn_stl10.BasicBlock.bn1", "wrn_stl10.BasicBlock.bn2", "wrn_stl10.BasicBlock.bn2", "wrn_stl10.BasicBlock.convShortcut", "wrn_stl10.BasicBlock.conv1", "wrn_stl10.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.NetworkBlock.__init__": [[43, 46], ["torch.Module.__init__", "wrn_stl10.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.NetworkBlock._make_layer": [[47, 52], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.NetworkBlock.forward": [[53, 55], ["wrn_stl10.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.WideResNet.__init__": [[58, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn_stl10.NetworkBlock", "wrn_stl10.NetworkBlock", "wrn_stl10.NetworkBlock", "wrn_stl10.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn_stl10.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", ",", "128", "*", "widen_factor", "]", "\n", "# assert ((depth - 4) % 6 == 0)", "\n", "# n = (depth - 4) // 6", "\n", "n", "=", "4", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n", "self", ".", "block4", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "3", "]", ",", "nChannels", "[", "4", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "4", "]", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "4", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "4", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.WideResNet.forward": [[92, 106], ["wrn_stl10.WideResNet.conv1", "wrn_stl10.WideResNet.block1", "wrn_stl10.WideResNet.block2", "wrn_stl10.WideResNet.block3", "wrn_stl10.WideResNet.block4", "wrn_stl10.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn_stl10.WideResNet.fc", "wrn_stl10.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "ood_test", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "block4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "6", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "output", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "ood_test", ":", "\n", "            ", "return", "output", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.build_WideResNet.__init__": [[109, 115], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "bn_momentum", "=", "0.01", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "depth", "=", "depth", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "self", ".", "leaky_slope", "=", "leaky_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_stl10.build_WideResNet.build": [[116, 123], ["wrn_stl10.WideResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "WideResNet", "(", "depth", "=", "self", ".", "depth", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "widen_factor", "=", "self", ".", "widen_factor", ",", "\n", "bn_momentum", "=", "self", ".", "bn_momentum", ",", "\n", "leaky_slope", "=", "self", ".", "leaky_slope", ",", "\n", "dropRate", "=", "self", ".", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.BasicBlock.forward": [[24, 40], ["wrn_tiny.BasicBlock.conv2", "wrn_tiny.BasicBlock.relu1", "wrn_tiny.BasicBlock.relu1", "wrn_tiny.BasicBlock.relu2", "wrn_tiny.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn_tiny.BasicBlock.bn1", "wrn_tiny.BasicBlock.bn1", "wrn_tiny.BasicBlock.bn2", "wrn_tiny.BasicBlock.bn2", "wrn_tiny.BasicBlock.convShortcut", "wrn_tiny.BasicBlock.conv1", "wrn_tiny.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.NetworkBlock.__init__": [[43, 46], ["torch.Module.__init__", "wrn_tiny.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.NetworkBlock._make_layer": [[47, 52], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.NetworkBlock.forward": [[53, 55], ["wrn_tiny.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.WideResNet.__init__": [[104, 137], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn_tiny.NetworkBlock", "wrn_tiny.NetworkBlock", "wrn_tiny.NetworkBlock", "wrn_tiny.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn_tiny.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", ",", "128", "*", "widen_factor", "]", "\n", "# assert ((depth - 4) % 6 == 0)", "\n", "# n = (depth - 4) // 6", "\n", "n", "=", "4", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n", "self", ".", "block4", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "3", "]", ",", "nChannels", "[", "4", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "4", "]", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "4", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "4", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.WideResNet.forward": [[138, 152], ["wrn_tiny.WideResNet.conv1", "wrn_tiny.WideResNet.block1", "wrn_tiny.WideResNet.block2", "wrn_tiny.WideResNet.block3", "wrn_tiny.WideResNet.block4", "wrn_tiny.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn_tiny.WideResNet.fc", "wrn_tiny.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "ood_test", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "block4", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "6", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "output", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "ood_test", ":", "\n", "            ", "return", "output", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.build_WideResNet.__init__": [[155, 161], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "bn_momentum", "=", "0.01", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "depth", "=", "depth", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "self", ".", "leaky_slope", "=", "leaky_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn_tiny.build_WideResNet.build": [[162, 169], ["wrn_tiny.WideResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "WideResNet", "(", "depth", "=", "self", ".", "depth", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "widen_factor", "=", "self", ".", "widen_factor", ",", "\n", "bn_momentum", "=", "self", ".", "bn_momentum", ",", "\n", "leaky_slope", "=", "self", ".", "leaky_slope", ",", "\n", "dropRate", "=", "self", ".", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.BasicBlock.forward": [[24, 40], ["wrn.BasicBlock.conv2", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu2", "wrn.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn2", "wrn.BasicBlock.bn2", "wrn.BasicBlock.convShortcut", "wrn.BasicBlock.conv1", "wrn.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.NetworkBlock.__init__": [[43, 46], ["torch.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.NetworkBlock._make_layer": [[47, 52], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.NetworkBlock.forward": [[53, 55], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.WideResNet.__init__": [[58, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.WideResNet.forward": [[89, 102], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.fc", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "ood_test", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "output", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "ood_test", ":", "\n", "            ", "return", "output", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.build_WideResNet.__init__": [[104, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "bn_momentum", "=", "0.01", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "depth", "=", "depth", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "self", ".", "leaky_slope", "=", "leaky_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.wrn.build_WideResNet.build": [[111, 118], ["wrn.WideResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "WideResNet", "(", "depth", "=", "self", ".", "depth", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "widen_factor", "=", "self", ".", "widen_factor", ",", "\n", "bn_momentum", "=", "self", ".", "bn_momentum", ",", "\n", "leaky_slope", "=", "self", ".", "leaky_slope", ",", "\n", "dropRate", "=", "self", ".", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.BasicBlock.__init__": [[13, 26], ["torch.Module.__init__", "cluster_resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "cluster_resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "track_running_stats", "=", "None", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "track_running_stats", "is", "not", "None", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.BasicBlock.forward": [[27, 44], ["cluster_resnet.BasicBlock.conv1", "cluster_resnet.BasicBlock.bn1", "cluster_resnet.BasicBlock.relu", "cluster_resnet.BasicBlock.conv2", "cluster_resnet.BasicBlock.bn2", "cluster_resnet.BasicBlock.relu", "cluster_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ResNetTrunk.__init__": [[47, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNetTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ResNetTrunk._make_layer": [[50, 69], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ResNet.__init__": [[72, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ResNet._initialize_weights": [[75, 86], ["cluster_resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "assert", "(", "m", ".", "track_running_stats", "==", "self", ".", "batchnorm_track", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ClusterResNet.__init__": [[89, 127], ["cluster_resnet.ResNetTrunk.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "print", "torch.AvgPool2d", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "in_channels", "=", "3", ",", "in_size", "=", "96", ",", "batchnorm_track", "=", "True", ",", "test", "=", "True", ",", "feature_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ClusterResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batchnorm_track", "=", "batchnorm_track", "\n", "\n", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "in_channels", "=", "in_channels", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "      ", "if", "in_size", "==", "96", ":", "\n", "        ", "avg_pool_sz", "=", "7", "\n", "", "elif", "in_size", "==", "64", ":", "\n", "        ", "avg_pool_sz", "=", "5", "\n", "", "elif", "in_size", "==", "32", ":", "\n", "        ", "avg_pool_sz", "=", "3", "\n", "", "print", "(", "\"avg_pool_sz %d\"", "%", "avg_pool_sz", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "avg_pool_sz", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "test", "=", "test", "\n", "if", "test", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.ClusterResNet.forward": [[128, 147], ["cluster_resnet.ClusterResNet.conv1", "cluster_resnet.ClusterResNet.bn1", "cluster_resnet.ClusterResNet.relu", "cluster_resnet.ClusterResNet.maxpool", "cluster_resnet.ClusterResNet.layer1", "cluster_resnet.ClusterResNet.layer2", "cluster_resnet.ClusterResNet.layer3", "cluster_resnet.ClusterResNet.layer4", "cluster_resnet.ClusterResNet.avgpool", "cluster_resnet.ClusterResNet.view", "cluster_resnet.ClusterResNet.fc", "cluster_resnet.ClusterResNet.size"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "      ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.build_ClusterResNet.__init__": [[150, 156], ["None"], "methods", ["None"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", "=", "3", ",", "input_size", "=", "96", ",", "batchnorm_track", "=", "True", ",", "test", "=", "True", ",", "feature_only", "=", "False", ")", ":", "\n", "    ", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "batchnorm_track", "=", "batchnorm_track", "\n", "self", ".", "test", "=", "test", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.build_ClusterResNet.build": [[157, 164], ["cluster_resnet.ClusterResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "    ", "return", "ClusterResNet", "(", "num_classes", ",", "\n", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "in_size", "=", "self", ".", "input_size", ",", "\n", "batchnorm_track", "=", "self", ".", "batchnorm_track", ",", "\n", "test", "=", "self", ".", "test", ",", "\n", "feature_only", "=", "self", ".", "feature_only", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.nets.cluster_resnet.conv3x3": [[4, 8], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10.__init__": [[55, 99], ["torchvision.datasets.vision.VisionDataset.__init__", "numpy.vstack().reshape", "cifar.CIFAR10.data.transpose", "cifar.CIFAR10._load_meta", "cifar.CIFAR10.download", "cifar.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "cifar.CIFAR10.data.append", "numpy.vstack", "pickle.load", "pickle.load", "cifar.CIFAR10.targets.extend", "cifar.CIFAR10.targets.extend"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._load_meta", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["def", "__init__", "(", "self", ",", "root", ",", "all", "=", "True", ",", "train", "=", "True", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "if", "all", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "+", "self", ".", "test_list", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10._load_meta": [[100, 112], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10.__getitem__": [[113, 134], ["PIL.Image.fromarray", "cifar.CIFAR10.transform", "cifar.CIFAR10.target_transform"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10.__len__": [[135, 137], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10._check_integrity": [[138, 146], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10.download": [[147, 152], ["cifar.CIFAR10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.cifar.CIFAR10.extra_repr": [[153, 155], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Split: {}\"", ".", "format", "(", "\"Train\"", "if", "self", ".", "train", "is", "True", "else", "\"Test\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__init__": [[49, 116], ["torchvision.datasets.vision.VisionDataset.__init__", "torchvision.datasets.utils.verify_str_arg", "stl10.STL10._verify_folds", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "stl10.STL10.download", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10._check_integrity", "RuntimeError", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "open", "f.read().splitlines", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "stl10.STL10.__loadfile", "stl10.STL10.__load_folds", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "f.read", "numpy.asarray", "stl10.STL10.__loadfile", "numpy.asarray", "stl10.STL10.__loadfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10._verify_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "split", ":", "str", "=", "\"train\"", ",", "\n", "folds", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "STL10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "self", ".", "splits", ")", "\n", "self", ".", "folds", "=", "self", ".", "_verify_folds", "(", "folds", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "elif", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found or corrupted. '", "\n", "'You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "self", ".", "labels", ":", "np", ".", "ndarray", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'train+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ")", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "# self.split == 'test':", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "targets", "=", "self", ".", "labels", "\n", "\n", "class_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "class_names_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "class_file", ")", ":", "\n", "            ", "with", "open", "(", "class_file", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10._verify_folds": [[117, 129], ["isinstance", "ValueError", "ValueError", "range", "msg.format", "msg.format", "type"], "methods", ["None"], ["                ", "self", ".", "classes", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "", "", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__getitem__": [[130, 155], ["PIL.Image.fromarray", "numpy.transpose", "stl10.STL10.transform", "stl10.STL10.target_transform", "int"], "methods", ["None"], ["raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__len__": [[156, 158], ["None"], "methods", ["None"], ["", "return", "img", ",", "target", "\n", "\n", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__loadfile": [[159, 175], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromfile", "numpy.reshape", "numpy.transpose", "open", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile"], ["        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "__loadfile", "(", "self", ",", "data_file", ":", "str", ",", "labels_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10._check_integrity": [[176, 184], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "return", "images", ",", "labels", "\n", "\n", "", "def", "_check_integrity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.download": [[185, 191], ["stl10.STL10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "stl10.STL10._check_integrity", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["", "", "return", "True", "\n", "\n", "", "def", "download", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.extra_repr": [[192, 194], ["None"], "methods", ["None"], ["self", ".", "_check_integrity", "(", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.stl10.STL10.__load_folds": [[195, 205], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromstring", "f.read().splitlines", "f.read"], "methods", ["None"], ["        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n", "", "def", "__load_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "None", ":", "\n", "# loads one of the folds if specified", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "\n", "", "path_to_folds", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "folds_list_file", ")", "\n", "with", "open", "(", "path_to_folds", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "str_idx", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "folds", "]", "\n", "list_idx", "=", "np", ".", "fromstring", "(", "str_idx", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "' '", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo.__init__": [[11, 43], ["torch.Module.__init__", "base_encoder", "base_encoder", "zip", "builder.MoCo.register_buffer", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo.register_buffer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters", "param_k.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "base_encoder", ",", "dim", "=", "128", ",", "K", "=", "65536", ",", "m", "=", "0.999", ",", "T", "=", "0.07", ",", "mlp", "=", "False", ",", "input_size", "=", "96", ")", ":", "\n", "        ", "\"\"\"\n        dim: feature dimension (default: 128)\n        K: queue size; number of negative keys (default: 65536)\n        m: moco momentum of updating key encoder (default: 0.999)\n        T: softmax temperature (default: 0.07)\n        \"\"\"", "\n", "super", "(", "MoCo", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "m", "=", "m", "\n", "self", ".", "T", "=", "T", "\n", "\n", "# create the encoders", "\n", "# num_classes is the output fc dimension", "\n", "self", ".", "encoder_q", "=", "base_encoder", "(", "num_classes", "=", "dim", ",", "in_size", "=", "input_size", ")", "\n", "self", ".", "encoder_k", "=", "base_encoder", "(", "num_classes", "=", "dim", ",", "in_size", "=", "input_size", ")", "\n", "\n", "if", "mlp", ":", "# hack: brute-force replacement", "\n", "            ", "dim_mlp", "=", "self", ".", "encoder_q", ".", "fc", ".", "weight", ".", "shape", "[", "1", "]", "\n", "self", ".", "encoder_q", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_q", ".", "fc", ")", "\n", "self", ".", "encoder_k", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "dim_mlp", ",", "dim_mlp", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "self", ".", "encoder_k", ".", "fc", ")", "\n", "\n", "", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", ".", "copy_", "(", "param_q", ".", "data", ")", "# initialize", "\n", "param_k", ".", "requires_grad", "=", "False", "# not update by gradient", "\n", "\n", "# create the queue", "\n", "", "self", ".", "register_buffer", "(", "\"queue\"", ",", "torch", ".", "randn", "(", "dim", ",", "K", ")", ")", "\n", "self", ".", "queue", "=", "nn", ".", "functional", ".", "normalize", "(", "self", ".", "queue", ",", "dim", "=", "0", ")", "\n", "\n", "self", ".", "register_buffer", "(", "\"queue_ptr\"", ",", "torch", ".", "zeros", "(", "1", ",", "dtype", "=", "torch", ".", "long", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._momentum_update_key_encoder": [[44, 51], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "builder.MoCo.encoder_q.parameters", "builder.MoCo.encoder_k.parameters"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_momentum_update_key_encoder", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Momentum update of the key encoder\n        \"\"\"", "\n", "for", "param_q", ",", "param_k", "in", "zip", "(", "self", ".", "encoder_q", ".", "parameters", "(", ")", ",", "self", ".", "encoder_k", ".", "parameters", "(", ")", ")", ":", "\n", "            ", "param_k", ".", "data", "=", "param_k", ".", "data", "*", "self", ".", "m", "+", "param_q", ".", "data", "*", "(", "1.", "-", "self", ".", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._dequeue_and_enqueue": [[52, 69], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "int", "concat_all_gather.transpose"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.concat_all_gather"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_dequeue_and_enqueue", "(", "self", ",", "keys", ")", ":", "\n", "# gather keys before updating queue", "\n", "        ", "keys", "=", "concat_all_gather", "(", "keys", ")", "\n", "\n", "batch_size", "=", "keys", ".", "shape", "[", "0", "]", "\n", "\n", "ptr", "=", "int", "(", "self", ".", "queue_ptr", ")", "\n", "assert", "self", ".", "K", "%", "batch_size", "==", "0", "# for simplicity", "\n", "\n", "# replace the keys at ptr (dequeue and enqueue)", "\n", "# self.queue[:, ptr:ptr + batch_size] = keys.T", "\n", "# print(keys.shape)", "\n", "self", ".", "queue", "[", ":", ",", "ptr", ":", "ptr", "+", "batch_size", "]", "=", "keys", ".", "transpose", "(", "1", ",", "0", ")", "\n", "ptr", "=", "(", "ptr", "+", "batch_size", ")", "%", "self", ".", "K", "# move pointer", "\n", "\n", "self", ".", "queue_ptr", "[", "0", "]", "=", "ptr", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._batch_shuffle_ddp": [[70, 97], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.distributed.broadcast", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.randperm().cuda.view", "torch.randperm().cuda.view", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.concat_all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_shuffle_ddp", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Batch shuffle, for making use of BatchNorm.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# random shuffle index", "\n", "idx_shuffle", "=", "torch", ".", "randperm", "(", "batch_size_all", ")", ".", "cuda", "(", ")", "\n", "\n", "# broadcast to all gpus", "\n", "torch", ".", "distributed", ".", "broadcast", "(", "idx_shuffle", ",", "src", "=", "0", ")", "\n", "\n", "# index for restoring", "\n", "idx_unshuffle", "=", "torch", ".", "argsort", "(", "idx_shuffle", ")", "\n", "\n", "# shuffled index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_shuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", ",", "idx_unshuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._batch_unshuffle_ddp": [[98, 116], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.concat_all_gather", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "torch.distributed.get_rank", "idx_unshuffle.view"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.concat_all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_batch_unshuffle_ddp", "(", "self", ",", "x", ",", "idx_unshuffle", ")", ":", "\n", "        ", "\"\"\"\n        Undo batch shuffle.\n        *** Only support DistributedDataParallel (DDP) model. ***\n        \"\"\"", "\n", "# gather from all gpus", "\n", "batch_size_this", "=", "x", ".", "shape", "[", "0", "]", "\n", "x_gather", "=", "concat_all_gather", "(", "x", ")", "\n", "batch_size_all", "=", "x_gather", ".", "shape", "[", "0", "]", "\n", "\n", "num_gpus", "=", "batch_size_all", "//", "batch_size_this", "\n", "\n", "# restored index for this gpu", "\n", "gpu_idx", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "idx_this", "=", "idx_unshuffle", ".", "view", "(", "num_gpus", ",", "-", "1", ")", "[", "gpu_idx", "]", "\n", "\n", "return", "x_gather", "[", "idx_this", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo.forward": [[117, 163], ["builder.MoCo.encoder_q", "torch.functional.normalize", "torch.functional.normalize", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum().unsqueeze", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "builder.MoCo._dequeue_and_enqueue", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "builder.MoCo._momentum_update_key_encoder", "builder.MoCo._batch_shuffle_ddp", "builder.MoCo.encoder_k", "torch.functional.normalize", "torch.functional.normalize", "builder.MoCo._batch_unshuffle_ddp", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "builder.MoCo.queue.clone().detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "builder.MoCo.queue.clone"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._dequeue_and_enqueue", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._momentum_update_key_encoder", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._batch_shuffle_ddp", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.MoCo._batch_unshuffle_ddp"], ["", "def", "forward", "(", "self", ",", "im_q", ",", "im_k", ")", ":", "\n", "        ", "\"\"\"\n        Input:\n            im_q: a batch of query images\n            im_k: a batch of key images\n        Output:\n            logits, targets\n        \"\"\"", "\n", "\n", "# compute query features", "\n", "q", "=", "self", ".", "encoder_q", "(", "im_q", ")", "# queries: NxC", "\n", "q", "=", "nn", ".", "functional", ".", "normalize", "(", "q", ",", "dim", "=", "1", ")", "\n", "\n", "# compute key features", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "# no gradient to keys", "\n", "            ", "self", ".", "_momentum_update_key_encoder", "(", ")", "# update the key encoder", "\n", "\n", "# shuffle for making use of BN", "\n", "im_k", ",", "idx_unshuffle", "=", "self", ".", "_batch_shuffle_ddp", "(", "im_k", ")", "\n", "\n", "k", "=", "self", ".", "encoder_k", "(", "im_k", ")", "# keys: NxC", "\n", "k", "=", "nn", ".", "functional", ".", "normalize", "(", "k", ",", "dim", "=", "1", ")", "\n", "\n", "# undo shuffle", "\n", "k", "=", "self", ".", "_batch_unshuffle_ddp", "(", "k", ",", "idx_unshuffle", ")", "\n", "\n", "# compute logits", "\n", "# Einstein sum is more intuitive", "\n", "# positive logits: Nx1", "\n", "", "l_pos", "=", "torch", ".", "einsum", "(", "'nc,nc->n'", ",", "[", "q", ",", "k", "]", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "# negative logits: NxK", "\n", "l_neg", "=", "torch", ".", "einsum", "(", "'nc,ck->nk'", ",", "[", "q", ",", "self", ".", "queue", ".", "clone", "(", ")", ".", "detach", "(", ")", "]", ")", "\n", "\n", "# logits: Nx(1+K)", "\n", "logits", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "l_neg", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# apply temperature", "\n", "logits", "/=", "self", ".", "T", "\n", "\n", "# labels: positive key indicators", "\n", "labels", "=", "torch", ".", "zeros", "(", "logits", ".", "shape", "[", "0", "]", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "# dequeue and enqueue", "\n", "self", ".", "_dequeue_and_enqueue", "(", "k", ")", "\n", "\n", "return", "logits", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.builder.concat_all_gather": [[166, 178], ["torch.no_grad", "torch.no_grad", "torch.distributed.all_gather", "torch.distributed.all_gather", "torch.cat", "torch.cat", "torch.ones_like", "torch.ones_like", "range", "torch.distributed.get_world_size", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "concat_all_gather", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Performs all_gather operation on the provided tensors.\n    *** Warning ***: torch.distributed.all_gather has no gradient.\n    \"\"\"", "\n", "tensors_gather", "=", "[", "torch", ".", "ones_like", "(", "tensor", ")", "\n", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "tensors_gather", ",", "tensor", ",", "async_op", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "cat", "(", "tensors_gather", ",", "dim", "=", "0", ")", "\n", "return", "output", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.loader.TwoCropsTransform.__init__": [[9, 11], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base_transform", ")", ":", "\n", "        ", "self", ".", "base_transform", "=", "base_transform", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.loader.TwoCropsTransform.__call__": [[12, 16], ["loader.TwoCropsTransform.base_transform", "loader.TwoCropsTransform.base_transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "q", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "k", "=", "self", ".", "base_transform", "(", "x", ")", "\n", "return", "[", "q", ",", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.loader.GaussianBlur.__init__": [[21, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "[", ".1", ",", "2.", "]", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.moco.loader.GaussianBlur.__call__": [[24, 28], ["random.uniform", "x.filter.filter.filter", "PIL.ImageFilter.GaussianBlur"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "sigma", "=", "random", ".", "uniform", "(", "self", ".", "sigma", "[", "0", "]", ",", "self", ".", "sigma", "[", "1", "]", ")", "\n", "x", "=", "x", ".", "filter", "(", "ImageFilter", ".", "GaussianBlur", "(", "radius", "=", "sigma", ")", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.align_and_update_state_dicts": [[10, 57], ["sorted", "sorted", "torch.as_tensor().view", "torch.as_tensor().view.max", "logging.getLogger", "enumerate", "list", "list", "len", "len", "max", "max", "idxs.tolist", "logging.getLogger.info", "model_state_dict.keys", "loaded_state_dict.keys", "i.endswith", "len", "torch.as_tensor", "log_str_template.format", "len", "len", "tuple"], "function", ["None"], ["def", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", ":", "\n", "    ", "\"\"\"\n    Strategy: suppose that the models that we will create will have prefixes appended\n    to each of its keys, for example due to an extra level of nesting that the original\n    pre-trained weights from ImageNet won't contain. For example, model.state_dict()\n    might return backbone[0].body.res2.conv1.weight, while the pre-trained model contains\n    res2.conv1.weight. We thus want to match both parameters together.\n    For that, we look for each model weight, look among all loaded keys if there is one\n    that is a suffix of the current weight name, and use it if that's the case.\n    If multiple matches exist, take the one with longest size\n    of the corresponding name. For example, for the same model as before, the pretrained\n    weight file can contain both res2.conv1.weight, as well as conv1.weight. In this case,\n    we want to match backbone[0].body.conv1.weight to conv1.weight, and\n    backbone[0].body.res2.conv1.weight to res2.conv1.weight.\n    \"\"\"", "\n", "current_keys", "=", "sorted", "(", "list", "(", "model_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "loaded_keys", "=", "sorted", "(", "list", "(", "loaded_state_dict", ".", "keys", "(", ")", ")", ")", "\n", "# get a matrix of string matches, where each (i, j) entry correspond to the size of the", "\n", "# loaded_key string, if it matches", "\n", "match_matrix", "=", "[", "\n", "len", "(", "j", ")", "if", "i", ".", "endswith", "(", "j", ")", "else", "0", "for", "i", "in", "current_keys", "for", "j", "in", "loaded_keys", "\n", "]", "\n", "match_matrix", "=", "torch", ".", "as_tensor", "(", "match_matrix", ")", ".", "view", "(", "\n", "len", "(", "current_keys", ")", ",", "len", "(", "loaded_keys", ")", "\n", ")", "\n", "max_match_size", ",", "idxs", "=", "match_matrix", ".", "max", "(", "1", ")", "\n", "# remove indices that correspond to no-match", "\n", "idxs", "[", "max_match_size", "==", "0", "]", "=", "-", "1", "\n", "\n", "# used for logging", "\n", "max_size", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "current_keys", "]", ")", "if", "current_keys", "else", "1", "\n", "max_size_loaded", "=", "max", "(", "[", "len", "(", "key", ")", "for", "key", "in", "loaded_keys", "]", ")", "if", "loaded_keys", "else", "1", "\n", "log_str_template", "=", "\"{: <{}} loaded from {: <{}} of shape {}\"", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "for", "idx_new", ",", "idx_old", "in", "enumerate", "(", "idxs", ".", "tolist", "(", ")", ")", ":", "\n", "        ", "if", "idx_old", "==", "-", "1", ":", "\n", "            ", "continue", "\n", "", "key", "=", "current_keys", "[", "idx_new", "]", "\n", "key_old", "=", "loaded_keys", "[", "idx_old", "]", "\n", "model_state_dict", "[", "key", "]", "=", "loaded_state_dict", "[", "key_old", "]", "\n", "logger", ".", "info", "(", "\n", "log_str_template", ".", "format", "(", "\n", "key", ",", "\n", "max_size", ",", "\n", "key_old", ",", "\n", "max_size_loaded", ",", "\n", "tuple", "(", "loaded_state_dict", "[", "key_old", "]", ".", "shape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.strip_prefix_if_present": [[61, 69], ["sorted", "collections.OrderedDict", "state_dict.items", "state_dict.keys", "all", "key.startswith", "key.replace"], "function", ["None"], ["", "", "def", "strip_prefix_if_present", "(", "state_dict", ",", "prefix", ")", ":", "\n", "    ", "keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "all", "(", "key", ".", "startswith", "(", "prefix", ")", "for", "key", "in", "keys", ")", ":", "\n", "        ", "return", "state_dict", "\n", "", "stripped_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", ",", "value", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "stripped_state_dict", "[", "key", ".", "replace", "(", "prefix", ",", "\"\"", ")", "]", "=", "value", "\n", "", "return", "stripped_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict": [[71, 81], ["model.state_dict", "model_serialization.strip_prefix_if_present", "model_serialization.align_and_update_state_dicts", "model.load_state_dict"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.strip_prefix_if_present", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.align_and_update_state_dicts", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load_state_dict", "(", "model", ",", "loaded_state_dict", ")", ":", "\n", "    ", "model_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "# if the state_dict comes from a model that was wrapped in a", "\n", "# DataParallel or DistributedDataParallel during serialization,", "\n", "# remove the \"module\" prefix before performing the matching", "\n", "loaded_state_dict", "=", "strip_prefix_if_present", "(", "loaded_state_dict", ",", "prefix", "=", "\"module.\"", ")", "\n", "align_and_update_state_dicts", "(", "model_state_dict", ",", "loaded_state_dict", ")", "\n", "\n", "# use strict loading", "\n", "model", ".", "load_state_dict", "(", "model_state_dict", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.mkdir": [[9, 15], ["os.makedirs"], "function", ["None"], ["def", "mkdir", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "", "except", "OSError", "as", "e", ":", "\n", "        ", "if", "e", ".", "errno", "!=", "errno", ".", "EEXIST", ":", "\n", "            ", "raise", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_labels": [[17, 34], ["comm.is_main_process", "logging.getLogger", "hasattr", "os.path.join", "logging.getLogger.info", "ids_to_labels.update", "logging.getLogger.warning", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.is_main_process", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "", "", "def", "save_labels", "(", "dataset_list", ",", "output_dir", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "ids_to_labels", "=", "{", "}", "\n", "for", "dataset", "in", "dataset_list", ":", "\n", "            ", "if", "hasattr", "(", "dataset", ",", "'categories'", ")", ":", "\n", "                ", "ids_to_labels", ".", "update", "(", "dataset", ".", "categories", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Dataset [{}] has no categories attribute, labels.json file won't be created\"", ".", "format", "(", "\n", "dataset", ".", "__class__", ".", "__name__", ")", ")", "\n", "\n", "", "", "if", "ids_to_labels", ":", "\n", "            ", "labels_file", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'labels.json'", ")", "\n", "logger", ".", "info", "(", "\"Saving labels mapping into {}\"", ".", "format", "(", "labels_file", ")", ")", "\n", "with", "open", "(", "labels_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "json", ".", "dump", "(", "ids_to_labels", ",", "f", ",", "indent", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.miscellaneous.save_config": [[36, 40], ["comm.is_main_process", "open", "f.write"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.is_main_process"], ["", "", "", "", "def", "save_config", "(", "cfg", ",", "path", ")", ":", "\n", "    ", "if", "is_main_process", "(", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "cfg", ".", "text", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size": [[13, 19], ["torch.get_world_size", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["def", "get_world_size", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "1", "\n", "", "return", "dist", ".", "get_world_size", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank": [[21, 27], ["torch.get_rank", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["", "def", "get_rank", "(", ")", ":", "\n", "    ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "0", "\n", "", "return", "dist", ".", "get_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.is_main_process": [[29, 31], ["comm.get_rank"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["", "def", "is_main_process", "(", ")", ":", "\n", "    ", "return", "get_rank", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize": [[33, 46], ["torch.get_world_size", "torch.barrier", "torch.is_available", "torch.is_initialized"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size"], ["", "def", "synchronize", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper function to synchronize (barrier) among all processes when\n    using distributed training\n    \"\"\"", "\n", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "        ", "return", "\n", "", "if", "not", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "\n", "", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "\n", "", "dist", ".", "barrier", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather": [[48, 89], ["comm.get_world_size", "pickle.dumps", "torch.ByteStorage.from_buffer", "torch.ByteStorage.from_buffer", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.LongTensor().to", "torch.LongTensor().to", "torch.all_gather", "max", "torch.all_gather", "zip", "torch.LongTensor().to", "torch.LongTensor().to", "int", "tensor_list.append", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat", "torch.cat", "data_list.append", "torch.ByteTensor", "torch.ByteTensor", "torch.LongTensor", "torch.LongTensor", "range", "size.item", "torch.ByteTensor().to", "torch.ByteTensor().to", "torch.cat.cpu().numpy().tobytes", "pickle.loads", "torch.LongTensor", "torch.LongTensor", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.numel", "torch.ByteTensor", "torch.ByteTensor", "torch.cat.cpu().numpy", "torch.cat.cpu"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.all_gather"], ["", "def", "all_gather", "(", "data", ")", ":", "\n", "    ", "\"\"\"\n    Run all_gather on arbitrary picklable data (not necessarily tensors)\n    Args:\n        data: any picklable object\n    Returns:\n        list[data]: list of data gathered from each rank\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "==", "1", ":", "\n", "        ", "return", "[", "data", "]", "\n", "\n", "# serialized to a Tensor", "\n", "", "buffer", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "storage", "=", "torch", ".", "ByteStorage", ".", "from_buffer", "(", "buffer", ")", "\n", "tensor", "=", "torch", ".", "ByteTensor", "(", "storage", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "\n", "# obtain Tensor size of each rank", "\n", "local_size", "=", "torch", ".", "LongTensor", "(", "[", "tensor", ".", "numel", "(", ")", "]", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "size_list", "=", "[", "torch", ".", "LongTensor", "(", "[", "0", "]", ")", ".", "to", "(", "\"cuda\"", ")", "for", "_", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "size_list", ",", "local_size", ")", "\n", "size_list", "=", "[", "int", "(", "size", ".", "item", "(", ")", ")", "for", "size", "in", "size_list", "]", "\n", "max_size", "=", "max", "(", "size_list", ")", "\n", "\n", "# receiving Tensor from all ranks", "\n", "# we pad the tensor because torch all_gather does not support", "\n", "# gathering tensors of different shapes", "\n", "tensor_list", "=", "[", "]", "\n", "for", "_", "in", "size_list", ":", "\n", "        ", "tensor_list", ".", "append", "(", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", ")", "\n", "", "if", "local_size", "!=", "max_size", ":", "\n", "        ", "padding", "=", "torch", ".", "ByteTensor", "(", "size", "=", "(", "max_size", "-", "local_size", ",", ")", ")", ".", "to", "(", "\"cuda\"", ")", "\n", "tensor", "=", "torch", ".", "cat", "(", "(", "tensor", ",", "padding", ")", ",", "dim", "=", "0", ")", "\n", "", "dist", ".", "all_gather", "(", "tensor_list", ",", "tensor", ")", "\n", "\n", "data_list", "=", "[", "]", "\n", "for", "size", ",", "tensor", "in", "zip", "(", "size_list", ",", "tensor_list", ")", ":", "\n", "        ", "buffer", "=", "tensor", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tobytes", "(", ")", "[", ":", "size", "]", "\n", "data_list", ".", "append", "(", "pickle", ".", "loads", "(", "buffer", ")", ")", "\n", "\n", "", "return", "data_list", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.reduce_dict": [[91, 118], ["comm.get_world_size", "torch.no_grad", "torch.no_grad", "sorted", "torch.stack", "torch.stack", "torch.reduce", "input_dict.keys", "names.append", "torch.stack.append", "torch.get_rank", "zip"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["", "def", "reduce_dict", "(", "input_dict", ",", "average", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        input_dict (dict): all the values will be reduced\n        average (bool): whether to do average or sum\n    Reduce the values in the dictionary from all processes so that process with rank\n    0 has the averaged results. Returns a dict with the same fields as\n    input_dict, after reduction.\n    \"\"\"", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "if", "world_size", "<", "2", ":", "\n", "        ", "return", "input_dict", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "names", "=", "[", "]", "\n", "values", "=", "[", "]", "\n", "# sort the keys so that they are consistent across processes", "\n", "for", "k", "in", "sorted", "(", "input_dict", ".", "keys", "(", ")", ")", ":", "\n", "            ", "names", ".", "append", "(", "k", ")", "\n", "values", ".", "append", "(", "input_dict", "[", "k", "]", ")", "\n", "", "values", "=", "torch", ".", "stack", "(", "values", ",", "dim", "=", "0", ")", "\n", "dist", ".", "reduce", "(", "values", ",", "dst", "=", "0", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", "and", "average", ":", "\n", "# only main process gets accumulated, so only divide by", "\n", "# world_size in this case", "\n", "            ", "values", "/=", "world_size", "\n", "", "reduced_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "names", ",", "values", ")", "}", "\n", "", "return", "reduced_dict", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.logger.setup_logger": [[7, 26], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.Formatter", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.FileHandler.setFormatter", "logging.getLogger.addHandler", "os.path.join"], "function", ["None"], ["def", "setup_logger", "(", "name", ",", "save_dir", ",", "distributed_rank", ",", "filename", "=", "\"log.txt\"", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "# don't log results for the non-master process", "\n", "if", "distributed_rank", ">", "0", ":", "\n", "        ", "return", "logger", "\n", "", "ch", "=", "logging", ".", "StreamHandler", "(", "stream", "=", "sys", ".", "stdout", ")", "\n", "ch", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "\"%(asctime)s %(name)s %(levelname)s: %(message)s\"", ")", "\n", "ch", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "ch", ")", "\n", "\n", "if", "save_dir", ":", "\n", "        ", "fh", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "filename", ")", ")", "\n", "fh", ".", "setLevel", "(", "logging", ".", "DEBUG", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "fh", ")", "\n", "\n", "", "return", "logger", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.load_model_weights.load_model_weights": [[4, 151], ["print", "torch.load", "list", "model.load_state_dict", "print", "state_dict.keys", "k.startswith", "print", "list", "model.load_state_dict", "print", "state_dict.keys", "print", "list", "model.load_state_dict", "print", "k.startswith", "model.load_state_dict", "print", "state_dict.keys", "k.startswith", "print", "list", "model.load_state_dict", "print", "k.startswith", "state_dict.keys", "k.startswith", "list", "model.load_state_dict", "k.startswith", "k.startswith", "state_dict.keys", "k.startswith", "k.startswith", "list", "model.load_state_dict", "print", "state_dict.keys", "k.startswith", "k.startswith", "list", "model.load_state_dict", "len", "state_dict.keys", "k.startswith", "list", "model.load_state_dict", "print", "len", "state_dict.keys", "k.startswith", "list", "model.load_state_dict", "state_dict.keys", "k.startswith", "len", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["def", "load_model_weights", "(", "model", ",", "weights_file", ",", "model_type", ",", "head_id", "=", "0", ")", ":", "\n", "    ", "print", "(", "\"=> Initializing model '{}'\"", ".", "format", "(", "weights_file", ")", ")", "\n", "pre_model", "=", "torch", ".", "load", "(", "weights_file", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "model_type", "==", "\"simclr\"", ":", "\n", "# rename simclr pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with simclr.", "\n", "            ", "if", "k", ".", "startswith", "(", "'backbone.'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.feature_module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'backbone.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "", "elif", "model_type", "==", "\"moco\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "print", "(", "\"=> Initializing feature model '{}'\"", ".", "format", "(", "weights_file", ")", ")", "\n", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with encoder_q of moco.", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", "and", "(", "not", "k", ".", "startswith", "(", "'module.encoder_q.mlp'", ")", "and", "not", "k", ".", "startswith", "(", "'module.encoder_q.fc'", ")", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.feature_module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'module.encoder_q.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "elif", "model_type", "==", "\"moco_select\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "print", "(", "\"=> Initializing feature model '{}'\"", ".", "format", "(", "weights_file", ")", ")", "\n", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "\n", "if", "head_id", "==", "0", ":", "\n", "            ", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "return", "0", "\n", "\n", "", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# print(k)", "\n", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.head'", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "'module.head.head_{}'", ".", "format", "(", "head_id", ")", ")", ":", "\n", "\n", "                    ", "state_dict", "[", "'module.head.head_0.{}'", ".", "format", "(", "k", "[", "len", "(", "'module.head.head_{}.'", ".", "format", "(", "head_id", ")", ")", ":", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "elif", "model_type", "==", "\"moco_all\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "print", "(", "\"=> Initializing feature model '{}'\"", ".", "format", "(", "weights_file", ")", ")", "\n", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with encoder_q of moco.", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.feature_module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'module.encoder_q.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "elif", "model_type", "==", "\"simclr_sim\"", ":", "\n", "\n", "# rename simclr pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with simcrl_sim.", "\n", "            ", "if", "k", ".", "startswith", "(", "'backbone.'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'backbone.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "if", "k", ".", "startswith", "(", "'contrastive_head.'", ")", ":", "\n", "                ", "state_dict", "[", "\"module.mlp.{}\"", ".", "format", "(", "k", "[", "len", "(", "'contrastive_head.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n", "", "elif", "model_type", "==", "\"simclr_sim_feature\"", ":", "\n", "\n", "# rename simclr pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with simcrl_sim.", "\n", "            ", "if", "k", ".", "startswith", "(", "'backbone.'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'backbone.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "if", "k", ".", "startswith", "(", "'contrastive_head.'", ")", ":", "\n", "                ", "state_dict", "[", "\"module.mlp.{}\"", ".", "format", "(", "k", "[", "len", "(", "'contrastive_head.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "elif", "model_type", "==", "\"moco_sim\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with encoder_q of moco.", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'module.encoder_q.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n", "", "elif", "model_type", "==", "\"moco_sim_feature\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with encoder_q of moco.", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"module.{}\"", ".", "format", "(", "k", "[", "len", "(", "'module.encoder_q.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "msg", "=", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "False", ")", "\n", "print", "(", "msg", ")", "\n", "\n", "", "elif", "model_type", "==", "\"moco_sim1\"", ":", "\n", "# rename moco pre-trained keys", "\n", "        ", "state_dict", "=", "pre_model", "[", "'state_dict'", "]", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "# Initialize the feature module with encoder_q of moco.", "\n", "            ", "if", "k", ".", "startswith", "(", "'module.encoder_q'", ")", ":", "\n", "# remove prefix", "\n", "                ", "state_dict", "[", "\"{}\"", ".", "format", "(", "k", "[", "len", "(", "'module.encoder_q.'", ")", ":", "]", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "# delete renamed or unused k", "\n", "", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ",", "strict", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.__init__": [[31, 33], ["dict.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "Registry", ",", "self", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register": [[34, 46], ["registry._register_generic", "registry._register_generic"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry._register_generic", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry._register_generic"], ["", "def", "register", "(", "self", ",", "module_name", ",", "module", "=", "None", ")", ":", "\n", "# used as function call", "\n", "        ", "if", "module", "is", "not", "None", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "module", ")", "\n", "return", "\n", "\n", "# used as decorator", "\n", "", "def", "register_fn", "(", "fn", ")", ":", "\n", "            ", "_register_generic", "(", "self", ",", "module_name", ",", "fn", ")", "\n", "return", "fn", "\n", "\n", "", "return", "register_fn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry._register_generic": [[4, 7], ["None"], "function", ["None"], ["def", "_register_generic", "(", "module_dict", ",", "module_name", ",", "module", ")", ":", "\n", "    ", "assert", "module_name", "not", "in", "module_dict", "\n", "module_dict", "[", "module_name", "]", "=", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_zoo.cache_url": [[20, 62], ["urlparse", "os.path.basename", "os.path.join", "sim2sem.utils.comm.synchronize", "os.path.expanduser", "os.getenv", "os.path.exists", "os.makedirs", "urlparse.path.replace", "sim2sem.utils.comm.is_main_process", "sys.stderr.write", "HASH_REGEX.search", "_download_url_to_file", "os.getenv", "os.path.join", "os.path.exists", "hash_prefix.group.group", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.synchronize", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.is_main_process"], ["def", "cache_url", "(", "url", ",", "model_dir", "=", "None", ",", "progress", "=", "True", ")", ":", "\n", "    ", "r\"\"\"Loads the Torch serialized object at the given URL.\n    If the object is already present in `model_dir`, it's deserialized and\n    returned. The filename part of the URL should follow the naming convention\n    ``filename-<sha256>.ext`` where ``<sha256>`` is the first eight or more\n    digits of the SHA256 hash of the contents of the file. The hash is used to\n    ensure unique names and to verify the contents of the file.\n    The default value of `model_dir` is ``$TORCH_HOME/models`` where\n    ``$TORCH_HOME`` defaults to ``~/.torch``. The default directory can be\n    overridden with the ``$TORCH_MODEL_ZOO`` environment variable.\n    Args:\n        url (string): URL of the object to download\n        model_dir (string, optional): directory in which to save the object\n        progress (bool, optional): whether or not to display a progress bar to stderr\n    Example:\n        >>> cached_file = maskrcnn_benchmark.utils.model_zoo.cache_url('https://s3.amazonaws.com/pytorch/models/resnet18-5c106cde.pth')\n    \"\"\"", "\n", "if", "model_dir", "is", "None", ":", "\n", "        ", "torch_home", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "getenv", "(", "\"TORCH_HOME\"", ",", "\"~/.torch\"", ")", ")", "\n", "model_dir", "=", "os", ".", "getenv", "(", "\"TORCH_MODEL_ZOO\"", ",", "os", ".", "path", ".", "join", "(", "torch_home", ",", "\"models\"", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "parts", "=", "urlparse", "(", "url", ")", "\n", "filename", "=", "os", ".", "path", ".", "basename", "(", "parts", ".", "path", ")", "\n", "if", "filename", "==", "\"model_final.pkl\"", ":", "\n", "# workaround as pre-trained Caffe2 models from Detectron have all the same filename", "\n", "# so make the full path the filename by replacing / with _", "\n", "        ", "filename", "=", "parts", ".", "path", ".", "replace", "(", "\"/\"", ",", "\"_\"", ")", "\n", "", "cached_file", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cached_file", ")", "and", "is_main_process", "(", ")", ":", "\n", "        ", "sys", ".", "stderr", ".", "write", "(", "'Downloading: \"{}\" to {}\\n'", ".", "format", "(", "url", ",", "cached_file", ")", ")", "\n", "hash_prefix", "=", "HASH_REGEX", ".", "search", "(", "filename", ")", "\n", "if", "hash_prefix", "is", "not", "None", ":", "\n", "            ", "hash_prefix", "=", "hash_prefix", ".", "group", "(", "1", ")", "\n", "# workaround: Caffe2 models don't have a hash, but follow the R-50 convention,", "\n", "# which matches the hash PyTorch uses. So we skip the hash matching", "\n", "# if the hash_prefix is less than 6 characters", "\n", "if", "len", "(", "hash_prefix", ")", "<", "6", ":", "\n", "                ", "hash_prefix", "=", "None", "\n", "", "", "_download_url_to_file", "(", "url", ",", "cached_file", ",", "hash_prefix", ",", "progress", "=", "progress", ")", "\n", "", "synchronize", "(", ")", "\n", "return", "cached_file", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.__init__": [[13, 18], ["collections.deque"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "window_size", "=", "20", ")", ":", "\n", "        ", "self", ".", "deque", "=", "deque", "(", "maxlen", "=", "window_size", ")", "\n", "self", ".", "series", "=", "[", "]", "\n", "self", ".", "total", "=", "0.0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.update": [[19, 24], ["metric_logger.SmoothedValue.deque.append", "metric_logger.SmoothedValue.series.append"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "deque", ".", "append", "(", "value", ")", "\n", "self", ".", "series", ".", "append", "(", "value", ")", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "total", "+=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.median": [[25, 29], ["torch.tensor", "torch.tensor.median().item", "list", "torch.tensor.median"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.median"], ["", "@", "property", "\n", "def", "median", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "median", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.avg": [[30, 34], ["torch.tensor", "torch.tensor.mean().item", "list", "torch.tensor.mean"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "d", "=", "torch", ".", "tensor", "(", "list", "(", "self", ".", "deque", ")", ")", "\n", "return", "d", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.SmoothedValue.global_avg": [[35, 38], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "global_avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.__init__": [[41, 44], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "delimiter", "=", "\"\\t\"", ")", ":", "\n", "        ", "self", ".", "meters", "=", "defaultdict", "(", "SmoothedValue", ")", "\n", "self", ".", "delimiter", "=", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update": [[45, 51], ["kwargs.items", "isinstance", "isinstance", "metric_logger.MetricLogger.meters[].update", "v.item.item.item"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update"], ["", "def", "update", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "v", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "v", "=", "v", ".", "item", "(", ")", "\n", "", "assert", "isinstance", "(", "v", ",", "(", "float", ",", "int", ")", ")", "\n", "self", ".", "meters", "[", "k", "]", ".", "update", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.__getattr__": [[52, 59], ["AttributeError", "type"], "methods", ["None"], ["", "", "def", "__getattr__", "(", "self", ",", "attr", ")", ":", "\n", "        ", "if", "attr", "in", "self", ".", "meters", ":", "\n", "            ", "return", "self", ".", "meters", "[", "attr", "]", "\n", "", "if", "attr", "in", "self", ".", "__dict__", ":", "\n", "            ", "return", "self", ".", "__dict__", "[", "attr", "]", "\n", "", "raise", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "type", "(", "self", ")", ".", "__name__", ",", "attr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.__str__": [[60, 67], ["metric_logger.MetricLogger.meters.items", "metric_logger.MetricLogger.delimiter.join", "loss_str.append"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "loss_str", "=", "[", "]", "\n", "for", "name", ",", "meter", "in", "self", ".", "meters", ".", "items", "(", ")", ":", "\n", "            ", "loss_str", ".", "append", "(", "\n", "\"{}: {:.4f} ({:.4f})\"", ".", "format", "(", "name", ",", "meter", ".", "median", ",", "meter", ".", "global_avg", ")", "\n", ")", "\n", "", "return", "self", ".", "delimiter", ".", "join", "(", "loss_str", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_basic_resnet_weights": [[12, 63], ["k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["def", "_rename_basic_resnet_weights", "(", "layer_keys", ")", ":", "\n", "    ", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_\"", ",", "\".\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".w\"", ",", "\".weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".bn\"", ",", "\"_bn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".b\"", ",", "\".bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.s\"", ",", "\"_bn.scale\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasranch\"", ",", "\".branch\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"bbox.pred\"", ",", "\"bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"cls.score\"", ",", "\"cls_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res.conv1_\"", ",", "\"conv1_\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# RPN / Faster RCNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".biasbox\"", ",", "\".bbox\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.rpn\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox.pred\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.cls.logits\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Affine-Channel -> BatchNorm enaming", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"_bn.scale\"", ",", "\"_bn.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Make torchvision-compatible", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1_bn.\"", ",", "\"bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res2.\"", ",", "\"layer1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res3.\"", ",", "\"layer2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res4.\"", ",", "\"layer3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"res5.\"", ",", "\"layer4.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a.\"", ",", "\".conv1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2a_bn.\"", ",", "\".bn1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b.\"", ",", "\".conv2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2b_bn.\"", ",", "\".bn2.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c.\"", ",", "\".conv3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch2c_bn.\"", ",", "\".bn3.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1.\"", ",", "\".downsample.0.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".branch1_bn.\"", ",", "\".downsample.1.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# GroupNorm", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.s\"", ",", "\"bn1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv1.gn.bias\"", ",", "\"bn1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.s\"", ",", "\"bn2.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv2.gn.bias\"", ",", "\"bn2.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.s\"", ",", "\"bn3.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv3.gn.bias\"", ",", "\"bn3.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.s\"", ",", "\"downsample.1.weight\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"downsample.0.gn.bias\"", ",", "\"downsample.1.bias\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_fpn_weights": [[64, 82], ["enumerate", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace"], "function", ["None"], ["", "def", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", ":", "\n", "    ", "for", "mapped_idx", ",", "stage_name", "in", "enumerate", "(", "stage_names", ",", "1", ")", ":", "\n", "        ", "suffix", "=", "\"\"", "\n", "if", "mapped_idx", "<", "4", ":", "\n", "            ", "suffix", "=", "\".lateral\"", "\n", "", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"fpn.inner.layer{}.sum{}\"", ".", "format", "(", "stage_name", ",", "suffix", ")", ",", "\"fpn_inner{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"fpn.layer{}.sum\"", ".", "format", "(", "stage_name", ")", ",", "\"fpn_layer{}\"", ".", "format", "(", "mapped_idx", ")", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "\n", "", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.conv.fpn2\"", ",", "\"rpn.conv\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.bbox_pred.fpn2\"", ",", "\"rpn.bbox_pred\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "\n", "k", ".", "replace", "(", "\"rpn.cls_logits.fpn2\"", ",", "\"rpn.cls_logits\"", ")", "for", "k", "in", "layer_keys", "\n", "]", "\n", "\n", "return", "layer_keys", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_weights_for_resnet": [[84, 131], ["sorted", "sorted", "c2_model_loading._rename_basic_resnet_weights", "c2_model_loading._rename_fpn_weights", "logging.getLogger", "logging.getLogger.info", "max", "collections.OrderedDict", "weights.keys", "weights.keys", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "k.replace", "torch.from_numpy", "logging.getLogger.info", "zip", "len"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_basic_resnet_weights", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_fpn_weights"], ["", "def", "_rename_weights_for_resnet", "(", "weights", ",", "stage_names", ")", ":", "\n", "    ", "original_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "layer_keys", "=", "sorted", "(", "weights", ".", "keys", "(", ")", ")", "\n", "\n", "# for X-101, rename output to fc1000 to avoid conflicts afterwards", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_b\"", "else", "\"fc1000_b\"", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", "if", "k", "!=", "\"pred_w\"", "else", "\"fc1000_w\"", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# performs basic renaming: _ -> . , etc", "\n", "layer_keys", "=", "_rename_basic_resnet_weights", "(", "layer_keys", ")", "\n", "\n", "# FPN", "\n", "layer_keys", "=", "_rename_fpn_weights", "(", "layer_keys", ",", "stage_names", ")", "\n", "\n", "# Mask R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"mask.fcn.logits\"", ",", "\"mask_fcn_logits\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\".[mask].fcn\"", ",", "\"mask_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv5.mask\"", ",", "\"conv5_mask\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Keypoint R-CNN", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score.lowres\"", ",", "\"kps_score_lowres\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"kps.score\"", ",", "\"kps_score\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"conv.fcn\"", ",", "\"conv_fcn\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "# Rename for our RPN structure", "\n", "layer_keys", "=", "[", "k", ".", "replace", "(", "\"rpn.\"", ",", "\"rpn.head.\"", ")", "for", "k", "in", "layer_keys", "]", "\n", "\n", "key_map", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "zip", "(", "original_keys", ",", "layer_keys", ")", "}", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping C2 weights\"", ")", "\n", "max_c2_key_size", "=", "max", "(", "[", "len", "(", "k", ")", "for", "k", "in", "original_keys", "if", "\"_momentum\"", "not", "in", "k", "]", ")", "\n", "\n", "new_weights", "=", "OrderedDict", "(", ")", "\n", "for", "k", "in", "original_keys", ":", "\n", "        ", "v", "=", "weights", "[", "k", "]", "\n", "if", "\"_momentum\"", "in", "k", ":", "\n", "            ", "continue", "\n", "# if 'fc1000' in k:", "\n", "#     continue", "\n", "", "w", "=", "torch", ".", "from_numpy", "(", "v", ")", "\n", "# if \"bn\" in k:", "\n", "#     w = w.view(1, -1, 1, 1)", "\n", "logger", ".", "info", "(", "\"C2 name: {: <{}} mapped name: {}\"", ".", "format", "(", "k", ",", "max_c2_key_size", ",", "key_map", "[", "k", "]", ")", ")", "\n", "new_weights", "[", "key_map", "[", "k", "]", "]", "=", "w", "\n", "\n", "", "return", "new_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._load_c2_pickled_weights": [[133, 144], ["open", "pickle.load", "pickle.load"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "def", "_load_c2_pickled_weights", "(", "file_path", ")", ":", "\n", "    ", "with", "open", "(", "file_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "if", "torch", ".", "_six", ".", "PY3", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "\"latin1\"", ")", "\n", "", "else", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "if", "\"blobs\"", "in", "data", ":", "\n", "        ", "weights", "=", "data", "[", "\"blobs\"", "]", "\n", "", "else", ":", "\n", "        ", "weights", "=", "data", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_conv_weights_for_deformable_conv_layers": [[146, 171], ["logging.getLogger", "logging.getLogger.info", "sorted", "enumerate", "state_dict.keys", "re.match", "old_key.replace", "logging.getLogger.info", "old_key.find"], "function", ["None"], ["", "def", "_rename_conv_weights_for_deformable_conv_layers", "(", "state_dict", ",", "cfg", ")", ":", "\n", "    ", "import", "re", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "logger", ".", "info", "(", "\"Remapping conv weights for deformable conv weights\"", ")", "\n", "layer_keys", "=", "sorted", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "for", "ix", ",", "stage_with_dcn", "in", "enumerate", "(", "cfg", ".", "MODEL", ".", "RESNETS", ".", "STAGE_WITH_DCN", ",", "1", ")", ":", "\n", "        ", "if", "not", "stage_with_dcn", ":", "\n", "            ", "continue", "\n", "", "for", "old_key", "in", "layer_keys", ":", "\n", "            ", "pattern", "=", "\".*layer{}.*conv2.*\"", ".", "format", "(", "ix", ")", "\n", "r", "=", "re", ".", "match", "(", "pattern", ",", "old_key", ")", "\n", "if", "r", "is", "None", ":", "\n", "                ", "continue", "\n", "", "for", "param", "in", "[", "\"weight\"", ",", "\"bias\"", "]", ":", "\n", "                ", "if", "old_key", ".", "find", "(", "param", ")", "is", "-", "1", ":", "\n", "                    ", "continue", "\n", "", "new_key", "=", "old_key", ".", "replace", "(", "\n", "\"conv2.{}\"", ".", "format", "(", "param", ")", ",", "\"conv2.conv.{}\"", ".", "format", "(", "param", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"pattern: {}, old_key: {}, new_key: {}\"", ".", "format", "(", "\n", "pattern", ",", "old_key", ",", "new_key", "\n", ")", ")", "\n", "state_dict", "[", "new_key", "]", "=", "state_dict", "[", "old_key", "]", "\n", "del", "state_dict", "[", "old_key", "]", "\n", "", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading.load_resnet_c2_format": [[182, 203], ["C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "C2_FORMAT_LOADER.register", "c2_model_loading._load_c2_pickled_weights", "conv_body.replace().replace().replace", "arch.replace.replace", "c2_model_loading._rename_weights_for_resnet", "c2_model_loading._rename_conv_weights_for_deformable_conv_layers", "dict", "conv_body.replace().replace", "conv_body.replace"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.registry.Registry.register", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._load_c2_pickled_weights", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_weights_for_resnet", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading._rename_conv_weights_for_deformable_conv_layers"], ["@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C4\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-C5\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-50-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-101-FPN-RETINANET\"", ")", "\n", "@", "C2_FORMAT_LOADER", ".", "register", "(", "\"R-152-FPN\"", ")", "\n", "def", "load_resnet_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "state_dict", "=", "_load_c2_pickled_weights", "(", "f", ")", "\n", "conv_body", "=", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "\n", "arch", "=", "conv_body", ".", "replace", "(", "\"-C4\"", ",", "\"\"", ")", ".", "replace", "(", "\"-C5\"", ",", "\"\"", ")", ".", "replace", "(", "\"-FPN\"", ",", "\"\"", ")", "\n", "arch", "=", "arch", ".", "replace", "(", "\"-RETINANET\"", ",", "\"\"", ")", "\n", "stages", "=", "_C2_STAGE_NAMES", "[", "arch", "]", "\n", "state_dict", "=", "_rename_weights_for_resnet", "(", "state_dict", ",", "stages", ")", "\n", "# ***********************************", "\n", "# for deformable convolutional layer", "\n", "state_dict", "=", "_rename_conv_weights_for_deformable_conv_layers", "(", "state_dict", ",", "cfg", ")", "\n", "# ***********************************", "\n", "return", "dict", "(", "model", "=", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading.load_c2_format": [[205, 207], ["None"], "function", ["None"], ["", "def", "load_c2_format", "(", "cfg", ",", "f", ")", ":", "\n", "    ", "return", "C2_FORMAT_LOADER", "[", "cfg", ".", "MODEL", ".", "BACKBONE", ".", "CONV_BODY", "]", "(", "cfg", ",", "f", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.is_filepath": [[16, 21], ["misc.is_str", "isinstance"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_str"], ["", "def", "is_filepath", "(", "x", ")", ":", "\n", "    ", "if", "is_str", "(", "x", ")", "or", "isinstance", "(", "x", ",", "Path", ")", ":", "\n", "        ", "return", "True", "\n", "", "else", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.fopen": [[23, 28], ["misc.is_str", "open", "isinstance", "filepath.open"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_str"], ["", "", "def", "fopen", "(", "filepath", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "is_str", "(", "filepath", ")", ":", "\n", "        ", "return", "open", "(", "filepath", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "elif", "isinstance", "(", "filepath", ",", "Path", ")", ":", "\n", "        ", "return", "filepath", ".", "open", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.check_file_exist": [[30, 33], ["os.isfile", "FileNotFoundError", "msg_tmpl.format"], "function", ["None"], ["", "", "def", "check_file_exist", "(", "filename", ",", "msg_tmpl", "=", "'file \"{}\" does not exist'", ")", ":", "\n", "    ", "if", "not", "osp", ".", "isfile", "(", "filename", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "msg_tmpl", ".", "format", "(", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.mkdir_or_exist": [[35, 44], ["os.expanduser", "os.makedirs", "os.makedirs", "os.isdir", "os.makedirs", "os.makedirs"], "function", ["None"], ["", "", "def", "mkdir_or_exist", "(", "dir_name", ",", "mode", "=", "0o777", ")", ":", "\n", "    ", "if", "dir_name", "==", "''", ":", "\n", "        ", "return", "\n", "", "dir_name", "=", "osp", ".", "expanduser", "(", "dir_name", ")", "\n", "if", "six", ".", "PY3", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ",", "mode", "=", "mode", ",", "exist_ok", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "if", "not", "osp", ".", "isdir", "(", "dir_name", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "dir_name", ",", "mode", "=", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.symlink": [[46, 50], ["os.symlink", "os.symlink", "os.path.lexists", "os.path.lexists", "os.remove", "os.remove"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.symlink", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.symlink"], ["", "", "", "def", "symlink", "(", "src", ",", "dst", ",", "overwrite", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "lexists", "(", "dst", ")", "and", "overwrite", ":", "\n", "        ", "os", ".", "remove", "(", "dst", ")", "\n", "", "os", ".", "symlink", "(", "src", ",", "dst", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path._scandir_py35": [[52, 61], ["os.scandir", "os.scandir", "entry.is_file", "filename.endswith"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.scandir", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.scandir"], ["", "def", "_scandir_py35", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "for", "entry", "in", "os", ".", "scandir", "(", "dir_path", ")", ":", "\n", "        ", "if", "not", "entry", ".", "is_file", "(", ")", ":", "\n", "            ", "continue", "\n", "", "filename", "=", "entry", ".", "name", "\n", "if", "suffix", "is", "None", ":", "\n", "            ", "yield", "filename", "\n", "", "elif", "filename", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "yield", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path._scandir_py": [[63, 71], ["os.listdir", "os.listdir", "os.isfile", "filename.endswith", "os.join"], "function", ["None"], ["", "", "", "def", "_scandir_py", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "for", "filename", "in", "os", ".", "listdir", "(", "dir_path", ")", ":", "\n", "        ", "if", "not", "osp", ".", "isfile", "(", "osp", ".", "join", "(", "dir_path", ",", "filename", ")", ")", ":", "\n", "            ", "continue", "\n", "", "if", "suffix", "is", "None", ":", "\n", "            ", "yield", "filename", "\n", "", "elif", "filename", ".", "endswith", "(", "suffix", ")", ":", "\n", "            ", "yield", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.scandir": [[73, 80], ["TypeError", "path._scandir_py35", "path._scandir_py", "isinstance"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path._scandir_py35", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path._scandir_py"], ["", "", "", "def", "scandir", "(", "dir_path", ",", "suffix", "=", "None", ")", ":", "\n", "    ", "if", "suffix", "is", "not", "None", "and", "not", "isinstance", "(", "suffix", ",", "(", "str", ",", "tuple", ")", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'\"suffix\" must be a string or tuple of strings'", ")", "\n", "", "if", "sys", ".", "version_info", ">=", "(", "3", ",", "5", ")", ":", "\n", "        ", "return", "_scandir_py35", "(", "dir_path", ",", "suffix", ")", "\n", "", "else", ":", "\n", "        ", "return", "_scandir_py", "(", "dir_path", ",", "suffix", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_str": [[16, 19], ["isinstance"], "function", ["None"], ["def", "is_str", "(", "x", ")", ":", "\n", "    ", "\"\"\"Whether the input is an string instance.\"\"\"", "\n", "return", "isinstance", "(", "x", ",", "six", ".", "string_types", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.iter_cast": [[21, 44], ["six.moves.map", "isinstance", "TypeError", "isinstance", "TypeError", "return_type"], "function", ["None"], ["", "def", "iter_cast", "(", "inputs", ",", "dst_type", ",", "return_type", "=", "None", ")", ":", "\n", "    ", "\"\"\"Cast elements of an iterable object into some type.\n\n    Args:\n        inputs (Iterable): The input object.\n        dst_type (type): Destination type.\n        return_type (type, optional): If specified, the output object will be\n            converted to this type, otherwise an iterator.\n\n    Returns:\n        iterator or specified type: The converted object.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "inputs", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'inputs must be an iterable object'", ")", "\n", "", "if", "not", "isinstance", "(", "dst_type", ",", "type", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'\"dst_type\" must be a valid type'", ")", "\n", "\n", "", "out_iterable", "=", "six", ".", "moves", ".", "map", "(", "dst_type", ",", "inputs", ")", "\n", "\n", "if", "return_type", "is", "None", ":", "\n", "        ", "return", "out_iterable", "\n", "", "else", ":", "\n", "        ", "return", "return_type", "(", "out_iterable", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.list_cast": [[46, 52], ["misc.iter_cast"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.iter_cast"], ["", "", "def", "list_cast", "(", "inputs", ",", "dst_type", ")", ":", "\n", "    ", "\"\"\"Cast elements of an iterable object into a list of some type.\n\n    A partial method of :func:`iter_cast`.\n    \"\"\"", "\n", "return", "iter_cast", "(", "inputs", ",", "dst_type", ",", "return_type", "=", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.tuple_cast": [[54, 60], ["misc.iter_cast"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.iter_cast"], ["", "def", "tuple_cast", "(", "inputs", ",", "dst_type", ")", ":", "\n", "    ", "\"\"\"Cast elements of an iterable object into a tuple of some type.\n\n    A partial method of :func:`iter_cast`.\n    \"\"\"", "\n", "return", "iter_cast", "(", "inputs", ",", "dst_type", ",", "return_type", "=", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_seq_of": [[62, 84], ["isinstance", "isinstance", "isinstance"], "function", ["None"], ["", "def", "is_seq_of", "(", "seq", ",", "expected_type", ",", "seq_type", "=", "None", ")", ":", "\n", "    ", "\"\"\"Check whether it is a sequence of some type.\n\n    Args:\n        seq (Sequence): The sequence to be checked.\n        expected_type (type): Expected type of sequence items.\n        seq_type (type, optional): Expected sequence type.\n\n    Returns:\n        bool: Whether the sequence is valid.\n    \"\"\"", "\n", "if", "seq_type", "is", "None", ":", "\n", "        ", "exp_seq_type", "=", "collections_abc", ".", "Sequence", "\n", "", "else", ":", "\n", "        ", "assert", "isinstance", "(", "seq_type", ",", "type", ")", "\n", "exp_seq_type", "=", "seq_type", "\n", "", "if", "not", "isinstance", "(", "seq", ",", "exp_seq_type", ")", ":", "\n", "        ", "return", "False", "\n", "", "for", "item", "in", "seq", ":", "\n", "        ", "if", "not", "isinstance", "(", "item", ",", "expected_type", ")", ":", "\n", "            ", "return", "False", "\n", "", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_list_of": [[86, 92], ["misc.is_seq_of"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_seq_of"], ["", "def", "is_list_of", "(", "seq", ",", "expected_type", ")", ":", "\n", "    ", "\"\"\"Check whether it is a list of some type.\n\n    A partial method of :func:`is_seq_of`.\n    \"\"\"", "\n", "return", "is_seq_of", "(", "seq", ",", "expected_type", ",", "seq_type", "=", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_tuple_of": [[94, 100], ["misc.is_seq_of"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.is_seq_of"], ["", "def", "is_tuple_of", "(", "seq", ",", "expected_type", ")", ":", "\n", "    ", "\"\"\"Check whether it is a tuple of some type.\n\n    A partial method of :func:`is_seq_of`.\n    \"\"\"", "\n", "return", "is_seq_of", "(", "seq", ",", "expected_type", ",", "seq_type", "=", "tuple", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.slice_list": [[102, 124], ["range", "isinstance", "TypeError", "len", "out_list.append", "sum", "len", "ValueError", "sum", "len"], "function", ["None"], ["", "def", "slice_list", "(", "in_list", ",", "lens", ")", ":", "\n", "    ", "\"\"\"Slice a list into several sub lists by a list of given length.\n\n    Args:\n        in_list (list): The list to be sliced.\n        lens(int or list): The expected length of each out list.\n\n    Returns:\n        list: A list of sliced list.\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "lens", ",", "list", ")", ":", "\n", "        ", "raise", "TypeError", "(", "'\"indices\" must be a list of integers'", ")", "\n", "", "elif", "sum", "(", "lens", ")", "!=", "len", "(", "in_list", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "'sum of lens and list length does not match: {} != {}'", ".", "format", "(", "\n", "sum", "(", "lens", ")", ",", "len", "(", "in_list", ")", ")", ")", "\n", "", "out_list", "=", "[", "]", "\n", "idx", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "lens", ")", ")", ":", "\n", "        ", "out_list", ".", "append", "(", "in_list", "[", "idx", ":", "idx", "+", "lens", "[", "i", "]", "]", ")", "\n", "idx", "+=", "lens", "[", "i", "]", "\n", "", "return", "out_list", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.concat_list": [[126, 136], ["list", "itertools.chain"], "function", ["None"], ["", "def", "concat_list", "(", "in_list", ")", ":", "\n", "    ", "\"\"\"Concatenate a list of list into a single list.\n\n    Args:\n        in_list (list): The list of list to be merged.\n\n    Returns:\n        list: The concatenated flat list.\n    \"\"\"", "\n", "return", "list", "(", "itertools", ".", "chain", "(", "*", "in_list", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.check_prerequisites": [[138, 174], ["functools.wraps", "isinstance", "print", "RuntimeError", "func", "checker", "missing.append", "msg_tmpl.format"], "function", ["None"], ["", "def", "check_prerequisites", "(", "\n", "prerequisites", ",", "\n", "checker", ",", "\n", "msg_tmpl", "=", "'Prerequisites \"{}\" are required in method \"{}\" but not '", "\n", "'found, please install them first.'", ")", ":", "\n", "    ", "\"\"\"A decorator factory to check if prerequisites are satisfied.\n\n    Args:\n        prerequisites (str of list[str]): Prerequisites to be checked.\n        checker (callable): The checker method that returns True if a\n            prerequisite is meet, False otherwise.\n        msg_tmpl (str): The message template with two variables.\n\n    Returns:\n        decorator: A specific decorator.\n    \"\"\"", "\n", "\n", "def", "wrap", "(", "func", ")", ":", "\n", "\n", "        ", "@", "functools", ".", "wraps", "(", "func", ")", "\n", "def", "wrapped_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "requirements", "=", "[", "prerequisites", "]", "if", "isinstance", "(", "\n", "prerequisites", ",", "str", ")", "else", "prerequisites", "\n", "missing", "=", "[", "]", "\n", "for", "item", "in", "requirements", ":", "\n", "                ", "if", "not", "checker", "(", "item", ")", ":", "\n", "                    ", "missing", ".", "append", "(", "item", ")", "\n", "", "", "if", "missing", ":", "\n", "                ", "print", "(", "msg_tmpl", ".", "format", "(", "', '", ".", "join", "(", "missing", ")", ",", "func", ".", "__name__", ")", ")", "\n", "raise", "RuntimeError", "(", "'Prerequisites not meet.'", ")", "\n", "", "else", ":", "\n", "                ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "", "return", "wrapped_func", "\n", "\n", "", "return", "wrap", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc._check_py_package": [[176, 183], ["importlib.import_module"], "function", ["None"], ["", "def", "_check_py_package", "(", "package", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "import_module", "(", "package", ")", "\n", "", "except", "ImportError", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc._check_executable": [[185, 190], ["subprocess.call"], "function", ["None"], ["", "", "def", "_check_executable", "(", "cmd", ")", ":", "\n", "    ", "if", "subprocess", ".", "call", "(", "'which {}'", ".", "format", "(", "cmd", ")", ",", "shell", "=", "True", ")", "!=", "0", ":", "\n", "        ", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.requires_package": [[192, 206], ["misc.check_prerequisites"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.check_prerequisites"], ["", "", "def", "requires_package", "(", "prerequisites", ")", ":", "\n", "    ", "\"\"\"A decorator to check if some python packages are installed.\n\n    Example:\n        >>> @requires_package('numpy')\n        >>> func(arg1, args):\n        >>>     return numpy.zeros(1)\n        array([0.])\n        >>> @requires_package(['numpy', 'non_package'])\n        >>> func(arg1, args):\n        >>>     return numpy.zeros(1)\n        ImportError\n    \"\"\"", "\n", "return", "check_prerequisites", "(", "prerequisites", ",", "checker", "=", "_check_py_package", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.requires_executable": [[208, 218], ["misc.check_prerequisites"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.misc.check_prerequisites"], ["", "def", "requires_executable", "(", "prerequisites", ")", ":", "\n", "    ", "\"\"\"A decorator to check if some executable files are installed.\n\n    Example:\n        >>> @requires_executable('ffmpeg')\n        >>> func(arg1, args):\n        >>>     print(1)\n        1\n    \"\"\"", "\n", "return", "check_prerequisites", "(", "prerequisites", ",", "checker", "=", "_check_executable", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.collect_env.get_pil_version": [[7, 9], ["None"], "function", ["None"], ["def", "get_pil_version", "(", ")", ":", "\n", "    ", "return", "\"\\n        Pillow ({})\"", ".", "format", "(", "PIL", ".", "__version__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.collect_env.collect_env_info": [[11, 15], ["torch.utils.collect_env.get_pretty_env_info", "collect_env.get_pil_version"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.collect_env.get_pil_version"], ["", "def", "collect_env_info", "(", ")", ":", "\n", "    ", "env_str", "=", "get_pretty_env_info", "(", ")", "\n", "env_str", "+=", "get_pil_version", "(", ")", "\n", "return", "env_str", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.__init__": [[14, 31], ["logging.getLogger"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "scheduler", "=", "scheduler", "\n", "self", ".", "save_dir", "=", "save_dir", "\n", "self", ".", "save_to_disk", "=", "save_to_disk", "\n", "if", "logger", "is", "None", ":", "\n", "            ", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "", "self", ".", "logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save": [[32, 51], ["checkpoint.Checkpointer.model.state_dict", "data.update", "os.path.join", "checkpoint.Checkpointer.logger.info", "torch.save", "checkpoint.Checkpointer.tag_last_checkpoint", "checkpoint.Checkpointer.optimizer.state_dict", "checkpoint.Checkpointer.scheduler.state_dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.metric_logger.MetricLogger.update", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.save", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.tag_last_checkpoint"], ["", "def", "save", "(", "self", ",", "name", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "not", "self", ".", "save_dir", ":", "\n", "            ", "return", "\n", "\n", "", "if", "not", "self", ".", "save_to_disk", ":", "\n", "            ", "return", "\n", "\n", "", "data", "=", "{", "}", "\n", "data", "[", "\"model\"", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "if", "self", ".", "optimizer", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"optimizer\"", "]", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "", "if", "self", ".", "scheduler", "is", "not", "None", ":", "\n", "            ", "data", "[", "\"scheduler\"", "]", "=", "self", ".", "scheduler", ".", "state_dict", "(", ")", "\n", "", "data", ".", "update", "(", "kwargs", ")", "\n", "\n", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"{}.pth\"", ".", "format", "(", "name", ")", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint to {}\"", ".", "format", "(", "save_file", ")", ")", "\n", "torch", ".", "save", "(", "data", ",", "save_file", ")", "\n", "self", ".", "tag_last_checkpoint", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load": [[52, 72], ["checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer._load_file", "checkpoint.Checkpointer.Checkpointer._load_model", "checkpoint.Checkpointer.Checkpointer.has_checkpoint", "checkpoint.Checkpointer.Checkpointer.get_checkpoint_file", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.optimizer.load_state_dict", "checkpoint.Checkpointer.Checkpointer.logger.info", "checkpoint.Checkpointer.Checkpointer.scheduler.load_state_dict", "checkpoint.Checkpointer.Checkpointer.pop", "checkpoint.Checkpointer.Checkpointer.pop"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.ClusterCheckpointer._load_file", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer._load_model", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.has_checkpoint", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.get_checkpoint_file", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "load", "(", "self", ",", "f", "=", "None", ",", "use_latest", "=", "True", ")", ":", "\n", "        ", "if", "self", ".", "has_checkpoint", "(", ")", "and", "use_latest", ":", "\n", "# override argument with existing checkpoint", "\n", "            ", "f", "=", "self", ".", "get_checkpoint_file", "(", ")", "\n", "", "if", "not", "f", ":", "\n", "# no checkpoint could be found", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"No checkpoint found. Initializing model from scratch\"", ")", "\n", "return", "{", "}", "\n", "", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint from {}\"", ".", "format", "(", "f", ")", ")", "\n", "checkpoint", "=", "self", ".", "_load_file", "(", "f", ")", "\n", "self", ".", "_load_model", "(", "checkpoint", ")", "\n", "if", "\"optimizer\"", "in", "checkpoint", "and", "self", ".", "optimizer", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading optimizer from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"optimizer\"", ")", ")", "\n", "", "if", "\"scheduler\"", "in", "checkpoint", "and", "self", ".", "scheduler", ":", "\n", "            ", "self", ".", "logger", ".", "info", "(", "\"Loading scheduler from {}\"", ".", "format", "(", "f", ")", ")", "\n", "self", ".", "scheduler", ".", "load_state_dict", "(", "checkpoint", ".", "pop", "(", "\"scheduler\"", ")", ")", "\n", "\n", "# return any further checkpoint data", "\n", "", "return", "checkpoint", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.has_checkpoint": [[73, 76], ["os.path.join", "os.path.exists"], "methods", ["None"], ["", "def", "has_checkpoint", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "return", "os", ".", "path", ".", "exists", "(", "save_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.get_checkpoint_file": [[77, 88], ["os.path.join", "open", "f.read", "last_saved.strip.strip.strip"], "methods", ["None"], ["", "def", "get_checkpoint_file", "(", "self", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "try", ":", "\n", "            ", "with", "open", "(", "save_file", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "last_saved", "=", "f", ".", "read", "(", ")", "\n", "last_saved", "=", "last_saved", ".", "strip", "(", ")", "\n", "", "", "except", "IOError", ":", "\n", "# if file doesn't exist, maybe because it has just been", "\n", "# deleted by a separate process", "\n", "            ", "last_saved", "=", "\"\"", "\n", "", "return", "last_saved", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.tag_last_checkpoint": [[89, 93], ["os.path.join", "open", "f.write"], "methods", ["None"], ["", "def", "tag_last_checkpoint", "(", "self", ",", "last_filename", ")", ":", "\n", "        ", "save_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "save_dir", ",", "\"last_checkpoint\"", ")", "\n", "with", "open", "(", "save_file", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "last_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer._load_file": [[94, 96], ["torch.load", "torch.device"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["", "", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "return", "torch", ".", "load", "(", "f", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer._load_model": [[97, 99], ["sim2sem.utils.model_serialization.load_state_dict", "checkpoint.pop"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_serialization.load_state_dict"], ["", "def", "_load_model", "(", "self", ",", "checkpoint", ")", ":", "\n", "        ", "load_state_dict", "(", "self", ".", "model", ",", "checkpoint", ".", "pop", "(", "\"model\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.DetectronCheckpointer.__init__": [[102, 116], ["checkpoint.Checkpointer.__init__", "cfg.clone"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "DetectronCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.DetectronCheckpointer._load_file": [[117, 140], ["f.startswith", "f.startswith", "f.endswith", "checkpoint.Checkpointer._load_file", "sim2sem.utils.imports.import_file", "sim2sem.utils.imports.import_file.ModelCatalog.get", "checkpoint.DetectronCheckpointer.logger.info", "sim2sem.utils.model_zoo.cache_url", "checkpoint.DetectronCheckpointer.logger.info", "sim2sem.utils.c2_model_loading.load_c2_format", "dict", "len"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.ClusterCheckpointer._load_file", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.model_zoo.cache_url", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.c2_model_loading.load_c2_format"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "# catalog lookup", "\n", "        ", "if", "f", ".", "startswith", "(", "\"catalog://\"", ")", ":", "\n", "            ", "paths_catalog", "=", "import_file", "(", "\n", "\"maskrcnn_benchmark.config.paths_catalog\"", ",", "self", ".", "cfg", ".", "PATHS_CATALOG", ",", "True", "\n", ")", "\n", "catalog_f", "=", "paths_catalog", ".", "ModelCatalog", ".", "get", "(", "f", "[", "len", "(", "\"catalog://\"", ")", ":", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"{} points to {}\"", ".", "format", "(", "f", ",", "catalog_f", ")", ")", "\n", "f", "=", "catalog_f", "\n", "# download url files", "\n", "", "if", "f", ".", "startswith", "(", "\"http\"", ")", ":", "\n", "# if the file is a url path, download it and cache it", "\n", "            ", "cached_f", "=", "cache_url", "(", "f", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"url {} cached in {}\"", ".", "format", "(", "f", ",", "cached_f", ")", ")", "\n", "f", "=", "cached_f", "\n", "# convert Caffe2 checkpoint from pkl", "\n", "", "if", "f", ".", "endswith", "(", "\".pkl\"", ")", ":", "\n", "            ", "return", "load_c2_format", "(", "self", ".", "cfg", ",", "f", ")", "\n", "# load native detectron.pytorch checkpoint", "\n", "", "loaded", "=", "super", "(", "DetectronCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.ClusterCheckpointer.__init__": [[143, 157], ["checkpoint.Checkpointer.__init__", "cfg.copy"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "cfg", ",", "\n", "model", ",", "\n", "optimizer", "=", "None", ",", "\n", "scheduler", "=", "None", ",", "\n", "save_dir", "=", "\"\"", ",", "\n", "save_to_disk", "=", "None", ",", "\n", "logger", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ClusterCheckpointer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "optimizer", ",", "scheduler", ",", "save_dir", ",", "save_to_disk", ",", "logger", "\n", ")", "\n", "self", ".", "cfg", "=", "cfg", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.ClusterCheckpointer._load_file": [[158, 164], ["checkpoint.Checkpointer._load_file", "dict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.ClusterCheckpointer._load_file"], ["", "def", "_load_file", "(", "self", ",", "f", ")", ":", "\n", "# load native detectron.pytorch checkpoint", "\n", "        ", "loaded", "=", "super", "(", "ClusterCheckpointer", ",", "self", ")", ".", "_load_file", "(", "f", ")", "\n", "if", "\"model\"", "not", "in", "loaded", ":", "\n", "            ", "loaded", "=", "dict", "(", "model", "=", "loaded", ")", "\n", "", "return", "loaded", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_acc": [[10, 51], ["numpy.unique", "numpy.unique", "len", "numpy.zeros", "range", "numpy.amax", "scipy.optimize.linear_sum_assignment", "range", "len", "len", "len", "numpy.unique", "range", "numpy.logical_and", "numpy.count_nonzero", "numpy.unique", "numpy.unique", "numpy.logical_and", "numpy.count_nonzero", "len", "len"], "function", ["None"], ["def", "calculate_acc", "(", "ypred", ",", "y", ",", "return_idx", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Calculating the clustering accuracy. The predicted result must have the same number of clusters as the ground truth.\n\n    ypred: 1-D numpy vector, predicted labels\n    y: 1-D numpy vector, ground truth\n    The problem of finding the best permutation to calculate the clustering accuracy is a linear assignment problem.\n    This function construct a N-by-N cost matrix, then pass it to scipy.optimize.linear_sum_assignment to solve the assignment problem.\n\n    \"\"\"", "\n", "assert", "len", "(", "y", ")", ">", "0", "\n", "assert", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "==", "len", "(", "np", ".", "unique", "(", "y", ")", ")", "\n", "\n", "s", "=", "np", ".", "unique", "(", "ypred", ")", "\n", "t", "=", "np", ".", "unique", "(", "y", ")", "\n", "\n", "N", "=", "len", "(", "np", ".", "unique", "(", "ypred", ")", ")", "\n", "C", "=", "np", ".", "zeros", "(", "(", "N", ",", "N", ")", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "            ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "i", "]", ",", "y", "==", "t", "[", "j", "]", ")", "\n", "C", "[", "i", "]", "[", "j", "]", "=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "# convert the C matrix to the 'true' cost", "\n", "", "", "Cmax", "=", "np", ".", "amax", "(", "C", ")", "\n", "C", "=", "Cmax", "-", "C", "\n", "#", "\n", "# indices = linear_sum_assignment(C)", "\n", "# row = indices[:][:, 0]", "\n", "# col = indices[:][:, 1]", "\n", "row", ",", "col", "=", "linear_sum_assignment", "(", "C", ")", "\n", "# calculating the accuracy according to the optimal assignment", "\n", "count", "=", "0", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "idx", "=", "np", ".", "logical_and", "(", "ypred", "==", "s", "[", "row", "[", "i", "]", "]", ",", "y", "==", "t", "[", "col", "[", "i", "]", "]", ")", "\n", "count", "+=", "np", ".", "count_nonzero", "(", "idx", ")", "\n", "\n", "", "if", "return_idx", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", ",", "row", ",", "col", "\n", "", "else", ":", "\n", "        ", "return", "1.0", "*", "count", "/", "len", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_nmi": [[53, 57], ["sklearn.metrics.normalized_mutual_info_score"], "function", ["None"], ["", "", "def", "calculate_nmi", "(", "predict_labels", ",", "true_labels", ")", ":", "\n", "# NMI", "\n", "    ", "nmi", "=", "metrics", ".", "normalized_mutual_info_score", "(", "true_labels", ",", "predict_labels", ",", "average_method", "=", "'geometric'", ")", "\n", "return", "nmi", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.evaluation.calculate_ari": [[59, 63], ["sklearn.metrics.adjusted_rand_score"], "function", ["None"], ["", "def", "calculate_ari", "(", "predict_labels", ",", "true_labels", ")", ":", "\n", "# ARI", "\n", "    ", "ari", "=", "metrics", ".", "adjusted_rand_score", "(", "true_labels", ",", "predict_labels", ")", "\n", "return", "ari", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.MaskedCrossEntropyLoss.__init__": [[12, 14], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MaskedCrossEntropyLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.MaskedCrossEntropyLoss.forward": [[15, 23], ["torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select().view.size", "torch.masked_select().view.size", "torch.masked_select().view.size", "torch.masked_select.size", "torch.masked_select.size", "torch.masked_select.size", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.masked_select().view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "ValueError", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ",", "mask", ",", "weight", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "if", "not", "(", "mask", "!=", "0", ")", ".", "any", "(", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Mask in MaskedCrossEntropyLoss is all zeros.'", ")", "\n", "", "target", "=", "torch", ".", "masked_select", "(", "target", ",", "mask", ")", "\n", "b", ",", "c", "=", "input", ".", "size", "(", ")", "\n", "n", "=", "target", ".", "size", "(", "0", ")", "\n", "input", "=", "torch", ".", "masked_select", "(", "input", ",", "mask", ".", "view", "(", "b", ",", "1", ")", ")", ".", "view", "(", "n", ",", "c", ")", "\n", "return", "F", ".", "cross_entropy", "(", "input", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.ConfidenceBasedCE.__init__": [[26, 32], ["torch.Module.__init__", "losses.MaskedCrossEntropyLoss", "torch.Softmax", "torch.Softmax", "torch.Softmax"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "threshold", ",", "apply_class_balancing", ")", ":", "\n", "        ", "super", "(", "ConfidenceBasedCE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "loss", "=", "MaskedCrossEntropyLoss", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "apply_class_balancing", "=", "apply_class_balancing", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.ConfidenceBasedCE.forward": [[33, 65], ["losses.ConfidenceBasedCE.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "losses.ConfidenceBasedCE.size", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select.size", "torch.masked_select.size", "torch.masked_select.size", "losses.ConfidenceBasedCE.loss", "mask.squeeze", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "counts.float", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.loss"], ["", "def", "forward", "(", "self", ",", "anchors_weak", ",", "anchors_strong", ")", ":", "\n", "        ", "\"\"\"\n        Loss function during self-labeling\n\n        input: logits for original samples and for its strong augmentations \n        output: cross entropy \n        \"\"\"", "\n", "# Retrieve target and mask based on weakly augmentated anchors", "\n", "weak_anchors_prob", "=", "self", ".", "softmax", "(", "anchors_weak", ")", "\n", "max_prob", ",", "target", "=", "torch", ".", "max", "(", "weak_anchors_prob", ",", "dim", "=", "1", ")", "\n", "mask", "=", "max_prob", ">", "self", ".", "threshold", "\n", "b", ",", "c", "=", "weak_anchors_prob", ".", "size", "(", ")", "\n", "target_masked", "=", "torch", ".", "masked_select", "(", "target", ",", "mask", ".", "squeeze", "(", ")", ")", "\n", "n", "=", "target_masked", ".", "size", "(", "0", ")", "\n", "\n", "# Inputs are strongly augmented anchors", "\n", "input_", "=", "anchors_strong", "\n", "\n", "# Class balancing weights", "\n", "if", "self", ".", "apply_class_balancing", ":", "\n", "            ", "idx", ",", "counts", "=", "torch", ".", "unique", "(", "target_masked", ",", "return_counts", "=", "True", ")", "\n", "freq", "=", "1", "/", "(", "counts", ".", "float", "(", ")", "/", "n", ")", "\n", "weight", "=", "torch", ".", "ones", "(", "c", ")", ".", "cuda", "(", ")", "\n", "weight", "[", "idx", "]", "=", "freq", "\n", "\n", "", "else", ":", "\n", "            ", "weight", "=", "None", "\n", "\n", "# Loss", "\n", "", "loss", "=", "self", ".", "loss", "(", "input_", ",", "target", ",", "mask", ",", "weight", "=", "weight", ",", "reduction", "=", "'mean'", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.SCANLoss.__init__": [[90, 95], ["torch.Module.__init__", "torch.Softmax", "torch.Softmax", "torch.Softmax", "torch.BCELoss", "torch.BCELoss", "torch.BCELoss"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "entropy_weight", "=", "2.0", ")", ":", "\n", "        ", "super", "(", "SCANLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "softmax", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "bce", "=", "nn", ".", "BCELoss", "(", ")", "\n", "self", ".", "entropy_weight", "=", "entropy_weight", "# Default = 2.0", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.SCANLoss.forward": [[96, 122], ["anchors.size", "losses.SCANLoss.softmax", "losses.SCANLoss.softmax", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.bmm().squeeze", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "losses.SCANLoss.bce", "losses.entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "losses.SCANLoss.view", "losses.SCANLoss.view"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.entropy"], ["", "def", "forward", "(", "self", ",", "anchors", ",", "neighbors", ")", ":", "\n", "        ", "\"\"\"\n        input:\n            - anchors: logits for anchor images w/ shape [b, num_classes]\n            - neighbors: logits for neighbor images w/ shape [b, num_classes]\n\n        output:\n            - Loss\n        \"\"\"", "\n", "# Softmax", "\n", "b", ",", "n", "=", "anchors", ".", "size", "(", ")", "\n", "anchors_prob", "=", "self", ".", "softmax", "(", "anchors", ")", "\n", "positives_prob", "=", "self", ".", "softmax", "(", "neighbors", ")", "\n", "\n", "# Similarity in output space", "\n", "similarity", "=", "torch", ".", "bmm", "(", "anchors_prob", ".", "view", "(", "b", ",", "1", ",", "n", ")", ",", "positives_prob", ".", "view", "(", "b", ",", "n", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "ones", "=", "torch", ".", "ones_like", "(", "similarity", ")", "\n", "consistency_loss", "=", "self", ".", "bce", "(", "similarity", ",", "ones", ")", "\n", "\n", "# Entropy loss", "\n", "entropy_loss", "=", "entropy", "(", "torch", ".", "mean", "(", "anchors_prob", ",", "0", ")", ",", "input_as_probabilities", "=", "True", ")", "\n", "\n", "# Total loss", "\n", "total_loss", "=", "consistency_loss", "-", "self", ".", "entropy_weight", "*", "entropy_loss", "\n", "\n", "return", "total_loss", ",", "consistency_loss", ",", "entropy_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.SimCLRLoss.__init__": [[126, 129], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "temperature", ")", ":", "\n", "        ", "super", "(", "SimCLRLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "temperature", "=", "temperature", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.SimCLRLoss.forward": [[131, 166], ["features.size", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.eye().cuda", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "mask.repeat.repeat.repeat", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.scatter", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.unbind", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "logits_max.detach", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.arange().view().cuda", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "exp_logits.sum", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "mask.repeat.repeat.sum", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"\n        input:\n            - features: hidden feature representation of shape [b, 2, dim]\n\n        output:\n            - loss: loss computed according to SimCLR \n        \"\"\"", "\n", "\n", "b", ",", "n", ",", "dim", "=", "features", ".", "size", "(", ")", "\n", "assert", "(", "n", "==", "2", ")", "\n", "mask", "=", "torch", ".", "eye", "(", "b", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "\n", "contrast_features", "=", "torch", ".", "cat", "(", "torch", ".", "unbind", "(", "features", ",", "dim", "=", "1", ")", ",", "dim", "=", "0", ")", "\n", "anchor", "=", "features", "[", ":", ",", "0", "]", "\n", "\n", "# Dot product", "\n", "dot_product", "=", "torch", ".", "matmul", "(", "anchor", ",", "contrast_features", ".", "T", ")", "/", "self", ".", "temperature", "\n", "\n", "# Log-sum trick for numerical stability", "\n", "logits_max", ",", "_", "=", "torch", ".", "max", "(", "dot_product", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "logits", "=", "dot_product", "-", "logits_max", ".", "detach", "(", ")", "\n", "\n", "mask", "=", "mask", ".", "repeat", "(", "1", ",", "2", ")", "\n", "logits_mask", "=", "torch", ".", "scatter", "(", "torch", ".", "ones_like", "(", "mask", ")", ",", "1", ",", "torch", ".", "arange", "(", "b", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "cuda", "(", ")", ",", "0", ")", "\n", "mask", "=", "mask", "*", "logits_mask", "\n", "\n", "# Log-softmax", "\n", "exp_logits", "=", "torch", ".", "exp", "(", "logits", ")", "*", "logits_mask", "\n", "log_prob", "=", "logits", "-", "torch", ".", "log", "(", "exp_logits", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "\n", "# Mean log-likelihood for positive", "\n", "loss", "=", "-", "(", "(", "mask", "*", "log_prob", ")", ".", "sum", "(", "1", ")", "/", "mask", ".", "sum", "(", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.losses.entropy": [[67, 87], ["torch.clamp", "torch.clamp", "torch.clamp", "len", "torch.log", "torch.log", "torch.log", "torch.softmax", "torch.log_softmax", "b.size", "b.sum().mean", "len", "ValueError", "b.size", "b.sum", "b.sum", "len", "b.size"], "function", ["None"], ["", "", "def", "entropy", "(", "x", ",", "input_as_probabilities", ")", ":", "\n", "    ", "\"\"\" \n    Helper function to compute the entropy over the batch \n\n    input: batch w/ shape [b, num_classes]\n    output: entropy value [is ideally -log(num_classes)]\n    \"\"\"", "\n", "\n", "if", "input_as_probabilities", ":", "\n", "        ", "x_", "=", "torch", ".", "clamp", "(", "x", ",", "min", "=", "EPS", ")", "\n", "b", "=", "x_", "*", "torch", ".", "log", "(", "x_", ")", "\n", "", "else", ":", "\n", "        ", "b", "=", "F", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "*", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "\n", "", "if", "len", "(", "b", ".", "size", "(", ")", ")", "==", "2", ":", "# Sample-wise entropy", "\n", "        ", "return", "-", "b", ".", "sum", "(", "dim", "=", "1", ")", ".", "mean", "(", ")", "\n", "", "elif", "len", "(", "b", ".", "size", "(", ")", ")", "==", "1", ":", "# Distribution-wise entropy", "\n", "        ", "return", "-", "b", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Input tensor is %d-Dimensional'", "%", "(", "len", "(", "b", ".", "size", "(", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.env.setup_environment": [[7, 18], ["os.environ.get", "env.setup_custom_environment"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.env.setup_custom_environment"], ["def", "setup_environment", "(", ")", ":", "\n", "    ", "\"\"\"Perform environment setup work. The default setup is a no-op, but this\n    function allows the user to specify a Python source file that performs\n    custom setup work that may be necessary to their computing environment.\n    \"\"\"", "\n", "custom_module_path", "=", "os", ".", "environ", ".", "get", "(", "\"TORCH_DETECTRON_ENV_MODULE\"", ")", "\n", "if", "custom_module_path", ":", "\n", "        ", "setup_custom_environment", "(", "custom_module_path", ")", "\n", "", "else", ":", "\n", "# The default setup is a no-op", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.env.setup_custom_environment": [[20, 34], ["sim2sem.utils.imports.import_file", "sim2sem.utils.imports.import_file.setup_environment", "hasattr", "callable"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.env.setup_environment"], ["", "", "def", "setup_custom_environment", "(", "custom_module_path", ")", ":", "\n", "    ", "\"\"\"Load custom environment setup from a Python source file and run the setup\n    function.\n    \"\"\"", "\n", "module", "=", "import_file", "(", "\"maskrcnn_benchmark.utils.env.custom_module\"", ",", "custom_module_path", ")", "\n", "assert", "hasattr", "(", "module", ",", "\"setup_environment\"", ")", "and", "callable", "(", "\n", "module", ".", "setup_environment", "\n", ")", ",", "(", "\n", "\"Custom environment module defined in {} does not have the \"", "\n", "\"required callable attribute 'setup_environment'.\"", "\n", ")", ".", "format", "(", "\n", "custom_module_path", "\n", ")", "\n", "module", ".", "setup_environment", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.__init__": [[14, 27], ["torch.Module.__init__", "len", "range", "spice.model.heads.sem_head.SemHead", "sem_head_multi.SemHeadMulti.__setattr__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__"], ["    ", "def", "__init__", "(", "self", ",", "multi_heads", ",", "ratio_confident", "=", "0.90", ",", "num_neighbor", "=", "100", ",", "score_th", "=", "0.99", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "SemHeadMulti", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_heads", "=", "len", "(", "multi_heads", ")", "\n", "self", ".", "num_cluster", "=", "multi_heads", "[", "0", "]", ".", "num_cluster", "\n", "self", ".", "center_ratio", "=", "multi_heads", "[", "0", "]", ".", "center_ratio", "\n", "self", ".", "num_neighbor", "=", "num_neighbor", "\n", "self", ".", "ratio_confident", "=", "ratio_confident", "\n", "self", ".", "score_th", "=", "score_th", "\n", "for", "h", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "            ", "head_h", "=", "SemHead", "(", "**", "multi_heads", "[", "h", "]", ")", "\n", "self", ".", "__setattr__", "(", "\"head_{}\"", ".", "format", "(", "h", ")", ",", "head_h", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.local_consistency": [[28, 67], ["scores.argmax().cpu", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum.topk", "torch.einsum.topk", "torch.einsum.topk", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "true_mtx.sum", "print", "range", "numpy.array().min", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "true_mtx.sum.min", "[].cpu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "idx_per_cluster.append", "num_per_cluster.append", "label_per_cluster.append", "numpy.arange", "numpy.random.shuffle", "idx_per_cluster_select.append", "label_per_cluster_select.append", "scores.argmax", "feas_sim.cpu", "feas_sim.cpu", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "len", "numpy.array", "scores.max"], "methods", ["None"], ["", "", "def", "local_consistency", "(", "self", ",", "feas_sim", ",", "scores", ")", ":", "\n", "        ", "labels_pred", "=", "scores", ".", "argmax", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "sim_mtx", "=", "torch", ".", "einsum", "(", "'nd,cd->nc'", ",", "[", "feas_sim", ".", "cpu", "(", ")", ",", "feas_sim", ".", "cpu", "(", ")", "]", ")", "\n", "scores_k", ",", "idx_k", "=", "sim_mtx", ".", "topk", "(", "k", "=", "self", ".", "num_neighbor", ",", "dim", "=", "1", ")", "\n", "labels_samples", "=", "torch", ".", "zeros_like", "(", "idx_k", ")", "\n", "for", "s", "in", "range", "(", "self", ".", "num_neighbor", ")", ":", "\n", "            ", "labels_samples", "[", ":", ",", "s", "]", "=", "labels_pred", "[", "idx_k", "[", ":", ",", "s", "]", "]", "\n", "\n", "", "true_mtx", "=", "labels_samples", "[", ":", ",", "0", ":", "1", "]", "==", "labels_samples", "\n", "num_true", "=", "true_mtx", ".", "sum", "(", "dim", "=", "1", ")", "\n", "idx_true", "=", "num_true", ">=", "self", ".", "num_neighbor", "*", "self", ".", "ratio_confident", "\n", "print", "(", "num_true", ".", "min", "(", ")", ")", "\n", "idx_conf", "=", "scores", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "cpu", "(", ")", ">", "self", ".", "score_th", "\n", "idx_true", "=", "idx_true", "*", "idx_conf", "\n", "idx_select", "=", "torch", ".", "where", "(", "idx_true", ">", "0", ")", "[", "0", "]", "\n", "labels_select", "=", "labels_pred", "[", "idx_select", "]", "\n", "\n", "num_per_cluster", "=", "[", "]", "\n", "idx_per_cluster", "=", "[", "]", "\n", "label_per_cluster", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "idx_c", "=", "torch", ".", "where", "(", "labels_select", "==", "c", ")", "[", "0", "]", "\n", "idx_per_cluster", ".", "append", "(", "idx_select", "[", "idx_c", "]", ")", "\n", "num_per_cluster", ".", "append", "(", "len", "(", "idx_c", ")", ")", "\n", "label_per_cluster", ".", "append", "(", "labels_select", "[", "idx_c", "]", ")", "\n", "\n", "", "idx_per_cluster_select", "=", "[", "]", "\n", "label_per_cluster_select", "=", "[", "]", "\n", "min_cluster", "=", "np", ".", "array", "(", "num_per_cluster", ")", ".", "min", "(", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "idx_shuffle", "=", "np", ".", "arange", "(", "0", ",", "num_per_cluster", "[", "c", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_shuffle", ")", "\n", "idx_per_cluster_select", ".", "append", "(", "idx_per_cluster", "[", "c", "]", "[", "idx_shuffle", "[", "0", ":", "min_cluster", "]", "]", ")", "\n", "label_per_cluster_select", ".", "append", "(", "label_per_cluster", "[", "c", "]", "[", "idx_shuffle", "[", "0", ":", "min_cluster", "]", "]", ")", "\n", "\n", "", "idx_select", "=", "torch", ".", "cat", "(", "idx_per_cluster_select", ")", "\n", "labels_select", "=", "torch", ".", "cat", "(", "label_per_cluster_select", ")", "\n", "\n", "return", "idx_select", ",", "labels_select", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.compute_cluster_proto": [[68, 81], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "idx_max.cpu.cpu.cpu", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.append", "torch.cat.append", "torch.cat.append", "feas_sim[].mean().unsqueeze", "feas_sim[].mean"], "methods", ["None"], ["", "def", "compute_cluster_proto", "(", "self", ",", "feas_sim", ",", "scores", ")", ":", "\n", "\n", "        ", "_", ",", "idx_max", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "idx_max", "=", "idx_max", ".", "cpu", "(", ")", "\n", "num_per_cluster", "=", "idx_max", ".", "shape", "[", "0", "]", "//", "self", ".", "num_cluster", "\n", "k", "=", "int", "(", "self", ".", "center_ratio", "*", "num_per_cluster", ")", "\n", "idx_max", "=", "idx_max", "[", "0", ":", "k", ",", ":", "]", "\n", "centers", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "centers", ".", "append", "(", "feas_sim", "[", "idx_max", "[", ":", ",", "c", "]", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "centers", "=", "torch", ".", "cat", "(", "centers", ",", "dim", "=", "0", ")", "\n", "return", "centers", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.select_samples": [[82, 92], ["range", "len", "sem_head_multi.SemHeadMulti.__getattr__().select_samples", "idx_select.append", "labels_select.append", "sem_head_multi.SemHeadMulti.__getattr__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.select_samples", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__"], ["", "def", "select_samples", "(", "self", ",", "feas_sim", ",", "scores", ",", "i", ")", ":", "\n", "        ", "assert", "len", "(", "scores", ")", "==", "self", ".", "num_heads", "\n", "idx_select", "=", "[", "]", "\n", "labels_select", "=", "[", "]", "\n", "for", "h", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "            ", "idx_select_h", ",", "labels_select_h", "=", "self", ".", "__getattr__", "(", "\"head_{}\"", ".", "format", "(", "h", ")", ")", ".", "select_samples", "(", "feas_sim", ",", "scores", "[", "h", "]", ",", "i", ")", "\n", "idx_select", ".", "append", "(", "idx_select_h", ")", "\n", "labels_select", ".", "append", "(", "labels_select_h", ")", "\n", "\n", "", "return", "idx_select", ",", "labels_select", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.forward": [[93, 107], ["isinstance", "range", "isinstance", "cls_score.append", "len", "sem_head_multi.SemHeadMulti.__getattr__().forward", "sem_head_multi.SemHeadMulti.__getattr__().forward", "sem_head_multi.SemHeadMulti.__getattr__", "sem_head_multi.SemHeadMulti.__getattr__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.forward", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.forward", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__"], ["", "def", "forward", "(", "self", ",", "fea", ",", "**", "kwargs", ")", ":", "\n", "        ", "cls_score", "=", "[", "]", "\n", "if", "isinstance", "(", "fea", ",", "list", ")", ":", "\n", "            ", "assert", "len", "(", "fea", ")", "==", "self", ".", "num_heads", "\n", "\n", "", "for", "h", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "            ", "if", "isinstance", "(", "fea", ",", "list", ")", ":", "\n", "                ", "cls_socre_h", "=", "self", ".", "__getattr__", "(", "\"head_{}\"", ".", "format", "(", "h", ")", ")", ".", "forward", "(", "fea", "[", "h", "]", ")", "\n", "", "else", ":", "\n", "                ", "cls_socre_h", "=", "self", ".", "__getattr__", "(", "\"head_{}\"", ".", "format", "(", "h", ")", ")", ".", "forward", "(", "fea", ")", "\n", "\n", "", "cls_score", ".", "append", "(", "cls_socre_h", ")", "\n", "\n", "", "return", "cls_score", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head_multi.SemHeadMulti.loss": [[108, 118], ["range", "len", "len", "sem_head_multi.SemHeadMulti.__getattr__().loss", "sem_head_multi.SemHeadMulti.__getattr__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.loss", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__"], ["", "def", "loss", "(", "self", ",", "x", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "len", "(", "x", ")", "==", "self", ".", "num_heads", "\n", "assert", "len", "(", "target", ")", "==", "self", ".", "num_heads", "\n", "\n", "loss", "=", "{", "}", "\n", "for", "h", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "            ", "loss_h", "=", "self", ".", "__getattr__", "(", "\"head_{}\"", ".", "format", "(", "h", ")", ")", ".", "loss", "(", "x", "[", "h", "]", ",", "target", "[", "h", "]", ")", "\n", "loss", "[", "'head_{}'", ".", "format", "(", "h", ")", "]", "=", "loss_h", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.build_head.build_head": [[5, 14], ["head_cfg_ori.copy", "head_cfg_ori.copy.pop", "sem_head.SemHead", "sem_head_multi.SemHeadMulti"], "function", ["None"], ["def", "build_head", "(", "head_cfg_ori", ")", ":", "\n", "    ", "head_cfg", "=", "head_cfg_ori", ".", "copy", "(", ")", "\n", "head_type", "=", "head_cfg", ".", "pop", "(", "\"type\"", ")", "\n", "if", "head_type", "==", "\"sem\"", ":", "\n", "        ", "return", "SemHead", "(", "**", "head_cfg", ")", "\n", "", "elif", "head_type", "==", "\"sem_multi\"", ":", "\n", "        ", "return", "SemHeadMulti", "(", "**", "head_cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.__init__": [[10, 41], ["torch.Module.__init__", "feature_modules.build_feature_module.build_feature_module", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "dict", "feature_modules.build_feature_module.build_feature_module"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.build_feature_module.build_feature_module", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.build_feature_module.build_feature_module"], ["    ", "def", "__init__", "(", "self", ",", "classifier", ",", "feature_conv", "=", "None", ",", "num_cluster", "=", "10", ",", "center_ratio", "=", "0.5", ",", "\n", "iter_start", "=", "0", ",", "iter_up", "=", "-", "1", ",", "iter_down", "=", "-", "1", ",", "iter_end", "=", "0", ",", "ratio_start", "=", "0.5", ",", "ratio_end", "=", "0.95", ",", "loss_weight", "=", "None", ",", "\n", "fea_fc", "=", "False", ",", "T", "=", "1", ",", "sim_ratio", "=", "1", ",", "sim_center_ratio", "=", "0.9", ",", "epoch_merge", "=", "5", ",", "entropy", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "SemHead", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "loss_weight", "is", "None", ":", "\n", "            ", "loss_weight", "=", "dict", "(", "loss_cls", "=", "1", ",", "loss_ent", "=", "0", ")", "\n", "", "self", ".", "loss_weight", "=", "loss_weight", "\n", "self", ".", "classifier", "=", "build_feature_module", "(", "classifier", ")", "\n", "self", ".", "feature_conv", "=", "None", "\n", "if", "feature_conv", ":", "\n", "            ", "self", ".", "feature_conv", "=", "build_feature_module", "(", "feature_conv", ")", "\n", "\n", "", "self", ".", "num_cluster", "=", "num_cluster", "\n", "self", ".", "loss_fn_cls", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "iter_start", "=", "iter_start", "\n", "self", ".", "iter_end", "=", "iter_end", "\n", "self", ".", "ratio_start", "=", "ratio_start", "\n", "self", ".", "ratio_end", "=", "ratio_end", "\n", "self", ".", "center_ratio", "=", "center_ratio", "\n", "self", ".", "ave_pooling", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "output_size", "=", "1", ")", "\n", "self", ".", "fea_fc", "=", "fea_fc", "\n", "self", ".", "T", "=", "T", "\n", "self", ".", "sim_ratio", "=", "sim_ratio", "\n", "self", ".", "iter_up", "=", "iter_up", "\n", "self", ".", "iter_down", "=", "iter_down", "\n", "self", ".", "sim_center_ratio", "=", "sim_center_ratio", "\n", "self", ".", "epoch_merge", "=", "epoch_merge", "\n", "\n", "self", ".", "entropy", "=", "entropy", "\n", "self", ".", "EPS", "=", "1e-5", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection_old": [[42, 50], ["None"], "methods", ["None"], ["", "def", "compute_ratio_selection_old", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "ratio_end", "==", "self", ".", "ratio_start", ":", "\n", "            ", "return", "self", ".", "ratio_start", "\n", "", "elif", "self", ".", "iter_start", "<", "i", "<=", "self", ".", "iter_end", ":", "\n", "            ", "r", "=", "(", "self", ".", "ratio_end", "-", "self", ".", "ratio_start", ")", "/", "(", "self", ".", "iter_end", "-", "self", ".", "iter_start", ")", "*", "(", "i", "-", "self", ".", "iter_start", ")", "+", "self", ".", "ratio_start", "\n", "return", "r", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "ratio_start", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection": [[51, 73], ["None"], "methods", ["None"], ["", "", "def", "compute_ratio_selection", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "self", ".", "ratio_end", "==", "self", ".", "ratio_start", ":", "\n", "            ", "return", "self", ".", "ratio_start", "\n", "", "elif", "self", ".", "iter_up", "!=", "-", "1", "and", "self", ".", "iter_down", "!=", "-", "1", ":", "\n", "            ", "if", "i", "<", "self", ".", "iter_start", ":", "\n", "                ", "return", "self", ".", "ratio_start", "\n", "", "elif", "self", ".", "iter_start", "<=", "i", "<", "self", ".", "iter_up", ":", "\n", "                ", "r", "=", "(", "self", ".", "ratio_end", "-", "self", ".", "ratio_start", ")", "/", "(", "self", ".", "iter_up", "-", "self", ".", "iter_start", ")", "*", "(", "i", "-", "self", ".", "iter_start", ")", "+", "self", ".", "ratio_start", "\n", "return", "r", "\n", "", "elif", "self", ".", "iter_up", "<=", "i", "<", "self", ".", "iter_down", ":", "\n", "                ", "return", "self", ".", "ratio_end", "\n", "", "elif", "self", ".", "iter_down", "<=", "i", "<", "self", ".", "iter_end", ":", "\n", "                ", "r", "=", "self", ".", "ratio_end", "-", "(", "self", ".", "ratio_end", "-", "self", ".", "ratio_start", ")", "/", "(", "self", ".", "iter_end", "-", "self", ".", "iter_down", ")", "*", "(", "i", "-", "self", ".", "iter_down", ")", "\n", "return", "r", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "ratio_start", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "iter_start", "<", "i", "<=", "self", ".", "iter_end", ":", "\n", "                ", "r", "=", "(", "self", ".", "ratio_end", "-", "self", ".", "ratio_start", ")", "/", "(", "self", ".", "iter_end", "-", "self", ".", "iter_start", ")", "*", "(", "i", "-", "self", ".", "iter_start", ")", "+", "self", ".", "ratio_start", "\n", "return", "r", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "ratio_start", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.select_samples_cpu": [[74, 106], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "idx_max.cpu.cpu.cpu", "sem_head.SemHead.compute_ratio_selection", "int", "print", "range", "sem_head.SemHead.compute_ratio_selection", "int", "range", "numpy.array", "numpy.array", "centers.append", "numpy.dot().squeeze", "feas_sim[].mean", "numpy.argsort", "list", "numpy.dot", "len"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection"], ["", "", "", "def", "select_samples_cpu", "(", "self", ",", "feas_sim", ",", "scores", ",", "i", ")", ":", "\n", "\n", "        ", "_", ",", "idx_max", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "idx_max", "=", "idx_max", ".", "cpu", "(", ")", "\n", "num_per_cluster", "=", "idx_max", ".", "shape", "[", "0", "]", "//", "self", ".", "num_cluster", "\n", "ratio_select", "=", "self", ".", "compute_ratio_selection", "(", "i", ")", "\n", "k", "=", "int", "(", "self", ".", "center_ratio", "*", "num_per_cluster", "*", "ratio_select", ")", "\n", "print", "(", "k", ")", "\n", "idx_max", "=", "idx_max", "[", "0", ":", "k", ",", ":", "]", "\n", "\n", "centers", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "centers", ".", "append", "(", "feas_sim", "[", "idx_max", "[", ":", ",", "c", "]", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", ")", "\n", "\n", "", "select_idx_all", "=", "[", "]", "\n", "select_labels_all", "=", "[", "]", "\n", "num_per_cluster", "=", "feas_sim", ".", "shape", "[", "0", "]", "//", "self", ".", "num_cluster", "\n", "ratio_select", "=", "self", ".", "compute_ratio_selection", "(", "i", ")", "\n", "num_select_c", "=", "int", "(", "num_per_cluster", "*", "ratio_select", ")", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "center_c", "=", "centers", "[", "c", "]", "\n", "dis", "=", "np", ".", "dot", "(", "feas_sim", ",", "center_c", ".", "T", ")", ".", "squeeze", "(", ")", "\n", "idx_s", "=", "np", ".", "argsort", "(", "dis", ")", "[", ":", ":", "-", "1", "]", "\n", "idx_select", "=", "idx_s", "[", "0", ":", "num_select_c", "]", "\n", "\n", "select_idx_all", "=", "select_idx_all", "+", "list", "(", "idx_select", ")", "\n", "select_labels_all", "=", "select_labels_all", "+", "[", "c", "]", "*", "len", "(", "idx_select", ")", "\n", "\n", "", "select_idx_all", "=", "np", ".", "array", "(", "select_idx_all", ")", "\n", "select_labels_all", "=", "np", ".", "array", "(", "select_labels_all", ")", "\n", "\n", "return", "select_idx_all", ",", "select_labels_all", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.select_samples": [[107, 131], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "idx_max.cpu.cpu.cpu", "sem_head.SemHead.compute_ratio_selection", "int", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "[].flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.arange().unsqueeze().repeat().flatten", "torch.cat.append", "torch.cat.append", "torch.cat.append", "feas_sim[].mean().unsqueeze", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.arange().unsqueeze().repeat", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "feas_sim[].mean", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection"], ["", "def", "select_samples", "(", "self", ",", "feas_sim", ",", "scores", ",", "i", ")", ":", "\n", "\n", "        ", "_", ",", "idx_max", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "idx_max", "=", "idx_max", ".", "cpu", "(", ")", "\n", "num_per_cluster", "=", "idx_max", ".", "shape", "[", "0", "]", "//", "self", ".", "num_cluster", "\n", "ratio_select", "=", "self", ".", "compute_ratio_selection", "(", "i", ")", "\n", "# print(ratio_select)", "\n", "k", "=", "int", "(", "self", ".", "center_ratio", "*", "num_per_cluster", "*", "ratio_select", ")", "\n", "# print(k, len(idx_max))", "\n", "idx_max", "=", "idx_max", "[", "0", ":", "k", ",", ":", "]", "\n", "\n", "centers", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "centers", ".", "append", "(", "feas_sim", "[", "idx_max", "[", ":", ",", "c", "]", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "centers", "=", "torch", ".", "cat", "(", "centers", ",", "dim", "=", "0", ")", "\n", "\n", "num_select_c", "=", "int", "(", "num_per_cluster", "*", "ratio_select", ")", "\n", "\n", "dis", "=", "torch", ".", "einsum", "(", "'cd,nd->cn'", ",", "[", "centers", ",", "feas_sim", "]", ")", "\n", "idx_select", "=", "torch", ".", "argsort", "(", "dis", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "[", ":", ",", "0", ":", "num_select_c", "]", ".", "flatten", "(", ")", "\n", "labels_select", "=", "torch", ".", "arange", "(", "0", ",", "self", ".", "num_cluster", ")", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "num_select_c", ")", ".", "flatten", "(", ")", "\n", "\n", "return", "idx_select", ",", "labels_select", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.select_samples_v2": [[132, 184], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "idx_max.cpu.cpu.cpu", "sem_head.SemHead.compute_ratio_selection", "int", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.argsort", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "print", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "len", "feas_sim[].mean().unsqueeze", "set", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "torch.cat.cpu().numpy", "feas_sim[].mean", "torch.cat.cpu", "torch.cat.cpu", "torch.cat.cpu"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.compute_ratio_selection"], ["", "def", "select_samples_v2", "(", "self", ",", "feas_sim", ",", "scores", ",", "i", ")", ":", "\n", "\n", "        ", "_", ",", "idx_max", "=", "torch", ".", "sort", "(", "scores", ",", "dim", "=", "0", ",", "descending", "=", "True", ")", "\n", "idx_max", "=", "idx_max", ".", "cpu", "(", ")", "\n", "num_per_cluster", "=", "idx_max", ".", "shape", "[", "0", "]", "//", "self", ".", "num_cluster", "\n", "ratio_select", "=", "self", ".", "compute_ratio_selection", "(", "i", ")", "\n", "# print(ratio_select)", "\n", "k", "=", "int", "(", "self", ".", "center_ratio", "*", "num_per_cluster", "*", "ratio_select", ")", "\n", "# print(k, len(idx_max))", "\n", "\n", "idx_center_exist", "=", "torch", ".", "zeros_like", "(", "idx_max", "[", ":", ",", "0", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "centers", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "idx_c", "=", "idx_max", "[", ":", ",", "c", "]", "\n", "if", "c", "==", "0", ":", "\n", "                ", "idx_c_select", "=", "idx_c", "[", "0", ":", "k", "]", "\n", "", "else", ":", "\n", "                ", "idx_c_available", "=", "~", "idx_center_exist", "[", "idx_c", "]", "\n", "idx_c_select", "=", "idx_c", "[", "idx_c_available", "]", "[", "0", ":", "k", "]", "\n", "\n", "", "idx_center_exist", "[", "idx_c_select", "]", "=", "True", "\n", "\n", "centers", ".", "append", "(", "feas_sim", "[", "idx_c_select", ",", ":", "]", ".", "mean", "(", "axis", "=", "0", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", ")", "\n", "\n", "", "centers", "=", "torch", ".", "cat", "(", "centers", ",", "dim", "=", "0", ")", "\n", "\n", "num_select_c", "=", "int", "(", "num_per_cluster", "*", "ratio_select", ")", "\n", "\n", "dis", "=", "torch", ".", "einsum", "(", "'cd,nd->cn'", ",", "[", "centers", ",", "feas_sim", "]", ")", "\n", "# idx_select = torch.argsort(dis, dim=1, descending=True)[:, 0:num_select_c].flatten()", "\n", "idx_sort", "=", "torch", ".", "argsort", "(", "dis", ",", "dim", "=", "1", ",", "descending", "=", "True", ")", "\n", "idx_label_exist", "=", "torch", ".", "zeros_like", "(", "idx_sort", "[", "0", ",", ":", "]", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "labels_select_all", "=", "[", "]", "\n", "idx_select_all", "=", "[", "]", "\n", "for", "c", "in", "range", "(", "self", ".", "num_cluster", ")", ":", "\n", "            ", "idx_c", "=", "idx_sort", "[", "c", ",", ":", "]", "\n", "if", "c", "==", "0", ":", "\n", "                ", "idx_c_select", "=", "idx_sort", "[", "0", ",", "0", ":", "num_select_c", "]", "\n", "", "else", ":", "\n", "                ", "idx_c_available", "=", "~", "idx_label_exist", "[", "idx_c", "]", "\n", "idx_c_select", "=", "idx_c", "[", "idx_c_available", "]", "[", "0", ":", "num_select_c", "]", "\n", "\n", "", "idx_label_exist", "[", "idx_c_select", "]", "=", "True", "\n", "idx_select_all", ".", "append", "(", "idx_c_select", ")", "\n", "labels_select_all", ".", "append", "(", "torch", ".", "zeros_like", "(", "idx_c_select", ")", "+", "c", ")", "\n", "\n", "", "idx_select_all", "=", "torch", ".", "cat", "(", "idx_select_all", ")", "\n", "labels_select_all", "=", "torch", ".", "cat", "(", "labels_select_all", ")", "\n", "print", "(", "len", "(", "set", "(", "idx_select_all", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ")", ")", "\n", "\n", "return", "idx_select_all", ",", "labels_select_all", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.forward": [[185, 203], ["sem_head.SemHead.classifier", "sem_head.SemHead.feature_conv", "sem_head.SemHead.ave_pooling", "feature.flatten.flatten.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fea", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "if", "self", ".", "feature_conv", "is", "not", "None", ":", "\n", "            ", "fea_conv", "=", "self", ".", "feature_conv", "(", "fea", ")", "\n", "", "else", ":", "\n", "            ", "fea_conv", "=", "fea", "\n", "\n", "", "if", "not", "self", ".", "fea_fc", ":", "\n", "            ", "feature", "=", "self", ".", "ave_pooling", "(", "fea_conv", ")", "\n", "feature", "=", "feature", ".", "flatten", "(", "start_dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "feature", "=", "fea_conv", "\n", "\n", "", "cls_score", "=", "self", ".", "classifier", "(", "feature", ")", "\n", "\n", "cls_score", "=", "cls_score", "/", "self", ".", "T", "\n", "\n", "return", "cls_score", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.heads.sem_head.SemHead.loss": [[204, 215], ["sem_head.SemHead.forward", "sem_head.SemHead.loss_fn_cls", "sem_head.SemHead.mean", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.forward"], ["", "def", "loss", "(", "self", ",", "x", ",", "target", ",", "**", "kwargs", ")", ":", "\n", "        ", "cls_socre", "=", "self", ".", "forward", "(", "x", ")", "\n", "loss", "=", "self", ".", "loss_fn_cls", "(", "cls_socre", ",", "target", ")", "*", "self", ".", "loss_weight", "[", "\"loss_cls\"", "]", "\n", "\n", "if", "self", ".", "entropy", ":", "\n", "            ", "prob_mean", "=", "cls_socre", ".", "mean", "(", "dim", "=", "0", ")", "\n", "prob_mean", "[", "(", "prob_mean", "<", "self", ".", "EPS", ")", ".", "data", "]", "=", "self", ".", "EPS", "\n", "loss_ent", "=", "(", "prob_mean", "*", "torch", ".", "log", "(", "prob_mean", ")", ")", ".", "sum", "(", ")", "\n", "loss", "=", "loss", "+", "loss_ent", "*", "self", ".", "loss_weight", "[", "\"loss_ent\"", "]", "\n", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.convnet.ExpNorm.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ExpNorm", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.convnet.ExpNorm.forward": [[9, 11], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "torch.nn.MaxPool2d", "int"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "exp", "(", "x", "-", "torch", ".", "nn", ".", "MaxPool2d", "(", "int", "(", "x", ".", "shape", "[", "-", "1", "]", ")", ")", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.convnet.ConvNet.__init__": [[14, 164], ["torch.Module.__init__", "len", "torch.Sequential", "torch.Sequential", "range", "len", "list", "list", "isinstance", "torch.Sequential", "torch.Sequential", "range", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "range", "range", "range", "isinstance", "torch.Linear", "torch.Linear", "convnet.ConvNet.encoder_fc.add_module", "isinstance", "isinstance", "isinstance", "len", "convnet.ConvNet.encoder.add_module", "isinstance", "isinstance", "isinstance", "torch.BatchNorm1d", "torch.BatchNorm1d", "convnet.ConvNet.encoder_fc.add_module", "convnet.ConvNet.encoder_fc.add_module", "len", "len", "len", "len", "len", "len", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "convnet.ConvNet.encoder.add_module", "torch.MaxPool2d", "torch.MaxPool2d", "convnet.ConvNet.encoder.add_module", "torch.ReLU", "torch.ReLU", "len", "torch.BatchNorm2d", "torch.BatchNorm2d", "convnet.ConvNet.encoder.add_module", "torch.ReLU", "torch.ReLU", "convnet.ConvNet.encoder.add_module", "torch.MaxUnpool2d", "torch.MaxUnpool2d", "convnet.ConvNet.encoder.add_module", "torch.Softmax", "torch.Softmax", "convnet.ConvNet.encoder_fc.add_module", "len", "torch.Sigmoid", "torch.Sigmoid", "convnet.ConvNet.encoder.add_module", "torch.Tanh", "torch.Tanh", "convnet.ConvNet.encoder_fc.add_module", "len", "torch.ReLU", "torch.ReLU", "convnet.ConvNet.encoder.add_module", "torch.Sigmoid", "torch.Sigmoid", "convnet.ConvNet.encoder_fc.add_module", "convnet.ExpNorm", "convnet.ConvNet.encoder.add_module", "torch.ReLU", "torch.ReLU", "convnet.ConvNet.encoder_fc.add_module", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_channel", ",", "conv_layers", ",", "kernels", ",", "strides", ",", "pads", ",", "num_block", ",", "fc_layers", "=", "[", "]", ",", "output_paddings", "=", "None", ",", "\n", "batch_norm", "=", "True", ",", "transpose", "=", "False", ",", "return_pool_idx", "=", "True", ",", "last_fc_activation", "=", "None", ",", "conv_fea_size", "=", "[", "7", ",", "7", "]", ",", "\n", "use_ave_pool", "=", "False", ",", "fc_input_neurons", "=", "None", ",", "last_conv_activation", "=", "\"relu\"", ",", "use_last_conv_bn", "=", "True", ",", "\n", "output_feas", "=", "False", ",", "output_feas_pool", "=", "False", ")", ":", "\n", "        ", "super", "(", "ConvNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "transpose", ":", "\n", "            ", "block_id", "=", "num_block", "\n", "last_block_ids", "=", "list", "(", "range", "(", "2", ",", "num_block", "+", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "block_id", "=", "1", "\n", "last_block_ids", "=", "list", "(", "range", "(", "1", ",", "num_block", ")", ")", "\n", "", "in_channel", "=", "input_channel", "\n", "num_layers", "=", "len", "(", "conv_layers", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", ")", "\n", "for", "l", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "sub_layers", "=", "conv_layers", "[", "l", "]", "\n", "sub_kernels", "=", "kernels", "[", "l", "]", "\n", "sub_strides", "=", "strides", "[", "l", "]", "\n", "sub_pads", "=", "pads", "[", "l", "]", "\n", "if", "isinstance", "(", "sub_layers", ",", "list", ")", ":", "\n", "                ", "assert", "isinstance", "(", "sub_kernels", ",", "list", ")", "and", "len", "(", "sub_layers", ")", "==", "len", "(", "sub_kernels", ")", "\n", "assert", "isinstance", "(", "sub_strides", ",", "list", ")", "and", "len", "(", "sub_layers", ")", "==", "len", "(", "sub_strides", ")", "\n", "assert", "isinstance", "(", "sub_pads", ",", "list", ")", "and", "len", "(", "sub_layers", ")", "==", "len", "(", "sub_pads", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "sub_layers", ")", ")", ":", "\n", "                    ", "out_channel", "=", "sub_layers", "[", "i", "]", "\n", "kernel_size", "=", "sub_kernels", "[", "i", "]", "\n", "stride", "=", "sub_strides", "[", "i", "]", "\n", "pad", "=", "sub_pads", "[", "i", "]", "\n", "sub_layer_id", "=", "i", "+", "1", "\n", "\n", "if", "transpose", ":", "\n", "                        ", "output_padding", "=", "0", "\n", "if", "output_paddings", "is", "not", "None", ":", "\n", "                            ", "output_padding", "=", "output_paddings", "[", "l", "]", "[", "i", "]", "\n", "", "sub_layer_id", "=", "len", "(", "sub_layers", ")", "-", "i", "\n", "layer", "=", "nn", ".", "ConvTranspose2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "pad", ",", "output_padding", "=", "output_padding", ")", "\n", "layer_name", "=", "\"deconv{}_{}\"", ".", "format", "(", "block_id", ",", "sub_layer_id", ")", "\n", "", "else", ":", "\n", "                        ", "layer", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "out_channel", ",", "kernel_size", ",", "stride", ",", "pad", ")", "\n", "layer_name", "=", "\"conv{}_{}\"", ".", "format", "(", "block_id", ",", "sub_layer_id", ")", "\n", "\n", "# self.add_module(layer_name, layer)", "\n", "", "self", ".", "encoder", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "if", "batch_norm", ":", "\n", "                        ", "if", "not", "use_last_conv_bn", "and", "block_id", "not", "in", "last_block_ids", "and", "i", ">=", "len", "(", "sub_layers", ")", "-", "1", ":", "\n", "                            ", "pass", "\n", "", "else", ":", "\n", "                            ", "bn_name", "=", "\"bn{}_{}\"", ".", "format", "(", "block_id", ",", "sub_layer_id", ")", "\n", "bn_layer", "=", "nn", ".", "BatchNorm2d", "(", "out_channel", ")", "\n", "# self.add_module(bn_name, bn_layer)", "\n", "self", ".", "encoder", ".", "add_module", "(", "bn_name", ",", "bn_layer", ")", "\n", "\n", "", "", "if", "block_id", "in", "last_block_ids", "or", "i", "<", "len", "(", "sub_layers", ")", "-", "1", ":", "\n", "                        ", "relu_name", "=", "\"relu{}_{}\"", ".", "format", "(", "block_id", ",", "sub_layer_id", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "relu_name", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "", "else", ":", "\n", "                        ", "if", "last_conv_activation", "==", "\"sigmoid\"", ":", "\n", "                            ", "act_name", "=", "\"sigmoid_score\"", "\n", "self", ".", "encoder", ".", "add_module", "(", "act_name", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "", "elif", "last_conv_activation", "==", "\"relu\"", ":", "\n", "                            ", "relu_name", "=", "\"relu{}\"", ".", "format", "(", "block_id", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "relu_name", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "elif", "last_conv_activation", "==", "\"exp_norm\"", ":", "\n", "                            ", "exp_name", "=", "\"exp_norm\"", "\n", "self", ".", "encoder", ".", "add_module", "(", "exp_name", ",", "ExpNorm", "(", ")", ")", "\n", "", "elif", "last_conv_activation", "==", "\"tanh\"", ":", "\n", "                            ", "tanh_name", "=", "\"tanh{}\"", ".", "format", "(", "block_id", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "tanh_name", ",", "nn", ".", "Tanh", "(", ")", ")", "\n", "\n", "", "elif", "last_conv_activation", "is", "None", ":", "\n", "                            ", "pass", "\n", "", "else", ":", "\n", "                            ", "raise", "TypeError", "\n", "\n", "", "", "in_channel", "=", "out_channel", "\n", "\n", "", "", "elif", "isinstance", "(", "sub_layers", ",", "str", ")", ":", "\n", "                ", "assert", "isinstance", "(", "sub_kernels", ",", "int", ")", "\n", "assert", "isinstance", "(", "sub_strides", ",", "int", ")", "\n", "assert", "isinstance", "(", "sub_pads", ",", "int", ")", "\n", "if", "sub_layers", "==", "\"max_pooling\"", ":", "\n", "                    ", "layer_name", "=", "\"pool{}\"", ".", "format", "(", "block_id", ")", "\n", "layer", "=", "nn", ".", "MaxPool2d", "(", "sub_kernels", ",", "sub_strides", ",", "sub_pads", ",", "return_indices", "=", "return_pool_idx", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "", "elif", "sub_layers", "==", "\"max_unpooling\"", ":", "\n", "                    ", "layer_name", "=", "\"unpool{}\"", ".", "format", "(", "block_id", ")", "\n", "layer", "=", "nn", ".", "MaxUnpool2d", "(", "sub_kernels", ",", "sub_strides", ",", "sub_pads", ")", "\n", "self", ".", "encoder", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "TypeError", "\n", "\n", "", "if", "transpose", ":", "\n", "                    ", "block_id", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "block_id", "+=", "1", "\n", "\n", "", "", "else", ":", "\n", "                ", "raise", "TypeError", "\n", "\n", "", "", "num_fc_layers", "=", "len", "(", "fc_layers", ")", "\n", "self", ".", "encoder_fc", "=", "None", "\n", "if", "num_fc_layers", ">", "0", ":", "\n", "            ", "self", ".", "encoder_fc", "=", "nn", ".", "Sequential", "(", ")", "\n", "assert", "fc_input_neurons", "is", "not", "None", "\n", "\n", "for", "l", "in", "range", "(", "num_fc_layers", ")", ":", "\n", "                ", "fc_output_neurons", "=", "fc_layers", "[", "l", "]", "\n", "layer_name", "=", "\"fc{}\"", ".", "format", "(", "l", "+", "1", ")", "\n", "layer", "=", "nn", ".", "Linear", "(", "fc_input_neurons", ",", "fc_output_neurons", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "if", "batch_norm", ":", "\n", "                    ", "bn_name", "=", "\"bn_fc{}\"", ".", "format", "(", "l", "+", "1", ")", "\n", "bn", "=", "nn", ".", "BatchNorm1d", "(", "fc_output_neurons", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "bn_name", ",", "bn", ")", "\n", "\n", "", "fc_input_neurons", "=", "fc_output_neurons", "\n", "\n", "if", "l", "==", "num_fc_layers", "-", "1", ":", "\n", "                    ", "if", "last_fc_activation", "is", "None", ":", "\n", "                        ", "pass", "\n", "", "elif", "last_fc_activation", "==", "\"softmax\"", ":", "\n", "                        ", "layer", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "\"fc_{}\"", ".", "format", "(", "last_fc_activation", ")", ",", "layer", ")", "\n", "", "elif", "last_fc_activation", "==", "\"tanh\"", ":", "\n", "                        ", "layer", "=", "nn", ".", "Tanh", "(", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "\"fc_{}\"", ".", "format", "(", "last_fc_activation", ")", ",", "layer", ")", "\n", "", "elif", "last_fc_activation", "==", "\"sigmoid\"", ":", "\n", "                        ", "layer", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "\"fc_{}\"", ".", "format", "(", "last_fc_activation", ")", ",", "layer", ")", "\n", "", "elif", "last_fc_activation", "==", "\"relu\"", ":", "\n", "                        ", "layer", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "encoder_fc", ".", "add_module", "(", "\"fc_{}\"", ".", "format", "(", "last_fc_activation", ")", ",", "layer", ")", "\n", "", "else", ":", "\n", "                        ", "raise", "TypeError", "\n", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "encoder_fc", ".", "add_module", "(", "\"relu_fc{}\"", ".", "format", "(", "l", "+", "1", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "", "", "if", "use_ave_pool", ":", "\n", "            ", "self", ".", "ave_pool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ave_pool", "=", "None", "\n", "\n", "", "self", ".", "transpose", "=", "transpose", "\n", "self", ".", "return_pool_idx", "=", "return_pool_idx", "\n", "self", ".", "conv_fea_size", "=", "conv_fea_size", "\n", "self", ".", "output_feas", "=", "output_feas", "\n", "self", ".", "output_feas_pool", "=", "output_feas_pool", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.convnet.ConvNet.forward": [[165, 234], ["dict", "dict", "convnet.ConvNet.encoder._modules.items", "isinstance", "len", "convnet.ConvNet.encoder._modules.items", "len", "isinstance", "feas.append", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "convnet.ConvNet.encoder_fc", "convnet.ConvNet.encoder_fc", "isinstance", "outs.append", "layer", "layer", "convnet.ConvNet.ave_pool", "layer.reshape", "layer", "layer", "layer.reshape().repeat", "layer.reshape"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "conv_fea_size", "=", "self", ".", "conv_fea_size", "\n", "pool_idx", "=", "dict", "(", ")", "\n", "feas", "=", "[", "]", "\n", "feas_pool", "=", "dict", "(", ")", "\n", "if", "not", "self", ".", "transpose", ":", "\n", "            ", "for", "name", ",", "layer", "in", "self", ".", "encoder", ".", "_modules", ".", "items", "(", ")", ":", "\n", "\n", "                ", "if", "self", ".", "return_pool_idx", "and", "\"pool\"", "in", "name", ":", "\n", "                    ", "x", ",", "idx", "=", "layer", "(", "x", ")", "\n", "pool_idx", "[", "\"{}_idx\"", ".", "format", "(", "name", ")", "]", "=", "idx", "\n", "if", "self", ".", "output_feas_pool", ":", "\n", "                        ", "feas_pool", "[", "name", "]", "=", "x", "\n", "", "", "else", ":", "\n", "                    ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "output_feas", ":", "\n", "                ", "feas", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "encoder_fc", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "ave_pool", "is", "not", "None", ":", "\n", "                    ", "x", "=", "self", ".", "ave_pool", "(", "x", ")", "\n", "", "x", "=", "torch", ".", "flatten", "(", "x", ",", "start_dim", "=", "1", ")", "\n", "\n", "x", "=", "self", ".", "encoder_fc", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "isinstance", "(", "x", ",", "tuple", ")", ":", "\n", "                ", "unpool_idx", "=", "x", "[", "1", "]", "\n", "x", "=", "x", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "unpool_idx", "=", "[", "]", "\n", "\n", "", "if", "self", ".", "encoder_fc", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "encoder_fc", "(", "x", ")", "\n", "assert", "isinstance", "(", "conv_fea_size", ",", "list", ")", "\n", "if", "self", ".", "ave_pool", "is", "not", "None", ":", "\n", "                    ", "x", "=", "x", ".", "reshape", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "1", ",", "1", "]", ")", ".", "repeat", "(", "1", ",", "1", ",", "conv_fea_size", "[", "0", "]", ",", "conv_fea_size", "[", "1", "]", ")", "/", "(", "conv_fea_size", "[", "0", "]", "*", "conv_fea_size", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "                    ", "x", "=", "x", ".", "reshape", "(", "[", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "conv_fea_size", "[", "0", "]", ",", "conv_fea_size", "[", "1", "]", "]", ")", "\n", "\n", "", "", "pool_id", "=", "len", "(", "unpool_idx", ")", "\n", "for", "name", ",", "layer", "in", "self", ".", "encoder", ".", "_modules", ".", "items", "(", ")", ":", "\n", "                ", "if", "\"unpool\"", "in", "name", ":", "\n", "                    ", "if", "self", ".", "output_feas_pool", ":", "\n", "                        ", "feas_pool", "[", "name", "]", "=", "x", "\n", "\n", "", "name_idx", "=", "\"pool{}_idx\"", ".", "format", "(", "pool_id", ")", "\n", "x", "=", "layer", "(", "x", ",", "unpool_idx", "[", "name_idx", "]", ")", "\n", "\n", "pool_id", "-=", "1", "\n", "", "else", ":", "\n", "                    ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "", "", "", "if", "len", "(", "pool_idx", ")", ">", "0", ":", "\n", "            ", "outs", "=", "(", "x", ",", "pool_idx", ")", "\n", "", "else", ":", "\n", "            ", "outs", "=", "x", "\n", "\n", "", "if", "self", ".", "output_feas", ":", "\n", "            ", "outs", "=", "[", "outs", "]", "+", "feas", "\n", "\n", "", "if", "self", ".", "output_feas_pool", ":", "\n", "            ", "if", "isinstance", "(", "outs", ",", "list", ")", ":", "\n", "                ", "outs", ".", "append", "(", "feas_pool", ")", "\n", "", "else", ":", "\n", "                ", "outs", "=", "[", "outs", "]", "+", "[", "feas_pool", "]", "\n", "\n", "", "", "return", "outs", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.BasicBlock.__init__": [[38, 55], ["torch.Module.__init__", "resnet_all.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_all.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.BasicBlock.forward": [[56, 73], ["resnet_all.BasicBlock.conv1", "resnet_all.BasicBlock.bn1", "resnet_all.BasicBlock.relu", "resnet_all.BasicBlock.conv2", "resnet_all.BasicBlock.bn2", "resnet_all.BasicBlock.relu", "resnet_all.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.Bottleneck.__init__": [[84, 100], ["torch.Module.__init__", "resnet_all.conv1x1", "norm_layer", "resnet_all.conv3x3", "norm_layer", "resnet_all.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.conv1x1", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "dilation", "=", "1", ",", "norm_layer", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.Bottleneck.forward": [[101, 122], ["resnet_all.Bottleneck.conv1", "resnet_all.Bottleneck.bn1", "resnet_all.Bottleneck.relu", "resnet_all.Bottleneck.conv2", "resnet_all.Bottleneck.bn2", "resnet_all.Bottleneck.relu", "resnet_all.Bottleneck.conv3", "resnet_all.Bottleneck.bn3", "resnet_all.Bottleneck.relu", "resnet_all.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.ResNet.__init__": [[126, 179], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_all.ResNet._make_layer", "resnet_all.ResNet._make_layer", "resnet_all.ResNet._make_layer", "resnet_all.ResNet._make_layer", "resnet_all.ResNet.modules", "len", "ValueError", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "isinstance", "resnet_all.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_classes", "=", "1000", ",", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "feature_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.ResNet._make_layer": [[180, 203], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_all.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.ResNet._forward_impl": [[204, 222], ["resnet_all.ResNet.conv1", "resnet_all.ResNet.bn1", "resnet_all.ResNet.relu", "resnet_all.ResNet.maxpool", "resnet_all.ResNet.layer1", "resnet_all.ResNet.layer2", "resnet_all.ResNet.layer3", "resnet_all.ResNet.layer4", "resnet_all.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_all.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.ResNet.forward": [[223, 225], ["resnet_all.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.conv1x1": [[30, 33], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet": [[227, 234], ["resnet_all.ResNet"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "# if pretrained:", "\n", "#     state_dict = load_state_dict_from_url(model_urls[arch],", "\n", "#                                           progress=progress)", "\n", "#     model.load_state_dict(state_dict)", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet18": [[236, 246], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet34": [[248, 258], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet50": [[260, 270], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet101": [[272, 282], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet152": [[284, 294], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnext50_32x4d": [[296, 308], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnext101_32x8d": [[310, 322], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.wide_resnet50_2": [[324, 340], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.wide_resnet101_2": [[342, 358], ["resnet_all._resnet"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.imagenet.ImageNet": [[5, 11], ["resnet_all.resnet50", "torch.Sequential", "torch.Linear", "torch.ReLU"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet50"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "pass", "\n", "\n", "", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "resnet34", "(", "num_classes", "=", "num_classes", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.imagenet.ResNet34": [[13, 16], ["resnet_all.resnet34"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_all.resnet34"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.BasicBlock.__init__": [[12, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.BasicBlock.forward": [[27, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.Bottleneck.__init__": [[42, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.Bottleneck.forward": [[59, 70], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn3", "resnet_cifar.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.Bottleneck.bn1", "resnet_cifar.Bottleneck.bn2", "resnet_cifar.Bottleneck.conv3", "resnet_cifar.Bottleneck.conv1", "resnet_cifar.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.ResNet.__init__": [[73, 112], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet._make_layer", "resnet_cifar.ResNet.modules", "isinstance", "resnet_cifar.ResNet.modules", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "BasicBlock", ",", "num_blocks", "=", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "in_channel", "=", "3", ",", "zero_init_residual", "=", "False", ",", "num_classes", "=", "128", ",", "\n", "feature_only", "=", "False", ",", "test", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves", "\n", "# like an identity. This improves the model by 0.2~0.3% according to:", "\n", "# https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n", "", "", "", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "if", "test", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.ResNet._make_layer": [[113, 121], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.ResNet.forward": [[122, 135], ["torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet.layer1", "resnet_cifar.ResNet.layer2", "resnet_cifar.ResNet.layer3", "resnet_cifar.ResNet.layer4", "resnet_cifar.ResNet.bn1", "resnet_cifar.ResNet.avgpool", "resnet_cifar.ResNet.view", "resnet_cifar.ResNet.fc", "resnet_cifar.ResNet.conv1", "resnet_cifar.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.resnet18_cifar": [[137, 139], ["resnet_cifar.ResNet"], "function", ["None"], ["", "", "def", "resnet18_cifar", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.BasicBlock.__init__": [[12, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.BasicBlock.forward": [[27, 37], ["torch.relu", "torch.relu", "torch.relu", "resnet_stl.BasicBlock.bn2", "resnet_stl.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.BasicBlock.bn1", "resnet_stl.BasicBlock.conv2", "resnet_stl.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.Bottleneck.__init__": [[42, 57], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.Bottleneck.forward": [[59, 70], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.Bottleneck.bn3", "resnet_stl.Bottleneck.shortcut", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.Bottleneck.bn1", "resnet_stl.Bottleneck.bn2", "resnet_stl.Bottleneck.conv3", "resnet_stl.Bottleneck.conv1", "resnet_stl.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "preact", "=", "out", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "if", "self", ".", "is_last", ":", "\n", "            ", "return", "out", ",", "preact", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.ResNet.__init__": [[73, 113], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet._make_layer", "resnet_stl.ResNet.modules", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "isinstance", "resnet_stl.ResNet.modules", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "in_channel", "=", "3", ",", "zero_init_residual", "=", "False", ",", "\n", "test", "=", "True", ",", "feature_only", "=", "False", ",", "num_classes", "=", "10", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "64", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channel", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "num_blocks", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "            ", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "if", "test", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves", "\n", "# like an identity. This improves the model by 0.2~0.3% according to:", "\n", "# https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.ResNet._make_layer": [[114, 122], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_blocks", ")", ":", "\n", "            ", "stride", "=", "strides", "[", "i", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.ResNet.forward": [[123, 136], ["resnet_stl.ResNet.maxpool", "resnet_stl.ResNet.layer1", "resnet_stl.ResNet.layer2", "resnet_stl.ResNet.layer3", "resnet_stl.ResNet.layer4", "torch.relu", "torch.relu", "torch.relu", "resnet_stl.ResNet.avgpool", "resnet_stl.ResNet.view", "resnet_stl.ResNet.fc", "resnet_stl.ResNet.bn1", "resnet_stl.ResNet.size", "resnet_stl.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "maxpool", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "            ", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.resnet18": [[138, 140], ["resnet_stl.ResNet"], "function", ["None"], ["", "", "def", "resnet18", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.build_feature_module.build_feature_module": [[9, 28], ["fea_cfg_ori.copy", "fea_cfg_ori.copy.pop", "mlp.MLP", "convnet.ConvNet", "cluster_resnet.ClusterResNet", "resnet_stl.resnet18", "resnet_cifar.resnet18_cifar", "imagenet.ImageNet", "imagenet.ResNet34"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_stl.resnet18", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet_cifar.resnet18_cifar", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.imagenet.ImageNet", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.imagenet.ResNet34"], ["def", "build_feature_module", "(", "fea_cfg_ori", ")", ":", "\n", "    ", "fea_cfg", "=", "fea_cfg_ori", ".", "copy", "(", ")", "\n", "fea_type", "=", "fea_cfg", ".", "pop", "(", "\"type\"", ")", "\n", "if", "fea_type", "==", "\"mlp\"", ":", "\n", "        ", "return", "MLP", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "\"convnet\"", ":", "\n", "        ", "return", "ConvNet", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "\"clusterresnet\"", ":", "\n", "        ", "return", "ClusterResNet", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "\"resnet18\"", ":", "\n", "        ", "return", "resnet18", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "\"resnet18_cifar\"", ":", "\n", "        ", "return", "resnet18_cifar", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "\"imagenet\"", ":", "\n", "        ", "return", "ImageNet", "(", "**", "fea_cfg", ")", "\n", "", "elif", "fea_type", "==", "'resnet34'", ":", "\n", "        ", "return", "ResNet34", "(", "**", "fea_cfg", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.BasicBlock.__init__": [[14, 27], ["torch.Module.__init__", "resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "track_running_stats", "=", "None", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "track_running_stats", "is", "not", "None", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.BasicBlock.forward": [[28, 45], ["torchvision.models.resnet.BasicBlock.conv1", "torchvision.models.resnet.BasicBlock.bn1", "torchvision.models.resnet.BasicBlock.relu", "torchvision.models.resnet.BasicBlock.conv2", "torchvision.models.resnet.BasicBlock.bn2", "torchvision.models.resnet.BasicBlock.relu", "torchvision.models.resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNetTrunk.__init__": [[48, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNetTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNetTrunk._make_layer": [[51, 70], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNet.__init__": [[73, 75], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNet._initialize_weights": [[76, 87], ["torchvision.models.resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "assert", "(", "m", ".", "track_running_stats", "==", "self", ".", "batchnorm_track", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNet5gTrunk.__init__": [[90, 113], ["torchvision.models.resnet.ResNetTrunk.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torchvision.models.resnet.ResNet5gTrunk._make_layer", "torchvision.models.resnet.ResNet5gTrunk._make_layer", "torchvision.models.resnet.ResNet5gTrunk._make_layer", "torchvision.models.resnet.ResNet5gTrunk._make_layer", "torch.Conv2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "in_channels", ",", "batchnorm_track", "=", "True", ",", "fea_dim", "=", "10", ")", ":", "\n", "    ", "super", "(", "ResNet5gTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batchnorm_track", "=", "batchnorm_track", "\n", "\n", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "in_channels", "=", "in_channels", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "layer5", "=", "nn", ".", "Conv2d", "(", "512", ",", "fea_dim", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn5", "=", "nn", ".", "BatchNorm2d", "(", "fea_dim", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.ResNet5gTrunk.forward": [[114, 130], ["torchvision.models.resnet.ResNet5gTrunk.conv1", "torchvision.models.resnet.ResNet5gTrunk.bn1", "torchvision.models.resnet.ResNet5gTrunk.relu", "torchvision.models.resnet.ResNet5gTrunk.maxpool", "torchvision.models.resnet.ResNet5gTrunk.layer1", "torchvision.models.resnet.ResNet5gTrunk.layer2", "torchvision.models.resnet.ResNet5gTrunk.layer3", "torchvision.models.resnet.ResNet5gTrunk.layer4", "torchvision.models.resnet.ResNet5gTrunk.layer5", "torchvision.models.resnet.ResNet5gTrunk.bn5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer5", "(", "x", ")", "\n", "x", "=", "self", ".", "bn5", "(", "x", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.resnet.conv3x3": [[5, 9], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.mlp.MLP.__init__": [[7, 25], ["torch.Module.__init__", "range", "len", "torch.Linear", "torch.Linear", "torch.Linear", "mlp.MLP.add_module", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "mlp.MLP.add_module"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_neurons", ",", "drop_out", "=", "-", "1", ",", "last_activation", "=", "None", ",", "return_extra_index", "=", "[", "]", ",", "batch_norm", "=", "False", ")", ":", "\n", "        ", "super", "(", "MLP", ",", "self", ")", ".", "__init__", "(", ")", "\n", "num_layer", "=", "len", "(", "num_neurons", ")", "-", "1", "\n", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "layer_name", "=", "\"lin{}\"", ".", "format", "(", "i", "+", "1", ")", "\n", "layer", "=", "nn", ".", "Linear", "(", "num_neurons", "[", "i", "]", ",", "num_neurons", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "if", "batch_norm", ":", "\n", "                ", "layer_name", "=", "\"bn{}\"", ".", "format", "(", "i", "+", "1", ")", "\n", "layer", "=", "nn", ".", "BatchNorm1d", "(", "num_neurons", "[", "i", "+", "1", "]", ")", "\n", "self", ".", "add_module", "(", "layer_name", ",", "layer", ")", "\n", "\n", "", "", "self", ".", "num_layer", "=", "num_layer", "\n", "self", ".", "drop_out", "=", "drop_out", "\n", "self", ".", "last_activation", "=", "last_activation", "\n", "self", ".", "return_extra_index", "=", "return_extra_index", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.mlp.MLP.forward": [[26, 66], ["range", "mlp.MLP.__getattr__", "mlp.MLP.", "torch.relu", "torch.relu", "torch.relu", "len", "mlp.MLP.__getattr__", "mlp.MLP.", "torch.relu", "torch.relu", "torch.relu", "outs_extra.append", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.dropout", "torch.dropout", "torch.dropout", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "[].unsqueeze", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax.max", "torch.softmax.max", "torch.softmax.max"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "num_layer", "=", "self", ".", "num_layer", "\n", "outs_extra", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "num_layer", ")", ":", "\n", "            ", "layer_name", "=", "\"lin{}\"", ".", "format", "(", "i", "+", "1", ")", "\n", "layer", "=", "self", ".", "__getattr__", "(", "layer_name", ")", "\n", "x", "=", "layer", "(", "x", ")", "\n", "\n", "if", "self", ".", "batch_norm", ":", "\n", "                ", "bn_name", "=", "\"bn{}\"", ".", "format", "(", "i", "+", "1", ")", "\n", "bn", "=", "self", ".", "__getattr__", "(", "bn_name", ")", "\n", "x", "=", "bn", "(", "x", ")", "\n", "\n", "", "if", "i", "<", "num_layer", "-", "1", ":", "\n", "                ", "if", "self", ".", "drop_out", ">=", "0", ":", "\n", "                    ", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "drop_out", ",", "training", "=", "self", ".", "training", ")", "\n", "", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "\n", "", "if", "(", "i", "+", "1", ")", "in", "self", ".", "return_extra_index", ":", "\n", "                ", "outs_extra", ".", "append", "(", "x", ")", "\n", "\n", "", "", "if", "self", ".", "last_activation", "==", "\"relu\"", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "x", ",", "inplace", "=", "True", ")", "\n", "", "elif", "self", ".", "last_activation", "==", "\"sigmoid\"", ":", "\n", "            ", "x", "=", "torch", ".", "sigmoid", "(", "x", ")", "\n", "", "elif", "self", ".", "last_activation", "==", "\"exp_norm\"", ":", "\n", "            ", "x", "=", "torch", ".", "exp", "(", "x", "-", "x", ".", "max", "(", "dim", "=", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "elif", "self", ".", "last_activation", "==", "\"tanh\"", ":", "\n", "            ", "x", "=", "torch", ".", "tanh", "(", "x", ")", "\n", "", "elif", "self", ".", "last_activation", "==", "\"softmax\"", ":", "\n", "            ", "x", "=", "torch", ".", "softmax", "(", "x", ",", "dim", "=", "1", ")", "\n", "", "elif", "self", ".", "last_activation", "is", "None", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "assert", "TypeError", "\n", "\n", "", "if", "len", "(", "outs_extra", ")", ">", "0", ":", "\n", "            ", "return", "[", "x", "]", "+", "outs_extra", "\n", "", "else", ":", "\n", "            ", "return", "x", "", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.BasicBlock.__init__": [[9, 23], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu1", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu2", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "out_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "droprate", "=", "dropRate", "\n", "self", ".", "equalInOut", "=", "(", "in_planes", "==", "out_planes", ")", "\n", "self", ".", "convShortcut", "=", "(", "not", "self", ".", "equalInOut", ")", "and", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "or", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.BasicBlock.forward": [[24, 40], ["wrn.BasicBlock.conv2", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu1", "wrn.BasicBlock.relu2", "wrn.BasicBlock.relu2", "torch.dropout", "torch.dropout", "torch.dropout", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "torch.add", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn1", "wrn.BasicBlock.bn2", "wrn.BasicBlock.bn2", "wrn.BasicBlock.convShortcut", "wrn.BasicBlock.conv1", "wrn.BasicBlock.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "x", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu1", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "", "if", "self", ".", "equalInOut", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "out", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu2", "(", "self", ".", "bn2", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "", "if", "self", ".", "droprate", ">", "0", ":", "\n", "            ", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "droprate", ",", "training", "=", "self", ".", "training", ")", "\n", "", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "if", "not", "self", ".", "equalInOut", ":", "\n", "            ", "return", "torch", ".", "add", "(", "self", ".", "convShortcut", "(", "x", ")", ",", "out", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "add", "(", "x", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.NetworkBlock.__init__": [[43, 46], ["torch.Module.__init__", "wrn.NetworkBlock._make_layer"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "nb_layers", ",", "in_planes", ",", "out_planes", ",", "block", ",", "stride", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "NetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "layer", "=", "self", ".", "_make_layer", "(", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.NetworkBlock._make_layer": [[47, 52], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "in_planes", ",", "out_planes", ",", "nb_layers", ",", "stride", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "nb_layers", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "i", "==", "0", "and", "in_planes", "or", "out_planes", ",", "out_planes", ",", "i", "==", "0", "and", "stride", "or", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.NetworkBlock.forward": [[53, 55], ["wrn.NetworkBlock.layer"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "layer", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.WideResNet.__init__": [[58, 88], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "wrn.WideResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "depth", ",", "num_classes", ",", "widen_factor", "=", "1", ",", "bn_momentum", "=", "0.1", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "nChannels", "=", "[", "16", ",", "16", "*", "widen_factor", ",", "32", "*", "widen_factor", ",", "64", "*", "widen_factor", "]", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", "\n", "n", "=", "(", "depth", "-", "4", ")", "//", "6", "\n", "block", "=", "BasicBlock", "\n", "# 1st conv before any network block", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "nChannels", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "# 1st block", "\n", "self", ".", "block1", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "0", "]", ",", "nChannels", "[", "1", "]", ",", "block", ",", "1", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 2nd block", "\n", "self", ".", "block2", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "1", "]", ",", "nChannels", "[", "2", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# 3rd block", "\n", "self", ".", "block3", "=", "NetworkBlock", "(", "n", ",", "nChannels", "[", "2", "]", ",", "nChannels", "[", "3", "]", ",", "block", ",", "2", ",", "bn_momentum", ",", "leaky_slope", ",", "dropRate", ")", "\n", "# global average pooling and classifier", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nChannels", "[", "3", "]", ",", "momentum", "=", "bn_momentum", ")", "\n", "self", ".", "relu", "=", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "leaky_slope", ",", "inplace", "=", "True", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "nChannels", "[", "3", "]", ",", "num_classes", ")", "\n", "self", ".", "nChannels", "=", "nChannels", "[", "3", "]", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.WideResNet.forward": [[89, 102], ["wrn.WideResNet.conv1", "wrn.WideResNet.block1", "wrn.WideResNet.block2", "wrn.WideResNet.block3", "wrn.WideResNet.relu", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "wrn.WideResNet.fc", "wrn.WideResNet.bn1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "ood_test", "=", "False", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "block1", "(", "out", ")", "\n", "out", "=", "self", ".", "block2", "(", "out", ")", "\n", "out", "=", "self", ".", "block3", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "self", ".", "bn1", "(", "out", ")", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "8", ")", "\n", "out", "=", "out", ".", "view", "(", "-", "1", ",", "self", ".", "nChannels", ")", "\n", "output", "=", "self", ".", "fc", "(", "out", ")", "\n", "if", "ood_test", ":", "\n", "            ", "return", "output", ",", "out", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.build_WideResNet.__init__": [[104, 110], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "depth", "=", "28", ",", "widen_factor", "=", "2", ",", "bn_momentum", "=", "0.01", ",", "leaky_slope", "=", "0.0", ",", "dropRate", "=", "0.0", ")", ":", "\n", "        ", "self", ".", "depth", "=", "depth", "\n", "self", ".", "widen_factor", "=", "widen_factor", "\n", "self", ".", "bn_momentum", "=", "bn_momentum", "\n", "self", ".", "dropRate", "=", "dropRate", "\n", "self", ".", "leaky_slope", "=", "leaky_slope", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.build_WideResNet.build": [[111, 118], ["wrn.WideResNet"], "methods", ["None"], ["", "def", "build", "(", "self", ",", "num_classes", ")", ":", "\n", "        ", "return", "WideResNet", "(", "depth", "=", "self", ".", "depth", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "widen_factor", "=", "self", ".", "widen_factor", ",", "\n", "bn_momentum", "=", "self", ".", "bn_momentum", ",", "\n", "leaky_slope", "=", "self", ".", "leaky_slope", ",", "\n", "dropRate", "=", "self", ".", "dropRate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.WideResNet_cifar100.__init__": [[121, 159], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "wrn.NetworkBlock", "wrn.NetworkBlock", "wrn.NetworkBlock", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "wrn.WideResNet_cifar100.modules", "isinstance", "m.weight.data.normal_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["wrn", "=", "wrn_builder", ".", "build", "(", "10", ")", "\n", "print", "(", "wrn", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.wrn.WideResNet_cifar100.forward": [[160, 176], ["wrn.WideResNet_cifar100.conv1", "wrn.WideResNet_cifar100.block1", "wrn.WideResNet_cifar100.block2", "wrn.WideResNet_cifar100.block3", "wrn.WideResNet_cifar100.relu", "wrn.WideResNet_cifar100.bn1", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "wrn.WideResNet_cifar100.view", "wrn.WideResNet_cifar100.fc", "wrn.WideResNet_cifar100.mlp"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.BasicBlock.__init__": [[13, 26], ["torch.Module.__init__", "cluster_resnet.conv3x3", "torch.BatchNorm2d", "torch.ReLU", "cluster_resnet.conv3x3", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "track_running_stats", "=", "None", ")", ":", "\n", "    ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "assert", "(", "track_running_stats", "is", "not", "None", ")", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ",", "track_running_stats", "=", "track_running_stats", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.BasicBlock.forward": [[27, 44], ["cluster_resnet.BasicBlock.conv1", "cluster_resnet.BasicBlock.bn1", "cluster_resnet.BasicBlock.relu", "cluster_resnet.BasicBlock.conv2", "cluster_resnet.BasicBlock.bn2", "cluster_resnet.BasicBlock.relu", "cluster_resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "      ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk.__init__": [[47, 49], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNetTrunk", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer": [[50, 69], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "    ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "      ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "      ", "layers", ".", "append", "(", "\n", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNet.__init__": [[72, 74], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["  ", "def", "__init__", "(", "self", ")", ":", "\n", "    ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNet._initialize_weights": [[75, 86], ["cluster_resnet.ResNet.modules", "isinstance", "torch.init.kaiming_normal_", "isinstance", "m.weight.data.fill_", "m.bias.data.zero_", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "    ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "      ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "        ", "assert", "(", "m", ".", "track_running_stats", "==", "self", ".", "batchnorm_track", ")", "\n", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.01", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.__init__": [[89, 126], ["cluster_resnet.ResNetTrunk.__init__", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "cluster_resnet.ClusterResNet._make_layer", "print", "torch.AvgPool2d", "torch.Linear", "torch.Sequential", "torch.Linear", "torch.ReLU", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ResNetTrunk._make_layer"], ["  ", "def", "__init__", "(", "self", ",", "num_classes", ",", "in_channels", "=", "3", ",", "in_size", "=", "96", ",", "batchnorm_track", "=", "True", ",", "test", "=", "True", ",", "feature_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ClusterResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "batchnorm_track", "=", "batchnorm_track", "\n", "\n", "block", "=", "BasicBlock", "\n", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", "\n", "\n", "in_channels", "=", "in_channels", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ",", "track_running_stats", "=", "self", ".", "batchnorm_track", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "feature_only", "=", "feature_only", "\n", "if", "not", "feature_only", ":", "\n", "      ", "if", "in_size", "==", "96", ":", "\n", "        ", "avg_pool_sz", "=", "7", "\n", "", "elif", "in_size", "==", "64", ":", "\n", "        ", "avg_pool_sz", "=", "5", "\n", "", "elif", "in_size", "==", "32", ":", "\n", "        ", "avg_pool_sz", "=", "3", "\n", "", "print", "(", "\"avg_pool_sz %d\"", "%", "avg_pool_sz", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "avg_pool_sz", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "test", "=", "test", "\n", "if", "test", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "        ", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "512", ",", "512", ")", ",", "nn", ".", "ReLU", "(", ")", ",", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.ClusterResNet.forward": [[127, 144], ["cluster_resnet.ClusterResNet.conv1", "cluster_resnet.ClusterResNet.bn1", "cluster_resnet.ClusterResNet.relu", "cluster_resnet.ClusterResNet.maxpool", "cluster_resnet.ClusterResNet.layer1", "cluster_resnet.ClusterResNet.layer2", "cluster_resnet.ClusterResNet.layer3", "cluster_resnet.ClusterResNet.layer4", "cluster_resnet.ClusterResNet.avgpool", "cluster_resnet.ClusterResNet.view", "cluster_resnet.ClusterResNet.fc", "cluster_resnet.ClusterResNet.size"], "methods", ["None"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "not", "self", ".", "feature_only", ":", "\n", "      ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.feature_modules.cluster_resnet.conv3x3": [[4, 8], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "  ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.ConfigDict.__missing__": [[14, 16], ["KeyError"], "methods", ["None"], ["    ", "def", "__missing__", "(", "self", ",", "name", ")", ":", "\n", "        ", "raise", "KeyError", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.ConfigDict.__getattr__": [[17, 28], ["super().__getattr__", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "value", "=", "super", "(", "ConfigDict", ",", "self", ")", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "KeyError", ":", "\n", "            ", "ex", "=", "AttributeError", "(", "\"'{}' object has no attribute '{}'\"", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "name", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "ex", "=", "e", "\n", "", "else", ":", "\n", "            ", "return", "value", "\n", "", "raise", "ex", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile": [[75, 98], ["os.abspath", "utils.path.check_file_exist", "os.abspath.endswith", "config.Config", "os.expanduser", "os.dirname", "sys.path.insert", "importlib.import_module", "sys.path.pop", "os.abspath.endswith", "os.basename", "ValueError", "mmcv.load", "IOError", "importlib.import_module.__dict__.items", "name.startswith"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.path.check_file_exist", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["@", "staticmethod", "\n", "def", "fromfile", "(", "filename", ")", ":", "\n", "        ", "filename", "=", "osp", ".", "abspath", "(", "osp", ".", "expanduser", "(", "filename", ")", ")", "\n", "check_file_exist", "(", "filename", ")", "\n", "if", "filename", ".", "endswith", "(", "'.py'", ")", ":", "\n", "            ", "module_name", "=", "osp", ".", "basename", "(", "filename", ")", "[", ":", "-", "3", "]", "\n", "if", "'.'", "in", "module_name", ":", "\n", "                ", "raise", "ValueError", "(", "'Dots are not allowed in config file path.'", ")", "\n", "", "config_dir", "=", "osp", ".", "dirname", "(", "filename", ")", "\n", "sys", ".", "path", ".", "insert", "(", "0", ",", "config_dir", ")", "\n", "mod", "=", "import_module", "(", "module_name", ")", "\n", "sys", ".", "path", ".", "pop", "(", "0", ")", "\n", "cfg_dict", "=", "{", "\n", "name", ":", "value", "\n", "for", "name", ",", "value", "in", "mod", ".", "__dict__", ".", "items", "(", ")", "\n", "if", "not", "name", ".", "startswith", "(", "'__'", ")", "\n", "}", "\n", "", "elif", "filename", ".", "endswith", "(", "(", "'.yml'", ",", "'.yaml'", ",", "'.json'", ")", ")", ":", "\n", "            ", "import", "mmcv", "\n", "cfg_dict", "=", "mmcv", ".", "load", "(", "filename", ")", "\n", "", "else", ":", "\n", "            ", "raise", "IOError", "(", "'Only py/yml/yaml/json type are supported now!'", ")", "\n", "", "return", "Config", "(", "cfg_dict", ",", "filename", "=", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.auto_argparser": [[99, 111], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "Config.from_file", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "config.add_args", "argparse.ArgumentParser.parse_known_args"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.add_args"], ["", "@", "staticmethod", "\n", "def", "auto_argparser", "(", "description", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate argparser from config file automatically (experimental)\n        \"\"\"", "\n", "partial_parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "partial_parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "cfg_file", "=", "partial_parser", ".", "parse_known_args", "(", ")", "[", "0", "]", ".", "config", "\n", "cfg", "=", "Config", ".", "from_file", "(", "cfg_file", ")", "\n", "parser", "=", "ArgumentParser", "(", "description", "=", "description", ")", "\n", "parser", ".", "add_argument", "(", "'config'", ",", "help", "=", "'config file path'", ")", "\n", "add_args", "(", "parser", ",", "cfg", ")", "\n", "return", "parser", ",", "cfg", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__init__": [[112, 126], ["object.__setattr__", "object.__setattr__", "dict", "config.ConfigDict", "object.__setattr__", "isinstance", "TypeError", "open", "object.__setattr__", "f.read", "type"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__"], ["", "def", "__init__", "(", "self", ",", "cfg_dict", "=", "None", ",", "filename", "=", "None", ")", ":", "\n", "        ", "if", "cfg_dict", "is", "None", ":", "\n", "            ", "cfg_dict", "=", "dict", "(", ")", "\n", "", "elif", "not", "isinstance", "(", "cfg_dict", ",", "dict", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'cfg_dict must be a dict, but got {}'", ".", "format", "(", "\n", "type", "(", "cfg_dict", ")", ")", ")", "\n", "\n", "", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_cfg_dict'", ",", "ConfigDict", "(", "cfg_dict", ")", ")", "\n", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_filename'", ",", "filename", ")", "\n", "if", "filename", ":", "\n", "            ", "with", "open", "(", "filename", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_text'", ",", "f", ".", "read", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "super", "(", "Config", ",", "self", ")", ".", "__setattr__", "(", "'_text'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.filename": [[127, 130], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "filename", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_filename", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.text": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "text", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_text", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__repr__": [[135, 138], ["config.Config._cfg_dict.__repr__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'Config (path: {}): {}'", ".", "format", "(", "self", ".", "filename", ",", "\n", "self", ".", "_cfg_dict", ".", "__repr__", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__len__": [[139, 141], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_cfg_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getattr__": [[142, 144], ["getattr"], "methods", ["None"], ["", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "_cfg_dict", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__getitem__": [[145, 147], ["config.Config._cfg_dict.__getitem__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPY.__getitem__"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "return", "self", ".", "_cfg_dict", ".", "__getitem__", "(", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__": [[148, 152], ["isinstance", "config.Config._cfg_dict.__setattr__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setattr__"], ["", "def", "__setattr__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setattr__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setitem__": [[153, 157], ["isinstance", "config.Config._cfg_dict.__setitem__", "config.ConfigDict"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__setitem__"], ["", "def", "__setitem__", "(", "self", ",", "name", ",", "value", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "dict", ")", ":", "\n", "            ", "value", "=", "ConfigDict", "(", "value", ")", "\n", "", "self", ".", "_cfg_dict", ".", "__setitem__", "(", "name", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.__iter__": [[158, 160], ["iter"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "_cfg_dict", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.add_args": [[30, 47], ["cfg.items", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "parser.add_argument", "isinstance", "config.add_args", "isinstance", "parser.add_argument", "print", "type", "type"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.add_args"], ["", "", "def", "add_args", "(", "parser", ",", "cfg", ",", "prefix", "=", "''", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "cfg", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "v", ",", "str", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "int", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "int", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "float", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "float", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "bool", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "action", "=", "'store_true'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "dict", ")", ":", "\n", "            ", "add_args", "(", "parser", ",", "v", ",", "k", "+", "'.'", ")", "\n", "", "elif", "isinstance", "(", "v", ",", "collections_abc", ".", "Iterable", ")", ":", "\n", "            ", "parser", ".", "add_argument", "(", "'--'", "+", "prefix", "+", "k", ",", "type", "=", "type", "(", "v", "[", "0", "]", ")", ",", "nargs", "=", "'+'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'connot parse key {} of type {}'", ".", "format", "(", "prefix", "+", "k", ",", "type", "(", "v", ")", ")", ")", "\n", "", "", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.__init__": [[56, 111], ["torchvision.datasets.vision.VisionDataset.__init__", "numpy.vstack().reshape", "cifar.CIFAR10.data.transpose", "cifar.CIFAR10._load_meta", "numpy.load", "cifar.CIFAR10.download", "cifar.CIFAR10._check_integrity", "RuntimeError", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "cifar.CIFAR10.data.append", "numpy.vstack", "pickle.load", "pickle.load", "cifar.CIFAR10.targets.extend", "cifar.CIFAR10.targets.extend"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._load_meta", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["download", "=", "False", ")", ":", "\n", "\n", "        ", "super", "(", "CIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "self", ".", "train", "=", "train", "# training set or test set", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "\n", "", "if", "self", ".", "train", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "\n", "", "else", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "test_list", "\n", "\n", "", "self", ".", "data", "=", "[", "]", "\n", "self", ".", "targets", "=", "[", "]", "\n", "\n", "if", "all", ":", "\n", "            ", "downloaded_list", "=", "self", ".", "train_list", "+", "self", ".", "test_list", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "for", "file_name", ",", "checksum", "in", "downloaded_list", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "file_name", ")", "\n", "with", "open", "(", "file_path", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "                    ", "entry", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "data", ".", "append", "(", "entry", "[", "'data'", "]", ")", "\n", "if", "'labels'", "in", "entry", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'labels'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "targets", ".", "extend", "(", "entry", "[", "'fine_labels'", "]", ")", "\n", "\n", "", "", "", "self", ".", "data", "=", "np", ".", "vstack", "(", "self", ".", "data", ")", ".", "reshape", "(", "-", "1", ",", "3", ",", "32", ",", "32", ")", "\n", "self", ".", "data", "=", "self", ".", "data", ".", "transpose", "(", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "# convert to HWC", "\n", "\n", "self", ".", "_load_meta", "(", ")", "\n", "\n", "", "def", "_load_meta", "(", "self", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "meta", "[", "'filename'", "]", ")", "\n", "if", "not", "check_integrity", "(", "path", ",", "self", ".", "meta", "[", "'md5'", "]", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset metadata file not found or corrupted.'", "+", "\n", "' You can use download=True to download it'", ")", "\n", "", "with", "open", "(", "path", ",", "'rb'", ")", "as", "infile", ":", "\n", "            ", "if", "sys", ".", "version_info", "[", "0", "]", "==", "2", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ")", "\n", "", "else", ":", "\n", "                ", "data", "=", "pickle", ".", "load", "(", "infile", ",", "encoding", "=", "'latin1'", ")", "\n", "", "self", ".", "classes", "=", "data", "[", "self", ".", "meta", "[", "'key'", "]", "]", "\n", "", "self", ".", "class_to_idx", "=", "{", "_class", ":", "i", "for", "i", ",", "_class", "in", "enumerate", "(", "self", ".", "classes", ")", "}", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._load_meta": [[112, 124], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity", "RuntimeError", "open", "pickle.load", "pickle.load", "enumerate"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "targets", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.__getitem__": [[125, 176], ["PIL.Image.fromarray", "cifar.CIFAR10.transform1", "cifar.CIFAR10.transform2", "cifar.CIFAR10.target_transform", "numpy.array", "numpy.array", "matplotlib.figure", "matplotlib.imshow", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "cifar.CIFAR10.numpy().transpose", "cifar.CIFAR10.numpy().transpose", "cifar.CIFAR10.numpy", "cifar.CIFAR10.numpy"], "methods", ["None"], ["img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n", "", "def", "_check_integrity", "(", "self", ")", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "def", "download", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n", "return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"Split: {}\"", ".", "format", "(", "\"Train\"", "if", "self", ".", "train", "is", "True", "else", "\"Test\"", ")", "\n", "\n", "\n", "", "", "class", "CIFAR100", "(", "CIFAR10", ")", ":", "\n", "    ", "\"\"\"`CIFAR100 <https://www.cs.toronto.edu/~kriz/cifar.html>`_ Dataset.\n\n    This is a subclass of the `CIFAR10` Dataset.\n    \"\"\"", "\n", "base_folder", "=", "'cifar-100-python'", "\n", "url", "=", "\"https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\"", "\n", "filename", "=", "\"cifar-100-python.tar.gz\"", "\n", "tgz_md5", "=", "'eb9058c3a382ffc7106e4002c42a8d85'", "\n", "train_list", "=", "[", "\n", "[", "'train'", ",", "'16019d7e3df5f24257cddd939b257f8d'", "]", ",", "\n", "]", "\n", "\n", "test_list", "=", "[", "\n", "[", "'test'", ",", "'f0ef6b0ae62326f3e7ffdfab6717acfc'", "]", ",", "\n", "]", "\n", "meta", "=", "{", "\n", "'filename'", ":", "'meta'", ",", "\n", "'key'", ":", "'fine_label_names'", ",", "\n", "'md5'", ":", "'7973b15100ade9c7d40fb424638fde48'", ",", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.__len__": [[177, 179], ["len"], "methods", ["None"], ["}", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity": [[180, 188], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "torchvision.datasets.utils.check_integrity"], "methods", ["None"], ["", "class", "CIFAR20", "(", "CIFAR10", ")", ":", "\n", "    ", "\"\"\"CIFAR20 Dataset.\n\n    This is a subclass of the `CIFAR10` Dataset.\n    \"\"\"", "\n", "base_folder", "=", "'cifar-100-python'", "\n", "url", "=", "\"https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\"", "\n", "filename", "=", "\"cifar-100-python.tar.gz\"", "\n", "tgz_md5", "=", "'eb9058c3a382ffc7106e4002c42a8d85'", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download": [[189, 194], ["cifar.CIFAR10._check_integrity", "torchvision.datasets.utils.download_and_extract_archive", "print"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity"], ["train_list", "=", "[", "\n", "[", "'train'", ",", "'16019d7e3df5f24257cddd939b257f8d'", "]", ",", "\n", "]", "\n", "\n", "test_list", "=", "[", "\n", "[", "'test'", ",", "'f0ef6b0ae62326f3e7ffdfab6717acfc'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.extra_repr": [[195, 197], ["None"], "methods", ["None"], ["]", "\n", "meta", "=", "{", "\n", "'filename'", ":", "'meta'", ",", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR20.__init__": [[243, 252], ["cifar.CIFAR10.__init__", "enumerate", "cifar._cifar100_to_cifar20"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar._cifar100_to_cifar20"], ["29", ":", "15", ",", "\n", "30", ":", "0", ",", "\n", "31", ":", "11", ",", "\n", "32", ":", "1", ",", "\n", "33", ":", "10", ",", "\n", "34", ":", "12", ",", "\n", "35", ":", "14", ",", "\n", "36", ":", "16", ",", "\n", "37", ":", "9", ",", "\n", "38", ":", "11", ",", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar._cifar100_to_cifar20": [[254, 358], ["None"], "function", ["None"], ["40", ":", "5", ",", "\n", "41", ":", "19", ",", "\n", "42", ":", "8", ",", "\n", "43", ":", "8", ",", "\n", "44", ":", "15", ",", "\n", "45", ":", "13", ",", "\n", "46", ":", "14", ",", "\n", "47", ":", "17", ",", "\n", "48", ":", "18", ",", "\n", "49", ":", "10", ",", "\n", "50", ":", "16", ",", "\n", "51", ":", "4", ",", "\n", "52", ":", "17", ",", "\n", "53", ":", "4", ",", "\n", "54", ":", "2", ",", "\n", "55", ":", "0", ",", "\n", "56", ":", "17", ",", "\n", "57", ":", "4", ",", "\n", "58", ":", "18", ",", "\n", "59", ":", "17", ",", "\n", "60", ":", "10", ",", "\n", "61", ":", "3", ",", "\n", "62", ":", "2", ",", "\n", "63", ":", "12", ",", "\n", "64", ":", "12", ",", "\n", "65", ":", "16", ",", "\n", "66", ":", "12", ",", "\n", "67", ":", "1", ",", "\n", "68", ":", "9", ",", "\n", "69", ":", "19", ",", "\n", "70", ":", "2", ",", "\n", "71", ":", "10", ",", "\n", "72", ":", "0", ",", "\n", "73", ":", "1", ",", "\n", "74", ":", "16", ",", "\n", "75", ":", "12", ",", "\n", "76", ":", "9", ",", "\n", "77", ":", "13", ",", "\n", "78", ":", "15", ",", "\n", "79", ":", "13", ",", "\n", "80", ":", "16", ",", "\n", "81", ":", "19", ",", "\n", "82", ":", "2", ",", "\n", "83", ":", "4", ",", "\n", "84", ":", "6", ",", "\n", "85", ":", "19", ",", "\n", "86", ":", "5", ",", "\n", "87", ":", "5", ",", "\n", "88", ":", "8", ",", "\n", "89", ":", "19", ",", "\n", "90", ":", "18", ",", "\n", "91", ":", "1", ",", "\n", "92", ":", "2", ",", "\n", "93", ":", "15", ",", "\n", "94", ":", "6", ",", "\n", "95", ":", "0", ",", "\n", "96", ":", "17", ",", "\n", "97", ":", "8", ",", "\n", "98", ":", "14", ",", "\n", "99", ":", "13", "}", "\n", "\n", "return", "_dict", "[", "target", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.tiny_imagenet.TinyImageNet.__init__": [[38, 50], ["torchvision.datasets.ImageFolder.__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "root", ",", "\n", "transform", "=", "None", ",", "\n", "target_transform", "=", "None", ",", "\n", "is_valid_file", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TinyImageNet", ",", "self", ")", ".", "__init__", "(", "root", ",", "\n", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ",", "\n", "is_valid_file", "=", "is_valid_file", ")", "\n", "self", ".", "imgs", "=", "self", ".", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Augment.__init__": [[102, 105], ["augment.augment_list"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.augment_list"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "augment_list", "=", "augment_list", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Augment.__call__": [[106, 113], ["random.choices", "op", "random.random", "float"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "ops", "=", "random", ".", "choices", "(", "self", ".", "augment_list", ",", "k", "=", "self", ".", "n", ")", "\n", "for", "op", ",", "minval", ",", "maxval", "in", "ops", ":", "\n", "            ", "val", "=", "(", "random", ".", "random", "(", ")", ")", "*", "float", "(", "maxval", "-", "minval", ")", "+", "minval", "\n", "img", "=", "op", "(", "img", ",", "val", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Cutout.__init__": [[122, 126], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_holes", ",", "length", ",", "random", "=", "False", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "self", ".", "random", "=", "random", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Cutout.__call__": [[127, 149], ["img.size", "img.size", "random.randint", "numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "h", "=", "img", ".", "size", "(", "1", ")", "\n", "w", "=", "img", ".", "size", "(", "2", ")", "\n", "length", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "length", ")", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.ShearX": [[11, 15], ["img.transform", "random.random"], "function", ["None"], ["def", "ShearX", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "v", ",", "0", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.ShearY": [[16, 20], ["img.transform", "random.random"], "function", ["None"], ["", "def", "ShearY", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "v", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Identity": [[21, 23], ["None"], "function", ["None"], ["", "def", "Identity", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.TranslateX": [[24, 29], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateX", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "0", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.TranslateY": [[30, 35], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateY", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "v", "=", "v", "*", "img", ".", "size", "[", "1", "]", "\n", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.TranslateXAbs": [[36, 40], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateXAbs", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "v", ",", "0", ",", "1", ",", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.TranslateYAbs": [[41, 45], ["img.transform", "random.random"], "function", ["None"], ["", "def", "TranslateYAbs", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "transform", "(", "img", ".", "size", ",", "PIL", ".", "Image", ".", "AFFINE", ",", "(", "1", ",", "0", ",", "0", ",", "0", ",", "1", ",", "v", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Rotate": [[46, 50], ["img.rotate", "random.random"], "function", ["None"], ["", "def", "Rotate", "(", "img", ",", "v", ")", ":", "\n", "    ", "if", "random_mirror", "and", "random", ".", "random", "(", ")", ">", "0.5", ":", "\n", "        ", "v", "=", "-", "v", "\n", "", "return", "img", ".", "rotate", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.AutoContrast": [[51, 53], ["PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast", "PIL.ImageOps.autocontrast"], "function", ["None"], ["", "def", "AutoContrast", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "autocontrast", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Invert": [[54, 56], ["PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert", "PIL.ImageOps.invert"], "function", ["None"], ["", "def", "Invert", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "invert", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Equalize": [[57, 59], ["PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize", "PIL.ImageOps.equalize"], "function", ["None"], ["", "def", "Equalize", "(", "img", ",", "_", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "equalize", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Solarize": [[60, 62], ["PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize", "PIL.ImageOps.solarize"], "function", ["None"], ["", "def", "Solarize", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageOps", ".", "solarize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Posterize": [[63, 66], ["int", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize", "PIL.ImageOps.posterize"], "function", ["None"], ["", "def", "Posterize", "(", "img", ",", "v", ")", ":", "\n", "    ", "v", "=", "int", "(", "v", ")", "\n", "return", "PIL", ".", "ImageOps", ".", "posterize", "(", "img", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast": [[67, 69], ["PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast().enhance", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast", "PIL.ImageEnhance.Contrast"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Contrast"], ["", "def", "Contrast", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageEnhance", ".", "Contrast", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color": [[70, 72], ["PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color().enhance", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color", "PIL.ImageEnhance.Color"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Color"], ["", "def", "Color", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageEnhance", ".", "Color", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness": [[73, 75], ["PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness().enhance", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness", "PIL.ImageEnhance.Brightness"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Brightness"], ["", "def", "Brightness", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageEnhance", ".", "Brightness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness": [[76, 78], ["PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness().enhance", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness", "PIL.ImageEnhance.Sharpness"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.Sharpness"], ["", "def", "Sharpness", "(", "img", ",", "v", ")", ":", "\n", "    ", "return", "PIL", ".", "ImageEnhance", ".", "Sharpness", "(", "img", ")", ".", "enhance", "(", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.augment_list": [[79, 97], ["None"], "function", ["None"], ["", "def", "augment_list", "(", ")", ":", "\n", "    ", "l", "=", "[", "\n", "(", "Identity", ",", "0", ",", "1", ")", ",", "\n", "(", "AutoContrast", ",", "0", ",", "1", ")", ",", "\n", "(", "Equalize", ",", "0", ",", "1", ")", ",", "\n", "(", "Rotate", ",", "-", "30", ",", "30", ")", ",", "\n", "(", "Solarize", ",", "0", ",", "256", ")", ",", "\n", "(", "Color", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Contrast", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Brightness", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "Sharpness", ",", "0.05", ",", "0.95", ")", ",", "\n", "(", "ShearX", ",", "-", "0.1", ",", "0.1", ")", ",", "\n", "(", "TranslateX", ",", "-", "0.1", ",", "0.1", ")", ",", "\n", "(", "TranslateY", ",", "-", "0.1", ",", "0.1", ")", ",", "\n", "(", "Posterize", ",", "4", ",", "8", ")", ",", "\n", "(", "ShearY", ",", "-", "0.1", ",", "0.1", ")", ",", "\n", "]", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.get_augment": [[114, 116], ["None"], "function", ["None"], ["", "", "def", "get_augment", "(", "name", ")", ":", "\n", "    ", "return", "augment_dict", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.apply_augment": [[117, 120], ["augment.get_augment", "augment_fn", "img.copy"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.augment.get_augment"], ["", "def", "apply_augment", "(", "img", ",", "name", ",", "level", ")", ":", "\n", "    ", "augment_fn", ",", "low", ",", "high", "=", "get_augment", "(", "name", ")", "\n", "return", "augment_fn", "(", "img", ".", "copy", "(", ")", ",", "level", "*", "(", "high", "-", "low", ")", "+", "low", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10.STL10.__init__": [[44, 105], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "ValueError", "stl10.STL10.download", "stl10.STL10._check_integrity", "RuntimeError", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "open", "f.read().splitlines", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "stl10.STL10.__loadfile", "numpy.concatenate", "numpy.concatenate", "f.read", "stl10.STL10.__loadfile", "numpy.asarray", "stl10.STL10.__loadfile", "numpy.asarray"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile"], ["[", "'test_X.bin'", ",", "'7f263ba9f9e0b06b93213547f721ac82'", "]", ",", "\n", "[", "'test_y.bin'", ",", "'36f9794fa4beb8a2c72628de14fa638e'", "]", "\n", "]", "\n", "splits", "=", "(", "'train'", ",", "'train+unlabeled'", ",", "'unlabeled'", ",", "'test'", ",", "'train+test+unlabeled'", ",", "'train+test'", ")", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "split", ":", "str", "=", "\"train\"", ",", "\n", "folds", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "STL10", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "self", ".", "split", "=", "verify_str_arg", "(", "split", ",", "\"split\"", ",", "self", ".", "splits", ")", "\n", "self", ".", "folds", "=", "self", ".", "_verify_folds", "(", "folds", ")", "\n", "\n", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "", "elif", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found or corrupted. '", "\n", "'You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "self", ".", "labels", ":", "np", ".", "ndarray", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'train+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "__load_folds", "(", "folds", ")", "\n", "self", ".", "data_test", ",", "self", ".", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "self", ".", "data_test", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "(", "self", ".", "labels", ",", "self", ".", "labels_test", ")", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10.STL10.__getitem__": [[106, 149], ["PIL.Image.fromarray", "numpy.transpose", "stl10.STL10.transform1", "stl10.STL10.transform2", "numpy.array", "numpy.array", "matplotlib.figure", "matplotlib.imshow", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "int", "stl10.STL10.numpy().transpose", "stl10.STL10.numpy().transpose", "stl10.STL10.numpy", "stl10.STL10.numpy"], "methods", ["None"], ["self", ".", "labels", "=", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "# self.split == 'test':", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "self", ".", "targets", "=", "self", ".", "labels", "\n", "\n", "class_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "class_names_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "class_file", ")", ":", "\n", "            ", "with", "open", "(", "class_file", ")", "as", "f", ":", "\n", "                ", "self", ".", "classes", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n", "", "", "", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10.STL10.__len__": [[150, 152], ["None"], "methods", ["None"], ["if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10.STL10.__loadfile": [[153, 169], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromfile", "numpy.reshape", "numpy.transpose", "open", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile"], ["", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "__loadfile", "(", "self", ",", "data_file", ":", "str", ",", "labels_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10.STL10.__repr__": [[170, 180], ["stl10.STL10.__len__", "stl10.STL10.transform.__repr__().replace", "stl10.STL10.target_transform.__repr__().replace", "stl10.STL10.transform.__repr__", "stl10.STL10.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__"], ["with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "", "return", "images", ",", "labels", "\n", "\n", "", "def", "_check_integrity", "(", "self", ")", "->", "bool", ":", "\n", "        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.transformations.get_train_transformations": [[5, 74], ["torchvision.Compose", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Compose", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomApply", "torchvision.RandomGrayscale", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.RandomHorizontalFlip", "torchvision.RandomAffine", "torchvision.ColorJitter", "torchvision.Compose", "ValueError", "torchvision.RandomHorizontalFlip", "torchvision.RandomCrop", "spice.data.augment.Augment", "torchvision.ToTensor", "torchvision.Normalize", "spice.data.augment.Cutout", "torchvision.ColorJitter"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.augmentation.randaugment.Cutout"], ["def", "get_train_transformations", "(", "cfg", ")", ":", "\n", "    ", "if", "cfg", ".", "aug_type", "==", "'standard'", ":", "\n", "# Standard augmentation strategy", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "**", "cfg", ".", "random_resized_crop", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", "\n", "]", ")", "\n", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'test'", ":", "\n", "# Standard augmentation strategy", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", "\n", "]", ")", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'test_resize'", ":", "\n", "# Standard augmentation strategy", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "[", "cfg", ".", "size", ",", "cfg", ".", "size", "]", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", "\n", "]", ")", "\n", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'weak'", ":", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "cfg", ".", "crop_size", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", "\n", "]", ")", "\n", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'simclr'", ":", "\n", "# Augmentation strategy from the SimCLR paper", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "**", "cfg", ".", "random_resized_crop", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomApply", "(", "[", "\n", "transforms", ".", "ColorJitter", "(", "**", "cfg", ".", "color_jitter", ")", "\n", "]", ",", "p", "=", "cfg", ".", "color_jitter_random_apply", ")", ",", "\n", "transforms", ".", "RandomGrayscale", "(", "**", "cfg", ".", "random_grayscale", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", "\n", "]", ")", "\n", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'scan'", ":", "\n", "# Augmentation strategy from our paper", "\n", "        ", "return", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "cfg", ".", "crop_size", ")", ",", "\n", "Augment", "(", "cfg", ".", "num_strong_augs", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "**", "cfg", ".", "normalize", ")", ",", "\n", "Cutout", "(", "\n", "n_holes", "=", "cfg", ".", "cutout_kwargs", ".", "n_holes", ",", "\n", "length", "=", "cfg", ".", "cutout_kwargs", ".", "length", ",", "\n", "random", "=", "cfg", ".", "cutout_kwargs", ".", "random", ")", "]", ")", "\n", "", "elif", "cfg", ".", "aug_type", "==", "'gatcluster'", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "to_tensor", "=", "transforms", ".", "ToTensor", "(", ")", "\n", "flip", "=", "transforms", ".", "RandomHorizontalFlip", "(", "0.5", ")", "\n", "affine", "=", "transforms", ".", "RandomAffine", "(", "degrees", "=", "10", ",", "translate", "=", "[", "0.1", ",", "0.1", "]", ",", "scale", "=", "[", "0.8", ",", "1.2", "]", ",", "shear", "=", "10", ")", "\n", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.3", ",", "contrast", "=", "0.3", ",", "hue", "=", "0.2", ")", "\n", "T", "=", "transforms", ".", "Compose", "(", "[", "flip", ",", "color_jitter", ",", "affine", ",", "to_tensor", ",", "normalize", "]", ")", "\n", "return", "T", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid augmentation strategy {}'", ".", "format", "(", "p", "[", "'augmentation_strategy'", "]", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNet.__init__": [[36, 42], ["torchvision.ImageFolder.__init__", "torchvision.transforms.Resize", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNet.__len__": [[43, 45], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNet.__getitem__": [[46, 59], ["imagenet.ImageNet.resize", "open", "PIL.Image.open().convert", "imagenet.ImageNet.transform", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNet.get_image": [[60, 66], ["imagenet.ImageNet.resize", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubset.__init__": [[69, 98], ["torch.Dataset.__init__", "os.path.join", "enumerate", "torchvision.transforms.Resize", "open", "f.read().splitlines", "line.split", "subdirs.append", "class_names.append", "os.path.join", "sorted", "glob.glob.glob", "imgs.append", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubset.get_image": [[99, 105], ["imagenet.ImageNetSubset.resize", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubset.__len__": [[106, 108], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubset.__getitem__": [[109, 123], ["imagenet.ImageNetSubset.resize", "open", "PIL.Image.open().convert", "imagenet.ImageNetSubset.transform", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmb.__init__": [[126, 160], ["torch.Dataset.__init__", "os.path.join", "enumerate", "torchvision.transforms.Resize", "numpy.load", "open", "f.read().splitlines", "line.split", "subdirs.append", "class_names.append", "os.path.join", "sorted", "glob.glob.glob", "imgs.append", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmb.get_image": [[161, 167], ["imagenet.ImageNetSubEmb.resize", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmb.__len__": [[168, 170], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmb.__getitem__": [[171, 198], ["imagenet.ImageNetSubEmb.resize", "open", "PIL.Image.open().convert", "imagenet.ImageNetSubEmb.transform1", "imagenet.ImageNetSubEmb.transform2", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmbLMDB.__init__": [[201, 221], ["torch.Dataset.__init__", "imagenet._get_keys_shapes_targets_pickle", "torchvision.transforms.Resize", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._get_keys_shapes_targets_pickle", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmbLMDB.get_image": [[222, 228], ["imagenet.ImageNetSubEmbLMDB.resize", "open", "PIL.Image.open().convert", "PIL.Image.open"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmbLMDB.__len__": [[229, 231], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetSubEmbLMDB.__getitem__": [[232, 285], ["imagenet._read_img_lmdb", "PIL.Image.fromarray", "int", "imagenet.ImageNetSubEmbLMDB.resize", "lmdb.open", "int", "imagenet.ImageNetSubEmbLMDB.transform1", "imagenet.ImageNetSubEmbLMDB.transform2", "numpy.array", "numpy.array", "plt.figure", "plt.imshow", "plt.figure", "plt.imshow", "plt.show", "imagenet.ImageNetSubEmbLMDB.shapes[].split", "imagenet.ImageNetSubEmbLMDB.numpy().transpose", "imagenet.ImageNetSubEmbLMDB.numpy().transpose", "imagenet.ImageNetSubEmbLMDB.numpy", "imagenet.ImageNetSubEmbLMDB.numpy"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._read_img_lmdb"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.TImageNetEmbLMDB.__init__": [[287, 303], ["torch.Dataset.__init__", "imagenet._get_keys_shapes_targets_pickle", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._get_keys_shapes_targets_pickle", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.TImageNetEmbLMDB.__len__": [[304, 306], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.TImageNetEmbLMDB.__getitem__": [[307, 352], ["imagenet._read_img_lmdb", "PIL.Image.fromarray", "int", "lmdb.open", "int", "imagenet.TImageNetEmbLMDB.transform1", "imagenet.TImageNetEmbLMDB.transform2", "numpy.array", "numpy.array", "plt.figure", "plt.imshow", "plt.figure", "plt.imshow", "plt.show", "imagenet.TImageNetEmbLMDB.shapes[].split", "imagenet.TImageNetEmbLMDB.numpy().transpose", "imagenet.TImageNetEmbLMDB.numpy().transpose", "imagenet.TImageNetEmbLMDB.numpy", "imagenet.TImageNetEmbLMDB.numpy"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._read_img_lmdb"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetLMDB.__init__": [[355, 371], ["torch.Dataset.__init__", "imagenet._get_keys_shapes_targets_pickle", "torchvision.transforms.Resize"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._get_keys_shapes_targets_pickle"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetLMDB.__len__": [[372, 374], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet.ImageNetLMDB.__getitem__": [[375, 403], ["imagenet._read_img_lmdb", "PIL.Image.fromarray", "int", "lmdb.open", "int", "imagenet.ImageNetLMDB.resize", "imagenet.ImageNetLMDB.transform", "numpy.array", "numpy.array", "plt.figure", "plt.imshow", "plt.show", "imagenet.ImageNetLMDB.shapes[].split", "img_trans1.numpy().transpose", "img_trans1.numpy"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._read_img_lmdb"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._get_keys_shapes_targets_pickle": [[17, 24], ["pickle.load", "open"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.imagenet._read_img_lmdb": [[26, 33], ["numpy.frombuffer", "np.frombuffer.reshape", "env.begin", "txn.get"], "function", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__init__": [[44, 99], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isfile", "os.path.isfile", "os.path.isfile", "os.path.isfile", "ValueError", "numpy.load", "stl10_embedding.STL10EMB.download", "stl10_embedding.STL10EMB._check_integrity", "RuntimeError", "stl10_embedding.STL10EMB.__loadfile", "stl10_embedding.STL10EMB.__loadfile", "stl10_embedding.STL10EMB.__loadfile", "numpy.concatenate", "numpy.concatenate", "open", "f.read().splitlines", "stl10_embedding.STL10EMB.__loadfile", "stl10_embedding.STL10EMB.__loadfile", "numpy.concatenate", "numpy.concatenate", "numpy.asarray", "stl10_embedding.STL10EMB.__loadfile", "numpy.asarray", "stl10_embedding.STL10EMB.__loadfile", "f.read"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10.download", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.cifar.CIFAR10._check_integrity", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile"], ["def", "__init__", "(", "self", ",", "root", ",", "split", "=", "'train'", ",", "show", "=", "False", ",", "transform1", "=", "None", ",", "transform2", "=", "None", ",", "\n", "download", "=", "False", ",", "embedding", "=", "None", ")", ":", "\n", "        ", "if", "split", "not", "in", "self", ".", "splits", ":", "\n", "            ", "raise", "ValueError", "(", "'Split \"{}\" not found. Valid splits are: {}'", ".", "format", "(", "\n", "split", ",", "', '", ".", "join", "(", "self", ".", "splits", ")", ",", "\n", ")", ")", "\n", "", "self", ".", "root", "=", "os", ".", "path", ".", "expanduser", "(", "root", ")", "\n", "self", ".", "transform1", "=", "transform1", "\n", "self", ".", "transform2", "=", "transform2", "\n", "self", ".", "split", "=", "split", "# train/test/unlabeled set", "\n", "self", ".", "show", "=", "show", "\n", "if", "embedding", "is", "not", "None", ":", "\n", "            ", "self", ".", "embedding", "=", "np", ".", "load", "(", "embedding", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embedding", "=", "None", "\n", "\n", "", "if", "download", ":", "\n", "            ", "self", ".", "download", "(", ")", "\n", "\n", "", "if", "not", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n", "'Dataset not found or corrupted. '", "\n", "'You can use download=True to download it'", ")", "\n", "\n", "# now load the picked numpy arrays", "\n", "", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "unlabeled_data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "self", ".", "data", ",", "unlabeled_data", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "\n", "(", "self", ".", "labels", ",", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "unlabeled_data", ".", "shape", "[", "0", "]", ")", ")", ")", "\n", "", "elif", "self", ".", "split", "==", "'train+test'", ":", "\n", "            ", "data_train", ",", "labels_train", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "train_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "train_list", "[", "1", "]", "[", "0", "]", ")", "\n", "data_test", ",", "labels_test", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "data", "=", "np", ".", "concatenate", "(", "(", "data_train", ",", "data_test", ")", ")", "\n", "self", ".", "labels", "=", "np", ".", "concatenate", "(", "(", "labels_train", ",", "labels_test", ")", ")", "\n", "\n", "", "elif", "self", ".", "split", "==", "'unlabeled'", ":", "\n", "            ", "self", ".", "data", ",", "_", "=", "self", ".", "__loadfile", "(", "self", ".", "train_list", "[", "2", "]", "[", "0", "]", ")", "\n", "self", ".", "labels", "=", "np", ".", "asarray", "(", "[", "-", "1", "]", "*", "self", ".", "data", ".", "shape", "[", "0", "]", ")", "\n", "", "else", ":", "# self.split == 'test':", "\n", "            ", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "__loadfile", "(", "\n", "self", ".", "test_list", "[", "0", "]", "[", "0", "]", ",", "self", ".", "test_list", "[", "1", "]", "[", "0", "]", ")", "\n", "\n", "", "class_file", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "class_names_file", ")", "\n", "if", "os", ".", "path", ".", "isfile", "(", "class_file", ")", ":", "\n", "            ", "with", "open", "(", "class_file", ")", "as", "f", ":", "\n", "                ", "self", ".", "classes", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__getitem__": [[100, 151], ["PIL.Image.fromarray", "numpy.transpose", "stl10_embedding.STL10EMB.transform1", "stl10_embedding.STL10EMB.transform2", "numpy.array", "numpy.array", "matplotlib.figure", "matplotlib.imshow", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "int", "stl10_embedding.STL10EMB.numpy().transpose", "stl10_embedding.STL10EMB.numpy().transpose", "stl10_embedding.STL10EMB.numpy", "stl10_embedding.STL10EMB.numpy"], "methods", ["None"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "embedding", "is", "not", "None", ":", "\n", "            ", "emb", "=", "self", ".", "embedding", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "emb", "=", "None", "\n", "\n", "", "if", "self", ".", "transform1", "is", "not", "None", ":", "\n", "            ", "img_trans1", "=", "self", ".", "transform1", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img_trans1", "=", "img", "\n", "\n", "", "if", "self", ".", "transform2", "is", "not", "None", ":", "\n", "            ", "img_trans2", "=", "self", ".", "transform2", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "img_trans2", "=", "img", "\n", "\n", "", "if", "self", ".", "show", ":", "\n", "            ", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "img_trans1", "=", "img_trans1", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "*", "std", "+", "mean", "\n", "# img_trans1 = img_trans1.numpy().transpose([1, 2, 0])", "\n", "# img_trans1 = (img_trans1 - img_trans1.min()) / (img_trans1.max() - img_trans1.min())", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img_trans1", ")", "\n", "\n", "img_trans2", "=", "img_trans2", ".", "numpy", "(", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "*", "std", "+", "mean", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img_trans2", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "emb", "is", "not", "None", ":", "\n", "            ", "return", "img_trans1", ",", "img_trans2", ",", "emb", ",", "target", ",", "index", "\n", "", "else", ":", "\n", "            ", "return", "img_trans1", ",", "img_trans2", ",", "target", ",", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__len__": [[152, 154], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__loadfile": [[155, 171], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "numpy.fromfile", "numpy.reshape", "numpy.transpose", "open", "numpy.fromfile"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.config.config.Config.fromfile"], ["", "def", "__loadfile", "(", "self", ",", "data_file", ",", "labels_file", "=", "None", ")", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n", "# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n", "images", "=", "np", ".", "transpose", "(", "images", ",", "(", "0", ",", "1", ",", "3", ",", "2", ")", ")", "\n", "\n", "", "return", "images", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__": [[172, 182], ["stl10_embedding.STL10EMB.__len__", "stl10_embedding.STL10EMB.transform.__repr__().replace", "stl10_embedding.STL10EMB.target_transform.__repr__().replace", "stl10_embedding.STL10EMB.transform.__repr__", "stl10_embedding.STL10EMB.target_transform.__repr__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.stl10_embedding.STL10EMB.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "fmt_str", "=", "'Dataset '", "+", "self", ".", "__class__", ".", "__name__", "+", "'\\n'", "\n", "fmt_str", "+=", "'    Number of datapoints: {}\\n'", ".", "format", "(", "self", ".", "__len__", "(", ")", ")", "\n", "fmt_str", "+=", "'    Split: {}\\n'", ".", "format", "(", "self", ".", "split", ")", "\n", "fmt_str", "+=", "'    Root Location: {}\\n'", ".", "format", "(", "self", ".", "root", ")", "\n", "tmp", "=", "'    Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}\\n'", ".", "format", "(", "tmp", ",", "self", ".", "transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "tmp", "=", "'    Target Transforms (if any): '", "\n", "fmt_str", "+=", "'{0}{1}'", ".", "format", "(", "tmp", ",", "self", ".", "target_transform", ".", "__repr__", "(", ")", ".", "replace", "(", "'\\n'", ",", "'\\n'", "+", "' '", "*", "len", "(", "tmp", ")", ")", ")", "\n", "return", "fmt_str", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data.make_data_sampler": [[14, 22], ["samplers.DistributedSampler", "torch.utils.data.sampler.RandomSampler", "torch.utils.data.sampler.SequentialSampler"], "function", ["None"], ["def", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "distributed", ")", ":", "\n", "    ", "if", "distributed", ":", "\n", "        ", "return", "samplers", ".", "DistributedSampler", "(", "dataset", ",", "shuffle", "=", "shuffle", ")", "\n", "", "if", "shuffle", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "RandomSampler", "(", "dataset", ")", "\n", "", "else", ":", "\n", "        ", "sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "SequentialSampler", "(", "dataset", ")", "\n", "", "return", "sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data._quantize": [[24, 29], ["copy.copy", "sorted", "list", "map", "bisect.bisect_right"], "function", ["None"], ["", "def", "_quantize", "(", "x", ",", "bins", ")", ":", "\n", "    ", "bins", "=", "copy", ".", "copy", "(", "bins", ")", "\n", "bins", "=", "sorted", "(", "bins", ")", "\n", "quantized", "=", "list", "(", "map", "(", "lambda", "y", ":", "bisect", ".", "bisect_right", "(", "bins", ",", "y", ")", ",", "x", ")", ")", "\n", "return", "quantized", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data._compute_aspect_ratios": [[31, 38], ["range", "len", "dataset.get_img_info", "aspect_ratios.append", "float", "float"], "function", ["None"], ["", "def", "_compute_aspect_ratios", "(", "dataset", ")", ":", "\n", "    ", "aspect_ratios", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "dataset", ")", ")", ":", "\n", "        ", "img_info", "=", "dataset", ".", "get_img_info", "(", "i", ")", "\n", "aspect_ratio", "=", "float", "(", "img_info", "[", "\"height\"", "]", ")", "/", "float", "(", "img_info", "[", "\"width\"", "]", ")", "\n", "aspect_ratios", ".", "append", "(", "aspect_ratio", ")", "\n", "", "return", "aspect_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data.make_batch_data_sampler": [[40, 60], ["bulid_data._compute_aspect_ratios", "bulid_data._quantize", "samplers.GroupedBatchSampler", "torch.utils.data.sampler.BatchSampler", "samplers.IterationBasedBatchSampler", "isinstance"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data._compute_aspect_ratios", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data._quantize"], ["", "def", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_batch", ",", "num_iters", "=", "None", ",", "start_iter", "=", "0", "\n", ")", ":", "\n", "    ", "if", "aspect_grouping", ":", "\n", "        ", "if", "not", "isinstance", "(", "aspect_grouping", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "aspect_grouping", "=", "[", "aspect_grouping", "]", "\n", "", "aspect_ratios", "=", "_compute_aspect_ratios", "(", "dataset", ")", "\n", "group_ids", "=", "_quantize", "(", "aspect_ratios", ",", "aspect_grouping", ")", "\n", "batch_sampler", "=", "samplers", ".", "GroupedBatchSampler", "(", "\n", "sampler", ",", "group_ids", ",", "images_per_batch", ",", "drop_uneven", "=", "False", "\n", ")", "\n", "", "else", ":", "\n", "        ", "batch_sampler", "=", "torch", ".", "utils", ".", "data", ".", "sampler", ".", "BatchSampler", "(", "\n", "sampler", ",", "images_per_batch", ",", "drop_last", "=", "False", "\n", ")", "\n", "", "if", "num_iters", "is", "not", "None", ":", "\n", "        ", "batch_sampler", "=", "samplers", ".", "IterationBasedBatchSampler", "(", "\n", "batch_sampler", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "", "return", "batch_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data.build_data_loader": [[62, 105], ["spice.utils.comm.get_world_size", "bulid_data.make_data_sampler", "bulid_data.make_batch_data_sampler", "torch.utils.data.DataLoader", "spice.data.build_dataset.build_dataset", "spice.data.build_dataset.build_dataset"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data.make_data_sampler", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.bulid_data.make_batch_data_sampler", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset"], ["", "def", "build_data_loader", "(", "cfg", ",", "is_train", "=", "True", ",", "is_distributed", "=", "False", ",", "start_iter", "=", "0", ")", ":", "\n", "\n", "    ", "num_gpus", "=", "get_world_size", "(", ")", "\n", "if", "is_train", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "data_train", ".", "ims_per_batch", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"SOLVER.IMS_PER_BATCH ({}) must be divisible by the number of GPUs ({}) used.\"", ".", "format", "(", "\n", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "cfg", ".", "data_train", ".", "shuffle", "\n", "num_iters", "=", "cfg", ".", "solver", ".", "max_iter", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data_train", ")", "\n", "", "else", ":", "\n", "        ", "images_per_batch", "=", "cfg", ".", "data_test", ".", "ims_per_batch", "\n", "assert", "(", "\n", "images_per_batch", "%", "num_gpus", "==", "0", "\n", ")", ",", "\"TEST.IMS_PER_BATCH ({}) must be divisible by the number of GPUs ({}) used.\"", ".", "format", "(", "\n", "images_per_batch", ",", "num_gpus", ")", "\n", "images_per_gpu", "=", "images_per_batch", "//", "num_gpus", "\n", "shuffle", "=", "False", "if", "not", "is_distributed", "else", "True", "\n", "num_iters", "=", "None", "\n", "start_iter", "=", "0", "\n", "dataset", "=", "build_dataset", "(", "cfg", ".", "data_test", ")", "\n", "\n", "# group images which have similar aspect ratio. In this case, we only", "\n", "# group in two cases: those with width / height > 1, and the other way around,", "\n", "# but the code supports more general grouping strategy", "\n", "", "aspect_grouping", "=", "[", "1", "]", "if", "cfg", ".", "data_train", ".", "aspect_ratio_grouping", "else", "[", "]", "\n", "\n", "sampler", "=", "make_data_sampler", "(", "dataset", ",", "shuffle", ",", "is_distributed", ")", "\n", "batch_sampler", "=", "make_batch_data_sampler", "(", "\n", "dataset", ",", "sampler", ",", "aspect_grouping", ",", "images_per_gpu", ",", "num_iters", ",", "start_iter", "\n", ")", "\n", "\n", "num_workers", "=", "cfg", ".", "num_workers", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", ")", "\n", "\n", "return", "data_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPYEMB.__init__": [[14, 29], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "numpy.load", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["\n", "def", "__init__", "(", "\n", "self", ",", "\n", "root", ":", "str", ",", "\n", "transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "target_transform", ":", "Optional", "[", "Callable", "]", "=", "None", ",", "\n", "download", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "NPY", ",", "self", ")", ".", "__init__", "(", "root", ",", "transform", "=", "transform", ",", "\n", "target_transform", "=", "target_transform", ")", "\n", "\n", "\n", "# now load the picked numpy arrays", "\n", "self", ".", "data", "=", "np", ".", "load", "(", "\"{}/data.npy\"", ".", "format", "(", "root", ")", ")", "\n", "self", ".", "targets", "=", "np", ".", "load", "(", "\"{}/label.npy\"", ".", "format", "(", "root", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPYEMB.__getitem__": [[30, 81], ["PIL.Image.fromarray", "npy.NPYEMB.transform1", "npy.NPYEMB.transform2", "numpy.array", "numpy.array", "matplotlib.figure", "matplotlib.imshow", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "int", "npy.NPYEMB.numpy().transpose", "npy.NPYEMB.numpy().transpose", "npy.NPYEMB.numpy", "npy.NPYEMB.numpy"], "methods", ["None"], ["", "def", "_verify_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "Optional", "[", "int", "]", ":", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "folds", "\n", "", "elif", "isinstance", "(", "folds", ",", "int", ")", ":", "\n", "            ", "if", "folds", "in", "range", "(", "10", ")", ":", "\n", "                ", "return", "folds", "\n", "", "msg", "=", "(", "\"Value for argument folds should be in the range [0, 10), \"", "\n", "\"but got {}.\"", ")", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "folds", ")", ")", "\n", "", "else", ":", "\n", "            ", "msg", "=", "\"Expected type None or int for argument folds, but got type {}.\"", "\n", "raise", "ValueError", "(", "msg", ".", "format", "(", "type", "(", "folds", ")", ")", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", "->", "Tuple", "[", "Any", ",", "Any", "]", ":", "\n", "        ", "\"\"\"\n        Args:\n            index (int): Index\n\n        Returns:\n            tuple: (image, target) where target is index of the target class.\n        \"\"\"", "\n", "target", ":", "Optional", "[", "int", "]", "\n", "if", "self", ".", "labels", "is", "not", "None", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "int", "(", "self", ".", "labels", "[", "index", "]", ")", "\n", "", "else", ":", "\n", "            ", "img", ",", "target", "=", "self", ".", "data", "[", "index", "]", ",", "None", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "transpose", "(", "img", ",", "(", "1", ",", "2", ",", "0", ")", ")", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "target", "=", "self", ".", "target_transform", "(", "target", ")", "\n", "\n", "", "return", "img", ",", "target", "\n", "\n", "", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "return", "self", ".", "data", ".", "shape", "[", "0", "]", "\n", "\n", "", "def", "__loadfile", "(", "self", ",", "data_file", ":", "str", ",", "labels_file", ":", "Optional", "[", "str", "]", "=", "None", ")", "->", "Tuple", "[", "np", ".", "ndarray", ",", "Optional", "[", "np", ".", "ndarray", "]", "]", ":", "\n", "        ", "labels", "=", "None", "\n", "if", "labels_file", ":", "\n", "            ", "path_to_labels", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "labels_file", ")", "\n", "with", "open", "(", "path_to_labels", ",", "'rb'", ")", "as", "f", ":", "\n", "                ", "labels", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "-", "1", "# 0-based", "\n", "\n", "", "", "path_to_data", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root", ",", "self", ".", "base_folder", ",", "data_file", ")", "\n", "with", "open", "(", "path_to_data", ",", "'rb'", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPYEMB.__len__": [[82, 84], ["None"], "methods", ["None"], ["# read whole file in uint8 chunks", "\n", "            ", "everything", "=", "np", ".", "fromfile", "(", "f", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "images", "=", "np", ".", "reshape", "(", "everything", ",", "(", "-", "1", ",", "3", ",", "96", ",", "96", ")", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPY.__init__": [[90, 100], ["os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "os.path.expanduser", "numpy.load", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.checkpoint.Checkpointer.load"], ["        ", "root", "=", "self", ".", "root", "\n", "for", "fentry", "in", "(", "self", ".", "train_list", "+", "self", ".", "test_list", ")", ":", "\n", "            ", "filename", ",", "md5", "=", "fentry", "[", "0", "]", ",", "fentry", "[", "1", "]", "\n", "fpath", "=", "os", ".", "path", ".", "join", "(", "root", ",", "self", ".", "base_folder", ",", "filename", ")", "\n", "if", "not", "check_integrity", "(", "fpath", ",", "md5", ")", ":", "\n", "                ", "return", "False", "\n", "", "", "return", "True", "\n", "\n", "", "def", "download", "(", "self", ")", "->", "None", ":", "\n", "        ", "if", "self", ".", "_check_integrity", "(", ")", ":", "\n", "            ", "print", "(", "'Files already downloaded and verified'", ")", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPY.__getitem__": [[101, 134], ["PIL.Image.fromarray", "npy.NPY.transform", "numpy.array", "numpy.array", "isinstance", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "int", "img_show.numpy().transpose", "img_show.numpy"], "methods", ["None"], ["return", "\n", "", "download_and_extract_archive", "(", "self", ".", "url", ",", "self", ".", "root", ",", "filename", "=", "self", ".", "filename", ",", "md5", "=", "self", ".", "tgz_md5", ")", "\n", "self", ".", "_check_integrity", "(", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", "->", "str", ":", "\n", "        ", "return", "\"Split: {split}\"", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n", "", "def", "__load_folds", "(", "self", ",", "folds", ":", "Optional", "[", "int", "]", ")", "->", "None", ":", "\n", "# loads one of the folds if specified", "\n", "        ", "if", "folds", "is", "None", ":", "\n", "            ", "return", "\n", "", "path_to_folds", "=", "os", ".", "path", ".", "join", "(", "\n", "self", ".", "root", ",", "self", ".", "base_folder", ",", "self", ".", "folds_list_file", ")", "\n", "with", "open", "(", "path_to_folds", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "str_idx", "=", "f", ".", "read", "(", ")", ".", "splitlines", "(", ")", "[", "folds", "]", "\n", "list_idx", "=", "np", ".", "fromstring", "(", "str_idx", ",", "dtype", "=", "np", ".", "uint8", ",", "sep", "=", "' '", ")", "\n", "self", ".", "data", ",", "self", ".", "labels", "=", "self", ".", "data", "[", "list_idx", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "labels", "[", "list_idx", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.npy.NPY.__len__": [[135, 137], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.build_dataset.build_dataset": [[9, 84], ["spice.data.transformations.get_train_transformations", "spice.data.transformations.get_train_transformations", "spice.data.stl10.STL10", "spice.data.stl10_embedding.STL10EMB", "spice.data.npy.NPYEMB", "spice.data.cifar.CIFAR10", "spice.data.cifar.CIFAR20", "spice.data.imagenet.ImageNetSubEmb", "spice.data.imagenet.ImageNetSubEmbLMDB", "spice.data.imagenet.TImageNetEmbLMDB"], "function", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.transformations.get_train_transformations", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.data.transformations.get_train_transformations"], ["def", "build_dataset", "(", "data_cfg", ")", ":", "\n", "    ", "type", "=", "data_cfg", ".", "type", "\n", "\n", "dataset", "=", "None", "\n", "\n", "train_trans1", "=", "get_train_transformations", "(", "data_cfg", ".", "trans1", ")", "\n", "train_trans2", "=", "get_train_transformations", "(", "data_cfg", ".", "trans2", ")", "\n", "\n", "if", "type", "==", "\"stl10\"", ":", "\n", "        ", "dataset", "=", "STL10", "(", "root", "=", "data_cfg", ".", "root_folder", ",", "\n", "split", "=", "data_cfg", ".", "split", ",", "\n", "show", "=", "data_cfg", ".", "show", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "download", "=", "False", ")", "\n", "", "elif", "type", "==", "\"stl10_emb\"", ":", "\n", "        ", "dataset", "=", "STL10EMB", "(", "root", "=", "data_cfg", ".", "root_folder", ",", "\n", "split", "=", "data_cfg", ".", "split", ",", "\n", "show", "=", "data_cfg", ".", "show", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "download", "=", "False", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ")", "\n", "", "elif", "type", "==", "\"npy_emb\"", ":", "\n", "        ", "dataset", "=", "NPYEMB", "(", "root", "=", "data_cfg", ".", "root", ",", "\n", "show", "=", "data_cfg", ".", "show", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ")", "\n", "", "elif", "type", "==", "\"cifar10\"", ":", "\n", "        ", "dataset", "=", "CIFAR10", "(", "root", "=", "data_cfg", ".", "root_folder", ",", "\n", "all", "=", "data_cfg", ".", "all", ",", "\n", "train", "=", "data_cfg", ".", "train", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ",", "\n", "show", "=", "data_cfg", ".", "show", ",", "\n", ")", "\n", "", "elif", "type", "==", "\"cifar100\"", ":", "\n", "        ", "dataset", "=", "CIFAR20", "(", "root", "=", "data_cfg", ".", "root_folder", ",", "\n", "all", "=", "data_cfg", ".", "all", ",", "\n", "train", "=", "data_cfg", ".", "train", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ",", "\n", "show", "=", "data_cfg", ".", "show", ",", "\n", ")", "\n", "", "elif", "type", "==", "'imagenet'", ":", "\n", "        ", "dataset", "=", "ImageNetSubEmb", "(", "subset_file", "=", "data_cfg", ".", "subset_file", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ",", "\n", "split", "=", "data_cfg", ".", "split", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ")", "\n", "", "elif", "type", "==", "'imagenet_lmdb'", ":", "\n", "        ", "dataset", "=", "ImageNetSubEmbLMDB", "(", "lmdb_file", "=", "data_cfg", ".", "lmdb_file", ",", "\n", "meta_info_file", "=", "data_cfg", ".", "meta_info_file", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ",", "\n", "split", "=", "data_cfg", ".", "split", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ",", "\n", "resize", "=", "data_cfg", ".", "resize", ")", "\n", "", "elif", "type", "==", "'timagenet_lmdb'", ":", "\n", "        ", "dataset", "=", "TImageNetEmbLMDB", "(", "lmdb_file", "=", "data_cfg", ".", "lmdb_file", ",", "\n", "meta_info_file", "=", "data_cfg", ".", "meta_info_file", ",", "\n", "embedding", "=", "data_cfg", ".", "embedding", ",", "\n", "transform1", "=", "train_trans1", ",", "\n", "transform2", "=", "train_trans2", ")", "\n", "", "else", ":", "\n", "        ", "assert", "TypeError", "\n", "\n", "", "return", "dataset", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.__init__": [[25, 41], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "math.ceil", "torch.is_available", "torch.is_available", "RuntimeError", "torch.is_available", "torch.is_available", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_world_size", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank", "home.repos.pwc.inspect_result.niuchuangnn_SPICE.utils.comm.get_rank"], ["def", "__init__", "(", "self", ",", "dataset", ",", "num_replicas", "=", "None", ",", "rank", "=", "None", ",", "shuffle", "=", "True", ")", ":", "\n", "        ", "if", "num_replicas", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "num_replicas", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "if", "not", "dist", ".", "is_available", "(", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"Requires distributed package to be available\"", ")", "\n", "", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "num_replicas", "=", "num_replicas", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "epoch", "=", "0", "\n", "self", ".", "num_samples", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "num_replicas", ")", ")", "\n", "self", ".", "total_size", "=", "self", ".", "num_samples", "*", "self", ".", "num_replicas", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.__iter__": [[42, 61], ["iter", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator", "torch.Generator.manual_seed", "torch.Generator.manual_seed", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.randperm().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "torch.arange().tolist", "len", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "len", "len", "len"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "shuffle", ":", "\n", "# deterministically shuffle based on epoch", "\n", "            ", "g", "=", "torch", ".", "Generator", "(", ")", "\n", "g", ".", "manual_seed", "(", "self", ".", "epoch", ")", "\n", "indices", "=", "torch", ".", "randperm", "(", "len", "(", "self", ".", "dataset", ")", ",", "generator", "=", "g", ")", ".", "tolist", "(", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "torch", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", ".", "tolist", "(", ")", "\n", "\n", "# add extra samples to make it evenly divisible", "\n", "", "indices", "+=", "indices", "[", ":", "(", "self", ".", "total_size", "-", "len", "(", "indices", ")", ")", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "# subsample", "\n", "offset", "=", "self", ".", "num_samples", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "num_samples", "]", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "num_samples", "\n", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.__len__": [[62, 64], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch": [[65, 67], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler.__init__": [[24, 39], ["torch.as_tensor", "isinstance", "ValueError", "grouped_batch_sampler.GroupedBatchSampler.group_ids.dim", "torch.unique().sort", "torch.unique"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sampler", ",", "group_ids", ",", "batch_size", ",", "drop_uneven", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "sampler", ",", "Sampler", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"sampler should be an instance of \"", "\n", "\"torch.utils.data.Sampler, but got sampler={}\"", ".", "format", "(", "sampler", ")", "\n", ")", "\n", "", "self", ".", "sampler", "=", "sampler", "\n", "self", ".", "group_ids", "=", "torch", ".", "as_tensor", "(", "group_ids", ")", "\n", "assert", "self", ".", "group_ids", ".", "dim", "(", ")", "==", "1", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "drop_uneven", "=", "drop_uneven", "\n", "\n", "self", ".", "groups", "=", "torch", ".", "unique", "(", "self", ".", "group_ids", ")", ".", "sort", "(", "0", ")", "[", "0", "]", "\n", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches": [[40, 101], ["len", "torch.as_tensor", "torch.full", "torch.arange", "tuple", "torch.as_tensor", "[].tolist", "list", "len", "c.split", "itertools.chain.from_iterable", "t[].item", "merged[].tolist", "enumerate", "torch.as_tensor.tolist", "torch.as_tensor.sort", "len", "kept.append", "s.sort"], "methods", ["None"], ["", "def", "_prepare_batches", "(", "self", ")", ":", "\n", "        ", "dataset_size", "=", "len", "(", "self", ".", "group_ids", ")", "\n", "# get the sampled indices from the sampler", "\n", "sampled_ids", "=", "torch", ".", "as_tensor", "(", "list", "(", "self", ".", "sampler", ")", ")", "\n", "# potentially not all elements of the dataset were sampled", "\n", "# by the sampler (e.g., DistributedSampler).", "\n", "# construct a tensor which contains -1 if the element was", "\n", "# not sampled, and a non-negative number indicating the", "\n", "# order where the element was sampled.", "\n", "# for example. if sampled_ids = [3, 1] and dataset_size = 5,", "\n", "# the order is [-1, 1, -1, 0, -1]", "\n", "order", "=", "torch", ".", "full", "(", "(", "dataset_size", ",", ")", ",", "-", "1", ",", "dtype", "=", "torch", ".", "int64", ")", "\n", "order", "[", "sampled_ids", "]", "=", "torch", ".", "arange", "(", "len", "(", "sampled_ids", ")", ")", "\n", "\n", "# get a mask with the elements that were sampled", "\n", "mask", "=", "order", ">=", "0", "\n", "\n", "# find the elements that belong to each individual cluster", "\n", "clusters", "=", "[", "(", "self", ".", "group_ids", "==", "i", ")", "&", "mask", "for", "i", "in", "self", ".", "groups", "]", "\n", "# get relative order of the elements inside each cluster", "\n", "# that follows the order from the sampler", "\n", "relative_order", "=", "[", "order", "[", "cluster", "]", "for", "cluster", "in", "clusters", "]", "\n", "# with the relative order, find the absolute order in the", "\n", "# sampled space", "\n", "permutation_ids", "=", "[", "s", "[", "s", ".", "sort", "(", ")", "[", "1", "]", "]", "for", "s", "in", "relative_order", "]", "\n", "# permute each cluster so that they follow the order from", "\n", "# the sampler", "\n", "permuted_clusters", "=", "[", "sampled_ids", "[", "idx", "]", "for", "idx", "in", "permutation_ids", "]", "\n", "\n", "# splits each cluster in batch_size, and merge as a list of tensors", "\n", "splits", "=", "[", "c", ".", "split", "(", "self", ".", "batch_size", ")", "for", "c", "in", "permuted_clusters", "]", "\n", "merged", "=", "tuple", "(", "itertools", ".", "chain", ".", "from_iterable", "(", "splits", ")", ")", "\n", "\n", "# now each batch internally has the right order, but", "\n", "# they are grouped by clusters. Find the permutation between", "\n", "# different batches that brings them as close as possible to", "\n", "# the order that we have in the sampler. For that, we will consider the", "\n", "# ordering as coming from the first element of each batch, and sort", "\n", "# correspondingly", "\n", "first_element_of_batch", "=", "[", "t", "[", "0", "]", ".", "item", "(", ")", "for", "t", "in", "merged", "]", "\n", "# get and inverse mapping from sampled indices and the position where", "\n", "# they occur (as returned by the sampler)", "\n", "inv_sampled_ids_map", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "enumerate", "(", "sampled_ids", ".", "tolist", "(", ")", ")", "}", "\n", "# from the first element in each batch, get a relative ordering", "\n", "first_index_of_batch", "=", "torch", ".", "as_tensor", "(", "\n", "[", "inv_sampled_ids_map", "[", "s", "]", "for", "s", "in", "first_element_of_batch", "]", "\n", ")", "\n", "\n", "# permute the batches so that they approximately follow the order", "\n", "# from the sampler", "\n", "permutation_order", "=", "first_index_of_batch", ".", "sort", "(", "0", ")", "[", "1", "]", ".", "tolist", "(", ")", "\n", "# finally, permute the batches", "\n", "batches", "=", "[", "merged", "[", "i", "]", ".", "tolist", "(", ")", "for", "i", "in", "permutation_order", "]", "\n", "\n", "if", "self", ".", "drop_uneven", ":", "\n", "            ", "kept", "=", "[", "]", "\n", "for", "batch", "in", "batches", ":", "\n", "                ", "if", "len", "(", "batch", ")", "==", "self", ".", "batch_size", ":", "\n", "                    ", "kept", ".", "append", "(", "batch", ")", "\n", "", "", "batches", "=", "kept", "\n", "", "return", "batches", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler.__iter__": [[102, 110], ["iter", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_can_reuse_batches", ":", "\n", "            ", "batches", "=", "self", ".", "_batches", "\n", "self", ".", "_can_reuse_batches", "=", "False", "\n", "", "else", ":", "\n", "            ", "batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "", "self", ".", "_batches", "=", "batches", "\n", "return", "iter", "(", "batches", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler.__len__": [[111, 116], ["len", "hasattr", "grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.grouped_batch_sampler.GroupedBatchSampler._prepare_batches"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_batches\"", ")", ":", "\n", "            ", "self", ".", "_batches", "=", "self", ".", "_prepare_batches", "(", ")", "\n", "self", ".", "_can_reuse_batches", "=", "True", "\n", "", "return", "len", "(", "self", ".", "_batches", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__init__": [[11, 15], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "batch_sampler", ",", "num_iterations", ",", "start_iter", "=", "0", ")", ":", "\n", "        ", "self", ".", "batch_sampler", "=", "batch_sampler", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "self", ".", "start_iter", "=", "start_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__iter__": [[16, 29], ["hasattr", "iteration_based_batch_sampler.IterationBasedBatchSampler.batch_sampler.sampler.set_epoch"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.distributed.DistributedSampler.set_epoch"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "iteration", "=", "self", ".", "start_iter", "\n", "while", "iteration", "<=", "self", ".", "num_iterations", ":", "\n", "# if the underlying sampler has a set_epoch method, like", "\n", "# DistributedSampler, used for making each process see", "\n", "# a different split of the dataset, then set it", "\n", "            ", "if", "hasattr", "(", "self", ".", "batch_sampler", ".", "sampler", ",", "\"set_epoch\"", ")", ":", "\n", "                ", "self", ".", "batch_sampler", ".", "sampler", ".", "set_epoch", "(", "iteration", ")", "\n", "", "for", "batch", "in", "self", ".", "batch_sampler", ":", "\n", "                ", "iteration", "+=", "1", "\n", "if", "iteration", ">", "self", ".", "num_iterations", ":", "\n", "                    ", "break", "\n", "", "yield", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.samplers.iteration_based_batch_sampler.IterationBasedBatchSampler.__len__": [[30, 32], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_iterations", "\n", "", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_optimizer": [[8, 39], ["model.named_parameters", "torch.optim.SGD", "torch.optim.Adam", "torch.optim.RMSprop"], "function", ["None"], ["def", "make_optimizer", "(", "cfg", ",", "model", ")", ":", "\n", "    ", "params", "=", "[", "]", "\n", "for", "key", ",", "value", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "value", ".", "requires_grad", ":", "\n", "            ", "continue", "\n", "", "lr", "=", "cfg", ".", "solver", ".", "base_lr", "\n", "weight_decay", "=", "cfg", ".", "solver", ".", "weight_decay", "\n", "if", "\"bias\"", "in", "key", ":", "\n", "            ", "lr", "=", "cfg", ".", "solver", ".", "base_lr", "*", "cfg", ".", "solver", ".", "bias_lr_factor", "\n", "weight_decay", "=", "cfg", ".", "solver", ".", "weight_decay_bias", "\n", "\n", "", "if", "\"prior_d\"", "in", "key", ":", "\n", "            ", "lr", "=", "0.0", "\n", "\n", "", "params", "+=", "[", "{", "\"params\"", ":", "[", "value", "]", ",", "\"lr\"", ":", "lr", ",", "\"weight_decay\"", ":", "weight_decay", "}", "]", "\n", "\n", "", "if", "\"type\"", "in", "cfg", ".", "solver", ":", "\n", "        ", "opt_type", "=", "cfg", ".", "solver", ".", "type", "\n", "", "else", ":", "\n", "        ", "opt_type", "=", "\"sgd\"", "\n", "\n", "", "if", "opt_type", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "lr", ",", "momentum", "=", "cfg", ".", "solver", ".", "momentum", ")", "\n", "", "elif", "opt_type", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "elif", "opt_type", "==", "\"rmsprop\"", ":", "\n", "        ", "optimizer", "=", "torch", ".", "optim", ".", "RMSprop", "(", "params", ",", "lr", "=", "lr", ")", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "\n", "\n", "", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.build.make_lr_scheduler": [[41, 52], ["lr_scheduler.RampedLR"], "function", ["None"], ["", "def", "make_lr_scheduler", "(", "cfg", ",", "optimizer", ")", ":", "\n", "# return WarmupMultiStepLR(", "\n", "#     optimizer,", "\n", "#     cfg.solver.steps,", "\n", "#     cfg.solver.gamma,", "\n", "#     warmup_factor=cfg.solver.warmup_factor,", "\n", "#     warmup_iters=cfg.solver.warmup_iters,", "\n", "#     warmup_method=cfg.solver.warmup_method,", "\n", "# )", "\n", "# return CosineAnnealingLR(optimizer, T_max=cfg.solver.max_iter)", "\n", "    ", "return", "RampedLR", "(", "optimizer", ",", "cfg", ".", "solver", ".", "max_iter", ",", "cfg", ".", "solver", ".", "ramp_up_fraction", ",", "cfg", ".", "solver", ".", "ramp_down_fraction", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[13, 40], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[41, 54], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__": [[62, 78], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.__init__"], ["def", "__init__", "(", "self", ",", "optimizer", ",", "iteration_count", ",", "ramp_up_fraction", ",", "ramp_down_fraction", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "iteration_count", "=", "iteration_count", "\n", "self", ".", "ramp_up_fraction", "=", "ramp_up_fraction", "\n", "self", ".", "ramp_down_fraction", "=", "ramp_down_fraction", "\n", "\n", "if", "ramp_up_fraction", ">", "0.0", ":", "\n", "            ", "self", ".", "ramp_up_end_iter", "=", "iteration_count", "*", "ramp_up_fraction", "\n", "", "else", ":", "\n", "            ", "self", ".", "ramp_up_end_iter", "=", "None", "\n", "\n", "", "if", "ramp_down_fraction", ">", "0.0", ":", "\n", "            ", "self", ".", "ramp_down_start_iter", "=", "iteration_count", "*", "(", "1", "-", "ramp_down_fraction", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "ramp_down_start_iter", "=", "None", "\n", "\n", "", "super", "(", "RampedLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.niuchuangnn_SPICE.solver.lr_scheduler.RampedLR.get_lr": [[79, 92], ["zip", "zip", "numpy.cos", "numpy.cos"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "\n", "        ", "if", "self", ".", "ramp_up_end_iter", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "last_epoch", "<=", "self", ".", "ramp_up_end_iter", ":", "\n", "                ", "return", "[", "base_lr", "*", "(", "0.5", "-", "np", ".", "cos", "(", "(", "(", "self", ".", "last_epoch", "/", "self", ".", "ramp_up_fraction", ")", "/", "self", ".", "iteration_count", ")", "*", "np", ".", "pi", ")", "/", "2", ")", "\n", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "base_lrs", ")", "]", "\n", "\n", "", "", "if", "self", ".", "ramp_down_fraction", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "last_epoch", ">=", "self", ".", "ramp_down_start_iter", ":", "\n", "                ", "return", "[", "base_lr", "*", "(", "0.5", "+", "np", ".", "cos", "(", "(", "(", "(", "self", ".", "last_epoch", "-", "self", ".", "ramp_down_start_iter", ")", "/", "self", ".", "ramp_down_fraction", ")", "/", "self", ".", "iteration_count", ")", "*", "np", ".", "pi", ")", "/", "2", ")", "**", "2", "\n", "for", "group", ",", "base_lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "base_lrs", ")", "]", "\n", "\n", "", "", "return", "[", "group", "[", "'lr'", "]", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", "]", "\n", "", "", ""]]}