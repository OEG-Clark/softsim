{"home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.reserve_schedule_sampling_exp": [[77, 129], ["numpy.random.random_sample", "numpy.random.random_sample", "numpy.ones", "numpy.zeros", "range", "numpy.array", "numpy.reshape", "range", "math.exp", "np.reshape.append", "np.reshape.append", "np.reshape.append", "np.reshape.append", "float"], "function", ["None"], ["def", "reserve_schedule_sampling_exp", "(", "itr", ")", ":", "\n", "    ", "if", "itr", "<", "args", ".", "r_sampling_step_1", ":", "\n", "        ", "r_eta", "=", "0.5", "\n", "", "elif", "itr", "<", "args", ".", "r_sampling_step_2", ":", "\n", "        ", "r_eta", "=", "1.0", "-", "0.5", "*", "math", ".", "exp", "(", "-", "float", "(", "itr", "-", "args", ".", "r_sampling_step_1", ")", "/", "args", ".", "r_exp_alpha", ")", "\n", "", "else", ":", "\n", "        ", "r_eta", "=", "1.0", "\n", "\n", "", "if", "itr", "<", "args", ".", "r_sampling_step_1", ":", "\n", "        ", "eta", "=", "0.5", "\n", "", "elif", "itr", "<", "args", ".", "r_sampling_step_2", ":", "\n", "        ", "eta", "=", "0.5", "-", "(", "0.5", "/", "(", "args", ".", "r_sampling_step_2", "-", "args", ".", "r_sampling_step_1", ")", ")", "*", "(", "itr", "-", "args", ".", "r_sampling_step_1", ")", "\n", "", "else", ":", "\n", "        ", "eta", "=", "0.0", "\n", "\n", "", "r_random_flip", "=", "np", ".", "random", ".", "random_sample", "(", "\n", "(", "args", ".", "batch_size", ",", "args", ".", "input_length", "-", "1", ")", ")", "\n", "r_true_token", "=", "(", "r_random_flip", "<", "r_eta", ")", "\n", "\n", "random_flip", "=", "np", ".", "random", ".", "random_sample", "(", "\n", "(", "args", ".", "batch_size", ",", "args", ".", "total_length", "-", "args", ".", "input_length", "-", "1", ")", ")", "\n", "true_token", "=", "(", "random_flip", "<", "eta", ")", "\n", "\n", "ones", "=", "np", ".", "ones", "(", "(", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "\n", "real_input_flag", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "args", ".", "total_length", "-", "2", ")", ":", "\n", "            ", "if", "j", "<", "args", ".", "input_length", "-", "1", ":", "\n", "                ", "if", "r_true_token", "[", "i", ",", "j", "]", ":", "\n", "                    ", "real_input_flag", ".", "append", "(", "ones", ")", "\n", "", "else", ":", "\n", "                    ", "real_input_flag", ".", "append", "(", "zeros", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "true_token", "[", "i", ",", "j", "-", "(", "args", ".", "input_length", "-", "1", ")", "]", ":", "\n", "                    ", "real_input_flag", ".", "append", "(", "ones", ")", "\n", "", "else", ":", "\n", "                    ", "real_input_flag", ".", "append", "(", "zeros", ")", "\n", "\n", "", "", "", "", "real_input_flag", "=", "np", ".", "array", "(", "real_input_flag", ")", "\n", "real_input_flag", "=", "np", ".", "reshape", "(", "real_input_flag", ",", "\n", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "total_length", "-", "2", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "return", "real_input_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.schedule_sampling": [[131, 168], ["numpy.zeros", "numpy.random.random_sample", "numpy.ones", "numpy.zeros", "range", "numpy.array", "numpy.reshape", "range", "np.reshape.append", "np.reshape.append"], "function", ["None"], ["", "def", "schedule_sampling", "(", "eta", ",", "itr", ")", ":", "\n", "    ", "zeros", "=", "np", ".", "zeros", "(", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "total_length", "-", "args", ".", "input_length", "-", "1", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "if", "not", "args", ".", "scheduled_sampling", ":", "\n", "        ", "return", "0.0", ",", "zeros", "\n", "\n", "", "if", "itr", "<", "args", ".", "sampling_stop_iter", ":", "\n", "        ", "eta", "-=", "args", ".", "sampling_changing_rate", "\n", "", "else", ":", "\n", "        ", "eta", "=", "0.0", "\n", "", "random_flip", "=", "np", ".", "random", ".", "random_sample", "(", "\n", "(", "args", ".", "batch_size", ",", "args", ".", "total_length", "-", "args", ".", "input_length", "-", "1", ")", ")", "\n", "true_token", "=", "(", "random_flip", "<", "eta", ")", "\n", "ones", "=", "np", ".", "ones", "(", "(", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "zeros", "=", "np", ".", "zeros", "(", "(", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "real_input_flag", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "args", ".", "batch_size", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "args", ".", "total_length", "-", "args", ".", "input_length", "-", "1", ")", ":", "\n", "            ", "if", "true_token", "[", "i", ",", "j", "]", ":", "\n", "                ", "real_input_flag", ".", "append", "(", "ones", ")", "\n", "", "else", ":", "\n", "                ", "real_input_flag", ".", "append", "(", "zeros", ")", "\n", "", "", "", "real_input_flag", "=", "np", ".", "array", "(", "real_input_flag", ")", "\n", "real_input_flag", "=", "np", ".", "reshape", "(", "real_input_flag", ",", "\n", "(", "args", ".", "batch_size", ",", "\n", "args", ".", "total_length", "-", "args", ".", "input_length", "-", "1", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "img_width", "//", "args", ".", "patch_size", ",", "\n", "args", ".", "patch_size", "**", "2", "*", "args", ".", "img_channel", ")", ")", "\n", "return", "eta", ",", "real_input_flag", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.train_wrapper": [[170, 200], ["core.data_provider.datasets_factory.data_provider", "range", "model.load", "train_input_handle.no_batch_left", "train_input_handle.get_batch", "core.utils.preprocess.reshape_patch", "core.train", "train_input_handle.next", "train_input_handle.begin", "run.reserve_schedule_sampling_exp", "run.schedule_sampling", "model.save", "core.test"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.datasets_factory.data_provider", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.get_batch", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.preprocess.reshape_patch", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.train", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.next", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.reserve_schedule_sampling_exp", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.schedule_sampling", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.save", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.test"], ["", "def", "train_wrapper", "(", "model", ")", ":", "\n", "    ", "if", "args", ".", "pretrained_model", ":", "\n", "        ", "model", ".", "load", "(", "args", ".", "pretrained_model", ")", "\n", "# load data", "\n", "", "train_input_handle", ",", "test_input_handle", "=", "datasets_factory", ".", "data_provider", "(", "\n", "args", ".", "dataset_name", ",", "args", ".", "train_data_paths", ",", "args", ".", "valid_data_paths", ",", "args", ".", "batch_size", ",", "args", ".", "img_width", ",", "\n", "seq_length", "=", "args", ".", "total_length", ",", "injection_action", "=", "args", ".", "injection_action", ",", "is_training", "=", "True", ")", "\n", "\n", "eta", "=", "args", ".", "sampling_start_value", "\n", "\n", "for", "itr", "in", "range", "(", "1", ",", "args", ".", "max_iterations", "+", "1", ")", ":", "\n", "        ", "if", "train_input_handle", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "train_input_handle", ".", "begin", "(", "do_shuffle", "=", "True", ")", "\n", "", "ims", "=", "train_input_handle", ".", "get_batch", "(", ")", "\n", "ims", "=", "preprocess", ".", "reshape_patch", "(", "ims", ",", "args", ".", "patch_size", ")", "\n", "\n", "if", "args", ".", "reverse_scheduled_sampling", "==", "1", ":", "\n", "            ", "real_input_flag", "=", "reserve_schedule_sampling_exp", "(", "itr", ")", "\n", "", "else", ":", "\n", "            ", "eta", ",", "real_input_flag", "=", "schedule_sampling", "(", "eta", ",", "itr", ")", "\n", "\n", "", "trainer", ".", "train", "(", "model", ",", "ims", ",", "real_input_flag", ",", "args", ",", "itr", ")", "\n", "\n", "if", "itr", "%", "args", ".", "snapshot_interval", "==", "0", ":", "\n", "            ", "model", ".", "save", "(", "itr", ")", "\n", "\n", "", "if", "itr", "%", "args", ".", "test_interval", "==", "0", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "test_input_handle", ",", "args", ",", "itr", ")", "\n", "\n", "", "train_input_handle", ".", "next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.None.run.test_wrapper": [[202, 208], ["model.load", "core.data_provider.datasets_factory.data_provider", "core.test"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.datasets_factory.data_provider", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.test"], ["", "", "def", "test_wrapper", "(", "model", ")", ":", "\n", "    ", "model", ".", "load", "(", "args", ".", "pretrained_model", ")", "\n", "test_input_handle", "=", "datasets_factory", ".", "data_provider", "(", "\n", "args", ".", "dataset_name", ",", "args", ".", "train_data_paths", ",", "args", ".", "valid_data_paths", ",", "args", ".", "batch_size", ",", "args", ".", "img_width", ",", "\n", "seq_length", "=", "args", ".", "total_length", ",", "injection_action", "=", "args", ".", "injection_action", ",", "is_training", "=", "False", ")", "\n", "trainer", ".", "test", "(", "model", ",", "test_input_handle", ",", "args", ",", "'test_result'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.core.trainer.train": [[13, 23], ["model.train", "numpy.flip().copy", "model.train", "print", "print", "datetime.datetime.now().strftime", "numpy.flip", "str", "str", "datetime.datetime.now"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.train", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.train"], ["def", "train", "(", "model", ",", "ims", ",", "real_input_flag", ",", "configs", ",", "itr", ")", ":", "\n", "    ", "cost", "=", "model", ".", "train", "(", "ims", ",", "real_input_flag", ")", "\n", "if", "configs", ".", "reverse_input", ":", "\n", "        ", "ims_rev", "=", "np", ".", "flip", "(", "ims", ",", "axis", "=", "1", ")", ".", "copy", "(", ")", "\n", "cost", "+=", "model", ".", "train", "(", "ims_rev", ",", "real_input_flag", ")", "\n", "cost", "=", "cost", "/", "2", "\n", "\n", "", "if", "itr", "%", "configs", ".", "display_interval", "==", "0", ":", "\n", "        ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "'itr: '", "+", "str", "(", "itr", ")", ")", "\n", "print", "(", "'training loss: '", "+", "str", "(", "cost", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.core.trainer.test": [[25, 147], ["print", "test_input_handle.begin", "os.path.join", "os.mkdir", "range", "numpy.zeros", "print", "range", "print", "range", "print", "range", "print", "range", "datetime.datetime.now().strftime", "str", "img_mse.append", "ssim.append", "psnr.append", "lp.append", "test_input_handle.no_batch_left", "test_input_handle.get_batch", "core.utils.preprocess.reshape_patch", "model.test", "core.utils.preprocess.reshape_patch_back", "range", "test_input_handle.next", "print", "numpy.asarray", "print", "numpy.asarray", "print", "numpy.asarray", "print", "numpy.maximum", "numpy.minimum", "numpy.square().sum", "numpy.zeros", "torch.FloatTensor", "numpy.zeros", "torch.FloatTensor", "loss_fn_alex", "torch.mean().item", "numpy.uint8", "numpy.uint8", "core.utils.metrics.batch_psnr", "range", "os.path.join", "os.mkdir", "range", "range", "str", "str", "str", "str", "datetime.datetime.now", "skimage.measure.compare_ssim", "str", "os.path.join", "numpy.uint8", "cv2.imwrite", "os.path.join", "numpy.maximum", "numpy.minimum", "numpy.uint8", "cv2.imwrite", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.square", "torch.mean", "str", "str"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.get_batch", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.preprocess.reshape_patch", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.test", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.preprocess.reshape_patch_back", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.next", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.metrics.batch_psnr"], ["", "", "def", "test", "(", "model", ",", "test_input_handle", ",", "configs", ",", "itr", ")", ":", "\n", "    ", "print", "(", "datetime", ".", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d %H:%M:%S'", ")", ",", "'test...'", ")", "\n", "test_input_handle", ".", "begin", "(", "do_shuffle", "=", "False", ")", "\n", "res_path", "=", "os", ".", "path", ".", "join", "(", "configs", ".", "gen_frm_dir", ",", "str", "(", "itr", ")", ")", "\n", "os", ".", "mkdir", "(", "res_path", ")", "\n", "avg_mse", "=", "0", "\n", "batch_id", "=", "0", "\n", "img_mse", ",", "ssim", ",", "psnr", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "lp", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", "-", "configs", ".", "input_length", ")", ":", "\n", "        ", "img_mse", ".", "append", "(", "0", ")", "\n", "ssim", ".", "append", "(", "0", ")", "\n", "psnr", ".", "append", "(", "0", ")", "\n", "lp", ".", "append", "(", "0", ")", "\n", "\n", "# reverse schedule sampling", "\n", "", "if", "configs", ".", "reverse_scheduled_sampling", "==", "1", ":", "\n", "        ", "mask_input", "=", "1", "\n", "", "else", ":", "\n", "        ", "mask_input", "=", "configs", ".", "input_length", "\n", "\n", "", "real_input_flag", "=", "np", ".", "zeros", "(", "\n", "(", "configs", ".", "batch_size", ",", "\n", "configs", ".", "total_length", "-", "mask_input", "-", "1", ",", "\n", "configs", ".", "img_width", "//", "configs", ".", "patch_size", ",", "\n", "configs", ".", "img_width", "//", "configs", ".", "patch_size", ",", "\n", "configs", ".", "patch_size", "**", "2", "*", "configs", ".", "img_channel", ")", ")", "\n", "\n", "if", "configs", ".", "reverse_scheduled_sampling", "==", "1", ":", "\n", "        ", "real_input_flag", "[", ":", ",", ":", "configs", ".", "input_length", "-", "1", ",", ":", ",", ":", "]", "=", "1.0", "\n", "\n", "", "while", "(", "test_input_handle", ".", "no_batch_left", "(", ")", "==", "False", ")", ":", "\n", "        ", "batch_id", "=", "batch_id", "+", "1", "\n", "test_ims", "=", "test_input_handle", ".", "get_batch", "(", ")", "\n", "test_dat", "=", "preprocess", ".", "reshape_patch", "(", "test_ims", ",", "configs", ".", "patch_size", ")", "\n", "test_ims", "=", "test_ims", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "configs", ".", "img_channel", "]", "\n", "img_gen", "=", "model", ".", "test", "(", "test_dat", ",", "real_input_flag", ")", "\n", "\n", "img_gen", "=", "preprocess", ".", "reshape_patch_back", "(", "img_gen", ",", "configs", ".", "patch_size", ")", "\n", "output_length", "=", "configs", ".", "total_length", "-", "configs", ".", "input_length", "\n", "img_out", "=", "img_gen", "[", ":", ",", "-", "output_length", ":", "]", "\n", "\n", "# MSE per frame", "\n", "for", "i", "in", "range", "(", "output_length", ")", ":", "\n", "            ", "x", "=", "test_ims", "[", ":", ",", "i", "+", "configs", ".", "input_length", ",", ":", ",", ":", ",", ":", "]", "\n", "gx", "=", "img_out", "[", ":", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "gx", "=", "np", ".", "maximum", "(", "gx", ",", "0", ")", "\n", "gx", "=", "np", ".", "minimum", "(", "gx", ",", "1", ")", "\n", "mse", "=", "np", ".", "square", "(", "x", "-", "gx", ")", ".", "sum", "(", ")", "\n", "img_mse", "[", "i", "]", "+=", "mse", "\n", "avg_mse", "+=", "mse", "\n", "# cal lpips", "\n", "img_x", "=", "np", ".", "zeros", "(", "[", "configs", ".", "batch_size", ",", "3", ",", "configs", ".", "img_width", ",", "configs", ".", "img_width", "]", ")", "\n", "if", "configs", ".", "img_channel", "==", "3", ":", "\n", "                ", "img_x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "img_x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "", "else", ":", "\n", "                ", "img_x", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_x", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_x", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "", "img_x", "=", "torch", ".", "FloatTensor", "(", "img_x", ")", "\n", "img_gx", "=", "np", ".", "zeros", "(", "[", "configs", ".", "batch_size", ",", "3", ",", "configs", ".", "img_width", ",", "configs", ".", "img_width", "]", ")", "\n", "if", "configs", ".", "img_channel", "==", "3", ":", "\n", "                ", "img_gx", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_gx", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "1", "]", "\n", "img_gx", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "2", "]", "\n", "", "else", ":", "\n", "                ", "img_gx", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_gx", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "img_gx", "[", ":", ",", "2", ",", ":", ",", ":", "]", "=", "gx", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "", "img_gx", "=", "torch", ".", "FloatTensor", "(", "img_gx", ")", "\n", "lp_loss", "=", "loss_fn_alex", "(", "img_x", ",", "img_gx", ")", "\n", "lp", "[", "i", "]", "+=", "torch", ".", "mean", "(", "lp_loss", ")", ".", "item", "(", ")", "\n", "\n", "real_frm", "=", "np", ".", "uint8", "(", "x", "*", "255", ")", "\n", "pred_frm", "=", "np", ".", "uint8", "(", "gx", "*", "255", ")", "\n", "\n", "psnr", "[", "i", "]", "+=", "metrics", ".", "batch_psnr", "(", "pred_frm", ",", "real_frm", ")", "\n", "for", "b", "in", "range", "(", "configs", ".", "batch_size", ")", ":", "\n", "                ", "score", ",", "_", "=", "compare_ssim", "(", "pred_frm", "[", "b", "]", ",", "real_frm", "[", "b", "]", ",", "full", "=", "True", ",", "multichannel", "=", "True", ")", "\n", "ssim", "[", "i", "]", "+=", "score", "\n", "\n", "# save prediction examples", "\n", "", "", "if", "batch_id", "<=", "configs", ".", "num_save_samples", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "res_path", ",", "str", "(", "batch_id", ")", ")", "\n", "os", ".", "mkdir", "(", "path", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", ")", ":", "\n", "                ", "name", "=", "'gt'", "+", "str", "(", "i", "+", "1", ")", "+", "'.png'", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "img_gt", "=", "np", ".", "uint8", "(", "test_ims", "[", "0", ",", "i", ",", ":", ",", ":", ",", ":", "]", "*", "255", ")", "\n", "cv2", ".", "imwrite", "(", "file_name", ",", "img_gt", ")", "\n", "", "for", "i", "in", "range", "(", "output_length", ")", ":", "\n", "                ", "name", "=", "'pd'", "+", "str", "(", "i", "+", "1", "+", "configs", ".", "input_length", ")", "+", "'.png'", "\n", "file_name", "=", "os", ".", "path", ".", "join", "(", "path", ",", "name", ")", "\n", "img_pd", "=", "img_out", "[", "0", ",", "i", ",", ":", ",", ":", ",", ":", "]", "\n", "img_pd", "=", "np", ".", "maximum", "(", "img_pd", ",", "0", ")", "\n", "img_pd", "=", "np", ".", "minimum", "(", "img_pd", ",", "1", ")", "\n", "img_pd", "=", "np", ".", "uint8", "(", "img_pd", "*", "255", ")", "\n", "cv2", ".", "imwrite", "(", "file_name", ",", "img_pd", ")", "\n", "", "", "test_input_handle", ".", "next", "(", ")", "\n", "\n", "", "avg_mse", "=", "avg_mse", "/", "(", "batch_id", "*", "configs", ".", "batch_size", ")", "\n", "print", "(", "'mse per seq: '", "+", "str", "(", "avg_mse", ")", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", "-", "configs", ".", "input_length", ")", ":", "\n", "        ", "print", "(", "img_mse", "[", "i", "]", "/", "(", "batch_id", "*", "configs", ".", "batch_size", ")", ")", "\n", "\n", "", "ssim", "=", "np", ".", "asarray", "(", "ssim", ",", "dtype", "=", "np", ".", "float32", ")", "/", "(", "configs", ".", "batch_size", "*", "batch_id", ")", "\n", "print", "(", "'ssim per frame: '", "+", "str", "(", "np", ".", "mean", "(", "ssim", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", "-", "configs", ".", "input_length", ")", ":", "\n", "        ", "print", "(", "ssim", "[", "i", "]", ")", "\n", "\n", "", "psnr", "=", "np", ".", "asarray", "(", "psnr", ",", "dtype", "=", "np", ".", "float32", ")", "/", "batch_id", "\n", "print", "(", "'psnr per frame: '", "+", "str", "(", "np", ".", "mean", "(", "psnr", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", "-", "configs", ".", "input_length", ")", ":", "\n", "        ", "print", "(", "psnr", "[", "i", "]", ")", "\n", "\n", "", "lp", "=", "np", ".", "asarray", "(", "lp", ",", "dtype", "=", "np", ".", "float32", ")", "/", "batch_id", "\n", "print", "(", "'lpips per frame: '", "+", "str", "(", "np", ".", "mean", "(", "lp", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "configs", ".", "total_length", "-", "configs", ".", "input_length", ")", ":", "\n", "        ", "print", "(", "lp", "[", "i", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.scatter": [[10, 36], ["matplotlib.figure", "matplotlib.subplot", "label_set.append", "range", "range", "plt.subplot.set_xticks", "plt.subplot.set_yticks", "plt.subplot.axis", "plt.subplot.legend", "plt.figure.savefig", "print", "len", "range", "plt.subplot.scatter", "len", "label_set.append", "str"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.scatter"], ["def", "scatter", "(", "x", ",", "colors", ",", "file_name", ",", "class_num", ")", ":", "\n", "    ", "f", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "226", "/", "15", ",", "212", "/", "15", ")", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "aspect", "=", "'equal'", ")", "\n", "color_pen", "=", "[", "'black'", ",", "'r'", "]", "\n", "# relabel", "\n", "my_legend", "=", "[", "'Delta_C'", ",", "'Delta_M'", "]", "\n", "label_set", "=", "[", "]", "\n", "label_set", ".", "append", "(", "colors", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "colors", ")", ")", ":", "\n", "        ", "flag", "=", "1", "\n", "for", "j", "in", "range", "(", "len", "(", "label_set", ")", ")", ":", "\n", "            ", "if", "label_set", "[", "j", "]", "==", "colors", "[", "i", "]", ":", "\n", "                ", "flag", "=", "0", "\n", "break", "\n", "", "", "if", "flag", ":", "\n", "            ", "label_set", ".", "append", "(", "colors", "[", "i", "]", ")", "\n", "# draw", "\n", "", "", "for", "i", "in", "range", "(", "class_num", ")", ":", "\n", "        ", "ax", ".", "scatter", "(", "x", "[", "colors", "==", "label_set", "[", "i", "]", ",", "0", "]", ",", "x", "[", "colors", "==", "label_set", "[", "i", "]", ",", "1", "]", ",", "lw", "=", "0", ",", "s", "=", "70", ",", "c", "=", "color_pen", "[", "i", "]", ",", "\n", "label", "=", "str", "(", "my_legend", "[", "i", "]", ")", ")", "\n", "", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_yticks", "(", "[", "]", ")", "\n", "ax", ".", "axis", "(", "'tight'", ")", "\n", "ax", ".", "legend", "(", "loc", "=", "'upper right'", ")", "\n", "f", ".", "savefig", "(", "file_name", "+", "\".png\"", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "file_name", "+", "' save finished'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.plot_TSNE": [[38, 43], ["sklearn.manifold.TSNE().fit_transform", "tsne.scatter", "os.path.join", "sklearn.manifold.TSNE"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.scatter"], ["", "def", "plot_TSNE", "(", "data", ",", "label", ",", "path", ",", "title", ",", "class_num", ")", ":", "\n", "    ", "colors", "=", "label", "\n", "all_features_np", "=", "data", "\n", "tsne_features", "=", "TSNE", "(", "random_state", "=", "20190129", ")", ".", "fit_transform", "(", "all_features_np", ")", "\n", "scatter", "(", "tsne_features", ",", "colors", ",", "os", ".", "path", ".", "join", "(", "path", ",", "title", ")", ",", "class_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.visualization": [[45, 79], ["os.path.exists", "os.makedirs", "range", "shutil.rmtree", "range", "range", "range", "tsne.plot_TSNE", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.normalize().detach().cpu().numpy().tolist", "data.append", "label.append", "torch.normalize().detach().cpu().numpy().tolist", "data.append", "label.append", "numpy.array", "numpy.array", "str", "torch.normalize().detach().cpu().numpy", "torch.normalize().detach().cpu().numpy", "str", "torch.normalize().detach().cpu", "torch.normalize().detach().cpu", "str", "torch.normalize().detach", "torch.normalize().detach", "torch.normalize", "torch.normalize", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.plot_TSNE"], ["", "def", "visualization", "(", "length", ",", "layers", ",", "c", ",", "m", ",", "path", ",", "elements", "=", "10", ")", ":", "\n", "    ", "'''\n    visualization of memory cells decoupling\n    :param length: sequence length\n    :param layers: stacked predictive layers\n    :param c: variables\n    :param m: variables\n    :param path: save path\n    :param elements: select top k element to visualization\n    :return:\n    '''", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "shutil", ".", "rmtree", "(", "path", ")", "\n", "", "os", ".", "makedirs", "(", "path", ")", "\n", "for", "t", "in", "range", "(", "length", "-", "1", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "layers", ")", ":", "\n", "            ", "data", "=", "[", "]", "\n", "label", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "c", "[", "layers", "*", "t", "+", "i", "]", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "for", "k", "in", "range", "(", "c", "[", "layers", "*", "t", "+", "i", "]", ".", "shape", "[", "1", "]", ")", ":", "\n", "# choose the most dominated variables to the similarity", "\n", "                    ", "value1", ",", "index1", "=", "torch", ".", "topk", "(", "c", "[", "layers", "*", "t", "+", "i", ",", "j", ",", "k", "]", ",", "elements", ")", "\n", "value2", ",", "index2", "=", "torch", ".", "topk", "(", "m", "[", "layers", "*", "t", "+", "i", ",", "j", ",", "k", "]", ",", "elements", ")", "\n", "# c [c_topk, elements in m_topk pos]", "\n", "c_key", "=", "F", ".", "normalize", "(", "torch", ".", "cat", "(", "[", "value1", ",", "c", "[", "layers", "*", "t", "+", "i", ",", "j", ",", "k", ",", "index2", "]", "]", ",", "dim", "=", "0", ")", ",", "\n", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "data", ".", "append", "(", "c_key", ")", "\n", "label", ".", "append", "(", "0", ")", "\n", "# m [elements in c_topk pos, m_topk]", "\n", "m_key", "=", "F", ".", "normalize", "(", "torch", ".", "cat", "(", "[", "m", "[", "layers", "*", "t", "+", "i", ",", "j", ",", "k", ",", "index1", "]", ",", "value2", "]", ",", "dim", "=", "0", ")", ",", "\n", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "tolist", "(", ")", "\n", "data", ".", "append", "(", "m_key", ")", "\n", "label", ".", "append", "(", "1", ")", "\n", "", "plot_TSNE", "(", "np", ".", "array", "(", "data", ")", ",", "np", ".", "array", "(", "label", ")", ",", "path", ",", "'case_'", "+", "str", "(", "j", ")", "+", "'_tsne_'", "+", "str", "(", "i", ")", "+", "'_'", "+", "str", "(", "t", ")", ",", "2", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.metrics.batch_psnr": [[5, 16], ["numpy.int32", "numpy.int32", "float", "numpy.mean", "numpy.size", "numpy.sum", "numpy.log10", "numpy.log10"], "function", ["None"], ["def", "batch_psnr", "(", "gen_frames", ",", "gt_frames", ")", ":", "\n", "    ", "if", "gen_frames", ".", "ndim", "==", "3", ":", "\n", "        ", "axis", "=", "(", "1", ",", "2", ")", "\n", "", "elif", "gen_frames", ".", "ndim", "==", "4", ":", "\n", "        ", "axis", "=", "(", "1", ",", "2", ",", "3", ")", "\n", "", "x", "=", "np", ".", "int32", "(", "gen_frames", ")", "\n", "y", "=", "np", ".", "int32", "(", "gt_frames", ")", "\n", "num_pixels", "=", "float", "(", "np", ".", "size", "(", "gen_frames", "[", "0", "]", ")", ")", "\n", "mse", "=", "np", ".", "sum", "(", "(", "x", "-", "y", ")", "**", "2", ",", "axis", "=", "axis", ",", "dtype", "=", "np", ".", "float32", ")", "/", "num_pixels", "\n", "psnr", "=", "20", "*", "np", ".", "log10", "(", "255", ")", "-", "10", "*", "np", ".", "log10", "(", "mse", ")", "\n", "return", "np", ".", "mean", "(", "psnr", ")", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.preprocess.reshape_patch": [[5, 22], ["numpy.reshape", "numpy.transpose", "numpy.reshape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "function", ["None"], ["def", "reshape_patch", "(", "img_tensor", ",", "patch_size", ")", ":", "\n", "    ", "assert", "5", "==", "img_tensor", ".", "ndim", "\n", "batch_size", "=", "np", ".", "shape", "(", "img_tensor", ")", "[", "0", "]", "\n", "seq_length", "=", "np", ".", "shape", "(", "img_tensor", ")", "[", "1", "]", "\n", "img_height", "=", "np", ".", "shape", "(", "img_tensor", ")", "[", "2", "]", "\n", "img_width", "=", "np", ".", "shape", "(", "img_tensor", ")", "[", "3", "]", "\n", "num_channels", "=", "np", ".", "shape", "(", "img_tensor", ")", "[", "4", "]", "\n", "a", "=", "np", ".", "reshape", "(", "img_tensor", ",", "[", "batch_size", ",", "seq_length", ",", "\n", "img_height", "//", "patch_size", ",", "patch_size", ",", "\n", "img_width", "//", "patch_size", ",", "patch_size", ",", "\n", "num_channels", "]", ")", "\n", "b", "=", "np", ".", "transpose", "(", "a", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", "]", ")", "\n", "patch_tensor", "=", "np", ".", "reshape", "(", "b", ",", "[", "batch_size", ",", "seq_length", ",", "\n", "img_height", "//", "patch_size", ",", "\n", "img_width", "//", "patch_size", ",", "\n", "patch_size", "*", "patch_size", "*", "num_channels", "]", ")", "\n", "return", "patch_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.preprocess.reshape_patch_back": [[23, 41], ["numpy.reshape", "numpy.transpose", "numpy.reshape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape", "numpy.shape"], "function", ["None"], ["", "def", "reshape_patch_back", "(", "patch_tensor", ",", "patch_size", ")", ":", "\n", "    ", "assert", "5", "==", "patch_tensor", ".", "ndim", "\n", "batch_size", "=", "np", ".", "shape", "(", "patch_tensor", ")", "[", "0", "]", "\n", "seq_length", "=", "np", ".", "shape", "(", "patch_tensor", ")", "[", "1", "]", "\n", "patch_height", "=", "np", ".", "shape", "(", "patch_tensor", ")", "[", "2", "]", "\n", "patch_width", "=", "np", ".", "shape", "(", "patch_tensor", ")", "[", "3", "]", "\n", "channels", "=", "np", ".", "shape", "(", "patch_tensor", ")", "[", "4", "]", "\n", "img_channels", "=", "channels", "//", "(", "patch_size", "*", "patch_size", ")", "\n", "a", "=", "np", ".", "reshape", "(", "patch_tensor", ",", "[", "batch_size", ",", "seq_length", ",", "\n", "patch_height", ",", "patch_width", ",", "\n", "patch_size", ",", "patch_size", ",", "\n", "img_channels", "]", ")", "\n", "b", "=", "np", ".", "transpose", "(", "a", ",", "[", "0", ",", "1", ",", "2", ",", "4", ",", "3", ",", "5", ",", "6", "]", ")", "\n", "img_tensor", "=", "np", ".", "reshape", "(", "b", ",", "[", "batch_size", ",", "seq_length", ",", "\n", "patch_height", "*", "patch_size", ",", "\n", "patch_width", "*", "patch_size", ",", "\n", "img_channels", "]", ")", "\n", "return", "img_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.__init__": [[5, 21], ["len", "input_param.get", "input_param.get", "mnist.InputHandle.load"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load"], ["    ", "def", "__init__", "(", "self", ",", "input_param", ")", ":", "\n", "        ", "self", ".", "paths", "=", "input_param", "[", "'paths'", "]", "\n", "self", ".", "num_paths", "=", "len", "(", "input_param", "[", "'paths'", "]", ")", "\n", "self", ".", "name", "=", "input_param", "[", "'name'", "]", "\n", "self", ".", "input_data_type", "=", "input_param", ".", "get", "(", "'input_data_type'", ",", "'float32'", ")", "\n", "self", ".", "output_data_type", "=", "input_param", ".", "get", "(", "'output_data_type'", ",", "'float32'", ")", "\n", "self", ".", "minibatch_size", "=", "input_param", "[", "'minibatch_size'", "]", "\n", "self", ".", "is_output_sequence", "=", "input_param", "[", "'is_output_sequence'", "]", "\n", "self", ".", "data", "=", "{", "}", "\n", "self", ".", "indices", "=", "{", "}", "\n", "self", ".", "current_position", "=", "0", "\n", "self", ".", "current_batch_size", "=", "0", "\n", "self", ".", "current_batch_indices", "=", "[", "]", "\n", "self", ".", "current_input_length", "=", "0", "\n", "self", ".", "current_output_length", "=", "0", "\n", "self", ".", "load", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.load": [[22, 39], ["numpy.load", "numpy.load.keys", "mnist.InputHandle.data.keys", "numpy.load", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "print"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load"], ["", "def", "load", "(", "self", ")", ":", "\n", "        ", "dat_1", "=", "np", ".", "load", "(", "self", ".", "paths", "[", "0", "]", ")", "\n", "for", "key", "in", "dat_1", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "data", "[", "key", "]", "=", "dat_1", "[", "key", "]", "\n", "", "if", "self", ".", "num_paths", "==", "2", ":", "\n", "            ", "dat_2", "=", "np", ".", "load", "(", "self", ".", "paths", "[", "1", "]", ")", "\n", "num_clips_1", "=", "dat_1", "[", "'clips'", "]", ".", "shape", "[", "1", "]", "\n", "dat_2", "[", "'clips'", "]", "[", ":", ",", ":", ",", "0", "]", "+=", "num_clips_1", "\n", "self", ".", "data", "[", "'clips'", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dat_1", "[", "'clips'", "]", ",", "dat_2", "[", "'clips'", "]", ")", ",", "axis", "=", "1", ")", "\n", "self", ".", "data", "[", "'input_raw_data'", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dat_1", "[", "'input_raw_data'", "]", ",", "dat_2", "[", "'input_raw_data'", "]", ")", ",", "axis", "=", "0", ")", "\n", "self", ".", "data", "[", "'output_raw_data'", "]", "=", "np", ".", "concatenate", "(", "\n", "(", "dat_1", "[", "'output_raw_data'", "]", ",", "dat_2", "[", "'output_raw_data'", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "for", "key", "in", "self", ".", "data", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "key", ")", "\n", "print", "(", "self", ".", "data", "[", "key", "]", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.total": [[40, 42], ["None"], "methods", ["None"], ["", "", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "data", "[", "'clips'", "]", ".", "shape", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.begin": [[43, 58], ["numpy.arange", "max", "max", "mnist.InputHandle.total", "random.shuffle", "mnist.InputHandle.total", "mnist.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "begin", "(", "self", ",", "do_shuffle", "=", "True", ")", ":", "\n", "        ", "self", ".", "indices", "=", "np", ".", "arange", "(", "self", ".", "total", "(", ")", ",", "dtype", "=", "\"int32\"", ")", "\n", "if", "do_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "", "self", ".", "current_position", "=", "0", "\n", "if", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "<=", "self", ".", "total", "(", ")", ":", "\n", "            ", "self", ".", "current_batch_size", "=", "self", ".", "minibatch_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_batch_size", "=", "self", ".", "total", "(", ")", "-", "self", ".", "current_position", "\n", "", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "\n", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "current_batch_size", "]", "\n", "self", ".", "current_input_length", "=", "max", "(", "self", ".", "data", "[", "'clips'", "]", "[", "0", ",", "ind", ",", "1", "]", "for", "ind", "\n", "in", "self", ".", "current_batch_indices", ")", "\n", "self", ".", "current_output_length", "=", "max", "(", "self", ".", "data", "[", "'clips'", "]", "[", "1", ",", "ind", ",", "1", "]", "for", "ind", "\n", "in", "self", ".", "current_batch_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.next": [[59, 73], ["mnist.InputHandle.no_batch_left", "max", "max", "mnist.InputHandle.total", "mnist.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_position", "+=", "self", ".", "current_batch_size", "\n", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "if", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "<=", "self", ".", "total", "(", ")", ":", "\n", "            ", "self", ".", "current_batch_size", "=", "self", ".", "minibatch_size", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_batch_size", "=", "self", ".", "total", "(", ")", "-", "self", ".", "current_position", "\n", "", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "\n", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "current_batch_size", "]", "\n", "self", ".", "current_input_length", "=", "max", "(", "self", ".", "data", "[", "'clips'", "]", "[", "0", ",", "ind", ",", "1", "]", "for", "ind", "\n", "in", "self", ".", "current_batch_indices", ")", "\n", "self", ".", "current_output_length", "=", "max", "(", "self", ".", "data", "[", "'clips'", "]", "[", "1", ",", "ind", ",", "1", "]", "for", "ind", "\n", "in", "self", ".", "current_batch_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.no_batch_left": [[74, 79], ["mnist.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "no_batch_left", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_position", ">=", "self", ".", "total", "(", ")", "-", "self", ".", "current_batch_size", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.input_batch": [[80, 97], ["mnist.InputHandle.no_batch_left", "numpy.zeros().astype", "numpy.transpose", "range", "input_batch.astype.astype.astype", "numpy.transpose", "numpy.zeros", "tuple"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "", "def", "input_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "input_batch", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "current_batch_size", ",", "self", ".", "current_input_length", ")", "+", "\n", "tuple", "(", "self", ".", "data", "[", "'dims'", "]", "[", "0", "]", ")", ")", ".", "astype", "(", "self", ".", "input_data_type", ")", "\n", "input_batch", "=", "np", ".", "transpose", "(", "input_batch", ",", "(", "0", ",", "1", ",", "3", ",", "4", ",", "2", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "current_batch_size", ")", ":", "\n", "            ", "batch_ind", "=", "self", ".", "current_batch_indices", "[", "i", "]", "\n", "begin", "=", "self", ".", "data", "[", "'clips'", "]", "[", "0", ",", "batch_ind", ",", "0", "]", "\n", "end", "=", "self", ".", "data", "[", "'clips'", "]", "[", "0", ",", "batch_ind", ",", "0", "]", "+", "self", ".", "data", "[", "'clips'", "]", "[", "0", ",", "batch_ind", ",", "1", "]", "\n", "data_slice", "=", "self", ".", "data", "[", "'input_raw_data'", "]", "[", "begin", ":", "end", ",", ":", ",", ":", ",", ":", "]", "\n", "data_slice", "=", "np", ".", "transpose", "(", "data_slice", ",", "(", "0", ",", "2", ",", "3", ",", "1", ")", ")", "\n", "input_batch", "[", "i", ",", ":", "self", ".", "current_input_length", ",", ":", ",", ":", ",", ":", "]", "=", "data_slice", "\n", "", "input_batch", "=", "input_batch", ".", "astype", "(", "self", ".", "input_data_type", ")", "\n", "return", "input_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.output_batch": [[98, 130], ["mnist.InputHandle.no_batch_left", "range", "numpy.zeros.astype", "numpy.transpose", "numpy.zeros", "numpy.zeros", "tuple", "tuple"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "def", "output_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "if", "(", "2", ",", "3", ")", "==", "self", ".", "data", "[", "'dims'", "]", ".", "shape", ":", "\n", "            ", "raw_dat", "=", "self", ".", "data", "[", "'output_raw_data'", "]", "\n", "", "else", ":", "\n", "            ", "raw_dat", "=", "self", ".", "data", "[", "'input_raw_data'", "]", "\n", "", "if", "self", ".", "is_output_sequence", ":", "\n", "            ", "if", "(", "1", ",", "3", ")", "==", "self", ".", "data", "[", "'dims'", "]", ".", "shape", ":", "\n", "                ", "output_dim", "=", "self", ".", "data", "[", "'dims'", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "output_dim", "=", "self", ".", "data", "[", "'dims'", "]", "[", "1", "]", "\n", "", "output_batch", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "current_batch_size", ",", "self", ".", "current_output_length", ")", "+", "\n", "tuple", "(", "output_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "output_batch", "=", "np", ".", "zeros", "(", "(", "self", ".", "current_batch_size", ",", ")", "+", "\n", "tuple", "(", "self", ".", "data", "[", "'dims'", "]", "[", "1", "]", ")", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "current_batch_size", ")", ":", "\n", "            ", "batch_ind", "=", "self", ".", "current_batch_indices", "[", "i", "]", "\n", "begin", "=", "self", ".", "data", "[", "'clips'", "]", "[", "1", ",", "batch_ind", ",", "0", "]", "\n", "end", "=", "self", ".", "data", "[", "'clips'", "]", "[", "1", ",", "batch_ind", ",", "0", "]", "+", "self", ".", "data", "[", "'clips'", "]", "[", "1", ",", "batch_ind", ",", "1", "]", "\n", "if", "self", ".", "is_output_sequence", ":", "\n", "                ", "data_slice", "=", "raw_dat", "[", "begin", ":", "end", ",", ":", ",", ":", ",", ":", "]", "\n", "output_batch", "[", "i", ",", ":", "data_slice", ".", "shape", "[", "0", "]", ",", ":", ",", ":", ",", ":", "]", "=", "data_slice", "\n", "", "else", ":", "\n", "                ", "data_slice", "=", "raw_dat", "[", "begin", ",", ":", ",", ":", ",", ":", "]", "\n", "output_batch", "[", "i", ",", ":", ",", ":", ",", ":", "]", "=", "data_slice", "\n", "", "", "output_batch", "=", "output_batch", ".", "astype", "(", "self", ".", "output_data_type", ")", "\n", "output_batch", "=", "np", ".", "transpose", "(", "output_batch", ",", "[", "0", ",", "1", ",", "3", ",", "4", ",", "2", "]", ")", "\n", "return", "output_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.get_batch": [[131, 136], ["mnist.InputHandle.input_batch", "mnist.InputHandle.output_batch", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.input_batch", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.mnist.InputHandle.output_batch"], ["", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "input_seq", "=", "self", ".", "input_batch", "(", ")", "\n", "output_seq", "=", "self", ".", "output_batch", "(", ")", "\n", "batch", "=", "np", ".", "concatenate", "(", "(", "input_seq", ",", "output_seq", ")", ",", "axis", "=", "1", ")", "\n", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.__init__": [[12, 22], ["input_param.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datas", ",", "indices", ",", "input_param", ")", ":", "\n", "        ", "self", ".", "name", "=", "input_param", "[", "'name'", "]", "\n", "self", ".", "input_data_type", "=", "input_param", ".", "get", "(", "'input_data_type'", ",", "'float32'", ")", "\n", "self", ".", "minibatch_size", "=", "input_param", "[", "'minibatch_size'", "]", "\n", "self", ".", "image_width", "=", "input_param", "[", "'image_width'", "]", "\n", "self", ".", "datas", "=", "datas", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "current_position", "=", "0", "\n", "self", ".", "current_batch_indices", "=", "[", "]", "\n", "self", ".", "current_input_length", "=", "input_param", "[", "'seq_length'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.total": [[23, 25], ["len"], "methods", ["None"], ["", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.begin": [[26, 32], ["logger.info", "random.shuffle"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "do_shuffle", "=", "True", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Initialization for read data \"", ")", "\n", "if", "do_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "", "self", ".", "current_position", "=", "0", "\n", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.next": [[33, 38], ["kth_action.InputHandle.no_batch_left"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_position", "+=", "self", ".", "minibatch_size", "\n", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.no_batch_left": [[39, 44], ["kth_action.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "no_batch_left", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_position", "+", "self", ".", "minibatch_size", ">=", "self", ".", "total", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.get_batch": [[45, 62], ["kth_action.InputHandle.no_batch_left", "numpy.zeros().astype", "range", "input_batch.astype.astype.astype", "logger.error", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"There is no batch left in \"", "+", "self", ".", "name", "+", "\". Consider to user iterators.begin() to rescan from the beginning of the iterators\"", ")", "\n", "return", "None", "\n", "", "input_batch", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "minibatch_size", ",", "self", ".", "current_input_length", ",", "self", ".", "image_width", ",", "self", ".", "image_width", ",", "1", ")", ")", ".", "astype", "(", "\n", "self", ".", "input_data_type", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "minibatch_size", ")", ":", "\n", "            ", "batch_ind", "=", "self", ".", "current_batch_indices", "[", "i", "]", "\n", "begin", "=", "batch_ind", "\n", "end", "=", "begin", "+", "self", ".", "current_input_length", "\n", "data_slice", "=", "self", ".", "datas", "[", "begin", ":", "end", ",", ":", ",", ":", ",", ":", "]", "\n", "input_batch", "[", "i", ",", ":", "self", ".", "current_input_length", ",", ":", ",", ":", ",", ":", "]", "=", "data_slice", "\n", "\n", "", "input_batch", "=", "input_batch", ".", "astype", "(", "self", ".", "input_data_type", ")", "\n", "return", "input_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.InputHandle.print_stat": [[63, 70], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "str", "str", "str", "str", "str", "kth_action.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "print_stat", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Iterator Name: \"", "+", "self", ".", "name", ")", "\n", "logger", ".", "info", "(", "\"    current_position: \"", "+", "str", "(", "self", ".", "current_position", ")", ")", "\n", "logger", ".", "info", "(", "\"    Minibatch Size: \"", "+", "str", "(", "self", ".", "minibatch_size", ")", ")", "\n", "logger", ".", "info", "(", "\"    total Size: \"", "+", "str", "(", "self", ".", "total", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"    current_input_length: \"", "+", "str", "(", "self", ".", "current_input_length", ")", ")", "\n", "logger", ".", "info", "(", "\"    Input Data Type: \"", "+", "str", "(", "self", ".", "input_data_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.DataProcess.__init__": [[72, 85], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "input_param", ")", ":", "\n", "        ", "self", ".", "paths", "=", "input_param", "[", "'paths'", "]", "\n", "self", ".", "category_1", "=", "[", "'boxing'", ",", "'handclapping'", ",", "'handwaving'", ",", "'walking'", "]", "\n", "self", ".", "category_2", "=", "[", "'jogging'", ",", "'running'", "]", "\n", "self", ".", "category", "=", "self", ".", "category_1", "+", "self", ".", "category_2", "\n", "self", ".", "image_width", "=", "input_param", "[", "'image_width'", "]", "\n", "\n", "self", ".", "train_person", "=", "[", "'01'", ",", "'02'", ",", "'03'", ",", "'04'", ",", "'05'", ",", "'06'", ",", "'07'", ",", "'08'", ",", "\n", "'09'", ",", "'10'", ",", "'11'", ",", "'12'", ",", "'13'", ",", "'14'", ",", "'15'", ",", "'16'", "]", "\n", "self", ".", "test_person", "=", "[", "'17'", ",", "'18'", ",", "'19'", ",", "'20'", ",", "'21'", ",", "'22'", ",", "'23'", ",", "'24'", ",", "'25'", "]", "\n", "\n", "self", ".", "input_param", "=", "input_param", "\n", "self", ".", "seq_len", "=", "input_param", "[", "'seq_length'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.DataProcess.load_data": [[86, 167], ["print", "numpy.asarray", "numpy.zeros", "range", "print", "print", "os.path.join", "os.listdir", "len", "len", "numpy.float32", "print", "str", "os.path.join", "os.listdir", "os.listdir.sort", "int", "int", "cv2.resize", "print", "PIL.Image.open", "numpy.array", "numpy.asarray.append", "frames_file_name.append", "frames_person_mark.append", "frames_category.append", "indices.append", "str", "str", "file.startswith", "os.path.join", "len", "print"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "paths", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "'''\n        frame -- action -- person_seq(a dir)\n        :param paths: action_path list\n        :return:\n        '''", "\n", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "person_id", "=", "self", ".", "train_person", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "person_id", "=", "self", ".", "test_person", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"ERROR!\"", ")", "\n", "", "print", "(", "'begin load data'", "+", "str", "(", "path", ")", ")", "\n", "\n", "frames_np", "=", "[", "]", "\n", "frames_file_name", "=", "[", "]", "\n", "frames_person_mark", "=", "[", "]", "\n", "frames_category", "=", "[", "]", "\n", "person_mark", "=", "0", "\n", "\n", "c_dir_list", "=", "self", ".", "category", "\n", "frame_category_flag", "=", "-", "1", "\n", "for", "c_dir", "in", "c_dir_list", ":", "# handwaving", "\n", "            ", "if", "c_dir", "in", "self", ".", "category_1", ":", "\n", "                ", "frame_category_flag", "=", "1", "# 20 step", "\n", "", "elif", "c_dir", "in", "self", ".", "category_2", ":", "\n", "                ", "frame_category_flag", "=", "2", "# 3 step", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"category error!!!\"", ")", "\n", "\n", "", "c_dir_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "c_dir", ")", "\n", "p_c_dir_list", "=", "os", ".", "listdir", "(", "c_dir_path", ")", "\n", "\n", "for", "p_c_dir", "in", "p_c_dir_list", ":", "\n", "                ", "if", "p_c_dir", "[", "6", ":", "8", "]", "not", "in", "person_id", ":", "\n", "                    ", "continue", "\n", "", "person_mark", "+=", "1", "\n", "dir_path", "=", "os", ".", "path", ".", "join", "(", "c_dir_path", ",", "p_c_dir", ")", "\n", "filelist", "=", "os", ".", "listdir", "(", "dir_path", ")", "\n", "filelist", ".", "sort", "(", ")", "\n", "for", "file", "in", "filelist", ":", "\n", "                    ", "if", "file", ".", "startswith", "(", "'image'", ")", "==", "False", ":", "\n", "                        ", "continue", "\n", "# print(file)", "\n", "# print(os.path.join(dir_path, file))", "\n", "", "frame_im", "=", "Image", ".", "open", "(", "os", ".", "path", ".", "join", "(", "dir_path", ",", "file", ")", ")", "\n", "frame_np", "=", "np", ".", "array", "(", "frame_im", ")", "# (1000, 1000) numpy array", "\n", "# print(frame_np.shape)", "\n", "frame_np", "=", "frame_np", "[", ":", ",", ":", ",", "0", "]", "#", "\n", "frames_np", ".", "append", "(", "frame_np", ")", "\n", "frames_file_name", ".", "append", "(", "file", ")", "\n", "frames_person_mark", ".", "append", "(", "person_mark", ")", "\n", "frames_category", ".", "append", "(", "frame_category_flag", ")", "\n", "# is it a begin index of sequence", "\n", "", "", "", "indices", "=", "[", "]", "\n", "index", "=", "len", "(", "frames_person_mark", ")", "-", "1", "\n", "while", "index", ">=", "self", ".", "seq_len", "-", "1", ":", "\n", "            ", "if", "frames_person_mark", "[", "index", "]", "==", "frames_person_mark", "[", "index", "-", "self", ".", "seq_len", "+", "1", "]", ":", "\n", "                ", "end", "=", "int", "(", "frames_file_name", "[", "index", "]", "[", "6", ":", "10", "]", ")", "\n", "start", "=", "int", "(", "frames_file_name", "[", "index", "-", "self", ".", "seq_len", "+", "1", "]", "[", "6", ":", "10", "]", ")", "\n", "# TODO: mode == 'test'", "\n", "if", "end", "-", "start", "==", "self", ".", "seq_len", "-", "1", ":", "\n", "                    ", "indices", ".", "append", "(", "index", "-", "self", ".", "seq_len", "+", "1", ")", "\n", "if", "frames_category", "[", "index", "]", "==", "1", ":", "\n", "                        ", "index", "-=", "self", ".", "seq_len", "-", "1", "\n", "", "elif", "frames_category", "[", "index", "]", "==", "2", ":", "\n", "                        ", "index", "-=", "2", "\n", "", "else", ":", "\n", "                        ", "print", "(", "\"category error 2 !!!\"", ")", "\n", "", "", "", "index", "-=", "1", "\n", "\n", "", "frames_np", "=", "np", ".", "asarray", "(", "frames_np", ")", "\n", "data", "=", "np", ".", "zeros", "(", "(", "frames_np", ".", "shape", "[", "0", "]", ",", "self", ".", "image_width", ",", "self", ".", "image_width", ",", "1", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "frames_np", ")", ")", ":", "\n", "            ", "temp", "=", "np", ".", "float32", "(", "frames_np", "[", "i", ",", ":", ",", ":", "]", ")", "\n", "data", "[", "i", ",", ":", ",", ":", ",", "0", "]", "=", "cv2", ".", "resize", "(", "temp", ",", "(", "self", ".", "image_width", ",", "self", ".", "image_width", ")", ")", "/", "255", "\n", "", "print", "(", "\"there are \"", "+", "str", "(", "data", ".", "shape", "[", "0", "]", ")", "+", "\" pictures\"", ")", "\n", "print", "(", "\"there are \"", "+", "str", "(", "len", "(", "indices", ")", ")", "+", "\" sequences\"", ")", "\n", "return", "data", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.DataProcess.get_train_input_handle": [[168, 171], ["kth_action.DataProcess.load_data", "kth_action.InputHandle"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.load_data"], ["", "def", "get_train_input_handle", "(", "self", ")", ":", "\n", "        ", "train_data", ",", "train_indices", "=", "self", ".", "load_data", "(", "self", ".", "paths", ",", "mode", "=", "'train'", ")", "\n", "return", "InputHandle", "(", "train_data", ",", "train_indices", ",", "self", ".", "input_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.kth_action.DataProcess.get_test_input_handle": [[172, 175], ["kth_action.DataProcess.load_data", "kth_action.InputHandle"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.load_data"], ["", "def", "get_test_input_handle", "(", "self", ")", ":", "\n", "        ", "test_data", ",", "test_indices", "=", "self", ".", "load_data", "(", "self", ".", "paths", ",", "mode", "=", "'test'", ")", "\n", "return", "InputHandle", "(", "test_data", ",", "test_indices", ",", "self", ".", "input_param", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.__init__": [[14, 25], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "datas", ",", "indices", ",", "configs", ")", ":", "\n", "        ", "self", ".", "name", "=", "configs", "[", "'name'", "]", "+", "' iterator'", "\n", "self", ".", "minibatch_size", "=", "configs", "[", "'batch_size'", "]", "\n", "self", ".", "image_height", "=", "configs", "[", "'image_height'", "]", "\n", "self", ".", "image_width", "=", "configs", "[", "'image_width'", "]", "\n", "self", ".", "datas", "=", "datas", "\n", "self", ".", "indices", "=", "indices", "\n", "self", ".", "current_position", "=", "0", "\n", "self", ".", "current_batch_indices", "=", "[", "]", "\n", "self", ".", "current_input_length", "=", "configs", "[", "'seq_length'", "]", "\n", "self", ".", "injection_action", "=", "configs", "[", "'injection_action'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total": [[26, 28], ["len"], "methods", ["None"], ["", "def", "total", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin": [[29, 35], ["logger.info", "random.shuffle"], "methods", ["None"], ["", "def", "begin", "(", "self", ",", "do_shuffle", "=", "True", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Initialization for read data \"", ")", "\n", "if", "do_shuffle", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "indices", ")", "\n", "", "self", ".", "current_position", "=", "0", "\n", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.next": [[36, 42], ["bair.InputHandle.no_batch_left"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "def", "next", "(", "self", ")", ":", "\n", "        ", "self", ".", "current_position", "+=", "self", ".", "minibatch_size", "\n", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "current_batch_indices", "=", "self", ".", "indices", "[", "self", ".", "current_position", ":", "self", ".", "current_position", "+", "self", ".", "minibatch_size", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left": [[43, 48], ["bair.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "", "def", "no_batch_left", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current_position", "+", "self", ".", "minibatch_size", ">=", "self", ".", "total", "(", ")", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.get_batch": [[49, 91], ["bair.InputHandle.no_batch_left", "numpy.zeros().astype", "range", "input_batch.astype.astype.astype", "logger.error", "tensorflow.compat.v1.python_io.tf_record_iterator", "range", "numpy.zeros", "numpy.array", "numpy.stack", "PIL.Image.frombytes", "numpy.array().reshape", "tensorflow.train.Example", "tensorflow.train.Example.ParseFromString", "str", "print", "str", "numpy.array().reshape.reshape", "numpy.array", "str", "numpy.ones", "PIL.Image.frombytes.getdata"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.no_batch_left"], ["", "", "def", "get_batch", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "no_batch_left", "(", ")", ":", "\n", "            ", "logger", ".", "error", "(", "\n", "\"There is no batch left in \"", "+", "self", ".", "name", "+", "\". Consider to user iterators.begin() to rescan from the beginning of the iterators\"", ")", "\n", "return", "None", "\n", "", "input_batch", "=", "np", ".", "zeros", "(", "\n", "(", "self", ".", "minibatch_size", ",", "self", ".", "current_input_length", ",", "self", ".", "image_height", ",", "self", ".", "image_width", ",", "7", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "minibatch_size", ")", ":", "\n", "            ", "batch_ind", "=", "self", ".", "current_batch_indices", "[", "i", "]", "\n", "begin", "=", "batch_ind", "[", "-", "1", "]", "\n", "end", "=", "begin", "+", "self", ".", "current_input_length", "\n", "k", "=", "0", "\n", "for", "serialized_example", "in", "tf", ".", "compat", ".", "v1", ".", "python_io", ".", "tf_record_iterator", "(", "batch_ind", "[", "0", "]", ")", ":", "\n", "                ", "if", "k", "==", "batch_ind", "[", "1", "]", ":", "\n", "                    ", "example", "=", "tf", ".", "train", ".", "Example", "(", ")", "\n", "example", ".", "ParseFromString", "(", "serialized_example", ")", "\n", "break", "\n", "", "k", "+=", "1", "\n", "", "for", "j", "in", "range", "(", "begin", ",", "end", ")", ":", "\n", "                ", "action_name", "=", "str", "(", "j", ")", "+", "'/action'", "\n", "action_value", "=", "np", ".", "array", "(", "example", ".", "features", ".", "feature", "[", "action_name", "]", ".", "float_list", ".", "value", ")", "\n", "if", "action_value", ".", "shape", "==", "(", "0", ",", ")", ":", "# End of frames/data", "\n", "                    ", "print", "(", "\"error! \"", "+", "str", "(", "batch_ind", ")", ")", "\n", "", "input_batch", "[", "i", ",", "j", "-", "begin", ",", ":", ",", ":", ",", "3", ":", "]", "=", "np", ".", "stack", "(", "[", "np", ".", "ones", "(", "[", "64", ",", "64", "]", ")", "*", "i", "for", "i", "in", "action_value", "]", ",", "axis", "=", "2", ")", "\n", "\n", "# endeffector_pos_name = str(j) + '/endeffector_pos'", "\n", "# endeffector_pos_value = list(example.features.feature[endeffector_pos_name].float_list.value)", "\n", "# endeffector_positions = np.vstack((endeffector_positions, endeffector_pos_value))", "\n", "\n", "aux1_image_name", "=", "str", "(", "j", ")", "+", "'/image_aux1/encoded'", "\n", "aux1_byte_str", "=", "example", ".", "features", ".", "feature", "[", "aux1_image_name", "]", ".", "bytes_list", ".", "value", "[", "0", "]", "\n", "aux1_img", "=", "Image", ".", "frombytes", "(", "'RGB'", ",", "(", "64", ",", "64", ")", ",", "aux1_byte_str", ")", "\n", "aux1_arr", "=", "np", ".", "array", "(", "aux1_img", ".", "getdata", "(", ")", ")", ".", "reshape", "(", "(", "aux1_img", ".", "size", "[", "1", "]", ",", "aux1_img", ".", "size", "[", "0", "]", ",", "3", ")", ")", "\n", "\n", "# main_image_name = str(j) + '/image_main/encoded'", "\n", "# main_byte_str = example.features.feature[main_image_name].bytes_list.value[0]", "\n", "# main_img = Image.frombytes('RGB', (64, 64), main_byte_str)", "\n", "# main_arr = np.array(main_img.getdata()).reshape((main_img.size[1], main_img.size[0], 3))", "\n", "\n", "input_batch", "[", "i", ",", "j", "-", "begin", ",", ":", ",", ":", ",", ":", "3", "]", "=", "aux1_arr", ".", "reshape", "(", "64", ",", "64", ",", "3", ")", "/", "255", "\n", "", "", "input_batch", "=", "input_batch", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "input_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.print_stat": [[92, 98], ["logger.info", "logger.info", "logger.info", "logger.info", "logger.info", "str", "str", "str", "str", "bair.InputHandle.total"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.total"], ["", "def", "print_stat", "(", "self", ")", ":", "\n", "        ", "logger", ".", "info", "(", "\"Iterator Name: \"", "+", "self", ".", "name", ")", "\n", "logger", ".", "info", "(", "\"    current_position: \"", "+", "str", "(", "self", ".", "current_position", ")", ")", "\n", "logger", ".", "info", "(", "\"    Minibatch Size: \"", "+", "str", "(", "self", ".", "minibatch_size", ")", ")", "\n", "logger", ".", "info", "(", "\"    total Size: \"", "+", "str", "(", "self", ".", "total", "(", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"    current_input_length: \"", "+", "str", "(", "self", ".", "current_input_length", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.__init__": [[101, 108], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "self", ".", "configs", "=", "configs", "\n", "self", ".", "train_data_path", "=", "configs", "[", "'train_data_paths'", "]", "\n", "self", ".", "valid_data_path", "=", "configs", "[", "'valid_data_paths'", "]", "\n", "self", ".", "image_height", "=", "configs", "[", "'image_height'", "]", "\n", "self", ".", "image_width", "=", "configs", "[", "'image_width'", "]", "\n", "self", ".", "seq_len", "=", "configs", "[", "'seq_length'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.load_data": [[109, 147], ["os.path.join", "print", "os.listdir", "os.listdir.sort", "print", "print", "os.path.join", "os.path.join", "video_fullpaths.append", "tensorflow.compat.v1.python_io.tf_record_iterator", "os.path.join", "print", "str", "os.path.join", "tensorflow.train.Example", "tensorflow.train.Example.ParseFromString", "range", "numpy.array", "indices.append", "str", "str", "str", "len"], "methods", ["None"], ["", "def", "load_data", "(", "self", ",", "path", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "path", "[", "0", "]", ",", "'softmotion30_44k'", ")", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'train'", ")", "\n", "", "elif", "mode", "==", "'test'", ":", "\n", "            ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'test'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"ERROR!\"", ")", "\n", "", "print", "(", "'begin load data'", "+", "str", "(", "path", ")", ")", "\n", "\n", "video_fullpaths", "=", "[", "]", "\n", "indices", "=", "[", "]", "\n", "\n", "tfrecords", "=", "os", ".", "listdir", "(", "path", ")", "\n", "tfrecords", ".", "sort", "(", ")", "\n", "num_pictures", "=", "0", "\n", "\n", "for", "tfrecord", "in", "tfrecords", ":", "\n", "            ", "filepath", "=", "os", ".", "path", ".", "join", "(", "path", ",", "tfrecord", ")", "\n", "video_fullpaths", ".", "append", "(", "filepath", ")", "\n", "k", "=", "0", "\n", "for", "serialized_example", "in", "tf", ".", "compat", ".", "v1", ".", "python_io", ".", "tf_record_iterator", "(", "os", ".", "path", ".", "join", "(", "path", ",", "tfrecord", ")", ")", ":", "\n", "                ", "example", "=", "tf", ".", "train", ".", "Example", "(", ")", "\n", "example", ".", "ParseFromString", "(", "serialized_example", ")", "\n", "i", "=", "0", "\n", "while", "True", ":", "\n", "                    ", "action_name", "=", "str", "(", "i", ")", "+", "'/action'", "\n", "action_value", "=", "np", ".", "array", "(", "example", ".", "features", ".", "feature", "[", "action_name", "]", ".", "float_list", ".", "value", ")", "\n", "if", "action_value", ".", "shape", "==", "(", "0", ",", ")", ":", "# End of frames/data", "\n", "                        ", "break", "\n", "", "i", "+=", "1", "\n", "", "num_pictures", "+=", "i", "\n", "for", "j", "in", "range", "(", "i", "-", "self", ".", "seq_len", "+", "1", ")", ":", "\n", "                    ", "indices", ".", "append", "(", "(", "filepath", ",", "k", ",", "j", ")", ")", "\n", "", "k", "+=", "1", "\n", "", "", "print", "(", "\"there are \"", "+", "str", "(", "num_pictures", ")", "+", "\" pictures\"", ")", "\n", "print", "(", "\"there are \"", "+", "str", "(", "len", "(", "indices", ")", ")", "+", "\" sequences\"", ")", "\n", "return", "video_fullpaths", ",", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_train_input_handle": [[148, 151], ["bair.DataProcess.load_data", "bair.InputHandle"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.load_data"], ["", "def", "get_train_input_handle", "(", "self", ")", ":", "\n", "        ", "train_data", ",", "train_indices", "=", "self", ".", "load_data", "(", "self", ".", "train_data_path", ",", "mode", "=", "'train'", ")", "\n", "return", "InputHandle", "(", "train_data", ",", "train_indices", ",", "self", ".", "configs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_test_input_handle": [[152, 155], ["bair.DataProcess.load_data", "bair.InputHandle"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.load_data"], ["", "def", "get_test_input_handle", "(", "self", ")", ":", "\n", "        ", "test_data", ",", "test_indices", "=", "self", ".", "load_data", "(", "self", ".", "valid_data_path", ",", "mode", "=", "'test'", ")", "\n", "return", "InputHandle", "(", "test_data", ",", "test_indices", ",", "self", ".", "configs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.datasets_factory.data_provider": [[10, 84], ["train_data_paths.split", "valid_data_paths.split", "ValueError", "datasets_map[].InputHandle", "input_handle.get_test_input_handle.begin", "datasets_map[].DataProcess", "datasets_map[].DataProcess", "datasets_map[].DataProcess.get_test_input_handle", "input_handle.get_test_input_handle.begin", "datasets_map[].InputHandle", "input_handle_train.get_train_input_handle.begin", "datasets_map[].DataProcess.get_train_input_handle", "input_handle_train.get_train_input_handle.begin", "datasets_map[].DataProcess.get_test_input_handle", "input_handle.get_test_input_handle.begin", "datasets_map[].DataProcess.get_test_input_handle", "input_handle.get_test_input_handle.begin", "datasets_map[].DataProcess", "datasets_map[].DataProcess.get_train_input_handle", "input_handle_train.get_train_input_handle.begin"], "function", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_test_input_handle", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_train_input_handle", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_test_input_handle", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_test_input_handle", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.DataProcess.get_train_input_handle", "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.data_provider.bair.InputHandle.begin"], ["def", "data_provider", "(", "dataset_name", ",", "train_data_paths", ",", "valid_data_paths", ",", "batch_size", ",", "\n", "img_width", ",", "seq_length", ",", "injection_action", ",", "is_training", "=", "True", ")", ":", "\n", "    ", "if", "dataset_name", "not", "in", "datasets_map", ":", "\n", "        ", "raise", "ValueError", "(", "'Name of dataset unknown %s'", "%", "dataset_name", ")", "\n", "", "train_data_list", "=", "train_data_paths", ".", "split", "(", "','", ")", "\n", "valid_data_list", "=", "valid_data_paths", ".", "split", "(", "','", ")", "\n", "if", "dataset_name", "==", "'mnist'", ":", "\n", "        ", "test_input_param", "=", "{", "'paths'", ":", "valid_data_list", ",", "\n", "'minibatch_size'", ":", "batch_size", ",", "\n", "'input_data_type'", ":", "'float32'", ",", "\n", "'is_output_sequence'", ":", "True", ",", "\n", "'name'", ":", "dataset_name", "+", "'test iterator'", "}", "\n", "test_input_handle", "=", "datasets_map", "[", "dataset_name", "]", ".", "InputHandle", "(", "test_input_param", ")", "\n", "test_input_handle", ".", "begin", "(", "do_shuffle", "=", "False", ")", "\n", "if", "is_training", ":", "\n", "            ", "train_input_param", "=", "{", "'paths'", ":", "train_data_list", ",", "\n", "'minibatch_size'", ":", "batch_size", ",", "\n", "'input_data_type'", ":", "'float32'", ",", "\n", "'is_output_sequence'", ":", "True", ",", "\n", "'name'", ":", "dataset_name", "+", "' train iterator'", "}", "\n", "train_input_handle", "=", "datasets_map", "[", "dataset_name", "]", ".", "InputHandle", "(", "train_input_param", ")", "\n", "train_input_handle", ".", "begin", "(", "do_shuffle", "=", "True", ")", "\n", "return", "train_input_handle", ",", "test_input_handle", "\n", "", "else", ":", "\n", "            ", "return", "test_input_handle", "\n", "\n", "", "", "if", "dataset_name", "==", "'action'", ":", "\n", "        ", "input_param", "=", "{", "'paths'", ":", "valid_data_list", ",", "\n", "'image_width'", ":", "img_width", ",", "\n", "'minibatch_size'", ":", "batch_size", ",", "\n", "'seq_length'", ":", "seq_length", ",", "\n", "'input_data_type'", ":", "'float32'", ",", "\n", "'name'", ":", "dataset_name", "+", "' iterator'", "}", "\n", "input_handle", "=", "datasets_map", "[", "dataset_name", "]", ".", "DataProcess", "(", "input_param", ")", "\n", "if", "is_training", ":", "\n", "            ", "train_input_handle", "=", "input_handle", ".", "get_train_input_handle", "(", ")", "\n", "train_input_handle", ".", "begin", "(", "do_shuffle", "=", "True", ")", "\n", "test_input_handle", "=", "input_handle", ".", "get_test_input_handle", "(", ")", "\n", "test_input_handle", ".", "begin", "(", "do_shuffle", "=", "False", ")", "\n", "return", "train_input_handle", ",", "test_input_handle", "\n", "", "else", ":", "\n", "            ", "test_input_handle", "=", "input_handle", ".", "get_test_input_handle", "(", ")", "\n", "test_input_handle", ".", "begin", "(", "do_shuffle", "=", "False", ")", "\n", "return", "test_input_handle", "\n", "\n", "", "", "if", "dataset_name", "==", "'bair'", ":", "\n", "        ", "test_input_param", "=", "{", "'valid_data_paths'", ":", "valid_data_list", ",", "\n", "'train_data_paths'", ":", "train_data_list", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'image_width'", ":", "img_width", ",", "\n", "'image_height'", ":", "img_width", ",", "\n", "'seq_length'", ":", "seq_length", ",", "\n", "'injection_action'", ":", "injection_action", ",", "\n", "'input_data_type'", ":", "'float32'", ",", "\n", "'name'", ":", "dataset_name", "+", "'test iterator'", "}", "\n", "input_handle_test", "=", "datasets_map", "[", "dataset_name", "]", ".", "DataProcess", "(", "test_input_param", ")", "\n", "test_input_handle", "=", "input_handle_test", ".", "get_test_input_handle", "(", ")", "\n", "test_input_handle", ".", "begin", "(", "do_shuffle", "=", "False", ")", "\n", "if", "is_training", ":", "\n", "            ", "train_input_param", "=", "{", "'valid_data_paths'", ":", "valid_data_list", ",", "\n", "'train_data_paths'", ":", "train_data_list", ",", "\n", "'image_width'", ":", "img_width", ",", "\n", "'image_height'", ":", "img_width", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'seq_length'", ":", "seq_length", ",", "\n", "'injection_action'", ":", "injection_action", ",", "\n", "'input_data_type'", ":", "'float32'", ",", "\n", "'name'", ":", "dataset_name", "+", "' train iterator'", "}", "\n", "input_handle_train", "=", "datasets_map", "[", "dataset_name", "]", ".", "DataProcess", "(", "train_input_param", ")", "\n", "train_input_handle", "=", "input_handle_train", ".", "get_train_input_handle", "(", ")", "\n", "train_input_handle", ".", "begin", "(", "do_shuffle", "=", "True", ")", "\n", "return", "train_input_handle", ",", "test_input_handle", "\n", "", "else", ":", "\n", "            ", "return", "test_input_handle", "", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.__init__": [[7, 44], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_hidden", ",", "width", ",", "filter_size", ",", "stride", ",", "layer_norm", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "self", ".", "padding", "=", "filter_size", "//", "2", "\n", "self", ".", "_forget_bias", "=", "1.0", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "7", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "3", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.forward": [[46, 73], ["SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.conv_x", "SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.conv_h", "SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.conv_m", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.conv_o", "SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_t", ",", "h_t", ",", "c_t", ",", "m_t", ")", ":", "\n", "        ", "x_concat", "=", "self", ".", "conv_x", "(", "x_t", ")", "\n", "h_concat", "=", "self", ".", "conv_h", "(", "h_t", ")", "\n", "m_concat", "=", "self", ".", "conv_m", "(", "m_t", ")", "\n", "i_x", ",", "f_x", ",", "g_x", ",", "i_x_prime", ",", "f_x_prime", ",", "g_x_prime", ",", "o_x", "=", "torch", ".", "split", "(", "x_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_h", ",", "f_h", ",", "g_h", ",", "o_h", "=", "torch", ".", "split", "(", "h_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_m", ",", "f_m", ",", "g_m", "=", "torch", ".", "split", "(", "m_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "\n", "i_t", "=", "torch", ".", "sigmoid", "(", "i_x", "+", "i_h", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "f_x", "+", "f_h", "+", "self", ".", "_forget_bias", ")", "\n", "g_t", "=", "torch", ".", "tanh", "(", "g_x", "+", "g_h", ")", "\n", "\n", "delta_c", "=", "i_t", "*", "g_t", "\n", "c_new", "=", "f_t", "*", "c_t", "+", "delta_c", "\n", "\n", "i_t_prime", "=", "torch", ".", "sigmoid", "(", "i_x_prime", "+", "i_m", ")", "\n", "f_t_prime", "=", "torch", ".", "sigmoid", "(", "f_x_prime", "+", "f_m", "+", "self", ".", "_forget_bias", ")", "\n", "g_t_prime", "=", "torch", ".", "tanh", "(", "g_x_prime", "+", "g_m", ")", "\n", "\n", "delta_m", "=", "i_t_prime", "*", "g_t_prime", "\n", "m_new", "=", "f_t_prime", "*", "m_t", "+", "delta_m", "\n", "\n", "mem", "=", "torch", ".", "cat", "(", "(", "c_new", ",", "m_new", ")", ",", "1", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "o_x", "+", "o_h", "+", "self", ".", "conv_o", "(", "mem", ")", ")", "\n", "h_new", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "conv_last", "(", "mem", ")", ")", "\n", "\n", "return", "h_new", ",", "c_new", ",", "m_new", ",", "delta_c", ",", "delta_m", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.__init__": [[8, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_hidden", ",", "width", ",", "filter_size", ",", "stride", ",", "layer_norm", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "self", ".", "padding", "=", "filter_size", "//", "2", "\n", "self", ".", "_forget_bias", "=", "1.0", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "7", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "3", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.forward": [[53, 79], ["SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_x", "SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_h", "SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_a", "SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_m", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_o", "SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_t", ",", "h_t", ",", "c_t", ",", "m_t", ",", "a_t", ")", ":", "\n", "        ", "x_concat", "=", "self", ".", "conv_x", "(", "x_t", ")", "\n", "h_concat", "=", "self", ".", "conv_h", "(", "h_t", ")", "\n", "a_concat", "=", "self", ".", "conv_a", "(", "a_t", ")", "\n", "m_concat", "=", "self", ".", "conv_m", "(", "m_t", ")", "\n", "i_x", ",", "f_x", ",", "g_x", ",", "i_x_prime", ",", "f_x_prime", ",", "g_x_prime", ",", "o_x", "=", "torch", ".", "split", "(", "x_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_h", ",", "f_h", ",", "g_h", ",", "o_h", "=", "torch", ".", "split", "(", "h_concat", "*", "a_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_m", ",", "f_m", ",", "g_m", "=", "torch", ".", "split", "(", "m_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "\n", "i_t", "=", "torch", ".", "sigmoid", "(", "i_x", "+", "i_h", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "f_x", "+", "f_h", "+", "self", ".", "_forget_bias", ")", "\n", "g_t", "=", "torch", ".", "tanh", "(", "g_x", "+", "g_h", ")", "\n", "\n", "c_new", "=", "f_t", "*", "c_t", "+", "i_t", "*", "g_t", "\n", "\n", "i_t_prime", "=", "torch", ".", "sigmoid", "(", "i_x_prime", "+", "i_m", ")", "\n", "f_t_prime", "=", "torch", ".", "sigmoid", "(", "f_x_prime", "+", "f_m", "+", "self", ".", "_forget_bias", ")", "\n", "g_t_prime", "=", "torch", ".", "tanh", "(", "g_x_prime", "+", "g_m", ")", "\n", "\n", "m_new", "=", "f_t_prime", "*", "m_t", "+", "i_t_prime", "*", "g_t_prime", "\n", "\n", "mem", "=", "torch", ".", "cat", "(", "(", "c_new", ",", "m_new", ")", ",", "1", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "o_x", "+", "o_h", "+", "self", ".", "conv_o", "(", "mem", ")", ")", "\n", "h_new", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "conv_last", "(", "mem", ")", ")", "\n", "\n", "return", "h_new", ",", "c_new", ",", "m_new", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.__init__": [[7, 44], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_hidden", ",", "width", ",", "filter_size", ",", "stride", ",", "layer_norm", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "self", ".", "padding", "=", "filter_size", "//", "2", "\n", "self", ".", "_forget_bias", "=", "1.0", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "7", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "3", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.forward": [[45, 70], ["SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.conv_x", "SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.conv_h", "SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.conv_m", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.conv_o", "SpatioTemporalLSTMCell.SpatioTemporalLSTMCell.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_t", ",", "h_t", ",", "c_t", ",", "m_t", ")", ":", "\n", "        ", "x_concat", "=", "self", ".", "conv_x", "(", "x_t", ")", "\n", "h_concat", "=", "self", ".", "conv_h", "(", "h_t", ")", "\n", "m_concat", "=", "self", ".", "conv_m", "(", "m_t", ")", "\n", "i_x", ",", "f_x", ",", "g_x", ",", "i_x_prime", ",", "f_x_prime", ",", "g_x_prime", ",", "o_x", "=", "torch", ".", "split", "(", "x_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_h", ",", "f_h", ",", "g_h", ",", "o_h", "=", "torch", ".", "split", "(", "h_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_m", ",", "f_m", ",", "g_m", "=", "torch", ".", "split", "(", "m_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "\n", "i_t", "=", "torch", ".", "sigmoid", "(", "i_x", "+", "i_h", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "f_x", "+", "f_h", "+", "self", ".", "_forget_bias", ")", "\n", "g_t", "=", "torch", ".", "tanh", "(", "g_x", "+", "g_h", ")", "\n", "\n", "c_new", "=", "f_t", "*", "c_t", "+", "i_t", "*", "g_t", "\n", "\n", "i_t_prime", "=", "torch", ".", "sigmoid", "(", "i_x_prime", "+", "i_m", ")", "\n", "f_t_prime", "=", "torch", ".", "sigmoid", "(", "f_x_prime", "+", "f_m", "+", "self", ".", "_forget_bias", ")", "\n", "g_t_prime", "=", "torch", ".", "tanh", "(", "g_x_prime", "+", "g_m", ")", "\n", "\n", "m_new", "=", "f_t_prime", "*", "m_t", "+", "i_t_prime", "*", "g_t_prime", "\n", "\n", "mem", "=", "torch", ".", "cat", "(", "(", "c_new", ",", "m_new", ")", ",", "1", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "o_x", "+", "o_h", "+", "self", ".", "conv_o", "(", "mem", ")", ")", "\n", "h_new", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "conv_last", "(", "mem", ")", ")", "\n", "\n", "return", "h_new", ",", "c_new", ",", "m_new", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.__init__": [[8, 52], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channel", ",", "num_hidden", ",", "width", ",", "filter_size", ",", "stride", ",", "layer_norm", ")", ":", "\n", "        ", "super", "(", "SpatioTemporalLSTMCell", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "self", ".", "padding", "=", "filter_size", "//", "2", "\n", "self", ".", "_forget_bias", "=", "1.0", "\n", "if", "layer_norm", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "7", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "4", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", "*", "3", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", "nn", ".", "LayerNorm", "(", "[", "num_hidden", ",", "width", ",", "width", "]", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_x", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channel", ",", "num_hidden", "*", "7", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_h", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_a", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "4", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_m", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", ",", "num_hidden", "*", "3", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "self", ".", "conv_o", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "filter_size", ",", "stride", "=", "stride", ",", "padding", "=", "self", ".", "padding", ")", ",", "\n", ")", "\n", "", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "*", "2", ",", "num_hidden", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.layers.SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.forward": [[53, 81], ["SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_x", "SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_h", "SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_a", "SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_m", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_o", "SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell.conv_last"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x_t", ",", "h_t", ",", "c_t", ",", "m_t", ",", "a_t", ")", ":", "\n", "        ", "x_concat", "=", "self", ".", "conv_x", "(", "x_t", ")", "\n", "h_concat", "=", "self", ".", "conv_h", "(", "h_t", ")", "\n", "a_concat", "=", "self", ".", "conv_a", "(", "a_t", ")", "\n", "m_concat", "=", "self", ".", "conv_m", "(", "m_t", ")", "\n", "i_x", ",", "f_x", ",", "g_x", ",", "i_x_prime", ",", "f_x_prime", ",", "g_x_prime", ",", "o_x", "=", "torch", ".", "split", "(", "x_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_h", ",", "f_h", ",", "g_h", ",", "o_h", "=", "torch", ".", "split", "(", "h_concat", "*", "a_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "i_m", ",", "f_m", ",", "g_m", "=", "torch", ".", "split", "(", "m_concat", ",", "self", ".", "num_hidden", ",", "dim", "=", "1", ")", "\n", "\n", "i_t", "=", "torch", ".", "sigmoid", "(", "i_x", "+", "i_h", ")", "\n", "f_t", "=", "torch", ".", "sigmoid", "(", "f_x", "+", "f_h", "+", "self", ".", "_forget_bias", ")", "\n", "g_t", "=", "torch", ".", "tanh", "(", "g_x", "+", "g_h", ")", "\n", "\n", "delta_c", "=", "i_t", "*", "g_t", "\n", "c_new", "=", "f_t", "*", "c_t", "+", "delta_c", "\n", "\n", "i_t_prime", "=", "torch", ".", "sigmoid", "(", "i_x_prime", "+", "i_m", ")", "\n", "f_t_prime", "=", "torch", ".", "sigmoid", "(", "f_x_prime", "+", "f_m", "+", "self", ".", "_forget_bias", ")", "\n", "g_t_prime", "=", "torch", ".", "tanh", "(", "g_x_prime", "+", "g_m", ")", "\n", "\n", "delta_m", "=", "i_t_prime", "*", "g_t_prime", "\n", "m_new", "=", "f_t_prime", "*", "m_t", "+", "delta_m", "\n", "\n", "mem", "=", "torch", ".", "cat", "(", "(", "c_new", ",", "m_new", ")", ",", "1", ")", "\n", "o_t", "=", "torch", ".", "sigmoid", "(", "o_x", "+", "o_h", "+", "self", ".", "conv_o", "(", "mem", ")", ")", "\n", "h_new", "=", "o_t", "*", "torch", ".", "tanh", "(", "self", ".", "conv_last", "(", "mem", ")", ")", "\n", "\n", "return", "h_new", ",", "c_new", ",", "m_new", ",", "delta_c", ",", "delta_m", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.predrnn.RNN.__init__": [[9, 30], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "cell_list.append", "core.layers.SpatioTemporalLSTMCell.SpatioTemporalLSTMCell"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_hidden", ",", "configs", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "frame_channel", "=", "configs", ".", "patch_size", "*", "configs", ".", "patch_size", "*", "configs", ".", "img_channel", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "cell_list", "=", "[", "]", "\n", "\n", "width", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "MSE_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "in_channel", "=", "self", ".", "frame_channel", "if", "i", "==", "0", "else", "num_hidden", "[", "i", "-", "1", "]", "\n", "cell_list", ".", "append", "(", "\n", "SpatioTemporalLSTMCell", "(", "in_channel", ",", "num_hidden", "[", "i", "]", ",", "width", ",", "configs", ".", "filter_size", ",", "\n", "configs", ".", "stride", ",", "configs", ".", "layer_norm", ")", "\n", ")", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "self", ".", "frame_channel", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.predrnn.RNN.forward": [[31, 77], ["frames_tensor.permute().contiguous", "mask_true.permute().contiguous.permute().contiguous.permute().contiguous", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "predrnn.RNN.MSE_criterion", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "h_t.append", "c_t.append", "range", "predrnn.RNN.conv_last", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "frames_tensor.permute", "mask_true.permute().contiguous.permute().contiguous.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "frames_tensor", ",", "mask_true", ")", ":", "\n", "# [batch, length, height, width, channel] -> [batch, length, channel, height, width]", "\n", "        ", "frames", "=", "frames_tensor", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "mask_true", "=", "mask_true", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "batch", "=", "frames", ".", "shape", "[", "0", "]", "\n", "height", "=", "frames", ".", "shape", "[", "3", "]", "\n", "width", "=", "frames", ".", "shape", "[", "4", "]", "\n", "\n", "next_frames", "=", "[", "]", "\n", "h_t", "=", "[", "]", "\n", "c_t", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros", "(", "[", "batch", ",", "self", ".", "num_hidden", "[", "i", "]", ",", "height", ",", "width", "]", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "h_t", ".", "append", "(", "zeros", ")", "\n", "c_t", ".", "append", "(", "zeros", ")", "\n", "\n", "", "memory", "=", "torch", ".", "zeros", "(", "[", "batch", ",", "self", ".", "num_hidden", "[", "0", "]", ",", "height", ",", "width", "]", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "configs", ".", "total_length", "-", "1", ")", ":", "\n", "# reverse schedule sampling", "\n", "            ", "if", "self", ".", "configs", ".", "reverse_scheduled_sampling", "==", "1", ":", "\n", "                ", "if", "t", "==", "0", ":", "\n", "                    ", "net", "=", "frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                    ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "1", "]", "*", "frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "1", "]", ")", "*", "x_gen", "\n", "", "", "else", ":", "\n", "                ", "if", "t", "<", "self", ".", "configs", ".", "input_length", ":", "\n", "                    ", "net", "=", "frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                    ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "self", ".", "configs", ".", "input_length", "]", "*", "frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "self", ".", "configs", ".", "input_length", "]", ")", "*", "x_gen", "\n", "\n", "", "", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", "=", "self", ".", "cell_list", "[", "0", "]", "(", "net", ",", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", "=", "self", ".", "cell_list", "[", "i", "]", "(", "h_t", "[", "i", "-", "1", "]", ",", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ")", "\n", "\n", "", "x_gen", "=", "self", ".", "conv_last", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ")", "\n", "next_frames", ".", "append", "(", "x_gen", ")", "\n", "\n", "# [length, batch, channel, height, width] -> [batch, length, height, width, channel]", "\n", "", "next_frames", "=", "torch", ".", "stack", "(", "next_frames", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "MSE_criterion", "(", "next_frames", ",", "frames_tensor", "[", ":", ",", "1", ":", "]", ")", "\n", "return", "next_frames", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.__init__": [[7, 25], ["len", "torch.optim.Adam", "int", "Network().to", "ValueError", "model_factory.Model.network.parameters", "configs.num_hidden.split", "Network"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "configs", ")", ":", "\n", "        ", "self", ".", "configs", "=", "configs", "\n", "self", ".", "num_hidden", "=", "[", "int", "(", "x", ")", "for", "x", "in", "configs", ".", "num_hidden", ".", "split", "(", "','", ")", "]", "\n", "self", ".", "num_layers", "=", "len", "(", "self", ".", "num_hidden", ")", "\n", "networks_map", "=", "{", "\n", "'predrnn'", ":", "predrnn", ".", "RNN", ",", "\n", "'predrnn_v2'", ":", "predrnn_v2", ".", "RNN", ",", "\n", "'action_cond_predrnn'", ":", "action_cond_predrnn", ".", "RNN", ",", "\n", "'action_cond_predrnn_v2'", ":", "action_cond_predrnn_v2", ".", "RNN", ",", "\n", "}", "\n", "\n", "if", "configs", ".", "model_name", "in", "networks_map", ":", "\n", "            ", "Network", "=", "networks_map", "[", "configs", ".", "model_name", "]", "\n", "self", ".", "network", "=", "Network", "(", "self", ".", "num_layers", ",", "self", ".", "num_hidden", ",", "configs", ")", ".", "to", "(", "configs", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Name of network unknown %s'", "%", "configs", ".", "model_name", ")", "\n", "\n", "", "self", ".", "optimizer", "=", "Adam", "(", "self", ".", "network", ".", "parameters", "(", ")", ",", "lr", "=", "configs", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.save": [[26, 32], ["model_factory.Model.network.state_dict", "os.path.join", "torch.save", "print", "str"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.save"], ["", "def", "save", "(", "self", ",", "itr", ")", ":", "\n", "        ", "stats", "=", "{", "}", "\n", "stats", "[", "'net_param'", "]", "=", "self", ".", "network", ".", "state_dict", "(", ")", "\n", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "configs", ".", "save_dir", ",", "'model.ckpt'", "+", "'-'", "+", "str", "(", "itr", ")", ")", "\n", "torch", ".", "save", "(", "stats", ",", "checkpoint_path", ")", "\n", "print", "(", "\"save model to %s\"", "%", "checkpoint_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load": [[33, 37], ["print", "torch.load", "model_factory.Model.network.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.load"], ["", "def", "load", "(", "self", ",", "checkpoint_path", ")", ":", "\n", "        ", "print", "(", "'load model:'", ",", "checkpoint_path", ")", "\n", "stats", "=", "torch", ".", "load", "(", "checkpoint_path", ")", "\n", "self", ".", "network", ".", "load_state_dict", "(", "stats", "[", "'net_param'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.train": [[38, 46], ["torch.FloatTensor().to", "torch.FloatTensor().to", "model_factory.Model.optimizer.zero_grad", "model_factory.Model.network", "loss.backward", "model_factory.Model.optimizer.step", "loss.detach().cpu().numpy", "torch.FloatTensor", "torch.FloatTensor", "loss.detach().cpu", "loss.detach"], "methods", ["None"], ["", "def", "train", "(", "self", ",", "frames", ",", "mask", ")", ":", "\n", "        ", "frames_tensor", "=", "torch", ".", "FloatTensor", "(", "frames", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "mask_tensor", "=", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "next_frames", ",", "loss", "=", "self", ".", "network", "(", "frames_tensor", ",", "mask_tensor", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "return", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.model_factory.Model.test": [[47, 52], ["torch.FloatTensor().to", "torch.FloatTensor().to", "model_factory.Model.network", "next_frames.detach().cpu().numpy", "torch.FloatTensor", "torch.FloatTensor", "next_frames.detach().cpu", "next_frames.detach"], "methods", ["None"], ["", "def", "test", "(", "self", ",", "frames", ",", "mask", ")", ":", "\n", "        ", "frames_tensor", "=", "torch", ".", "FloatTensor", "(", "frames", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "mask_tensor", "=", "torch", ".", "FloatTensor", "(", "mask", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "next_frames", ",", "_", "=", "self", ".", "network", "(", "frames_tensor", ",", "mask_tensor", ")", "\n", "return", "next_frames", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn_v2.RNN.__init__": [[10, 64], ["torch.Module.__init__", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.SmoothL1Loss().cuda", "torch.SmoothL1Loss().cuda", "torch.SmoothL1Loss().cuda", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "cell_list.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "core.layers.SpatioTemporalLSTMCell_v2_action.SpatioTemporalLSTMCell"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_hidden", ",", "configs", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "conv_on_input", "=", "self", ".", "configs", ".", "conv_on_input", "\n", "self", ".", "res_on_conv", "=", "self", ".", "configs", ".", "res_on_conv", "\n", "self", ".", "patch_height", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "patch_width", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "patch_ch", "=", "configs", ".", "img_channel", "*", "(", "configs", ".", "patch_size", "**", "2", ")", "\n", "self", ".", "action_ch", "=", "configs", ".", "num_action_ch", "\n", "self", ".", "rnn_height", "=", "self", ".", "patch_height", "\n", "self", ".", "rnn_width", "=", "self", ".", "patch_width", "\n", "\n", "if", "self", ".", "configs", ".", "conv_on_input", "==", "1", ":", "\n", "            ", "self", ".", "rnn_height", "=", "self", ".", "patch_height", "//", "4", "\n", "self", ".", "rnn_width", "=", "self", ".", "patch_width", "//", "4", "\n", "self", ".", "conv_input1", "=", "nn", ".", "Conv2d", "(", "self", ".", "patch_ch", ",", "num_hidden", "[", "0", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "\n", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_input2", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "0", "]", "//", "2", ",", "num_hidden", "[", "0", "]", ",", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "\n", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "action_conv_input1", "=", "nn", ".", "Conv2d", "(", "self", ".", "action_ch", ",", "num_hidden", "[", "0", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "\n", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "action_conv_input2", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "0", "]", "//", "2", ",", "num_hidden", "[", "0", "]", ",", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "\n", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "deconv_output1", "=", "nn", ".", "ConvTranspose2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "num_hidden", "[", "num_layers", "-", "1", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "deconv_output2", "=", "nn", ".", "ConvTranspose2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", "//", "2", ",", "self", ".", "patch_ch", ",", "\n", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "cell_list", "=", "[", "]", "\n", "self", ".", "beta", "=", "configs", ".", "decouple_beta", "\n", "self", ".", "MSE_criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "norm_criterion", "=", "nn", ".", "SmoothL1Loss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "in_channel", "=", "self", ".", "patch_ch", "+", "self", ".", "action_ch", "if", "self", ".", "configs", ".", "conv_on_input", "==", "0", "else", "num_hidden", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "in_channel", "=", "num_hidden", "[", "i", "-", "1", "]", "\n", "", "cell_list", ".", "append", "(", "\n", "SpatioTemporalLSTMCell", "(", "in_channel", ",", "num_hidden", "[", "i", "]", ",", "self", ".", "rnn_width", ",", "\n", "configs", ".", "filter_size", ",", "configs", ".", "stride", ",", "configs", ".", "layer_norm", ")", "\n", ")", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "if", "self", ".", "configs", ".", "conv_on_input", "==", "0", ":", "\n", "            ", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "self", ".", "patch_ch", "+", "self", ".", "action_ch", ",", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "", "self", ".", "adapter", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn_v2.RNN.forward": [[65, 139], ["all_frames.permute().contiguous", "mask_true.permute().contiguous.permute().contiguous.permute().contiguous", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "h_t.append", "c_t.append", "delta_c_list.append", "delta_m_list.append", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "range", "range", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "action_cond_predrnn_v2.RNN.MSE_criterion", "all_frames.permute", "mask_true.permute().contiguous.permute().contiguous.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "action_cond_predrnn_v2.RNN.size", "action_cond_predrnn_v2.RNN.conv_input1", "action_cond_predrnn_v2.RNN.size", "action_cond_predrnn_v2.RNN.conv_input2", "action_cond_predrnn_v2.RNN.action_conv_input1", "action_cond_predrnn_v2.RNN.action_conv_input2", "action_cond_predrnn_v2.RNN.adapter().view", "action_cond_predrnn_v2.RNN.adapter().view", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean.append", "torch.mean.append", "torch.mean.append", "action_cond_predrnn_v2.RNN.conv_last", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "action_cond_predrnn_v2.RNN.adapter().view", "action_cond_predrnn_v2.RNN.adapter().view", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "action_cond_predrnn_v2.RNN.deconv_output1", "action_cond_predrnn_v2.RNN.deconv_output2", "action_cond_predrnn_v2.RNN.deconv_output1", "action_cond_predrnn_v2.RNN.deconv_output2", "action_cond_predrnn_v2.RNN.adapter", "action_cond_predrnn_v2.RNN.adapter", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "action_cond_predrnn_v2.RNN.adapter", "action_cond_predrnn_v2.RNN.adapter", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "all_frames", ",", "mask_true", ")", ":", "\n", "# [batch, length, height, width, channel] -> [batch, length, channel, height, width]", "\n", "        ", "frames", "=", "all_frames", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "input_frames", "=", "frames", "[", ":", ",", ":", ",", ":", "self", ".", "patch_ch", ",", ":", ",", ":", "]", "\n", "input_actions", "=", "frames", "[", ":", ",", ":", ",", "self", ".", "patch_ch", ":", ",", ":", ",", ":", "]", "\n", "mask_true", "=", "mask_true", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "next_frames", "=", "[", "]", "\n", "h_t", "=", "[", "]", "\n", "c_t", "=", "[", "]", "\n", "delta_c_list", "=", "[", "]", "\n", "delta_m_list", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros", "(", "\n", "[", "self", ".", "configs", ".", "batch_size", ",", "self", ".", "num_hidden", "[", "i", "]", ",", "self", ".", "rnn_height", ",", "self", ".", "rnn_width", "]", ")", ".", "cuda", "(", ")", "\n", "h_t", ".", "append", "(", "zeros", ")", "\n", "c_t", ".", "append", "(", "zeros", ")", "\n", "delta_c_list", ".", "append", "(", "zeros", ")", "\n", "delta_m_list", ".", "append", "(", "zeros", ")", "\n", "\n", "", "decouple_loss", "=", "[", "]", "\n", "memory", "=", "torch", ".", "zeros", "(", "[", "self", ".", "configs", ".", "batch_size", ",", "self", ".", "num_hidden", "[", "0", "]", ",", "self", ".", "rnn_height", ",", "self", ".", "rnn_width", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "configs", ".", "total_length", "-", "1", ")", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "net", "=", "input_frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "1", "]", "*", "input_frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "1", "]", ")", "*", "x_gen", "\n", "", "action", "=", "input_actions", "[", ":", ",", "t", "]", "\n", "\n", "if", "self", ".", "conv_on_input", "==", "1", ":", "\n", "                ", "net_shape1", "=", "net", ".", "size", "(", ")", "\n", "net", "=", "self", ".", "conv_input1", "(", "net", ")", "\n", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "input_net1", "=", "net", "\n", "", "net_shape2", "=", "net", ".", "size", "(", ")", "\n", "net", "=", "self", ".", "conv_input2", "(", "net", ")", "\n", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "input_net2", "=", "net", "\n", "", "action", "=", "self", ".", "action_conv_input1", "(", "action", ")", "\n", "action", "=", "self", ".", "action_conv_input2", "(", "action", ")", "\n", "\n", "", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ",", "delta_c", ",", "delta_m", "=", "self", ".", "cell_list", "[", "0", "]", "(", "net", ",", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ",", "action", ")", "\n", "delta_c_list", "[", "0", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_c", ")", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "delta_m_list", "[", "0", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_m", ")", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ",", "delta_c", ",", "delta_m", "=", "self", ".", "cell_list", "[", "i", "]", "(", "h_t", "[", "i", "-", "1", "]", ",", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ",", "action", ")", "\n", "delta_c_list", "[", "i", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_c", ")", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "delta_m_list", "[", "i", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_m", ")", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "decouple_loss", ".", "append", "(", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "\n", "torch", ".", "cosine_similarity", "(", "delta_c_list", "[", "i", "]", ",", "delta_m_list", "[", "i", "]", ",", "dim", "=", "2", ")", ")", ")", ")", "\n", "", "if", "self", ".", "conv_on_input", "==", "1", ":", "\n", "                ", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "x_gen", "=", "self", ".", "deconv_output1", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", "+", "input_net2", ",", "output_size", "=", "net_shape2", ")", "\n", "x_gen", "=", "self", ".", "deconv_output2", "(", "x_gen", "+", "input_net1", ",", "output_size", "=", "net_shape1", ")", "\n", "", "else", ":", "\n", "                    ", "x_gen", "=", "self", ".", "deconv_output1", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ",", "output_size", "=", "net_shape2", ")", "\n", "x_gen", "=", "self", ".", "deconv_output2", "(", "x_gen", ",", "output_size", "=", "net_shape1", ")", "\n", "", "", "else", ":", "\n", "                ", "x_gen", "=", "self", ".", "conv_last", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ")", "\n", "", "next_frames", ".", "append", "(", "x_gen", ")", "\n", "\n", "", "decouple_loss", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "decouple_loss", ",", "dim", "=", "0", ")", ")", "\n", "# [length, batch, channel, height, width] -> [batch, length, height, width, channel]", "\n", "next_frames", "=", "torch", ".", "stack", "(", "next_frames", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "MSE_criterion", "(", "next_frames", ",", "\n", "all_frames", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "next_frames", ".", "shape", "[", "4", "]", "]", ")", "+", "self", ".", "beta", "*", "decouple_loss", "\n", "next_frames", "=", "next_frames", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "self", ".", "patch_ch", "]", "\n", "return", "next_frames", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.predrnn_v2.RNN.__init__": [[11, 38], ["torch.Module.__init__", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "range", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "cell_list.append", "core.layers.SpatioTemporalLSTMCell_v2.SpatioTemporalLSTMCell"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_hidden", ",", "configs", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "visual", "=", "self", ".", "configs", ".", "visual", "\n", "self", ".", "visual_path", "=", "self", ".", "configs", ".", "visual_path", "\n", "\n", "self", ".", "frame_channel", "=", "configs", ".", "patch_size", "*", "configs", ".", "patch_size", "*", "configs", ".", "img_channel", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "cell_list", "=", "[", "]", "\n", "\n", "width", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "MSE_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "in_channel", "=", "self", ".", "frame_channel", "if", "i", "==", "0", "else", "num_hidden", "[", "i", "-", "1", "]", "\n", "cell_list", ".", "append", "(", "\n", "SpatioTemporalLSTMCell", "(", "in_channel", ",", "num_hidden", "[", "i", "]", ",", "width", ",", "configs", ".", "filter_size", ",", "\n", "configs", ".", "stride", ",", "configs", ".", "layer_norm", ")", "\n", ")", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "self", ".", "frame_channel", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "\n", "bias", "=", "False", ")", "\n", "# shared adapter", "\n", "adapter_num_hidden", "=", "num_hidden", "[", "0", "]", "\n", "self", ".", "adapter", "=", "nn", ".", "Conv2d", "(", "adapter_num_hidden", ",", "adapter_num_hidden", ",", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.predrnn_v2.RNN.forward": [[39, 118], ["frames_tensor.permute().contiguous", "mask_true.permute().contiguous.permute().contiguous.permute().contiguous", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "h_t.append", "c_t.append", "delta_c_list.append", "delta_m_list.append", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "range", "predrnn_v2.RNN.conv_last", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "core.utils.tsne.visualization", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "predrnn_v2.RNN.MSE_criterion", "frames_tensor.permute", "mask_true.permute().contiguous.permute().contiguous.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "predrnn_v2.RNN.adapter().view", "predrnn_v2.RNN.adapter().view", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.mean.append", "torch.mean.append", "torch.mean.append", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "delta_c.view", "delta_m.view", "predrnn_v2.RNN.adapter().view", "predrnn_v2.RNN.adapter().view", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "predrnn_v2.RNN.adapter", "predrnn_v2.RNN.adapter", "delta_c.view", "delta_m.view", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "predrnn_v2.RNN.adapter", "predrnn_v2.RNN.adapter", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity", "torch.cosine_similarity"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.utils.tsne.visualization"], ["", "def", "forward", "(", "self", ",", "frames_tensor", ",", "mask_true", ")", ":", "\n", "# [batch, length, height, width, channel] -> [batch, length, channel, height, width]", "\n", "        ", "frames", "=", "frames_tensor", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "mask_true", "=", "mask_true", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "batch", "=", "frames", ".", "shape", "[", "0", "]", "\n", "height", "=", "frames", ".", "shape", "[", "3", "]", "\n", "width", "=", "frames", ".", "shape", "[", "4", "]", "\n", "\n", "next_frames", "=", "[", "]", "\n", "h_t", "=", "[", "]", "\n", "c_t", "=", "[", "]", "\n", "delta_c_list", "=", "[", "]", "\n", "delta_m_list", "=", "[", "]", "\n", "if", "self", ".", "visual", ":", "\n", "            ", "delta_c_visual", "=", "[", "]", "\n", "delta_m_visual", "=", "[", "]", "\n", "\n", "", "decouple_loss", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros", "(", "[", "batch", ",", "self", ".", "num_hidden", "[", "i", "]", ",", "height", ",", "width", "]", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "h_t", ".", "append", "(", "zeros", ")", "\n", "c_t", ".", "append", "(", "zeros", ")", "\n", "delta_c_list", ".", "append", "(", "zeros", ")", "\n", "delta_m_list", ".", "append", "(", "zeros", ")", "\n", "\n", "", "memory", "=", "torch", ".", "zeros", "(", "[", "batch", ",", "self", ".", "num_hidden", "[", "0", "]", ",", "height", ",", "width", "]", ")", ".", "to", "(", "self", ".", "configs", ".", "device", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "configs", ".", "total_length", "-", "1", ")", ":", "\n", "\n", "            ", "if", "self", ".", "configs", ".", "reverse_scheduled_sampling", "==", "1", ":", "\n", "# reverse schedule sampling", "\n", "                ", "if", "t", "==", "0", ":", "\n", "                    ", "net", "=", "frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                    ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "1", "]", "*", "frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "1", "]", ")", "*", "x_gen", "\n", "", "", "else", ":", "\n", "# schedule sampling", "\n", "                ", "if", "t", "<", "self", ".", "configs", ".", "input_length", ":", "\n", "                    ", "net", "=", "frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                    ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "self", ".", "configs", ".", "input_length", "]", "*", "frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "self", ".", "configs", ".", "input_length", "]", ")", "*", "x_gen", "\n", "\n", "", "", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ",", "delta_c", ",", "delta_m", "=", "self", ".", "cell_list", "[", "0", "]", "(", "net", ",", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ")", "\n", "delta_c_list", "[", "0", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_c", ")", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "delta_m_list", "[", "0", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_m", ")", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "visual", ":", "\n", "                ", "delta_c_visual", ".", "append", "(", "delta_c", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "delta_m_visual", ".", "append", "(", "delta_m", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ",", "delta_c", ",", "delta_m", "=", "self", ".", "cell_list", "[", "i", "]", "(", "h_t", "[", "i", "-", "1", "]", ",", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ")", "\n", "delta_c_list", "[", "i", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_c", ")", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "delta_m_list", "[", "i", "]", "=", "F", ".", "normalize", "(", "self", ".", "adapter", "(", "delta_m", ")", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "dim", "=", "2", ")", "\n", "if", "self", ".", "visual", ":", "\n", "                    ", "delta_c_visual", ".", "append", "(", "delta_c", ".", "view", "(", "delta_c", ".", "shape", "[", "0", "]", ",", "delta_c", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "delta_m_visual", ".", "append", "(", "delta_m", ".", "view", "(", "delta_m", ".", "shape", "[", "0", "]", ",", "delta_m", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ")", "\n", "\n", "", "", "x_gen", "=", "self", ".", "conv_last", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ")", "\n", "next_frames", ".", "append", "(", "x_gen", ")", "\n", "# decoupling loss", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "decouple_loss", ".", "append", "(", "\n", "torch", ".", "mean", "(", "torch", ".", "abs", "(", "torch", ".", "cosine_similarity", "(", "delta_c_list", "[", "i", "]", ",", "delta_m_list", "[", "i", "]", ",", "dim", "=", "2", ")", ")", ")", ")", "\n", "\n", "", "", "if", "self", ".", "visual", ":", "\n", "# visualization of delta_c and delta_m", "\n", "            ", "delta_c_visual", "=", "torch", ".", "stack", "(", "delta_c_visual", ",", "dim", "=", "0", ")", "\n", "delta_m_visual", "=", "torch", ".", "stack", "(", "delta_m_visual", ",", "dim", "=", "0", ")", "\n", "visualization", "(", "self", ".", "configs", ".", "total_length", ",", "self", ".", "num_layers", ",", "delta_c_visual", ",", "delta_m_visual", ",", "self", ".", "visual_path", ")", "\n", "self", ".", "visual", "=", "0", "\n", "\n", "", "decouple_loss", "=", "torch", ".", "mean", "(", "torch", ".", "stack", "(", "decouple_loss", ",", "dim", "=", "0", ")", ")", "\n", "# [length, batch, channel, height, width] -> [batch, length, height, width, channel]", "\n", "next_frames", "=", "torch", ".", "stack", "(", "next_frames", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "MSE_criterion", "(", "next_frames", ",", "frames_tensor", "[", ":", ",", "1", ":", "]", ")", "+", "self", ".", "configs", ".", "decouple_beta", "*", "decouple_loss", "\n", "return", "next_frames", ",", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__": [[9, 61], ["torch.Module.__init__", "torch.MSELoss().cuda", "torch.MSELoss().cuda", "torch.SmoothL1Loss().cuda", "torch.SmoothL1Loss().cuda", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "cell_list.append", "torch.Conv2d", "torch.Conv2d", "torch.MSELoss", "torch.MSELoss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "core.layers.SpatioTemporalLSTMCell_action.SpatioTemporalLSTMCell"], "methods", ["home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_layers", ",", "num_hidden", ",", "configs", ")", ":", "\n", "        ", "super", "(", "RNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "configs", "=", "configs", "\n", "self", ".", "conv_on_input", "=", "self", ".", "configs", ".", "conv_on_input", "\n", "self", ".", "res_on_conv", "=", "self", ".", "configs", ".", "res_on_conv", "\n", "self", ".", "patch_height", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "patch_width", "=", "configs", ".", "img_width", "//", "configs", ".", "patch_size", "\n", "self", ".", "patch_ch", "=", "configs", ".", "img_channel", "*", "(", "configs", ".", "patch_size", "**", "2", ")", "\n", "self", ".", "action_ch", "=", "configs", ".", "num_action_ch", "\n", "self", ".", "rnn_height", "=", "self", ".", "patch_height", "\n", "self", ".", "rnn_width", "=", "self", ".", "patch_width", "\n", "\n", "if", "self", ".", "configs", ".", "conv_on_input", "==", "1", ":", "\n", "            ", "self", ".", "rnn_height", "=", "self", ".", "patch_height", "//", "4", "\n", "self", ".", "rnn_width", "=", "self", ".", "patch_width", "//", "4", "\n", "self", ".", "conv_input1", "=", "nn", ".", "Conv2d", "(", "self", ".", "patch_ch", ",", "num_hidden", "[", "0", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "\n", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "conv_input2", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "0", "]", "//", "2", ",", "num_hidden", "[", "0", "]", ",", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "\n", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "action_conv_input1", "=", "nn", ".", "Conv2d", "(", "self", ".", "action_ch", ",", "num_hidden", "[", "0", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "\n", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "action_conv_input2", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "0", "]", "//", "2", ",", "num_hidden", "[", "0", "]", ",", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "\n", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "deconv_output1", "=", "nn", ".", "ConvTranspose2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "num_hidden", "[", "num_layers", "-", "1", "]", "//", "2", ",", "\n", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "deconv_output2", "=", "nn", ".", "ConvTranspose2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", "//", "2", ",", "self", ".", "patch_ch", ",", "\n", "configs", ".", "filter_size", ",", "stride", "=", "2", ",", "padding", "=", "configs", ".", "filter_size", "//", "2", ",", "\n", "bias", "=", "False", ")", "\n", "", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "num_hidden", "=", "num_hidden", "\n", "cell_list", "=", "[", "]", "\n", "self", ".", "beta", "=", "configs", ".", "decouple_beta", "\n", "self", ".", "MSE_criterion", "=", "nn", ".", "MSELoss", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "norm_criterion", "=", "nn", ".", "SmoothL1Loss", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_layers", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "in_channel", "=", "self", ".", "patch_ch", "+", "self", ".", "action_ch", "if", "self", ".", "configs", ".", "conv_on_input", "==", "0", "else", "num_hidden", "[", "0", "]", "\n", "", "else", ":", "\n", "                ", "in_channel", "=", "num_hidden", "[", "i", "-", "1", "]", "\n", "", "cell_list", ".", "append", "(", "\n", "SpatioTemporalLSTMCell", "(", "in_channel", ",", "num_hidden", "[", "i", "]", ",", "self", ".", "rnn_width", ",", "\n", "configs", ".", "filter_size", ",", "configs", ".", "stride", ",", "configs", ".", "layer_norm", ")", "\n", ")", "\n", "", "self", ".", "cell_list", "=", "nn", ".", "ModuleList", "(", "cell_list", ")", "\n", "if", "self", ".", "configs", ".", "conv_on_input", "==", "0", ":", "\n", "            ", "self", ".", "conv_last", "=", "nn", ".", "Conv2d", "(", "num_hidden", "[", "num_layers", "-", "1", "]", ",", "self", ".", "patch_ch", "+", "self", ".", "action_ch", ",", "1", ",", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.thuml_predrnn-pytorch.models.action_cond_predrnn.RNN.forward": [[62, 122], ["all_frames.permute().contiguous", "mask_true.permute().contiguous.permute().contiguous.permute().contiguous", "range", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "torch.stack().permute().contiguous", "action_cond_predrnn.RNN.MSE_criterion", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "h_t.append", "c_t.append", "range", "torch.stack().permute().contiguous.append", "torch.stack().permute().contiguous.append", "all_frames.permute", "mask_true.permute().contiguous.permute().contiguous.permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "action_cond_predrnn.RNN.size", "action_cond_predrnn.RNN.conv_input1", "action_cond_predrnn.RNN.size", "action_cond_predrnn.RNN.conv_input2", "action_cond_predrnn.RNN.action_conv_input1", "action_cond_predrnn.RNN.action_conv_input2", "action_cond_predrnn.RNN.conv_last", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.stack().permute", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "action_cond_predrnn.RNN.deconv_output1", "action_cond_predrnn.RNN.deconv_output2", "action_cond_predrnn.RNN.deconv_output1", "action_cond_predrnn.RNN.deconv_output2", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "all_frames", ",", "mask_true", ")", ":", "\n", "# [batch, length, height, width, channel] -> [batch, length, channel, height, width]", "\n", "        ", "frames", "=", "all_frames", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "input_frames", "=", "frames", "[", ":", ",", ":", ",", ":", "self", ".", "patch_ch", ",", ":", ",", ":", "]", "\n", "input_actions", "=", "frames", "[", ":", ",", ":", ",", "self", ".", "patch_ch", ":", ",", ":", ",", ":", "]", "\n", "mask_true", "=", "mask_true", ".", "permute", "(", "0", ",", "1", ",", "4", ",", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "\n", "next_frames", "=", "[", "]", "\n", "h_t", "=", "[", "]", "\n", "c_t", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "            ", "zeros", "=", "torch", ".", "zeros", "(", "\n", "[", "self", ".", "configs", ".", "batch_size", ",", "self", ".", "num_hidden", "[", "i", "]", ",", "self", ".", "rnn_height", ",", "self", ".", "rnn_width", "]", ")", ".", "cuda", "(", ")", "\n", "h_t", ".", "append", "(", "zeros", ")", "\n", "c_t", ".", "append", "(", "zeros", ")", "\n", "\n", "", "memory", "=", "torch", ".", "zeros", "(", "[", "self", ".", "configs", ".", "batch_size", ",", "self", ".", "num_hidden", "[", "0", "]", ",", "self", ".", "rnn_height", ",", "self", ".", "rnn_width", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "configs", ".", "total_length", "-", "1", ")", ":", "\n", "            ", "if", "t", "==", "0", ":", "\n", "                ", "net", "=", "input_frames", "[", ":", ",", "t", "]", "\n", "", "else", ":", "\n", "                ", "net", "=", "mask_true", "[", ":", ",", "t", "-", "1", "]", "*", "input_frames", "[", ":", ",", "t", "]", "+", "(", "1", "-", "mask_true", "[", ":", ",", "t", "-", "1", "]", ")", "*", "x_gen", "\n", "", "action", "=", "input_actions", "[", ":", ",", "t", "]", "\n", "\n", "if", "self", ".", "conv_on_input", "==", "1", ":", "\n", "                ", "net_shape1", "=", "net", ".", "size", "(", ")", "\n", "net", "=", "self", ".", "conv_input1", "(", "net", ")", "\n", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "input_net1", "=", "net", "\n", "", "net_shape2", "=", "net", ".", "size", "(", ")", "\n", "net", "=", "self", ".", "conv_input2", "(", "net", ")", "\n", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "input_net2", "=", "net", "\n", "", "action", "=", "self", ".", "action_conv_input1", "(", "action", ")", "\n", "action", "=", "self", ".", "action_conv_input2", "(", "action", ")", "\n", "\n", "", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", "=", "self", ".", "cell_list", "[", "0", "]", "(", "net", ",", "h_t", "[", "0", "]", ",", "c_t", "[", "0", "]", ",", "memory", ",", "action", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_layers", ")", ":", "\n", "                ", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", "=", "self", ".", "cell_list", "[", "i", "]", "(", "h_t", "[", "i", "-", "1", "]", ",", "h_t", "[", "i", "]", ",", "c_t", "[", "i", "]", ",", "memory", ",", "action", ")", "\n", "\n", "", "if", "self", ".", "conv_on_input", "==", "1", ":", "\n", "                ", "if", "self", ".", "res_on_conv", "==", "1", ":", "\n", "                    ", "x_gen", "=", "self", ".", "deconv_output1", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", "+", "input_net2", ",", "output_size", "=", "net_shape2", ")", "\n", "x_gen", "=", "self", ".", "deconv_output2", "(", "x_gen", "+", "input_net1", ",", "output_size", "=", "net_shape1", ")", "\n", "", "else", ":", "\n", "                    ", "x_gen", "=", "self", ".", "deconv_output1", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ",", "output_size", "=", "net_shape2", ")", "\n", "x_gen", "=", "self", ".", "deconv_output2", "(", "x_gen", ",", "output_size", "=", "net_shape1", ")", "\n", "", "", "else", ":", "\n", "                ", "x_gen", "=", "self", ".", "conv_last", "(", "h_t", "[", "self", ".", "num_layers", "-", "1", "]", ")", "\n", "", "next_frames", ".", "append", "(", "x_gen", ")", "\n", "\n", "# [length, batch, channel, height, width] -> [batch, length, height, width, channel]", "\n", "", "next_frames", "=", "torch", ".", "stack", "(", "next_frames", ",", "dim", "=", "0", ")", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "4", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "loss", "=", "self", ".", "MSE_criterion", "(", "next_frames", ",", "all_frames", "[", ":", ",", "1", ":", ",", ":", ",", ":", ",", ":", "next_frames", ".", "shape", "[", "4", "]", "]", ")", "\n", "next_frames", "=", "next_frames", "[", ":", ",", ":", ",", ":", ",", ":", ",", ":", "self", ".", "patch_ch", "]", "\n", "return", "next_frames", ",", "loss", "\n", "", "", ""]]}