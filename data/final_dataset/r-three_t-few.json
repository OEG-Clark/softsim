{"home.repos.pwc.inspect_result.r-three_t-few.src.pl_train.get_transformer": [[16, 23], ["transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSeq2SeqLM.from_pretrained", "src.models.modify_model.modify_transformer"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.models.modify_model.modify_transformer"], ["def", "get_transformer", "(", "config", ")", ":", "\n", "    ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "config", ".", "origin_model", ")", "\n", "model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "config", ".", "origin_model", ",", "low_cpu_mem_usage", "=", "True", ")", "\n", "\n", "tokenizer", ".", "model_max_length", "=", "config", ".", "max_seq_len", "\n", "model", "=", "modify_transformer", "(", "model", ",", "config", ")", "\n", "return", "tokenizer", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.src.pl_train.main": [[25, 58], ["pl_train.get_transformer", "src.data.get_dataset_reader", "src.models.EncoderDecoder.EncoderDecoder", "pytorch_lightning.loggers.TensorBoardLogger", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "src.data.PretrainDataModule", "src.data.FinetuneDataModule", "torch.cuda.device_count"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.test_icl.get_transformer", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.get_dataset_reader"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "\"\"\"\n    Trains the model\n\n    :param config:\n    :return:\n    \"\"\"", "\n", "\n", "tokenizer", ",", "model", "=", "get_transformer", "(", "config", ")", "\n", "dataset_reader", "=", "get_dataset_reader", "(", "config", ")", "\n", "if", "config", ".", "dataset", "==", "\"T0Mixture\"", ":", "\n", "        ", "datamodule", "=", "PretrainDataModule", "(", "config", ",", "tokenizer", ",", "dataset_reader", ")", "\n", "", "else", ":", "\n", "        ", "datamodule", "=", "FinetuneDataModule", "(", "config", ",", "tokenizer", ",", "dataset_reader", ")", "\n", "", "model", "=", "EncoderDecoder", "(", "config", ",", "tokenizer", ",", "model", ",", "dataset_reader", ")", "\n", "logger", "=", "TensorBoardLogger", "(", "config", ".", "exp_dir", ",", "name", "=", "\"log\"", ")", "\n", "\n", "trainer", "=", "Trainer", "(", "\n", "enable_checkpointing", "=", "False", ",", "\n", "gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\n", "precision", "=", "config", ".", "compute_precision", ",", "\n", "amp_backend", "=", "\"native\"", ",", "\n", "strategy", "=", "config", ".", "compute_strategy", "if", "config", ".", "compute_strategy", "!=", "\"none\"", "else", "None", ",", "\n", "logger", "=", "logger", ",", "\n", "log_every_n_steps", "=", "4", ",", "\n", "max_steps", "=", "config", ".", "num_steps", ",", "\n", "min_steps", "=", "config", ".", "num_steps", ",", "\n", "num_sanity_val_steps", "=", "-", "1", "if", "config", ".", "eval_before_training", "else", "0", ",", "\n", "check_val_every_n_epoch", "=", "config", ".", "eval_epoch_interval", ",", "\n", "accumulate_grad_batches", "=", "config", ".", "grad_accum_factor", ",", "\n", "gradient_clip_val", "=", "config", ".", "grad_clip_norm", ",", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "datamodule", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.src.intrinsic_said_setup.setup_package": [[9, 22], ["setuptools.setup", "torch.utils.cpp_extension.CUDAExtension"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDataModule.setup"], ["def", "setup_package", "(", ")", ":", "\n", "    ", "long_description", "=", "\"nicl\"", "\n", "setuptools", ".", "setup", "(", "\n", "ext_modules", "=", "[", "\n", "CUDAExtension", "(", "\n", "\"src.models.fwh_cuda\"", ",", "\n", "sources", "=", "[", "\n", "\"src/models/fwh_cuda/fwh_cpp.cpp\"", ",", "\n", "\"src/models/fwh_cuda/fwh_cu.cu\"", ",", "\n", "]", ",", "\n", ")", "\n", "]", ",", "\n", "cmdclass", "=", "{", "\"build_ext\"", ":", "BuildExtension", "}", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine.__init__": [[12, 17], ["icl_engines.ICLEngine._prepare_data"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._prepare_data"], ["    ", "def", "__init__", "(", "self", ",", "ticl_config", ",", "dataset_reader", ",", "tokenizer", ")", ":", "\n", "        ", "self", ".", "config", "=", "ticl_config", "\n", "self", ".", "dataset_reader", "=", "dataset_reader", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "train_loader", ",", "self", ".", "eval_loader", ",", "self", ".", "boilerplates", "=", "self", ".", "_prepare_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine.run": [[18, 23], ["tqdm.tqdm.tqdm", "icl_engines.ICLEngine._evaluate", "outputs.append", "icl_engines.ICLEngine._predict"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._evaluate", "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._predict"], ["", "def", "run", "(", "self", ",", "model", ")", ":", "\n", "        ", "outputs", "=", "[", "]", "\n", "for", "batch", "in", "tqdm", "(", "self", ".", "eval_loader", ")", ":", "\n", "            ", "outputs", ".", "append", "(", "self", ".", "_predict", "(", "model", ",", "batch", ")", ")", "\n", "", "self", ".", "_evaluate", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._prepare_data": [[24, 71], ["src.data.FinetuneDatasetWithTemplate", "torch.utils.data.DataLoader", "print", "print", "src.data.FinetuneDatasetWithTemplate", "torch.utils.data.DataLoader", "icl_engines.ICLEngine.dataset_reader.read_orig_dataset", "icl_engines.ICLEngine.dataset_reader.get_eval_template", "icl_engines.ICLEngine.tokenizer().input_ids.to", "icl_engines.ICLEngine._prepare_data.get_tokens"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.get_eval_template"], ["", "def", "_prepare_data", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "num_shot", ">", "0", ":", "\n", "            ", "self", ".", "train_dataset", "=", "FinetuneDatasetWithTemplate", "(", "\n", "self", ".", "dataset_reader", ".", "read_orig_dataset", "(", "\"train\"", ")", ",", "\n", "self", ".", "dataset_reader", ".", "get_train_template", "(", ")", ",", "\n", "self", ".", "tokenizer", ",", "\n", "add_special_tokens", "=", "False", ",", "\n", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "num_shot", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "create_collate_fn", "(", "self", ".", "tokenizer", ".", "pad_token_id", ",", "pretrain", "=", "False", ")", ",", "\n", "num_workers", "=", "min", "(", "[", "self", ".", "config", ".", "num_shot", ",", "self", ".", "config", ".", "num_workers", "]", ")", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "train_loader", "=", "None", "\n", "\n", "", "self", ".", "eval_dataset", "=", "FinetuneDatasetWithTemplate", "(", "\n", "self", ".", "dataset_reader", ".", "read_orig_dataset", "(", "\"validation\"", ")", ",", "\n", "self", ".", "dataset_reader", ".", "get_eval_template", "(", ")", ",", "\n", "self", ".", "tokenizer", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", ")", "\n", "eval_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "eval_dataset", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "create_collate_fn", "(", "self", ".", "tokenizer", ".", "pad_token_id", ",", "pretrain", "=", "False", ")", ",", "\n", "num_workers", "=", "min", "(", "[", "self", ".", "config", ".", "eval_batch_size", ",", "self", ".", "config", ".", "num_workers", "]", ")", ",", "\n", ")", "\n", "\n", "def", "get_tokens", "(", "text", ")", ":", "\n", "# force convert to long in case of empty list", "\n", "            ", "return", "self", ".", "tokenizer", "(", "text", ",", "add_special_tokens", "=", "False", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", ".", "to", "(", "torch", ".", "long", ")", "\n", "\n", "", "boilerplates", "=", "{", "\n", "\"context_start\"", ":", "get_tokens", "(", "self", ".", "config", ".", "context_start", ")", ",", "\n", "\"context_input_target_separator\"", ":", "get_tokens", "(", "self", ".", "config", ".", "context_input_target_separator", ")", ",", "\n", "\"context_example_separator\"", ":", "get_tokens", "(", "self", ".", "config", ".", "context_example_separator", ")", ",", "\n", "\"context_end\"", ":", "get_tokens", "(", "self", ".", "config", ".", "context_end", ")", ",", "\n", "}", "\n", "print", "(", "\"Boilerplates\"", ")", "\n", "print", "(", "boilerplates", ")", "\n", "\n", "return", "train_loader", ",", "eval_loader", ",", "boilerplates", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._evaluate": [[72, 84], ["icl_engines.ICLEngine.dataset_reader.compute_metric", "print", "print", "batch_output.items", "json.dumps", "open", "f.write", "outputs[].keys", "accumulated[].extend"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.compute_metric"], ["", "def", "_evaluate", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "accumulated", "=", "{", "key", ":", "[", "]", "for", "key", "in", "outputs", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "for", "batch_output", "in", "outputs", ":", "\n", "            ", "for", "key", ",", "value", "in", "batch_output", ".", "items", "(", ")", ":", "\n", "                ", "accumulated", "[", "key", "]", ".", "extend", "(", "value", ")", "\n", "", "", "metrics", "=", "self", ".", "dataset_reader", ".", "compute_metric", "(", "accumulated", ")", "\n", "\n", "result_str", "=", "json", ".", "dumps", "(", "metrics", ")", "+", "\"\\n\"", "\n", "with", "open", "(", "self", ".", "config", ".", "dev_score_file", ",", "\"a+\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "result_str", ")", "\n", "", "print", "(", "\"\\n\"", "+", "result_str", ")", "\n", "print", "(", "f\"Results saved to {self.config.dev_score_file}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._get_context": [[85, 123], ["torch.zeros", "next", "torch.cat", "torch.cat", "iter", "icl_engines.ICLEngine._left_align_tensor", "icl_engines.ICLEngine.boilerplates[].repeat", "icl_engines.ICLEngine.boilerplates[].repeat", "torch.cat.flatten", "icl_engines.ICLEngine.boilerplates[].repeat", "icl_engines.ICLEngine.boilerplates[].repeat", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._left_align_tensor"], ["", "def", "_get_context", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "train_loader", "is", "None", ":", "\n", "            ", "context", "=", "torch", ".", "zeros", "(", "(", "1", ",", "0", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "", "else", ":", "\n", "            ", "context_batch", "=", "next", "(", "iter", "(", "self", ".", "train_loader", ")", ")", "\n", "\n", "if", "self", ".", "config", ".", "icl_modeling", "==", "\"channel\"", ":", "\n", "                ", "context_batch", "[", "\"input_ids\"", "]", ",", "context_batch", "[", "\"target_ids\"", "]", "=", "(", "\n", "context_batch", "[", "\"target_ids\"", "]", ",", "\n", "context_batch", "[", "\"input_ids\"", "]", ",", "\n", ")", "\n", "", "context_array", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "context_batch", "[", "\"input_ids\"", "]", ",", "\n", "self", ".", "boilerplates", "[", "\"context_input_target_separator\"", "]", ".", "repeat", "(", "self", ".", "config", ".", "num_shot", ",", "1", ")", ",", "\n", "context_batch", "[", "\"target_ids\"", "]", ",", "\n", "self", ".", "boilerplates", "[", "\"context_example_separator\"", "]", ".", "repeat", "(", "self", ".", "config", ".", "num_shot", ",", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "icl_method", "==", "\"concat\"", ":", "\n", "                ", "context", "=", "context_array", ".", "flatten", "(", ")", "[", "None", ",", ":", "]", "\n", "", "elif", "self", ".", "config", ".", "icl_method", "==", "\"ensemble\"", ":", "\n", "                ", "context", "=", "context_array", "\n", "", "context", "=", "self", ".", "_left_align_tensor", "(", "context", ")", "[", ":", ",", ":", "self", ".", "config", ".", "max_context_len", "]", "\n", "\n", "context", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "boilerplates", "[", "\"context_start\"", "]", ".", "repeat", "(", "context", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "context", ",", "\n", "self", ".", "boilerplates", "[", "\"context_end\"", "]", ".", "repeat", "(", "context", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "", "return", "context", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._predict": [[124, 196], ["icl_engines.ICLEngine._get_context", "icl_engines.ICLEngine.size", "icl_engines.ICLEngine._left_align_tensor", "torch.cat.flatten", "model", "choices_scores.view.view.view", "batch[].size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.flatten", "model", "choices_votes.max", "choices_scores.view.view.squeeze().min", "prediction.tolist", "batch[].tolist", "context[].expand", "context[].expand.flatten", "model.view", "context[].expand", "answer_choices_ids[].expand", "[].expand", "input_ids[].expand", "context[].expand", "input_ids[].expand", "[].expand", "answer_choices_ids[].expand", "choices_scores.view.view.squeeze", "choices_scores.view.view.min"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._get_context", "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._left_align_tensor"], ["", "def", "_predict", "(", "self", ",", "model", ",", "batch", ")", ":", "\n", "        ", "context", "=", "self", ".", "_get_context", "(", ")", "# (1 or num_shot, context_len)", "\n", "input_ids", "=", "batch", "[", "\"input_ids\"", "]", "# (bs, seq_len)", "\n", "answer_choices_ids", "=", "batch", "[", "\"answer_choices_ids\"", "]", "# (bs, num_choices, seq_len)", "\n", "\n", "bs", ",", "num_choices", "=", "batch", "[", "\"answer_choices_ids\"", "]", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "num_context", "=", "context", ".", "size", "(", "0", ")", "\n", "\n", "if", "self", ".", "config", ".", "icl_modeling", "==", "\"channel\"", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "context", "[", "None", ",", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", ")", ",", "\n", "answer_choices_ids", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "3", ",", "\n", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "boilerplates", "[", "\"context_input_target_separator\"", "]", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "\n", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", "\n", ")", ",", "\n", "input_ids", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "3", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "context", "[", "None", ",", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "1", ",", "-", "1", ")", ",", "\n", "input_ids", "[", ":", ",", "None", ",", "None", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "1", ",", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "3", ",", "\n", ")", "\n", "outputs", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "boilerplates", "[", "\"context_input_target_separator\"", "]", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "\n", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", "\n", ")", ",", "\n", "answer_choices_ids", "[", ":", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "num_choices", ",", "-", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "3", ",", "\n", ")", "\n", "\n", "if", "self", ".", "config", ".", "icl_modeling", "==", "\"calibration\"", ":", "\n", "                ", "inputs_null", "=", "context", "[", "None", ",", ":", ",", "None", ",", ":", "]", ".", "expand", "(", "bs", ",", "num_context", ",", "1", ",", "-", "1", ")", "\n", "batch", "[", "\"input_ids_null\"", "]", "=", "inputs_null", ".", "flatten", "(", "start_dim", "=", "0", ",", "end_dim", "=", "-", "3", ")", "\n", "\n", "", "", "batch", "[", "\"input_ids\"", "]", "=", "self", ".", "_left_align_tensor", "(", "inputs", ".", "flatten", "(", "start_dim", "=", "0", ",", "end_dim", "=", "-", "3", ")", ")", "\n", "batch", "[", "\"answer_choices_ids\"", "]", "=", "outputs", ".", "flatten", "(", "start_dim", "=", "0", ",", "end_dim", "=", "-", "3", ")", "\n", "\n", "choices_scores", "=", "model", "(", "batch", ")", "\n", "# _, pred = choices_scores.view(bs, num_context, num_choices).min(dim=2)", "\n", "# acc = pred == batch[\"labels\"]", "\n", "# print(acc)", "\n", "# self._temp.append(acc)", "\n", "choices_scores", "=", "choices_scores", ".", "view", "(", "bs", ",", "num_context", ",", "num_choices", ")", "\n", "\n", "if", "self", ".", "config", ".", "icl_modeling", "==", "\"calibration\"", ":", "\n", "            ", "batch", "[", "\"input_ids\"", "]", "=", "batch", "[", "\"input_ids_null\"", "]", "\n", "null_scores", "=", "model", "(", "batch", ")", "\n", "choices_scores", "=", "choices_scores", "-", "null_scores", ".", "view", "(", "bs", ",", "num_context", ",", "num_choices", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "icl_method", "==", "\"ensemble\"", ":", "\n", "            ", "choices_votes", "=", "(", "choices_scores", "<=", "choices_scores", ".", "min", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ".", "float", "(", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "_", ",", "prediction", "=", "choices_votes", ".", "max", "(", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "            ", "_", ",", "prediction", "=", "choices_scores", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "min", "(", "dim", "=", "-", "1", ")", "\n", "\n", "", "return", "{", "\n", "\"prediction\"", ":", "prediction", ".", "tolist", "(", ")", ",", "\n", "\"label\"", ":", "batch", "[", "\"labels\"", "]", ".", "tolist", "(", ")", ",", "\n", "\"idx\"", ":", "batch", "[", "\"idx\"", "]", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine._left_align_tensor": [[198, 207], ["tensor_mask.nonzero", "output.to.to.to", "output.to.to.nonzero", "output.to.to.fill_", "torch.arange().expand_as", "tensor_mask.sum", "torch.arange", "tensor.size"], "methods", ["None"], ["", "def", "_left_align_tensor", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "tensor_mask", "=", "tensor", "!=", "self", ".", "tokenizer", ".", "pad_token_id", "\n", "tensor_nonpad", "=", "tensor_mask", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "output", "=", "torch", ".", "arange", "(", "tensor", ".", "size", "(", "-", "1", ")", ")", ".", "expand_as", "(", "tensor", ")", "<", "(", "tensor_mask", ")", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "output", "=", "output", ".", "to", "(", "tensor", ".", "dtype", ")", "\n", "output_nonzero", "=", "output", ".", "nonzero", "(", "as_tuple", "=", "True", ")", "\n", "output", ".", "fill_", "(", "self", ".", "tokenizer", ".", "pad_token_id", ")", "\n", "output", "[", "output_nonzero", "]", "=", "tensor", "[", "tensor_nonpad", "]", "\n", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.get_icl_engine": [[7, 9], ["icl_engines.ICLEngine"], "function", ["None"], ["def", "get_icl_engine", "(", "ticl_config", ",", "dataset_reader", ",", "tokenizer", ")", ":", "\n", "    ", "return", "ICLEngine", "(", "ticl_config", ",", "dataset_reader", ",", "tokenizer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.test_icl.get_transformer": [[15, 21], ["transformers.AutoTokenizer.from_pretrained", "transformers.AutoModelForSeq2SeqLM.from_pretrained"], "function", ["None"], ["def", "get_transformer", "(", "ticl_config", ")", ":", "\n", "    ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "ticl_config", ".", "pretrained_model", ")", "\n", "model", "=", "AutoModelForSeq2SeqLM", ".", "from_pretrained", "(", "ticl_config", ".", "pretrained_model", ",", "low_cpu_mem_usage", "=", "True", ")", "\n", "\n", "tokenizer", ".", "model_max_length", "=", "ticl_config", ".", "max_seq_len", "\n", "return", "tokenizer", ",", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.test_icl.main": [[23, 49], ["print", "test_icl.get_transformer", "src.ticl.model.InferenceModel", "print", "src.data.get_dataset_reader", "src.utils.util.set_seeds", "src.ticl.icl_engines.get_icl_engine", "print", "src.ticl.icl_engines.get_icl_engine.run"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.test_icl.get_transformer", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.get_dataset_reader", "home.repos.pwc.inspect_result.r-three_t-few.utils.util.set_seeds", "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.get_icl_engine", "home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine.run"], ["", "def", "main", "(", "ticl_config", ")", ":", "\n", "    ", "\"\"\"\n    Trains the model\n\n    :param config:\n    :return:\n    \"\"\"", "\n", "\n", "print", "(", "\"Load Model\"", ")", "\n", "tokenizer", ",", "model", "=", "get_transformer", "(", "ticl_config", ")", "\n", "model", "=", "InferenceModel", "(", "\n", "model", "=", "model", ",", "\n", "tokenizer", "=", "tokenizer", ",", "\n", "length_norm", "=", "ticl_config", ".", "length_norm", ",", "\n", "compute_precision", "=", "ticl_config", ".", "compute_precision", ",", "\n", "compute_device", "=", "ticl_config", ".", "compute_device", ",", "\n", "compute_batch_size", "=", "ticl_config", ".", "compute_batch_size", ",", "\n", ")", "\n", "\n", "print", "(", "\"Prepare ICL Data\"", ")", "\n", "dataset_reader", "=", "get_dataset_reader", "(", "ticl_config", ")", "\n", "set_seeds", "(", "ticl_config", ".", "a_number_between_1_and_100", ")", "\n", "icl_engine", "=", "get_icl_engine", "(", "ticl_config", ",", "dataset_reader", ",", "tokenizer", ")", "\n", "\n", "print", "(", "\"Start Eval\"", ")", "\n", "icl_engine", ".", "run", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.model.InferenceModel.__init__": [[6, 15], ["model.InferenceModel.model.eval", "model.InferenceModel._model_to_device"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.model.InferenceModel._model_to_device"], ["    ", "def", "__init__", "(", "self", ",", "model", ",", "tokenizer", ",", "length_norm", ",", "compute_precision", ",", "compute_device", ",", "compute_batch_size", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "length_norm", "=", "length_norm", "\n", "self", ".", "compute_precision", "=", "compute_precision", "\n", "self", ".", "compute_device", "=", "compute_device", "\n", "self", ".", "compute_batch_size", "=", "compute_batch_size", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "_model_to_device", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.model.InferenceModel.__call__": [[16, 59], ["torch.cross_entropy().view().sum.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "input_ids.to.to.to", "choices_ids.to.to.to", "input_ids.to.to.flatten", "choices_ids.to.to.flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.InferenceModel.model", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "choices_ids.to.to.size", "input_ids.to.to.size", "model.InferenceModel.model.encoder", "attention_mask.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze().expand().flatten", "encoder_hidden_states.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze().expand().flatten", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross_entropy().view", "torch.cross_entropy().view", "attention_mask.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze().expand", "encoder_hidden_states.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze().expand", "torch.cross_entropy", "torch.cross_entropy", "attention_mask.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze", "encoder_hidden_states.unsqueeze().expand().flatten.unsqueeze().expand().flatten.unsqueeze", "model.InferenceModel.logits.flatten", "lm_target.flatten"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "batch", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input_ids", ",", "choices_ids", "=", "batch", "[", "\"input_ids\"", "]", ",", "batch", "[", "\"answer_choices_ids\"", "]", "\n", "input_ids", "=", "input_ids", ".", "to", "(", "self", ".", "model", ".", "encoder", ".", "device", ")", "\n", "choices_ids", "=", "choices_ids", ".", "to", "(", "self", ".", "model", ".", "decoder", ".", "device", ")", "\n", "\n", "# TODO: use compute_batch_size if CUDA OOM", "\n", "bs", ",", "num_choices", "=", "choices_ids", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "flat_input_ids", "=", "input_ids", ".", "flatten", "(", "0", ",", "1", ")", "\n", "choices_sharing_inputs", "=", "input_ids", ".", "size", "(", "1", ")", "!=", "num_choices", "\n", "\n", "attention_mask", "=", "(", "flat_input_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "float", "(", ")", "\n", "# (bs * (1 or num_choices), max_seq_len)", "\n", "encoder_hidden_states", "=", "self", ".", "model", ".", "encoder", "(", "input_ids", "=", "flat_input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "# (bs * (1 or num_choices), max_seq_len, d_model)", "\n", "if", "choices_sharing_inputs", ":", "\n", "                ", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "num_choices", ",", "-", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "# (bs * num_choices, max_seq_len)", "\n", "encoder_hidden_states", "=", "(", "\n", "encoder_hidden_states", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "expand", "(", "-", "1", ",", "num_choices", ",", "-", "1", ",", "-", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", ")", "\n", "# (bs * num_choices, max_seq_len, d_model)", "\n", "\n", "", "flat_choices_ids", "=", "choices_ids", ".", "flatten", "(", "0", ",", "1", ")", "\n", "decoder_input_ids", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "flat_choices_ids", "[", ":", ",", ":", "1", "]", ")", ",", "flat_choices_ids", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "lm_target", "=", "flat_choices_ids", "-", "100", "*", "(", "flat_choices_ids", "==", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "long", "(", ")", "\n", "# (bs * num_choices, max_seq_len)", "\n", "\n", "model_output", "=", "self", ".", "model", "(", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "encoder_outputs", "=", "[", "encoder_hidden_states", "]", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", ")", "\n", "choices_scores", "=", "(", "\n", "F", ".", "cross_entropy", "(", "model_output", ".", "logits", ".", "flatten", "(", "0", ",", "1", ")", ",", "lm_target", ".", "flatten", "(", "0", ",", "1", ")", ",", "reduction", "=", "\"none\"", ")", "\n", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ")", "\n", "if", "self", ".", "length_norm", ":", "\n", "                ", "choices_scores", "=", "choices_scores", "/", "(", "choices_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "# (bs, num_choices)", "\n", "\n", "", "", "return", "choices_scores", ".", "cpu", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.ticl.model.InferenceModel._model_to_device": [[60, 71], ["model.InferenceModel.model.to", "model.InferenceModel.model.parallelize", "model.InferenceModel.model.to", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "model.InferenceModel.model.to"], "methods", ["None"], ["", "def", "_model_to_device", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "compute_precision", "==", "\"32\"", ":", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "compute_precision", "==", "\"16\"", ":", "\n", "            ", "self", ".", "model", ".", "to", "(", "torch", ".", "float16", ")", "\n", "", "elif", "self", ".", "compute_precision", "==", "\"bf16\"", ":", "\n", "            ", "self", ".", "model", ".", "to", "(", "torch", ".", "bfloat16", ")", "\n", "\n", "", "self", ".", "model", ".", "to", "(", "self", ".", "compute_device", ")", "\n", "if", "self", ".", "compute_device", "==", "\"cuda\"", "and", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", ".", "parallelize", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.__init__": [[7, 123], ["Config.Config.set_exp_dir", "filenames.split", "Config.Config.update_kwargs", "Config.Config.update_kwargs", "os.path.exists", "os.path.join", "json.load", "os.getenv", "open"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.set_exp_dir", "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.update_kwargs", "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.update_kwargs"], ["    ", "def", "__init__", "(", "self", ",", "filenames", "=", "None", ",", "kwargs", "=", "None", ")", ":", "\n", "# Experiment configs", "\n", "        ", "self", ".", "exp_dir", "=", "None", "\n", "self", ".", "exp_name", "=", "None", "\n", "self", ".", "allow_skip_exp", "=", "True", "\n", "self", ".", "seed", "=", "42", "\n", "\n", "# Model Configs", "\n", "self", ".", "model", "=", "\"EncDec\"", "\n", "self", ".", "max_seq_len", "=", "256", "\n", "self", ".", "origin_model", "=", "\"bigscience/T0_3B\"", "\n", "self", ".", "load_weight", "=", "\"\"", "\n", "\n", "# Dataset Configs", "\n", "self", ".", "dataset", "=", "\"sst2\"", "\n", "self", ".", "few_shot", "=", "True", "\n", "self", ".", "num_shot", "=", "16", "\n", "self", ".", "few_shot_random_seed", "=", "100", "\n", "self", ".", "train_template_idx", "=", "-", "1", "\n", "self", ".", "eval_template_idx", "=", "-", "1", "\n", "self", ".", "batch_size", "=", "8", "\n", "self", ".", "eval_batch_size", "=", "16", "\n", "self", ".", "num_workers", "=", "8", "\n", "self", ".", "change_hswag_templates", "=", "False", "\n", "self", ".", "raft_cross_validation", "=", "True", "\n", "self", ".", "raft_validation_start", "=", "0", "\n", "self", ".", "raft_labels_in_input_string", "=", "\"comma\"", "\n", "self", ".", "cleaned_answer_choices_b77", "=", "False", "\n", "\n", "# Compute backend configs", "\n", "self", ".", "compute_precision", "=", "\"bf16\"", "\n", "self", ".", "compute_strategy", "=", "\"none\"", "\n", "\n", "# Trainer configs", "\n", "self", ".", "num_steps", "=", "300", "\n", "self", ".", "eval_epoch_interval", "=", "10_000", "\n", "self", ".", "eval_before_training", "=", "True", "\n", "self", ".", "save_model", "=", "True", "\n", "self", ".", "save_step_interval", "=", "20_000", "\n", "self", ".", "mc_loss", "=", "0", "\n", "self", ".", "unlikely_loss", "=", "0", "\n", "self", ".", "length_norm", "=", "0", "\n", "self", ".", "grad_accum_factor", "=", "1", "\n", "self", ".", "split_option_at_inference", "=", "False", "# Whether to split the answer choices during eval to lower memory usage for datasets with lots of answer choices", "\n", "\n", "# Optimization configs", "\n", "self", ".", "optimizer", "=", "\"adafactor\"", "\n", "self", ".", "lr", "=", "3e-4", "\n", "self", ".", "trainable_param_names", "=", "\".*\"", "\n", "self", ".", "scheduler", "=", "\"linear_decay_with_warmup\"", "\n", "self", ".", "warmup_ratio", "=", "0.06", "\n", "self", ".", "weight_decay", "=", "0", "\n", "self", ".", "scale_parameter", "=", "True", "\n", "self", ".", "grad_clip_norm", "=", "1", "\n", "\n", "# PEFT method configs", "\n", "self", ".", "model_modifier", "=", "\"\"", "\n", "# Prompt Tuning configs", "\n", "self", ".", "prompt_tuning_num_prefix_emb", "=", "100", "\n", "self", ".", "prompt_tuning_encoder", "=", "True", "\n", "self", ".", "prompt_tuning_decoder", "=", "True", "\n", "# LoRA configs", "\n", "self", ".", "lora_rank", "=", "4", "\n", "self", ".", "lora_scaling_rank", "=", "0", "\n", "self", ".", "lora_init_scale", "=", "0.01", "\n", "self", ".", "lora_modules", "=", "\"none\"", "\n", "self", ".", "lora_layers", "=", "\"none\"", "\n", "# BitFit configs", "\n", "self", ".", "bitfit_modules", "=", "\".*\"", "\n", "self", ".", "bitfit_layers", "=", "\"q|k|v|o|wi_[01]|w_o\"", "\n", "# Adapter configs", "\n", "self", ".", "adapter_type", "=", "\"normal\"", "\n", "self", ".", "adapter_non_linearity", "=", "\"relu\"", "\n", "self", ".", "adapter_reduction_factor", "=", "4", "\n", "self", ".", "normal_adapter_residual", "=", "True", "\n", "self", ".", "lowrank_adapter_w_init", "=", "\"glorot-uniform\"", "\n", "self", ".", "lowrank_adapter_rank", "=", "1", "\n", "self", ".", "compacter_hypercomplex_division", "=", "8", "\n", "self", ".", "compacter_learn_phm", "=", "True", "\n", "self", ".", "compacter_hypercomplex_nonlinearity", "=", "\"glorot-uniform\"", "# wait, is this really the right name?", "\n", "self", ".", "compacter_shared_phm_rule", "=", "False", "\n", "self", ".", "compacter_factorized_phm", "=", "False", "\n", "self", ".", "compacter_shared_W_phm", "=", "False", "\n", "self", ".", "compacter_factorized_phm_rule", "=", "False", "\n", "self", ".", "compacter_phm_c_init", "=", "\"normal\"", "\n", "self", ".", "compacter_phm_rank", "=", "1", "\n", "self", ".", "compacter_phm_init_range", "=", "0.01", "\n", "self", ".", "compacter_kronecker_prod", "=", "False", "\n", "self", ".", "compacter_add_compacter_in_self_attention", "=", "False", "\n", "self", ".", "compacter_add_compacter_in_cross_attention", "=", "False", "\n", "# Intrinsic SAID configs", "\n", "self", ".", "intrinsic_projection", "=", "\"fastfood\"", "\n", "self", ".", "intrinsic_said", "=", "True", "\n", "self", ".", "intrinsic_dim", "=", "2000", "\n", "self", ".", "intrinsic_device", "=", "\"cpu\"", "\n", "# FISH mask configs", "\n", "self", ".", "fishmask_mode", "=", "None", "\n", "self", ".", "fishmask_path", "=", "None", "\n", "self", ".", "fishmask_keep_ratio", "=", "0.05", "\n", "# Prefix Tuning configs", "\n", "self", ".", "prefix_tuning_num_input_tokens", "=", "10", "\n", "self", ".", "prefix_tuning_num_target_tokens", "=", "10", "\n", "self", ".", "prefix_tuning_init_path", "=", "None", "\n", "self", ".", "prefix_tuning_init_text", "=", "None", "\n", "self", ".", "prefix_tuning_parameterization", "=", "\"mlp-512\"", "\n", "\n", "if", "filenames", ":", "\n", "            ", "for", "filename", "in", "filenames", ".", "split", "(", "\"+\"", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "                    ", "filename", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "\"CONFIG_PATH\"", ",", "default", "=", "\"configs\"", ")", ",", "filename", ")", "\n", "\n", "", "self", ".", "update_kwargs", "(", "json", ".", "load", "(", "open", "(", "filename", ")", ")", ",", "eval", "=", "False", ")", "\n", "", "", "if", "kwargs", ":", "\n", "            ", "self", ".", "update_kwargs", "(", "kwargs", ")", "\n", "\n", "", "self", ".", "set_exp_dir", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.update_kwargs": [[124, 136], ["kwargs.items", "setattr", "hasattr", "ValueError", "ast.literal_eval"], "methods", ["None"], ["", "def", "update_kwargs", "(", "self", ",", "kwargs", ",", "eval", "=", "True", ")", ":", "\n", "        ", "for", "(", "k", ",", "v", ")", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "if", "eval", ":", "\n", "                ", "try", ":", "\n", "                    ", "v", "=", "ast", ".", "literal_eval", "(", "v", ")", "\n", "", "except", "ValueError", ":", "\n", "                    ", "v", "=", "v", "\n", "", "", "else", ":", "\n", "                ", "v", "=", "v", "\n", "", "if", "not", "hasattr", "(", "self", ",", "k", ")", ":", "\n", "                ", "raise", "ValueError", "(", "f\"{k} is not in the config\"", ")", "\n", "", "setattr", "(", "self", ",", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.set_exp_dir": [[137, 157], ["os.path.join", "os.getenv", "os.path.exists", "os.makedirs", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "Config.Config.save_config", "os.path.join", "os.getenv", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.save_config"], ["", "", "def", "set_exp_dir", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Updates the config default values based on parameters passed in from config file\n        \"\"\"", "\n", "\n", "if", "self", ".", "exp_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "exp_dir", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "\"OUTPUT_PATH\"", ",", "default", "=", "\"exp_out\"", ")", ",", "self", ".", "exp_name", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "exp_dir", "=", "os", ".", "getenv", "(", "\"OUTPUT_PATH\"", ",", "default", "=", "\"exp_out\"", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "exp_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "exp_dir", ")", "\n", "\n", "", "if", "self", ".", "exp_dir", "is", "not", "None", ":", "\n", "            ", "self", ".", "train_pred_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"train_pred.txt\"", ")", "\n", "self", ".", "dev_pred_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"dev_pred.txt\"", ")", "\n", "self", ".", "dev_score_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"dev_scores.json\"", ")", "\n", "self", ".", "test_pred_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"test_pred.txt\"", ")", "\n", "self", ".", "test_score_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"test_scores.json\"", ")", "\n", "self", ".", "save_config", "(", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "os", ".", "path", ".", "join", "(", "\"config.json\"", ")", ")", ")", "\n", "self", ".", "finish_flag_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "exp_dir", ",", "\"exp_completed.txt\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.to_json": [[158, 164], ["json.dumps"], "methods", ["None"], ["", "", "def", "to_json", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Converts parameter values in config to json\n        :return: json\n        \"\"\"", "\n", "return", "json", ".", "dumps", "(", "self", ".", "__dict__", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.save_config": [[165, 172], ["open", "fout.write", "fout.write", "Config.Config.to_json"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.utils.Config.Config.to_json"], ["", "def", "save_config", "(", "self", ",", "filename", ")", ":", "\n", "        ", "\"\"\"\n        Saves the config\n        \"\"\"", "\n", "with", "open", "(", "filename", ",", "\"w+\"", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "self", ".", "to_json", "(", ")", ")", "\n", "fout", ".", "write", "(", "\"\\n\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_scheduler": [[6, 29], ["get_scheduler.get_polynomial_decay_schedule_with_warmup", "torch.optim.lr_scheduler.ExponentialLR", "get_scheduler.get_linear_schedule_with_warmup", "torch.optim.lr_scheduler.CosineAnnealingLR", "transformers.optimization.AdafactorSchedule", "ValueError"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_polynomial_decay_schedule_with_warmup", "home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_linear_schedule_with_warmup"], ["def", "get_scheduler", "(", "optimizer", ",", "config", ")", ":", "\n", "    ", "\"\"\"\n    Get scheduler\n\n    :param optimizer:\n    :param config:\n    :return:\n    \"\"\"", "\n", "scheduler_name", "=", "config", ".", "scheduler", "\n", "num_warmup_steps", "=", "config", ".", "num_steps", "*", "config", ".", "warmup_ratio", "\n", "\n", "if", "scheduler_name", "==", "\"polynomial_decay_with_warmup\"", ":", "\n", "        ", "return", "get_polynomial_decay_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "config", ".", "num_steps", ")", "\n", "", "elif", "scheduler_name", "==", "\"exponential_decay\"", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "ExponentialLR", "(", "optimizer", ",", "gamma", "=", "config", ".", "gamma", ")", "\n", "", "elif", "scheduler_name", "==", "\"linear_decay_with_warmup\"", ":", "\n", "        ", "return", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "config", ".", "num_steps", ")", "\n", "", "elif", "scheduler_name", "==", "\"cosine_annealing\"", ":", "\n", "        ", "return", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "config", ".", "num_steps", ")", "\n", "", "elif", "scheduler_name", "==", "\"adafactor\"", ":", "\n", "        ", "return", "AdafactorSchedule", "(", "optimizer", ",", "config", ".", "lr", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid Scheduler Name %s\"", "%", "scheduler_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_linear_schedule_with_warmup": [[31, 56], ["torch.optim.lr_scheduler.LambdaLR", "max", "float", "float", "float", "float", "max", "max"], "function", ["None"], ["", "", "def", "get_linear_schedule_with_warmup", "(", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "last_epoch", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases linearly from the initial lr set in the optimizer to 0,\n    after a warmup period during which it increases linearly from 0 to the initial lr set in the optimizer.\n\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The total number of training steps.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n    \"\"\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "return", "max", "(", "0.0", ",", "float", "(", "num_training_steps", "-", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_training_steps", "-", "num_warmup_steps", ")", ")", ")", "\n", "\n", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_polynomial_decay_schedule_with_warmup": [[58, 106], ["torch.optim.lr_scheduler.LambdaLR", "float", "float", "max"], "function", ["None"], ["", "def", "get_polynomial_decay_schedule_with_warmup", "(", "\n", "optimizer", ",", "num_warmup_steps", ",", "num_training_steps", ",", "lr_end", "=", "1e-7", ",", "power", "=", "1.0", ",", "last_epoch", "=", "-", "1", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Create a schedule with a learning rate that decreases as a polynomial decay\n    from the initial lr set in the optimizer to end lr defined by `lr_end`,\n    after a warmup period during which it increases linearly from 0 to the\n    initial lr set in the optimizer.\n\n    Args:\n        optimizer (:class:`~torch.optim.Optimizer`):\n            The optimizer for which to schedule the learning rate.\n        num_warmup_steps (:obj:`int`):\n            The number of steps for the warmup phase.\n        num_training_steps (:obj:`int`):\n            The total number of training steps.\n        lr_end (:obj:`float`, `optional`, defaults to 1e-7):\n            The end LR.\n        power (:obj:`float`, `optional`, defaults to 1.0):\n            Power factor.\n        last_epoch (:obj:`int`, `optional`, defaults to -1):\n            The index of the last epoch when resuming training.\n\n    Note: `power` defaults to 1.0 as in the fairseq implementation, which in turn is\n    based on the original BERT implementation at\n    https://github.com/google-research/bert/blob/f39e881b169b9d53bea03d2d341b31707a6c052b/optimization.py#L37\n\n    Return:\n        :obj:`torch.optim.lr_scheduler.LambdaLR` with the appropriate schedule.\n\n    \"\"\"", "\n", "\n", "lr_init", "=", "optimizer", ".", "defaults", "[", "\"lr\"", "]", "\n", "assert", "lr_init", ">", "lr_end", ",", "f\"lr_end ({lr_end}) must be be smaller than initial lr ({lr_init})\"", "\n", "\n", "def", "lr_lambda", "(", "current_step", ":", "int", ")", ":", "\n", "        ", "if", "current_step", "<", "num_warmup_steps", ":", "\n", "            ", "return", "float", "(", "current_step", ")", "/", "float", "(", "max", "(", "1", ",", "num_warmup_steps", ")", ")", "\n", "", "elif", "current_step", ">", "num_training_steps", ":", "\n", "            ", "return", "lr_end", "/", "lr_init", "# as LambdaLR multiplies by lr_init", "\n", "", "else", ":", "\n", "            ", "lr_range", "=", "lr_init", "-", "lr_end", "\n", "decay_steps", "=", "num_training_steps", "-", "num_warmup_steps", "\n", "pct_remaining", "=", "1", "-", "(", "current_step", "-", "num_warmup_steps", ")", "/", "decay_steps", "\n", "decay", "=", "lr_range", "*", "pct_remaining", "**", "power", "+", "lr_end", "\n", "return", "decay", "/", "lr_init", "# as LambdaLR multiplies by lr_init", "\n", "\n", "", "", "return", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ",", "last_epoch", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.ParseKwargs.__call__": [[118, 123], ["setattr", "dict", "value.split", "getattr"], "methods", ["None"], ["    ", "def", "__call__", "(", "self", ",", "parser", ",", "namespace", ",", "values", ",", "option_string", "=", "None", ")", ":", "\n", "        ", "setattr", "(", "namespace", ",", "self", ".", "dest", ",", "dict", "(", ")", ")", "\n", "for", "value", "in", "values", ":", "\n", "            ", "key", ",", "value", "=", "value", ".", "split", "(", "'='", ")", "\n", "getattr", "(", "namespace", ",", "self", ".", "dest", ")", "[", "key", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.my_collate_fn": [[19, 53], ["dict_batch[].items", "dict_batch[].items", "datapoint[].items", "datapoint[].items", "isinstance", "isinstance", "torch.tensor", "torch.tensor", "[].append", "[].append"], "function", ["None"], ["def", "my_collate_fn", "(", "batch", ")", ":", "\n", "\n", "    ", "dict_batch", "=", "{", "}", "\n", "dict_batch", "[", "\"input\"", "]", "=", "{", "}", "\n", "dict_batch", "[", "\"output\"", "]", "=", "{", "}", "\n", "\n", "for", "datapoint", "in", "batch", ":", "\n", "        ", "for", "(", "k", ",", "v", ")", "in", "datapoint", "[", "\"input\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "dict_batch", "[", "\"input\"", "]", ":", "\n", "                ", "dict_batch", "[", "\"input\"", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "# dict_batch[\"input\"][k].append(v[0])", "\n", "", "else", ":", "\n", "# dict_batch[\"input\"][k] = [v[0]]", "\n", "                ", "dict_batch", "[", "\"input\"", "]", "[", "k", "]", "=", "[", "v", "]", "\n", "\n", "\n", "", "", "for", "(", "k", ",", "v", ")", "in", "datapoint", "[", "\"output\"", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "dict_batch", "[", "\"output\"", "]", ":", "\n", "# dict_batch[\"output\"][k].append(v[0])", "\n", "                ", "dict_batch", "[", "\"output\"", "]", "[", "k", "]", ".", "append", "(", "v", ")", "\n", "\n", "", "else", ":", "\n", "# dict_batch[\"output\"][k] = [v[0]]", "\n", "                ", "dict_batch", "[", "\"output\"", "]", "[", "k", "]", "=", "[", "v", "]", "\n", "\n", "\n", "", "", "", "for", "(", "k", ",", "list_v", ")", "in", "dict_batch", "[", "\"input\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "list_v", "[", "0", "]", ",", "int", ")", ":", "\n", "            ", "dict_batch", "[", "\"input\"", "]", "[", "k", "]", "=", "torch", ".", "tensor", "(", "list_v", ")", "\n", "", "", "for", "(", "k", ",", "list_v", ")", "in", "dict_batch", "[", "\"output\"", "]", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "list_v", "[", "0", "]", ",", "int", ")", ":", "\n", "            ", "dict_batch", "[", "\"output\"", "]", "[", "k", "]", "=", "torch", ".", "tensor", "(", "list_v", ")", "\n", "\n", "", "", "return", "dict_batch", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.set_global_logging_level": [[54, 69], ["re.compile", "re.match", "logging.getLogger().setLevel", "logging.getLogger"], "function", ["None"], ["", "def", "set_global_logging_level", "(", "level", "=", "logging", ".", "ERROR", ",", "prefices", "=", "[", "\"\"", "]", ")", ":", "\n", "    ", "\"\"\"\n    Override logging levels of different modules based on their name as a prefix.\n    It needs to be invoked after the modules have been loaded so that their loggers have been initialized.\n\n    Args:\n        - level: desired level. e.g. logging.INFO. Optional. Default is logging.ERROR\n        - prefices: list of one or more str prefices to match (e.g. [\"transformers\", \"torch\"]). Optional.\n          Default is `[\"\"]` to match all active loggers.\n          The match is a case-sensitive `module_name.startswith(prefix)`\n    \"\"\"", "\n", "prefix_re", "=", "re", ".", "compile", "(", "fr'^(?:{ \"|\".join(prefices) })'", ")", "\n", "for", "name", "in", "logging", ".", "root", ".", "manager", ".", "loggerDict", ":", "\n", "        ", "if", "re", ".", "match", "(", "prefix_re", ",", "name", ")", ":", "\n", "            ", "logging", ".", "getLogger", "(", "name", ")", ".", "setLevel", "(", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.set_seeds": [[71, 77], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "", "", "def", "set_seeds", "(", "seed", ")", ":", "\n", "    ", "\"set random seeds\"", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.make_dir": [[78, 86], ["os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "make_dir", "(", "dir_name", ")", ":", "\n", "    ", "'''\n    Makes a directory if it doesn't exists yet\n    Args:\n        dir_name: directory name\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "dir_name", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "dir_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.make_exp_dir": [[87, 106], ["datetime.datetime.now", "os.path.join", "util.make_dir", "os.path.join", "shutil.copytree", "os.path.join", "shutil.ignore_patterns"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.utils.util.make_dir"], ["", "", "def", "make_exp_dir", "(", "base_exp_dir", ")", ":", "\n", "    ", "'''\n    Makes an experiment directory with timestamp\n    Args:\n        base_output_dir_name: base output directory name\n    Returns:\n        exp_dir_name: experiment directory name\n    '''", "\n", "now", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "ts", "=", "\"{:04d}-{:02d}-{:02d}-{:02d}-{:02d}-{:02d}\"", ".", "format", "(", "now", ".", "year", ",", "now", ".", "month", ",", "now", ".", "day", ",", "now", ".", "hour", ",", "now", ".", "minute", ",", "\n", "now", ".", "second", ")", "\n", "exp_dir_name", "=", "os", ".", "path", ".", "join", "(", "base_exp_dir", ",", "ts", ")", "\n", "make_dir", "(", "exp_dir_name", ")", "\n", "\n", "src_file", "=", "os", ".", "path", ".", "join", "(", "exp_dir_name", ",", "'src'", ")", "\n", "\n", "copytree", "(", "os", ".", "path", ".", "join", "(", "os", ".", "environ", "[", "'NICL_ROOT'", "]", ",", "\"src\"", ")", ",", "src_file", ",", "ignore", "=", "ignore_patterns", "(", "'*.pyc'", ",", "'tmp*'", ")", ")", "\n", "\n", "return", "exp_dir_name", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.print_mem_usage": [[108, 116], ["print", "sys.stdout.flush", "sys.stdout.flush", "float", "float", "float", "psutil.virtual_memory", "torch.cuda.memory_allocated", "torch.cuda.memory_reserved", "torch.cuda.max_memory_allocated"], "function", ["None"], ["", "def", "print_mem_usage", "(", "loc", ")", ":", "\n", "    ", "'''\n    Print memory usage in GB\n    :return:\n    '''", "\n", "print", "(", "\"%s gpu mem allocated: %.2f GB; reserved: %.2f GB; max: %.2f GB; cpu mem %d\"", "%", "(", "loc", ",", "float", "(", "torch", ".", "cuda", ".", "memory_allocated", "(", ")", "/", "1e9", ")", ",", "float", "(", "torch", ".", "cuda", ".", "memory_reserved", "(", ")", "/", "1e9", ")", ",", "float", "(", "torch", ".", "cuda", ".", "max_memory_allocated", "(", ")", "/", "1e9", ")", ",", "psutil", ".", "virtual_memory", "(", ")", ".", "percent", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.update_dict_val_store": [[125, 140], ["dict_val_store.keys"], "function", ["None"], ["", "", "", "def", "update_dict_val_store", "(", "dict_val_store", ",", "dict_update_val", ",", "grad_accum_factor", ")", ":", "\n", "    ", "'''\n    Update dict_val_store with dict_update_val\n\n    :param dict_val_store:\n    :param dict_update_val:\n    :return:\n    '''", "\n", "if", "dict_val_store", "is", "None", ":", "\n", "        ", "dict_val_store", "=", "dict_update_val", "\n", "", "else", ":", "\n", "        ", "for", "k", "in", "dict_val_store", ".", "keys", "(", ")", ":", "\n", "            ", "dict_val_store", "[", "k", "]", "+=", "dict_update_val", "[", "k", "]", "/", "grad_accum_factor", "\n", "\n", "", "", "return", "dict_val_store", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.utils.util.get_avg_dict_val_store": [[141, 155], ["dict_val_store.keys", "float"], "function", ["None"], ["", "def", "get_avg_dict_val_store", "(", "dict_val_store", ",", "num_batches", ",", "grad_accumulation_factor", ")", ":", "\n", "    ", "'''\n    Get average dictionary val\n\n    :param dict_val_store:\n    :param eval_every:\n    :return:\n    '''", "\n", "dict_avg_val", "=", "{", "}", "\n", "\n", "for", "k", "in", "dict_val_store", ".", "keys", "(", ")", ":", "\n", "        ", "dict_avg_val", "[", "k", "]", "=", "float", "(", "'%.3f'", "%", "(", "dict_val_store", "[", "k", "]", "/", "num_batches", "/", "grad_accumulation_factor", ")", ")", "\n", "\n", "", "return", "dict_avg_val", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.utils.get_optimizer.get_optimizer": [[7, 53], ["collections.defaultdict", "set", "model.named_parameters", "param_groups.values.values", "re.fullmatch", "optim_name.lower", "torch.Adam", "[].append", "set.add", "optim_name.lower", "torch.SGD", "optim_name.lower", "torch.AdamW", "param_name.split", "optim_name.lower", "transformers.Adafactor", "ValueError", "get_optimizer.get_optimizer.param_name_to_group_name"], "function", ["None"], ["def", "get_optimizer", "(", "model", ",", "config", ")", ":", "\n", "    ", "\"\"\"\n    Construct optimizer based on config\n\n    :param model:\n    :param config:\n    :return:\n    \"\"\"", "\n", "optim_name", "=", "config", ".", "optimizer", "\n", "\n", "def", "param_name_to_group_name", "(", "param_name", ")", ":", "\n", "        ", "if", "False", ":", "\n", "            ", "return", "\".\"", ".", "join", "(", "param_name", ".", "split", "(", "\".\"", ")", "[", ":", "3", "]", ")", "\n", "# only needed when the model has many trainable parameters, disabled in our expeirments", "\n", "", "else", ":", "\n", "            ", "return", "\".\"", "\n", "\n", "", "", "param_groups", "=", "defaultdict", "(", "lambda", ":", "{", "\"params\"", ":", "[", "]", "}", ")", "\n", "trainable_param_names", "=", "set", "(", ")", "\n", "for", "(", "param_name", ",", "param", ")", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "re", ".", "fullmatch", "(", "config", ".", "trainable_param_names", ",", "param_name", ")", ":", "\n", "            ", "param_groups", "[", "param_name_to_group_name", "(", "param_name", ")", "]", "[", "\"params\"", "]", ".", "append", "(", "param", ")", "\n", "trainable_param_names", ".", "add", "(", "param_name", ")", "\n", "", "else", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "param_groups", "=", "param_groups", ".", "values", "(", ")", "\n", "if", "optim_name", ".", "lower", "(", ")", "==", "\"adam\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "param_groups", ",", "lr", "=", "config", ".", "lr", ")", "\n", "", "elif", "optim_name", ".", "lower", "(", ")", "==", "\"sgd\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "SGD", "(", "param_groups", ",", "lr", "=", "config", ".", "lr", ",", "weight_decay", "=", "config", ".", "weight_decay", ")", "\n", "", "elif", "optim_name", ".", "lower", "(", ")", "==", "\"adamw\"", ":", "\n", "        ", "optimizer", "=", "optim", ".", "AdamW", "(", "param_groups", ",", "lr", "=", "config", ".", "lr", ",", "weight_decay", "=", "config", ".", "weight_decay", ",", "eps", "=", "1e-8", ")", "\n", "", "elif", "optim_name", ".", "lower", "(", ")", "==", "\"adafactor\"", ":", "\n", "        ", "optimizer", "=", "Adafactor", "(", "\n", "param_groups", ",", "\n", "lr", "=", "config", ".", "lr", ",", "\n", "weight_decay", "=", "config", ".", "weight_decay", ",", "\n", "scale_parameter", "=", "config", ".", "scale_parameter", ",", "\n", "relative_step", "=", "False", ",", "\n", "warmup_init", "=", "False", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Invalid Optimizer name %s\"", "%", "optim_name", ")", "\n", "\n", "", "return", "optimizer", ",", "trainable_param_names", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.scripts.eval_template.eval_random_template": [[19, 28], ["subprocess.run"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine.run"], ["def", "eval_random_template", "(", "model", ",", "method", ",", "descriptor", ")", ":", "\n", "\n", "    ", "for", "seed", "in", "[", "0", ",", "1", ",", "32", ",", "42", ",", "1024", "]", ":", "\n", "        ", "for", "dataset", "in", "[", "\"copa\"", ",", "\"h-swag\"", ",", "\"storycloze\"", ",", "\"winogrande\"", ",", "\"wic\"", ",", "\"wsc\"", ",", "\"rte\"", ",", "\"cb\"", ",", "\"anli-r1\"", ",", "\"anli-r2\"", ",", "\"anli-r3\"", "]", ":", "\n", "            ", "if", "descriptor", "is", "None", ":", "\n", "                ", "command", "=", "f\"bash bin/eval-template.sh {seed} {model} {method} {dataset} -1\"", "\n", "", "else", ":", "\n", "                ", "command", "=", "f\"bash bin/eval-template-with-descriptor.sh {seed} {model} {method} {dataset} -1 {descriptor}\"", "\n", "", "subprocess", ".", "run", "(", "[", "command", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.scripts.eval_template.eval_all_templates": [[30, 40], ["subprocess.run"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.ticl.icl_engines.ICLEngine.run"], ["", "", "", "def", "eval_all_templates", "(", "model", ",", "method", ",", "descriptor", ")", ":", "\n", "\n", "    ", "for", "seed", "in", "[", "0", ",", "1", ",", "32", ",", "42", ",", "1024", "]", ":", "\n", "        ", "for", "dataset", "in", "[", "\"copa\"", ",", "\"h-swag\"", ",", "\"storycloze\"", ",", "\"winogrande\"", ",", "\"wic\"", ",", "\"wsc\"", ",", "\"rte\"", ",", "\"cb\"", ",", "\"anli-r1\"", ",", "\"anli-r2\"", ",", "\"anli-r3\"", "]", ":", "\n", "            ", "for", "template_idx", "in", "dict_dataset_2_template_idx", "[", "dataset", "]", ":", "\n", "                ", "if", "descriptor", "is", "None", ":", "\n", "                    ", "command", "=", "f\"bash bin/eval-template.sh {seed} {model} {method} {dataset} {template_idx}\"", "\n", "", "else", ":", "\n", "                    ", "command", "=", "f\"bash bin/eval-template-with-descriptor.sh {seed} {model} {method} {dataset} {template_idx} {descriptor}\"", "\n", "", "subprocess", ".", "run", "(", "[", "command", "]", ",", "stdout", "=", "subprocess", ".", "PIPE", ",", "shell", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.scripts.few_glue.read_dataset": [[52, 73], ["os.path.join", "print", "open", "enumerate", "fin.readlines", "json.loads", "print", "json.loads.items", "line.strip"], "function", ["None"], ["def", "read_dataset", "(", "dataset_name", ",", "num_shot", ",", "few_shot_seed", ")", ":", "\n", "    ", "'''\n    Return dataset as list of json dictionaries\n\n    :param dataset_name: name of dataset \n    :param num_shot: number of examples per class \n    :param few_shot_seed: seed used to sample few-shot examples \n    '''", "\n", "fp", "=", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"few_shot\"", ",", "dataset_name", ",", "f\"{num_shot}_shot\"", ",", "f\"{few_shot_seed}_seed.jsonl\"", ")", "\n", "print", "(", "\"fp: \"", ",", "fp", ")", "\n", "key_mappings", "=", "DATASET_KEY_MAPPINGS", "[", "dataset_name", "]", "\n", "\n", "with", "open", "(", "fp", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "[", "]", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "fin", ".", "readlines", "(", ")", ")", ":", "\n", "            ", "original_json", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", "\n", "print", "(", "original_json", ")", "\n", "updated_json", "=", "{", "}", "\n", "for", "(", "k", ",", "v", ")", "in", "original_json", ".", "items", "(", ")", ":", "\n", "                ", "updated_json", "[", "key_mappings", "[", "k", "]", "]", "=", "v", "\n", "", "yield", "updated_json", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.scripts.get_result_table.make_result_table": [[10, 57], ["os.path.join", "print", "print", "glob.glob", "print", "collections.defaultdict", "print", "csv_lines.append", "os.getenv", "open", "os.path.join", "[].split", "tuple", "read_last_eval"], "function", ["None"], ["def", "make_result_table", "(", "args", ")", ":", "\n", "    ", "def", "collect_exp_scores", "(", "exp_name_template", ",", "datasets", ")", ":", "\n", "        ", "print", "(", "\"=\"", "*", "80", ")", "\n", "all_files", "=", "glob", "(", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "\"OUTPUT_PATH\"", ",", "default", "=", "\"exp_out\"", ")", ",", "exp_name_template", ",", "\"dev_scores.json\"", ")", "\n", ")", "\n", "print", "(", "f\"Find {len(all_files)} experiments fit into {exp_name_template}\"", ")", "\n", "\n", "def", "read_last_eval", "(", "fname", ")", ":", "\n", "            ", "with", "open", "(", "fname", ")", "as", "f", ":", "\n", "                ", "e", "=", "json", ".", "loads", "(", "f", ".", "readlines", "(", ")", "[", "-", "1", "]", ")", "\n", "", "return", "e", "[", "\"accuracy\"", "]", "\n", "\n", "", "acc_by_dataset", "=", "defaultdict", "(", "lambda", ":", "list", "(", ")", ")", "\n", "\n", "def", "parse_expname", "(", "fname", ")", ":", "\n", "            ", "elements", "=", "fname", ".", "split", "(", "\"/\"", ")", "[", "-", "2", "]", ".", "split", "(", "\"_\"", ")", "\n", "return", "tuple", "(", "elements", "[", ":", "3", "]", "+", "[", "\"_\"", ".", "join", "(", "elements", "[", "3", ":", "]", ")", "]", ")", "\n", "\n", "", "for", "fname", "in", "all_files", ":", "\n", "            ", "result", "=", "read_last_eval", "(", "fname", ")", "\n", "model", ",", "dataset", ",", "seed", ",", "spec", "=", "parse_expname", "(", "fname", ")", "\n", "acc_by_dataset", "[", "dataset", "]", ".", "append", "(", "result", ")", "\n", "\n", "", "def", "result_str", "(", "acc_list", ")", ":", "\n", "            ", "if", "len", "(", "acc_list", ")", ">", "1", ":", "\n", "                ", "return", "f\"{median(acc_list) * 100:.2f} ({iqr(acc_list) * 100:.2f})\"", "\n", "", "else", ":", "\n", "                ", "return", "f\"{acc_list[0] * 100:.2f}\"", "\n", "\n", "", "", "outputs", "=", "[", "]", "\n", "for", "dataset", "in", "datasets", ":", "\n", "            ", "acc_list", "=", "acc_by_dataset", "[", "dataset", "]", "\n", "outputs", ".", "append", "(", "result_str", "(", "acc_list", ")", ")", "\n", "\n", "", "print", "(", "\", \"", ".", "join", "(", "[", "f\"{dataset}: {value}\"", "for", "dataset", ",", "value", "in", "zip", "(", "datasets", ",", "outputs", ")", "]", ")", ")", "\n", "return", "\",\"", ".", "join", "(", "outputs", ")", "\n", "\n", "", "csv_lines", "=", "[", "\"template,\"", "+", "(", "\",\"", ".", "join", "(", "args", ".", "datasets", ")", ")", "]", "\n", "for", "exp_name_template", "in", "args", ".", "exp_name_templates", ":", "\n", "        ", "csv_lines", ".", "append", "(", "f\"{exp_name_template},\"", "+", "collect_exp_scores", "(", "exp_name_template", ",", "args", ".", "datasets", ")", ")", "\n", "\n", "", "output_fname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "getenv", "(", "\"OUTPUT_PATH\"", ",", "default", "=", "\"exp_out\"", ")", ",", "\"summary.csv\"", ")", "\n", "with", "open", "(", "output_fname", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "csv_lines", ":", "\n", "            ", "f", ".", "write", "(", "line", "+", "\"\\n\"", ")", "\n", "", "", "print", "(", "f\"Save result to {output_fname}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.__init__": [[19, 37], ["pytorch_lightning.LightningModule.__init__", "EncoderDecoder.EncoderDecoder.config.compute_strategy.startswith", "EncoderDecoder.EncoderDecoder.config.compute_strategy.startswith", "EncoderDecoder.EncoderDecoder.load_model", "fishmask.fishmask_plugin_on_init"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.load_model", "home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_init"], ["def", "__init__", "(", "self", ",", "config", ",", "tokenizer", ",", "transformer", ",", "dataset_reader", ")", ":", "\n", "        ", "\"\"\"\n        :param config\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "model", "=", "transformer", "\n", "self", ".", "dataset_reader", "=", "dataset_reader", "\n", "\n", "self", ".", "use_deepspeed", "=", "self", ".", "config", ".", "compute_strategy", ".", "startswith", "(", "\"deepspeed\"", ")", "\n", "self", ".", "use_ddp", "=", "self", ".", "config", ".", "compute_strategy", ".", "startswith", "(", "\"ddp\"", ")", "\n", "self", ".", "load_model", "(", ")", "\n", "\n", "self", ".", "_last_global_step_saved", "=", "-", "1", "\n", "\n", "if", "self", ".", "config", ".", "fishmask_mode", "is", "not", "None", ":", "\n", "            ", "fishmask_plugin_on_init", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.training_step": [[38, 124], ["intrinsic_plugin_on_step", "choices_ids.flatten", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderDecoder.EncoderDecoder.model", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "loss.item", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderDecoder.EncoderDecoder.model", "EncoderDecoder.EncoderDecoder.log_dict", "EncoderDecoder.EncoderDecoder.save_model", "choices_ids.size", "EncoderDecoder.EncoderDecoder.model.encoder", "[].flatten", "[].flatten", "torch.cross_entropy.item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy.item", "unlikely_loss.item", "loss.item", "torch.get_rank", "torch.get_rank", "torch.get_rank", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "torch.log().sum", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "EncoderDecoder.EncoderDecoder.logits.view", "lm_target.view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "range", "EncoderDecoder.EncoderDecoder.logits.flatten", "lm_target.flatten", "EncoderDecoder.EncoderDecoder.logits.flatten", "lm_target.flatten", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "range", "range", "EncoderDecoder.EncoderDecoder.logits.size", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.intrinsic_plugin_on_step", "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.save_model"], ["", "", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "model_modifier", "==", "\"intrinsic\"", ":", "\n", "            ", "from", ".", "intrinsic", "import", "intrinsic_plugin_on_step", "\n", "intrinsic_plugin_on_step", "(", "self", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "mc_loss", ">", "0", "or", "self", ".", "config", ".", "unlikely_loss", ">", "0", ":", "\n", "            ", "input_ids", ",", "choices_ids", ",", "labels", "=", "batch", "[", "\"input_ids\"", "]", ",", "batch", "[", "\"answer_choices_ids\"", "]", ",", "batch", "[", "\"labels\"", "]", "\n", "bs", ",", "num_choices", "=", "choices_ids", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "\n", "flat_choices_ids", "=", "choices_ids", ".", "flatten", "(", "0", ",", "1", ")", "\n", "attention_mask", "=", "(", "input_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "float", "(", ")", "# [bs, max_seq_len]", "\n", "encoder_hidden_states", "=", "self", ".", "model", ".", "encoder", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "num_choices", ",", "1", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "num_choices", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "decoder_input_ids", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "flat_choices_ids", "[", ":", ",", ":", "1", "]", ")", ",", "flat_choices_ids", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "decoder_attention_mask", "=", "(", "decoder_input_ids", "==", "decoder_input_ids", ")", ".", "float", "(", ")", "\n", "lm_target", "=", "flat_choices_ids", "-", "100", "*", "(", "flat_choices_ids", "==", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "long", "(", ")", "\n", "\n", "model_output", "=", "self", ".", "model", "(", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "encoder_outputs", "=", "[", "encoder_hidden_states", "]", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", "decoder_attention_mask", "=", "decoder_attention_mask", ",", "\n", ")", "\n", "choices_scores", "=", "(", "\n", "F", ".", "cross_entropy", "(", "model_output", ".", "logits", ".", "flatten", "(", "0", ",", "1", ")", ",", "lm_target", ".", "flatten", "(", "0", ",", "1", ")", ",", "reduction", "=", "\"none\"", ")", "\n", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "length_norm", ">", "0", ":", "\n", "                ", "choices_scores", "=", "choices_scores", "/", "torch", ".", "pow", "(", "\n", "(", "choices_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "self", ".", "config", ".", "length_norm", "\n", ")", "\n", "", "lm_loss", "=", "F", ".", "cross_entropy", "(", "\n", "model_output", ".", "logits", ".", "view", "(", "bs", ",", "num_choices", ",", "*", "model_output", ".", "logits", ".", "size", "(", ")", "[", "1", ":", "]", ")", "[", "range", "(", "bs", ")", ",", "labels", "]", ".", "flatten", "(", "\n", "0", ",", "1", "\n", ")", ",", "\n", "lm_target", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "[", "range", "(", "bs", ")", ",", "labels", "]", ".", "flatten", "(", "0", ",", "1", ")", ",", "\n", ")", "\n", "\n", "tensorboard_logs", "=", "{", "\"lm_loss\"", ":", "lm_loss", ".", "item", "(", ")", "}", "\n", "if", "self", ".", "config", ".", "mc_loss", ">", "0", ":", "\n", "                ", "mc_loss", "=", "F", ".", "cross_entropy", "(", "-", "choices_scores", ",", "labels", ")", "\n", "tensorboard_logs", "[", "\"mc_loss\"", "]", "=", "mc_loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "mc_loss", "=", "0.0", "\n", "\n", "", "if", "self", ".", "config", ".", "unlikely_loss", ">", "0", ":", "\n", "                ", "cand_loglikely", "=", "-", "F", ".", "cross_entropy", "(", "\n", "model_output", ".", "logits", ".", "flatten", "(", "0", ",", "1", ")", ",", "lm_target", ".", "flatten", "(", "0", ",", "1", ")", ",", "reduction", "=", "\"none\"", "\n", ")", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "\n", "cand_loglikely", "+=", "(", "lm_target", "<", "0", ")", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "*", "-", "100", "\n", "cand_loglikely", "[", "range", "(", "bs", ")", ",", "labels", "]", "=", "-", "100", "\n", "unlikely_loss", "=", "-", "torch", ".", "log", "(", "1", "-", "torch", ".", "exp", "(", "cand_loglikely", ")", "+", "1e-2", ")", ".", "sum", "(", ")", "/", "(", "cand_loglikely", "!=", "-", "100", ")", ".", "sum", "(", ")", "\n", "tensorboard_logs", "[", "\"unlikely_loss\"", "]", "=", "unlikely_loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "unlikely_loss", "=", "0.0", "\n", "\n", "", "loss", "=", "lm_loss", "+", "mc_loss", "*", "self", ".", "config", ".", "mc_loss", "+", "unlikely_loss", "*", "self", ".", "config", ".", "unlikely_loss", "\n", "tensorboard_logs", "[", "\"loss\"", "]", "=", "loss", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "input_ids", ",", "target_ids", "=", "batch", "[", "\"input_ids\"", "]", ",", "batch", "[", "\"target_ids\"", "]", "\n", "attention_mask", "=", "(", "input_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "float", "(", ")", "# [bs, max_seq_len]", "\n", "lm_labels", "=", "target_ids", "+", "-", "100", "*", "(", "target_ids", "==", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "long", "(", ")", "# [bs, max_seq_len]", "\n", "decoder_input_ids", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "zeros_like", "(", "lm_labels", "[", ":", ",", ":", "1", "]", ")", ",", "target_ids", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", "\n", ")", "# [bs, max_seq_len]", "\n", "decoder_attention_mask", "=", "(", "decoder_input_ids", "==", "decoder_input_ids", ")", ".", "float", "(", ")", "\n", "\n", "model_output", "=", "self", ".", "model", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", "decoder_attention_mask", "=", "decoder_attention_mask", ",", "\n", "labels", "=", "lm_labels", ",", "\n", ")", "\n", "loss", "=", "model_output", ".", "loss", "\n", "tensorboard_logs", "=", "{", "\"loss\"", ":", "loss", ".", "item", "(", ")", "}", "\n", "\n", "", "if", "not", "(", "self", ".", "use_deepspeed", "or", "self", ".", "use_ddp", ")", "or", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "            ", "self", ".", "log_dict", "(", "tensorboard_logs", ")", "\n", "\n", "", "if", "self", ".", "global_step", "%", "self", ".", "config", ".", "save_step_interval", "==", "0", ":", "\n", "            ", "self", ".", "save_model", "(", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.predict": [[125, 225], ["intrinsic_plugin_on_step", "choices_ids.flatten", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderDecoder.EncoderDecoder.model", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum.min", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cross_entropy().view().sum.min", "torch.cross_entropy().view().sum.max", "torch.cross_entropy().view().sum.min", "prediction.tolist", "labels.tolist", "batch[].tolist", "score_gt.tolist", "score_cand.tolist", "choices_ids.size", "EncoderDecoder.EncoderDecoder.model.encoder", "choices_ids.size", "half_choice_ids.flatten", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EncoderDecoder.EncoderDecoder.model", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "torch.cross_entropy().view().sum", "all_choice_scores.append", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "EncoderDecoder.EncoderDecoder.model.encoder", "range", "range", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze().repeat", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.cross_entropy().view", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "EncoderDecoder.EncoderDecoder.logits.flatten", "lm_target.flatten", "encoder_hidden_states.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "attention_mask.unsqueeze().repeat().flatten.unsqueeze().repeat().flatten.unsqueeze", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "EncoderDecoder.EncoderDecoder.logits.flatten", "lm_target.flatten"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.intrinsic_plugin_on_step"], ["", "def", "predict", "(", "self", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        Predict the lbl for particular pet\n        :param batch:\n        :param pet:\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "model_modifier", "==", "\"intrinsic\"", ":", "\n", "            ", "intrinsic_plugin_on_step", "(", "self", ")", "\n", "\n", "", "input_ids", ",", "choices_ids", ",", "labels", "=", "batch", "[", "\"input_ids\"", "]", ",", "batch", "[", "\"answer_choices_ids\"", "]", ",", "batch", "[", "\"labels\"", "]", "\n", "\n", "if", "not", "self", ".", "config", ".", "split_option_at_inference", ":", "\n", "            ", "bs", ",", "num_choices", "=", "choices_ids", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "flat_choices_ids", "=", "choices_ids", ".", "flatten", "(", "0", ",", "1", ")", "\n", "attention_mask", "=", "(", "input_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "float", "(", ")", "# [bs, max_seq_len]", "\n", "encoder_hidden_states", "=", "self", ".", "model", ".", "encoder", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "encoder_hidden_states", "=", "encoder_hidden_states", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "num_choices", ",", "1", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "num_choices", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "decoder_input_ids", "=", "torch", ".", "cat", "(", "[", "torch", ".", "zeros_like", "(", "flat_choices_ids", "[", ":", ",", ":", "1", "]", ")", ",", "flat_choices_ids", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", ")", "\n", "decoder_attention_mask", "=", "(", "decoder_input_ids", "==", "decoder_input_ids", ")", ".", "float", "(", ")", "\n", "lm_target", "=", "flat_choices_ids", "-", "100", "*", "(", "flat_choices_ids", "==", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "long", "(", ")", "\n", "\n", "model_output", "=", "self", ".", "model", "(", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "encoder_outputs", "=", "[", "encoder_hidden_states", "]", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", "decoder_attention_mask", "=", "decoder_attention_mask", ",", "\n", ")", "\n", "choices_scores", "=", "(", "\n", "F", ".", "cross_entropy", "(", "model_output", ".", "logits", ".", "flatten", "(", "0", ",", "1", ")", ",", "lm_target", ".", "flatten", "(", "0", ",", "1", ")", ",", "reduction", "=", "\"none\"", ")", "\n", ".", "view", "(", "bs", ",", "num_choices", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "length_norm", ">", "0", ":", "\n", "                ", "choices_scores", "=", "choices_scores", "/", "torch", ".", "pow", "(", "\n", "(", "choices_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "self", ".", "config", ".", "length_norm", "\n", ")", "\n", "", "pred_score", ",", "prediction", "=", "choices_scores", ".", "min", "(", "dim", "=", "1", ")", "\n", "\n", "", "else", ":", "\n", "            ", "bs", ",", "num_choices", "=", "choices_ids", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "midpoint", "=", "num_choices", "//", "2", "\n", "#", "\n", "first_half_choice_ids", "=", "choices_ids", "[", ":", ",", ":", "midpoint", ",", ":", "]", "\n", "second_half_choice_ids", "=", "choices_ids", "[", ":", ",", "midpoint", ":", ",", ":", "]", "\n", "#", "\n", "all_choice_scores", "=", "[", "]", "\n", "\n", "for", "half_choice_ids", "in", "[", "first_half_choice_ids", ",", "second_half_choice_ids", "]", ":", "\n", "                ", "half_num_choices", "=", "half_choice_ids", ".", "shape", "[", "1", "]", "\n", "\n", "flat_choices_ids", "=", "half_choice_ids", ".", "flatten", "(", "0", ",", "1", ")", "# [bs*num_choices, choice_len]", "\n", "\n", "attention_mask", "=", "(", "input_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "float", "(", ")", "# [bs, max_seq_len]", "\n", "encoder_hidden_states", "=", "self", ".", "model", ".", "encoder", "(", "input_ids", "=", "input_ids", ",", "attention_mask", "=", "attention_mask", ")", "[", "0", "]", "\n", "encoder_hidden_states", "=", "(", "\n", "encoder_hidden_states", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "half_num_choices", ",", "1", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", ")", "\n", "attention_mask", "=", "attention_mask", ".", "unsqueeze", "(", "dim", "=", "1", ")", ".", "repeat", "(", "1", ",", "half_num_choices", ",", "1", ")", ".", "flatten", "(", "0", ",", "1", ")", "\n", "\n", "decoder_input_ids", "=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "zeros_like", "(", "flat_choices_ids", "[", ":", ",", ":", "1", "]", ")", ",", "flat_choices_ids", "[", ":", ",", ":", "-", "1", "]", "]", ",", "dim", "=", "1", "\n", ")", "\n", "decoder_attention_mask", "=", "(", "decoder_input_ids", "==", "decoder_input_ids", ")", ".", "float", "(", ")", "\n", "lm_target", "=", "flat_choices_ids", "-", "100", "*", "(", "flat_choices_ids", "==", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "long", "(", ")", "\n", "\n", "model_output", "=", "self", ".", "model", "(", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "encoder_outputs", "=", "[", "encoder_hidden_states", "]", ",", "\n", "decoder_input_ids", "=", "decoder_input_ids", ",", "\n", "decoder_attention_mask", "=", "decoder_attention_mask", ",", "\n", ")", "\n", "choices_scores", "=", "(", "\n", "F", ".", "cross_entropy", "(", "model_output", ".", "logits", ".", "flatten", "(", "0", ",", "1", ")", ",", "lm_target", ".", "flatten", "(", "0", ",", "1", ")", ",", "reduction", "=", "\"none\"", ")", "\n", ".", "view", "(", "bs", ",", "half_num_choices", ",", "-", "1", ")", "\n", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", ")", "\n", "if", "self", ".", "config", ".", "length_norm", ">", "0", ":", "\n", "                    ", "choices_scores", "=", "choices_scores", "/", "torch", ".", "pow", "(", "\n", "(", "half_choice_ids", "!=", "self", ".", "tokenizer", ".", "pad_token_id", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ",", "self", ".", "config", ".", "length_norm", "\n", ")", "\n", "\n", "", "all_choice_scores", ".", "append", "(", "choices_scores", ")", "\n", "\n", "", "choices_scores", "=", "torch", ".", "cat", "(", "all_choice_scores", ",", "dim", "=", "-", "1", ")", "\n", "pred_score", ",", "prediction", "=", "choices_scores", ".", "min", "(", "dim", "=", "1", ")", "\n", "\n", "", "score_gt", "=", "choices_scores", "[", "range", "(", "bs", ")", ",", "labels", "]", "\n", "choices_scores", "[", "range", "(", "bs", ")", ",", "labels", "]", "=", "choices_scores", ".", "max", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "score_cand", "=", "choices_scores", ".", "min", "(", "dim", "=", "-", "1", ")", "[", "0", "]", "\n", "\n", "batch_output", "=", "{", "\n", "\"prediction\"", ":", "prediction", ".", "tolist", "(", ")", ",", "\n", "\"label\"", ":", "labels", ".", "tolist", "(", ")", ",", "\n", "\"idx\"", ":", "batch", "[", "\"idx\"", "]", ".", "tolist", "(", ")", ",", "\n", "\"log.score_gt\"", ":", "score_gt", ".", "tolist", "(", ")", ",", "\n", "\"log.score_cand\"", ":", "score_cand", ".", "tolist", "(", ")", ",", "\n", "}", "\n", "return", "batch_output", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.validation_step": [[226, 229], ["EncoderDecoder.EncoderDecoder.predict"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.predict"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "batch_output", "=", "self", ".", "predict", "(", "batch", ")", "\n", "return", "batch_output", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.validation_epoch_end": [[230, 269], ["EncoderDecoder.EncoderDecoder.save_model", "torch.all_gather_object", "torch.all_gather_object", "torch.all_gather_object", "set", "accumulated.items", "EncoderDecoder.EncoderDecoder.dataset_reader.compute_metric", "accumulated.items", "print", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "torch.get_rank", "batch_output.items", "valid_mask.append", "set.add", "key.startswith", "json.dumps", "open", "f.write", "range", "outputs[].keys", "accumulated[].extend", "statistics.mean", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "zip", "key.replace"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.save_model", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.compute_metric"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "# exchange outputs between processes", "\n", "        ", "if", "self", ".", "use_deepspeed", "or", "self", ".", "use_ddp", ":", "\n", "            ", "gathered_outputs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather_object", "(", "gathered_outputs", ",", "outputs", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                ", "outputs", "=", "[", "batch_output", "for", "outputs", "in", "gathered_outputs", "for", "batch_output", "in", "outputs", "]", "\n", "\n", "", "", "if", "not", "(", "self", ".", "use_deepspeed", "or", "self", ".", "use_ddp", ")", "or", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "# let rank 0 collect all outputs", "\n", "            ", "accumulated", "=", "{", "key", ":", "[", "]", "for", "key", "in", "outputs", "[", "0", "]", ".", "keys", "(", ")", "}", "\n", "for", "batch_output", "in", "outputs", ":", "\n", "                ", "for", "key", ",", "value", "in", "batch_output", ".", "items", "(", ")", ":", "\n", "                    ", "accumulated", "[", "key", "]", ".", "extend", "(", "value", ")", "\n", "\n", "# multi-process may yield dupliated examples in the last batch", "\n", "", "", "valid_mask", "=", "[", "]", "\n", "idx_set", "=", "set", "(", ")", "\n", "for", "idx", "in", "accumulated", "[", "\"idx\"", "]", ":", "\n", "                ", "valid_mask", ".", "append", "(", "idx", "not", "in", "idx_set", ")", "\n", "idx_set", ".", "add", "(", "idx", ")", "\n", "", "for", "key", ",", "values", "in", "accumulated", ".", "items", "(", ")", ":", "\n", "                ", "accumulated", "[", "key", "]", "=", "[", "v", "for", "v", ",", "m", "in", "zip", "(", "values", ",", "valid_mask", ")", "if", "m", "]", "\n", "\n", "# compute and log results", "\n", "", "metrics", "=", "self", ".", "dataset_reader", ".", "compute_metric", "(", "accumulated", ")", "\n", "for", "key", ",", "value", "in", "accumulated", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", ".", "startswith", "(", "\"log.\"", ")", ":", "\n", "                    ", "metrics", "[", "key", ".", "replace", "(", "\"log.\"", ",", "\"\"", ")", "]", "=", "mean", "(", "value", ")", "\n", "\n", "", "", "result_str", "=", "json", ".", "dumps", "(", "metrics", ")", "+", "\"\\n\"", "\n", "with", "open", "(", "self", ".", "config", ".", "dev_score_file", ",", "\"a+\"", ")", "as", "f", ":", "\n", "                ", "f", ".", "write", "(", "result_str", ")", "\n", "", "print", "(", "\"\\n\"", "+", "result_str", ")", "\n", "", "else", ":", "\n", "            ", "metrics", "=", "{", "}", "\n", "\n", "", "self", ".", "save_model", "(", ")", "\n", "return", "metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.configure_optimizers": [[270, 278], ["src.utils.get_optimizer.get_optimizer", "src.utils.get_scheduler.get_scheduler"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.utils.get_optimizer.get_optimizer", "home.repos.pwc.inspect_result.r-three_t-few.utils.get_scheduler.get_scheduler"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "optimizer", ",", "self", ".", "trainable_param_names", "=", "get_optimizer", "(", "self", ".", "model", ",", "self", ".", "config", ")", "\n", "scheduler", "=", "get_scheduler", "(", "optimizer", ",", "self", ".", "config", ")", "\n", "return", "{", "\n", "\"optimizer\"", ":", "optimizer", ",", "\n", "\"lr_scheduler\"", ":", "{", "\n", "\"scheduler\"", ":", "scheduler", ",", "\n", "\"interval\"", ":", "\"step\"", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.on_train_end": [[281, 286], ["EncoderDecoder.EncoderDecoder.save_model", "fishmask.fishmask_plugin_on_end"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.save_model", "home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_end"], ["", "def", "on_train_end", "(", "self", ")", ":", "\n", "        ", "self", ".", "save_model", "(", "finish", "=", "True", ")", "\n", "\n", "if", "self", ".", "config", ".", "fishmask_mode", "is", "not", "None", ":", "\n", "            ", "fishmask_plugin_on_end", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.load_model": [[287, 294], ["torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "EncoderDecoder.EncoderDecoder.model.load_state_dict", "len", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "EncoderDecoder.EncoderDecoder.unexpected_keys.__str__"], "methods", ["None"], ["", "", "def", "load_model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "load_weight", "!=", "\"\"", ":", "\n", "            ", "trainable_states", "=", "torch", ".", "load", "(", "self", ".", "config", ".", "load_weight", ",", "map_location", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ")", "\n", "load_result", "=", "self", ".", "model", ".", "load_state_dict", "(", "trainable_states", ",", "strict", "=", "False", ")", "\n", "assert", "(", "\n", "len", "(", "load_result", ".", "unexpected_keys", ")", "==", "0", "\n", ")", ",", "f\"Load model failed, unexpected keys {load_result.unexpected_keys.__str__()}\"", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.save_model": [[295, 320], ["os.path.join", "os.path.join", "os.path.join", "EncoderDecoder.EncoderDecoder.trainer.model.save_checkpoint", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.distributed.barrier", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.get_rank", "torch.get_rank", "torch.get_rank", "deepspeed.utils.zero_to_fp32.get_fp32_state_dict_from_zero_checkpoint", "len", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "param_weight.cpu", "EncoderDecoder.EncoderDecoder.model.state_dict().items", "deepspeed.utils.zero_to_fp32.get_fp32_state_dict_from_zero_checkpoint.items", "EncoderDecoder.EncoderDecoder.model.state_dict"], "methods", ["None"], ["", "", "def", "save_model", "(", "self", ",", "finish", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "save_model", "and", "(", "finish", "or", "self", ".", "_last_global_step_saved", "!=", "self", ".", "global_step", ")", ":", "\n", "            ", "if", "finish", ":", "\n", "                ", "model_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "exp_dir", ",", "\"finish.pt\"", ")", "\n", "", "else", ":", "\n", "                ", "model_fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "exp_dir", ",", "f\"global_step{self.global_step}.pt\"", ")", "\n", "\n", "", "if", "self", ".", "use_deepspeed", "or", "self", ".", "use_ddp", ":", "\n", "                ", "distributed_save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "exp_dir", ",", "\"saved_model\"", ")", "\n", "self", ".", "trainer", ".", "model", ".", "save_checkpoint", "(", "distributed_save_path", ")", "\n", "torch", ".", "distributed", ".", "barrier", "(", ")", "\n", "if", "dist", ".", "get_rank", "(", ")", "==", "0", ":", "\n", "                    ", "trainable_states", "=", "zero_to_fp32", ".", "get_fp32_state_dict_from_zero_checkpoint", "(", "distributed_save_path", ")", "\n", "prefix_length", "=", "len", "(", "\"module.model.\"", ")", "\n", "trainable_states", "=", "{", "k", "[", "prefix_length", ":", "]", ":", "v", "for", "k", ",", "v", "in", "trainable_states", ".", "items", "(", ")", "}", "\n", "torch", ".", "save", "(", "trainable_states", ",", "model_fname", ")", "\n", "", "", "else", ":", "\n", "                ", "trainable_states", "=", "{", "\n", "param_name", ":", "param_weight", ".", "cpu", "(", ")", "\n", "for", "param_name", ",", "param_weight", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "\n", "if", "param_name", "in", "self", ".", "trainable_param_names", "\n", "}", "\n", "torch", ".", "save", "(", "trainable_states", ",", "model_fname", ")", "\n", "\n", "", "self", ".", "_last_global_step_saved", "=", "self", ".", "global_step", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.EncoderDecoder.EncoderDecoder.on_before_optimizer_step": [[321, 324], ["fishmask.fishmask_plugin_on_optimizer_step"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_optimizer_step"], ["", "", "def", "on_before_optimizer_step", "(", "self", ",", "optimizer", ",", "optimizer_idx", ")", ":", "\n", "        ", "if", "self", ".", "config", ".", "fishmask_mode", "is", "not", "None", ":", "\n", "            ", "fishmask_plugin_on_optimizer_step", "(", "self", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.T5EncoderPromptTuningWrapper.__init__": [[12, 23], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "prompt_tuning.sample_embed", "encoder.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.sample_embed"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_prefix_emb", "=", "config", ".", "prompt_tuning_num_prefix_emb", "\n", "self", ".", "prompt_tuning_encoder", "=", "config", ".", "prompt_tuning_encoder", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "prompt_embedding", "=", "nn", ".", "Parameter", "(", "\n", "sample_embed", "(", "\n", "embed", "=", "encoder", ".", "get_input_embeddings", "(", ")", ",", "\n", "sample_size", "=", "self", ".", "num_prefix_emb", ",", "\n", "start_idx", "=", "3", ",", "\n", "end_idx", "=", "5003", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.T5EncoderPromptTuningWrapper.forward": [[26, 40], ["input_ids.size", "prompt_tuning.T5EncoderPromptTuningWrapper.encoder.embed_tokens", "torch.cat.new_ones", "torch.cat.new_ones", "prompt_tuning.T5EncoderPromptTuningWrapper.encoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prompt_tuning.T5EncoderPromptTuningWrapper.prompt_embedding[].repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "inputs_embeds", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "bs", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "inputs_embeds", "=", "self", ".", "encoder", ".", "embed_tokens", "(", "input_ids", ")", "# [bs, max_seq_len, d_emb]", "\n", "prompt_attention_mask", "=", "attention_mask", ".", "new_ones", "(", "(", "bs", ",", "self", ".", "num_prefix_emb", ")", ")", "# [bs, prompt_len]", "\n", "if", "self", ".", "prompt_tuning_encoder", ":", "\n", "            ", "inputs_embeds", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "prompt_embedding", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "bs", ",", "1", ",", "1", ")", ")", ",", "inputs_embeds", "]", ",", "dim", "=", "1", "\n", ")", "# [bs, prompt_len+max_seq_len, d_emb]", "\n", "attention_mask", "=", "torch", ".", "cat", "(", "[", "prompt_attention_mask", ",", "attention_mask", "]", ",", "dim", "=", "1", ")", "# [bs, prompt_len+max_seq_len]", "\n", "\n", "", "encoder_outputs", "=", "self", ".", "encoder", "(", "\n", "input_ids", "=", "None", ",", "inputs_embeds", "=", "inputs_embeds", ",", "attention_mask", "=", "attention_mask", ",", "**", "kwargs", "\n", ")", "\n", "return", "encoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.T5DecoderPromptTuningWrapper.__init__": [[43, 55], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "prompt_tuning.sample_embed", "decoder.get_input_embeddings"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.sample_embed"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_prefix_emb", "=", "config", ".", "prompt_tuning_num_prefix_emb", "\n", "self", ".", "prompt_tuning_encoder", "=", "config", ".", "prompt_tuning_encoder", "\n", "self", ".", "prompt_tuning_decoder", "=", "config", ".", "prompt_tuning_decoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "self", ".", "prompt_embedding", "=", "nn", ".", "Parameter", "(", "\n", "sample_embed", "(", "\n", "embed", "=", "decoder", ".", "get_input_embeddings", "(", ")", ",", "\n", "sample_size", "=", "self", ".", "num_prefix_emb", ",", "\n", "start_idx", "=", "3", ",", "\n", "end_idx", "=", "5003", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.T5DecoderPromptTuningWrapper.forward": [[58, 84], ["input_ids.size", "prompt_tuning.T5DecoderPromptTuningWrapper.decoder.embed_tokens", "torch.cat.new_ones", "torch.cat.new_ones", "prompt_tuning.T5DecoderPromptTuningWrapper.decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "prompt_tuning.T5DecoderPromptTuningWrapper.prompt_embedding[].repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input_ids", ",", "attention_mask", ",", "encoder_attention_mask", ",", "inputs_embeds", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "bs", "=", "input_ids", ".", "size", "(", "0", ")", "\n", "inputs_embeds", "=", "self", ".", "decoder", ".", "embed_tokens", "(", "input_ids", ")", "# [bs, max_seq_len, d_emb]", "\n", "prompt_attention_mask", "=", "attention_mask", ".", "new_ones", "(", "(", "bs", ",", "self", ".", "num_prefix_emb", ")", ")", "# [bs, prompt_len]", "\n", "if", "self", ".", "prompt_tuning_encoder", ":", "\n", "            ", "encoder_attention_mask", "=", "torch", ".", "cat", "(", "\n", "[", "prompt_attention_mask", ",", "encoder_attention_mask", "]", ",", "dim", "=", "1", "\n", ")", "# [bs, prompt_len+max_seq_len]", "\n", "", "if", "self", ".", "prompt_tuning_decoder", ":", "\n", "            ", "inputs_embeds", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "prompt_embedding", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "(", "bs", ",", "1", ",", "1", ")", ")", ",", "inputs_embeds", "]", ",", "dim", "=", "1", "\n", ")", "# [bs, prompt_len+max_seq_len, d_emb]", "\n", "attention_mask", "=", "torch", ".", "cat", "(", "[", "prompt_attention_mask", ",", "attention_mask", "]", ",", "dim", "=", "1", ")", "# [bs, prompt_len+max_seq_len]", "\n", "\n", "", "decoder_outputs", "=", "self", ".", "decoder", "(", "\n", "input_ids", "=", "None", ",", "\n", "attention_mask", "=", "attention_mask", ",", "\n", "encoder_attention_mask", "=", "encoder_attention_mask", ",", "\n", "inputs_embeds", "=", "inputs_embeds", ",", "\n", "**", "kwargs", "\n", ")", "\n", "if", "self", ".", "prompt_tuning_decoder", ":", "\n", "            ", "decoder_outputs", ".", "last_hidden_state", "=", "decoder_outputs", ".", "last_hidden_state", "[", "\n", ":", ",", "self", ".", "num_prefix_emb", ":", "\n", "]", "# [bs, max_seq_len, d_emb]", "\n", "", "return", "decoder_outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.sample_embed": [[5, 9], ["torch.randint", "torch.randint", "embed_weight[].detach"], "function", ["None"], ["def", "sample_embed", "(", "embed", ",", "sample_size", ",", "start_idx", ",", "end_idx", ")", ":", "\n", "    ", "embed_weight", "=", "embed", ".", "weight", "\n", "rand_idx", "=", "torch", ".", "randint", "(", "start_idx", ",", "end_idx", ",", "(", "sample_size", ",", ")", ")", "\n", "return", "embed_weight", "[", "rand_idx", "]", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prompt_tuning.modify_with_prompt_tuning": [[86, 90], ["prompt_tuning.T5EncoderPromptTuningWrapper", "prompt_tuning.T5DecoderPromptTuningWrapper"], "function", ["None"], ["", "", "def", "modify_with_prompt_tuning", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "transformer", ".", "encoder", "=", "T5EncoderPromptTuningWrapper", "(", "transformer", ".", "encoder", ",", "config", ")", "\n", "transformer", ".", "decoder", "=", "T5DecoderPromptTuningWrapper", "(", "transformer", ".", "decoder", ",", "config", ")", "\n", "return", "transformer", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.__init__": [[11, 41], ["torch.Module.__init__", "prefix_tuning.T5AttentionPrefixTuning.setup_prefix"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.setup_prefix"], ["    ", "def", "__init__", "(", "self", ",", "attention_layer", ",", "num_prefix_tokens", ",", "parameterization", ",", "shared", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "is_decoder", "=", "attention_layer", ".", "is_decoder", "\n", "self", ".", "has_relative_attention_bias", "=", "attention_layer", ".", "has_relative_attention_bias", "\n", "\n", "self", ".", "relative_attention_num_buckets", "=", "attention_layer", ".", "relative_attention_num_buckets", "\n", "self", ".", "d_model", "=", "attention_layer", ".", "d_model", "\n", "self", ".", "key_value_proj_dim", "=", "attention_layer", ".", "key_value_proj_dim", "\n", "self", ".", "n_heads", "=", "attention_layer", ".", "n_heads", "\n", "self", ".", "dropout", "=", "attention_layer", ".", "dropout", "\n", "self", ".", "inner_dim", "=", "self", ".", "n_heads", "*", "self", ".", "key_value_proj_dim", "\n", "\n", "self", ".", "prune_heads", "=", "attention_layer", ".", "prune_heads", "\n", "self", ".", "_relative_position_bucket", "=", "attention_layer", ".", "_relative_position_bucket", "\n", "self", ".", "compute_bias", "=", "attention_layer", ".", "compute_bias", "\n", "\n", "self", ".", "q", "=", "attention_layer", ".", "q", "\n", "self", ".", "k", "=", "attention_layer", ".", "k", "\n", "self", ".", "v", "=", "attention_layer", ".", "v", "\n", "self", ".", "o", "=", "attention_layer", ".", "o", "\n", "if", "self", ".", "has_relative_attention_bias", ":", "\n", "            ", "self", ".", "relative_attention_bias", "=", "attention_layer", ".", "relative_attention_bias", "\n", "", "self", ".", "pruned_heads", "=", "attention_layer", ".", "pruned_heads", "\n", "self", ".", "gradient_checkpointing", "=", "attention_layer", ".", "gradient_checkpointing", "\n", "\n", "self", ".", "parameterization", "=", "parameterization", "\n", "self", ".", "num_prefix_tokens", "=", "num_prefix_tokens", "\n", "self", ".", "mode", "=", "\"apply\"", "\n", "\n", "self", ".", "setup_prefix", "(", "shared", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.forward": [[42, 151], ["prefix_tuning.T5AttentionPrefixTuning.forward.shape"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "hidden_states", ",", "\n", "mask", "=", "None", ",", "\n", "key_value_states", "=", "None", ",", "\n", "position_bias", "=", "None", ",", "\n", "past_key_value", "=", "None", ",", "\n", "layer_head_mask", "=", "None", ",", "\n", "query_length", "=", "None", ",", "\n", "use_cache", "=", "False", ",", "\n", "output_attentions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Modified from T5Attention forward\n        Self-attention (if key_value_states is None) or attention over source sentence (provided by key_value_states).\n        pask_key_value, query_length, use_cache disabled\n        \"\"\"", "\n", "assert", "past_key_value", "is", "None", "\n", "assert", "query_length", "is", "None", "\n", "assert", "not", "use_cache", "\n", "# Input is (batch_size, seq_length, dim)", "\n", "# Mask is (batch_size, key_length) (non-causal) or (batch_size, key_length, key_length)", "\n", "# past_key_value[0] is (batch_size, n_heads, q_len - 1, dim_per_head)", "\n", "batch_size", ",", "seq_length", "=", "hidden_states", ".", "shape", "[", ":", "2", "]", "\n", "key_length", "=", "seq_length", "if", "key_value_states", "is", "None", "else", "key_value_states", ".", "shape", "[", "1", "]", "\n", "\n", "def", "shape", "(", "states", ")", ":", "\n", "            ", "\"\"\"projection\"\"\"", "\n", "return", "states", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "n_heads", ",", "self", ".", "key_value_proj_dim", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "\n", "", "def", "unshape", "(", "states", ")", ":", "\n", "            ", "\"\"\"reshape\"\"\"", "\n", "return", "states", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "inner_dim", ")", "\n", "\n", "", "def", "project", "(", "hidden_states", ",", "proj_layer", ",", "key_value_states", ",", "prefix_states", ")", ":", "\n", "            ", "\"\"\"projects hidden states correctly to key/query states\"\"\"", "\n", "if", "key_value_states", "is", "None", ":", "\n", "# self-attn", "\n", "                ", "output_states", "=", "proj_layer", "(", "hidden_states", ")", "\n", "", "else", ":", "\n", "# cross-attn", "\n", "                ", "output_states", "=", "proj_layer", "(", "key_value_states", ")", "\n", "", "if", "prefix_states", "is", "not", "None", ":", "\n", "                ", "output_states", "=", "torch", ".", "cat", "(", "[", "prefix_states", ",", "output_states", "]", ",", "dim", "=", "1", ")", "\n", "", "return", "output_states", "\n", "\n", "# get query states", "\n", "", "query_states", "=", "shape", "(", "self", ".", "q", "(", "hidden_states", ")", ")", "# (batch_size, n_heads, seq_length, dim_per_head)", "\n", "\n", "# get key/value states", "\n", "if", "self", ".", "mode", "==", "\"apply\"", ":", "\n", "            ", "prefix", "=", "self", ".", "get_prefix", "(", "batch_size", ")", "\n", "key_length", "+=", "self", ".", "num_prefix_tokens", "\n", "", "else", ":", "\n", "            ", "prefix", "=", "(", "None", ",", "None", ")", "\n", "\n", "", "key_states", "=", "project", "(", "hidden_states", ",", "self", ".", "k", ",", "key_value_states", ",", "prefix", "[", "0", "]", ")", "\n", "value_states", "=", "project", "(", "hidden_states", ",", "self", ".", "v", ",", "key_value_states", ",", "prefix", "[", "1", "]", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"store\"", ":", "\n", "            ", "self", ".", "stored_key_value_states", "=", "(", "key_states", ",", "value_states", ")", "\n", "\n", "", "key_states", ",", "value_states", "=", "shape", "(", "key_states", ")", ",", "shape", "(", "value_states", ")", "\n", "\n", "# compute scores", "\n", "scores", "=", "torch", ".", "matmul", "(", "\n", "query_states", ",", "key_states", ".", "transpose", "(", "3", ",", "2", ")", "\n", ")", "# equivalent of torch.einsum(\"bnqd,bnkd->bnqk\", query_states, key_states), compatible with onnx op>9", "\n", "\n", "if", "position_bias", "is", "None", ":", "\n", "            ", "if", "not", "self", ".", "has_relative_attention_bias", ":", "\n", "                ", "position_bias", "=", "torch", ".", "zeros", "(", "\n", "(", "1", ",", "self", ".", "n_heads", ",", "seq_length", ",", "key_length", ")", ",", "device", "=", "scores", ".", "device", ",", "dtype", "=", "scores", ".", "dtype", "\n", ")", "\n", "if", "self", ".", "gradient_checkpointing", "and", "self", ".", "training", ":", "\n", "                    ", "position_bias", ".", "requires_grad", "=", "True", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "mode", "==", "\"apply\"", ":", "\n", "                    ", "position_bias", "=", "self", ".", "compute_bias", "(", "seq_length", "+", "self", ".", "num_prefix_tokens", ",", "key_length", ")", "[", "\n", ":", ",", ":", ",", "-", "seq_length", ":", ",", ":", "\n", "]", "\n", "", "else", ":", "\n", "                    ", "position_bias", "=", "self", ".", "compute_bias", "(", "seq_length", ",", "key_length", ")", "\n", "\n", "", "", "if", "mask", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "mode", "==", "\"apply\"", ":", "\n", "                    ", "mask", "=", "F", ".", "pad", "(", "mask", ",", "value", "=", "-", "0.0", ",", "pad", "=", "(", "self", ".", "num_prefix_tokens", ",", "0", ")", ")", "\n", "", "position_bias", "=", "position_bias", "+", "mask", "# (batch_size, n_heads, seq_length, key_length)", "\n", "\n", "", "", "scores", "+=", "position_bias", "\n", "attn_weights", "=", "nn", ".", "functional", ".", "softmax", "(", "scores", ".", "float", "(", ")", ",", "dim", "=", "-", "1", ")", ".", "type_as", "(", "\n", "scores", "\n", ")", "# (batch_size, n_heads, seq_length, key_length)", "\n", "attn_weights", "=", "nn", ".", "functional", ".", "dropout", "(", "\n", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", "\n", ")", "# (batch_size, n_heads, seq_length, key_length)", "\n", "\n", "# Mask heads if we want to", "\n", "if", "layer_head_mask", "is", "not", "None", ":", "\n", "            ", "attn_weights", "=", "attn_weights", "*", "layer_head_mask", "\n", "\n", "", "attn_output", "=", "unshape", "(", "torch", ".", "matmul", "(", "attn_weights", ",", "value_states", ")", ")", "# (batch_size, seq_length, dim)", "\n", "attn_output", "=", "self", ".", "o", "(", "attn_output", ")", "\n", "\n", "outputs", "=", "(", "attn_output", ",", ")", "+", "(", "None", ",", ")", "+", "(", "position_bias", ",", ")", "\n", "\n", "if", "output_attentions", ":", "\n", "            ", "outputs", "=", "outputs", "+", "(", "attn_weights", ",", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.setup_prefix": [[152, 167], ["prefix_tuning.T5AttentionPrefixTuning.parameterization.startswith", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "NotImplementedError", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["None"], ["", "def", "setup_prefix", "(", "self", ",", "shared", ")", ":", "\n", "        ", "if", "self", ".", "parameterization", ".", "startswith", "(", "\"mlp\"", ")", ":", "\n", "# hidden_size = int(self.parameterization.split(\"-\")[1])", "\n", "# nn.Embedding(num_prefix_tokens, transformer_config.d_model)", "\n", "# nn.Linear(transformer_config.d_model, hidden_size),", "\n", "            ", "self", ".", "prefix_emb", "=", "shared", "[", "\"prefix_emb\"", "]", "\n", "self", ".", "prefix_mlp", "=", "nn", ".", "Sequential", "(", "\n", "shared", "[", "\"prefix_linear\"", "]", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "shared", "[", "\"prefix_linear\"", "]", ".", "out_features", ",", "self", ".", "inner_dim", "*", "2", ")", ",", "\n", ")", "\n", "", "elif", "self", ".", "parameterization", "==", "\"direct\"", ":", "\n", "            ", "self", ".", "prefix_direct", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "num_prefix_tokens", ",", "self", ".", "inner_dim", "*", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.get_prefix": [[168, 179], ["prefix_tuning.T5AttentionPrefixTuning.parameterization.startswith", "prefix_tuning.T5AttentionPrefixTuning.unsqueeze().expand", "prefix_tuning.T5AttentionPrefixTuning.unsqueeze().expand.chunk", "prefix_tuning.T5AttentionPrefixTuning.prefix_mlp", "NotImplementedError", "prefix_tuning.T5AttentionPrefixTuning.unsqueeze"], "methods", ["None"], ["", "", "def", "get_prefix", "(", "self", ",", "bs", ")", ":", "\n", "        ", "if", "self", ".", "parameterization", ".", "startswith", "(", "\"mlp\"", ")", ":", "\n", "            ", "prefix", "=", "self", ".", "prefix_mlp", "(", "self", ".", "prefix_emb", ".", "weight", ")", "\n", "", "elif", "self", ".", "parameterization", "==", "\"direct\"", ":", "\n", "            ", "prefix", "=", "self", ".", "prefix_direct", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "batch_prefix", "=", "prefix", ".", "unsqueeze", "(", "dim", "=", "0", ")", ".", "expand", "(", "bs", ",", "-", "1", ",", "-", "1", ")", "\n", "key_prefix", ",", "value_prefix", "=", "batch_prefix", ".", "chunk", "(", "dim", "=", "-", "1", ",", "chunks", "=", "2", ")", "\n", "return", "key_prefix", ",", "value_prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.set_mode": [[180, 184], ["None"], "methods", ["None"], ["", "def", "set_mode", "(", "self", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "if", "self", ".", "mode", "==", "\"store\"", ":", "\n", "            ", "self", ".", "stored_key_value_states", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.modify_with_prefix_tuning": [[186, 305], ["os.path.exists", "torch.load", "torch.load", "torch.load", "config.prefix_tuning_parameterization.startswith", "transformer.load_state_dict", "transformers.AutoTokenizer.from_pretrained", "config.prefix_tuning_init_text.split", "input_ids.size", "target_ids.size", "int", "getattr", "setattr", "transformer.cuda", "src.utils.get_optimizer.get_optimizer", "torch.MSELoss", "tqdm.tqdm", "transformer.cpu", "AutoTokenizer.from_pretrained.", "AutoTokenizer.from_pretrained.", "torch.Embedding", "torch.Linear", "prefix_tuning.T5AttentionPrefixTuning", "torch.no_grad", "torch.no_grad", "torch.no_grad", "transformer", "range", "optimizer.zero_grad", "sum", "sum.backward", "optimizer.step", "param_weight.cpu", "torch.save", "torch.save", "torch.save", "config.prefix_tuning_parameterization.split", "print", "transformer.state_dict().items", "getattr", "getattr.set_mode", "input_ids.cuda", "target_ids.cuda", "getattr", "getattr.set_mode", "getattr", "getattr.get_prefix", "list_loss.append", "list_loss.append", "sum.item", "v.item", "transformer.state_dict", "nn.MSELoss.", "nn.MSELoss."], "function", ["home.repos.pwc.inspect_result.r-three_t-few.utils.get_optimizer.get_optimizer", "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.FastWalshHadamard.backward", "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.set_mode", "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.set_mode", "home.repos.pwc.inspect_result.r-three_t-few.models.prefix_tuning.T5AttentionPrefixTuning.get_prefix"], ["", "", "", "def", "modify_with_prefix_tuning", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "transformer", ".", "config", ".", "use_cache", "=", "False", "\n", "transformer", ".", "encoder", ".", "config", ".", "use_cache", "=", "False", "\n", "transformer", ".", "decoder", ".", "config", ".", "use_cache", "=", "False", "\n", "\n", "weight_init_exist", "=", "os", ".", "path", ".", "exists", "(", "config", ".", "prefix_tuning_init_path", ")", "\n", "# Load saved init file", "\n", "if", "weight_init_exist", ":", "\n", "        ", "saved_model", "=", "torch", ".", "load", "(", "config", ".", "prefix_tuning_init_path", ")", "\n", "config", ".", "prefix_tuning_num_input_tokens", "=", "saved_model", "[", "\"config\"", "]", "[", "\"prefix_tuning_num_input_tokens\"", "]", "\n", "config", ".", "prefix_tuning_num_target_tokens", "=", "saved_model", "[", "\"config\"", "]", "[", "\"prefix_tuning_num_target_tokens\"", "]", "\n", "config", ".", "prefix_tuning_parameterization", "=", "saved_model", "[", "\"config\"", "]", "[", "\"prefix_tuning_parameterization\"", "]", "\n", "del", "saved_model", "[", "\"config\"", "]", "\n", "# or Prepare init_text", "\n", "", "elif", "config", ".", "prefix_tuning_init_text", "!=", "\"\"", ":", "\n", "        ", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "config", ".", "origin_model", ")", "\n", "input_text", ",", "target_text", "=", "config", ".", "prefix_tuning_init_text", ".", "split", "(", "\"\\n\"", ")", "\n", "input_ids", "=", "tokenizer", "(", "[", "input_text", "]", ",", "add_special_tokens", "=", "False", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "target_ids", "=", "tokenizer", "(", "[", "target_text", "]", ",", "add_special_tokens", "=", "False", ",", "return_tensors", "=", "\"pt\"", ")", ".", "input_ids", "\n", "config", ".", "prefix_tuning_num_input_tokens", "=", "input_ids", ".", "size", "(", "1", ")", "\n", "config", ".", "prefix_tuning_num_target_tokens", "=", "target_ids", ".", "size", "(", "1", ")", "\n", "\n", "# Modify all attention layers", "\n", "", "attention_groups", "=", "[", "\n", "{", "\n", "\"stack\"", ":", "transformer", ".", "encoder", ",", "\n", "\"index\"", ":", "0", ",", "\n", "\"num_prefix_tokens\"", ":", "config", ".", "prefix_tuning_num_input_tokens", ",", "\n", "\"module_name\"", ":", "\"SelfAttention\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"stack\"", ":", "transformer", ".", "decoder", ",", "\n", "\"index\"", ":", "0", ",", "\n", "\"num_prefix_tokens\"", ":", "config", ".", "prefix_tuning_num_target_tokens", ",", "\n", "\"module_name\"", ":", "\"SelfAttention\"", ",", "\n", "}", ",", "\n", "{", "\n", "\"stack\"", ":", "transformer", ".", "decoder", ",", "\n", "\"index\"", ":", "1", ",", "\n", "\"num_prefix_tokens\"", ":", "config", ".", "prefix_tuning_num_input_tokens", ",", "\n", "\"module_name\"", ":", "\"EncDecAttention\"", ",", "\n", "}", ",", "\n", "]", "\n", "\n", "for", "attention_spec", "in", "attention_groups", ":", "\n", "        ", "if", "config", ".", "prefix_tuning_parameterization", ".", "startswith", "(", "\"mlp\"", ")", ":", "\n", "            ", "hidden_size", "=", "int", "(", "config", ".", "prefix_tuning_parameterization", ".", "split", "(", "\"-\"", ")", "[", "1", "]", ")", "\n", "shared", "=", "{", "\n", "\"prefix_emb\"", ":", "nn", ".", "Embedding", "(", "attention_spec", "[", "\"num_prefix_tokens\"", "]", ",", "transformer", ".", "config", ".", "d_model", ")", ",", "\n", "\"prefix_linear\"", ":", "nn", ".", "Linear", "(", "transformer", ".", "config", ".", "d_model", ",", "hidden_size", ")", ",", "\n", "}", "\n", "", "else", ":", "\n", "            ", "shared", "=", "None", "\n", "\n", "", "for", "t5_block", "in", "attention_spec", "[", "\"stack\"", "]", ".", "block", ":", "\n", "            ", "attention_layer", "=", "getattr", "(", "t5_block", ".", "layer", "[", "attention_spec", "[", "\"index\"", "]", "]", ",", "attention_spec", "[", "\"module_name\"", "]", ")", "\n", "setattr", "(", "\n", "t5_block", ".", "layer", "[", "attention_spec", "[", "\"index\"", "]", "]", ",", "\n", "attention_spec", "[", "\"module_name\"", "]", ",", "\n", "T5AttentionPrefixTuning", "(", "\n", "attention_layer", ",", "\n", "attention_spec", "[", "\"num_prefix_tokens\"", "]", ",", "\n", "config", ".", "prefix_tuning_parameterization", ",", "\n", "shared", "=", "shared", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "# Load saved init to model", "\n", "", "", "if", "weight_init_exist", ":", "\n", "        ", "transformer", ".", "load_state_dict", "(", "saved_model", ",", "strict", "=", "False", ")", "\n", "# or Train prefix to approximate prefix_tuning_init_text", "\n", "", "elif", "config", ".", "prefix_tuning_init_text", "!=", "\"\"", ":", "\n", "# Prepare representation", "\n", "        ", "transformer", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "attention_spec", "in", "attention_groups", ":", "\n", "                ", "for", "t5_block", "in", "attention_spec", "[", "\"stack\"", "]", ".", "block", ":", "\n", "                    ", "attention_layer", "=", "getattr", "(", "t5_block", ".", "layer", "[", "attention_spec", "[", "\"index\"", "]", "]", ",", "attention_spec", "[", "\"module_name\"", "]", ")", "\n", "attention_layer", ".", "set_mode", "(", "\"store\"", ")", "\n", "", "", "transformer", "(", "input_ids", "=", "input_ids", ".", "cuda", "(", ")", ",", "decoder_input_ids", "=", "target_ids", ".", "cuda", "(", ")", ")", "\n", "for", "attention_spec", "in", "attention_groups", ":", "\n", "                ", "for", "t5_block", "in", "attention_spec", "[", "\"stack\"", "]", ".", "block", ":", "\n", "                    ", "attention_layer", "=", "getattr", "(", "t5_block", ".", "layer", "[", "attention_spec", "[", "\"index\"", "]", "]", ",", "attention_spec", "[", "\"module_name\"", "]", ")", "\n", "attention_layer", ".", "set_mode", "(", "\"apply\"", ")", "\n", "\n", "# Train param", "\n", "", "", "", "optimizer", ",", "trainable_param_names", "=", "get_optimizer", "(", "transformer", ",", "config", ")", "\n", "loss_metrics", "=", "nn", ".", "MSELoss", "(", "reduction", "=", "\"sum\"", ")", "\n", "for", "step", "in", "tqdm", "(", "range", "(", "config", ".", "num_steps", ")", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "list_loss", "=", "[", "]", "\n", "for", "attention_spec", "in", "attention_groups", ":", "\n", "                ", "for", "t5_block", "in", "attention_spec", "[", "\"stack\"", "]", ".", "block", ":", "\n", "                    ", "attention_layer", "=", "getattr", "(", "t5_block", ".", "layer", "[", "attention_spec", "[", "\"index\"", "]", "]", ",", "attention_spec", "[", "\"module_name\"", "]", ")", "\n", "prediction", "=", "attention_layer", ".", "get_prefix", "(", "1", ")", "\n", "target", "=", "attention_layer", ".", "stored_key_value_states", "\n", "list_loss", ".", "append", "(", "loss_metrics", "(", "prediction", "[", "0", "]", ",", "target", "[", "0", "]", ")", "/", "(", "target", "[", "0", "]", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "list_loss", ".", "append", "(", "loss_metrics", "(", "prediction", "[", "1", "]", ",", "target", "[", "1", "]", ")", "/", "(", "target", "[", "1", "]", "**", "2", ")", ".", "sum", "(", ")", ")", "\n", "", "", "loss", "=", "sum", "(", "list_loss", ")", "\n", "if", "step", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "step", ",", "loss", ".", "item", "(", ")", ",", "[", "v", ".", "item", "(", ")", "for", "v", "in", "list_loss", "]", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "trainable_states", "=", "{", "\n", "param_name", ":", "param_weight", ".", "cpu", "(", ")", "\n", "for", "param_name", ",", "param_weight", "in", "transformer", ".", "state_dict", "(", ")", ".", "items", "(", ")", "\n", "if", "param_name", "in", "trainable_param_names", "\n", "}", "\n", "if", "config", ".", "prefix_tuning_init_path", "is", "not", "None", ":", "\n", "            ", "trainable_states", "[", "\"config\"", "]", "=", "{", "\n", "\"prefix_tuning_num_input_tokens\"", ":", "config", ".", "prefix_tuning_num_input_tokens", ",", "\n", "\"prefix_tuning_num_target_tokens\"", ":", "config", ".", "prefix_tuning_num_target_tokens", ",", "\n", "\"prefix_tuning_parameterization\"", ":", "config", ".", "prefix_tuning_parameterization", ",", "\n", "}", "\n", "torch", ".", "save", "(", "trainable_states", ",", "config", ".", "prefix_tuning_init_path", ")", "\n", "", "transformer", ".", "cpu", "(", ")", "\n", "\n", "", "return", "transformer", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.models.lora.LoRALinear.__init__": [[8, 34], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "linear_layer", ",", "rank", ",", "scaling_rank", ",", "init_scale", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "linear_layer", ".", "in_features", "\n", "self", ".", "out_features", "=", "linear_layer", ".", "out_features", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "scaling_rank", "=", "scaling_rank", "\n", "self", ".", "weight", "=", "linear_layer", ".", "weight", "\n", "self", ".", "bias", "=", "linear_layer", ".", "bias", "\n", "if", "self", ".", "rank", ">", "0", ":", "\n", "            ", "self", ".", "lora_a", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "rank", ",", "linear_layer", ".", "in_features", ")", "*", "init_scale", ")", "\n", "if", "init_scale", "<", "0", ":", "\n", "                ", "self", ".", "lora_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "linear_layer", ".", "out_features", ",", "rank", ")", "*", "init_scale", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "lora_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "linear_layer", ".", "out_features", ",", "rank", ")", ")", "\n", "", "", "if", "self", ".", "scaling_rank", ":", "\n", "            ", "self", ".", "multi_lora_a", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "ones", "(", "self", ".", "scaling_rank", ",", "linear_layer", ".", "in_features", ")", "\n", "+", "torch", ".", "randn", "(", "self", ".", "scaling_rank", ",", "linear_layer", ".", "in_features", ")", "*", "init_scale", "\n", ")", "\n", "if", "init_scale", "<", "0", ":", "\n", "                ", "self", ".", "multi_lora_b", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "ones", "(", "linear_layer", ".", "out_features", ",", "self", ".", "scaling_rank", ")", "\n", "+", "torch", ".", "randn", "(", "linear_layer", ".", "out_features", ",", "self", ".", "scaling_rank", ")", "*", "init_scale", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "multi_lora_b", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "linear_layer", ".", "out_features", ",", "self", ".", "scaling_rank", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.lora.LoRALinear.forward": [[35, 53], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "lora.LoRALinear.multi_lora_b.flatten", "lora.LoRALinear.multi_lora_a.flatten", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "scaling_rank", "==", "1", "and", "self", ".", "rank", "==", "0", ":", "\n", "# parsimonious implementation for ia3 and lora scaling", "\n", "            ", "if", "self", ".", "multi_lora_a", ".", "requires_grad", ":", "\n", "                ", "hidden", "=", "F", ".", "linear", "(", "(", "input", "*", "self", ".", "multi_lora_a", ".", "flatten", "(", ")", ")", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "", "else", ":", "\n", "                ", "hidden", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "", "if", "self", ".", "multi_lora_b", ".", "requires_grad", ":", "\n", "                ", "hidden", "=", "hidden", "*", "self", ".", "multi_lora_b", ".", "flatten", "(", ")", "\n", "", "return", "hidden", "\n", "", "else", ":", "\n", "# general implementation for lora (adding and scaling)", "\n", "            ", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "scaling_rank", ":", "\n", "                ", "weight", "=", "weight", "*", "torch", ".", "matmul", "(", "self", ".", "multi_lora_b", ",", "self", ".", "multi_lora_a", ")", "/", "self", ".", "scaling_rank", "\n", "", "if", "self", ".", "rank", ":", "\n", "                ", "weight", "=", "weight", "+", "torch", ".", "matmul", "(", "self", ".", "lora_b", ",", "self", ".", "lora_a", ")", "/", "self", ".", "rank", "\n", "", "return", "F", ".", "linear", "(", "input", ",", "weight", ",", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.lora.LoRALinear.extra_repr": [[54, 57], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"in_features={}, out_features={}, bias={}, rank={}, scaling_rank={}\"", ".", "format", "(", "\n", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "self", ".", "bias", "is", "not", "None", ",", "self", ".", "rank", ",", "self", ".", "scaling_rank", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.lora.modify_with_lora": [[60, 74], ["dict().items", "re.fullmatch", "dict", "dict().items", "transformer.named_modules", "re.fullmatch", "dict", "isinstance", "setattr", "module.named_children", "lora.LoRALinear", "type"], "function", ["None"], ["", "", "def", "modify_with_lora", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "for", "m_name", ",", "module", "in", "dict", "(", "transformer", ".", "named_modules", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "re", ".", "fullmatch", "(", "config", ".", "lora_modules", ",", "m_name", ")", ":", "\n", "            ", "for", "c_name", ",", "layer", "in", "dict", "(", "module", ".", "named_children", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "re", ".", "fullmatch", "(", "config", ".", "lora_layers", ",", "c_name", ")", ":", "\n", "                    ", "assert", "isinstance", "(", "\n", "layer", ",", "nn", ".", "Linear", "\n", ")", ",", "f\"LoRA can only be applied to torch.nn.Linear, but {layer} is {type(layer)}.\"", "\n", "setattr", "(", "\n", "module", ",", "\n", "c_name", ",", "\n", "LoRALinear", "(", "layer", ",", "config", ".", "lora_rank", ",", "config", ".", "lora_scaling_rank", ",", "config", ".", "lora_init_scale", ")", ",", "\n", ")", "\n", "", "", "", "", "return", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.bitfit.modify_with_bitfit": [[6, 13], ["dict().items", "re.fullmatch", "dict", "dict().items", "transformer.named_modules", "re.fullmatch", "dict", "torch.Parameter", "module.named_children", "torch.zeros", "torch.zeros"], "function", ["None"], ["def", "modify_with_bitfit", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "for", "m_name", ",", "module", "in", "dict", "(", "transformer", ".", "named_modules", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "re", ".", "fullmatch", "(", "config", ".", "bitfit_modules", ",", "m_name", ")", ":", "\n", "            ", "for", "c_name", ",", "layer", "in", "dict", "(", "module", ".", "named_children", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "                ", "if", "re", ".", "fullmatch", "(", "config", ".", "bitfit_layers", ",", "c_name", ")", ":", "\n", "                    ", "layer", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "layer", ".", "out_features", ")", ")", "\n", "", "", "", "", "return", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_init": [[5, 11], ["print", "torch.load", "pl_module.model.named_parameters", "mask_dict[].to"], "function", ["None"], ["def", "fishmask_plugin_on_init", "(", "pl_module", ")", ":", "\n", "    ", "if", "pl_module", ".", "config", ".", "fishmask_mode", "==", "\"apply\"", ":", "\n", "        ", "print", "(", "f\"Load gradient mask from {pl_module.config.fishmask_path}\"", ")", "\n", "mask_dict", "=", "torch", ".", "load", "(", "pl_module", ".", "config", ".", "fishmask_path", ")", "\n", "for", "param_name", ",", "param", "in", "pl_module", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "stored_mask", "=", "mask_dict", "[", "param_name", "]", ".", "to", "(", "\"cuda\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_optimizer_step": [[13, 25], ["pl_module.model.named_parameters", "param.grad.zero_", "pl_module.model.named_parameters", "ValueError", "hasattr", "torch.zeros_like", "torch.square"], "function", ["None"], ["", "", "", "def", "fishmask_plugin_on_optimizer_step", "(", "pl_module", ")", ":", "\n", "    ", "if", "pl_module", ".", "config", ".", "fishmask_mode", "==", "\"create\"", ":", "\n", "        ", "for", "name", ",", "param", "in", "pl_module", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "hasattr", "(", "param", ",", "\"stored_grad\"", ")", ":", "\n", "                ", "param", ".", "stored_grad", "=", "torch", ".", "zeros_like", "(", "param", ".", "data", ")", "\n", "", "param", ".", "stored_grad", "+=", "torch", ".", "square", "(", "param", ".", "grad", ")", "/", "pl_module", ".", "config", ".", "num_shot", "\n", "param", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "elif", "pl_module", ".", "config", ".", "fishmask_mode", "==", "\"apply\"", ":", "\n", "        ", "for", "name", ",", "param", "in", "pl_module", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "grad", ".", "data", "*=", "param", ".", "stored_mask", "\n", "", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "f\"Invalid fishmask_mode {pl_module.config.fishmask_mode}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.fishmask.fishmask_plugin_on_end": [[27, 63], ["pl_module.model.named_parameters", "torch.cat().to", "int", "torch.zeros", "sizes.items", "mask_dict.items", "print", "os.path.join", "torch.save", "print", "param.size", "torch.cat().to.append", "param.numel", "torch.topk", "torch.zeros.long().sum", "len", "masks[].reshape", "len", "param_mask.long().sum().item", "param_mask.numel", "param.stored_grad.view", "torch.cat", "param_size.numel", "torch.zeros.long", "param_mask.long().sum", "param_mask.long"], "function", ["None"], ["", "", "def", "fishmask_plugin_on_end", "(", "pl_module", ")", ":", "\n", "    ", "if", "pl_module", ".", "config", ".", "fishmask_mode", "==", "\"create\"", ":", "\n", "        ", "sizes", "=", "{", "}", "\n", "tensors", "=", "[", "]", "\n", "all_params_size", "=", "0", "\n", "for", "param_name", ",", "param", "in", "pl_module", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "sizes", "[", "param_name", "]", "=", "param", ".", "size", "(", ")", "\n", "tensors", ".", "append", "(", "param", ".", "stored_grad", ".", "view", "(", "-", "1", ")", ")", "\n", "all_params_size", "+=", "param", ".", "numel", "(", ")", "\n", "", "tensors", "=", "torch", ".", "cat", "(", "tensors", ",", "0", ")", ".", "to", "(", "\"cpu\"", ")", "\n", "keep_num", "=", "int", "(", "all_params_size", "*", "pl_module", ".", "config", ".", "fishmask_keep_ratio", ")", "\n", "assert", "keep_num", ">", "0", "\n", "top_pos", "=", "torch", ".", "topk", "(", "tensors", ",", "keep_num", ")", "[", "1", "]", "\n", "masks", "=", "torch", ".", "zeros", "(", "tensors", ".", "shape", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "masks", "[", "top_pos", "]", "=", "True", "\n", "del", "tensors", "\n", "assert", "masks", ".", "long", "(", ")", ".", "sum", "(", ")", "==", "len", "(", "top_pos", ")", "\n", "mask_dict", "=", "{", "}", "\n", "\n", "now_idx", "=", "0", "\n", "for", "param_name", ",", "param_size", "in", "sizes", ".", "items", "(", ")", ":", "\n", "            ", "end_idx", "=", "now_idx", "+", "param_size", ".", "numel", "(", ")", "\n", "mask_dict", "[", "param_name", "]", "=", "masks", "[", "now_idx", ":", "end_idx", "]", ".", "reshape", "(", "param_size", ")", "\n", "now_idx", "=", "end_idx", "\n", "", "assert", "now_idx", "==", "len", "(", "masks", ")", "\n", "\n", "all_params_size", "=", "0", "\n", "trainable_weight_size", "=", "0", "\n", "for", "param_name", ",", "param_mask", "in", "mask_dict", ".", "items", "(", ")", ":", "\n", "            ", "trainable_weight_size", "+=", "param_mask", ".", "long", "(", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "all_params_size", "+=", "param_mask", ".", "numel", "(", ")", "\n", "\n", "", "print", "(", "f\"Trainable parameters: {(trainable_weight_size) / all_params_size * 100:.3f} %\"", ")", "\n", "fishmask_path", "=", "os", ".", "path", ".", "join", "(", "pl_module", ".", "config", ".", "exp_dir", ",", "\"mask.bin\"", ")", "\n", "torch", ".", "save", "(", "mask_dict", ",", "fishmask_path", ")", "\n", "print", "(", "f\"Save gradient mask to {fishmask_path}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.models.modify_model.modify_transformer": [[16, 29], ["ValueError"], "function", ["None"], ["def", "modify_transformer", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "if", "config", ".", "model_modifier", "==", "\"intrinsic\"", ":", "\n", "        ", "from", ".", "intrinsic", "import", "modify_with_intrinsic_model", "\n", "\n", "modifier_dict", "[", "\"intrinsic\"", "]", "=", "modify_with_intrinsic_model", "\n", "\n", "", "if", "config", ".", "model_modifier", ":", "\n", "        ", "if", "config", ".", "model_modifier", "in", "modifier_dict", ":", "\n", "            ", "transformer", "=", "modifier_dict", "[", "config", ".", "model_modifier", "]", "(", "transformer", ",", "config", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Model modifier '{config.model_modifier}' not found.\"", ")", "\n", "\n", "", "", "return", "transformer", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerFFWithAdapter.__init__": [[19, 25], ["torch.Module.__init__", "adapters.get_adapter"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.get_adapter"], ["    ", "def", "__init__", "(", "self", ",", "T5LayerFF", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "DenseReluDense", "=", "T5LayerFF", ".", "DenseReluDense", "\n", "self", ".", "adapter", "=", "get_adapter", "(", "config", ".", "adapter_type", ")", "(", "config", ",", "transformer_config", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerFF", ".", "layer_norm", "\n", "self", ".", "dropout", "=", "T5LayerFF", ".", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerFFWithAdapter.forward": [[26, 32], ["adapters.T5LayerFFWithAdapter.layer_norm", "adapters.T5LayerFFWithAdapter.DenseReluDense", "adapters.T5LayerFFWithAdapter.adapter", "adapters.T5LayerFFWithAdapter.dropout"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "hidden_states", ")", ":", "\n", "        ", "forwarded_states", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "forwarded_states", "=", "self", ".", "DenseReluDense", "(", "forwarded_states", ")", "\n", "adapter_output", "=", "self", ".", "adapter", "(", "forwarded_states", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "dropout", "(", "adapter_output", ")", "\n", "return", "hidden_states", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerSelfAttentionWithAdapter.__init__": [[35, 41], ["torch.Module.__init__", "adapters.get_adapter"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.get_adapter"], ["    ", "def", "__init__", "(", "self", ",", "T5LayerSelfAttention", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "SelfAttention", "=", "T5LayerSelfAttention", ".", "SelfAttention", "\n", "self", ".", "adapter", "=", "get_adapter", "(", "config", ".", "adapter_type", ")", "(", "config", ",", "transformer_config", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerSelfAttention", ".", "layer_norm", "\n", "self", ".", "dropout", "=", "T5LayerSelfAttention", ".", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerSelfAttentionWithAdapter.forward": [[42, 66], ["adapters.T5LayerSelfAttentionWithAdapter.layer_norm", "adapters.T5LayerSelfAttentionWithAdapter.SelfAttention", "adapters.T5LayerSelfAttentionWithAdapter.adapter", "adapters.T5LayerSelfAttentionWithAdapter.dropout"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "hidden_states", ",", "\n", "attention_mask", "=", "None", ",", "\n", "position_bias", "=", "None", ",", "\n", "layer_head_mask", "=", "None", ",", "\n", "past_key_value", "=", "None", ",", "\n", "use_cache", "=", "False", ",", "\n", "output_attentions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "normed_hidden_states", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "SelfAttention", "(", "\n", "normed_hidden_states", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "layer_head_mask", "=", "layer_head_mask", ",", "\n", "past_key_value", "=", "past_key_value", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "output_attentions", "=", "output_attentions", ",", "\n", ")", "\n", "adapter_output", "=", "self", ".", "adapter", "(", "attention_output", "[", "0", "]", ")", "\n", "hidden_states", "=", "hidden_states", "+", "self", ".", "dropout", "(", "adapter_output", ")", "\n", "outputs", "=", "(", "hidden_states", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerCrossAttentionWithAdapter.__init__": [[69, 75], ["torch.Module.__init__", "adapters.get_adapter"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.get_adapter"], ["    ", "def", "__init__", "(", "self", ",", "T5LayerCrossAttention", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "EncDecAttention", "=", "T5LayerCrossAttention", ".", "EncDecAttention", "\n", "self", ".", "adapter", "=", "get_adapter", "(", "config", ".", "adapter_type", ")", "(", "config", ",", "transformer_config", ")", "\n", "self", ".", "layer_norm", "=", "T5LayerCrossAttention", ".", "layer_norm", "\n", "self", ".", "dropout", "=", "T5LayerCrossAttention", ".", "dropout", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.T5LayerCrossAttentionWithAdapter.forward": [[76, 104], ["adapters.T5LayerCrossAttentionWithAdapter.layer_norm", "adapters.T5LayerCrossAttentionWithAdapter.EncDecAttention", "adapters.T5LayerCrossAttentionWithAdapter.adapter", "adapters.T5LayerCrossAttentionWithAdapter.dropout"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "hidden_states", ",", "\n", "key_value_states", ",", "\n", "attention_mask", "=", "None", ",", "\n", "position_bias", "=", "None", ",", "\n", "layer_head_mask", "=", "None", ",", "\n", "past_key_value", "=", "None", ",", "\n", "use_cache", "=", "False", ",", "\n", "query_length", "=", "None", ",", "\n", "output_attentions", "=", "False", ",", "\n", ")", ":", "\n", "        ", "normed_hidden_states", "=", "self", ".", "layer_norm", "(", "hidden_states", ")", "\n", "attention_output", "=", "self", ".", "EncDecAttention", "(", "\n", "normed_hidden_states", ",", "\n", "mask", "=", "attention_mask", ",", "\n", "key_value_states", "=", "key_value_states", ",", "\n", "position_bias", "=", "position_bias", ",", "\n", "layer_head_mask", "=", "layer_head_mask", ",", "\n", "past_key_value", "=", "past_key_value", ",", "\n", "use_cache", "=", "use_cache", ",", "\n", "query_length", "=", "query_length", ",", "\n", "output_attentions", "=", "output_attentions", ",", "\n", ")", "\n", "adapter_output", "=", "self", ".", "adapter", "(", "attention_output", "[", "0", "]", ")", "\n", "layer_output", "=", "hidden_states", "+", "self", ".", "dropout", "(", "adapter_output", ")", "\n", "outputs", "=", "(", "layer_output", ",", ")", "+", "attention_output", "[", "1", ":", "]", "# add attentions if we output them", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.get_adapter": [[7, 16], ["ValueError"], "function", ["None"], ["def", "get_adapter", "(", "adapter_type", ")", ":", "\n", "    ", "if", "adapter_type", "==", "\"normal\"", ":", "\n", "        ", "return", "Adapter", "\n", "", "elif", "adapter_type", "==", "\"lowrank\"", ":", "\n", "        ", "return", "LowRankAdapter", "\n", "", "elif", "adapter_type", "==", "\"compacter\"", ":", "\n", "        ", "return", "HyperComplexAdapter", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Not Implemented\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.adapters.modify_with_adapters": [[106, 141], ["dict().items", "re.fullmatch", "dict", "torch.ModuleList", "nn.ModuleList.append", "transformer.named_modules", "nn.ModuleList.append", "nn.ModuleList.append", "adapters.T5LayerFFWithAdapter", "adapters.T5LayerSelfAttentionWithAdapter", "nn.ModuleList.append", "nn.ModuleList.append", "adapters.T5LayerCrossAttentionWithAdapter"], "function", ["None"], ["", "", "def", "modify_with_adapters", "(", "transformer", ",", "config", ")", ":", "\n", "    ", "for", "m_name", ",", "module", "in", "dict", "(", "transformer", ".", "named_modules", "(", ")", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "re", ".", "fullmatch", "(", "\".*block[.][0-9]*\"", ",", "m_name", ")", ":", "\n", "            ", "layer", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "(", "config", ".", "compacter_add_compacter_in_self_attention", ")", ":", "\n", "                ", "layer", ".", "append", "(", "\n", "T5LayerSelfAttentionWithAdapter", "(", "\n", "module", ".", "layer", "[", "0", "]", ",", "\n", "config", ",", "\n", "transformer", ".", "config", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "layer", ".", "append", "(", "module", ".", "layer", "[", "0", "]", ")", "\n", "", "if", "module", ".", "is_decoder", ":", "\n", "                ", "if", "(", "config", ".", "compacter_add_compacter_in_cross_attention", ")", ":", "\n", "                    ", "layer", ".", "append", "(", "\n", "T5LayerCrossAttentionWithAdapter", "(", "\n", "module", ".", "layer", "[", "1", "]", ",", "\n", "config", ",", "\n", "transformer", ".", "config", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "layer", ".", "append", "(", "module", ".", "layer", "[", "1", "]", ")", "\n", "\n", "", "", "layer", ".", "append", "(", "\n", "T5LayerFFWithAdapter", "(", "\n", "module", ".", "layer", "[", "2", "]", "if", "module", ".", "is_decoder", "else", "module", ".", "layer", "[", "1", "]", ",", "\n", "config", ",", "\n", "transformer", ".", "config", ",", "\n", ")", "\n", ")", "\n", "module", ".", "layer", "=", "layer", "\n", "", "", "return", "transformer", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.FastWalshHadamard.forward": [[124, 131], ["ctx.save_for_backward", "torch.tensor().to", "fwh_cuda.fast_walsh_hadamard_transform", "intrinsic.fast_walsh_hadamard_torched", "input.float", "input.float", "torch.tensor", "numpy.sqrt", "float", "input.size"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fast_walsh_hadamard_torched"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "torch", ".", "tensor", "(", "[", "1", "/", "np", ".", "sqrt", "(", "float", "(", "input", ".", "size", "(", "0", ")", ")", ")", "]", ")", ".", "to", "(", "input", ")", ")", "\n", "if", "input", ".", "is_cuda", ":", "\n", "            ", "return", "fast_walsh_hadamard_transform_cuda", "(", "input", ".", "float", "(", ")", ",", "False", ")", "\n", "", "else", ":", "\n", "            ", "return", "fast_walsh_hadamard_torched", "(", "input", ".", "float", "(", ")", ",", "normalize", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.FastWalshHadamard.backward": [[132, 139], ["fwh_cuda.fast_walsh_hadamard_transform.to", "fast_walsh_hadamard_torched().to", "fwh_cuda.fast_walsh_hadamard_transform", "intrinsic.fast_walsh_hadamard_torched", "grad_output.clone().float", "grad_output.clone().float", "grad_output.clone", "grad_output.clone"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fast_walsh_hadamard_torched"], ["", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "(", "input", ",", ")", "=", "ctx", ".", "saved_tensors", "\n", "if", "grad_output", ".", "is_cuda", ":", "\n", "            ", "return", "input", "*", "fast_walsh_hadamard_transform_cuda", "(", "grad_output", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "False", ")", ".", "to", "(", "grad_output", ")", "\n", "", "else", ":", "\n", "            ", "return", "input", "*", "fast_walsh_hadamard_torched", "(", "grad_output", ".", "clone", "(", ")", ".", "float", "(", ")", ",", "normalize", "=", "False", ")", ".", "to", "(", "grad_output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.__init__": [[142, 190], ["set", "dict", "len", "module.named_parameters", "torch.nn.Parameter", "list", "torch.zeros", "torch.nn.Parameter", "module.named_parameters", "param.clone().detach().requires_grad_().to", "numpy.sum", "intrinsic.IntrinsicDimensionLight.get_projection_params", "intrinsic.IntrinsicDimensionLight.name_base_localname.append", "param.requires_grad_", "torch.ones", "any", "param.clone().detach().requires_grad_().to.size", "localname.split", "base.__getattr__.__getattr__.__getattr__", "len", "param.clone().detach().requires_grad_", "param.clone().detach", "param.clone"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.get_projection_params"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "module", ":", "nn", ".", "Module", ",", "\n", "intrinsic_dimension", ":", "int", ",", "\n", "str_filter", ":", "Set", "[", "str", "]", "=", "set", "(", ")", ",", "\n", "said", "=", "False", ",", "\n", "projection", "=", "\"fastfood\"", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Adds hook only for the parameters selected inside the str_filter, and if str_filter is empty, this selects\n        all the parameters with gradient = True.\n        \"\"\"", "\n", "self", ".", "projection", "=", "projection", "\n", "self", ".", "name_base_localname", "=", "[", "]", "\n", "self", ".", "initial_value", "=", "dict", "(", ")", "\n", "self", ".", "projection_params", "=", "{", "}", "\n", "self", ".", "said", "=", "said", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "said_size", "=", "len", "(", "list", "(", "module", ".", "named_parameters", "(", ")", ")", ")", "\n", "if", "self", ".", "said", ":", "\n", "            ", "assert", "intrinsic_dimension", ">", "self", ".", "said_size", "\n", "intrinsic_dimension", "-=", "self", ".", "said_size", "+", "1", "\n", "\n", "", "length", "=", "0", "\n", "for", "name", ",", "param", "in", "module", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "param", ".", "requires_grad", "and", "(", "len", "(", "str_filter", ")", "==", "0", "or", "any", "(", "[", "x", "in", "name", "for", "x", "in", "str_filter", "]", ")", ")", ":", "\n", "                ", "length", "+=", "1", "\n", "self", ".", "initial_value", "[", "name", "]", "=", "v0", "=", "param", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "requires_grad_", "(", "False", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "# DD = np.prod(v0.size())", "\n", "DD", "=", "np", ".", "sum", "(", "v0", ".", "size", "(", ")", ")", "\n", "self", ".", "projection_params", "[", "name", "]", "=", "self", ".", "get_projection_params", "(", "DD", ",", "self", ".", "device", ")", "\n", "base", ",", "localname", "=", "module", ",", "name", "\n", "while", "\".\"", "in", "localname", ":", "\n", "                    ", "prefix", ",", "localname", "=", "localname", ".", "split", "(", "\".\"", ",", "1", ")", "\n", "base", "=", "base", ".", "__getattr__", "(", "prefix", ")", "\n", "", "self", ".", "name_base_localname", ".", "append", "(", "(", "name", ",", "base", ",", "localname", ")", ")", "\n", "param", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "self", ".", "intrinsic_dimension", "=", "intrinsic_dimension", "\n", "self", ".", "intrinsic_parameter", "=", "nn", ".", "Parameter", "(", "torch", ".", "zeros", "(", "(", "intrinsic_dimension", ")", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "module", ".", "intrinsic_parameter", "=", "self", ".", "intrinsic_parameter", "\n", "# module.register_parameter(\"intrinsic_parameter\", self.intrinsic_parameter)", "\n", "# setattr(module, \"intrinsic_parameter\", self.intrinsic_parameter)", "\n", "\n", "if", "said", ":", "\n", "            ", "self", ".", "intrinsic_parameter_said", "=", "nn", ".", "Parameter", "(", "torch", ".", "ones", "(", "(", "length", ")", ",", "device", "=", "self", ".", "device", ")", ")", "\n", "module", ".", "intrinsic_parameter_said", "=", "self", ".", "intrinsic_parameter_said", "\n", "# module.register_parameter(\"intrinsic_parameter_said\", self.intrinsic_parameter_said)", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.get_projection_params": [[193, 198], ["intrinsic.fastfood_vars", "intrinsic.random_vars"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fastfood_vars", "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.random_vars"], ["", "", "def", "get_projection_params", "(", "self", ",", "DD", ",", "device", ")", ":", "\n", "        ", "if", "self", ".", "projection", "==", "\"fastfood\"", ":", "\n", "            ", "return", "fastfood_vars", "(", "DD", ",", "device", ")", "\n", "", "elif", "self", ".", "projection", "==", "\"random\"", ":", "\n", "            ", "return", "random_vars", "(", "DD", ",", "self", ".", "intrinsic_dimension", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.move_to": [[199, 209], ["isinstance", "tuple", "x_tuple.to", "isinstance", "a.append", "a.append", "x.to"], "methods", ["None"], ["", "", "def", "move_to", "(", "self", ",", "x_tuple", ",", "target", ")", ":", "\n", "        ", "if", "isinstance", "(", "x_tuple", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "return", "x_tuple", ".", "to", "(", "target", ")", "\n", "", "a", "=", "[", "]", "\n", "for", "x", "in", "x_tuple", ":", "\n", "            ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "                ", "a", ".", "append", "(", "x", ".", "to", "(", "target", ")", ")", "\n", "", "else", ":", "\n", "                ", "a", ".", "append", "(", "x", ")", "\n", "", "", "return", "tuple", "(", "a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.get_projected_param": [[221, 229], ["intrinsic.fastfood_torched", "random_torched().view", "intrinsic.random_torched"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fastfood_torched", "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.random_torched"], ["", "def", "get_projected_param", "(", "self", ",", "intrinsic_vec", ",", "DD", ",", "projection_params", ",", "init_shape", ")", ":", "\n", "        ", "if", "self", ".", "projection", "==", "\"fastfood\"", ":", "\n", "# return fastfood_torched(intrinsic_vec, DD, projection_params).view(", "\n", "#         init_shape", "\n", "#     )", "\n", "            ", "return", "fastfood_torched", "(", "intrinsic_vec", ",", "DD", ",", "projection_params", ")", "\n", "", "elif", "self", ".", "projection", "==", "\"random\"", ":", "\n", "            ", "return", "random_torched", "(", "intrinsic_vec", ",", "projection_params", ")", ".", "view", "(", "init_shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.__call__": [[230, 273], ["intrinsic.IntrinsicDimensionLight.initial_value[].size", "numpy.sum", "intrinsic.IntrinsicDimensionLight.get_projected_param", "delattr", "setattr", "intrinsic.IntrinsicDimensionLight.initial_value[].to", "intrinsic.IntrinsicDimensionLight.move_to", "len", "torch.addmm", "param.to.to.to", "getattr", "getattr", "first_vector.unsqueeze", "second_vector.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.get_projected_param", "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.move_to"], ["", "", "def", "__call__", "(", "self", ",", "module", ")", ":", "\n", "        ", "index", "=", "0", "\n", "# with torch.enable_grad():", "\n", "for", "name", ",", "base", ",", "localname", "in", "self", ".", "name_base_localname", ":", "\n", "            ", "if", "localname", "==", "\"intrinsic_parameter\"", ":", "\n", "                ", "continue", "\n", "", "if", "self", ".", "device", "==", "\"cpu\"", ":", "\n", "                ", "self", ".", "initial_value", "[", "name", "]", "=", "self", ".", "initial_value", "[", "name", "]", ".", "to", "(", "getattr", "(", "base", ",", "localname", ")", ")", "\n", "device_dtype", "=", "getattr", "(", "base", ",", "localname", ")", ".", "dtype", "\n", "\n", "", "init_shape", "=", "self", ".", "initial_value", "[", "name", "]", ".", "size", "(", ")", "\n", "# DD = np.prod(init_shape)", "\n", "DD", "=", "np", ".", "sum", "(", "init_shape", ")", "\n", "if", "self", ".", "device", "==", "\"cpu\"", ":", "\n", "                ", "self", ".", "projection_params", "[", "name", "]", "=", "self", ".", "move_to", "(", "\n", "self", ".", "projection_params", "[", "name", "]", ",", "module", ".", "intrinsic_parameter", ".", "device", "\n", ")", "\n", "\n", "# ray = self.get_projected_param(module.intrinsic_parameter, DD, self.projection_params[name], init_shape)", "\n", "", "ray", "=", "self", ".", "get_projected_param", "(", "module", ".", "intrinsic_parameter", ",", "DD", ",", "self", ".", "projection_params", "[", "name", "]", ",", "None", ")", "\n", "if", "len", "(", "init_shape", ")", "==", "2", ":", "\n", "                ", "first_vector", "=", "ray", "[", "0", ":", "init_shape", "[", "0", "]", "]", "\n", "if", "self", ".", "said", ":", "\n", "                    ", "first_vector", "=", "first_vector", "*", "self", ".", "intrinsic_parameter_said", "[", "index", "]", "\n", "", "second_vector", "=", "ray", "[", "init_shape", "[", "0", "]", ":", "]", "\n", "param", "=", "torch", ".", "addmm", "(", "self", ".", "initial_value", "[", "name", "]", ",", "first_vector", ".", "unsqueeze", "(", "1", ")", ",", "second_vector", ".", "unsqueeze", "(", "0", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "said", ":", "\n", "                    ", "ray", "=", "ray", "*", "self", ".", "intrinsic_parameter_said", "[", "index", "]", "\n", "", "param", "=", "self", ".", "initial_value", "[", "name", "]", "+", "ray", "\n", "\n", "", "if", "self", ".", "device", "==", "\"cpu\"", ":", "\n", "                ", "param", "=", "param", ".", "to", "(", "device_dtype", ")", "\n", "\n", "# if self.said:", "\n", "#     ray = ray * self.intrinsic_parameter_said[index]", "\n", "# if self.device == \"cpu\":", "\n", "#     param = (self.initial_value[name] + ray).to(device_dtype)", "\n", "# else:", "\n", "#     param = (self.initial_value[name] + ray)", "\n", "", "delattr", "(", "base", ",", "localname", ")", "\n", "setattr", "(", "base", ",", "localname", ",", "param", ")", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.IntrinsicDimensionLight.apply": [[274, 287], ["set", "intrinsic.IntrinsicDimensionLight"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "apply", "(", "\n", "module", ",", "intrinsic_dimension", ",", "output_dir", ",", "str_filter", "=", "set", "(", ")", ",", "said", "=", "False", ",", "projection", "=", "\"fastfood\"", ",", "device", "=", "\"cuda\"", "\n", ")", ":", "\n", "# for k, hook in module._forward_pre_hooks.items():", "\n", "#     if isinstance(hook, IntrinsicDimensionLight) and hook.name == name:", "\n", "#         raise RuntimeError(", "\n", "#             \"Cannot register two intrinsic dimension hooks on \" \"the same parameter {}\".format(name)", "\n", "#         )", "\n", "        ", "fn", "=", "IntrinsicDimensionLight", "(", "module", ",", "intrinsic_dimension", ",", "output_dir", ",", "str_filter", ",", "said", ",", "projection", ",", "device", ")", "\n", "module", ".", "intrinsic_fn", "=", "fn", "\n", "# module.register_forward_pre_hook(fn)", "\n", "return", "fn", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fast_walsh_hadamard_torched": [[13, 46], ["x.size", "int", "x.view", "range", "torch.cat.view", "round", "int", "int", "torch.chunk", "torch.cat", "len", "torch.prod", "torch.prod", "len", "numpy.sqrt", "len", "numpy.log", "numpy.log", "torch.tensor", "torch.tensor", "float"], "function", ["None"], ["def", "fast_walsh_hadamard_torched", "(", "x", ",", "axis", ":", "int", "=", "0", ",", "normalize", ":", "bool", "=", "True", ")", ":", "\n", "    ", "orig_shape", "=", "x", ".", "size", "(", ")", "\n", "assert", "axis", ">=", "0", "and", "axis", "<", "len", "(", "orig_shape", ")", ",", "\"For a vector of shape %s, axis must be in [0, %d] but it is %d\"", "%", "(", "\n", "orig_shape", ",", "\n", "len", "(", "orig_shape", ")", "-", "1", ",", "\n", "axis", ",", "\n", ")", "\n", "h_dim", "=", "orig_shape", "[", "axis", "]", "\n", "h_dim_exp", "=", "int", "(", "round", "(", "np", ".", "log", "(", "h_dim", ")", "/", "np", ".", "log", "(", "2", ")", ")", ")", "\n", "assert", "h_dim", "==", "2", "**", "h_dim_exp", ",", "(", "\n", "\"hadamard can only be computed over axis with size that is a power of two, but\"", "\n", "\" chosen axis %d has size %d\"", "%", "(", "axis", ",", "h_dim", ")", "\n", ")", "\n", "\n", "working_shape_pre", "=", "[", "int", "(", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "orig_shape", "[", ":", "axis", "]", ")", ")", ")", "]", "\n", "working_shape_post", "=", "[", "int", "(", "torch", ".", "prod", "(", "torch", ".", "tensor", "(", "orig_shape", "[", "axis", "+", "1", ":", "]", ")", ")", ")", "]", "\n", "working_shape_mid", "=", "[", "2", "]", "*", "h_dim_exp", "\n", "working_shape", "=", "working_shape_pre", "+", "working_shape_mid", "+", "working_shape_post", "\n", "\n", "ret", "=", "x", ".", "view", "(", "working_shape", ")", "\n", "\n", "for", "ii", "in", "range", "(", "h_dim_exp", ")", ":", "\n", "        ", "dim", "=", "ii", "+", "1", "\n", "arrs", "=", "torch", ".", "chunk", "(", "ret", ",", "2", ",", "dim", "=", "dim", ")", "\n", "assert", "len", "(", "arrs", ")", "==", "2", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "arrs", "[", "0", "]", "+", "arrs", "[", "1", "]", ",", "arrs", "[", "0", "]", "-", "arrs", "[", "1", "]", ")", ",", "axis", "=", "dim", ")", "\n", "\n", "", "if", "normalize", ":", "\n", "        ", "ret", "=", "ret", "/", "np", ".", "sqrt", "(", "float", "(", "h_dim", ")", ")", "\n", "\n", "", "ret", "=", "ret", ".", "view", "(", "orig_shape", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fastfood_vars": [[48, 73], ["int", "torch.FloatTensor().uniform_().type", "torch.FloatTensor().uniform_().type.requires_grad_", "torch.LongTensor", "torch.LongTensor.requires_grad_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_.requires_grad_", "torch.sqrt", "numpy.ceil", "numpy.random.permutation", "torch.FloatTensor().uniform_().type.to", "torch.LongTensor.to", "torch.FloatTensor().normal_.to", "torch.sqrt.to", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.sum", "numpy.log", "numpy.log", "torch.pow", "torch.FloatTensor"], "function", ["None"], ["", "def", "fastfood_vars", "(", "DD", ",", "device", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Returns parameters for fast food transform\n    :param DD: desired dimension\n    :return:\n    \"\"\"", "\n", "ll", "=", "int", "(", "np", ".", "ceil", "(", "np", ".", "log", "(", "DD", ")", "/", "np", ".", "log", "(", "2", ")", ")", ")", "\n", "LL", "=", "2", "**", "ll", "\n", "\n", "# Binary scaling matrix where $B_{i,i} \\in \\{\\pm 1 \\}$ drawn iid", "\n", "BB", "=", "torch", ".", "FloatTensor", "(", "LL", ")", ".", "uniform_", "(", "0", ",", "2", ")", ".", "type", "(", "torch", ".", "LongTensor", ")", "\n", "BB", "=", "BB", "*", "2", "-", "1", "\n", "BB", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "# Random permutation matrix", "\n", "Pi", "=", "torch", ".", "LongTensor", "(", "np", ".", "random", ".", "permutation", "(", "LL", ")", ")", "\n", "Pi", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "# Gaussian scaling matrix, whose elements $G_{i,i} \\sim \\mathcal{N}(0, 1)$", "\n", "GG", "=", "torch", ".", "FloatTensor", "(", "\n", "LL", ",", "\n", ")", ".", "normal_", "(", ")", "\n", "GG", ".", "requires_grad_", "(", "False", ")", "\n", "divisor", "=", "torch", ".", "sqrt", "(", "LL", "*", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "GG", ",", "2", ")", ")", ")", "\n", "return", "[", "BB", ".", "to", "(", "device", ")", ",", "Pi", ".", "to", "(", "device", ")", ",", "GG", ".", "to", "(", "device", ")", ",", "divisor", ".", "to", "(", "device", ")", ",", "LL", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.random_vars": [[75, 81], ["torch.FloatTensor().normal_().to", "torch.FloatTensor().normal_().to.requires_grad_", "torch.norm", "torch.FloatTensor().normal_", "torch.FloatTensor"], "function", ["None"], ["", "def", "random_vars", "(", "desired_dim", ",", "intrinsic_dim", ",", "device", "=", "0", ")", ":", "\n", "    ", "\"\"\"Returns a random matrix of the desired dimension.\"\"\"", "\n", "R", "=", "torch", ".", "FloatTensor", "(", "desired_dim", ",", "intrinsic_dim", ")", ".", "normal_", "(", "std", "=", "0.01", ")", ".", "to", "(", "device", ")", "\n", "R", ".", "requires_grad_", "(", "False", ")", "\n", "divisor", "=", "torch", ".", "norm", "(", "R", ")", "\n", "return", "[", "R", ",", "divisor", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.fastfood_torched": [[83, 113], ["x.size", "torch.nn.functional.pad", "FastWalshHadamard.apply", "FastWalshHadamard.apply", "int", "numpy.sqrt", "float"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply"], ["", "def", "fastfood_torched", "(", "x", ",", "DD", ":", "int", ",", "param_list", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "int", "]", ")", ":", "\n", "    ", "\"\"\"\n    Fastfood transform\n    :param x: array of dd dimension\n    :param DD: desired dimension\n    :return:\n    \"\"\"", "\n", "dd", "=", "x", ".", "size", "(", "0", ")", "\n", "\n", "BB", ",", "Pi", ",", "GG", ",", "divisor", ",", "LL", "=", "param_list", "\n", "# Padd x if needed", "\n", "dd_pad", "=", "F", ".", "pad", "(", "x", ",", "pad", "=", "(", "0", ",", "LL", "-", "dd", ")", ",", "value", "=", "0.0", ",", "mode", "=", "\"constant\"", ")", "\n", "# From left to right HGPiH(BX), where H is Walsh-Hadamard matrix", "\n", "dd_pad", "=", "dd_pad", "*", "BB", "\n", "\n", "# HGPi(HBX)", "\n", "mul_2", "=", "FastWalshHadamard", ".", "apply", "(", "dd_pad", ")", "\n", "\n", "# HG(PiHBX)", "\n", "mul_3", "=", "mul_2", "[", "Pi", "]", "\n", "\n", "# H(GPiHBX)", "\n", "mul_3", "=", "mul_3", "*", "GG", "\n", "\n", "# (HGPiHBX)", "\n", "mul_5", "=", "FastWalshHadamard", ".", "apply", "(", "mul_3", ")", "\n", "\n", "ret", "=", "mul_5", "[", ":", "int", "(", "DD", ")", "]", "\n", "ret", "=", "ret", "/", "(", "divisor", "*", "np", ".", "sqrt", "(", "float", "(", "DD", ")", "/", "LL", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.random_torched": [[115, 121], ["torch.matmul"], "function", ["None"], ["", "def", "random_torched", "(", "intrinsic_vec", ",", "param_list", ":", "Tuple", "[", "torch", ".", "Tensor", ",", "int", "]", ")", ":", "\n", "    ", "\"\"\"Random dense transform\"\"\"", "\n", "R", ",", "divisor", "=", "param_list", "\n", "result", "=", "torch", ".", "matmul", "(", "R", ",", "intrinsic_vec", ")", "\n", "# TODO: for now we are not normalizing with the divisor, to be added later.", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.modify_with_intrinsic_model": [[313, 323], ["intrinsic.IntrinsicDimensionLight.apply", "set"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply"], ["", "", "def", "modify_with_intrinsic_model", "(", "model", ",", "config", ")", ":", "\n", "    ", "IntrinsicDimensionLight", ".", "apply", "(", "\n", "model", ",", "\n", "config", ".", "intrinsic_dimension", ",", "\n", "set", "(", ")", ",", "\n", "config", ".", "intrinsic_said", ",", "\n", "config", ".", "intrinsic_projection", ",", "\n", "config", ".", "intrinsic_device", ",", "\n", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.models.intrinsic.intrinsic_plugin_on_step": [[325, 327], ["pl_module.model.intrinsic_fn"], "function", ["None"], ["", "def", "intrinsic_plugin_on_step", "(", "pl_module", ")", ":", "\n", "    ", "pl_module", ".", "model", ".", "intrinsic_fn", "(", "pl_module", ".", "model", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.Adapter.__init__": [[12, 25], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "Adapters.Adapter.init_weights"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.Adapter.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "adapter_input_size", "=", "transformer_config", ".", "hidden_size", "\n", "self", ".", "adapter_latent_size", "=", "self", ".", "adapter_input_size", "//", "config", ".", "adapter_reduction_factor", "\n", "self", ".", "non_linearity", "=", "ACT2FN", "[", "config", ".", "adapter_non_linearity", "]", "\n", "self", ".", "residual", "=", "config", ".", "normal_adapter_residual", "\n", "\n", "# down projection", "\n", "self", ".", "down_proj", "=", "nn", ".", "Linear", "(", "self", ".", "adapter_input_size", ",", "self", ".", "adapter_latent_size", ")", "\n", "# up projection", "\n", "self", ".", "up_proj", "=", "nn", ".", "Linear", "(", "self", ".", "adapter_latent_size", ",", "self", ".", "adapter_input_size", ")", "\n", "\n", "self", ".", "init_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.Adapter.init_weights": [[26, 32], ["Adapters.Adapter.down_proj.weight.data.normal_", "Adapters.Adapter.down_proj.bias.data.zero_", "Adapters.Adapter.up_proj.weight.data.normal_", "Adapters.Adapter.up_proj.bias.data.zero_"], "methods", ["None"], ["", "def", "init_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\"Initialize the weights -> so that initially we the whole Adapter layer is a near-identity function\"\"\"", "\n", "self", ".", "down_proj", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "self", ".", "down_proj", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "self", ".", "up_proj", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "self", ".", "up_proj", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.Adapter.forward": [[33, 38], ["Adapters.Adapter.up_proj", "Adapters.Adapter.non_linearity", "Adapters.Adapter.down_proj"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "output", "=", "self", ".", "up_proj", "(", "self", ".", "non_linearity", "(", "self", ".", "down_proj", "(", "x", ")", ")", ")", "\n", "if", "self", ".", "residual", ":", "\n", "            ", "output", "=", "x", "+", "output", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.LowRankAdapter.__init__": [[43, 60], ["torch.Module.__init__", "VariantLayers.LowRankLinear", "VariantLayers.LowRankLinear"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "input_dim", "=", "transformer_config", ".", "hidden_size", "\n", "self", ".", "down_sample_size", "=", "self", ".", "input_dim", "//", "config", ".", "adapter_reduction_factor", "\n", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "adapter_non_linearity", "]", "\n", "self", ".", "down_sampler", "=", "LowRankLinear", "(", "\n", "self", ".", "input_dim", ",", "\n", "self", ".", "down_sample_size", ",", "\n", "w_init", "=", "config", ".", "lowrank_adapter_w_init", ",", "\n", "rank", "=", "config", ".", "lowrank_adapter_rank", ",", "\n", ")", "\n", "self", ".", "up_sampler", "=", "LowRankLinear", "(", "\n", "self", ".", "down_sample_size", ",", "\n", "self", ".", "input_dim", ",", "\n", "w_init", "=", "config", ".", "lowrank_adapter_w_init", ",", "\n", "rank", "=", "config", ".", "lowrank_adapter_rank", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.LowRankAdapter.forward": [[62, 67], ["Adapters.LowRankAdapter.down_sampler", "Adapters.LowRankAdapter.activation", "Adapters.LowRankAdapter.up_sampler"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "down_sampler", "(", "x", ")", "\n", "z", "=", "self", ".", "activation", "(", "z", ")", "\n", "output", "=", "self", ".", "up_sampler", "(", "z", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.HyperComplexAdapter.__init__": [[74, 111], ["torch.Module.__init__", "VariantLayers.PHMLinear", "VariantLayers.PHMLinear"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["def", "__init__", "(", "self", ",", "config", ",", "transformer_config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "input_dim", "=", "transformer_config", ".", "hidden_size", "\n", "self", ".", "down_sample_size", "=", "self", ".", "input_dim", "//", "config", ".", "adapter_reduction_factor", "\n", "self", ".", "activation", "=", "ACT2FN", "[", "config", ".", "adapter_non_linearity", "]", "\n", "self", ".", "down_sampler", "=", "PHMLinear", "(", "\n", "in_features", "=", "self", ".", "input_dim", ",", "\n", "out_features", "=", "self", ".", "down_sample_size", ",", "\n", "bias", "=", "True", ",", "\n", "c_init", "=", "config", ".", "compacter_phm_c_init", ",", "\n", "phm_dim", "=", "config", ".", "compacter_hypercomplex_division", ",", "\n", "learn_phm", "=", "config", ".", "compacter_learn_phm", ",", "\n", "w_init", "=", "config", ".", "compacter_hypercomplex_nonlinearity", ",", "\n", "shared_phm_rule", "=", "config", ".", "compacter_shared_phm_rule", ",", "\n", "factorized_phm", "=", "config", ".", "compacter_factorized_phm", ",", "\n", "shared_W_phm", "=", "config", ".", "compacter_shared_W_phm", ",", "\n", "factorized_phm_rule", "=", "config", ".", "compacter_factorized_phm_rule", ",", "\n", "phm_rank", "=", "config", ".", "compacter_phm_rank", ",", "\n", "phm_init_range", "=", "config", ".", "compacter_phm_init_range", ",", "\n", "kronecker_prod", "=", "config", ".", "compacter_kronecker_prod", ",", "\n", ")", "\n", "self", ".", "up_sampler", "=", "PHMLinear", "(", "\n", "in_features", "=", "self", ".", "down_sample_size", ",", "\n", "out_features", "=", "self", ".", "input_dim", ",", "\n", "bias", "=", "True", ",", "\n", "c_init", "=", "config", ".", "compacter_phm_c_init", ",", "\n", "phm_dim", "=", "config", ".", "compacter_hypercomplex_division", ",", "\n", "learn_phm", "=", "config", ".", "compacter_learn_phm", ",", "\n", "w_init", "=", "config", ".", "compacter_hypercomplex_nonlinearity", ",", "\n", "shared_phm_rule", "=", "config", ".", "compacter_shared_phm_rule", ",", "\n", "factorized_phm", "=", "config", ".", "compacter_factorized_phm", ",", "\n", "shared_W_phm", "=", "config", ".", "compacter_shared_W_phm", ",", "\n", "factorized_phm_rule", "=", "config", ".", "compacter_factorized_phm_rule", ",", "\n", "phm_rank", "=", "config", ".", "compacter_phm_rank", ",", "\n", "phm_init_range", "=", "config", ".", "compacter_phm_init_range", ",", "\n", "kronecker_prod", "=", "config", ".", "compacter_kronecker_prod", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.Adapters.HyperComplexAdapter.forward": [[113, 118], ["Adapters.HyperComplexAdapter.down_sampler", "Adapters.HyperComplexAdapter.activation", "Adapters.HyperComplexAdapter.up_sampler"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "z", "=", "self", ".", "down_sampler", "(", "x", ")", "\n", "z", "=", "self", ".", "activation", "(", "z", ")", "\n", "z", "=", "self", ".", "up_sampler", "(", "z", ")", "\n", "return", "x", "+", "z", "\n", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.LowRankLinear.__init__": [[21, 44], ["super().__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "VariantLayers.LowRankLinear.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "int", ",", "\n", "output_dim", ":", "int", ",", "\n", "rank", ":", "int", "=", "1", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "w_init", ":", "str", "=", "\"glorot-uniform\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "LowRankLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "w_init", "=", "w_init", "\n", "self", ".", "W_left", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "size", "=", "(", "input_dim", ",", "rank", ")", ")", ",", "requires_grad", "=", "True", "\n", ")", "\n", "self", ".", "W_right", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "size", "=", "(", "rank", ",", "output_dim", ")", ")", ",", "requires_grad", "=", "True", "\n", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "output_dim", ")", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.LowRankLinear.reset_parameters": [[45, 56], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "VariantLayers.glorot_uniform", "VariantLayers.glorot_uniform", "VariantLayers.glorot_normal", "VariantLayers.glorot_normal"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "bias", ":", "\n", "            ", "self", ".", "b", ".", "data", "=", "torch", ".", "zeros_like", "(", "self", ".", "b", ".", "data", ")", "\n", "", "if", "self", ".", "w_init", "==", "\"glorot-uniform\"", ":", "\n", "            ", "self", ".", "W_left", ".", "data", "=", "glorot_uniform", "(", "self", ".", "W_left", ".", "data", ")", "\n", "self", ".", "W_right", ".", "data", "=", "glorot_uniform", "(", "self", ".", "W_right", ".", "data", ")", "\n", "", "elif", "self", ".", "w_init", "==", "\"glorot-normal\"", ":", "\n", "            ", "self", ".", "W_left", ".", "data", "=", "glorot_normal", "(", "self", ".", "W_left", ".", "data", ")", "\n", "self", ".", "W_right", ".", "data", "=", "glorot_normal", "(", "self", ".", "W_right", ".", "data", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.LowRankLinear.forward": [[57, 63], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "W", "=", "self", ".", "W_left", "*", "self", ".", "W_right", "\n", "output", "=", "torch", ".", "matmul", "(", "input", "=", "x", ",", "other", "=", "W", ")", "\n", "if", "self", ".", "bias", ":", "\n", "            ", "output", "+=", "self", ".", "b", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.__init__": [[124, 210], ["super().__init__", "VariantLayers.PHMLinear.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "VariantLayers.PHMLinear.register_parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.reset_parameters"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_features", ":", "int", ",", "\n", "out_features", ":", "int", ",", "\n", "phm_dim", ":", "int", ",", "\n", "phm_rule", ":", "Union", "[", "None", ",", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "bias", ":", "bool", "=", "True", ",", "\n", "w_init", ":", "str", "=", "\"phm\"", ",", "\n", "c_init", ":", "str", "=", "\"random\"", ",", "\n", "learn_phm", ":", "bool", "=", "True", ",", "\n", "shared_phm_rule", "=", "False", ",", "\n", "factorized_phm", "=", "False", ",", "\n", "shared_W_phm", "=", "False", ",", "\n", "factorized_phm_rule", "=", "False", ",", "\n", "phm_rank", "=", "1", ",", "\n", "phm_init_range", "=", "0.0001", ",", "\n", "kronecker_prod", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "PHMLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#assert w_init in [\"phm\", \"glorot-normal\", \"glorot-uniform\", \"normal\"]", "\n", "#assert c_init in [\"normal\", \"uniform\"]", "\n", "assert", "(", "\n", "in_features", "%", "phm_dim", "==", "0", "\n", ")", ",", "f\"Argument `in_features`={in_features} is not divisble be `phm_dim`{phm_dim}\"", "\n", "assert", "(", "\n", "out_features", "%", "phm_dim", "==", "0", "\n", ")", ",", "f\"Argument `out_features`={out_features} is not divisble be `phm_dim`{phm_dim}\"", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "learn_phm", "=", "learn_phm", "\n", "self", ".", "phm_dim", "=", "phm_dim", "\n", "self", ".", "_in_feats_per_axis", "=", "in_features", "//", "phm_dim", "\n", "self", ".", "_out_feats_per_axis", "=", "out_features", "//", "phm_dim", "\n", "self", ".", "phm_rank", "=", "phm_rank", "\n", "self", ".", "phm_init_range", "=", "phm_init_range", "\n", "self", ".", "kronecker_prod", "=", "kronecker_prod", "\n", "self", ".", "shared_phm_rule", "=", "shared_phm_rule", "\n", "self", ".", "factorized_phm_rule", "=", "factorized_phm_rule", "\n", "self", ".", "bias_flag", "=", "bias", "\n", "self", ".", "w_init", "=", "w_init", "\n", "self", ".", "c_init", "=", "c_init", "\n", "self", ".", "shared_W_phm", "=", "shared_W_phm", "\n", "self", ".", "factorized_phm", "=", "factorized_phm", "\n", "if", "not", "self", ".", "shared_phm_rule", ":", "\n", "            ", "if", "self", ".", "factorized_phm_rule", ":", "\n", "                ", "self", ".", "phm_rule_left", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "phm_dim", ",", "phm_dim", ",", "1", ")", ",", "requires_grad", "=", "learn_phm", "\n", ")", "\n", "self", ".", "phm_rule_right", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "phm_dim", ",", "1", ",", "phm_dim", ")", ",", "requires_grad", "=", "learn_phm", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "phm_rule", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "FloatTensor", "(", "phm_dim", ",", "phm_dim", ",", "phm_dim", ")", ",", "\n", "requires_grad", "=", "learn_phm", ",", "\n", ")", "\n", "", "", "if", "not", "self", ".", "shared_W_phm", ":", "\n", "            ", "if", "self", ".", "factorized_phm", ":", "\n", "                ", "self", ".", "W_left", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "\n", "size", "=", "(", "phm_dim", ",", "self", ".", "_in_feats_per_axis", ",", "self", ".", "phm_rank", ")", "\n", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "self", ".", "W_right", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "\n", "size", "=", "(", "phm_dim", ",", "self", ".", "phm_rank", ",", "self", ".", "_out_feats_per_axis", ")", "\n", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "W", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "\n", "size", "=", "(", "\n", "phm_dim", ",", "\n", "self", ".", "_in_feats_per_axis", ",", "\n", "self", ".", "_out_feats_per_axis", ",", "\n", ")", "\n", ")", ",", "\n", "requires_grad", "=", "True", ",", "\n", ")", "\n", "", "", "if", "self", ".", "bias_flag", ":", "\n", "            ", "self", ".", "b", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "\"b\"", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.init_W": [[211, 244], ["range", "range", "VariantLayers.glorot_normal", "VariantLayers.glorot_normal", "VariantLayers.glorot_normal", "range", "range", "range", "VariantLayers.glorot_uniform", "VariantLayers.glorot_uniform", "VariantLayers.glorot_uniform", "range", "range", "VariantLayers.init_ones", "VariantLayers.PHMLinear.W_left.data[].normal_", "VariantLayers.PHMLinear.W_right.data[].normal_", "VariantLayers.PHMLinear.W.data[].normal_", "VariantLayers.init_ones"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.init_ones", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.init_ones"], ["", "def", "init_W", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "w_init", "==", "\"glorot-normal\"", ":", "\n", "            ", "if", "self", ".", "factorized_phm", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W_left", ".", "data", "[", "i", "]", "=", "glorot_normal", "(", "self", ".", "W_left", ".", "data", "[", "i", "]", ")", "\n", "self", ".", "W_right", ".", "data", "[", "i", "]", "=", "glorot_normal", "(", "self", ".", "W_right", ".", "data", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W", ".", "data", "[", "i", "]", "=", "glorot_normal", "(", "self", ".", "W", ".", "data", "[", "i", "]", ")", "\n", "", "", "", "elif", "self", ".", "w_init", "==", "\"glorot-uniform\"", ":", "\n", "            ", "if", "self", ".", "factorized_phm", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W_left", ".", "data", "[", "i", "]", "=", "glorot_uniform", "(", "self", ".", "W_left", ".", "data", "[", "i", "]", ")", "\n", "self", ".", "W_right", ".", "data", "[", "i", "]", "=", "glorot_uniform", "(", "self", ".", "W_right", ".", "data", "[", "i", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W", ".", "data", "[", "i", "]", "=", "glorot_uniform", "(", "self", ".", "W", ".", "data", "[", "i", "]", ")", "\n", "", "", "", "elif", "self", ".", "w_init", "==", "\"normal\"", ":", "\n", "            ", "if", "self", ".", "factorized_phm", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W_left", ".", "data", "[", "i", "]", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.02", ")", "\n", "self", ".", "W_right", ".", "data", "[", "i", "]", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.02", ")", "\n", "", "", "else", ":", "\n", "                ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                    ", "self", ".", "W", ".", "data", "[", "i", "]", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "", "", "", "else", ":", "\n", "#for i in range(self.phm_dim):", "\n", "#        self.W_left.data[i] = init_ones(self.W_left.data[i])", "\n", "#        self.W_right.data[i] = init_ones(self.W_right.data[i])", "\n", "#        #self.W_right.data[i].normal_(mean=0, std=0.02)", "\n", "            ", "for", "i", "in", "range", "(", "self", ".", "phm_dim", ")", ":", "\n", "                ", "self", ".", "W_left", ".", "data", "[", "i", "]", "=", "init_ones", "(", "self", ".", "W_left", ".", "data", "[", "i", "]", ")", "/", "(", "self", ".", "_in_feats_per_axis", "*", "self", ".", "phm_dim", ")", "\n", "self", ".", "W_right", ".", "data", "[", "i", "]", "=", "init_ones", "(", "self", ".", "W_right", ".", "data", "[", "i", "]", ")", "\n", "#raise ValueError", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.reset_parameters": [[246, 270], ["VariantLayers.PHMLinear.init_W", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "VariantLayers.PHMLinear.phm_rule_left.data.uniform_", "VariantLayers.PHMLinear.phm_rule_right.data.uniform_", "VariantLayers.PHMLinear.phm_rule.data.uniform_", "VariantLayers.PHMLinear.phm_rule_left.data.normal_", "VariantLayers.PHMLinear.phm_rule_right.data.normal_", "VariantLayers.PHMLinear.phm_rule.data.normal_", "VariantLayers.init_ones"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.init_W", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.init_ones"], ["", "", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "shared_W_phm", ":", "\n", "            ", "self", ".", "init_W", "(", ")", "\n", "\n", "", "if", "self", ".", "bias_flag", ":", "\n", "            ", "self", ".", "b", ".", "data", "=", "torch", ".", "zeros_like", "(", "self", ".", "b", ".", "data", ")", "\n", "\n", "", "if", "not", "self", ".", "shared_phm_rule", ":", "\n", "            ", "if", "self", ".", "factorized_phm_rule", ":", "\n", "                ", "if", "self", ".", "c_init", "==", "\"uniform\"", ":", "\n", "                    ", "self", ".", "phm_rule_left", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "self", ".", "phm_rule_right", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "c_init", "==", "\"normal\"", ":", "\n", "                    ", "self", ".", "phm_rule_left", ".", "data", ".", "normal_", "(", "std", "=", "self", ".", "phm_init_range", ")", "\n", "self", ".", "phm_rule_right", ".", "data", ".", "normal_", "(", "std", "=", "self", ".", "phm_init_range", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "NotImplementedError", "\n", "", "", "else", ":", "\n", "                ", "if", "self", ".", "c_init", "==", "\"uniform\"", ":", "\n", "                    ", "self", ".", "phm_rule", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", "\n", "", "elif", "self", ".", "c_init", "==", "\"normal\"", ":", "\n", "                    ", "self", ".", "phm_rule", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "0.02", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "phm_rule", ".", "data", "=", "init_ones", "(", "self", ".", "phm_rule", ".", "data", ")", "/", "(", "self", ".", "phm_dim", "*", "self", ".", "phm_dim", "*", "self", ".", "phm_dim", ")", "\n", "#raise NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.set_phm_rule": [[272, 280], ["None"], "methods", ["None"], ["", "", "", "", "def", "set_phm_rule", "(", "self", ",", "phm_rule", "=", "None", ",", "phm_rule_left", "=", "None", ",", "phm_rule_right", "=", "None", ")", ":", "\n", "        ", "\"\"\"If factorized_phm_rules is set, phm_rule is a tuple, showing the left and right\n        phm rules, and if this is not set, this is showing  the phm_rule.\"\"\"", "\n", "if", "self", ".", "factorized_phm_rule", ":", "\n", "            ", "self", ".", "phm_rule_left", "=", "phm_rule_left", "\n", "self", ".", "phm_rule_right", "=", "phm_rule_right", "\n", "", "else", ":", "\n", "            ", "self", ".", "phm_rule", "=", "phm_rule", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.set_W": [[281, 287], ["None"], "methods", ["None"], ["", "", "def", "set_W", "(", "self", ",", "W", "=", "None", ",", "W_left", "=", "None", ",", "W_right", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "factorized_phm", ":", "\n", "            ", "self", ".", "W_left", "=", "W_left", "\n", "self", ".", "W_right", "=", "W_right", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "W", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.PHMLinear.forward": [[288, 306], ["VariantLayers.matvec_product", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.matvec_product"], ["", "", "def", "forward", "(", "\n", "self", ",", "x", ":", "torch", ".", "Tensor", ",", "phm_rule", ":", "Union", "[", "None", ",", "nn", ".", "ParameterList", "]", "=", "None", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "\n", "        ", "if", "self", ".", "factorized_phm", ":", "\n", "            ", "W", "=", "torch", ".", "bmm", "(", "self", ".", "W_left", ",", "self", ".", "W_right", ")", "\n", "", "if", "self", ".", "factorized_phm_rule", ":", "\n", "            ", "phm_rule", "=", "torch", ".", "bmm", "(", "self", ".", "phm_rule_left", ",", "self", ".", "phm_rule_right", ")", "\n", "", "y", "=", "matvec_product", "(", "\n", "W", "=", "W", "if", "self", ".", "factorized_phm", "else", "self", ".", "W", ",", "\n", "x", "=", "x", ",", "\n", "bias", "=", "self", ".", "b", ",", "\n", "phm_rule", "=", "phm_rule", "if", "self", ".", "factorized_phm_rule", "else", "self", ".", "phm_rule", ",", "\n", "kronecker_prod", "=", "self", ".", "kronecker_prod", ",", "\n", ")", "\n", "#print(\"Input\", x)", "\n", "#print(\"Output\", y)", "\n", "return", "y", "\n", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_normal": [[10, 12], ["torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "math.sqrt", "math.sqrt"], "function", ["None"], ["def", "glorot_normal", "(", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "init", ".", "xavier_normal_", "(", "tensor", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.glorot_uniform": [[14, 16], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "math.sqrt", "math.sqrt"], "function", ["None"], ["", "def", "glorot_uniform", "(", "tensor", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "tensor", ",", "gain", "=", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.init_ones": [[17, 19], ["torch.nn.init.ones_", "torch.nn.init.ones_", "torch.nn.init.ones_"], "function", ["None"], ["", "def", "init_ones", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "nn", ".", "init", ".", "ones_", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.kronecker_product": [[65, 79], ["torch.Size", "torch.Size", "torch.Size", "res.reshape", "a.unsqueeze().unsqueeze", "b.unsqueeze().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "a.unsqueeze", "b.unsqueeze"], "function", ["None"], ["", "", "def", "kronecker_product", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"\n    Kronecker product of matrices a and b with leading batch dimensions.\n    Batch dimensions are broadcast. The number of them mush\n    :type a: torch.Tensor\n    :type b: torch.Tensor\n    :rtype: torch.Tensor\n    \"\"\"", "\n", "# return torch.stack([torch.kron(ai, bi) for ai, bi in zip(a,b)], dim=0)", "\n", "siz1", "=", "torch", ".", "Size", "(", "torch", ".", "tensor", "(", "a", ".", "shape", "[", "-", "2", ":", "]", ")", "*", "torch", ".", "tensor", "(", "b", ".", "shape", "[", "-", "2", ":", "]", ")", ")", "\n", "res", "=", "a", ".", "unsqueeze", "(", "-", "1", ")", ".", "unsqueeze", "(", "-", "3", ")", "*", "b", ".", "unsqueeze", "(", "-", "2", ")", ".", "unsqueeze", "(", "-", "4", ")", "\n", "siz0", "=", "res", ".", "shape", "[", ":", "-", "4", "]", "\n", "out", "=", "res", ".", "reshape", "(", "siz0", "+", "siz1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.kronecker_product_einsum_batched": [[81, 93], ["torch.einsum().view", "torch.einsum().view", "torch.einsum().view", "A.size", "A.dim", "B.dim", "torch.einsum", "torch.einsum", "torch.einsum", "A.size", "B.size", "A.size", "B.size"], "function", ["None"], ["", "def", "kronecker_product_einsum_batched", "(", "A", ":", "torch", ".", "Tensor", ",", "B", ":", "torch", ".", "Tensor", ")", ":", "\n", "    ", "\"\"\"\n    Batched Version of Kronecker Products\n    :param A: has shape (b, a, c)\n    :param B: has shape (b, k, p)\n    :return: (b, ak, cp)\n    \"\"\"", "\n", "assert", "A", ".", "dim", "(", ")", "==", "3", "and", "B", ".", "dim", "(", ")", "==", "3", "\n", "res", "=", "torch", ".", "einsum", "(", "\"bac,bkp->bakcp\"", ",", "A", ",", "B", ")", ".", "view", "(", "\n", "A", ".", "size", "(", "0", ")", ",", "A", ".", "size", "(", "1", ")", "*", "B", ".", "size", "(", "1", ")", ",", "A", ".", "size", "(", "2", ")", "*", "B", ".", "size", "(", "2", ")", "\n", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.matvec_product": [[95, 121], ["torch.matmul", "torch.matmul", "torch.matmul", "kronecker_product().sum", "kronecker_product_einsum_batched().sum", "VariantLayers.kronecker_product", "VariantLayers.kronecker_product_einsum_batched"], "function", ["home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.kronecker_product", "home.repos.pwc.inspect_result.r-three_t-few.AdapterVariants.VariantLayers.kronecker_product_einsum_batched"], ["", "def", "matvec_product", "(", "\n", "W", ":", "torch", ".", "Tensor", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "bias", ":", "Optional", "[", "torch", ".", "Tensor", "]", ",", "\n", "phm_rule", ":", "Union", "[", "torch", ".", "Tensor", "]", ",", "\n", "kronecker_prod", "=", "False", ",", "\n", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Functional method to compute the generalized matrix-vector product based on the paper\n    \"Parameterization of Hypercomplex Multiplications (2020)\"\n    https://openreview.net/forum?id=rcQdycl0zyk\n    y = Hx + b , where W is generated through the sum of kronecker products from the Parameterlist W, i.e.\n    W is a an order-3 tensor of size (phm_dim, in_features, out_features)\n    x has shape (batch_size, phm_dim*in_features)\n    phm_rule is an order-3 tensor of shape (phm_dim, phm_dim, phm_dim)\n    H = sum_{i=0}^{d} mul_rule \\otimes W[i], where \\otimes is the kronecker product\n    \"\"\"", "\n", "if", "kronecker_prod", ":", "\n", "        ", "H", "=", "kronecker_product", "(", "phm_rule", ",", "W", ")", ".", "sum", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "H", "=", "kronecker_product_einsum_batched", "(", "phm_rule", ",", "W", ")", ".", "sum", "(", "0", ")", "\n", "\n", "", "y", "=", "torch", ".", "matmul", "(", "input", "=", "x", ",", "other", "=", "H", ")", "\n", "if", "bias", "is", "not", "None", ":", "\n", "        ", "y", "+=", "bias", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDataModule.__init__": [[7, 12], ["pytorch_lightning.LightningDataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "tokenizer", ",", "dataset_reader", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "dataset_reader", "=", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDataModule.prepare_data": [[13, 18], ["data_module.FinetuneDataModule.dataset_reader.read_few_shot_dataset"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.read_few_shot_dataset"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "# download, split, etc...", "\n", "# only called on 1 GPU/TPU in distributed", "\n", "        ", "if", "self", ".", "config", ".", "few_shot", ":", "\n", "            ", "_", "=", "self", ".", "dataset_reader", ".", "read_few_shot_dataset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDataModule.setup": [[19, 35], ["data_module.FinetuneDataModule.dataset_reader.read_orig_dataset", "data_module.FinetuneDatasetWithTemplate", "data_module.FinetuneDatasetWithTemplate", "print", "print", "data_module.FinetuneDataModule.dataset_reader.read_few_shot_dataset", "data_module.FinetuneDataModule.dataset_reader.read_orig_dataset", "data_module.FinetuneDataModule.dataset_reader.get_train_template", "data_module.FinetuneDataModule.dataset_reader.get_eval_template", "len", "len"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.read_few_shot_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.get_train_template", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.get_eval_template"], ["", "", "def", "setup", "(", "self", ",", "stage", ")", ":", "\n", "# make assignments here (val/train/test split)", "\n", "# called on every process in DDP", "\n", "        ", "if", "self", ".", "config", ".", "few_shot", ":", "\n", "            ", "self", ".", "train_dataset", "=", "self", ".", "dataset_reader", ".", "read_few_shot_dataset", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "train_dataset", "=", "self", ".", "dataset_reader", ".", "read_orig_dataset", "(", "\"train\"", ")", "\n", "", "self", ".", "dev_dataset", "=", "self", ".", "dataset_reader", ".", "read_orig_dataset", "(", "\"validation\"", ")", "\n", "self", ".", "train_dataset", "=", "FinetuneDatasetWithTemplate", "(", "\n", "self", ".", "train_dataset", ",", "self", ".", "dataset_reader", ".", "get_train_template", "(", ")", ",", "self", ".", "tokenizer", "\n", ")", "\n", "self", ".", "dev_dataset", "=", "FinetuneDatasetWithTemplate", "(", "\n", "self", ".", "dev_dataset", ",", "self", ".", "dataset_reader", ".", "get_eval_template", "(", ")", ",", "self", ".", "tokenizer", "\n", ")", "\n", "print", "(", "f\"Train size {len(self.train_dataset)}\"", ")", "\n", "print", "(", "f\"Eval size {len(self.dev_dataset)}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDataModule.train_dataloader": [[36, 44], ["torch.utils.data.DataLoader", "data_module.create_collate_fn", "min"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.data_module.create_collate_fn"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "create_collate_fn", "(", "self", ".", "tokenizer", ".", "pad_token_id", ",", "pretrain", "=", "False", ")", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "min", "(", "[", "self", ".", "config", ".", "batch_size", ",", "self", ".", "config", ".", "num_workers", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDataModule.val_dataloader": [[46, 53], ["torch.utils.data.DataLoader", "data_module.create_collate_fn", "min"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.data_module.create_collate_fn"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dev_dataset", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "eval_batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "collate_fn", "=", "create_collate_fn", "(", "self", ".", "tokenizer", ".", "pad_token_id", ",", "pretrain", "=", "False", ")", ",", "\n", "num_workers", "=", "min", "(", "[", "self", ".", "config", ".", "eval_batch_size", ",", "self", ".", "config", ".", "num_workers", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDatasetWithTemplate.__init__": [[57, 63], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "templates", ",", "tokenizer", ",", "add_special_tokens", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "templates", "=", "templates", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "add_special_tokens", "=", "add_special_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDatasetWithTemplate.__len__": [[64, 66], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.FinetuneDatasetWithTemplate.__getitem__": [[67, 106], ["isinstance", "numpy.random.choice.apply", "numpy.random.choice.get_answer_choices_list", "isinstance", "data_module.FinetuneDatasetWithTemplate.tokenizer().input_ids.squeeze", "torch.LongTensor", "torch.LongTensor", "numpy.random.choice", "torch.cat", "data_module.FinetuneDatasetWithTemplate.tokenizer().input_ids.squeeze", "data_module.FinetuneDatasetWithTemplate.tokenizer().input_ids.squeeze", "data_module.FinetuneDatasetWithTemplate.tokenizer", "data_module.FinetuneDatasetWithTemplate.tokenizer().input_ids.squeeze", "data_module.FinetuneDatasetWithTemplate.tokenizer().input_ids.squeeze", "data_module.FinetuneDatasetWithTemplate.tokenizer", "data_module.FinetuneDatasetWithTemplate.tokenizer", "data_module.FinetuneDatasetWithTemplate.tokenizer", "data_module.FinetuneDatasetWithTemplate.tokenizer"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.get_answer_choices_list"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "templates", ",", "list", ")", ":", "\n", "            ", "template", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "templates", ")", "\n", "", "else", ":", "\n", "            ", "template", "=", "self", ".", "templates", "\n", "", "example", "=", "self", ".", "dataset", "[", "key", "]", "\n", "input_str", ",", "target_str", "=", "template", ".", "apply", "(", "example", ")", "\n", "\n", "answer_choices", "=", "template", ".", "get_answer_choices_list", "(", "example", ")", "\n", "if", "isinstance", "(", "input_str", ",", "list", ")", ":", "\n", "            ", "input_ids", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "self", ".", "tokenizer", "(", "\n", "input_field", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ",", "add_special_tokens", "=", "False", "\n", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "for", "input_field", "in", "input_str", "[", ":", "-", "1", "]", "\n", "]", "\n", "+", "[", "\n", "self", ".", "tokenizer", "(", "\n", "input_str", "[", "-", "1", "]", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ",", "add_special_tokens", "=", "self", ".", "add_special_tokens", "\n", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "]", "\n", ")", "\n", "", "else", ":", "\n", "            ", "input_ids", "=", "self", ".", "tokenizer", "(", "\n", "input_str", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ",", "add_special_tokens", "=", "self", ".", "add_special_tokens", "\n", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "", "target_ids", "=", "self", ".", "tokenizer", "(", "\n", "target_str", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ",", "add_special_tokens", "=", "self", ".", "add_special_tokens", "\n", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "answer_choices_ids", "=", "[", "\n", "self", ".", "tokenizer", "(", "\n", "answer_choice", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ",", "add_special_tokens", "=", "self", ".", "add_special_tokens", "\n", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "for", "answer_choice", "in", "answer_choices", "\n", "]", "\n", "label", "=", "torch", ".", "LongTensor", "(", "[", "example", "[", "\"label\"", "]", "]", ")", "\n", "idx", "=", "torch", ".", "LongTensor", "(", "[", "example", "[", "\"idx\"", "]", "]", ")", "\n", "return", "input_ids", ",", "target_ids", ",", "answer_choices_ids", ",", "label", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDataModule.__init__": [[109, 114], ["pytorch_lightning.LightningDataModule.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "tokenizer", ",", "dataset_reader", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "self", ".", "dataset_reader", "=", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDataModule.setup": [[115, 125], ["data_module.PretrainDataModule.dataset_reader.read_orig_dataset", "data_module.PretrainDataModule.dataset_reader.get_template", "enumerate", "torch.utils.data.ConcatDataset", "data_module.PretrainDataModule.train_datasets_withtemplate.append", "data_module.PretrainDatasetWithTemplate"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template"], ["", "def", "setup", "(", "self", ",", "stage", ")", ":", "\n", "        ", "self", ".", "train_datasets", "=", "self", ".", "dataset_reader", ".", "read_orig_dataset", "(", "\"train\"", ")", "\n", "self", ".", "base_templates", "=", "self", ".", "dataset_reader", ".", "get_template", "(", ")", "\n", "self", ".", "train_datasets_withtemplate", "=", "[", "]", "\n", "for", "index", ",", "train_dataset", "in", "enumerate", "(", "self", ".", "train_datasets", ")", ":", "\n", "            ", "self", ".", "train_datasets_withtemplate", ".", "append", "(", "\n", "PretrainDatasetWithTemplate", "(", "train_dataset", ",", "self", ".", "base_templates", "[", "index", "]", ",", "self", ".", "tokenizer", ")", "\n", ")", "\n", "\n", "", "self", ".", "train_dataset", "=", "torch", ".", "utils", ".", "data", ".", "ConcatDataset", "(", "self", ".", "train_datasets_withtemplate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDataModule.train_dataloader": [[126, 134], ["torch.utils.data.DataLoader", "data_module.create_collate_fn", "min"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.data_module.create_collate_fn"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "config", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "collate_fn", "=", "create_collate_fn", "(", "self", ".", "tokenizer", ".", "pad_token_id", ",", "pretrain", "=", "True", ")", ",", "\n", "drop_last", "=", "True", ",", "\n", "num_workers", "=", "min", "(", "[", "self", ".", "config", ".", "batch_size", ",", "self", ".", "config", ".", "num_workers", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDatasetWithTemplate.__init__": [[138, 143], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "templates", ",", "tokenizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "templates", "=", "templates", "\n", "self", ".", "tokenizer", "=", "tokenizer", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDatasetWithTemplate.__len__": [[144, 146], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.PretrainDatasetWithTemplate.__getitem__": [[147, 164], ["isinstance", "numpy.random.choice.apply", "data_module.PretrainDatasetWithTemplate.tokenizer().input_ids.squeeze", "data_module.PretrainDatasetWithTemplate.tokenizer().input_ids.squeeze", "numpy.random.choice", "len", "data_module.PretrainDatasetWithTemplate.tokenizer", "data_module.PretrainDatasetWithTemplate.tokenizer"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply"], ["", "def", "__getitem__", "(", "self", ",", "key", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "templates", ",", "list", ")", ":", "\n", "            ", "template", "=", "np", ".", "random", ".", "choice", "(", "self", ".", "templates", ")", "\n", "", "else", ":", "\n", "            ", "template", "=", "self", ".", "templates", "\n", "", "example", "=", "self", ".", "dataset", "[", "key", "]", "\n", "input_target_str", "=", "template", ".", "apply", "(", "example", ")", "\n", "if", "len", "(", "input_target_str", ")", "==", "2", ":", "\n", "            ", "input_str", ",", "target_str", "=", "input_target_str", "\n", "if", "target_str", "==", "\"\"", ":", "\n", "                ", "target_str", "=", "\"<NO LABEL>\"", "\n", "", "", "else", ":", "\n", "            ", "input_str", "=", "\"<NO INPUT>\"", "\n", "target_str", "=", "\"<NO LABEL>\"", "\n", "", "input_ids", "=", "self", ".", "tokenizer", "(", "input_str", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "target_ids", "=", "self", ".", "tokenizer", "(", "target_str", ",", "return_tensors", "=", "\"pt\"", ",", "truncation", "=", "True", ")", ".", "input_ids", ".", "squeeze", "(", "0", ")", "\n", "return", "input_ids", ",", "target_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.data_module.create_collate_fn": [[166, 202], ["torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence", "zip", "zip", "torch.nn.utils.rnn.pad_sequence", "torch.nn.utils.rnn.pad_sequence.view().contiguous", "torch.cat", "torch.cat", "output_batch.update", "len", "max", "min", "NotImplementedError", "torch.nn.utils.rnn.pad_sequence.view", "len", "max"], "function", ["None"], ["", "", "def", "create_collate_fn", "(", "pad_token_id", ",", "pretrain", ")", ":", "\n", "    ", "def", "collate_fn", "(", "batch", ")", ":", "\n", "        ", "if", "not", "pretrain", ":", "\n", "            ", "input_ids", ",", "target_ids", ",", "answer_choices_ids", ",", "labels", ",", "idx", "=", "zip", "(", "*", "batch", ")", "\n", "", "else", ":", "\n", "            ", "input_ids", ",", "target_ids", "=", "zip", "(", "*", "batch", ")", "\n", "\n", "", "input_ids", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "input_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "pad_token_id", ")", "\n", "target_ids", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "target_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "pad_token_id", ")", "\n", "output_batch", "=", "{", "\n", "\"input_ids\"", ":", "input_ids", ",", "\n", "\"target_ids\"", ":", "target_ids", ",", "\n", "}", "\n", "\n", "if", "not", "pretrain", ":", "\n", "            ", "flat_answer_choice_ids", "=", "[", "choice", "for", "list_choices", "in", "answer_choices_ids", "for", "choice", "in", "list_choices", "]", "\n", "num_choice", "=", "[", "len", "(", "list_choices", ")", "for", "list_choices", "in", "answer_choices_ids", "]", "\n", "if", "max", "(", "num_choice", ")", "!=", "min", "(", "num_choice", ")", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"The collate_fn is not implmented for variable number of choices\"", ")", "\n", "", "flat_answer_choices_ids", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_sequence", "(", "\n", "flat_answer_choice_ids", ",", "batch_first", "=", "True", ",", "padding_value", "=", "pad_token_id", "\n", ")", "\n", "answer_choices_ids", "=", "flat_answer_choices_ids", ".", "view", "(", "len", "(", "answer_choices_ids", ")", ",", "max", "(", "num_choice", ")", ",", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "labels", ")", "\n", "idx", "=", "torch", ".", "cat", "(", "idx", ")", "\n", "output_batch", ".", "update", "(", "\n", "{", "\n", "\"answer_choices_ids\"", ":", "answer_choices_ids", ",", "\n", "\"labels\"", ":", "labels", ",", "\n", "\"idx\"", ":", "idx", ",", "\n", "}", "\n", ")", "\n", "\n", "", "return", "output_batch", "\n", "\n", "", "return", "collate_fn", "\n", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.__init__": [[102, 112], ["promptsource.templates.DatasetTemplates", "dataset_readers.BaseDatasetReader.get_template", "dataset_readers.BaseDatasetReader.get_template"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template"], ["def", "__init__", "(", "self", ",", "config", ",", "dataset_stash", ")", ":", "\n", "        ", "\"\"\"\n        :param config:\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "dataset_stash", "=", "dataset_stash", "\n", "\n", "self", ".", "templates", "=", "DatasetTemplates", "(", "*", "self", ".", "dataset_stash", ")", "\n", "self", ".", "train_template", "=", "self", ".", "get_template", "(", "self", ".", "config", ".", "train_template_idx", ")", "\n", "self", ".", "eval_template", "=", "self", ".", "get_template", "(", "self", ".", "config", ".", "eval_template_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.get_template": [[113, 130], ["enumerate", "print", "list_idx.append", "list_templates.append"], "methods", ["None"], ["", "def", "get_template", "(", "self", ",", "template_idx", ")", ":", "\n", "        ", "template_names", "=", "self", ".", "templates", ".", "all_template_names", "\n", "if", "template_idx", ">=", "0", ":", "\n", "            ", "return", "self", ".", "templates", "[", "template_names", "[", "template_idx", "]", "]", "\n", "", "elif", "template_idx", "==", "-", "1", ":", "\n", "\n", "            ", "list_idx", "=", "[", "]", "\n", "list_templates", "=", "[", "]", "\n", "for", "idx", ",", "template_name", "in", "enumerate", "(", "template_names", ")", ":", "\n", "                ", "if", "self", ".", "templates", "[", "template_name", "]", ".", "metadata", ".", "original_task", ":", "\n", "                    ", "list_idx", ".", "append", "(", "idx", ")", "\n", "list_templates", ".", "append", "(", "self", ".", "templates", "[", "template_name", "]", ")", "\n", "", "", "print", "(", "list_idx", ")", "\n", "\n", "return", "list_templates", "\n", "", "elif", "template_idx", "==", "-", "2", ":", "\n", "            ", "return", "[", "self", ".", "templates", "[", "template_name", "]", "for", "template_name", "in", "template_names", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.get_train_template": [[131, 133], ["None"], "methods", ["None"], ["", "", "def", "get_train_template", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "train_template", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.get_eval_template": [[134, 136], ["None"], "methods", ["None"], ["", "def", "get_eval_template", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "eval_template", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.read_orig_dataset": [[137, 148], ["os.path.exists", "datasets.load_dataset", "datasets.load_from_disk", "os.path.join"], "methods", ["None"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        Read the original dataset\n\n        :param split: split of data\n        \"\"\"", "\n", "if", "os", ".", "path", ".", "exists", "(", "DATASETS_OFFLINE", ")", ":", "\n", "            ", "orig_data", "=", "load_from_disk", "(", "os", ".", "path", ".", "join", "(", "DATASETS_OFFLINE", ",", "*", "self", ".", "dataset_stash", ")", ")", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "orig_data", "=", "load_dataset", "(", "*", "self", ".", "dataset_stash", ",", "split", "=", "split", ",", "cache_dir", "=", "os", ".", "environ", "[", "\"HF_HOME\"", "]", ")", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.read_few_shot_dataset": [[149, 171], ["os.path.join", "os.path.join", "os.path.exists", "os.path.exists", "os.makedirs", "dataset_readers.BaseDatasetReader.read_orig_dataset", "dataset_readers.BaseDatasetReader._sample_few_shot_data", "open", "enumerate", "open", "fin.readlines", "data.append", "fout.write", "json.loads", "line.strip", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader._sample_few_shot_data"], ["", "def", "read_few_shot_dataset", "(", "self", ")", ":", "\n", "        ", "file_dir", "=", "os", ".", "path", ".", "join", "(", "\"data\"", ",", "\"few_shot\"", ",", "self", ".", "config", ".", "dataset", ",", "f\"{self.config.num_shot}_shot\"", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "file_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "file_dir", ")", "\n", "\n", "", "file_path", "=", "os", ".", "path", ".", "join", "(", "file_dir", ",", "f\"{self.config.few_shot_random_seed}_seed.jsonl\"", ")", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "file_path", ")", ":", "\n", "            ", "with", "open", "(", "file_path", ",", "\"r\"", ")", "as", "fin", ":", "\n", "                ", "data", "=", "[", "]", "\n", "for", "idx", ",", "line", "in", "enumerate", "(", "fin", ".", "readlines", "(", ")", ")", ":", "\n", "                    ", "data", ".", "append", "(", "json", ".", "loads", "(", "line", ".", "strip", "(", "\"\\n\"", ")", ")", ")", "\n", "\n", "", "", "return", "data", "\n", "", "else", ":", "\n", "            ", "orig_data", "=", "self", ".", "read_orig_dataset", "(", "\"train\"", ")", "\n", "selected_data", "=", "self", ".", "_sample_few_shot_data", "(", "orig_data", ")", "\n", "\n", "with", "open", "(", "file_path", ",", "\"w+\"", ")", "as", "fout", ":", "\n", "                ", "for", "example", "in", "selected_data", ":", "\n", "                    ", "fout", ".", "write", "(", "json", ".", "dumps", "(", "example", ")", "+", "\"\\n\"", ")", "\n", "", "", "return", "selected_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader._sample_few_shot_data": [[172, 180], ["numpy.random.get_state", "numpy.random.seed", "numpy.random.shuffle", "numpy.random.set_state"], "methods", ["None"], ["", "", "def", "_sample_few_shot_data", "(", "self", ",", "orig_data", ")", ":", "\n", "        ", "saved_random_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "seed", "(", "self", ".", "config", ".", "few_shot_random_seed", ")", "\n", "orig_data", "=", "[", "x", "for", "x", "in", "orig_data", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "orig_data", ")", "\n", "selected_data", "=", "orig_data", "[", ":", "self", ".", "config", ".", "num_shot", "]", "\n", "np", ".", "random", ".", "set_state", "(", "saved_random_state", ")", "\n", "return", "selected_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.BaseDatasetReader.compute_metric": [[181, 185], ["sum", "len", "zip"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "accumulated", ")", ":", "\n", "        ", "matching", "=", "[", "a", "==", "b", "for", "a", ",", "b", "in", "zip", "(", "accumulated", "[", "\"prediction\"", "]", ",", "accumulated", "[", "\"label\"", "]", ")", "]", "\n", "accuracy", "=", "sum", "(", "matching", ")", "/", "len", "(", "matching", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.StoryClozeReader.__init__": [[188, 190], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"story_cloze\"", ",", "\"2016\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.StoryClozeReader.read_orig_dataset": [[191, 208], ["os.path.exists", "enumerate", "datasets.load_dataset", "datasets.load_from_disk", "os.path.join"], "methods", ["None"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "\"train\"", ":", "\n", "            ", "split", "=", "\"validation\"", "\n", "", "elif", "split", "==", "\"validation\"", ":", "\n", "            ", "split", "=", "\"test\"", "\n", "\n", "", "if", "os", ".", "path", ".", "exists", "(", "DATASETS_OFFLINE", ")", ":", "\n", "            ", "orig_data", "=", "load_from_disk", "(", "os", ".", "path", ".", "join", "(", "DATASETS_OFFLINE", ",", "*", "self", ".", "dataset_stash", ")", ")", "[", "split", "]", "\n", "", "else", ":", "\n", "            ", "orig_data", "=", "load_dataset", "(", "\n", "*", "self", ".", "dataset_stash", ",", "split", "=", "split", ",", "data_dir", "=", "\"/fruitbasket/datasets/hugging_face/story_cloze\"", "\n", ")", "\n", "", "orig_data", "=", "[", "example", "for", "example", "in", "orig_data", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"label\"", "]", "=", "example", "[", "\"answer_right_ending\"", "]", "-", "1", "\n", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR1Reader.__init__": [[211, 213], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"anli\"", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR1Reader.read_orig_dataset": [[214, 221], ["enumerate", "dataset_readers.BaseDatasetReader.read_orig_dataset"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "\"validation\"", ":", "\n", "            ", "split", "=", "\"test\"", "\n", "", "orig_data", "=", "[", "example", "for", "example", "in", "super", "(", ")", ".", "read_orig_dataset", "(", "f\"{split}_r1\"", ")", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR2Reader.__init__": [[224, 226], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"anli\"", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR2Reader.read_orig_dataset": [[227, 234], ["enumerate", "dataset_readers.BaseDatasetReader.read_orig_dataset"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "\"validation\"", ":", "\n", "            ", "split", "=", "\"test\"", "\n", "", "orig_data", "=", "[", "example", "for", "example", "in", "super", "(", ")", ".", "read_orig_dataset", "(", "f\"{split}_r2\"", ")", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR3Reader.__init__": [[237, 239], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"anli\"", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.ANLIR3Reader.read_orig_dataset": [[240, 247], ["enumerate", "dataset_readers.BaseDatasetReader.read_orig_dataset"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "\"validation\"", ":", "\n", "            ", "split", "=", "\"test\"", "\n", "", "orig_data", "=", "[", "example", "for", "example", "in", "super", "(", ")", ".", "read_orig_dataset", "(", "f\"{split}_r3\"", ")", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.WSCFixedReader.__init__": [[250, 252], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"super_glue\"", ",", "\"wsc.fixed\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RTEReader.__init__": [[255, 257], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"super_glue\"", ",", "\"rte\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.HSwagReader.__init__": [[260, 304], ["dataset_readers.BaseDatasetReader.__init__", "dataset_readers.HSwagReader.templates.append", "Template"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"hellaswag\"", ",", ")", ")", "\n", "if", "config", ".", "change_hswag_templates", ":", "\n", "            ", "from", "promptsource", ".", "templates", "import", "Template", "\n", "\n", "name_jinja", "=", "[", "\n", "(", "\"basic\"", ",", "\"{{ctx}}|||{{endings [label | int()]}}\"", ")", ",", "\n", "(", "\n", "\"prompt 1\"", ",", "\n", "\"Can you pick the correct ending for the sentence: {{ctx}}|||{{answer_choices [label | int()]}}\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"prompt 2\"", ",", "\n", "\"The task is to generate the ending for the sentence: {{ctx}}|||{{answer_choices [label | int()]}}\"", ",", "\n", ")", ",", "\n", "(", "\"prompt 3\"", ",", "\"How does this sentence end? {{ctx}}|||{{answer_choices [label | int()]}}\"", ")", ",", "\n", "(", "\n", "\"prompt 4\"", ",", "\n", "\"From the list of endings described below, what ending makes the most sense for the sentence {{ctx}}|||{{answer_choices [label | int()]}}\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"ctx a,b\"", ",", "\n", "\"Complete the description with an appropriate ending:\\n First, {{ ctx_a.lower() }} Then, {{ ctx_b.lower() }} ...|||{{answer_choices [label | int()]}}\"", ",", "\n", ")", ",", "\n", "(", "\n", "\"middle\"", ",", "\n", "\"If a description of a situation begins like this: {{ ctx }}... Then how does it continue?|||{{answer_choices [label | int()]}}\"", ",", "\n", ")", ",", "\n", "]", "\n", "\n", "self", ".", "templates", "=", "[", "]", "\n", "for", "name", ",", "jinja", "in", "name_jinja", ":", "\n", "                ", "self", ".", "templates", ".", "append", "(", "\n", "Template", "(", "name", "=", "name", ",", "jinja", "=", "jinja", ",", "reference", "=", "\"\"", ",", "answer_choices", "=", "'{{endings | join(\"|||\")}}'", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "config", ".", "train_template_idx", ">=", "0", ":", "\n", "                ", "self", ".", "train_template", "=", "self", ".", "templates", "[", "self", ".", "config", ".", "train_template_idx", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "train_template", "=", "self", ".", "templates", "\n", "", "if", "self", ".", "config", ".", "eval_template_idx", ">=", "0", ":", "\n", "                ", "self", ".", "eval_template", "=", "self", ".", "templates", "[", "self", ".", "config", ".", "eval_template_idx", "]", "\n", "", "else", ":", "\n", "                ", "self", ".", "eval_template", "=", "self", ".", "templates", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.HSwagReader.read_orig_dataset": [[305, 311], ["enumerate", "int", "dataset_readers.BaseDatasetReader.read_orig_dataset"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset"], ["", "", "", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "orig_data", "=", "[", "example", "for", "example", "in", "super", "(", ")", ".", "read_orig_dataset", "(", "split", ")", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"label\"", "]", "=", "int", "(", "example", "[", "\"label\"", "]", ")", "\n", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.WiCReader.__init__": [[314, 316], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"super_glue\"", ",", "\"wic\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.COPAReader.__init__": [[319, 321], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"super_glue\"", ",", "\"copa\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.COPAReader.get_template": [[322, 327], ["dataset_readers.BaseDatasetReader.get_template", "dataset_readers.BaseDatasetReader.get_template"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template", "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template"], ["", "def", "get_template", "(", "self", ",", "template_idx", ")", ":", "\n", "        ", "if", "template_idx", ">=", "0", ":", "\n", "            ", "return", "super", "(", ")", ".", "get_template", "(", "template_idx", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "get_template", "(", "template_idx", ")", "[", ":", "8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.WinograndeReader.__init__": [[330, 332], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"winogrande\"", ",", "\"winogrande_xl\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.WinograndeReader.read_orig_dataset": [[333, 339], ["enumerate", "dataset_readers.BaseDatasetReader.read_orig_dataset", "int"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "orig_data", "=", "[", "example", "for", "example", "in", "super", "(", ")", ".", "read_orig_dataset", "(", "split", ")", "]", "\n", "for", "idx", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "            ", "example", "[", "\"label\"", "]", "=", "int", "(", "example", "[", "\"answer\"", "]", ")", "-", "1", "\n", "example", "[", "\"idx\"", "]", "=", "idx", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.CBReader.__init__": [[342, 344], ["dataset_readers.BaseDatasetReader.__init__"], "methods", ["home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "config", ",", "dataset_stash", "=", "(", "\"super_glue\"", ",", "\"cb\"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.__init__": [[351, 457], ["pkg_resources.resource_filename", "promptsource.templates.TemplateCollection", "promptsource.templates.TemplateCollection.remove", "open", "csv.DictReader", "sum", "sum", "re.sub", "promptsource.templates.TemplateCollection.get_dataset", "len", "dataset_readers.T0MixtureReader.__init__.get_task_name"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "\"\"\"\n        :param config:\n        \"\"\"", "\n", "self", ".", "config", "=", "config", "\n", "datatset_subset_tuple", "=", "Tuple", "[", "str", ",", "Optional", "[", "str", "]", "]", "\n", "t0_train", ":", "Dict", "[", "str", ",", "List", "[", "datatset_subset_tuple", "]", "]", "=", "{", "\n", "\"BASE\"", ":", "[", "]", ",", "\n", "# GPT3 evaluation set", "\n", "\"GPT_EVAL\"", ":", "[", "]", ",", "\n", "# SuperGLUE (except RTE and CB)", "\n", "\"SGLUE\"", ":", "[", "]", ",", "\n", "}", "\n", "t0_eval", ":", "Dict", "[", "str", ",", "List", "[", "datatset_subset_tuple", "]", "]", "=", "{", "\"BASE\"", ":", "[", "]", ",", "\"BIAS_FAIRNESS\"", ":", "[", "]", "}", "\n", "gsheet", ":", "Dict", "[", "datatset_subset_tuple", ",", "Dict", "]", "=", "{", "}", "\n", "experiment_path", "=", "pkg_resources", ".", "resource_filename", "(", "__name__", ",", "\"datasets.csv\"", ")", "\n", "\n", "with", "open", "(", "experiment_path", ")", "as", "exp_file", ":", "\n", "            ", "reader", "=", "csv", ".", "DictReader", "(", "exp_file", ")", "\n", "for", "row", "in", "reader", ":", "\n", "                ", "if", "row", "[", "\"subset\"", "]", "==", "\"\"", ":", "\n", "                    ", "row", "[", "\"subset\"", "]", "=", "None", "# to match promptsource.Template object", "\n", "", "dataset_subset", "=", "(", "row", "[", "\"HF_name\"", "]", ",", "row", "[", "\"subset\"", "]", ")", "\n", "if", "row", "[", "\"do_train\"", "]", "!=", "\"\"", ":", "\n", "                    ", "do_train_source", "=", "row", "[", "\"do_train\"", "]", "\n", "# sanity checks", "\n", "if", "do_train_source", "==", "\"SGLUE\"", ":", "\n", "                        ", "assert", "dataset_subset", "[", "0", "]", "==", "\"super_glue\"", "\n", "", "t0_train", "[", "do_train_source", "]", ".", "append", "(", "dataset_subset", ")", "\n", "", "if", "row", "[", "\"do_eval\"", "]", "!=", "\"\"", ":", "\n", "                    ", "do_eval_source", "=", "row", "[", "\"do_eval\"", "]", "\n", "# sanity checks", "\n", "if", "do_eval_source", "==", "\"BIAS_FAIRNESS\"", ":", "\n", "                        ", "assert", "row", "[", "\"task_by_convention\"", "]", "==", "\"bias_and_fairness\"", "\n", "", "t0_eval", "[", "do_eval_source", "]", ".", "append", "(", "dataset_subset", ")", "\n", "", "gsheet", "[", "dataset_subset", "]", "=", "row", "\n", "\n", "", "", "all_datasets", "=", "sum", "(", "t0_train", ".", "values", "(", ")", ",", "[", "]", ")", "+", "sum", "(", "t0_eval", ".", "values", "(", ")", ",", "[", "]", ")", "\n", "all_templates", "=", "templates", ".", "TemplateCollection", "(", ")", "\n", "all_templates", ".", "remove", "(", "\"anli\"", ")", "\n", "\n", "# 3 stages of training/ablation: D4 -> GPT -> SuperGLUE", "\n", "t0_train_mixture", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "key", ":", "[", "]", "for", "key", "in", "t0_train", "}", "\n", "t0_eval_mixture", ":", "Dict", "[", "str", ",", "List", "[", "str", "]", "]", "=", "{", "key", ":", "[", "]", "for", "key", "in", "t0_eval", "}", "\n", "mixture_cap", ":", "Dict", "[", "str", ",", "int", "]", "=", "{", "}", "\n", "single_original_task", ":", "Dict", "[", "Tuple", "[", "str", ",", "str", "]", ",", "str", "]", "=", "{", "}", "\n", "all_original_tasks", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "added_tasks", ":", "List", "[", "Tuple", "[", "str", ",", "str", ",", "str", "]", "]", "=", "[", "]", "\n", "\n", "def", "get_task_name", "(", "dataset_name", ",", "subset_name", ",", "template_name", ")", ":", "\n", "# Clean the text according to allowed characters for a task name", "\n", "            ", "task_name", "=", "dataset_name", "+", "(", "f\"_{subset_name}_\"", "if", "subset_name", "is", "not", "None", "else", "\"_\"", ")", "+", "template_name", "\n", "return", "re", ".", "sub", "(", "r\"[^\\w\\d\\._]+\"", ",", "\"_\"", ",", "task_name", ")", "\n", "\n", "", "for", "dataset_name", ",", "subset_name", "in", "all_templates", ".", "keys", ":", "\n", "\n", "            ", "if", "(", "dataset_name", ",", "subset_name", ")", "not", "in", "all_datasets", ":", "\n", "                ", "all_templates", ".", "remove", "(", "dataset_name", ",", "subset_name", ")", "\n", "continue", "\n", "", "dataset", "=", "all_templates", ".", "get_dataset", "(", "dataset_name", ",", "subset_name", ")", "\n", "num_templates", "=", "len", "(", "dataset", ".", "all_template_names", ")", "\n", "train_size", "=", "gsheet", "[", "(", "dataset_name", ",", "subset_name", ")", "]", "[", "\"train_size\"", "]", "\n", "if", "train_size", "==", "\"\"", ":", "\n", "                ", "train_size", "=", "0", "\n", "", "else", ":", "\n", "                ", "train_size", "=", "int", "(", "train_size", ")", "\n", "", "if", "train_size", ">", "MAX_EXAMPLES_PER_DATASET", "//", "num_templates", ":", "\n", "                ", "cap", "=", "MAX_EXAMPLES_PER_DATASET", "//", "num_templates", "\n", "", "else", ":", "\n", "                ", "cap", "=", "train_size", "\n", "", "for", "template_name", "in", "dataset", ".", "all_template_names", ":", "\n", "                ", "added_tasks", ".", "append", "(", "(", "dataset_name", ",", "subset_name", ",", "template_name", ")", ")", "\n", "\n", "template", "=", "dataset", "[", "template_name", "]", "\n", "\n", "task_name", "=", "get_task_name", "(", "dataset_name", ",", "subset_name", ",", "template_name", ")", "\n", "\n", "if", "(", "dataset_name", ",", "subset_name", ")", "not", "in", "single_original_task", "and", "template", ".", "metadata", ".", "original_task", ":", "\n", "                    ", "single_original_task", "[", "(", "dataset_name", ",", "subset_name", ")", "]", "=", "task_name", "\n", "\n", "", "if", "template", ".", "metadata", ".", "original_task", ":", "\n", "                    ", "all_original_tasks", ".", "append", "(", "task_name", ")", "\n", "\n", "# Check that the dataset_subset_tuple is in t0_train", "\n", "", "for", "key", ",", "dataset_subset_tuples", "in", "t0_train", ".", "items", "(", ")", ":", "\n", "                    ", "if", "(", "dataset_name", ",", "subset_name", ")", "in", "dataset_subset_tuples", ":", "\n", "                        ", "t0_train_mixture", "[", "key", "]", ".", "append", "(", "task_name", ")", "\n", "mixture_cap", "[", "task_name", "]", "=", "cap", "\n", "\n", "# Check that the dataset_subset_tuple is in t0_eval", "\n", "", "", "if", "(", "dataset_name", ",", "subset_name", ")", "in", "t0_eval", "[", "\"BASE\"", "]", ":", "\n", "                    ", "if", "template", ".", "metadata", ".", "original_task", ":", "\n", "                        ", "t0_eval_mixture", "[", "\"BASE\"", "]", ".", "append", "(", "task_name", ")", "\n", "# TODO use template.metadata.answer_choices here for rank eval", "\n", "", "", "if", "(", "dataset_name", ",", "subset_name", ")", "in", "t0_eval", "[", "\"BIAS_FAIRNESS\"", "]", ":", "\n", "                    ", "t0_eval_mixture", "[", "\"BIAS_FAIRNESS\"", "]", ".", "append", "(", "task_name", ")", "\n", "\n", "", "", "", "self", ".", "t0_base_tasks", "=", "[", "]", "\n", "self", ".", "t0_base_templates", "=", "[", "]", "\n", "for", "(", "dataset_name", ",", "subset_name", ",", "template_name", ")", "in", "added_tasks", ":", "\n", "            ", "task_name", "=", "get_task_name", "(", "dataset_name", ",", "subset_name", ",", "template_name", ")", "\n", "if", "task_name", "in", "t0_train_mixture", "[", "\"BASE\"", "]", ":", "\n", "                ", "if", "task_name", "not", "in", "TASK_BLACKLIST", ":", "\n", "                    ", "self", ".", "t0_base_tasks", ".", "append", "(", "(", "dataset_name", ",", "subset_name", ",", "template_name", ",", "mixture_cap", "[", "task_name", "]", ")", ")", "\n", "template", "=", "all_templates", ".", "get_dataset", "(", "dataset_name", ",", "subset_name", ")", "[", "template_name", "]", "\n", "self", ".", "t0_base_templates", ".", "append", "(", "template", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.get_template": [[458, 460], ["None"], "methods", ["None"], ["", "", "", "", "def", "get_template", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "t0_base_templates", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.T0MixtureReader.read_orig_dataset": [[461, 476], ["orig_data.append", "datasets.load_dataset"], "methods", ["None"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        Read the original dataset\n\n        :param split: split of data\n        \"\"\"", "\n", "orig_data", "=", "[", "]", "\n", "for", "(", "dataset_name", ",", "subset_name", ",", "template_name", ",", "cap", ")", "in", "self", ".", "t0_base_tasks", ":", "\n", "            ", "if", "split", "==", "\"train\"", ":", "\n", "                ", "split_num", "=", "f\"{split}[0:{cap}]\"", "\n", "", "else", ":", "\n", "                ", "split_num", "=", "split", "\n", "\n", "", "orig_data", ".", "append", "(", "load_dataset", "(", "dataset_name", ",", "subset_name", ",", "split", "=", "split_num", ")", ")", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.__init__": [[479, 489], ["open", "os.path.join", "json.loads", "os.path.dirname"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "answer_choices", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\"raft_prompt_construction_settings.jsonl\"", ")", ")", "as", "f", ":", "\n", "            ", "data", "=", "[", "json", ".", "loads", "(", "line", ")", "for", "line", "in", "f", "]", "\n", "FIELD_ORDERING", "=", "data", "[", "0", "]", "\n", "INSTRUCTIONS", "=", "data", "[", "1", "]", "\n", "", "self", ".", "dataset_name", "=", "config", ".", "dataset", "\n", "self", ".", "answer_choices", "=", "answer_choices", "\n", "self", ".", "instruction", "=", "INSTRUCTIONS", "[", "self", ".", "dataset_name", "]", "\n", "self", ".", "fields", "=", "FIELD_ORDERING", "[", "self", ".", "dataset_name", "]", "\n", "self", ".", "raft_labels_in_input_string", "=", "config", ".", "raft_labels_in_input_string", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.apply": [[490, 517], ["dataset_readers.RaftTemplate.instruction.strip", "example[].strip", "input_str.append", "dataset_readers.RaftTemplate.instruction.strip", "dataset_readers.RaftTemplate.instruction.strip", "example[].strip", "enumerate", "str", "enumerate", "str"], "methods", ["None"], ["", "def", "apply", "(", "self", ",", "example", ")", ":", "\n", "        ", "if", "self", ".", "raft_labels_in_input_string", "==", "\"comma\"", ":", "\n", "            ", "input_str", "=", "[", "\n", "self", ".", "instruction", ".", "strip", "(", ")", "\n", "+", "\" Possible labels: \"", "\n", "+", "\", \"", ".", "join", "(", "[", "choice", "for", "index", ",", "choice", "in", "enumerate", "(", "self", ".", "answer_choices", ")", "]", ")", "\n", "]", "\n", "", "elif", "self", ".", "raft_labels_in_input_string", "==", "\"newline\"", ":", "\n", "            ", "input_str", "=", "[", "\n", "self", ".", "instruction", ".", "strip", "(", ")", "\n", "+", "\"\\nPossible labels:\\n\"", "\n", "+", "\"\\n\"", ".", "join", "(", "[", "str", "(", "index", "+", "1", ")", "+", "\". \"", "+", "choice", "for", "index", ",", "choice", "in", "enumerate", "(", "self", ".", "answer_choices", ")", "]", ")", "\n", "]", "\n", "", "else", ":", "\n", "            ", "input_str", "=", "[", "self", ".", "instruction", ".", "strip", "(", ")", "]", "\n", "\n", "", "for", "key", "in", "example", ":", "\n", "            ", "if", "key", "in", "self", ".", "fields", ":", "\n", "                ", "if", "example", "[", "key", "]", ".", "strip", "(", ")", "!=", "\"\"", ":", "\n", "                    ", "input_str", ".", "append", "(", "str", "(", "key", ")", "+", "\": \"", "+", "example", "[", "key", "]", ".", "strip", "(", ")", ")", "\n", "\n", "", "", "", "if", "example", "[", "\"label\"", "]", "==", "-", "1", ":", "\n", "            ", "target_str", "=", "\"Unlabeled\"", "\n", "", "else", ":", "\n", "            ", "target_str", "=", "self", ".", "answer_choices", "[", "example", "[", "\"label\"", "]", "]", "\n", "", "input_str", "[", "-", "1", "]", "+=", "\"\\nLabel:\"", "\n", "return", "input_str", ",", "target_str", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftTemplate.get_answer_choices_list": [[518, 520], ["None"], "methods", ["None"], ["", "def", "get_answer_choices_list", "(", "self", ",", "example", ")", ":", "\n", "        ", "return", "self", ".", "answer_choices", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.__init__": [[523, 532], ["datasets.load_dataset", "dataset_readers.RaftTemplate", "answer.replace().replace", "answer.replace"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "dataset_name", "=", "config", ".", "dataset", "\n", "self", ".", "orig_data", "=", "load_dataset", "(", "\"ought/raft\"", ",", "name", "=", "self", ".", "dataset_name", ")", "\n", "self", ".", "answer_choices", "=", "self", ".", "orig_data", "[", "\"train\"", "]", ".", "features", "[", "\"Label\"", "]", ".", "names", "[", "1", ":", "]", "\n", "if", "self", ".", "config", ".", "dataset", "==", "\"banking_77\"", "and", "config", ".", "cleaned_answer_choices_b77", ":", "\n", "            ", "self", ".", "answer_choices", "=", "[", "answer", ".", "replace", "(", "\"_\"", ",", "\" \"", ")", ".", "replace", "(", "\". \"", ",", "\" \"", ")", "for", "answer", "in", "self", ".", "answer_choices", "]", "\n", "\n", "", "self", ".", "template", "=", "RaftTemplate", "(", "config", ",", "self", ".", "answer_choices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.get_train_template": [[533, 535], ["None"], "methods", ["None"], ["", "def", "get_train_template", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.get_eval_template": [[536, 538], ["None"], "methods", ["None"], ["", "def", "get_eval_template", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "template", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.read_orig_dataset": [[539, 593], ["enumerate", "int", "len", "len"], "methods", ["None"], ["", "def", "read_orig_dataset", "(", "self", ",", "split", ")", ":", "\n", "        ", "\"\"\"\n        Read the original dataset\n\n        :param split: split of data\n        \"\"\"", "\n", "if", "self", ".", "config", ".", "raft_cross_validation", ":", "\n", "            ", "orig_data", "=", "[", "example", "for", "example", "in", "self", ".", "orig_data", "[", "\"train\"", "]", "]", "\n", "if", "split", "==", "\"train\"", ":", "\n", "                ", "orig_data", "=", "(", "\n", "orig_data", "[", ":", "self", ".", "config", ".", "raft_validation_start", "]", "+", "orig_data", "[", "self", ".", "config", ".", "raft_validation_start", "+", "10", ":", "]", "\n", ")", "\n", "assert", "len", "(", "orig_data", ")", "==", "40", "\n", "", "elif", "split", "==", "\"validation\"", ":", "\n", "                ", "orig_data", "=", "orig_data", "[", "self", ".", "config", ".", "raft_validation_start", ":", "self", ".", "config", ".", "raft_validation_start", "+", "10", "]", "\n", "assert", "len", "(", "orig_data", ")", "==", "10", "\n", "", "", "else", ":", "\n", "            ", "if", "split", "==", "\"validation\"", ":", "\n", "                ", "split", "=", "\"test\"", "\n", "", "orig_data", "=", "[", "example", "for", "example", "in", "self", ".", "orig_data", "[", "split", "]", "]", "\n", "", "for", "i", ",", "example", "in", "enumerate", "(", "orig_data", ")", ":", "\n", "# if self.dataset_name in ['ade_corpus_v2', 'terms_of_service','overruling']:", "\n", "#     example['input'] = example['Sentence'].strip()", "\n", "# elif self.dataset_name in ['banking_77']:", "\n", "#     example['input'] = example['Query'].strip()", "\n", "# elif self.dataset_name in ['tai_safety_research']:", "\n", "#     example['input'] = 'Title : ' + example['Title'].strip() + ' ' + \\", "\n", "#         'Abstract Note : ' + example['Abstract Note'].strip() + ' '+ \\", "\n", "#             'Url : ' + example['Url'].strip() + ' ' + \\", "\n", "#                 'Publication Year : ' + example['Publication Year'].strip() + ' '+ \\", "\n", "#                     'Item Type : ' + example['Item Type'].strip() + ' ' + \\", "\n", "#                         'Author : ' + example['Author'].strip() + ' '+ \\", "\n", "#                             'Publication Title : '  + example['Publication Title'].strip()", "\n", "# elif self.dataset_name in ['neurips_impact_statement_risks']:", "\n", "#     example['input'] = 'Paper title : ' + example['Paper title'].strip() + ' ' + \\", "\n", "#         'Paper link : ' + example['Paper link'].strip() + ' ' + \\", "\n", "#             'Impact statement : ' + example['Impact statement'].strip()", "\n", "# elif self.dataset_name in ['systematic_review_inclusion']:", "\n", "#     example['input'] = 'Title : ' + example['Title'].strip() + ' ' + \\", "\n", "#         'Abstract : ' + example['Abstract'].strip() + ' ' + \\", "\n", "#             'Authors : ' + example['Authors'].strip() + ' ' + \\", "\n", "#                 'Journal : ' + example['Journal'].strip()", "\n", "# elif self.dataset_name in ['one_stop_english']:", "\n", "#     example['input'] = example['Article'].strip()", "\n", "# elif self.dataset_name in ['tweet_eval_hate']:", "\n", "#     example['input'] = example['Tweet'].strip()", "\n", "# elif self.dataset_name in ['twitter_complaints']:", "\n", "#     example['input'] = example['Tweet text'].strip()", "\n", "# elif self.dataset_name in ['semiconductor_org_types']:", "\n", "#     example['input'] = 'Paper title : ' + example['Paper title'].strip() + \\", "\n", "#         'Organization name : ' + example['Organization name'].strip()", "\n", "            ", "example", "[", "\"label\"", "]", "=", "int", "(", "example", "[", "\"Label\"", "]", ")", "-", "1", "\n", "example", "[", "\"idx\"", "]", "=", "example", "[", "\"ID\"", "]", "\n", "", "return", "orig_data", "\n", "\n"]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.RaftReader.compute_metric": [[594, 605], ["zip", "pandas.DataFrame().astype", "pandas.DataFrame().astype.to_csv", "data.append", "sum", "len", "pandas.DataFrame", "zip"], "methods", ["None"], ["", "def", "compute_metric", "(", "self", ",", "accumulated", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "idxs", "=", "accumulated", "[", "\"idx\"", "]", "\n", "predictions", "=", "accumulated", "[", "\"prediction\"", "]", "\n", "for", "idx", ",", "prediction", "in", "zip", "(", "idxs", ",", "predictions", ")", ":", "\n", "            ", "data", ".", "append", "(", "{", "\"ID\"", ":", "idx", ",", "\"Label\"", ":", "self", ".", "answer_choices", "[", "prediction", "]", "}", ")", "\n", "", "result_df", "=", "pd", ".", "DataFrame", "(", "data", "=", "data", ",", "columns", "=", "[", "\"ID\"", ",", "\"Label\"", "]", ")", ".", "astype", "(", "{", "\"ID\"", ":", "int", ",", "\"Label\"", ":", "str", "}", ")", "\n", "result_df", ".", "to_csv", "(", "self", ".", "config", ".", "dev_pred_file", ",", "index", "=", "False", ")", "\n", "matching", "=", "[", "a", "==", "b", "for", "a", ",", "b", "in", "zip", "(", "accumulated", "[", "\"prediction\"", "]", ",", "accumulated", "[", "\"label\"", "]", ")", "]", "\n", "accuracy", "=", "sum", "(", "matching", ")", "/", "len", "(", "matching", ")", "\n", "return", "{", "\"accuracy\"", ":", "accuracy", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.r-three_t-few.data.dataset_readers.get_dataset_reader": [[14, 41], ["dataset_class"], "function", ["None"], ["def", "get_dataset_reader", "(", "config", ")", ":", "\n", "    ", "dataset_class", "=", "{", "\n", "\"T0Mixture\"", ":", "T0MixtureReader", ",", "\n", "\"rte\"", ":", "RTEReader", ",", "\n", "\"h-swag\"", ":", "HSwagReader", ",", "\n", "\"copa\"", ":", "COPAReader", ",", "\n", "\"wic\"", ":", "WiCReader", ",", "\n", "\"winogrande\"", ":", "WinograndeReader", ",", "\n", "\"cb\"", ":", "CBReader", ",", "\n", "\"storycloze\"", ":", "StoryClozeReader", ",", "\n", "\"anli-r1\"", ":", "ANLIR1Reader", ",", "\n", "\"anli-r2\"", ":", "ANLIR2Reader", ",", "\n", "\"anli-r3\"", ":", "ANLIR3Reader", ",", "\n", "\"wsc\"", ":", "WSCFixedReader", ",", "\n", "\"ade_corpus_v2\"", ":", "RaftReader", ",", "\n", "\"banking_77\"", ":", "RaftReader", ",", "\n", "\"terms_of_service\"", ":", "RaftReader", ",", "\n", "\"tai_safety_research\"", ":", "RaftReader", ",", "\n", "\"neurips_impact_statement_risks\"", ":", "RaftReader", ",", "\n", "\"overruling\"", ":", "RaftReader", ",", "\n", "\"systematic_review_inclusion\"", ":", "RaftReader", ",", "\n", "\"one_stop_english\"", ":", "RaftReader", ",", "\n", "\"tweet_eval_hate\"", ":", "RaftReader", ",", "\n", "\"twitter_complaints\"", ":", "RaftReader", ",", "\n", "\"semiconductor_org_types\"", ":", "RaftReader", ",", "\n", "}", "[", "config", ".", "dataset", "]", "\n", "return", "dataset_class", "(", "config", ")", "\n", "\n"]]}