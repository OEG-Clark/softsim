{"home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1.__init__": [[6, 14], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.CosineSimilarity", "torch.load", "torch.nn.Parameter", "torch.nn.Parameter"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"Baseline1\"", "\n", "self", ".", "fc_cm", "=", "nn", ".", "Linear", "(", "160", ",", "2", ")", "\n", "self", ".", "coss", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "aasist", "=", "torch", ".", "load", "(", "\"./aasist/models/weights/AASIST.pth\"", ")", "\n", "self", ".", "fc_cm", ".", "weight", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.weight\"", "]", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "fc_cm", ".", "bias", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.bias\"", "]", ",", "requires_grad", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1.forward_SV_prob": [[15, 20], ["models.Baseline1.coss().unsqueeze", "models.Baseline1.coss"], "methods", ["None"], ["", "def", "forward_SV_prob", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ")", ":", "\n", "        ", "asv_cos", "=", "self", ".", "coss", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", ".", "unsqueeze", "(", "1", ")", "\n", "asv_score", "=", "asv_cos", "\n", "p_sv", "=", "asv_score", "\n", "return", "p_sv", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1.forward_CM_prob": [[21, 25], ["models.Baseline1.fc_cm", "cm_score[].unsqueeze"], "methods", ["None"], ["", "def", "forward_CM_prob", "(", "self", ",", "embd_cm_tst", ")", ":", "\n", "        ", "cm_score", "=", "self", ".", "fc_cm", "(", "embd_cm_tst", ")", "\n", "p_cm", "=", "cm_score", "[", ":", ",", "1", "]", ".", "unsqueeze", "(", "1", ")", "\n", "return", "p_cm", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1.forward": [[26, 31], ["models.Baseline1.forward_SV_prob", "models.Baseline1.forward_CM_prob"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_SV_prob", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_CM_prob"], ["", "def", "forward", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ")", ":", "\n", "        ", "p_sv", "=", "self", ".", "forward_SV_prob", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", "\n", "p_cm", "=", "self", ".", "forward_CM_prob", "(", "embd_cm_tst", ")", "\n", "x", "=", "p_sv", "+", "p_cm", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1.calc_loss": [[32, 34], ["None"], "methods", ["None"], ["", "def", "calc_loss", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ",", "labels", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline2.__init__": [[37, 44], ["torch.nn.Module.__init__", "models.Baseline2._make_layers", "torch.nn.Linear", "torch.nn.CrossEntropyLoss", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__init__", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline2._make_layers"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", "=", "[", "256", ",", "128", ",", "64", "]", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"Baseline2\"", "\n", "self", ".", "enh_DNN", "=", "self", ".", "_make_layers", "(", "544", ",", "num_nodes", ")", "\n", "self", ".", "fc_out", "=", "torch", ".", "nn", ".", "Linear", "(", "num_nodes", "[", "-", "1", "]", ",", "2", ",", "bias", "=", "False", ")", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.1", ",", "0.9", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline2.forward": [[46, 55], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "models.Baseline2.enh_DNN", "models.Baseline2.fc_out", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ")", ":", "\n", "        ", "asv_enr", "=", "torch", ".", "squeeze", "(", "embd_asv_enr", ",", "1", ")", "# shape: (bs, 192)", "\n", "asv_tst", "=", "torch", ".", "squeeze", "(", "embd_asv_tst", ",", "1", ")", "# shape: (bs, 192)", "\n", "cm_tst", "=", "torch", ".", "squeeze", "(", "embd_cm_tst", ",", "1", ")", "# shape: (bs, 160)", "\n", "\n", "x", "=", "self", ".", "enh_DNN", "(", "torch", ".", "cat", "(", "[", "asv_enr", ",", "asv_tst", ",", "cm_tst", "]", ",", "dim", "=", "1", ")", ")", "# shape: (bs, 32)", "\n", "x", "=", "self", ".", "fc_out", "(", "x", ")", "# (bs, 2)", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline2._make_layers": [[56, 67], ["range", "torch.nn.Sequential", "len", "l_fc.append", "l_fc.append", "l_fc.append", "torch.nn.LeakyReLU", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_make_layers", "(", "self", ",", "in_dim", ",", "l_nodes", ")", ":", "\n", "        ", "l_fc", "=", "[", "]", "\n", "for", "idx", "in", "range", "(", "len", "(", "l_nodes", ")", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "l_fc", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_features", "=", "in_dim", ",", "\n", "out_features", "=", "l_nodes", "[", "idx", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "l_fc", ".", "append", "(", "torch", ".", "nn", ".", "Linear", "(", "in_features", "=", "l_nodes", "[", "idx", "-", "1", "]", ",", "\n", "out_features", "=", "l_nodes", "[", "idx", "]", ")", ")", "\n", "", "l_fc", ".", "append", "(", "torch", ".", "nn", ".", "LeakyReLU", "(", "negative_slope", "=", "0.3", ")", ")", "\n", "", "return", "torch", ".", "nn", ".", "Sequential", "(", "*", "l_fc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline2.calc_loss": [[68, 76], ["torch.squeeze", "torch.squeeze", "torch.squeeze", "models.Baseline2.enh_DNN", "models.Baseline2.fc_out", "models.Baseline2.loss", "torch.cat"], "methods", ["None"], ["", "def", "calc_loss", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ",", "labels", ")", ":", "\n", "        ", "asv_enr", "=", "torch", ".", "squeeze", "(", "embd_asv_enr", ",", "1", ")", "# shape: (bs, 192)", "\n", "asv_tst", "=", "torch", ".", "squeeze", "(", "embd_asv_tst", ",", "1", ")", "# shape: (bs, 192)", "\n", "cm_tst", "=", "torch", ".", "squeeze", "(", "embd_cm_tst", ",", "1", ")", "# shape: (bs, 160)", "\n", "\n", "x", "=", "self", ".", "enh_DNN", "(", "torch", ".", "cat", "(", "[", "asv_enr", ",", "asv_tst", ",", "cm_tst", "]", ",", "dim", "=", "1", ")", ")", "# shape: (bs, 32)", "\n", "x", "=", "self", ".", "fc_out", "(", "x", ")", "# (bs, 2)", "\n", "return", "self", ".", "loss", "(", "x", ",", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Parallel_PR.__init__": [[83, 99], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.CosineSimilarity", "torch.nn.Sigmoid", "torch.load", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.BCELoss", "[].unsqueeze", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "trainable", "=", "True", ",", "calibrator", "=", "None", ",", "map_function", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "(", "not", "calibrator", ")", "or", "(", "not", "map_function", ")", "\n", "self", ".", "name", "=", "\"ProductRule\"", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "calibrator", "=", "calibrator", "\n", "self", ".", "map_func", "=", "map_function", "\n", "self", ".", "fc_cm", "=", "nn", ".", "Linear", "(", "160", ",", "1", ")", "\n", "if", "not", "self", ".", "trainable", ":", "\n", "            ", "aasist", "=", "torch", ".", "load", "(", "\"./aasist/models/weights/AASIST.pth\"", ")", "\n", "self", ".", "fc_cm", ".", "weight", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.weight\"", "]", "[", "1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "fc_cm", ".", "bias", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.bias\"", "]", "[", "1", "]", ",", "requires_grad", "=", "False", ")", "\n", "", "self", ".", "coss", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "if", "self", ".", "trainable", ":", "\n", "            ", "self", ".", "loss_sasv", "=", "nn", ".", "BCELoss", "(", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.9", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Parallel_PR.forward_SV_prob": [[100, 113], ["models.Parallel_PR.coss().unsqueeze", "models.Parallel_PR.coss().unsqueeze", "torch.from_numpy().to().unsqueeze().float", "models.cos2prob_lin", "models.Parallel_PR.coss", "models.Parallel_PR.calibrator.predict_proba", "models.Parallel_PR.sigmoid", "ValueError", "models.Parallel_PR.coss", "models.Parallel_PR.cpu().numpy", "torch.from_numpy().to().unsqueeze", "models.Parallel_PR.cpu", "torch.from_numpy().to", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.cos2prob_lin"], ["", "", "def", "forward_SV_prob", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ")", ":", "\n", "        ", "asv_cos", "=", "self", ".", "coss", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "calibrator", ":", "\n", "            ", "asv_cos", "=", "self", ".", "coss", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", ".", "unsqueeze", "(", "1", ")", "\n", "p_sv", "=", "self", ".", "calibrator", ".", "predict_proba", "(", "asv_cos", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "[", ":", ",", "1", "]", "\n", "p_sv", "=", "torch", ".", "from_numpy", "(", "p_sv", ")", ".", "to", "(", "embd_asv_enr", ".", "device", ")", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", "\n", "return", "p_sv", "\n", "", "if", "self", ".", "map_func", "==", "\"linear\"", ":", "\n", "            ", "return", "cos2prob_lin", "(", "asv_cos", ")", "\n", "", "elif", "self", ".", "map_func", "==", "\"sigmoid\"", ":", "\n", "            ", "return", "self", ".", "sigmoid", "(", "asv_cos", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"which function to calculate probability\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Parallel_PR.forward_CM_prob": [[114, 118], ["models.Parallel_PR.fc_cm", "models.Parallel_PR.sigmoid"], "methods", ["None"], ["", "", "def", "forward_CM_prob", "(", "self", ",", "embd_cm_tst", ")", ":", "\n", "        ", "cm_score", "=", "self", ".", "fc_cm", "(", "embd_cm_tst", ")", "\n", "p_cm", "=", "self", ".", "sigmoid", "(", "cm_score", ")", "\n", "return", "p_cm", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Parallel_PR.forward": [[119, 124], ["models.Parallel_PR.forward_SV_prob", "models.Parallel_PR.forward_CM_prob"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_SV_prob", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_CM_prob"], ["", "def", "forward", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ")", ":", "\n", "        ", "p_sv", "=", "self", ".", "forward_SV_prob", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", "\n", "p_cm", "=", "self", ".", "forward_CM_prob", "(", "embd_cm_tst", ")", "\n", "x", "=", "p_sv", "*", "p_cm", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Parallel_PR.calc_loss": [[125, 131], ["models.Parallel_PR.forward", "models.Parallel_PR.loss_sasv", "labels.unsqueeze().float", "labels.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward"], ["", "def", "calc_loss", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ",", "labels", ")", ":", "\n", "        ", "if", "not", "self", ".", "trainable", ":", "\n", "            ", "return", "0", "\n", "", "sasv_score", "=", "self", ".", "forward", "(", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ")", "\n", "loss", "=", "self", ".", "loss_sasv", "(", "sasv_score", ",", "labels", ".", "unsqueeze", "(", "1", ")", ".", "float", "(", ")", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.__init__": [[134, 144], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.load", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.CosineSimilarity", "torch.nn.Sigmoid", "[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__init__"], ["    ", "def", "__init__", "(", "self", ",", "map_function", "=", "\"sigmoid\"", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "name", "=", "\"Baseline1+scaling\"", "\n", "self", ".", "map_func", "=", "map_function", "\n", "self", ".", "fc_cm", "=", "nn", ".", "Linear", "(", "160", ",", "1", ")", "\n", "aasist", "=", "torch", ".", "load", "(", "\"./aasist/models/weights/AASIST.pth\"", ")", "\n", "self", ".", "fc_cm", ".", "weight", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.weight\"", "]", "[", "1", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "fc_cm", ".", "bias", "=", "nn", ".", "Parameter", "(", "aasist", "[", "\"out_layer.bias\"", "]", "[", "1", "]", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "coss", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", "\n", "self", ".", "sigmoid", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_SV_prob": [[145, 153], ["models.Baseline1_improved.coss().unsqueeze", "models.cos2prob_lin", "models.Baseline1_improved.coss", "models.Baseline1_improved.sigmoid", "ValueError"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.cos2prob_lin"], ["", "def", "forward_SV_prob", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ")", ":", "\n", "        ", "asv_cos", "=", "self", ".", "coss", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", ".", "unsqueeze", "(", "1", ")", "\n", "if", "self", ".", "map_func", "==", "\"linear\"", ":", "\n", "            ", "return", "cos2prob_lin", "(", "asv_cos", ")", "\n", "", "elif", "self", ".", "map_func", "==", "\"sigmoid\"", ":", "\n", "            ", "return", "self", ".", "sigmoid", "(", "asv_cos", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"which function to calculate probability\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_CM_prob": [[154, 158], ["models.Baseline1_improved.fc_cm", "models.Baseline1_improved.sigmoid"], "methods", ["None"], ["", "", "def", "forward_CM_prob", "(", "self", ",", "embd_cm_tst", ")", ":", "\n", "        ", "cm_score", "=", "self", ".", "fc_cm", "(", "embd_cm_tst", ")", "\n", "p_cm", "=", "self", ".", "sigmoid", "(", "cm_score", ")", "\n", "return", "p_cm", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward": [[159, 164], ["models.Baseline1_improved.forward_SV_prob", "models.Baseline1_improved.forward_CM_prob"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_SV_prob", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.forward_CM_prob"], ["", "def", "forward", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ")", ":", "\n", "        ", "p_sv", "=", "self", ".", "forward_SV_prob", "(", "embd_asv_enr", ",", "embd_asv_tst", ")", "\n", "p_cm", "=", "self", ".", "forward_CM_prob", "(", "embd_cm_tst", ")", "\n", "x", "=", "p_sv", "+", "p_cm", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.calc_loss": [[165, 167], ["None"], "methods", ["None"], ["", "def", "calc_loss", "(", "self", ",", "embd_asv_enr", ",", "embd_asv_tst", ",", "embd_cm_tst", ",", "labels", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.cos2prob_lin": [[78, 80], ["None"], "function", ["None"], ["", "", "def", "cos2prob_lin", "(", "cos", ")", ":", "\n", "    ", "return", "(", "cos", "+", "1", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.initParams": [[12, 101], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "utils.set_seed", "torch.cuda.is_available", "print", "torch.device", "os.path.exists", "os.path.exists", "os.path.exists", "os.path.exists", "os.makedirs", "shutil.rmtree", "os.mkdir", "os.path.exists", "os.makedirs", "shutil.rmtree", "os.mkdir", "open", "file.write", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "json.dumps", "vars"], "function", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.set_seed"], ["def", "initParams", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "\"SASV2022_ProductRule.\"", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "type", "=", "int", ",", "help", "=", "\"random number seed\"", ",", "default", "=", "688", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'-m'", ",", "'--model_name'", ",", "help", "=", "'Model arch'", ",", "default", "=", "'pr_s_f'", ",", "\n", "choices", "=", "[", "'baseline1'", ",", "'baseline2'", ",", "\n", "'pr_l_i'", ",", "'pr_s_i'", ",", "'pr_c_i'", ",", "'pr_l_f'", ",", "'pr_s_f'", ",", "\n", "'baseline1_l_i'", ",", "'baseline1_s_i'", "]", ")", "\n", "\n", "# Output folder prepare", "\n", "parser", ".", "add_argument", "(", "\n", "\"-o\"", ",", "\"--output_dir\"", ",", "dest", "=", "\"output_dir\"", ",", "type", "=", "str", ",", "\n", "help", "=", "\"output directory for results\"", ",", "required", "=", "True", ",", "\n", "default", "=", "\"./exp_result\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--gpu\"", ",", "type", "=", "str", ",", "help", "=", "\"GPU index\"", ",", "default", "=", "\"1\"", ")", "\n", "\n", "# Dataset prepare", "\n", "parser", ".", "add_argument", "(", "\"--embedding_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./embeddings/\"", ",", "\n", "help", "=", "\"folder for the pretrained ASV and CM embeddings\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--spk_meta_dir\"", ",", "type", "=", "str", ",", "default", "=", "\"./spk_meta/\"", ",", "\n", "help", "=", "\"folder for the speaker meta information\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sasv_dev_trial\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"protocols/ASVspoof2019.LA.asv.dev.gi.trl.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sasv_eval_trial\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"protocols/ASVspoof2019.LA.asv.eval.gi.trl.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cm_trn_list\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"protocols/ASVspoof2019.LA.cm.train.trn.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cm_dev_list\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"protocols/ASVspoof2019.LA.cm.dev.trl.txt\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--cm_eval_list\"", ",", "type", "=", "str", ",", "\n", "default", "=", "\"protocols/ASVspoof2019.LA.cm.eval.trl.txt\"", ")", "\n", "\n", "## Training hyperparameters", "\n", "parser", ".", "add_argument", "(", "'--num_epochs'", ",", "type", "=", "int", ",", "default", "=", "200", ",", "help", "=", "\"Number of epochs for training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "1024", ",", "\n", "help", "=", "\"Mini batch size for training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--num_workers'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"number of workers\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0003", ",", "help", "=", "\"learning rate\"", ")", "\n", "parser", ".", "add_argument", "(", "'--clip_norm'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "help", "=", "\"clip norm for training\"", ")", "\n", "parser", ".", "add_argument", "(", "'--eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "help", "=", "\"epsilon for computation\"", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_deterministic_toggle'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "True", ")", "\n", "parser", ".", "add_argument", "(", "'--cudnn_benchmark_toggle'", ",", "type", "=", "str2bool", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "False", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--test_only'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"test the trained model in case the test crash sometimes or another test method\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Change this to specify GPU", "\n", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "gpu", "\n", "\n", "# Set seeds", "\n", "set_seed", "(", "args", ")", "\n", "\n", "# generate speaker-utterance meta information", "\n", "assert", "(", "\n", "os", ".", "path", ".", "exists", "(", "args", ".", "spk_meta_dir", "+", "\"spk_meta_trn.pk\"", ")", "\n", "and", "os", ".", "path", ".", "exists", "(", "args", ".", "spk_meta_dir", "+", "\"spk_meta_dev.pk\"", ")", "\n", "and", "os", ".", "path", ".", "exists", "(", "args", ".", "spk_meta_dir", "+", "\"spk_meta_eval.pk\"", ")", "\n", ")", "\n", "\n", "if", "args", ".", "test_only", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "# Path for output data", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "args", ".", "output_dir", ")", "\n", "os", ".", "mkdir", "(", "args", ".", "output_dir", ")", "\n", "\n", "# Folder for intermediate results", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoints'", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoints'", ")", ")", "\n", "", "else", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoints'", ")", ")", "\n", "os", ".", "mkdir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'checkpoints'", ")", ")", "\n", "\n", "# Save training arguments", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'args.json'", ")", ",", "'w'", ")", "as", "file", ":", "\n", "            ", "file", ".", "write", "(", "json", ".", "dumps", "(", "vars", "(", "args", ")", ",", "sort_keys", "=", "True", ",", "separators", "=", "(", "'\\n'", ",", "':'", ")", ")", ")", "\n", "\n", "", "", "args", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "print", "(", "'Cuda device available: '", ",", "args", ".", "cuda", ")", "\n", "args", ".", "device", "=", "torch", ".", "device", "(", "\"cuda\"", "if", "args", ".", "cuda", "else", "\"cpu\"", ")", "\n", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.train": [[102, 127], ["utils.set_init_weights", "trainer.Trainer", "trainer.Trainer.run_train", "models.Parallel_PR", "open", "pickle.load", "models.Baseline1_improved", "models.Baseline1", "models.Baseline2", "ValueError"], "function", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.set_init_weights", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.run_train"], ["", "def", "train", "(", "args", ")", ":", "\n", "    ", "if", "\"pr\"", "in", "args", ".", "model_name", ":", "\n", "        ", "mapping_dict", "=", "{", "\"l\"", ":", "\"linear\"", ",", "\"s\"", ":", "\"sigmoid\"", ",", "\"c\"", ":", "None", "}", "\n", "trainable_dict", "=", "{", "\"i\"", ":", "False", ",", "\"f\"", ":", "True", "}", "\n", "if", "\"c\"", "in", "args", ".", "model_name", ":", "\n", "            ", "f", "=", "open", "(", "\"./calibrator/sv_sigmoid.pk\"", ",", "'rb'", ")", "\n", "calibrator", "=", "pkl", ".", "load", "(", "f", ")", "\n", "", "else", ":", "\n", "            ", "calibrator", "=", "None", "\n", "", "model", "=", "Parallel_PR", "(", "trainable", "=", "trainable_dict", "[", "args", ".", "model_name", "[", "-", "1", "]", "]", ",", "calibrator", "=", "calibrator", ",", "\n", "map_function", "=", "mapping_dict", "[", "args", ".", "model_name", "[", "-", "3", "]", "]", ")", "\n", "", "elif", "\"baseline1_\"", "in", "args", ".", "model_name", ":", "\n", "        ", "mapping_dict", "=", "{", "\"l\"", ":", "\"linear\"", ",", "\"s\"", ":", "\"sigmoid\"", "}", "\n", "model", "=", "Baseline1_improved", "(", "map_function", "=", "mapping_dict", "[", "args", ".", "model_name", "[", "-", "3", "]", "]", ")", "\n", "", "elif", "args", ".", "model_name", "==", "\"baseline1\"", ":", "\n", "        ", "model", "=", "Baseline1", "(", ")", "\n", "", "elif", "args", ".", "model_name", "==", "\"baseline2\"", ":", "\n", "        ", "model", "=", "Baseline2", "(", "num_nodes", "=", "[", "256", ",", "128", ",", "64", "]", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Which model do you want to use?\"", ")", "\n", "", "set_init_weights", "(", "model", ")", "\n", "trainer", "=", "Trainer", "(", "args", ",", "model", ")", "\n", "trainer", ".", "run_train", "(", ")", "\n", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate_one_iter": [[128, 138], ["torch.cuda.is_available", "model", "asv1.to.to", "asv2.to.to", "cm2.to.to"], "function", ["None"], ["", "def", "evaluate_one_iter", "(", "args", ",", "model", ",", "data_minibatch", ")", ":", "\n", "    ", "asv1", ",", "asv2", ",", "cm2", ",", "ans", ",", "key", "=", "data_minibatch", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "asv1", "=", "asv1", ".", "to", "(", "args", ".", "device", ")", "\n", "asv2", "=", "asv2", ".", "to", "(", "args", ".", "device", ")", "\n", "cm2", "=", "cm2", ".", "to", "(", "args", ".", "device", ")", "\n", "\n", "", "pred", "=", "model", "(", "asv1", ",", "asv2", ",", "cm2", ")", "\n", "\n", "return", "{", "\"pred\"", ":", "pred", ",", "\"key\"", ":", "key", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate_on_set": [[139, 163], ["model.eval", "dataset.SASV_Dataset", "torch.utils.data.DataLoader", "torch.no_grad", "enumerate", "metrics.get_all_EERs_my", "print", "main_train.evaluate_one_iter", "torch.cat().detach().cpu().numpy.append", "keys.extend", "[].detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "open", "pickle.dump", "open", "pickle.dump", "list", "os.path.join", "os.path.join", "[].detach().cpu", "torch.cat().detach().cpu", "[].detach", "torch.cat().detach", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.metrics.get_all_EERs_my", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate_one_iter"], ["", "def", "evaluate_on_set", "(", "args", ",", "model", ",", "set", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "evaluation_set", "=", "SASV_Dataset", "(", "args", ",", "set", ")", "\n", "eval_loader", "=", "DataLoader", "(", "evaluation_set", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "preds", ",", "keys", "=", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "num", ",", "data_slice", "in", "enumerate", "(", "eval_loader", ")", ":", "\n", "            ", "output", "=", "evaluate_one_iter", "(", "args", ",", "model", ",", "data_slice", ")", "\n", "preds", ".", "append", "(", "output", "[", "\"pred\"", "]", ")", "\n", "keys", ".", "extend", "(", "list", "(", "output", "[", "\"key\"", "]", ")", ")", "\n", "", "if", "args", ".", "model_name", "==", "\"baseline\"", "or", "args", ".", "model_name", "==", "\"baseline2\"", ":", "\n", "            ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "set", "+", "'_preds.pkl'", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pkl", ".", "dump", "(", "preds", ",", "handle", ",", "protocol", "=", "pkl", ".", "HIGHEST_PROTOCOL", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "set", "+", "'_keys.pkl'", ")", ",", "'wb'", ")", "as", "handle", ":", "\n", "            ", "pkl", ".", "dump", "(", "keys", ",", "handle", ",", "protocol", "=", "pkl", ".", "HIGHEST_PROTOCOL", ")", "\n", "\n", "", "sasv_eer", ",", "sv_eer", ",", "spf_eer", "=", "get_all_EERs_my", "(", "preds", "=", "preds", ",", "keys", "=", "keys", ")", "\n", "print", "(", "\"sasv_eer_\"", "+", "set", "+", "\": %0.3f, sv_eer_\"", "%", "(", "100", "*", "sasv_eer", ")", "+", "set", "+", "\n", "\": %0.3f, spf_eer_\"", "%", "(", "100", "*", "sv_eer", ")", "+", "set", "+", "\": %0.3f\"", "%", "(", "100", "*", "spf_eer", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate": [[164, 168], ["print", "main_train.evaluate_on_set", "main_train.evaluate_on_set"], "function", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate_on_set", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.evaluate_on_set"], ["", "", "def", "evaluate", "(", "args", ",", "model", ")", ":", "\n", "    ", "print", "(", "\"\\nFinal evaluation for the best epoch:\"", ")", "\n", "evaluate_on_set", "(", "args", ",", "model", ",", "\"dev\"", ")", "\n", "evaluate_on_set", "(", "args", ",", "model", ",", "\"eval\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.metrics.get_all_EERs": [[10, 58], ["zip", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sasv_labels.append", "sv_labels.append", "spf_labels.append", "sv_preds.append", "spf_preds.append", "sasv_labels.append", "sv_labels.append", "sv_preds.append", "sasv_labels.append", "spf_labels.append", "spf_preds.append", "ValueError", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d"], "function", ["None"], ["def", "get_all_EERs", "(", "\n", "preds", ":", "Union", "[", "torch", ".", "Tensor", ",", "List", ",", "numpy", ".", "ndarray", "]", ",", "keys", ":", "List", "\n", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "\"\"\"\n    Calculate all three EERs used in the SASV Challenge 2022.\n    preds and keys should be pre-calculated using dev or eval protocol in\n    either 'protocols/ASVspoof2019.LA.asv.dev.gi.trl.txt' or\n    'protocols/ASVspoof2019.LA.asv.eval.gi.trl.txt'\n\n    :param preds: list of scores in tensor\n    :param keys: list of keys where each element should be one of\n    ['target', 'nontarget', 'spoof']\n    \"\"\"", "\n", "sasv_labels", ",", "sv_labels", ",", "spf_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "sv_preds", ",", "spf_preds", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "pred", ",", "key", "in", "zip", "(", "preds", ",", "keys", ")", ":", "\n", "        ", "if", "key", "==", "\"target\"", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "1", ")", "\n", "sv_labels", ".", "append", "(", "1", ")", "\n", "spf_labels", ".", "append", "(", "1", ")", "\n", "sv_preds", ".", "append", "(", "pred", ")", "\n", "spf_preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "elif", "key", "==", "\"nontarget\"", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "0", ")", "\n", "sv_labels", ".", "append", "(", "0", ")", "\n", "sv_preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "elif", "key", "==", "\"spoof\"", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "0", ")", "\n", "spf_labels", ".", "append", "(", "0", ")", "\n", "spf_preds", ".", "append", "(", "pred", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "f\"should be one of 'target', 'nontarget', 'spoof', got:{key}\"", "\n", ")", "\n", "\n", "", "", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "sasv_labels", ",", "preds", ",", "pos_label", "=", "1", ")", "\n", "sasv_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "sv_labels", ",", "sv_preds", ",", "pos_label", "=", "1", ")", "\n", "sv_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "spf_labels", ",", "spf_preds", ",", "pos_label", "=", "1", ")", "\n", "spf_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "sasv_eer", ",", "sv_eer", ",", "spf_eer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.metrics.get_all_EERs_my": [[60, 106], ["zip", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sklearn.metrics.roc_curve", "scipy.optimize.brentq", "sasv_labels.append", "sv_labels.append", "spf_labels.append", "sv_preds.append", "spf_preds.append", "sasv_labels.append", "sv_labels.append", "sv_preds.append", "sasv_labels.append", "spf_labels.append", "spf_preds.append", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d"], "function", ["None"], ["", "def", "get_all_EERs_my", "(", "\n", "preds", ":", "Union", "[", "torch", ".", "Tensor", ",", "List", ",", "numpy", ".", "ndarray", "]", ",", "keys", ":", "List", "\n", ")", "->", "List", "[", "float", "]", ":", "\n", "    ", "\"\"\"\n    Calculate all three EERs used in the SASV Challenge 2022.\n    preds and keys should be pre-calculated using dev or eval protocol in\n    either 'protocols/ASVspoof2019.LA.asv.dev.gi.trl.txt' or\n    'protocols/ASVspoof2019.LA.asv.eval.gi.trl.txt'\n\n    :param preds: list of scores in tensor\n    :param keys: list of keys where each element should be one of\n    ['target', 'nontarget', 'spoof']\n    \"\"\"", "\n", "sasv_labels", ",", "sv_labels", ",", "spf_labels", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "sv_preds", ",", "spf_preds", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "pred", ",", "key", "in", "zip", "(", "preds", ",", "keys", ")", ":", "\n", "        ", "if", "key", "==", "0", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "1", ")", "\n", "sv_labels", ".", "append", "(", "1", ")", "\n", "spf_labels", ".", "append", "(", "1", ")", "\n", "sv_preds", ".", "append", "(", "pred", ")", "\n", "spf_preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "elif", "key", "==", "1", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "0", ")", "\n", "sv_labels", ".", "append", "(", "0", ")", "\n", "sv_preds", ".", "append", "(", "pred", ")", "\n", "\n", "", "elif", "key", "==", "2", ":", "\n", "            ", "sasv_labels", ".", "append", "(", "0", ")", "\n", "spf_labels", ".", "append", "(", "0", ")", "\n", "spf_preds", ".", "append", "(", "pred", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "sasv_labels", ",", "preds", ",", "pos_label", "=", "1", ")", "\n", "sasv_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "sv_labels", ",", "sv_preds", ",", "pos_label", "=", "1", ")", "\n", "sv_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "fpr", ",", "tpr", ",", "_", "=", "roc_curve", "(", "spf_labels", ",", "spf_preds", ",", "pos_label", "=", "1", ")", "\n", "spf_eer", "=", "brentq", "(", "lambda", "x", ":", "1.0", "-", "x", "-", "interp1d", "(", "fpr", ",", "tpr", ")", "(", "x", ")", ",", "0.0", ",", "1.0", ")", "\n", "\n", "return", "sasv_eer", ",", "sv_eer", ",", "spf_eer", "", "", ""]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.__init__": [[14, 27], ["model.to", "torch.nn.CrossEntropyLoss().to", "torch.optim.Adam", "torch.optim.lr_scheduler.LambdaLR", "torch.nn.CrossEntropyLoss", "trainer.Trainer.model.parameters", "utils.keras_decay", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.keras_decay"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "model", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "loss", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "\n", "weight", "=", "torch", ".", "FloatTensor", "(", "[", "0.1", ",", "0.9", "]", ")", "\n", ")", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "params", "=", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "lr", "=", "args", ".", "lr", ",", "\n", "weight_decay", "=", "0.001", ",", "\n", ")", "\n", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "\n", "self", ".", "optimizer", ",", "lr_lambda", "=", "lambda", "step", ":", "keras_decay", "(", "step", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.training_one_iter": [[30, 51], ["torch.cuda.is_available", "trainer.Trainer.model", "trainer.Trainer.model.calc_loss", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "asv1.to.to.to", "asv2.to.to.to", "cm2.to.to.to", "ans.to.to.to", "torch.nn.utils.clip_grad_norm_", "torch.softmax", "trainer.Trainer.model.parameters"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.calc_loss"], ["", "def", "training_one_iter", "(", "self", ",", "data_minibatch", ")", ":", "\n", "        ", "asv1", ",", "asv2", ",", "cm2", ",", "ans", ",", "key", "=", "data_minibatch", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "asv1", "=", "asv1", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "asv2", "=", "asv2", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "cm2", "=", "cm2", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "ans", "=", "ans", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "", "pred", "=", "self", ".", "model", "(", "asv1", ",", "asv2", ",", "cm2", ")", "\n", "nloss", "=", "self", ".", "model", ".", "calc_loss", "(", "asv1", ",", "asv2", ",", "cm2", ",", "ans", ")", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "nloss", ".", "backward", "(", ")", "\n", "if", "self", ".", "args", ".", "clip_norm", ":", "\n", "            ", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "\n", "self", ".", "args", ".", "clip_norm", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "if", "self", ".", "args", ".", "model_name", "==", "\"baseline\"", ":", "\n", "            ", "pred", "=", "torch", ".", "softmax", "(", "pred", ",", "dim", "=", "-", "1", ")", "\n", "", "output", "=", "(", "pred", ",", "key", ")", "\n", "\n", "return", "nloss", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.training_one_epoch": [[52, 80], ["trainer.Trainer.model.train", "dataset.SASV_Dataset", "torch.utils.data.DataLoader", "len", "enumerate", "metrics.get_all_EERs_my", "print", "trainer.Trainer.training_one_iter", "torch.cat().detach().cpu().numpy.append", "keys.extend", "sys.stderr.write", "sys.stderr.flush", "[].detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "list", "[].detach().cpu", "torch.cat().detach().cpu", "time.strftime", "[].detach", "torch.cat().detach", "trainer.Trainer.lr_scheduler.get_last_lr", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.main_train.train", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.metrics.get_all_EERs_my", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.training_one_iter"], ["", "def", "training_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "train", "(", ")", "\n", "loss", "=", "0", "\n", "preds", ",", "keys", "=", "[", "]", ",", "[", "]", "\n", "training_set", "=", "SASV_Dataset", "(", "self", ".", "args", ",", "\"trn\"", ")", "\n", "train_loader", "=", "DataLoader", "(", "training_set", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "drop_last", "=", "True", ",", "pin_memory", "=", "True", ")", "\n", "tot_batch", "=", "len", "(", "train_loader", ")", "\n", "for", "num", ",", "data_slice", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "nloss", ",", "output", "=", "self", ".", "training_one_iter", "(", "data_slice", ")", "\n", "loss", "+=", "nloss", "\n", "pred", ",", "key", "=", "output", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "keys", ".", "extend", "(", "list", "(", "key", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "time", ".", "strftime", "(", "\"%m-%d %H:%M:%S\"", ")", "+", "\" [%3d] Lr: %5f, \"", "%", "(", "epoch", ",", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "-", "1", "]", ")", "+", "\" Training Progress: %.1f%%, Training Loss: %.5f \\r\"", "%", "\n", "(", "100", "*", "(", "(", "num", "+", "1", ")", "/", "tot_batch", ")", ",", "loss", "/", "(", "num", "+", "1", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "if", "self", ".", "args", ".", "model_name", "==", "\"baseline\"", "or", "self", ".", "args", ".", "model_name", "==", "\"baseline2\"", ":", "\n", "            ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "            ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "sasv_eer", ",", "sv_eer", ",", "spf_eer", "=", "get_all_EERs_my", "(", "preds", "=", "preds", ",", "keys", "=", "keys", ")", "\n", "print", "(", "\"\\nTrn: sasv_eer_trn: %0.3f, sv_eer_trn: %0.3f, spf_eer_trn: %0.3f\"", "%", "(", "\n", "100", "*", "sasv_eer", ",", "100", "*", "sv_eer", ",", "100", "*", "spf_eer", ")", ")", "\n", "\n", "return", "loss", "/", "tot_batch", ",", "sasv_eer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.validate_one_iter": [[81, 96], ["torch.cuda.is_available", "trainer.Trainer.model", "trainer.Trainer.model.calc_loss", "asv1.to.to.to", "asv2.to.to.to", "cm2.to.to.to", "ans.to.to.to", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.models.Baseline1_improved.calc_loss"], ["", "def", "validate_one_iter", "(", "self", ",", "data_minibatch", ")", ":", "\n", "        ", "asv1", ",", "asv2", ",", "cm2", ",", "ans", ",", "key", "=", "data_minibatch", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "asv1", "=", "asv1", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "asv2", "=", "asv2", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "cm2", "=", "cm2", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "ans", "=", "ans", ".", "to", "(", "self", ".", "args", ".", "device", ")", "\n", "\n", "", "pred", "=", "self", ".", "model", "(", "asv1", ",", "asv2", ",", "cm2", ")", "\n", "nloss", "=", "self", ".", "model", ".", "calc_loss", "(", "asv1", ",", "asv2", ",", "cm2", ",", "ans", ")", "\n", "if", "self", ".", "args", ".", "model_name", "==", "\"baseline\"", ":", "\n", "            ", "pred", "=", "torch", ".", "softmax", "(", "pred", ",", "dim", "=", "-", "1", ")", "\n", "", "output", "=", "(", "pred", ",", "key", ")", "\n", "\n", "return", "nloss", ",", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.validate_one_epoch": [[97, 126], ["trainer.Trainer.model.eval", "dataset.SASV_Dataset", "torch.utils.data.DataLoader", "len", "torch.no_grad", "enumerate", "metrics.get_all_EERs_my", "print", "trainer.Trainer.validate_one_iter", "torch.cat().detach().cpu().numpy.append", "keys.extend", "sys.stderr.write", "sys.stderr.flush", "[].detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "list", "[].detach().cpu", "torch.cat().detach().cpu", "time.strftime", "[].detach", "torch.cat().detach", "trainer.Trainer.lr_scheduler.get_last_lr", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.metrics.get_all_EERs_my", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.validate_one_iter"], ["", "def", "validate_one_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "validation_set", "=", "SASV_Dataset", "(", "self", ".", "args", ",", "\"dev\"", ")", "\n", "valid_loader", "=", "DataLoader", "(", "validation_set", ",", "batch_size", "=", "self", ".", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "drop_last", "=", "False", ",", "pin_memory", "=", "True", ")", "\n", "tot_batch", "=", "len", "(", "valid_loader", ")", "\n", "loss", "=", "0", "\n", "preds", ",", "keys", "=", "[", "]", ",", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "num", ",", "data_slice", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "                ", "nloss", ",", "output", "=", "self", ".", "validate_one_iter", "(", "data_slice", ")", "\n", "loss", "+=", "nloss", "\n", "pred", ",", "key", "=", "output", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "keys", ".", "extend", "(", "list", "(", "key", ")", ")", "\n", "sys", ".", "stderr", ".", "write", "(", "time", ".", "strftime", "(", "\"%m-%d %H:%M:%S\"", ")", "+", "\" [%3d] Lr: %5f, \"", "%", "(", "epoch", ",", "self", ".", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "-", "1", "]", ")", "+", "\" Validating Progress: %.1f%%, Validation Loss: %.5f \\r\"", "%", "\n", "(", "100", "*", "(", "(", "num", "+", "1", ")", "/", "tot_batch", ")", ",", "loss", "/", "(", "num", "+", "1", ")", ")", ")", "\n", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "", "if", "self", ".", "args", ".", "model_name", "==", "\"baseline\"", "or", "self", ".", "args", ".", "model_name", "==", "\"baseline2\"", ":", "\n", "                ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", "[", ":", ",", "1", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "preds", "=", "torch", ".", "cat", "(", "preds", ",", "dim", "=", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "sasv_eer", ",", "sv_eer", ",", "spf_eer", "=", "get_all_EERs_my", "(", "preds", "=", "preds", ",", "keys", "=", "keys", ")", "\n", "print", "(", "\"\\nDev: sasv_eer_dev: %0.3f, sv_eer_dev: %0.3f, spf_eer_dev: %0.3f\"", "%", "(", "\n", "100", "*", "sasv_eer", ",", "100", "*", "sv_eer", ",", "100", "*", "spf_eer", ")", ")", "\n", "\n", "", "return", "loss", "/", "tot_batch", ",", "sasv_eer", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.run_train": [[127, 148], ["trainer.Trainer.validate_one_epoch", "torch.save", "range", "os.path.join", "trainer.Trainer.training_one_epoch", "trainer.Trainer.validate_one_epoch", "trainer.Trainer.lr_scheduler.step", "os.path.join", "torch.save", "print", "torch.save", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.validate_one_epoch", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.training_one_epoch", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.trainer.Trainer.validate_one_epoch"], ["", "def", "run_train", "(", "self", ")", ":", "\n", "        ", "min_eer", "=", "1e4", "\n", "init_loss", ",", "sasv_eer_dev", "=", "self", ".", "validate_one_epoch", "(", "0", ")", "\n", "if", "sasv_eer_dev", "<", "min_eer", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"%s_best.pt\"", "\n", "%", "(", "self", ".", "model", ".", "name", ")", ")", ")", "\n", "min_eer", "=", "sasv_eer_dev", "\n", "", "try", ":", "\n", "            ", "for", "epoch_idx", "in", "range", "(", "1", ",", "(", "self", ".", "args", ".", "num_epochs", "+", "1", ")", ")", ":", "\n", "                ", "train_loss", ",", "sasv_eer_trn", "=", "self", ".", "training_one_epoch", "(", "epoch_idx", ")", "\n", "valid_loss", ",", "sasv_eer_dev", "=", "self", ".", "validate_one_epoch", "(", "epoch_idx", ")", "\n", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"checkpoints\"", ",", "\"%s_epoch_%03d_trainloss_%.3f_valloss_%.3f_trneer_%.3f_deveer_%.3f.pt\"", "\n", "%", "(", "self", ".", "model", ".", "name", ",", "epoch_idx", ",", "train_loss", ",", "valid_loss", ",", "sasv_eer_trn", ",", "sasv_eer_dev", ")", ")", "\n", "torch", ".", "save", "(", "self", ".", "model", ",", "save_path", ")", "\n", "if", "sasv_eer_dev", "<", "min_eer", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "model", ",", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "output_dir", ",", "\"%s_best.pt\"", "\n", "%", "(", "self", ".", "model", ".", "name", ")", ")", ")", "\n", "min_eer", "=", "sasv_eer_dev", "\n", "", "", "", "except", ":", "\n", "            ", "print", "(", "\"\\nThis model will not continue training or has nothing to train.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__init__": [[7, 18], ["dataset.SASV_Dataset.load_embeddings", "dataset.SASV_Dataset.load_meta_information", "getattr", "open", "f.readlines"], "methods", ["home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.load_embeddings", "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.load_meta_information"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "partition", ")", ":", "\n", "        ", "self", ".", "part", "=", "partition", "\n", "self", ".", "embedding_dir", "=", "args", ".", "embedding_dir", "\n", "if", "self", ".", "part", "==", "\"trn\"", ":", "\n", "            ", "self", ".", "spk_meta_dir", "=", "args", ".", "spk_meta_dir", "\n", "self", ".", "load_meta_information", "(", ")", "\n", "", "else", ":", "\n", "            ", "sasv_trial", "=", "getattr", "(", "args", ",", "'sasv_'", "+", "self", ".", "part", "+", "'_trial'", ")", "\n", "with", "open", "(", "sasv_trial", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "utt_list", "=", "f", ".", "readlines", "(", ")", "\n", "", "", "self", ".", "load_embeddings", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.load_meta_information": [[19, 22], ["open", "pickle.load"], "methods", ["None"], ["", "def", "load_meta_information", "(", "self", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "spk_meta_dir", "+", "\"spk_meta_trn.pk\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "spk_meta", "=", "pk", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.load_embeddings": [[23, 34], ["open", "pickle.load", "open", "pickle.load", "open", "pickle.load"], "methods", ["None"], ["", "", "def", "load_embeddings", "(", "self", ")", ":", "\n", "# load saved countermeasures(CM) related preparations", "\n", "        ", "with", "open", "(", "self", ".", "embedding_dir", "+", "\"cm_embd_\"", "+", "self", ".", "part", "+", "\".pk\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "cm_embd", "=", "pk", ".", "load", "(", "f", ")", "\n", "# load saved automatic speaker verification(ASV) related preparations", "\n", "", "with", "open", "(", "self", ".", "embedding_dir", "+", "\"asv_embd_\"", "+", "self", ".", "part", "+", "\".pk\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "asv_embd", "=", "pk", ".", "load", "(", "f", ")", "\n", "", "if", "self", ".", "part", "in", "[", "\"dev\"", ",", "\"eval\"", "]", ":", "\n", "# load speaker models for development and evaluation sets", "\n", "            ", "with", "open", "(", "self", ".", "embedding_dir", "+", "\"spk_model_\"", "+", "self", ".", "part", "+", "\".pk\"", ",", "\"rb\"", ")", "as", "f", ":", "\n", "                ", "self", ".", "spk_model", "=", "pk", ".", "load", "(", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__len__": [[35, 40], ["len", "dataset.SASV_Dataset.cm_embd.keys", "len"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "part", "==", "\"trn\"", ":", "\n", "            ", "return", "len", "(", "self", ".", "cm_embd", ".", "keys", "(", ")", ")", "\n", "", "elif", "self", ".", "part", "in", "[", "\"dev\"", ",", "\"eval\"", "]", ":", "\n", "            ", "return", "len", "(", "self", ".", "utt_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.__getitem__": [[41, 43], ["getattr"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "'getitem_'", "+", "self", ".", "part", ")", "(", "idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.getitem_trn": [[44, 71], ["random.randint", "random.choice", "random.sample", "list", "random.randint", "dataset.SASV_Dataset.spk_meta.keys", "random.sample", "random.choice", "random.choice", "random.choice", "random.choice", "random.choice", "dataset.SASV_Dataset.spk_meta.keys", "list", "len", "dataset.SASV_Dataset.spk_meta.keys", "random.choice", "list", "len", "dataset.SASV_Dataset.spk_meta.keys"], "methods", ["None"], ["", "def", "getitem_trn", "(", "self", ",", "index", ")", ":", "\n", "        ", "ans_type", "=", "random", ".", "randint", "(", "0", ",", "1", ")", "\n", "if", "ans_type", "==", "1", ":", "# target", "\n", "            ", "spk", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "spk_meta", ".", "keys", "(", ")", ")", ")", "\n", "enr", ",", "tst", "=", "random", ".", "sample", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"bonafide\"", "]", ",", "2", ")", "\n", "nontarget_type", "=", "0", "\n", "", "elif", "ans_type", "==", "0", ":", "# nontarget", "\n", "            ", "nontarget_type", "=", "random", ".", "randint", "(", "1", ",", "2", ")", "\n", "if", "nontarget_type", "==", "1", ":", "# zero-effort nontarget", "\n", "                ", "spk", ",", "ze_spk", "=", "random", ".", "sample", "(", "self", ".", "spk_meta", ".", "keys", "(", ")", ",", "2", ")", "\n", "enr", "=", "random", ".", "choice", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"bonafide\"", "]", ")", "\n", "tst", "=", "random", ".", "choice", "(", "self", ".", "spk_meta", "[", "ze_spk", "]", "[", "\"bonafide\"", "]", ")", "\n", "\n", "", "if", "nontarget_type", "==", "2", ":", "# spoof nontarget", "\n", "                ", "spk", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "spk_meta", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"spoof\"", "]", ")", "==", "0", ":", "\n", "                    ", "while", "True", ":", "\n", "                        ", "spk", "=", "random", ".", "choice", "(", "list", "(", "self", ".", "spk_meta", ".", "keys", "(", ")", ")", ")", "\n", "if", "len", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"spoof\"", "]", ")", "!=", "0", ":", "\n", "                            ", "break", "\n", "", "", "", "enr", "=", "random", ".", "choice", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"bonafide\"", "]", ")", "\n", "tst", "=", "random", ".", "choice", "(", "self", ".", "spk_meta", "[", "spk", "]", "[", "\"spoof\"", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "raise", "ValueError", "\n", "\n", "", "return", "self", ".", "asv_embd", "[", "enr", "]", ",", "self", ".", "asv_embd", "[", "tst", "]", ",", "self", ".", "cm_embd", "[", "tst", "]", ",", "ans_type", ",", "nontarget_type", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.getitem_dev": [[72, 80], ["line.strip().split", "int", "line.strip"], "methods", ["None"], ["", "def", "getitem_dev", "(", "self", ",", "index", ")", ":", "\n", "        ", "line", "=", "self", ".", "utt_list", "[", "index", "]", "\n", "spkmd", ",", "key", ",", "_", ",", "ans", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "ans_type", "=", "int", "(", "ans", "==", "\"target\"", ")", "\n", "nontype_dict", "=", "{", "\"target\"", ":", "0", ",", "\"nontarget\"", ":", "1", ",", "\"spoof\"", ":", "2", "}", "\n", "\n", "return", "self", ".", "spk_model", "[", "spkmd", "]", ",", "self", ".", "asv_embd", "[", "key", "]", ",", "self", ".", "cm_embd", "[", "key", "]", ",", "ans_type", ",", "nontype_dict", "[", "ans", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.dataset.SASV_Dataset.getitem_eval": [[81, 89], ["line.strip().split", "int", "line.strip"], "methods", ["None"], ["", "def", "getitem_eval", "(", "self", ",", "index", ")", ":", "\n", "        ", "line", "=", "self", ".", "utt_list", "[", "index", "]", "\n", "spkmd", ",", "key", ",", "_", ",", "ans", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", "\n", "ans_type", "=", "int", "(", "ans", "==", "\"target\"", ")", "\n", "nontype_dict", "=", "{", "\"target\"", ":", "0", ",", "\"nontarget\"", ":", "1", ",", "\"spoof\"", ":", "2", "}", "\n", "\n", "return", "self", ".", "spk_model", "[", "spkmd", "]", ",", "self", ".", "asv_embd", "[", "key", "]", ",", "self", ".", "cm_embd", "[", "key", "]", ",", "ans_type", ",", "nontype_dict", "[", "ans", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.calibration.utt_to_meta": [[9, 22], ["None"], "function", ["None"], ["def", "utt_to_meta", "(", "spk_meta", ")", ":", "\n", "    ", "utt_meta_dict", "=", "{", "}", "\n", "for", "spkid", "in", "spk_meta", ":", "\n", "        ", "realList", "=", "spk_meta", "[", "spkid", "]", "[", "'bonafide'", "]", "\n", "fakeList", "=", "spk_meta", "[", "spkid", "]", "[", "'spoof'", "]", "\n", "\n", "for", "realFile", "in", "realList", ":", "\n", "            ", "utt_meta_dict", "[", "realFile", "]", "=", "[", "'bonafide'", ",", "spkid", "]", "\n", "\n", "", "for", "fakeFile", "in", "fakeList", ":", "\n", "            ", "utt_meta_dict", "[", "fakeFile", "]", "=", "[", "'spoof'", ",", "spkid", "]", "\n", "\n", "", "", "return", "utt_meta_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.calibration.create_calibration_data": [[23, 42], ["tqdm.tqdm", "tqdm.tqdm", "utt_bonafide.append", "scores.append", "labels.append", "labels.append", "scipy.spatial.distance.cdist"], "function", ["None"], ["", "def", "create_calibration_data", "(", "cohortUttEmbeds", ",", "cohortSpkEmbeds", ",", "\n", "cohortUttMeta", ")", ":", "\n", "    ", "utt_bonafide", "=", "[", "]", "\n", "for", "cohortUtt", "in", "tqdm", "(", "cohortUttEmbeds", ")", ":", "\n", "        ", "if", "cohortUttMeta", "[", "cohortUtt", "]", "[", "0", "]", "==", "'spoof'", ":", "\n", "            ", "continue", "\n", "", "utt_bonafide", ".", "append", "(", "cohortUtt", ")", "\n", "", "scores", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "for", "spk", "in", "tqdm", "(", "cohortSpkEmbeds", ")", ":", "\n", "        ", "spkEmb", "=", "cohortSpkEmbeds", "[", "spk", "]", "\n", "for", "utt", "in", "utt_bonafide", ":", "\n", "            ", "cos_sim", "=", "1", "-", "cdist", "(", "[", "spkEmb", "]", ",", "[", "cohortUttEmbeds", "[", "utt", "]", "]", ",", "'cosine'", ")", "[", "0", "]", "\n", "scores", ".", "append", "(", "cos_sim", ")", "\n", "if", "cohortUttMeta", "[", "utt", "]", "[", "1", "]", "==", "spk", ":", "\n", "                ", "labels", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                ", "labels", ".", "append", "(", "0", ")", "\n", "", "", "", "return", "scores", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.str2bool": [[12, 30], ["val.lower.lower", "ValueError"], "function", ["None"], ["def", "str2bool", "(", "val", ")", ":", "\n", "    ", "\"\"\"Convert a string representation of truth to true (1) or false (0).\n    Copied from the python implementation distutils.utils.strtobool\n\n    True values are 'y', 'yes', 't', 'true', 'on', and '1'; false values\n    are 'n', 'no', 'f', 'false', 'off', and '0'.  Raises ValueError if\n    'val' is anything else.\n    >>> str_to_bool('YES')\n    1\n    >>> str_to_bool('FALSE')\n    0\n    \"\"\"", "\n", "val", "=", "val", ".", "lower", "(", ")", "\n", "if", "val", "in", "(", "\"y\"", ",", "\"yes\"", ",", "\"t\"", ",", "\"true\"", ",", "\"on\"", ",", "\"1\"", ")", ":", "\n", "        ", "return", "True", "\n", "", "if", "val", "in", "(", "\"n\"", ",", "\"no\"", ",", "\"f\"", ",", "\"false\"", ",", "\"off\"", ",", "\"0\"", ")", ":", "\n", "        ", "return", "False", "\n", "", "raise", "ValueError", "(", "\"invalid truth value {}\"", ".", "format", "(", "val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.cosine_annealing": [[32, 35], ["numpy.cos"], "function", ["None"], ["", "def", "cosine_annealing", "(", "step", ",", "total_steps", ",", "lr_max", ",", "lr_min", ")", ":", "\n", "    ", "\"\"\"Cosine Annealing for learning rate decay scheduler\"\"\"", "\n", "return", "lr_min", "+", "(", "lr_max", "-", "lr_min", ")", "*", "0.5", "*", "(", "1", "+", "np", ".", "cos", "(", "step", "/", "total_steps", "*", "np", ".", "pi", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.keras_decay": [[37, 40], ["None"], "function", ["None"], ["", "def", "keras_decay", "(", "step", ",", "decay", "=", "0.0001", ")", ":", "\n", "    ", "\"\"\"Learning rate decay in Keras-style\"\"\"", "\n", "return", "1.0", "/", "(", "1.0", "+", "decay", "*", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.set_seed": [[42, 55], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "str", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "args", ")", ":", "\n", "    ", "\"\"\"\n    set initial seed for reproduction\n    \"\"\"", "\n", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "os", ".", "environ", "[", "'PYTHONHASHSEED'", "]", "=", "str", "(", "args", ".", "seed", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "torch", ".", "cuda", ".", "manual_seed_all", "(", "args", ".", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "args", ".", "cudnn_deterministic_toggle", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "args", ".", "cudnn_benchmark_toggle", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.set_init_weights": [[57, 71], ["isinstance", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "isinstance", "m.bias.data.fill_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_"], "function", ["None"], ["", "", "def", "set_init_weights", "(", "m", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "try", ":", "\n", "            ", "m", ".", "bias", ".", "data", ".", "fill_", "(", "0.0001", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm1d", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0.01", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.yzyouzhang_sasv_pr.None.utils.load_parameters": [[72, 86], ["torch.load", "torch.load", "torch.load.items", "trg_state[].copy_", "name.replace.replace", "name.replace.replace", "trg_state[].size", "loaded_state[].size", "print", "print", "trg_state[].size", "loaded_state[].size"], "function", ["None"], ["", "", "", "def", "load_parameters", "(", "trg_state", ",", "path", ")", ":", "\n", "    ", "loaded_state", "=", "torch", ".", "load", "(", "path", ")", "\n", "for", "name", ",", "param", "in", "loaded_state", ".", "items", "(", ")", ":", "\n", "        ", "origname", "=", "name", "\n", "if", "name", "not", "in", "trg_state", ":", "\n", "            ", "name", "=", "name", ".", "replace", "(", "\"module.\"", ",", "\"\"", ")", "\n", "name", "=", "name", ".", "replace", "(", "\"speaker_encoder.\"", ",", "\"\"", ")", "\n", "if", "name", "not", "in", "trg_state", ":", "\n", "                ", "print", "(", "\"%s is not in the model.\"", "%", "origname", ")", "\n", "continue", "\n", "", "", "if", "trg_state", "[", "name", "]", ".", "size", "(", ")", "!=", "loaded_state", "[", "origname", "]", ".", "size", "(", ")", ":", "\n", "            ", "print", "(", "\"Wrong parameter length: %s, model: %s, loaded: %s\"", "%", "(", "origname", ",", "trg_state", "[", "name", "]", ".", "size", "(", ")", ",", "loaded_state", "[", "origname", "]", ".", "size", "(", ")", ")", ")", "\n", "continue", "\n", "", "trg_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "\n"]]}