{"home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.CAE_MNIST.conv_layer": [[170, 174], ["tensorflow.nn.conv2d", "nonlinearity"], "function", ["None"], ["def", "conv_layer", "(", "input", ",", "filter", ",", "bias", ",", "strides", ",", "padding", "=", "\"VALID\"", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "input", ",", "filter", ",", "strides", "=", "strides", ",", "padding", "=", "padding", ")", "\n", "act", "=", "nonlinearity", "(", "conv", "+", "bias", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.CAE_MNIST.deconv_layer": [[176, 180], ["tensorflow.nn.conv2d_transpose", "nonlinearity"], "function", ["None"], ["", "def", "deconv_layer", "(", "input", ",", "filter", ",", "bias", ",", "output_shape", ",", "strides", ",", "padding", "=", "\"VALID\"", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "deconv", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "input", ",", "filter", ",", "output_shape", ",", "strides", ",", "padding", "=", "padding", ")", "\n", "act", "=", "nonlinearity", "(", "deconv", "+", "bias", ")", "\n", "return", "act", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.CAE_MNIST.fc_layer": [[181, 183], ["nonlinearity", "tensorflow.matmul"], "function", ["None"], ["", "def", "fc_layer", "(", "input", ",", "weight", ",", "bias", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "return", "nonlinearity", "(", "tf", ".", "matmul", "(", "input", ",", "weight", ")", "+", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.data_preprocessing.batch_elastic_transform": [[10, 40], ["numpy.empty_like", "e_images.reshape.reshape", "range", "e_images.reshape.reshape", "len", "numpy.random.RandomState", "scipy.ndimage.interpolation.map_coordinates", "scipy.ndimage.filters.gaussian_filter", "scipy.ndimage.filters.gaussian_filter", "np.random.RandomState.rand", "np.random.RandomState.rand"], "function", ["None"], ["def", "batch_elastic_transform", "(", "images", ",", "sigma", ",", "alpha", ",", "height", ",", "width", ",", "random_state", "=", "None", ")", ":", "\n", "    ", "'''\n    this code is borrowed from chsasank on GitHubGist\n    Elastic deformation of images as described in [Simard 2003].\n    \n    images: a two-dimensional numpy array; we can think of it as a list of flattened images\n    sigma: the real-valued variance of the gaussian kernel\n    alpha: a real-value that is multiplied onto the displacement fields\n    \n    returns: an elastically distorted image of the same shape\n    '''", "\n", "assert", "len", "(", "images", ".", "shape", ")", "==", "2", "\n", "# the two lines below ensure we do not alter the array images", "\n", "e_images", "=", "np", ".", "empty_like", "(", "images", ")", "\n", "e_images", "[", ":", "]", "=", "images", "\n", "\n", "e_images", "=", "e_images", ".", "reshape", "(", "-", "1", ",", "height", ",", "width", ")", "\n", "\n", "if", "random_state", "is", "None", ":", "\n", "        ", "random_state", "=", "np", ".", "random", ".", "RandomState", "(", "None", ")", "\n", "", "x", ",", "y", "=", "np", ".", "mgrid", "[", "0", ":", "height", ",", "0", ":", "width", "]", "\n", "\n", "for", "i", "in", "range", "(", "e_images", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "        ", "dx", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "height", ",", "width", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "'constant'", ")", "*", "alpha", "\n", "dy", "=", "gaussian_filter", "(", "(", "random_state", ".", "rand", "(", "height", ",", "width", ")", "*", "2", "-", "1", ")", ",", "sigma", ",", "mode", "=", "'constant'", ")", "*", "alpha", "\n", "indices", "=", "x", "+", "dx", ",", "y", "+", "dy", "\n", "e_images", "[", "i", "]", "=", "map_coordinates", "(", "e_images", "[", "i", "]", ",", "indices", ",", "order", "=", "1", ")", "\n", "\n", "", "return", "e_images", ".", "reshape", "(", "-", "1", ",", "784", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.makedirs": [[11, 17], ["os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.makedirs"], ["def", "makedirs", "(", "path", ")", ":", "\n", "    ", "'''\n    if path does not exist in the file system, create it\n    '''", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.list_of_distances": [[18, 33], ["tensorflow.reshape", "tensorflow.reshape", "autoencoder_helpers.list_of_norms", "autoencoder_helpers.list_of_norms", "tensorflow.matmul", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.list_of_norms", "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.list_of_norms"], ["", "", "def", "list_of_distances", "(", "X", ",", "Y", ")", ":", "\n", "    ", "'''\n    Given a list of vectors, X = [x_1, ..., x_n], and another list of vectors,\n    Y = [y_1, ... , y_m], we return a list of vectors\n            [[d(x_1, y_1), d(x_1, y_2), ... , d(x_1, y_m)],\n             ...\n             [d(x_n, y_1), d(x_n, y_2), ... , d(x_n, y_m)]],\n    where the distance metric used is the sqared euclidean distance.\n    The computation is achieved through a clever use of broadcasting.\n    '''", "\n", "XX", "=", "tf", ".", "reshape", "(", "list_of_norms", "(", "X", ")", ",", "shape", "=", "(", "-", "1", ",", "1", ")", ")", "\n", "YY", "=", "tf", ".", "reshape", "(", "list_of_norms", "(", "Y", ")", ",", "shape", "=", "(", "1", ",", "-", "1", ")", ")", "\n", "output", "=", "XX", "+", "YY", "-", "2", "*", "tf", ".", "matmul", "(", "X", ",", "tf", ".", "transpose", "(", "Y", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.list_of_norms": [[34, 41], ["tensorflow.reduce_sum", "tensorflow.pow"], "function", ["None"], ["", "def", "list_of_norms", "(", "X", ")", ":", "\n", "    ", "'''\n    X is a list of vectors X = [x_1, ..., x_n], we return\n        [d(x_1, x_1), d(x_2, x_2), ... , d(x_n, x_n)], where the distance\n    function is the squared euclidean distance.\n    '''", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "pow", "(", "X", ",", "2", ")", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.OscarcarLi_PrototypeDL.None.autoencoder_helpers.print_and_write": [[42, 48], ["print", "file.write"], "function", ["None"], ["", "def", "print_and_write", "(", "str", ",", "file", ")", ":", "\n", "    ", "'''\n    print str to the console and also write it to file\n    '''", "\n", "print", "(", "str", ")", "\n", "file", ".", "write", "(", "str", "+", "'\\n'", ")", "\n", "\n"]]}