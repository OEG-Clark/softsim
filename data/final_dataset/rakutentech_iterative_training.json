{"home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.load_model": [[111, 183], ["Mlp3", "NotImplementedError", "Mlp3Binary", "Vgg5", "Mlp3Binary", "Vgg5Binary", "Mlp3", "Vgg5Binary", "Mlp3Binary", "Vgg9", "Mlp3Binary", "NotImplementedError", "Vgg9Binary", "Vgg9Binary", "resnet20", "torch.CrossEntropyLoss", "resnet20", "torch.CrossEntropyLoss", "resnet20", "torch.CrossEntropyLoss", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet20", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet20", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet20"], ["def", "load_model", "(", "args", ")", ":", "\n", "    ", "\"\"\"Load NN model\n    \"\"\"", "\n", "\n", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "if", "args", ".", "model", "==", "'300'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3", "\n", "return", "Mlp3", "(", "in_features", "=", "784", ",", "layer_features1", "=", "300", ",", "layer_features2", "=", "100", ",", "out_features", "=", "10", ")", "\n", "", "elif", "args", ".", "model", "==", "'300_layer'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3Binary", "\n", "return", "Mlp3Binary", "(", "in_features", "=", "784", ",", "layer_features1", "=", "300", ",", "layer_features2", "=", "100", ",", "out_features", "=", "10", ",", "\n", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "False", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'300_binary'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3Binary", "\n", "return", "Mlp3Binary", "(", "in_features", "=", "784", ",", "layer_features1", "=", "300", ",", "layer_features2", "=", "100", ",", "out_features", "=", "10", ",", "\n", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "True", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'784'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3", "\n", "return", "Mlp3", "(", "in_features", "=", "784", ",", "layer_features1", "=", "784", ",", "layer_features2", "=", "784", ",", "out_features", "=", "10", ")", "\n", "", "elif", "args", ".", "model", "==", "'784_layer'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3Binary", "\n", "return", "Mlp3Binary", "(", "in_features", "=", "784", ",", "layer_features1", "=", "784", ",", "layer_features2", "=", "784", ",", "out_features", "=", "10", ",", "\n", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "False", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'784_binary'", ":", "\n", "            ", "from", "models", ".", "mlp3", "import", "Mlp3Binary", "\n", "return", "Mlp3Binary", "(", "in_features", "=", "784", ",", "layer_features1", "=", "784", ",", "layer_features2", "=", "784", ",", "out_features", "=", "10", ",", "\n", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "True", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Unknown model requested: {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "if", "args", ".", "model", "==", "'vgg5'", ":", "\n", "            ", "from", "models", ".", "vgg5", "import", "Vgg5", "\n", "return", "Vgg5", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'vgg5_layer'", ":", "\n", "            ", "from", "models", ".", "vgg5binary", "import", "Vgg5Binary", "\n", "return", "Vgg5Binary", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "False", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'vgg5_binary'", ":", "\n", "            ", "from", "models", ".", "vgg5binary", "import", "Vgg5Binary", "\n", "return", "Vgg5Binary", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "True", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'vgg9'", ":", "\n", "            ", "from", "models", ".", "vgg9", "import", "Vgg9", "\n", "return", "Vgg9", "(", ")", "\n", "", "elif", "args", ".", "model", "==", "'vgg9_layer'", ":", "\n", "            ", "from", "models", ".", "vgg9binary", "import", "Vgg9Binary", "\n", "return", "Vgg9Binary", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "False", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'vgg9_binary'", ":", "\n", "            ", "from", "models", ".", "vgg9binary", "import", "Vgg9Binary", "\n", "return", "Vgg9Binary", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "all_binary", "=", "True", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "", "elif", "args", ".", "model", "==", "'resnet20'", ":", "\n", "            ", "from", "models", ".", "resnet", "import", "resnet20", "\n", "net", "=", "resnet20", "(", ")", "\n", "net", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "return", "net", "\n", "", "elif", "args", ".", "model", "==", "'resnet20_layer'", ":", "\n", "            ", "from", "models", ".", "resnet_control", "import", "resnet20", "\n", "net", "=", "resnet20", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "\n", "all_binary", "=", "False", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "net", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "return", "net", "\n", "", "elif", "args", ".", "model", "==", "'resnet20_binary'", ":", "\n", "            ", "from", "models", ".", "resnet_control", "import", "resnet20", "\n", "net", "=", "resnet20", "(", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "\n", "all_binary", "=", "True", ",", "layers_json", "=", "args", ".", "layers_indices", ")", "\n", "net", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "return", "net", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\n", "'Unknown model requested: {}'", ".", "format", "(", "args", ".", "model", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\n", "'Unknown dataset requested: {}'", ".", "format", "(", "args", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.add_optimizer_scheduler": [[185, 193], ["args.model.startswith", "torch.SGD", "torch.lr_scheduler.MultiStepLR", "net.parameters", "eval"], "function", ["None"], ["", "", "def", "add_optimizer_scheduler", "(", "args", ",", "net", ")", ":", "\n", "    ", "if", "args", ".", "model", ".", "startswith", "(", "'resnet20'", ")", ":", "\n", "        ", "net", ".", "optimizer", "=", "optim", ".", "SGD", "(", "\n", "net", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "1e-4", ")", "\n", "net", ".", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "net", ".", "optimizer", ",", "milestones", "=", "eval", "(", "\n", "args", ".", "scheduler_milestones", ")", ",", "gamma", "=", "args", ".", "scheduler_gamma", ")", "\n", "\n", "", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.load_dataset": [[195, 210], ["util.dataset.load_mnist_with_validation", "util.dataset.load_cifar10_with_preselected_validation_fix_validation_transform", "NotImplementedError"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_mnist_with_validation", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_cifar10_with_preselected_validation_fix_validation_transform"], ["", "def", "load_dataset", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "dataset", "==", "'mnist'", ":", "\n", "        ", "data_loaders", "=", "util", ".", "dataset", ".", "load_mnist_with_validation", "(", "\n", "args", ",", "data_folder", "=", "args", ".", "dataset_folder", ")", "\n", "", "elif", "args", ".", "dataset", "==", "'cifar10'", ":", "\n", "        ", "data_loaders", "=", "util", ".", "dataset", ".", "load_cifar10_with_preselected_validation_fix_validation_transform", "(", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "test_batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "use_data_augmentation", "=", "args", ".", "use_data_augmentation", ",", "\n", "index_file", "=", "args", ".", "dataset_indices", ",", "\n", "data_folder", "=", "args", ".", "dataset_folder", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "(", "'Unknown dataset requested'", ")", "\n", "", "return", "data_loaders", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.save_args": [[212, 222], ["print", "writer.add_text", "print", "vars", "vars.items", "str", "print", "writer.add_text", "str"], "function", ["None"], ["", "def", "save_args", "(", "args", ",", "writer", ")", ":", "\n", "    ", "print", "(", "\"argv: {}\"", ".", "format", "(", "sys", ".", "argv", ")", ")", "\n", "writer", ".", "add_text", "(", "'argv'", ",", "str", "(", "sys", ".", "argv", ")", ",", "0", ")", "\n", "\n", "print", "(", "\"args:\"", ")", "\n", "options", "=", "vars", "(", "args", ")", "\n", "for", "k", ",", "v", "in", "options", ".", "items", "(", ")", ":", "\n", "#print(\"  {} {} {} {}\".format(k, v, type(k), type(v)))", "\n", "        ", "print", "(", "\"  {} {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "writer", ".", "add_text", "(", "\"args/\"", "+", "k", ",", "str", "(", "v", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.set_all_seed": [[224, 233], ["print", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "print"], "function", ["None"], ["", "", "def", "set_all_seed", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"Setting all seeds to {}\"", ".", "format", "(", "seed", ")", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "torch", ".", "backends", ".", "cudnn", ".", "enabled", ":", "\n", "        ", "print", "(", "\"CuDNN enabled\"", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.show_weights": [[235, 249], ["enumerate", "print", "net.modules", "isinstance", "print", "m.weight.nelement", "m.weight.nelement"], "function", ["None"], ["", "", "def", "show_weights", "(", "net", ")", ":", "\n", "  ", "total", "=", "0", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "net", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "    ", "\"\"\"\n    if hasattr(m, 'weight'):\n      if not isinstance(m, (nn.BatchNorm2d, nn.BatchNorm1d)):\n        print(idx, '->', m, 'n_weight', m.weight.nelement())\n        total += m.weight.nelement()\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Linear", ",", "nn", ".", "Conv2d", ")", ")", ":", "\n", "      ", "print", "(", "idx", ",", "'->'", ",", "m", ",", "'n_weight'", ",", "m", ".", "weight", ".", "nelement", "(", ")", ")", "\n", "total", "+=", "m", ".", "weight", ".", "nelement", "(", ")", "\n", "", "", "print", "(", "\"Total number of weights: {}\"", ".", "format", "(", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.main": [[251, 283], ["time.time", "parser.parse_args", "main.set_all_seed", "torch.utils.tensorboard.SummaryWriter", "main.save_args", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.utils.tensorboard.SummaryWriter.add_text", "main.load_model", "main.add_optimizer_scheduler", "print", "main.show_weights", "main.load_dataset", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.utils.tensorboard.SummaryWriter.close", "print", "os.path.exists", "os.makedirs", "str", "train.train", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "str", "time.time"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.set_all_seed", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_args", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.load_model", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.add_optimizer_scheduler", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.show_weights", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main.load_dataset", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "main_start", "=", "time", ".", "time", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "logdir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "logdir", ")", "\n", "\n", "", "set_all_seed", "(", "args", ".", "seed", ")", "\n", "\n", "writer", "=", "SummaryWriter", "(", "args", ".", "logdir", "+", "'/tb'", ")", "\n", "save_args", "(", "args", ",", "writer", ")", "\n", "\n", "device", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "# Assume that we are on a CUDA machine, then this should print a CUDA device:", "\n", "print", "(", "'Hardware: {}'", ".", "format", "(", "device", ")", ")", "# cuda:X", "\n", "writer", ".", "add_text", "(", "'hardware'", ",", "str", "(", "device", ")", ",", "0", ")", "\n", "\n", "model", "=", "load_model", "(", "args", ")", "\n", "model", "=", "add_optimizer_scheduler", "(", "args", ",", "model", ")", "\n", "print", "(", "model", ")", "\n", "show_weights", "(", "model", ")", "\n", "\n", "data_loaders", "=", "load_dataset", "(", "args", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "train", "(", "args", ",", "model", ",", "data_loaders", ",", "device", ",", "writer", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Please run with a GPU\"", ")", "\n", "\n", "", "print", "(", "\"Closing writer...\"", ")", "\n", "writer", ".", "close", "(", ")", "# close to flush cache", "\n", "print", "(", "'Script duration: {:.4f} hours'", ".", "format", "(", "\n", "(", "time", ".", "time", "(", ")", "-", "main_start", ")", "/", "3600.0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.AverageMeter.__init__": [[636, 640], ["main_imagenet_binary.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.AverageMeter.reset": [[641, 646], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.AverageMeter.update": [[647, 652], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.AverageMeter.__str__": [[653, 656], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.ProgressMeter.__init__": [[659, 663], ["main_imagenet_binary.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.ProgressMeter.display": [[664, 668], ["print", "str", "main_imagenet_binary.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.ProgressMeter._get_batch_fmtstr": [[669, 673], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.save_args": [[121, 131], ["print", "writer.add_text", "print", "vars", "vars.items", "str", "print", "writer.add_text", "str"], "function", ["None"], ["def", "save_args", "(", "args", ",", "writer", ")", ":", "\n", "    ", "print", "(", "\"argv: {}\"", ".", "format", "(", "sys", ".", "argv", ")", ")", "\n", "writer", ".", "add_text", "(", "'argv'", ",", "str", "(", "sys", ".", "argv", ")", ",", "0", ")", "\n", "\n", "print", "(", "\"args:\"", ")", "\n", "options", "=", "vars", "(", "args", ")", "\n", "for", "k", ",", "v", "in", "options", ".", "items", "(", ")", ":", "\n", "#print(\"  {} {} {} {}\".format(k, v, type(k), type(v)))", "\n", "        ", "print", "(", "\"  {} {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "writer", ".", "add_text", "(", "\"args/\"", "+", "k", ",", "str", "(", "v", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.experiment_name_from": [[132, 144], ["os.path.basename"], "function", ["None"], ["", "", "def", "experiment_name_from", "(", "args", ")", "->", "str", ":", "\n", "    ", "name", "=", "f'lr{args.lr}-ep{args.epochs}'", "\n", "if", "args", ".", "binarize", ":", "\n", "        ", "if", "args", ".", "all_binary", ":", "\n", "            ", "name", "+=", "f'-all_binary'", "\n", "", "else", ":", "\n", "            ", "name", "+=", "f'-epl{args.epochs_per_layer}-{os.path.basename(args.layers_json)}'", "\n", "", "if", "args", ".", "reverse_layer_binarization", ":", "\n", "            ", "name", "+=", "'-reversed_layer'", "\n", "", "", "if", "args", ".", "dry_run", ":", "\n", "        ", "name", "+=", "'-dryrun'", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.experiment_id": [[145, 147], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "experiment_id", "(", ")", "->", "str", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H%M%S_%f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.inspect_model": [[149, 176], ["print", "print", "print", "print", "enumerate", "print", "print", "enumerate", "print", "hasattr", "hasattr", "model.modules", "hasattr", "model.modules", "hasattr", "found.append", "found.append"], "function", ["None"], ["", "def", "inspect_model", "(", "model", ")", "->", "None", ":", "\n", "    ", "print", "(", "\"=============================================\"", ")", "\n", "\"\"\"\n    if hasattr(model, 'binarize_layer'):\n        print(\"model has binarize_layer()\")\n    else:\n        print(\"model has no binarize_layer()\")\n    \"\"\"", "\n", "status", "=", "''", "if", "hasattr", "(", "model", ",", "'binarize_layer'", ")", "else", "'no'", "\n", "print", "(", "f'model has {status} binarize_layer'", ")", "\n", "\n", "status", "=", "''", "if", "hasattr", "(", "model", ",", "'_make_layer'", ")", "else", "'no'", "\n", "print", "(", "f'model has {status} _make_layer'", ")", "\n", "\n", "print", "(", "\"Has binarize_?\"", ")", "\n", "found", "=", "[", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'binarize_'", ")", ":", "\n", "            ", "found", ".", "append", "(", "idx", ")", "\n", "", "", "print", "(", "found", ")", "\n", "\n", "print", "(", "\"Has binarize_weight_()?\"", ")", "\n", "found", "=", "[", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "if", "hasattr", "(", "layer", ",", "'binarize_weight_'", ")", ":", "\n", "            ", "found", ".", "append", "(", "idx", ")", "\n", "", "", "print", "(", "found", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.show_layers": [[178, 182], ["print", "enumerate", "model.modules", "print"], "function", ["None"], ["", "def", "show_layers", "(", "model", ":", "nn", ".", "Module", ")", "->", "None", ":", "\n", "    ", "print", "(", "'---------------------------------------------'", ")", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "        ", "print", "(", "idx", ",", "layer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.show_binarized": [[184, 194], ["print", "print", "print"], "function", ["None"], ["", "", "def", "show_binarized", "(", "epoch", ":", "int", ",", "layers", ":", "list", ",", "nets", ":", "list", ")", "->", "None", ":", "\n", "    ", "\"\"\"Can deprecate\"\"\"", "\n", "status", "=", "\"\"", "\n", "layers_label", "=", "\"\"", "\n", "for", "n", "in", "layers", ":", "\n", "        ", "layers_label", "+=", "\"{:3}\"", ".", "format", "(", "n", ")", "\n", "status", "+=", "\"{:3}\"", ".", "format", "(", "nets", "[", "n", "]", ".", "binarize_", ")", "\n", "", "print", "(", "f'Epoch  {epoch}'", ")", "\n", "print", "(", "f'Layer  {layers_label}'", ")", "\n", "print", "(", "f'Binary {status}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.show_binarization": [[196, 209], ["list", "enumerate", "model.modules", "isinstance", "len", "print", "print", "print"], "function", ["None"], ["", "def", "show_binarization", "(", "model", ":", "nn", ".", "Module", ")", "->", "None", ":", "\n", "    ", "nets", "=", "list", "(", "model", ".", "modules", "(", ")", ")", "\n", "status", "=", "\"\"", "\n", "layers_label", "=", "\"\"", "\n", "for", "n", ",", "module", "in", "enumerate", "(", "nets", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "(", "BinaryLinear", ",", "BinaryConv2d", ")", ")", ":", "\n", "            ", "layers_label", "+=", "\"{:3}\"", ".", "format", "(", "n", ")", "\n", "status", "+=", "\"{:3}\"", ".", "format", "(", "module", ".", "binarize_", ")", "\n", "", "", "if", "len", "(", "status", ")", ">", "0", ":", "\n", "        ", "print", "(", "f'Layer  {layers_label}'", ")", "\n", "print", "(", "f'Binary {status}'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'No binarization'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.binarize_layer": [[211, 239], ["list", "model.modules", "len", "isinstance"], "function", ["None"], ["", "", "def", "binarize_layer", "(", "\n", "epoch", ":", "int", ",", "\n", "layers", ":", "list", ",", "\n", "model", ":", "nn", ".", "Module", ",", "\n", "epochs_per_layer", ":", "int", ",", "\n", "reverse", ":", "bool", ",", "\n", ")", "->", "None", ":", "\n", "    ", "\"\"\"Set layer binarization on a forward-first schedule.\n    Call before training an epoch.\n\n    Parameters\n    ----------\n    epoch : int\n        Must start from 0.\n    \"\"\"", "\n", "nets", "=", "list", "(", "model", ".", "modules", "(", ")", ")", "\n", "ending", "=", "epoch", "//", "epochs_per_layer", "\n", "n", "=", "0", "\n", "while", "True", ":", "# do ... while()", "\n", "        ", "if", "n", "<", "len", "(", "layers", ")", ":", "\n", "            ", "if", "reverse", ":", "\n", "                ", "m", "=", "nets", "[", "layers", "[", "-", "1", "-", "n", "]", "]", "\n", "", "else", ":", "\n", "                ", "m", "=", "nets", "[", "layers", "[", "n", "]", "]", "\n", "", "if", "isinstance", "(", "m", ",", "(", "BinaryLinear", ",", "BinaryConv2d", ")", ")", ":", "\n", "                ", "m", ".", "binarize_", "=", "True", "\n", "", "", "n", "=", "n", "+", "1", "\n", "if", "n", ">", "ending", ":", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.load_layers": [[241, 245], ["print", "open", "json.load"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load"], ["", "", "def", "load_layers", "(", "json_file", ":", "str", ")", ":", "\n", "    ", "print", "(", "f\"Loading layers from {json_file}...\"", ")", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "return", "json", ".", "load", "(", "fp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.main": [[248, 287], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "ValueError", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "ValueError", "torch.spawn", "main_imagenet_binary.main_worker"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.main_worker"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "raise", "ValueError", "(", "\"--multiprocessing-distributed not supported\"", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "raise", "ValueError", "(", "\"Distributed training not supported\"", ")", "\n", "\n", "\n", "", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.main_worker": [[289, 510], ["print", "print", "main_imagenet_binary.load_layers", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "json.loads", "range", "print", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "main_imagenet_binary.save_args", "print", "torch.init_process_group", "print", "models.resnet_imagenet_binary.resnet18", "main_imagenet_binary.show_layers", "print", "models.resnet_imagenet.resnet18", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main_imagenet_binary.validate", "main_imagenet_binary.adjust_learning_rate", "mlmt.time_stamp.TimeStamp", "main_imagenet_binary.train", "mlmt.time_stamp.TimeStamp", "main_imagenet_binary.validate", "max", "torch.utils.tensorboard.SummaryWriter.close", "os.path.exists", "os.makedirs", "int", "torch.CrossEntropyLoss", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "print", "torch.nn.DataParallel().cuda.apply", "main_imagenet_binary.binarize_layer", "main_imagenet_binary.show_binarization", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "main_imagenet_binary.experiment_id", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "main_imagenet_binary.inspect_model", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "main_imagenet_binary.save_checkpoint", "main_imagenet_binary.experiment_name_from", "args.arch.startswith", "args.arch.startswith", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "mlmt.time_stamp.TimeStamp.elapsed", "mlmt.time_stamp.TimeStamp.elapsed", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.load_layers", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_args", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet18", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.show_layers", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet18", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.validate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.adjust_learning_rate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.validate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.show_binarization", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_id", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.inspect_model", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_checkpoint", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_name_from"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "print", "(", "f'gpu {gpu}'", ")", "\n", "print", "(", "f'ngpus_per_node {ngpus_per_node}'", ")", "\n", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "        ", "print", "(", "\"Creating SummaryWriter ...\"", ")", "\n", "experiment_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "experiment_name_from", "(", "args", ")", "+", "'_'", "+", "experiment_id", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiment_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "experiment_dir", ")", "\n", "", "tb_writer", "=", "SummaryWriter", "(", "experiment_dir", ")", "\n", "save_args", "(", "args", ",", "tb_writer", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "\"\"\"\n    if args.pretrained:\n        print(\"=> using pre-trained model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch](pretrained=True)\n    else:\n        print(\"=> creating model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch]()\n    \"\"\"", "\n", "if", "args", ".", "binarize", ":", "\n", "        ", "print", "(", "\"=> creating model binarized resnet18\"", ")", "\n", "model", "=", "resnet18_binary", "(", ")", "\n", "#inspect_model(model)", "\n", "show_layers", "(", "model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> creating model resnet18\"", ")", "\n", "model", "=", "resnet18", "(", ")", "\n", "\n", "# load layers_json", "\n", "", "layers", "=", "load_layers", "(", "args", ".", "layers_json", ")", "\n", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "print", "(", "'model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])'", ")", "\n", "inspect_model", "(", "model", ")", "\n", "#show_layers(model)", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'model = model.cuda(args.gpu)'", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "if", "args", ".", "arch", ".", "startswith", "(", "'alexnet'", ")", "or", "args", ".", "arch", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "            ", "model", ".", "features", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ".", "features", ")", "\n", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "raise", "ValueError", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "lr_milestones", "=", "json", ".", "loads", "(", "args", ".", "lr_milestones", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "learning_rate", "=", "adjust_learning_rate", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "epoch", "=", "epoch", ",", "\n", "base_lr", "=", "args", ".", "lr", ",", "\n", "lr_milestones", "=", "lr_milestones", ",", "\n", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "print", "(", "f'Epoch {epoch} LR {learning_rate}'", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/learning_rate'", ",", "learning_rate", ",", "epoch", ")", "\n", "\n", "# train for one epoch", "\n", "", "ts", "=", "TimeStamp", "(", ")", "\n", "if", "args", ".", "all_binary", ":", "\n", "            ", "print", "(", "\"Binarize all\"", ")", "\n", "model", ".", "apply", "(", "binarize_all", ")", "\n", "", "else", ":", "\n", "            ", "binarize_layer", "(", "\n", "epoch", "=", "epoch", ",", "\n", "layers", "=", "layers", ",", "\n", "model", "=", "model", ",", "\n", "epochs_per_layer", "=", "args", ".", "epochs_per_layer", ",", "\n", "reverse", "=", "args", ".", "reverse_layer_binarization", ",", "\n", ")", "\n", "show_binarization", "(", "model", ")", "\n", "", "train_acc1", ",", "train_acc5", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "'train/duration'", ",", "ts", ".", "elapsed", "(", ")", "/", "60.0", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc1'", ",", "train_acc1", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc5'", ",", "train_acc5", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set", "\n", "", "ts", "=", "TimeStamp", "(", ")", "\n", "acc1", ",", "acc5", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "'val/duration'", ",", "ts", ".", "elapsed", "(", ")", "/", "60.0", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'val/acc1'", ",", "acc1", ",", "epoch", ")", "\n", "#tb_writer.add_scalar('val/best_acc1', best_acc1, epoch)", "\n", "tb_writer", ".", "add_scalar", "(", "'val/acc5'", ",", "acc5", ",", "epoch", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "args", ".", "save_checkpoint", ":", "\n", "                ", "save_checkpoint", "(", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_best", "=", "is_best", ",", "\n", "experiment_dir", "=", "experiment_dir", ",", "\n", "epoch", "=", "epoch", ",", "\n", "interval", "=", "args", ".", "checkpoint_interval", ",", "\n", ")", "\n", "\n", "\n", "# Flush tensorboard data", "\n", "", "", "", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "        ", "tb_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.train": [[513, 563], ["main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main_imagenet_binary.AverageMeter.update", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "main_imagenet_binary.accuracy", "main_imagenet_binary.AverageMeter.update", "main_imagenet_binary.AverageMeter.update", "main_imagenet_binary.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "model.apply", "optimizer.step", "main_imagenet_binary.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_imagenet_binary.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.accuracy", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.display"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "model", ".", "apply", "(", "restore_fp_weight", ")", "\n", "optimizer", ".", "step", "(", ")", "# parameter update", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "            ", "if", "i", ">", "1", ":", "break", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.validate": [[565, 613], ["main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.AverageMeter", "main_imagenet_binary.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "model.apply", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "main_imagenet_binary.accuracy", "main_imagenet_binary.AverageMeter.update", "main_imagenet_binary.AverageMeter.update", "main_imagenet_binary.AverageMeter.update", "main_imagenet_binary.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_imagenet_binary.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.accuracy", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "                ", "if", "i", ">", "1", ":", "break", "\n", "\n", "# Outside val_loader to avoid duplicate weight binarization.", "\n", "", "", "model", ".", "apply", "(", "restore_fp_weight", ")", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.save_checkpoint": [[615, 632], ["os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "print", "shutil.copyfile", "os.path.join", "print", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save"], ["", "def", "save_checkpoint", "(", "*", ",", "state", ",", "is_best", ",", "experiment_dir", ",", "epoch", ",", "interval", ")", ":", "\n", "    ", "\"\"\"Save checkpoints\n    Save the running checkpoint.\n    Save checkpoints at given interval.\n    Save the running best checkpoint.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "print", "(", "f'Saving current: {filename}'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "'model_best.pth.tar'", ")", "\n", "print", "(", "f'Saving best: {best}'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best", ")", "\n", "", "if", "(", "interval", ">", "0", ")", "and", "(", "(", "epoch", "+", "1", ")", "%", "interval", "==", "0", ")", ":", "\n", "        ", "current", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "f'checkpoint{epoch}.pth.tar'", ")", "\n", "print", "(", "f'Saving interval: {current}'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "current", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.adjust_learning_rate": [[675, 682], ["bisect.bisect"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "base_lr", ",", "lr_milestones", ",", "gamma", "=", "0.1", ")", "->", "float", ":", "\n", "    ", "\"\"\"Sets the learning rate to decay by gamma (multiplicatively) when reaching each milestone\"\"\"", "\n", "factor", "=", "gamma", "**", "bisect", "(", "lr_milestones", ",", "epoch", ")", "\n", "lr", "=", "base_lr", "*", "factor", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_binary.accuracy": [[684, 699], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.cifar_dataset_split.check": [[21, 27], ["parser.parse_args", "util.dataset.generate_train_val_indices", "util.dataset.load_train_val_indices", "print", "print"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.generate_train_val_indices", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_train_val_indices"], ["def", "check", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "train", ",", "val", "=", "generate_train_val_indices", "(", "50000", ",", "args", ".", "size", ",", "args", ".", "output_file", ")", "\n", "file_train", ",", "file_val", "=", "load_train_val_indices", "(", "args", ".", "output_file", ")", "\n", "print", "(", "\"Train indices matches {}\"", ".", "format", "(", "train", "==", "file_train", ")", ")", "\n", "print", "(", "\"Val indices matches {}\"", ".", "format", "(", "val", "==", "file_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.cifar_dataset_split.main": [[29, 32], ["parser.parse_args", "util.dataset.generate_train_val_indices"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.generate_train_val_indices"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "generate_train_val_indices", "(", "50000", ",", "args", ".", "size", ",", "args", ".", "output_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.Patience.__init__": [[19, 22], ["int"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", "=", "10", ")", ":", "\n", "        ", "self", ".", "_tolerance", "=", "self", ".", "_capacity", "=", "int", "(", "capacity", ")", "\n", "self", ".", "_calmness", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.Patience.__call__": [[23, 28], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_tolerance", ">", "0", ":", "\n", "            ", "return", "True", "\n", "", "else", ":", "\n", "            ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.Patience.test": [[29, 36], ["None"], "methods", ["None"], ["", "", "def", "test", "(", "self", ",", "calmness", ")", ":", "\n", "        ", "if", "calmness", ">", "self", ".", "_calmness", ":", "\n", "            ", "self", ".", "_calmness", "=", "calmness", "\n", "self", ".", "_tolerance", "=", "self", ".", "_capacity", "\n", "", "else", ":", "\n", "            ", "self", ".", "_tolerance", "-=", "1", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.train": [[37, 108], ["torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "hasattr", "hasattr", "print", "hasattr", "model.to", "train.Patience", "print", "print", "getattr", "print", "torch.CrossEntropyLoss", "torch.Adam", "print", "print", "util.io.load", "util.io.load", "print", "train.test_epoch", "float", "Patience.", "hasattr", "train.train_epoch", "hasattr", "print", "print", "util.io.save", "util.io.save", "model.parameters", "float", "model.scheduler.step", "hasattr", "hasattr", "train.test_epoch", "train.test_epoch", "train.test_epoch", "writer.add_scalar", "train.Patience.test", "model.binarize_layer_reverse", "NotImplementedError", "model.binarize_layer", "model.scheduler.get_last_lr"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.test_epoch", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.train_epoch", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.test_epoch", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.test_epoch", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.test_epoch", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.test", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_layer_reverse", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_layer"], ["", "", "def", "train", "(", "args", ",", "model", ",", "data_loaders", ",", "device", ",", "writer", ")", ":", "\n", "    ", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "\n", "train_loader", ",", "validation_loader", ",", "test_loader", "=", "data_loaders", "\n", "\n", "if", "hasattr", "(", "model", ",", "'criterion'", ")", ":", "\n", "        ", "criterion", "=", "getattr", "(", "model", ",", "'criterion'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"No criterion in model. Assuming nn.CrossEntropyLoss().\"", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'optimizer'", ")", ":", "\n", "        ", "optimizer", "=", "model", ".", "optimizer", "\n", "", "else", ":", "\n", "#optimizer = optim.SGD(model.parameters(), lr=args.lr, momentum=args.momentum)", "\n", "        ", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ")", "\n", "", "print", "(", "optimizer", ")", "\n", "if", "hasattr", "(", "model", ",", "'scheduler'", ")", ":", "\n", "        ", "print", "(", "model", ".", "scheduler", ")", "\n", "\n", "", "model", ".", "to", "(", "device", ")", "\n", "if", "args", ".", "load_last", ":", "\n", "        ", "print", "(", "\"Loading saved model: {}\"", ".", "format", "(", "args", ".", "load_last_file", ")", ")", "\n", "util", ".", "io", ".", "load", "(", "args", ".", "load_last_file", ",", "model", ",", "optimizer", ")", "\n", "state", "=", "0", ",", "0.0", ",", "0", ",", "float", "(", "\"Inf\"", ")", "# best_epoch, best_accuracy, best_loss_epoch, best_loss", "\n", "print", "(", "\"Testing loaded model...\"", ")", "\n", "accuracy", ",", "state", "=", "test_epoch", "(", "0", ",", "args", ",", "model", ",", "test_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ",", "'test/'", ",", "state", ")", "\n", "\n", "", "state", "=", "0", ",", "0.0", ",", "0", ",", "float", "(", "\"Inf\"", ")", "# best_epoch, best_accuracy, best_loss_epoch, best_loss", "\n", "train_state", "=", "state", "\n", "patient", "=", "Patience", "(", "args", ".", "patience", ")", "\n", "epoch", "=", "1", "\n", "while", "patient", "(", ")", "or", "args", ".", "patience", "==", "0", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'scheduler'", ")", ":", "\n", "            ", "model", ".", "scheduler", ".", "step", "(", ")", "\n", "", "if", "args", ".", "reverse_layer_binarization", ":", "\n", "            ", "if", "hasattr", "(", "model", ",", "'binarize_layer_reverse'", ")", ":", "\n", "                ", "model", ".", "binarize_layer_reverse", "(", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\"reverse_layer_binarization requested, but binarize_layer_reverse() does not exist\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "hasattr", "(", "model", ",", "'binarize_layer'", ")", ":", "\n", "                ", "model", ".", "binarize_layer", "(", ")", "\n", "", "", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ")", "\n", "if", "args", ".", "test_validation", ":", "\n", "            ", "accuracy", ",", "state", "=", "test_epoch", "(", "epoch", ",", "args", ",", "model", ",", "validation_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ",", "'val/'", ",", "state", ")", "\n", "", "else", ":", "\n", "            ", "accuracy", ",", "state", "=", "test_epoch", "(", "epoch", ",", "args", ",", "model", ",", "test_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ",", "'test/'", ",", "state", ")", "\n", "\n", "", "if", "args", ".", "test_training", ":", "\n", "            ", "_", ",", "train_state", "=", "test_epoch", "(", "epoch", ",", "args", ",", "model", ",", "train_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ",", "'train/'", ",", "train_state", ")", "\n", "\n", "", "if", "hasattr", "(", "model", ",", "'scheduler'", ")", ":", "\n", "            ", "writer", ".", "add_scalar", "(", "'train/learning_rate'", ",", "model", ".", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "epoch", ")", "\n", "\n", "", "if", "args", ".", "patience", "==", "0", ":", "\n", "            ", "if", "epoch", ">=", "args", ".", "epochs", ":", "break", "\n", "", "else", ":", "\n", "            ", "patient", ".", "test", "(", "accuracy", ")", "\n", "", "epoch", "+=", "1", "\n", "\n", "\n", "", "best_epoch", ",", "best_accuracy", ",", "best_loss_epoch", ",", "best_loss", "=", "state", "\n", "print", "(", "'Best accuracy {:.4f}% at epoch {}'", ".", "format", "(", "100", "*", "best_accuracy", ",", "best_epoch", ")", ")", "\n", "print", "(", "'Best loss {:.4g} at epoch {}'", ".", "format", "(", "best_loss", ",", "best_loss_epoch", ")", ")", "\n", "if", "args", ".", "test_training", ":", "\n", "        ", "best_epoch", ",", "best_accuracy", ",", "best_loss_epoch", ",", "best_loss", "=", "train_state", "\n", "print", "(", "'Best training accuracy {:.4f}% at epoch {}'", ".", "format", "(", "100", "*", "best_accuracy", ",", "best_epoch", ")", ")", "\n", "print", "(", "'Best training loss {:.4g} at epoch {}'", ".", "format", "(", "best_loss", ",", "best_loss_epoch", ")", ")", "\n", "", "if", "args", ".", "save_last", ":", "\n", "        ", "util", ".", "io", ".", "save", "(", "epoch", ",", "model", ",", "optimizer", ",", "best_loss", ",", "args", ".", "logdir", ",", "pattern", "=", "'last-{}.tar'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.train_epoch": [[110, 141], ["print", "print", "model.train", "os.getpid", "time.time", "enumerate", "print", "train.record_weight_histogram", "time.time", "optimizer.zero_grad", "model", "criterion", "criterion.backward", "hasattr", "optimizer.step", "hasattr", "data.to", "target.to", "model.restore_full_precision", "model.clip_weights", "print", "time.time", "len", "criterion.item", "len", "len"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.record_weight_histogram", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.restore_full_precision", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.clip_weights"], ["", "", "def", "train_epoch", "(", "epoch", ",", "args", ",", "model", ",", "data_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ")", ":", "\n", "    ", "print", "(", "\"Logdir {}\"", ".", "format", "(", "args", ".", "logdir", ")", ")", "\n", "print", "(", "\"Model {} {}\"", ".", "format", "(", "args", ".", "model", ",", "model", ".", "__class__", ".", "__name__", ")", ")", "\n", "model", ".", "train", "(", ")", "\n", "pid", "=", "os", ".", "getpid", "(", ")", "\n", "start_epoch", "=", "time", ".", "time", "(", ")", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "data_loader", ",", "0", ")", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "#weight_stats(\"{} {:>3} optimizer.zero_grad()\".format(epoch, batch_idx), model)", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "#weight_stats(\"{} {:>3} loss.backward()      \".format(epoch, batch_idx), model)", "\n", "if", "hasattr", "(", "model", ",", "'restore_full_precision'", ")", ":", "\n", "#print(\"=== before\")", "\n", "#model.report_weight_stats()", "\n", "            ", "model", ".", "restore_full_precision", "(", ")", "\n", "#print(\"=== after\")", "\n", "#model.report_weight_stats()", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "if", "hasattr", "(", "model", ",", "'clip_weights'", ")", ":", "\n", "            ", "model", ".", "clip_weights", "(", ")", "\n", "#weight_stats(\"{} {:>3} optimizer.step()     \".format(epoch, batch_idx), model)", "\n", "", "if", "batch_idx", "%", "args", ".", "log_interval", "==", "0", ":", "\n", "            ", "print", "(", "'{}  Train Epoch: {} [{:>5}/{:>5} {:.0f}%]  Loss: {:.6g}'", ".", "format", "(", "\n", "pid", ",", "epoch", ",", "batch_idx", "*", "len", "(", "data", ")", ",", "len", "(", "data_loader", ".", "dataset", ")", ",", "\n", "100.", "*", "batch_idx", "/", "len", "(", "data_loader", ")", ",", "loss", ".", "item", "(", ")", ")", ")", "\n", "", "", "print", "(", "'Epoch duration: {:.4f} seconds'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start_epoch", ")", ")", "\n", "record_weight_histogram", "(", "args", ",", "epoch", ",", "model", ",", "writer", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.record_weight_histogram": [[143, 153], ["time.time", "model.named_parameters", "print", "param.clone().cpu().data.numpy", "writer.add_histogram", "numpy.frexp", "writer.add_histogram", "writer.add_histogram", "time.time", "param.clone().cpu", "param.clone"], "function", ["None"], ["", "def", "record_weight_histogram", "(", "args", ",", "epoch", ",", "model", ",", "writer", ")", ":", "\n", "    ", "if", "args", ".", "record_histogram", ":", "\n", "        ", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "x", "=", "param", ".", "clone", "(", ")", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", "\n", "writer", ".", "add_histogram", "(", "name", "+", "\"/train\"", ",", "x", ",", "epoch", ")", "\n", "mantissa", ",", "exponent", "=", "np", ".", "frexp", "(", "x", ")", "\n", "writer", ".", "add_histogram", "(", "name", "+", "'.mantissa/train'", ",", "mantissa", ",", "epoch", ")", "\n", "writer", ".", "add_histogram", "(", "name", "+", "'.exponent/train'", ",", "exponent", ",", "epoch", ")", "\n", "", "print", "(", "'Weight histogram written in {:.4f} seconds'", ".", "format", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.test_epoch": [[155, 212], ["model.eval", "time.time", "len", "print", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "train.save_progress", "train.save_progress", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "hasattr", "hasattr", "hasattr", "len", "writer_prefix.replace", "writer_prefix.replace", "print", "model.restore_binary_weight", "print", "model.report_weight_stats", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "writer.add_scalar", "model", "criterion().item", "pred.eq().sum().item", "print", "model.restore_full_precision", "len", "data.to", "target.to", "model.max", "time.time", "criterion", "pred.eq().sum", "pred.eq"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.save_progress", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.save_progress", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.restore_binary_weight", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.report_weight_stats", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.restore_full_precision"], ["", "", "def", "test_epoch", "(", "epoch", ",", "args", ",", "model", ",", "data_loader", ",", "criterion", ",", "optimizer", ",", "device", ",", "writer", ",", "writer_prefix", ",", "state", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "#criterion = getattr(model, 'criterion')", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "if", "hasattr", "(", "model", ",", "'restore_binary_weight'", ")", ":", "\n", "            ", "print", "(", "\"test_epoch::restore_binary_weight\"", ")", "\n", "model", ".", "restore_binary_weight", "(", ")", "\n", "", "if", "hasattr", "(", "model", ",", "'report_weight_stats'", ")", ":", "\n", "            ", "print", "(", "\"test_epoch::report_weight_stats\"", ")", "\n", "maximum", ",", "minimum", ",", "num_zeros", ",", "num_binary", "=", "model", ".", "report_weight_stats", "(", ")", "\n", "writer", ".", "add_scalar", "(", "'{}weight/max'", ".", "format", "(", "writer_prefix", ")", ",", "maximum", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}weight/min'", ".", "format", "(", "writer_prefix", ")", ",", "minimum", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}weight/num_zeros'", ".", "format", "(", "writer_prefix", ")", ",", "num_zeros", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}weight/num_binary'", ".", "format", "(", "writer_prefix", ")", ",", "num_binary", ",", "epoch", ")", "\n", "", "for", "data", ",", "target", "in", "data_loader", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "#loss += F.nll_loss(output, target).item() # sum up batch loss", "\n", "loss", "+=", "criterion", "(", "output", ",", "target", ")", ".", "item", "(", ")", "# sum up batch loss", "\n", "pred", "=", "output", ".", "max", "(", "1", ")", "[", "1", "]", "# get the index of the max log-probability", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "if", "hasattr", "(", "model", ",", "'restore_full_precision'", ")", ":", "\n", "            ", "print", "(", "\"test_epoch::restore_full_precision\"", ")", "\n", "model", ".", "restore_full_precision", "(", ")", "\n", "\n", "", "", "loss", "/=", "len", "(", "data_loader", ".", "dataset", ")", "\n", "accuracy", "=", "correct", "/", "len", "(", "data_loader", ".", "dataset", ")", "\n", "print", "(", "'Prefix {}, Average loss: {:.6g}, Accuracy: {}/{} ({:.4f}%), Duration: {:.4f} seconds'", ".", "format", "(", "\n", "writer_prefix", ",", "\n", "loss", ",", "\n", "correct", ",", "len", "(", "data_loader", ".", "dataset", ")", ",", "100.", "*", "accuracy", ",", "\n", "time", ".", "time", "(", ")", "-", "start", ")", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'{}accuracy'", ".", "format", "(", "writer_prefix", ")", ",", "accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}error'", ".", "format", "(", "writer_prefix", ")", ",", "1.0", "-", "accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}loss'", ".", "format", "(", "writer_prefix", ")", ",", "loss", ",", "epoch", ")", "\n", "\n", "best_epoch", ",", "best_accuracy", ",", "best_loss_epoch", ",", "best_loss", "=", "state", "\n", "check", "=", "epoch", ",", "accuracy", "\n", "best", "=", "best_epoch", ",", "best_accuracy", "\n", "prefix", "=", "\"accuracy_\"", "+", "writer_prefix", ".", "replace", "(", "\"/\"", ",", "\"\"", ")", "\n", "best_epoch", ",", "best_accuracy", "=", "save_progress", "(", "prefix", ",", "args", ",", "model", ",", "optimizer", ",", "check", ",", "best", ")", "\n", "check", "=", "epoch", ",", "loss", "\n", "best", "=", "best_loss_epoch", ",", "best_loss", "\n", "prefix", "=", "\"loss_\"", "+", "writer_prefix", ".", "replace", "(", "\"/\"", ",", "\"\"", ")", "\n", "best_loss_epoch", ",", "best_loss", "=", "save_progress", "(", "prefix", ",", "args", ",", "model", ",", "optimizer", ",", "check", ",", "best", ",", "higher_better", "=", "False", ")", "\n", "\n", "writer", ".", "add_scalar", "(", "'{}best_accuracy'", ".", "format", "(", "writer_prefix", ")", ",", "best_accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}best_error'", ".", "format", "(", "writer_prefix", ")", ",", "1.0", "-", "best_accuracy", ",", "epoch", ")", "\n", "writer", ".", "add_scalar", "(", "'{}best_loss'", ".", "format", "(", "writer_prefix", ")", ",", "best_loss", ",", "epoch", ")", "\n", "#writer.add_scalar('{}learning_rate'.format(writer_prefix), scheduler.get_lr(), epoch)", "\n", "\n", "state", "=", "best_epoch", ",", "best_accuracy", ",", "best_loss_epoch", ",", "best_loss", "\n", "return", "accuracy", ",", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.save_progress": [[214, 228], ["print", "util.io.save", "util.io.save"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save"], ["", "def", "save_progress", "(", "name", ",", "args", ",", "model", ",", "optimizer", ",", "check", ",", "best", ",", "higher_better", "=", "True", ")", ":", "\n", "    ", "epoch", ",", "metric", "=", "check", "\n", "best_epoch", ",", "best_metric", "=", "best", "\n", "if", "higher_better", ":", "\n", "        ", "better", "=", "metric", ">", "best_metric", "\n", "", "else", ":", "\n", "        ", "better", "=", "metric", "<", "best_metric", "\n", "", "if", "better", ":", "\n", "        ", "print", "(", "\"Better {} {:.4f} at epoch {}\"", ".", "format", "(", "name", ",", "metric", ",", "epoch", ")", ")", "\n", "if", "args", ".", "save_progress", ":", "\n", "            ", "util", ".", "io", ".", "save", "(", "epoch", ",", "model", ",", "optimizer", ",", "metric", ",", "args", ".", "logdir", ",", "pattern", "=", "name", "+", "'-{}.tar'", ")", "\n", "", "return", "epoch", ",", "metric", "\n", "", "else", ":", "\n", "        ", "return", "best_epoch", ",", "best_metric", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.isnan": [[230, 233], ["torch.isnan", "torch.isnan", "torch.isnan", "torch.isnan", "print"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.isnan", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.isnan", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.isnan", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.isnan"], ["", "", "def", "isnan", "(", "tensor", ",", "message", ")", ":", "\n", "    ", "if", "torch", ".", "isnan", "(", "tensor", ")", ":", "\n", "        ", "print", "(", "message", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.train.weight_stats": [[235, 241], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.named_parameters", "torch.max", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.min", "print", "param.size"], "function", ["None"], ["", "", "def", "weight_stats", "(", "prefix", ",", "model", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "name", ",", "param", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "high", "=", "torch", ".", "max", "(", "param", ")", "\n", "low", "=", "torch", ".", "min", "(", "param", ")", "\n", "print", "(", "\"{} {:>.6g} {:>.6g} {} {}\"", ".", "format", "(", "prefix", ",", "high", ",", "low", ",", "name", ",", "param", ".", "size", "(", ")", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.__init__": [[492, 496], ["main_imagenet_float.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "name", ",", "fmt", "=", "':f'", ")", ":", "\n", "        ", "self", ".", "name", "=", "name", "\n", "self", ".", "fmt", "=", "fmt", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.reset": [[497, 502], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update": [[503, 508], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.__str__": [[509, 512], ["fmtstr.format"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "fmtstr", "=", "'{name} {val'", "+", "self", ".", "fmt", "+", "'} ({avg'", "+", "self", ".", "fmt", "+", "'})'", "\n", "return", "fmtstr", ".", "format", "(", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.__init__": [[515, 519], ["main_imagenet_float.ProgressMeter._get_batch_fmtstr"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter._get_batch_fmtstr"], ["    ", "def", "__init__", "(", "self", ",", "num_batches", ",", "meters", ",", "prefix", "=", "\"\"", ")", ":", "\n", "        ", "self", ".", "batch_fmtstr", "=", "self", ".", "_get_batch_fmtstr", "(", "num_batches", ")", "\n", "self", ".", "meters", "=", "meters", "\n", "self", ".", "prefix", "=", "prefix", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.display": [[520, 524], ["print", "str", "main_imagenet_float.ProgressMeter.batch_fmtstr.format"], "methods", ["None"], ["", "def", "display", "(", "self", ",", "batch", ")", ":", "\n", "        ", "entries", "=", "[", "self", ".", "prefix", "+", "self", ".", "batch_fmtstr", ".", "format", "(", "batch", ")", "]", "\n", "entries", "+=", "[", "str", "(", "meter", ")", "for", "meter", "in", "self", ".", "meters", "]", "\n", "print", "(", "'\\t'", ".", "join", "(", "entries", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter._get_batch_fmtstr": [[525, 529], ["len", "str", "str", "fmt.format"], "methods", ["None"], ["", "def", "_get_batch_fmtstr", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "num_digits", "=", "len", "(", "str", "(", "num_batches", "//", "1", ")", ")", "\n", "fmt", "=", "'{:'", "+", "str", "(", "num_digits", ")", "+", "'d}'", "\n", "return", "'['", "+", "fmt", "+", "'/'", "+", "fmt", ".", "format", "(", "num_batches", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_args": [[106, 116], ["print", "writer.add_text", "print", "vars", "vars.items", "str", "print", "writer.add_text", "str"], "function", ["None"], ["def", "save_args", "(", "args", ",", "writer", ")", ":", "\n", "    ", "print", "(", "\"argv: {}\"", ".", "format", "(", "sys", ".", "argv", ")", ")", "\n", "writer", ".", "add_text", "(", "'argv'", ",", "str", "(", "sys", ".", "argv", ")", ",", "0", ")", "\n", "\n", "print", "(", "\"args:\"", ")", "\n", "options", "=", "vars", "(", "args", ")", "\n", "for", "k", ",", "v", "in", "options", ".", "items", "(", ")", ":", "\n", "#print(\"  {} {} {} {}\".format(k, v, type(k), type(v)))", "\n", "        ", "print", "(", "\"  {} {}\"", ".", "format", "(", "k", ",", "v", ")", ")", "\n", "writer", ".", "add_text", "(", "\"args/\"", "+", "k", ",", "str", "(", "v", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_name_from": [[117, 122], ["None"], "function", ["None"], ["", "", "def", "experiment_name_from", "(", "args", ")", "->", "str", ":", "\n", "    ", "name", "=", "f'lr{args.lr}-ep{args.epochs}'", "\n", "if", "args", ".", "dry_run", ":", "\n", "        ", "name", "+=", "'-dryrun'", "\n", "", "return", "name", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_id": [[123, 125], ["datetime.datetime.now().strftime", "datetime.datetime.now"], "function", ["None"], ["", "def", "experiment_id", "(", ")", "->", "str", ":", "\n", "    ", "return", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%Y-%m-%d_%H%M%S_%f'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.main": [[130, 167], ["parser.parse_args", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "ValueError", "random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "warnings.warn", "warnings.warn", "int", "torch.spawn", "main_imagenet_float.main_worker"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.main_worker"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "        ", "raise", "ValueError", "(", "\"--multiprocessing-distributed not supported\"", ")", "\n", "\n", "", "if", "args", ".", "seed", "is", "not", "None", ":", "\n", "        ", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "args", ".", "seed", ")", "\n", "cudnn", ".", "deterministic", "=", "True", "\n", "warnings", ".", "warn", "(", "'You have chosen to seed training. '", "\n", "'This will turn on the CUDNN deterministic setting, '", "\n", "'which can slow down your training considerably! '", "\n", "'You may see unexpected behavior when restarting '", "\n", "'from checkpoints.'", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "warnings", ".", "warn", "(", "'You have chosen a specific GPU. This will completely '", "\n", "'disable data parallelism.'", ")", "\n", "\n", "", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "world_size", "==", "-", "1", ":", "\n", "        ", "args", ".", "world_size", "=", "int", "(", "os", ".", "environ", "[", "\"WORLD_SIZE\"", "]", ")", "\n", "\n", "", "args", ".", "distributed", "=", "args", ".", "world_size", ">", "1", "or", "args", ".", "multiprocessing_distributed", "\n", "\n", "\n", "ngpus_per_node", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# Since we have ngpus_per_node processes per node, the total world_size", "\n", "# needs to be adjusted accordingly", "\n", "        ", "args", ".", "world_size", "=", "ngpus_per_node", "*", "args", ".", "world_size", "\n", "# Use torch.multiprocessing.spawn to launch distributed processes: the", "\n", "# main_worker process function", "\n", "mp", ".", "spawn", "(", "main_worker", ",", "nprocs", "=", "ngpus_per_node", ",", "args", "=", "(", "ngpus_per_node", ",", "args", ")", ")", "\n", "", "else", ":", "\n", "# Simply call main_worker function", "\n", "        ", "main_worker", "(", "args", ".", "gpu", ",", "ngpus_per_node", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.main_worker": [[169, 370], ["print", "print", "print", "resnet18", "torch.CrossEntropyLoss().cuda", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "os.path.join", "os.path.join", "torchvision.Normalize", "torchvision.ImageFolder", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "json.loads", "range", "print", "os.path.join", "torch.utils.tensorboard.SummaryWriter", "main_imagenet_float.save_args", "print", "torch.init_process_group", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "torch.nn.DataParallel().cuda.parameters", "os.path.isfile", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torch.utils.data.distributed.DistributedSampler", "torchvision.ImageFolder", "main_imagenet_float.validate", "main_imagenet_float.adjust_learning_rate", "mlmt.time_stamp.TimeStamp", "main_imagenet_float.train", "mlmt.time_stamp.TimeStamp", "main_imagenet_float.validate", "max", "torch.utils.tensorboard.SummaryWriter.close", "os.path.exists", "os.makedirs", "int", "torch.CrossEntropyLoss", "print", "torch.nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "print", "print", "torchvision.Compose", "torch.utils.data.distributed.DistributedSampler.set_epoch", "print", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "torch.utils.tensorboard.SummaryWriter.add_scalar", "main_imagenet_float.experiment_id", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "int", "int", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "print", "torch.nn.DataParallel().cuda.cuda", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.nn.parallel.DistributedDataParallel", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.nn.DataParallel().cuda.cuda", "print", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "best_acc1.to.to", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "main_imagenet_float.save_checkpoint", "main_imagenet_float.experiment_name_from", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "mlmt.time_stamp.TimeStamp.elapsed", "mlmt.time_stamp.TimeStamp.elapsed", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet18", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_args", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.validate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.adjust_learning_rate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.validate", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_id", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_checkpoint", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.experiment_name_from"], ["", "", "def", "main_worker", "(", "gpu", ",", "ngpus_per_node", ",", "args", ")", ":", "\n", "    ", "print", "(", "f'gpu {gpu}'", ")", "\n", "print", "(", "f'ngpus_per_node {ngpus_per_node}'", ")", "\n", "global", "best_acc1", "\n", "args", ".", "gpu", "=", "gpu", "\n", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "        ", "print", "(", "\"Creating SummaryWriter ...\"", ")", "\n", "experiment_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "logdir", ",", "experiment_name_from", "(", "args", ")", "+", "'_'", "+", "experiment_id", "(", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "experiment_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "experiment_dir", ")", "\n", "", "tb_writer", "=", "SummaryWriter", "(", "experiment_dir", ")", "\n", "save_args", "(", "args", ",", "tb_writer", ")", "\n", "\n", "", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Use GPU: {} for training\"", ".", "format", "(", "args", ".", "gpu", ")", ")", "\n", "\n", "", "if", "args", ".", "distributed", ":", "\n", "        ", "if", "args", ".", "dist_url", "==", "\"env://\"", "and", "args", ".", "rank", "==", "-", "1", ":", "\n", "            ", "args", ".", "rank", "=", "int", "(", "os", ".", "environ", "[", "\"RANK\"", "]", ")", "\n", "", "if", "args", ".", "multiprocessing_distributed", ":", "\n", "# For multiprocessing distributed training, rank needs to be the", "\n", "# global rank among all the processes", "\n", "            ", "args", ".", "rank", "=", "args", ".", "rank", "*", "ngpus_per_node", "+", "gpu", "\n", "", "dist", ".", "init_process_group", "(", "backend", "=", "args", ".", "dist_backend", ",", "init_method", "=", "args", ".", "dist_url", ",", "\n", "world_size", "=", "args", ".", "world_size", ",", "rank", "=", "args", ".", "rank", ")", "\n", "# create model", "\n", "", "\"\"\"\n    if args.pretrained:\n        print(\"=> using pre-trained model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch](pretrained=True)\n    else:\n        print(\"=> creating model '{}'\".format(args.arch))\n        model = models.__dict__[args.arch]()\n    \"\"\"", "\n", "print", "(", "\"=> creating model resnet18\"", ")", "\n", "from", "models", ".", "resnet_imagenet", "import", "resnet18", "\n", "model", "=", "resnet18", "(", ")", "\n", "\n", "if", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "print", "(", "'using CPU, this will be slow'", ")", "\n", "", "elif", "args", ".", "distributed", ":", "\n", "# For multiprocessing distributed, DistributedDataParallel constructor", "\n", "# should always set the single device scope, otherwise,", "\n", "# DistributedDataParallel will use all available devices.", "\n", "        ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "# When using a single GPU per process and per", "\n", "# DistributedDataParallel, we need to divide the batch size", "\n", "# ourselves based on the total number of GPUs we have", "\n", "args", ".", "batch_size", "=", "int", "(", "args", ".", "batch_size", "/", "ngpus_per_node", ")", "\n", "args", ".", "workers", "=", "int", "(", "(", "args", ".", "workers", "+", "ngpus_per_node", "-", "1", ")", "/", "ngpus_per_node", ")", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ",", "device_ids", "=", "[", "args", ".", "gpu", "]", ")", "\n", "print", "(", "'model = torch.nn.parallel.DistributedDataParallel(model, device_ids=[args.gpu])'", ")", "\n", "", "else", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "# DistributedDataParallel will divide and allocate batch_size to all", "\n", "# available GPUs if device_ids are not set", "\n", "model", "=", "torch", ".", "nn", ".", "parallel", ".", "DistributedDataParallel", "(", "model", ")", "\n", "", "", "elif", "args", ".", "gpu", "is", "not", "None", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "args", ".", "gpu", ")", "\n", "model", "=", "model", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "print", "(", "'model = model.cuda(args.gpu)'", ")", "\n", "", "else", ":", "\n", "# DataParallel will divide and allocate batch_size to all available GPUs", "\n", "        ", "\"\"\"\n        if args.arch.startswith('alexnet') or args.arch.startswith('vgg'):\n            model.features = torch.nn.DataParallel(model.features)\n            model.cuda()\n        else:\n            model = torch.nn.DataParallel(model).cuda()\n        \"\"\"", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", "args", ".", "gpu", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "if", "args", ".", "gpu", "is", "None", ":", "\n", "                ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "", "else", ":", "\n", "# Map model to be loaded to specified single gpu.", "\n", "                ", "loc", "=", "'cuda:{}'", ".", "format", "(", "args", ".", "gpu", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ",", "map_location", "=", "loc", ")", "\n", "", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc1", "=", "checkpoint", "[", "'best_acc1'", "]", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "# best_acc1 may be from a checkpoint from a different GPU", "\n", "                ", "best_acc1", "=", "best_acc1", ".", "to", "(", "args", ".", "gpu", ")", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "raise", "ValueError", "\n", "\n", "", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# Data loading code", "\n", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_dataset", "=", "datasets", ".", "ImageFolder", "(", "\n", "traindir", ",", "\n", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", "\n", "\n", "if", "args", ".", "distributed", ":", "\n", "        ", "train_sampler", "=", "torch", ".", "utils", ".", "data", ".", "distributed", ".", "DistributedSampler", "(", "train_dataset", ")", "\n", "", "else", ":", "\n", "        ", "train_sampler", "=", "None", "\n", "\n", "", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "(", "train_sampler", "is", "None", ")", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ",", "sampler", "=", "train_sampler", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "evaluate", ":", "\n", "        ", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "return", "\n", "\n", "", "lr_milestones", "=", "json", ".", "loads", "(", "args", ".", "lr_milestones", ")", "\n", "for", "epoch", "in", "range", "(", "args", ".", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "if", "args", ".", "distributed", ":", "\n", "            ", "train_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "learning_rate", "=", "adjust_learning_rate", "(", "\n", "optimizer", "=", "optimizer", ",", "\n", "epoch", "=", "epoch", ",", "\n", "base_lr", "=", "args", ".", "lr", ",", "\n", "lr_milestones", "=", "lr_milestones", ",", "\n", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "print", "(", "f'Epoch {epoch} LR {learning_rate}'", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/learning_rate'", ",", "learning_rate", ",", "epoch", ")", "\n", "\n", "# train for one epoch", "\n", "", "ts", "=", "TimeStamp", "(", ")", "\n", "train_acc1", ",", "train_acc5", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "'train/duration'", ",", "ts", ".", "elapsed", "(", ")", "/", "60.0", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc1'", ",", "train_acc1", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'train/acc5'", ",", "train_acc5", ",", "epoch", ")", "\n", "\n", "# evaluate on validation set", "\n", "", "ts", "=", "TimeStamp", "(", ")", "\n", "acc1", ",", "acc5", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", "\n", "\n", "# remember best acc@1 and save checkpoint", "\n", "is_best", "=", "acc1", ">", "best_acc1", "\n", "best_acc1", "=", "max", "(", "acc1", ",", "best_acc1", ")", "\n", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "            ", "tb_writer", ".", "add_scalar", "(", "'val/duration'", ",", "ts", ".", "elapsed", "(", ")", "/", "60.0", ",", "epoch", ")", "\n", "tb_writer", ".", "add_scalar", "(", "'val/acc1'", ",", "acc1", ",", "epoch", ")", "\n", "#tb_writer.add_scalar('val/best_acc1', best_acc1, epoch)", "\n", "tb_writer", ".", "add_scalar", "(", "'val/acc5'", ",", "acc5", ",", "epoch", ")", "\n", "\n", "", "if", "not", "args", ".", "multiprocessing_distributed", "or", "(", "args", ".", "multiprocessing_distributed", "\n", "and", "args", ".", "rank", "%", "ngpus_per_node", "==", "0", ")", ":", "\n", "            ", "if", "args", ".", "save_checkpoint", ":", "\n", "                ", "save_checkpoint", "(", "\n", "state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'best_acc1'", ":", "best_acc1", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_best", "=", "is_best", ",", "\n", "experiment_dir", "=", "experiment_dir", ",", "\n", "epoch", "=", "epoch", ",", "\n", "interval", "=", "args", ".", "checkpoint_interval", ",", "\n", ")", "\n", "\n", "\n", "# Flush tensorboard data", "\n", "", "", "", "if", "(", "args", ".", "distributed", "and", "gpu", "==", "0", ")", "or", "not", "args", ".", "distributed", ":", "\n", "        ", "tb_writer", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train": [[373, 422], ["main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.ProgressMeter", "model.train", "time.time", "enumerate", "len", "main_imagenet_float.AverageMeter.update", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "main_imagenet_float.accuracy", "main_imagenet_float.AverageMeter.update", "main_imagenet_float.AverageMeter.update", "main_imagenet_float.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "main_imagenet_float.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_imagenet_float.ProgressMeter.display", "time.time", "time.time"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.train", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.accuracy", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.display"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "data_time", "=", "AverageMeter", "(", "'Data'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "train_loader", ")", ",", "\n", "[", "batch_time", ",", "data_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "\"Epoch: [{}]\"", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "# measure data loading time", "\n", "        ", "data_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# compute gradient and do SGD step", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "# parameter update", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "progress", ".", "display", "(", "i", ")", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "            ", "if", "i", ">", "1", ":", "break", "\n", "\n", "", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.validate": [[424, 469], ["main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.AverageMeter", "main_imagenet_float.ProgressMeter", "model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "time.time", "enumerate", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "model", "criterion", "main_imagenet_float.accuracy", "main_imagenet_float.AverageMeter.update", "main_imagenet_float.AverageMeter.update", "main_imagenet_float.AverageMeter.update", "main_imagenet_float.AverageMeter.update", "time.time", "images.cuda.cuda", "target.cuda.cuda", "criterion.item", "images.cuda.size", "images.cuda.size", "images.cuda.size", "main_imagenet_float.ProgressMeter.display", "time.time"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.accuracy", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.AverageMeter.update", "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.ProgressMeter.display"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ",", "args", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", "'Time'", ",", "':6.3f'", ")", "\n", "losses", "=", "AverageMeter", "(", "'Loss'", ",", "':.4e'", ")", "\n", "top1", "=", "AverageMeter", "(", "'Acc@1'", ",", "':6.2f'", ")", "\n", "top5", "=", "AverageMeter", "(", "'Acc@5'", ",", "':6.2f'", ")", "\n", "progress", "=", "ProgressMeter", "(", "\n", "len", "(", "val_loader", ")", ",", "\n", "[", "batch_time", ",", "losses", ",", "top1", ",", "top5", "]", ",", "\n", "prefix", "=", "'Test: '", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "images", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "args", ".", "gpu", "is", "not", "None", ":", "\n", "                ", "images", "=", "images", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "target", "=", "target", ".", "cuda", "(", "args", ".", "gpu", ",", "non_blocking", "=", "True", ")", "\n", "\n", "# compute output", "\n", "", "output", "=", "model", "(", "images", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "acc1", ",", "acc5", "=", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "acc1", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "acc5", "[", "0", "]", ",", "images", ".", "size", "(", "0", ")", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "progress", ".", "display", "(", "i", ")", "\n", "", "if", "args", ".", "dry_run", ":", "\n", "                ", "if", "i", ">", "1", ":", "break", "\n", "\n", "# TODO: this should also be done with the ProgressMeter", "\n", "", "", "print", "(", "' * Acc@1 {top1.avg:.3f} Acc@5 {top5.avg:.3f}'", "\n", ".", "format", "(", "top1", "=", "top1", ",", "top5", "=", "top5", ")", ")", "\n", "\n", "", "return", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.save_checkpoint": [[471, 488], ["os.path.join", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.path.join", "print", "shutil.copyfile", "os.path.join", "print", "shutil.copyfile"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save"], ["", "def", "save_checkpoint", "(", "*", ",", "state", ",", "is_best", ",", "experiment_dir", ",", "epoch", ",", "interval", ")", ":", "\n", "    ", "\"\"\"Save checkpoints\n    Save the running checkpoint.\n    Save checkpoints at given interval.\n    Save the running best checkpoint.\n    \"\"\"", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "'checkpoint.pth.tar'", ")", "\n", "print", "(", "f'Saving current: {filename}'", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "best", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "'model_best.pth.tar'", ")", "\n", "print", "(", "f'Saving best: {best}'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "best", ")", "\n", "", "if", "(", "interval", ">", "0", ")", "and", "(", "(", "epoch", "+", "1", ")", "%", "interval", "==", "0", ")", ":", "\n", "        ", "current", "=", "os", ".", "path", ".", "join", "(", "experiment_dir", ",", "f'checkpoint{epoch}.pth.tar'", ")", "\n", "print", "(", "f'Saving interval: {current}'", ")", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "current", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.adjust_learning_rate": [[531, 538], ["bisect.bisect"], "function", ["None"], ["", "", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ",", "base_lr", ",", "lr_milestones", ",", "gamma", "=", "0.1", ")", "->", "float", ":", "\n", "    ", "\"\"\"Sets the learning rate to decay by gamma (multiplicatively) when reaching each milestone\"\"\"", "\n", "factor", "=", "gamma", "**", "bisect", "(", "lr_milestones", ",", "epoch", ")", "\n", "lr", "=", "base_lr", "*", "factor", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "", "return", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.None.main_imagenet_float.accuracy": [[540, 555], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].reshape().float().sum", "res.append", "correct[].reshape().float().sum.mul_", "target.view", "correct[].reshape().float", "correct[].reshape"], "function", ["None"], ["", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the accuracy over the k top predictions for the specified values of k\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "            ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "reshape", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save": [[13, 24], ["os.path.join", "torch.save", "pattern.format", "print", "model.state_dict", "optimizer.state_dict"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.save"], ["def", "save", "(", "epoch", ",", "model", ",", "optimizer", ",", "loss", ",", "folder", ",", "pattern", "=", "'{}.tar'", ",", "verbose", "=", "False", ")", ":", "\n", "  ", "file_name", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "pattern", ".", "format", "(", "epoch", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'model_state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer_state_dict'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'loss'", ":", "loss", ",", "\n", "}", ",", "file_name", ")", "\n", "if", "verbose", ":", "\n", "    ", "print", "(", "'Model saved to {}'", ".", "format", "(", "file_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load": [[26, 38], ["torch.load", "model.load_state_dict", "optimizer.load_state_dict"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load"], ["", "", "def", "load", "(", "file_name", ",", "model", ",", "optimizer", ")", ":", "\n", "  ", "checkpoint", "=", "torch", ".", "load", "(", "file_name", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer_state_dict'", "]", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "loss", "=", "checkpoint", "[", "'loss'", "]", "\n", "\n", "#Outside", "\n", "#model.eval()", "\n", "# - or -", "\n", "#model.train()", "\n", "return", "epoch", ",", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_mnist": [[13, 37], ["torch.cuda.is_available", "torchvision.transforms.Compose", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["def", "load_mnist", "(", "args", ",", "data_folder", "=", "'./data'", ",", "num_workers", "=", "2", ")", ":", "\n", "    ", "\"\"\"MNIST\n    http://yann.lecun.com/exdb/mnist/\n    60000 train / 10000 test\n    \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "data_folder", ",", "train", "=", "True", ",", "\n", "download", "=", "True", ",", "transform", "=", "transform", ")", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "MNIST", "(", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_mnist_with_validation": [[39, 71], ["torch.cuda.is_available", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torchvision.datasets.MNIST", "torch.utils.data.dataset.Subset", "torch.utils.data.dataset.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "range", "range", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "len"], "function", ["None"], ["", "def", "load_mnist_with_validation", "(", "args", ",", "data_folder", "=", "'./data'", ",", "num_workers", "=", "2", ",", "validation_size", "=", "5000", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "train_data", "=", "datasets", ".", "MNIST", "(", "\n", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "test_data", "=", "datasets", ".", "MNIST", "(", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "validation_split", "=", "len", "(", "train_data", ")", "-", "validation_size", "\n", "train_dataset", "=", "Subset", "(", "train_data", ",", "range", "(", "0", ",", "validation_split", ")", ")", "\n", "validation_dataset", "=", "Subset", "(", "train_data", ",", "range", "(", "\n", "validation_split", ",", "len", "(", "train_data", ")", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_small_mnist": [[73, 108], ["torch.cuda.is_available", "torchvision.transforms.Compose", "torchvision.datasets.MNIST", "torch.utils.data.dataset.Subset", "torch.utils.data.dataset.Subset", "torchvision.datasets.MNIST", "torch.utils.data.dataset.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "range", "range", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "load_small_mnist", "(", "args", ",", "data_folder", "=", "'./data'", ",", "num_workers", "=", "2", ",", "train_size", "=", "10000", ",", "test_size", "=", "2000", ")", ":", "\n", "    ", "assert", "(", "train_size", "<=", "60000", ")", "\n", "assert", "(", "test_size", "<=", "10000", ")", "\n", "assert", "(", "train_size", "+", "test_size", "<=", "60000", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.1307", ",", ")", ",", "(", "0.3081", ",", ")", ")", "]", ")", "\n", "train_data", "=", "datasets", ".", "MNIST", "(", "\n", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "train_dataset", "=", "Subset", "(", "train_data", ",", "range", "(", "0", ",", "train_size", ")", ")", "\n", "validation_dataset", "=", "Subset", "(", "\n", "train_data", ",", "range", "(", "train_size", ",", "train_size", "+", "test_size", ")", ")", "\n", "test_data", "=", "datasets", ".", "MNIST", "(", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "test_dataset", "=", "Subset", "(", "test_data", ",", "range", "(", "0", ",", "test_size", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_dataset", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_dataset", ",", "\n", "batch_size", "=", "args", ".", "test_batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_cifar10": [[110, 136], ["torch.cuda.is_available", "torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "load_cifar10", "(", "args", ",", "data_folder", "=", "'./data'", ",", "num_workers", "=", "2", ")", ":", "\n", "    ", "\"\"\"CIFAR-10\n    https://www.cs.toronto.edu/~kriz/cifar.html\n    50000 train / 10000 test\n    \"\"\"", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "\n", ")", "\n", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_data", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.get_cifar10_transforms": [[138, 160], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "def", "get_cifar10_transforms", "(", "use_data_augmentation", ")", ":", "\n", "    ", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "\n", ")", "\n", "]", ")", "\n", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ",", "\n", ")", "\n", "]", ")", "\n", "if", "use_data_augmentation", ":", "\n", "        ", "return", "transform_train", ",", "transform_test", "\n", "", "else", ":", "\n", "        ", "return", "transform_test", ",", "transform_test", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_cifar10_with_validation": [[162, 191], ["torch.cuda.is_available", "dataset.get_cifar10_transforms", "torchvision.datasets.CIFAR10", "print", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "len", "len"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.get_cifar10_transforms"], ["", "", "def", "load_cifar10_with_validation", "(", "\n", "args", ",", "\n", "data_folder", "=", "'./data'", ",", "\n", "num_workers", "=", "2", ",", "\n", "validation_size", "=", "5000", "\n", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform_train", ",", "transform_test", "=", "get_cifar10_transforms", "(", "\n", "args", ".", "use_data_augmentation", ")", "\n", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "assert", "(", "validation_size", "<", "len", "(", "train_data", ")", ")", "\n", "sets", "=", "[", "len", "(", "train_data", ")", "-", "validation_size", ",", "validation_size", "]", "\n", "print", "(", "\"Dataset splits {}\"", ".", "format", "(", "sets", ")", ")", "\n", "splits", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "train_data", ",", "sets", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "splits", "[", "0", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "splits", "[", "1", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_cifar10_with_preselected_validation": [[193, 225], ["torch.cuda.is_available", "dataset.get_cifar10_transforms", "dataset.load_train_val_indices", "torchvision.datasets.CIFAR10", "torch.utils.data.dataset.Subset", "torch.utils.data.dataset.Subset", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.get_cifar10_transforms", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_train_val_indices"], ["", "def", "load_cifar10_with_preselected_validation", "(", "\n", "batch_size", ",", "\n", "test_batch_size", ",", "\n", "use_data_augmentation", ",", "\n", "index_file", "=", "'cifar10_split.json'", ",", "\n", "data_folder", "=", "'./data'", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform_train", ",", "transform_test", "=", "get_cifar10_transforms", "(", "use_data_augmentation", ")", "\n", "\n", "train_indices", ",", "val_indices", "=", "load_train_val_indices", "(", "index_file", ")", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "assert", "(", "len", "(", "train_data", ")", "==", "len", "(", "train_indices", ")", "+", "len", "(", "val_indices", ")", ")", "\n", "\n", "train_dataset", "=", "Subset", "(", "train_data", ",", "train_indices", ")", "\n", "validation_dataset", "=", "Subset", "(", "train_data", ",", "val_indices", ")", "\n", "print", "(", "\"Dataset splits {}/{}\"", ".", "format", "(", "len", "(", "train_indices", ")", ",", "len", "(", "val_indices", ")", ")", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_cifar10_with_preselected_validation_fix_validation_transform": [[227, 260], ["torch.cuda.is_available", "dataset.get_cifar10_transforms", "dataset.load_train_val_indices", "torchvision.datasets.CIFAR10", "torch.utils.data.dataset.Subset", "torchvision.datasets.CIFAR10", "torch.utils.data.dataset.Subset", "torchvision.datasets.CIFAR10", "print", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "len", "len", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.get_cifar10_transforms", "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_train_val_indices"], ["", "def", "load_cifar10_with_preselected_validation_fix_validation_transform", "(", "\n", "batch_size", ",", "\n", "test_batch_size", ",", "\n", "use_data_augmentation", ",", "\n", "index_file", "=", "'cifar10_split.json'", ",", "\n", "data_folder", "=", "'./data'", ",", "\n", "num_workers", "=", "2", ",", "\n", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform_train", ",", "transform_test", "=", "get_cifar10_transforms", "(", "use_data_augmentation", ")", "\n", "\n", "train_indices", ",", "val_indices", "=", "load_train_val_indices", "(", "index_file", ")", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "assert", "(", "len", "(", "train_data", ")", "==", "len", "(", "train_indices", ")", "+", "len", "(", "val_indices", ")", ")", "\n", "train_dataset", "=", "Subset", "(", "train_data", ",", "train_indices", ")", "\n", "validation_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "validation_dataset", "=", "Subset", "(", "validation_data", ",", "val_indices", ")", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "print", "(", "\"Dataset splits {}/{}/{}\"", ".", "format", "(", "len", "(", "train_indices", ")", ",", "len", "(", "val_indices", ")", ",", "len", "(", "test_data", ")", ")", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "train_dataset", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "validation_dataset", ",", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "test_data", ",", "batch_size", "=", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_small_cifar10_with_validation": [[263, 299], ["torch.cuda.is_available", "dataset.get_cifar10_transforms", "torchvision.datasets.CIFAR10", "print", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "print", "torch.utils.data.random_split", "torch.utils.data.DataLoader", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.get_cifar10_transforms"], ["", "def", "load_small_cifar10_with_validation", "(", "\n", "args", ",", "\n", "data_folder", "=", "'./data'", ",", "\n", "num_workers", "=", "2", ",", "\n", "train_size", "=", "10000", ",", "\n", "validation_size", "=", "2000", ",", "\n", "test_size", "=", "2000", "\n", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "4", ",", "'pin_memory'", ":", "True", "}", "\n", "", "else", ":", "\n", "        ", "kwargs", "=", "{", "'num_workers'", ":", "num_workers", "}", "\n", "", "transform_train", ",", "transform_test", "=", "get_cifar10_transforms", "(", "\n", "args", ".", "use_data_augmentation", ")", "\n", "\n", "train_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", "assert", "(", "train_size", "+", "validation_size", "<", "len", "(", "train_data", ")", ")", "\n", "rest", "=", "len", "(", "train_data", ")", "-", "train_size", "-", "validation_size", "\n", "sets", "=", "[", "train_size", ",", "validation_size", ",", "rest", "]", "\n", "print", "(", "\"Dataset splits {}\"", ".", "format", "(", "sets", ")", ")", "\n", "splits", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "train_data", ",", "sets", ")", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "splits", "[", "0", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "validation_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "splits", "[", "1", "]", ",", "batch_size", "=", "args", ".", "batch_size", ",", "shuffle", "=", "True", ",", "**", "kwargs", ")", "\n", "\n", "test_data", "=", "datasets", ".", "CIFAR10", "(", "\n", "root", "=", "data_folder", ",", "train", "=", "False", ",", "transform", "=", "transform_test", ")", "\n", "assert", "(", "test_size", "<", "len", "(", "test_data", ")", ")", "\n", "sets", "=", "[", "test_size", ",", "len", "(", "test_data", ")", "-", "test_size", "]", "\n", "print", "(", "\"Dataset splits {}\"", ".", "format", "(", "sets", ")", ")", "\n", "splits", "=", "torch", ".", "utils", ".", "data", ".", "random_split", "(", "test_data", ",", "sets", ")", "\n", "test_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "splits", "[", "0", "]", ",", "batch_size", "=", "args", ".", "test_batch_size", ",", "shuffle", "=", "False", ",", "**", "kwargs", ")", "\n", "return", "train_loader", ",", "validation_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.generate_train_val_indices": [[301, 333], ["random.shuffle", "print", "open", "json.dump", "print", "range", "len", "len"], "function", ["None"], ["", "def", "generate_train_val_indices", "(", "input_size", ",", "val_size", ",", "file_name", ")", ":", "\n", "    ", "\"\"\"Generate random indices for training and validation set\n\n    Parameters\n    ==========\n    input_size : int\n        Dataset size.\n    val_size : int\n        Validation size.\n    file_name : str\n        Output json file name.\n\n    Returns\n    =======\n    train_indices : list(int)\n    val_indices : list(int)\n    \"\"\"", "\n", "assert", "(", "val_size", "<", "input_size", ")", "\n", "indices", "=", "[", "x", "for", "x", "in", "range", "(", "0", ",", "input_size", ")", "]", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "train_indices", "=", "indices", "[", "val_size", ":", "]", "\n", "validation_indices", "=", "indices", "[", ":", "val_size", "]", "\n", "print", "(", "\"train size {} val size {}\"", ".", "format", "(", "\n", "len", "(", "train_indices", ")", ",", "len", "(", "validation_indices", ")", ")", ")", "\n", "\n", "# Write indices to a json file", "\n", "with", "open", "(", "file_name", ",", "'w'", ")", "as", "fp", ":", "\n", "        ", "data", "=", "{", "'train'", ":", "train_indices", ",", "'validation'", ":", "validation_indices", "}", "\n", "json", ".", "dump", "(", "data", ",", "fp", ")", "\n", "print", "(", "\"Saved to {}...\"", ".", "format", "(", "file_name", ")", ")", "\n", "\n", "", "return", "train_indices", ",", "validation_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.util.dataset.load_train_val_indices": [[335, 353], ["open", "print", "json.load"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load"], ["", "def", "load_train_val_indices", "(", "file_name", ")", ":", "\n", "    ", "\"\"\"Generate random indices for training and validation set\n\n    Parameters\n    ==========\n    file_name : str\n        Output json file name.\n\n    Returns\n    =======\n    train_indices : list(int)\n    val_indices : list(int)\n    \"\"\"", "\n", "\n", "with", "open", "(", "file_name", ",", "'r'", ")", "as", "fp", ":", "\n", "        ", "print", "(", "\"Loading from {}...\"", ".", "format", "(", "file_name", ")", ")", "\n", "data", "=", "json", ".", "load", "(", "fp", ")", "\n", "return", "data", "[", "'train'", "]", ",", "data", "[", "'validation'", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.layer_init": [[13, 30], ["list", "layercontrol.LayerControl.load_layers", "layercontrol.LayerControl.sanity_check", "layercontrol.LayerControl.modules", "ValueError", "print", "layercontrol.LayerControl.binarize_all"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.load_layers", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.sanity_check", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_all"], ["def", "layer_init", "(", "self", ",", "\n", "epochs_per_layer", ":", "int", ",", "\n", "all_binary", ":", "bool", ",", "\n", "layers_json", ":", "str", ",", "\n", ")", "->", "None", ":", "\n", "        ", "self", ".", "all_binary_", "=", "all_binary", "\n", "# Track training progress", "\n", "self", ".", "epochs_per_layer_", "=", "epochs_per_layer", "\n", "self", ".", "epochs_", "=", "0", "\n", "self", ".", "nets_", "=", "list", "(", "self", ".", "modules", "(", ")", ")", "\n", "self", ".", "layers_", "=", "self", ".", "load_layers", "(", "layers_json", ")", "\n", "if", "self", ".", "layers_", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Problem with reading layers json file: {layers_json}\"", ")", "\n", "", "self", ".", "sanity_check", "(", ")", "\n", "if", "all_binary", ":", "\n", "            ", "print", "(", "'layer_init() binarize_all()'", ")", "\n", "self", ".", "binarize_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.sanity_check": [[31, 35], ["hasattr"], "methods", ["None"], ["", "", "def", "sanity_check", "(", "self", ")", ":", "\n", "# A layer that can be binarized have this variable", "\n", "        ", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "assert", "hasattr", "(", "self", ".", "nets_", "[", "n", "]", ",", "\"binarize_\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.load_layers": [[36, 41], ["print", "open", "json.load"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load"], ["", "", "def", "load_layers", "(", "self", ",", "json_file", ")", ":", "\n", "        ", "print", "(", "f\"Loading layers from {json_file}...\"", ")", "\n", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "return", "json", ".", "load", "(", "fp", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.detect_layers": [[42, 53], ["enumerate", "layercontrol.LayerControl.modules", "isinstance", "layers.append"], "methods", ["None"], ["", "def", "detect_layers", "(", "self", ")", "->", "list", ":", "\n", "        ", "\"\"\"Return layer indices of binarizable neural network\n        \"\"\"", "\n", "layers", "=", "[", "]", "\n", "test", "=", "(", "ControlBinaryLinear", ",", "ControlBinaryConv2d", ")", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "test", ")", ":", "\n", "                ", "layers", ".", "append", "(", "idx", ")", "\n", "#print(idx, '->', m)", "\n", "#print(len(layers), \"layers\", layers)", "\n", "", "", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.show_binarized": [[54, 63], ["print", "print", "print"], "methods", ["None"], ["", "def", "show_binarized", "(", "self", ")", ":", "\n", "        ", "status", "=", "\"\"", "\n", "layers", "=", "\"\"", "\n", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "status", "+=", "\"{:3}\"", ".", "format", "(", "self", ".", "nets_", "[", "n", "]", ".", "binarize_", ")", "\n", "layers", "+=", "\"{:3}\"", ".", "format", "(", "n", ")", "\n", "", "print", "(", "f'Epoch: {self.epochs_}'", ")", "\n", "print", "(", "\"Layer \"", ",", "layers", ")", "\n", "print", "(", "\"Binary\"", ",", "status", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.binarize_layer": [[64, 75], ["layercontrol.LayerControl.show_binarized", "len", "print"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set layer binarization on a forward-first schedule.\n        Call before training an epoch.\n        \"\"\"", "\n", "layer", "=", "self", ".", "epochs_", "//", "self", ".", "epochs_per_layer_", "\n", "if", "layer", "<", "len", "(", "self", ".", "layers_", ")", ":", "\n", "            ", "self", ".", "nets_", "[", "self", ".", "layers_", "[", "layer", "]", "]", ".", "binarize_", "=", "True", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"All already binarized\"", ")", "\n", "", "self", ".", "epochs_", "+=", "1", "\n", "self", ".", "show_binarized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.binarize_layer_reverse": [[76, 87], ["layercontrol.LayerControl.show_binarized", "len", "print"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_layer_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set layer binarization on a last-first schedule.\n        Call before training an epoch.\n        \"\"\"", "\n", "layer", "=", "self", ".", "epochs_", "//", "self", ".", "epochs_per_layer_", "\n", "if", "layer", "<", "len", "(", "self", ".", "layers_", ")", ":", "\n", "            ", "self", ".", "nets_", "[", "self", ".", "layers_", "[", "-", "1", "-", "layer", "]", "]", ".", "binarize_", "=", "True", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"All already binarized\"", ")", "\n", "", "self", ".", "epochs_", "+=", "1", "\n", "self", ".", "show_binarized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layercontrol.LayerControl.binarize_all": [[88, 95], ["layercontrol.LayerControl.show_binarized"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_all", "(", "self", ")", ":", "\n", "        ", "\"\"\"Binarize all layers\n        Call once before starting any training.\n        \"\"\"", "\n", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "self", ".", "nets_", "[", "n", "]", ".", "binarize_", "=", "True", "\n", "", "self", ".", "show_binarized", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg5.Vgg5.__init__": [[26, 49], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["def", "__init__", "(", "self", ",", "block1_ch", "=", "64", ",", "fc_units", "=", "256", ",", "n_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "Vgg5", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block1_ch", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "16384", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "fc_units", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "fc_units", ",", "n_classes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_classes", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg5.Vgg5.forward": [[50, 55], ["vgg5.Vgg5.features", "vgg5.Vgg5.view", "vgg5.Vgg5.classifier", "vgg5.Vgg5.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BinaryLinear.__init__": [[33, 39], ["torch.Linear.__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "kargs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BinaryLinear", ",", "self", ")", ".", "__init__", "(", "*", "kargs", ",", "**", "kwargs", ")", "\n", "# Tracking if this layer need binarization (per epoch)", "\n", "self", ".", "binarize_", "=", "False", "\n", "# Tracking if weight is already binarized (per batch). Used to skip duplicate binarization during evaluation.", "\n", "self", ".", "is_binary", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BinaryLinear.forward": [[40, 48], ["torch.linear", "torch.linear", "torch.linear", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet_imagenet_binary.BinaryLinear.weight.clone", "resnet_imagenet_binary.BinaryLinear.weight.sign_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "binarize_", "and", "not", "self", ".", "is_binary", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "weight_orig", "=", "self", ".", "weight", ".", "clone", "(", ")", "\n", "self", ".", "weight", ".", "sign_", "(", ")", "\n", "self", ".", "is_binary", "=", "True", "\n", "", "", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BinaryConv2d.__init__": [[52, 58], ["torch.Conv2d.__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "kargs", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "BinaryConv2d", ",", "self", ")", ".", "__init__", "(", "*", "kargs", ",", "**", "kwargs", ")", "\n", "# Tracking if this layer need binarization (per epoch)", "\n", "self", ".", "binarize_", "=", "False", "\n", "# Tracking if weight is already binarized (per batch). Used to skip duplicate binarization during evaluation.", "\n", "self", ".", "is_binary", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BinaryConv2d.forward": [[59, 69], ["torch.conv2d", "torch.conv2d", "torch.conv2d", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "resnet_imagenet_binary.BinaryConv2d.weight.clone", "resnet_imagenet_binary.BinaryConv2d.weight.sign_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "if", "self", ".", "binarize_", "and", "not", "self", ".", "is_binary", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "self", ".", "weight_orig", "=", "self", ".", "weight", ".", "clone", "(", ")", "\n", "self", ".", "weight", ".", "sign_", "(", ")", "\n", "self", ".", "is_binary", "=", "True", "\n", "", "", "out", "=", "F", ".", "conv2d", "(", "\n", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BasicBlock.__init__": [[102, 128], ["torch.Module.__init__", "resnet_imagenet_binary.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "resnet_imagenet_binary.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.BasicBlock.forward": [[129, 146], ["resnet_imagenet_binary.BasicBlock.conv1", "resnet_imagenet_binary.BasicBlock.bn1", "resnet_imagenet_binary.BasicBlock.relu", "resnet_imagenet_binary.BasicBlock.conv2", "resnet_imagenet_binary.BasicBlock.bn2", "resnet_imagenet_binary.BasicBlock.relu", "resnet_imagenet_binary.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.Bottleneck.__init__": [[157, 182], ["torch.Module.__init__", "resnet_imagenet_binary.conv1x1", "norm_layer", "resnet_imagenet_binary.conv3x3", "norm_layer", "resnet_imagenet_binary.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.Bottleneck.forward": [[183, 204], ["resnet_imagenet_binary.Bottleneck.conv1", "resnet_imagenet_binary.Bottleneck.bn1", "resnet_imagenet_binary.Bottleneck.relu", "resnet_imagenet_binary.Bottleneck.conv2", "resnet_imagenet_binary.Bottleneck.bn2", "resnet_imagenet_binary.Bottleneck.relu", "resnet_imagenet_binary.Bottleneck.conv3", "resnet_imagenet_binary.Bottleneck.bn3", "resnet_imagenet_binary.Bottleneck.relu", "resnet_imagenet_binary.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.ResNet.__init__": [[216, 274], ["torch.Module.__init__", "resnet_imagenet_binary.BinaryConv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet_binary.ResNet._make_layer", "resnet_imagenet_binary.ResNet._make_layer", "resnet_imagenet_binary.ResNet._make_layer", "resnet_imagenet_binary.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet_imagenet_binary.BinaryLinear", "resnet_imagenet_binary.ResNet.modules", "len", "ValueError", "isinstance", "resnet_imagenet_binary.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "BinaryConv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "BinaryLinear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "(", "nn", ".", "Conv2d", ",", "BinaryConv2d", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.ResNet._make_layer": [[275, 299], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_imagenet_binary.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.ResNet._forward_impl": [[300, 317], ["resnet_imagenet_binary.ResNet.conv1", "resnet_imagenet_binary.ResNet.bn1", "resnet_imagenet_binary.ResNet.relu", "resnet_imagenet_binary.ResNet.maxpool", "resnet_imagenet_binary.ResNet.layer1", "resnet_imagenet_binary.ResNet.layer2", "resnet_imagenet_binary.ResNet.layer3", "resnet_imagenet_binary.ResNet.layer4", "resnet_imagenet_binary.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_imagenet_binary.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.ResNet.forward": [[318, 320], ["resnet_imagenet_binary.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.restore_fp_weight": [[71, 79], ["isinstance", "torch.no_grad", "torch.no_grad", "torch.no_grad", "m.weight.copy_"], "function", ["None"], ["", "", "def", "restore_fp_weight", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Restore full-precision weights for parameter update.\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "(", "BinaryLinear", ",", "BinaryConv2d", ")", ")", ":", "\n", "        ", "if", "m", ".", "binarize_", "and", "m", ".", "is_binary", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "m", ".", "weight", ".", "copy_", "(", "m", ".", "weight_orig", ")", "\n", "m", ".", "is_binary", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.binarize_all": [[81, 86], ["isinstance"], "function", ["None"], ["", "", "", "", "def", "binarize_all", "(", "m", ":", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Restore full-precision weights for parameter update.\n    \"\"\"", "\n", "if", "isinstance", "(", "m", ",", "(", "BinaryLinear", ",", "BinaryConv2d", ")", ")", ":", "\n", "        ", "m", ".", "binarize_", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.conv3x3": [[88, 92], ["resnet_imagenet_binary.BinaryConv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "BinaryConv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "BinaryConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.conv1x1": [[94, 97], ["resnet_imagenet_binary.BinaryConv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "BinaryConv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "BinaryConv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary._resnet": [[322, 337], ["resnet_imagenet_binary.ResNet", "ValueError", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", "\"Pretrain unsupported\"", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnet18": [[339, 349], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet18", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnet34": [[351, 361], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet34", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnet50": [[363, 373], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnet101": [[375, 385], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet101", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnet152": [[387, 397], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet152", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnext50_32x4d": [[399, 411], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.resnext101_32x8d": [[413, 425], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.wide_resnet50_2": [[427, 443], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_.\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet_binary.wide_resnet101_2": [[445, 461], ["resnet_imagenet_binary._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_.\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.LambdaLayer.__init__": [[47, 50], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.LambdaLayer.forward": [[51, 53], ["resnet_control.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.BasicBlock.__init__": [[58, 77], ["torch.Module.__init__", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_control.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "ControlBinaryConv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "ControlBinaryConv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryConv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.BasicBlock.forward": [[79, 85], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_control.BasicBlock.bn2", "resnet_control.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_control.BasicBlock.bn1", "resnet_control.BasicBlock.conv2", "resnet_control.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.__init__": [[88, 102], ["super().__init__", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_control.ResNet._make_layer", "resnet_control.ResNet._make_layer", "resnet_control.ResNet._make_layer", "binary_control.ControlBinaryLinear", "resnet_control.ResNet.apply", "resnet_control.ResNet.layer_init"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.layer_init"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "epochs_per_layer", "=", "100", ",", "all_binary", "=", "False", ",", "layers_json", "=", "None", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "ControlBinaryConv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "ControlBinaryLinear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n", "self", ".", "layer_init", "(", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.layer_init": [[104, 116], ["list", "resnet_control.ResNet.load_layers", "resnet_control.ResNet.sanity_check", "resnet_control.ResNet.modules", "ValueError", "resnet_control.ResNet.binarize_all"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.load_layers", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.sanity_check", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_all"], ["", "def", "layer_init", "(", "self", ",", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "        ", "self", ".", "_all_binary", "=", "all_binary", "\n", "# Track training progress", "\n", "self", ".", "epochs_per_layer_", "=", "epochs_per_layer", "\n", "self", ".", "epochs_", "=", "0", "\n", "self", ".", "nets_", "=", "list", "(", "self", ".", "modules", "(", ")", ")", "\n", "self", ".", "layers_", "=", "self", ".", "load_layers", "(", "layers_json", ")", "\n", "if", "self", ".", "layers_", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "\"Problem with reading layers json file: {}\"", ".", "format", "(", "layers_json", ")", ")", "\n", "", "self", ".", "sanity_check", "(", ")", "\n", "if", "all_binary", ":", "\n", "            ", "self", ".", "binarize_all", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.sanity_check": [[117, 121], ["hasattr"], "methods", ["None"], ["", "", "def", "sanity_check", "(", "self", ")", ":", "\n", "# A layer that can be binarized have this variable", "\n", "        ", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "assert", "hasattr", "(", "self", ".", "nets_", "[", "n", "]", ",", "\"binarize_\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.load_layers": [[122, 127], ["open", "print", "json.load"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.util.io.load"], ["", "", "def", "load_layers", "(", "self", ",", "json_file", ")", ":", "\n", "        ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "fp", ":", "\n", "            ", "print", "(", "\"Loading layers from {}...\"", ".", "format", "(", "json_file", ")", ")", "\n", "return", "json", ".", "load", "(", "fp", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.detect_layers": [[128, 137], ["enumerate", "print", "resnet_control.ResNet.modules", "isinstance", "len", "layers.append"], "methods", ["None"], ["", "def", "detect_layers", "(", "self", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "test", "=", "(", "ControlBinaryLinear", ",", "ControlBinaryConv2d", ")", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "test", ")", ":", "\n", "                ", "layers", ".", "append", "(", "idx", ")", "\n", "#print(idx, '->', m)", "\n", "", "", "print", "(", "len", "(", "layers", ")", ",", "\"layers\"", ",", "layers", ")", "\n", "return", "layers", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized": [[138, 146], ["print", "print"], "methods", ["None"], ["", "def", "show_binarized", "(", "self", ")", ":", "\n", "        ", "status", "=", "\"\"", "\n", "layers", "=", "\"\"", "\n", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "status", "+=", "\"{:3}\"", ".", "format", "(", "self", ".", "nets_", "[", "n", "]", ".", "binarize_", ")", "\n", "layers", "+=", "\"{:3}\"", ".", "format", "(", "n", ")", "\n", "", "print", "(", "\"Layer \"", ",", "layers", ")", "\n", "print", "(", "\"Binary\"", ",", "status", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_layer": [[147, 158], ["resnet_control.ResNet.show_binarized", "len", "print"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_layer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set layer binarization on a forward-first schedule.\n        Call before training an epoch.\n        \"\"\"", "\n", "layer", "=", "self", ".", "epochs_", "//", "self", ".", "epochs_per_layer_", "\n", "if", "layer", "<", "len", "(", "self", ".", "layers_", ")", ":", "\n", "            ", "self", ".", "nets_", "[", "self", ".", "layers_", "[", "layer", "]", "]", ".", "binarize_", "=", "True", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"All already binarized\"", ")", "\n", "", "self", ".", "epochs_", "+=", "1", "\n", "self", ".", "show_binarized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_layer_reverse": [[159, 170], ["resnet_control.ResNet.show_binarized", "len", "print"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_layer_reverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Set layer binarization on a last-first schedule.\n        Call before training an epoch.\n        \"\"\"", "\n", "layer", "=", "self", ".", "epochs_", "//", "self", ".", "epochs_per_layer_", "\n", "if", "layer", "<", "len", "(", "self", ".", "layers_", ")", ":", "\n", "            ", "self", ".", "nets_", "[", "self", ".", "layers_", "[", "-", "1", "-", "layer", "]", "]", ".", "binarize_", "=", "True", "\n", "", "else", ":", "\n", "            ", "print", "(", "\"All already binarized\"", ")", "\n", "", "self", ".", "epochs_", "+=", "1", "\n", "self", ".", "show_binarized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.binarize_all": [[171, 178], ["resnet_control.ResNet.show_binarized"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.show_binarized"], ["", "def", "binarize_all", "(", "self", ")", ":", "\n", "        ", "\"\"\"Binarize all layers\n        Call once before starting any training.\n        \"\"\"", "\n", "for", "n", "in", "self", ".", "layers_", ":", "\n", "            ", "self", ".", "nets_", "[", "n", "]", ".", "binarize_", "=", "True", "\n", "", "self", ".", "show_binarized", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet._make_layer": [[179, 187], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.forward": [[188, 197], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_control.ResNet.layer1", "resnet_control.ResNet.layer2", "resnet_control.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_control.ResNet.view", "resnet_control.ResNet.linear", "resnet_control.ResNet.bn1", "resnet_control.ResNet.size", "resnet_control.ResNet.conv1", "resnet_control.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control._weights_init": [[36, 44], ["isinstance", "isinstance", "m.reset_parameters", "isinstance", "isinstance", "ValueError"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "#classname = m.__class__.__name__", "\n", "#print(classname)", "\n", "    ", "if", "isinstance", "(", "m", ",", "ControlBinaryLinear", ")", "or", "isinstance", "(", "m", ",", "ControlBinaryConv2d", ")", ":", "\n", "#init.kaiming_normal(m.weight)", "\n", "        ", "m", ".", "reset_parameters", "(", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"Need to convert to Control Binary module\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet20": [[199, 201], ["resnet_control.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet32": [[203, 205], ["resnet_control.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet44": [[207, 209], ["resnet_control.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet56": [[211, 213], ["resnet_control.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet110": [[215, 217], ["resnet_control.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.resnet1202": [[219, 221], ["resnet_control.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", "epochs_per_layer", ",", "all_binary", ",", "layers_json", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.test": [[223, 231], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["None"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9binary.Vgg9Binary.__init__": [[43, 90], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg9binary.Vgg9Binary.layer_init", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.layer_init"], ["def", "__init__", "(", "self", ",", "\n", "block1_ch", "=", "64", ",", "block2_ch", "=", "128", ",", "block3_ch", "=", "256", ",", "fc_units", "=", "256", ",", "n_classes", "=", "10", ",", "\n", "epochs_per_layer", "=", "100", ",", "all_binary", "=", "False", ",", "layers_json", "=", "None", ")", ":", "\n", "        ", "super", "(", "Vgg9Binary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryConv2d", "(", "3", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryConv2d", "(", "block1_ch", ",", "block1_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "ControlBinaryConv2d", "(", "block1_ch", ",", "block2_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block2_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryConv2d", "(", "block2_ch", ",", "block2_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block2_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "ControlBinaryConv2d", "(", "block2_ch", ",", "block3_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block3_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryConv2d", "(", "block3_ch", ",", "block3_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block3_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryLinear", "(", "4", "*", "4", "*", "block3_ch", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryLinear", "(", "fc_units", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryLinear", "(", "fc_units", ",", "n_classes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_classes", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "self", ".", "layer_init", "(", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9binary.Vgg9Binary.forward": [[91, 96], ["vgg9binary.Vgg9Binary.features", "vgg9binary.Vgg9Binary.view", "vgg9binary.Vgg9Binary.classifier", "vgg9binary.Vgg9Binary.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.mlp3.Mlp3.__init__": [[29, 50], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["def", "__init__", "(", "self", ",", "\n", "in_features", "=", "784", ",", "\n", "layer_features1", "=", "1024", ",", "\n", "layer_features2", "=", "1024", ",", "\n", "out_features", "=", "10", ")", ":", "\n", "        ", "super", "(", "Mlp3", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_features", ",", "layer_features1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "layer_features1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "layer_features1", ",", "layer_features2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "layer_features2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "layer_features2", ",", "out_features", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_features", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.mlp3.Mlp3.forward": [[51, 55], ["mlp3.Mlp3.view", "mlp3.Mlp3.features", "mlp3.Mlp3.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "in_features", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.mlp3.Mlp3Binary.__init__": [[78, 102], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "mlp3.Mlp3Binary.layer_init", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.layer_init"], ["def", "__init__", "(", "self", ",", "\n", "in_features", "=", "784", ",", "\n", "layer_features1", "=", "1024", ",", "\n", "layer_features2", "=", "1024", ",", "\n", "out_features", "=", "10", ",", "\n", "epochs_per_layer", "=", "100", ",", "all_binary", "=", "False", ",", "layers_json", "=", "None", ")", ":", "\n", "        ", "super", "(", "Mlp3Binary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryLinear", "(", "in_features", ",", "layer_features1", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "layer_features1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryLinear", "(", "layer_features1", ",", "layer_features2", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "layer_features2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryLinear", "(", "layer_features2", ",", "out_features", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "out_features", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "self", ".", "layer_init", "(", "epochs_per_layer", "=", "epochs_per_layer", ",", "\n", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.mlp3.Mlp3Binary.forward": [[103, 107], ["mlp3.Mlp3Binary.view", "mlp3.Mlp3Binary.features", "mlp3.Mlp3Binary.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "view", "(", "-", "1", ",", "self", ".", "in_features", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "self", ".", "classifier", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.BasicBlock.__init__": [[45, 71], ["torch.Module.__init__", "resnet_imagenet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet_imagenet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "'BasicBlock only supports groups=1 and base_width=64'", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.BasicBlock.forward": [[72, 89], ["resnet_imagenet.BasicBlock.conv1", "resnet_imagenet.BasicBlock.bn1", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.conv2", "resnet_imagenet.BasicBlock.bn2", "resnet_imagenet.BasicBlock.relu", "resnet_imagenet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.Bottleneck.__init__": [[100, 125], ["torch.Module.__init__", "resnet_imagenet.conv1x1", "norm_layer", "resnet_imagenet.conv3x3", "norm_layer", "resnet_imagenet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ":", "int", ",", "\n", "planes", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "\n", "downsample", ":", "Optional", "[", "nn", ".", "Module", "]", "=", "None", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "base_width", ":", "int", "=", "64", ",", "\n", "dilation", ":", "int", "=", "1", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.Bottleneck.forward": [[126, 147], ["resnet_imagenet.Bottleneck.conv1", "resnet_imagenet.Bottleneck.bn1", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv2", "resnet_imagenet.Bottleneck.bn2", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.conv3", "resnet_imagenet.Bottleneck.bn3", "resnet_imagenet.Bottleneck.relu", "resnet_imagenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet.__init__": [[151, 209], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "resnet_imagenet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "resnet_imagenet.ResNet.modules", "len", "ValueError", "isinstance", "resnet_imagenet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "num_classes", ":", "int", "=", "1000", ",", "\n", "zero_init_residual", ":", "bool", "=", "False", ",", "\n", "groups", ":", "int", "=", "1", ",", "\n", "width_per_group", ":", "int", "=", "64", ",", "\n", "replace_stride_with_dilation", ":", "Optional", "[", "List", "[", "bool", "]", "]", "=", "None", ",", "\n", "norm_layer", ":", "Optional", "[", "Callable", "[", "...", ",", "nn", ".", "Module", "]", "]", "=", "None", "\n", ")", "->", "None", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "\n", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "# type: ignore[arg-type]", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet._make_layer": [[210, 234], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet_imagenet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "planes", ":", "int", ",", "blocks", ":", "int", ",", "\n", "stride", ":", "int", "=", "1", ",", "dilate", ":", "bool", "=", "False", ")", "->", "nn", ".", "Sequential", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "previous_dilation", ",", "norm_layer", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet._forward_impl": [[235, 252], ["resnet_imagenet.ResNet.conv1", "resnet_imagenet.ResNet.bn1", "resnet_imagenet.ResNet.relu", "resnet_imagenet.ResNet.maxpool", "resnet_imagenet.ResNet.layer1", "resnet_imagenet.ResNet.layer2", "resnet_imagenet.ResNet.layer3", "resnet_imagenet.ResNet.layer4", "resnet_imagenet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet_imagenet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet.forward": [[253, 255], ["resnet_imagenet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv3x3": [[31, 35], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ",", "groups", ":", "int", "=", "1", ",", "dilation", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "False", ",", "dilation", "=", "dilation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.conv1x1": [[37, 40], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ":", "int", ",", "out_planes", ":", "int", ",", "stride", ":", "int", "=", "1", ")", "->", "nn", ".", "Conv2d", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet": [[257, 272], ["resnet_imagenet.ResNet", "ValueError", "load_state_dict_from_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "\n", "arch", ":", "str", ",", "\n", "block", ":", "Type", "[", "Union", "[", "BasicBlock", ",", "Bottleneck", "]", "]", ",", "\n", "layers", ":", "List", "[", "int", "]", ",", "\n", "pretrained", ":", "bool", ",", "\n", "progress", ":", "bool", ",", "\n", "**", "kwargs", ":", "Any", "\n", ")", "->", "ResNet", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "ValueError", "(", "\"Pretrain unsupported\"", ")", "\n", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "\n", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet18": [[274, 284], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet18", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet18'", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet34": [[286, 296], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet34", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet34'", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet50": [[298, 308], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet50", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet50'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet101": [[310, 320], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet101", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet101'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnet152": [[322, 332], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnet152", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "'resnet152'", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "\n", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnext50_32x4d": [[334, 346], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "4", "\n", "return", "_resnet", "(", "'resnext50_32x4d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.resnext101_32x8d": [[348, 360], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'groups'", "]", "=", "32", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "8", "\n", "return", "_resnet", "(", "'resnext101_32x8d'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.wide_resnet50_2": [[362, 378], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_.\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet50_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet.wide_resnet101_2": [[380, 396], ["resnet_imagenet._resnet"], "function", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_imagenet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", ":", "bool", "=", "False", ",", "progress", ":", "bool", "=", "True", ",", "**", "kwargs", ":", "Any", ")", "->", "ResNet", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_.\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "'width_per_group'", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "'wide_resnet101_2'", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "\n", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg5binary.Vgg5Binary.__init__": [[37, 64], ["super().__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "vgg5binary.Vgg5Binary.layer_init", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryConv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "binary_control.ControlBinaryLinear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet_control.ResNet.layer_init"], ["def", "__init__", "(", "self", ",", "\n", "block1_ch", "=", "64", ",", "fc_units", "=", "256", ",", "n_classes", "=", "10", ",", "\n", "epochs_per_layer", "=", "100", ",", "all_binary", "=", "False", ",", "layers_json", "=", "None", ")", ":", "\n", "        ", "super", "(", "Vgg5Binary", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryConv2d", "(", "3", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryConv2d", "(", "block1_ch", ",", "block1_ch", ",", "\n", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "ControlBinaryLinear", "(", "16384", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryLinear", "(", "fc_units", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "ControlBinaryLinear", "(", "fc_units", ",", "n_classes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_classes", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "self", ".", "layer_init", "(", "epochs_per_layer", "=", "epochs_per_layer", ",", "all_binary", "=", "all_binary", ",", "layers_json", "=", "layers_json", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg5binary.Vgg5Binary.forward": [[65, 70], ["vgg5binary.Vgg5Binary.features", "vgg5binary.Vgg5Binary.view", "vgg5binary.Vgg5Binary.classifier", "vgg5binary.Vgg5Binary.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.LambdaLayer.__init__": [[37, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.LambdaLayer.forward": [[41, 43], ["resnet.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.BasicBlock.__init__": [[48, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.BasicBlock.forward": [[69, 75], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet.__init__": [[78, 90], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "resnet.ResNet.apply"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet._make_layer": [[91, 99], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.ResNet.forward": [[100, 109], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1", "resnet.ResNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet._weights_init": [[30, 35], ["isinstance", "isinstance", "m.reset_parameters"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "#classname = m.__class__.__name__", "\n", "#print(classname)", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "m", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet20": [[111, 113], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet32": [[115, 117], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet32", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet44": [[119, 121], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet56": [[123, 125], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet110": [[127, 129], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.resnet1202": [[131, 133], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.resnet.test": [[135, 143], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["None"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.binarize_weight_": [[15, 24], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "binary_control.BinaryController.weight.clone", "binary_control.BinaryController.weight.clone", "binary_control.BinaryController.weight.sign_"], "methods", ["None"], ["def", "binarize_weight_", "(", "self", ")", ":", "\n", "    ", "\"\"\"Binarize weights\n    Weights are modified in-place.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "weight_orig", "=", "self", ".", "weight", ".", "clone", "(", ")", "\n", "if", "self", ".", "binarize_", ":", "\n", "        ", "self", ".", "weight", ".", "sign_", "(", ")", "\n", "", "self", ".", "weight_binary", "=", "self", ".", "weight", ".", "clone", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_full_precision_": [[25, 30], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "binary_control.BinaryController.weight.copy_"], "methods", ["None"], ["", "", "def", "restore_full_precision_", "(", "self", ")", ":", "\n", "    ", "\"\"\"Restore full-precision parameters (weights and bias) for parameter update.\n    \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "weight", ".", "copy_", "(", "self", ".", "weight_orig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_binary_weight_": [[31, 34], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "binary_control.BinaryController.weight.copy_"], "methods", ["None"], ["", "", "def", "restore_binary_weight_", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "self", ".", "weight", ".", "copy_", "(", "self", ".", "weight_binary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController._report_weight_stats": [[35, 46], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "binary_control.BinaryController.weight.max", "binary_control.BinaryController.weight.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.eq", "torch.eq", "torch.eq", "torch.eq", "binary_control.BinaryController.weight.nelement"], "methods", ["None"], ["", "", "def", "_report_weight_stats", "(", "self", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "      ", "maximum", "=", "self", ".", "weight", ".", "max", "(", ")", "\n", "minimum", "=", "self", ".", "weight", ".", "min", "(", ")", "\n", "num_zeros", "=", "torch", ".", "sum", "(", "torch", ".", "eq", "(", "self", ".", "weight", ",", "0.0", ")", ")", "\n", "if", "self", ".", "binarize_", ":", "\n", "        ", "num_binary", "=", "self", ".", "weight", ".", "nelement", "(", ")", "\n", "", "else", ":", "\n", "        ", "num_binary", "=", "0", "\n", "#print(\"max {} min {} zeros {}\".format(maximum, minimum, num_zeros))", "\n", "", "return", "maximum", ",", "minimum", ",", "num_zeros", ",", "num_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.clip_weights_": [[47, 49], ["None"], "methods", ["None"], ["", "", "def", "clip_weights_", "(", "self", ",", "low", "=", "-", "1.0", ",", "high", "=", "1.0", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.ControlBinaryLinear.__init__": [[55, 58], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["  ", "def", "__init__", "(", "self", ",", "*", "kargs", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ControlBinaryLinear", ",", "self", ")", ".", "__init__", "(", "*", "kargs", ",", "**", "kwargs", ")", "\n", "self", ".", "binarize_", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.ControlBinaryLinear.forward": [[59, 63], ["binary_control.ControlBinaryLinear.binarize_weight_", "torch.linear", "torch.linear"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.binarize_weight_"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "self", ".", "binarize_weight_", "(", ")", "\n", "out", "=", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.ControlBinaryConv2d.__init__": [[67, 70], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["  ", "def", "__init__", "(", "self", ",", "*", "kargs", ",", "**", "kwargs", ")", ":", "\n", "    ", "super", "(", "ControlBinaryConv2d", ",", "self", ")", ".", "__init__", "(", "*", "kargs", ",", "**", "kwargs", ")", "\n", "self", ".", "binarize_", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.ControlBinaryConv2d.forward": [[71, 77], ["binary_control.ControlBinaryConv2d.binarize_weight_", "torch.conv2d", "torch.conv2d"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.binarize_weight_"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "    ", "self", ".", "binarize_weight_", "(", ")", "\n", "out", "=", "F", ".", "conv2d", "(", "\n", "input", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "stride", ",", "\n", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.binarizable_layers": [[79, 88], ["enumerate", "model.modules", "isinstance", "isinstance", "ret.append", "print"], "function", ["None"], ["", "", "def", "binarizable_layers", "(", "model", ":", "nn", ".", "Module", ")", "->", "list", ":", "\n", "  ", "\"\"\"Return indices of binarizable layers\n  \"\"\"", "\n", "ret", "=", "[", "]", "\n", "for", "idx", ",", "m", "in", "enumerate", "(", "model", ".", "modules", "(", ")", ")", ":", "\n", "    ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "      ", "ret", ".", "append", "(", "idx", ")", "\n", "print", "(", "idx", ",", "m", ")", "\n", "", "", "return", "ret", "\n", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layerbinaryhelper.LayerBinaryHelper.restore_full_precision": [[5, 10], ["enumerate", "layerbinaryhelper.LayerBinaryHelper.modules", "hasattr", "m.restore_full_precision_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_full_precision_"], ["def", "restore_full_precision", "(", "self", ")", ":", "\n", "    ", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'restore_full_precision_'", ")", ":", "\n", "        ", "m", ".", "restore_full_precision_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layerbinaryhelper.LayerBinaryHelper.restore_binary_weight": [[11, 16], ["enumerate", "layerbinaryhelper.LayerBinaryHelper.modules", "hasattr", "m.restore_binary_weight_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_binary_weight_"], ["", "", "", "def", "restore_binary_weight", "(", "self", ")", ":", "\n", "    ", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'restore_binary_weight_'", ")", ":", "\n", "        ", "m", ".", "restore_binary_weight_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layerbinaryhelper.LayerBinaryHelper.report_weight_stats": [[17, 33], ["enumerate", "layerbinaryhelper.LayerBinaryHelper.modules", "hasattr", "m._report_weight_stats"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController._report_weight_stats"], ["", "", "", "def", "report_weight_stats", "(", "self", ")", ":", "\n", "    ", "maximum", "=", "0.0", "\n", "minimum", "=", "0.0", "\n", "num_zeros", "=", "0", "\n", "num_binary", "=", "0", "\n", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'_report_weight_stats'", ")", ":", "\n", "        ", "max_now", ",", "min_now", ",", "zeros_now", ",", "binary_now", "=", "m", ".", "_report_weight_stats", "(", ")", "\n", "if", "max_now", ">", "maximum", ":", "\n", "          ", "maximum", "=", "max_now", "\n", "", "if", "min_now", "<", "minimum", ":", "\n", "          ", "minimum", "=", "min_now", "\n", "", "num_zeros", "+=", "zeros_now", "\n", "num_binary", "+=", "binary_now", "\n", "", "", "return", "maximum", ",", "minimum", ",", "num_zeros", ",", "num_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.layerbinaryhelper.LayerBinaryHelper.clip_weights": [[34, 36], ["None"], "methods", ["None"], ["", "def", "clip_weights", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__": [[28, 67], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.__init__"], ["def", "__init__", "(", "self", ",", "block1_ch", "=", "64", ",", "block2_ch", "=", "128", ",", "block3_ch", "=", "256", ",", "fc_units", "=", "256", ",", "n_classes", "=", "10", ")", ":", "\n", "    ", "super", "(", "Vgg9", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block1_ch", ",", "block1_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block1_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "block1_ch", ",", "block2_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block2_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block2_ch", ",", "block2_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block2_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "block2_ch", ",", "block3_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block3_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "block3_ch", ",", "block3_ch", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "block3_ch", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "4", "*", "4", "*", "block3_ch", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "fc_units", ",", "fc_units", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "fc_units", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "fc_units", ",", "n_classes", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "n_classes", ")", ",", "\n", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "criterion", "=", "F", ".", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.vgg9.Vgg9.forward": [[68, 73], ["vgg9.Vgg9.features", "vgg9.Vgg9.view", "vgg9.Vgg9.classifier", "vgg9.Vgg9.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "    ", "out", "=", "self", ".", "features", "(", "x", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "classifier", "(", "out", ")", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.restore_full_precision": [[14, 19], ["enumerate", "networkbinarization.NetworkBinarization.modules", "hasattr", "m.restore_full_precision_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_full_precision_"], ["def", "restore_full_precision", "(", "self", ")", ":", "\n", "    ", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'restore_full_precision_'", ")", ":", "\n", "        ", "m", ".", "restore_full_precision_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.restore_binary_weight": [[20, 25], ["enumerate", "networkbinarization.NetworkBinarization.modules", "hasattr", "m.restore_binary_weight_"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController.restore_binary_weight_"], ["", "", "", "def", "restore_binary_weight", "(", "self", ")", ":", "\n", "    ", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'restore_binary_weight_'", ")", ":", "\n", "        ", "m", ".", "restore_binary_weight_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.clip_weights": [[26, 28], ["None"], "methods", ["None"], ["", "", "", "def", "clip_weights", "(", "self", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.rakutentech_iterative_training.models.networkbinarization.NetworkBinarization.report_weight_stats": [[29, 45], ["enumerate", "networkbinarization.NetworkBinarization.modules", "hasattr", "m._report_weight_stats"], "methods", ["home.repos.pwc.inspect_result.rakutentech_iterative_training.models.binary_control.BinaryController._report_weight_stats"], ["", "def", "report_weight_stats", "(", "self", ")", ":", "\n", "    ", "maximum", "=", "0.0", "\n", "minimum", "=", "0.0", "\n", "num_zeros", "=", "0", "\n", "num_binary", "=", "0", "\n", "for", "_", ",", "m", "in", "enumerate", "(", "self", ".", "modules", "(", ")", ")", ":", "\n", "#print(idx, '->', m)", "\n", "      ", "if", "hasattr", "(", "m", ",", "'_report_weight_stats'", ")", ":", "\n", "        ", "max_now", ",", "min_now", ",", "zeros_now", ",", "binary_now", "=", "m", ".", "_report_weight_stats", "(", ")", "\n", "if", "max_now", ">", "maximum", ":", "\n", "          ", "maximum", "=", "max_now", "\n", "", "if", "min_now", "<", "minimum", ":", "\n", "          ", "minimum", "=", "min_now", "\n", "", "num_zeros", "+=", "zeros_now", "\n", "num_binary", "+=", "binary_now", "\n", "", "", "return", "maximum", ",", "minimum", ",", "num_zeros", ",", "num_binary", "\n", "", "", ""]]}