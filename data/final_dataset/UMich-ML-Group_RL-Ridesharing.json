{"home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.__init__": [[5, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "position", ")", ":", "\n", "        ", "self", ".", "status", "=", "'idle'", "# idle, picking_up, dropping_off", "\n", "self", ".", "position", "=", "position", "\n", "self", ".", "passenger", "=", "None", "\n", "self", ".", "path", "=", "[", "]", "\n", "self", ".", "required_steps", "=", "None", "\n", "self", ".", "travel_distance", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.__repr__": [[13, 21], ["str", "str", "str", "id", "str", "str", "id", "type"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "message", "=", "'cls:'", "+", "type", "(", "self", ")", ".", "__name__", "+", "', id:'", "+", "str", "(", "id", "(", "self", ")", ")", "+", "', status: '", "+", "self", ".", "status", "+", "', required_steps:'", "+", "str", "(", "self", ".", "required_steps", ")", "+", "', position:'", "+", "str", "(", "self", ".", "position", ")", "+", "', path:'", "+", "str", "(", "self", ".", "path", ")", "\n", "if", "self", ".", "passenger", ":", "\n", "            ", "message", "+=", "', passenger: '", "+", "str", "(", "id", "(", "self", ".", "passenger", ")", ")", "\n", "", "else", ":", "\n", "            ", "message", "+=", "', passenger: None'", "\n", "", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.pair_passenger": [[22, 26], ["None"], "methods", ["None"], ["", "def", "pair_passenger", "(", "self", ",", "passenger", ")", ":", "\n", "        ", "self", ".", "passenger", "=", "passenger", "\n", "self", ".", "passenger", ".", "status", "=", "'wait_pick'", "\n", "self", ".", "status", "=", "'picking_up'", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.pick_passenger": [[27, 30], ["None"], "methods", ["None"], ["", "def", "pick_passenger", "(", "self", ")", ":", "\n", "        ", "self", ".", "passenger", ".", "status", "=", "'picked_up'", "\n", "self", ".", "status", "=", "'dropping_off'", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.drop_passenger": [[31, 35], ["None"], "methods", ["None"], ["", "def", "drop_passenger", "(", "self", ")", ":", "\n", "        ", "self", ".", "passenger", ".", "status", "=", "'dropped'", "\n", "self", ".", "passenger", "=", "None", "\n", "self", ".", "status", "=", "'idle'", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.assign_path": [[36, 38], ["None"], "methods", ["None"], ["", "def", "assign_path", "(", "self", ",", "path1", ",", "path2", ")", ":", "\n", "        ", "self", ".", "path", "=", "(", "path1", "+", "path2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.move": [[39, 43], ["car.Car.path.pop"], "methods", ["None"], ["", "def", "move", "(", "self", ")", ":", "# call by environment step", "\n", "        ", "assert", "self", ".", "status", "!=", "'idle'", ",", "\"shouldn't move\"", "\n", "self", ".", "position", "=", "self", ".", "path", ".", "pop", "(", "0", ")", "\n", "self", ".", "travel_distance", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ")", ":", "\n", "        ", "self", ".", "capacity", "=", "capacity", "\n", "self", ".", "memory", "=", "[", "]", "\n", "self", ".", "position", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.push": [[20, 26], ["Transition", "len", "dqn.ReplayMemory.memory.append"], "methods", ["None"], ["", "def", "push", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "\"\"\"Saves a transition.\"\"\"", "\n", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "capacity", ":", "\n", "            ", "self", ".", "memory", ".", "append", "(", "None", ")", "\n", "", "self", ".", "memory", "[", "self", ".", "position", "]", "=", "Transition", "(", "*", "args", ")", "\n", "self", ".", "position", "=", "(", "self", ".", "position", "+", "1", ")", "%", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.sample": [[27, 29], ["random.sample"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.sample"], ["", "def", "sample", "(", "self", ",", "batch_size", ")", ":", "\n", "        ", "return", "random", ".", "sample", "(", "self", ".", "memory", ",", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "memory", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.DQN.__init__": [[36, 41], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ",", "outputs", ",", "hidden", ")", ":", "\n", "        ", "super", "(", "DQN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "inputs", ",", "hidden", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "hidden", ",", "outputs", ")", "\n", "#self.bn2 = nn.BatchNorm1d(output)", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.DQN.forward": [[43, 48], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "dqn.DQN.fc2", "dqn.DQN.fc1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# TODO implement train", "\n", "        ", "x2", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "out", "=", "self", ".", "fc2", "(", "x2", ")", "\n", "return", "out", "", "", "", ""]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.__init__": [[10, 22], ["random.seed", "gridmap.GridMap.add_passenger", "gridmap.GridMap.add_cars", "gridmap.GridMap.init_map_cost"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_cars", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.init_map_cost"], ["    ", "def", "__init__", "(", "self", ",", "seed", ",", "size", ",", "num_cars", ",", "num_passengers", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "size", "=", "size", "#(row, col)", "\n", "self", ".", "num_cars", "=", "num_cars", "\n", "self", ".", "num_passengers", "=", "num_passengers", "\n", "self", ".", "map_cost", "=", "{", "}", "\n", "self", ".", "cars", "=", "[", "]", "\n", "self", ".", "passengers", "=", "[", "]", "\n", "self", ".", "add_passenger", "(", "num_passengers", ")", "\n", "self", ".", "add_cars", "(", "num_cars", ")", "\n", "self", ".", "init_map_cost", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.__repr__": [[23, 31], ["str", "repr", "repr", "str", "type"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "message", "=", "'cls:'", "+", "type", "(", "self", ")", ".", "__name__", "+", "', size:'", "+", "str", "(", "self", ".", "size", ")", "+", "', seed:'", "+", "str", "(", "self", ".", "seed", ")", "+", "'\\n'", "\n", "for", "c", "in", "self", ".", "cars", ":", "\n", "            ", "message", "+=", "repr", "(", "c", ")", "+", "'\\n'", "\n", "", "for", "p", "in", "self", ".", "passengers", ":", "\n", "            ", "message", "+=", "repr", "(", "p", ")", "+", "'\\n'", "\n", "", "return", "message", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid": [[32, 36], ["None"], "methods", ["None"], ["", "def", "is_valid", "(", "self", ",", "p1", ")", ":", "\n", "        ", "if", "p1", "[", "0", "]", "<", "0", "or", "p1", "[", "1", "]", "<", "0", "or", "p1", "[", "0", "]", ">", "self", ".", "size", "[", "0", "]", "or", "p1", "[", "1", "]", ">", "self", ".", "size", "[", "1", "]", ":", "\n", "            ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_adjacent": [[37, 45], ["abs", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "is_adjacent", "(", "self", ",", "p1", ",", "p2", ")", ":", "\n", "        ", "assert", "p1", "[", "0", "]", "<", "0", "or", "p2", "[", "0", "]", "<", "0", "or", "p1", "[", "1", "]", "<", "0", "or", "p2", "[", "1", "]", "<", "0", ",", "\"map point is out of boundary\"", "\n", "assert", "p1", "[", "0", "]", ">", "self", ".", "size", "[", "0", "]", "or", "p2", "[", "0", "]", ">", "self", ".", "size", "[", "0", "]", "or", "p1", "[", "1", "]", ">", "self", ".", "size", "[", "1", "]", "or", "p2", "[", "1", "]", ">", "self", ".", "size", "[", "1", "]", ",", "\"map point is out of boundary\"", "\n", "\n", "if", "(", "abs", "(", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", ")", "==", "1", "and", "abs", "(", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", ")", "==", "0", ")", "or", "(", "abs", "(", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", ")", "==", "0", "and", "abs", "(", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", ")", "==", "1", ")", ":", "\n", "          ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.init_map_cost": [[46, 59], ["range", "range", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid", "random.randint", "random.randint", "random.randint", "random.randint"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid"], ["", "", "def", "init_map_cost", "(", "self", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "self", ".", "size", "[", "0", "]", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "self", ".", "size", "[", "1", "]", ")", ":", "\n", "                ", "p", "=", "(", "row", ",", "col", ")", "\n", "# for up", "\n", "p_up", "=", "(", "row", "-", "1", ",", "col", ")", "\n", "if", "self", ".", "is_valid", "(", "p_up", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_up", ")", "]", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "p_right", "=", "(", "row", ",", "col", "+", "1", ")", "\n", "if", "self", ".", "is_valid", "(", "p_right", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_right", ")", "]", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "p_down", "=", "(", "row", "+", "1", ",", "col", ")", "\n", "if", "self", ".", "is_valid", "(", "p_down", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_down", ")", "]", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "p_left", "=", "(", "row", ",", "col", "-", "1", ")", "\n", "if", "self", ".", "is_valid", "(", "p_left", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_left", ")", "]", "=", "random", ".", "randint", "(", "0", ",", "9", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.init_zero_map_cost": [[60, 73], ["range", "range", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid", "gridmap.GridMap.is_valid"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid"], ["", "", "", "def", "init_zero_map_cost", "(", "self", ")", ":", "\n", "        ", "for", "row", "in", "range", "(", "self", ".", "size", "[", "0", "]", ")", ":", "\n", "            ", "for", "col", "in", "range", "(", "self", ".", "size", "[", "1", "]", ")", ":", "\n", "                ", "p", "=", "(", "row", ",", "col", ")", "\n", "# for up", "\n", "p_up", "=", "(", "row", "-", "1", ",", "col", ")", "\n", "if", "self", ".", "is_valid", "(", "p_up", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_up", ")", "]", "=", "0", "\n", "p_right", "=", "(", "row", ",", "col", "+", "1", ")", "\n", "if", "self", ".", "is_valid", "(", "p_right", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_right", ")", "]", "=", "0", "\n", "p_down", "=", "(", "row", "+", "1", ",", "col", ")", "\n", "if", "self", ".", "is_valid", "(", "p_down", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_down", ")", "]", "=", "0", "\n", "p_left", "=", "(", "row", ",", "col", "-", "1", ")", "\n", "if", "self", ".", "is_valid", "(", "p_left", ")", ":", "self", ".", "map_cost", "[", "(", "p", ",", "p_left", ")", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_cars": [[75, 87], ["set", "gridmap.GridMap.cars.append", "len", "random.randint", "random.randint", "set.add", "car.Car"], "methods", ["None"], ["", "", "", "def", "add_cars", "(", "self", ",", "num_cars", ")", ":", "\n", "        ", "assert", "num_cars", "<=", "self", ".", "size", "[", "0", "]", "*", "self", ".", "size", "[", "1", "]", ",", "'number of cars is larger than number of grids'", "\n", "car_set", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "if", "len", "(", "car_set", ")", "==", "num_cars", ":", "\n", "                ", "break", "\n", "", "p", "=", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "1", ")", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "1", "]", "-", "1", ")", ")", "\n", "if", "p", "not", "in", "car_set", ":", "\n", "                ", "car_set", ".", "add", "(", "p", ")", "\n", "\n", "", "", "for", "s", "in", "car_set", ":", "\n", "            ", "self", ".", "cars", ".", "append", "(", "Car", "(", "s", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_passenger": [[88, 105], ["set", "gridmap.GridMap.passengers.append", "len", "random.randint", "random.randint", "set.add", "passenger.Passenger", "random.randint", "random.randint"], "methods", ["None"], ["", "", "def", "add_passenger", "(", "self", ",", "num_passengers", ")", ":", "\n", "        ", "assert", "num_passengers", "<=", "self", ".", "size", "[", "0", "]", "*", "self", ".", "size", "[", "1", "]", ",", "'number of passengers is larger than number of grids'", "\n", "passenger_set", "=", "set", "(", ")", "\n", "while", "True", ":", "\n", "            ", "if", "len", "(", "passenger_set", ")", "==", "num_passengers", ":", "\n", "                ", "break", "\n", "", "p", "=", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "1", ")", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "1", "]", "-", "1", ")", ")", "\n", "if", "p", "not", "in", "passenger_set", ":", "\n", "                ", "passenger_set", ".", "add", "(", "p", ")", "\n", "\n", "", "", "for", "s", "in", "passenger_set", ":", "\n", "# generate destination point", "\n", "            ", "while", "True", ":", "\n", "                ", "d", "=", "(", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "0", "]", "-", "1", ")", ",", "random", ".", "randint", "(", "0", ",", "self", ".", "size", "[", "1", "]", "-", "1", ")", ")", "\n", "if", "d", "!=", "s", ":", "\n", "                    ", "break", "\n", "", "", "self", ".", "passengers", ".", "append", "(", "Passenger", "(", "s", ",", "d", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.plan_path": [[106, 131], ["gridmap.GridMap.is_valid", "gridmap.GridMap.plan_path.check_optim"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.is_valid"], ["", "", "def", "plan_path", "(", "self", ",", "start_point", ",", "end_point", ")", ":", "\n", "        ", "def", "check_optim", "(", "next_pos", ",", "min_dist", ",", "optim_next_pos", ")", ":", "\n", "            ", "if", "self", ".", "is_valid", "(", "next_pos", ")", ":", "\n", "                ", "dist", "=", "Util", ".", "cal_dist", "(", "next_pos", ",", "end_point", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                    ", "min_dist", "=", "dist", "\n", "optim_next_pos", "=", "next_pos", "\n", "", "", "return", "min_dist", ",", "optim_next_pos", "\n", "", "path", "=", "[", "]", "\n", "curr_pos", "=", "start_point", "\n", "while", "curr_pos", "!=", "end_point", ":", "\n", "            ", "min_dist", "=", "math", ".", "inf", "\n", "optim_next_pos", "=", "None", "\n", "# up", "\n", "min_dist", ",", "optim_next_pos", "=", "check_optim", "(", "(", "curr_pos", "[", "0", "]", "-", "1", ",", "curr_pos", "[", "1", "]", ")", ",", "min_dist", ",", "optim_next_pos", ")", "\n", "# down", "\n", "min_dist", ",", "optim_next_pos", "=", "check_optim", "(", "(", "curr_pos", "[", "0", "]", "+", "1", ",", "curr_pos", "[", "1", "]", ")", ",", "min_dist", ",", "optim_next_pos", ")", "\n", "# left", "\n", "min_dist", ",", "optim_next_pos", "=", "check_optim", "(", "(", "curr_pos", "[", "0", "]", ",", "curr_pos", "[", "1", "]", "-", "1", ")", ",", "min_dist", ",", "optim_next_pos", ")", "\n", "# right", "\n", "min_dist", ",", "optim_next_pos", "=", "check_optim", "(", "(", "curr_pos", "[", "0", "]", ",", "curr_pos", "[", "1", "]", "+", "1", ")", ",", "min_dist", ",", "optim_next_pos", ")", "\n", "assert", "optim_next_pos", "is", "not", "None", ",", "'no valid position for optim_next_pos'", "\n", "path", ".", "append", "(", "optim_next_pos", ")", "\n", "curr_pos", "=", "optim_next_pos", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.visualize": [[132, 151], ["range", "len", "print", "range", "range", "str", "str", "str", "id", "str", "id", "str", "id"], "methods", ["None"], ["", "def", "visualize", "(", "self", ")", ":", "\n", "        ", "m", "=", "[", "[", "\"     \"", "for", "i", "in", "range", "(", "self", ".", "size", "[", "1", "]", ")", "]", "for", "j", "in", "range", "(", "self", ".", "size", "[", "0", "]", ")", "]", "\n", "for", "p", "in", "self", ".", "passengers", ":", "\n", "            ", "if", "p", ".", "status", "==", "'wait_pair'", "or", "p", ".", "status", "==", "'wait_pick'", ":", "\n", "# passenger", "\n", "                ", "m", "[", "p", ".", "pick_up_point", "[", "0", "]", "]", "[", "p", ".", "pick_up_point", "[", "1", "]", "]", "=", "\"p\"", "+", "str", "(", "id", "(", "p", ")", ")", "[", "-", "2", ":", "]", "+", "\"  \"", "\n", "", "", "for", "c", "in", "self", ".", "cars", ":", "\n", "            ", "if", "c", ".", "status", "==", "'dropping_off'", ":", "\n", "# car with passenger", "\n", "                ", "m", "[", "c", ".", "position", "[", "0", "]", "]", "[", "c", ".", "position", "[", "1", "]", "]", "=", "\"x\"", "+", "str", "(", "id", "(", "c", ".", "passenger", ")", ")", "[", "-", "2", ":", "]", "+", "\":\"", "+", "str", "(", "c", ".", "required_steps", ")", "[", "0", "]", "\n", "", "elif", "c", ".", "status", "==", "'picking_up'", ":", "\n", "# car assigned passenger", "\n", "                ", "m", "[", "c", ".", "position", "[", "0", "]", "]", "[", "c", ".", "position", "[", "1", "]", "]", "=", "\"c\"", "+", "str", "(", "id", "(", "c", ".", "passenger", ")", ")", "[", "-", "2", ":", "]", "+", "\":\"", "+", "str", "(", "c", ".", "required_steps", ")", "[", "0", "]", "\n", "", "else", ":", "\n", "# car is idle", "\n", "                ", "m", "[", "c", ".", "position", "[", "0", "]", "]", "[", "c", ".", "position", "[", "1", "]", "]", "=", "\"c--  \"", "\n", "\n", "", "", "for", "i", "in", "range", "(", "len", "(", "m", ")", ")", ":", "\n", "          ", "print", "(", "m", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.main.main": [[8, 26], ["gridmap.GridMap", "environment.Environment", "IPython.display.clear_output", "gridmap.GridMap.visualize", "print", "environment.Environment.step", "time.sleep", "print"], "function", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.visualize", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step"], ["def", "main", "(", ")", ":", "\n", "    ", "grid_map", "=", "GridMap", "(", "1", ",", "(", "7", ",", "7", ")", ",", "3", ",", "4", ")", "\n", "env", "=", "Environment", "(", "grid_map", ")", "\n", "step_count", "=", "0", "\n", "while", "True", ":", "\n", "        ", "finished", "=", "True", "\n", "for", "p", "in", "grid_map", ".", "passengers", ":", "\n", "            ", "if", "p", ".", "status", "!=", "'dropped'", ":", "\n", "              ", "finished", "=", "False", "\n", "", "", "clear_output", "(", ")", "\n", "grid_map", ".", "visualize", "(", ")", "\n", "print", "(", "'-'", "*", "10", ")", "\n", "env", ".", "step", "(", ")", "\n", "step_count", "+=", "1", "\n", "time", ".", "sleep", "(", "1", ")", "\n", "if", "finished", ":", "\n", "            ", "print", "(", "'step cost:'", ",", "step_count", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.passenger.Passenger.__init__": [[3, 8], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "pick_up_point", ",", "drop_off_point", ")", ":", "\n", "        ", "self", ".", "status", "=", "'wait_pair'", "# wait_pair, wait_pick, picked_up, 'dropped'", "\n", "self", ".", "pick_up_point", "=", "pick_up_point", "\n", "self", ".", "drop_off_point", "=", "drop_off_point", "\n", "self", ".", "waiting_steps", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.passenger.Passenger.__repr__": [[9, 12], ["str", "str", "str", "id", "type"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'cls:'", "+", "type", "(", "self", ")", ".", "__name__", "+", "', id:'", "+", "str", "(", "id", "(", "self", ")", ")", "+", "', status: '", "+", "self", ".", "status", "+", "', pick_up_point:'", "+", "str", "(", "self", ".", "pick_up_point", ")", "+", "', drop_off_point:'", "+", "str", "(", "self", ".", "drop_off_point", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.__init__": [[24, 85], ["copy.deepcopy", "len", "len", "algorithm.PairAlgorithm", "numpy.zeros", "numpy.zeros", "dqn.ReplayMemory", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "dqn.DQN().to", "list", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "agent_variable.Agent.policy_net.parameters", "q_mixer.QMixer().to", "list", "agent_variable.Agent.policy_net.load_state_dict", "agent_variable.Agent.policy_net.eval", "print", "dqn.DQN", "agent_variable.Agent.mixer.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "agent_variable.Agent.mixer.load_state_dict", "agent_variable.Agent.mixer.eval", "q_mixer.QMixer", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "max_cars", "=", "10", ",", "max_passengers", "=", "10", ",", "\n", "mix_hidden", "=", "32", ",", "batch_size", "=", "128", ",", "lr", "=", "0.001", ",", "gamma", "=", ".999", ",", "eps_start", "=", "0.9", ",", "\n", "eps_end", "=", "0.05", ",", "eps_decay", "=", "750", ",", "replay_capacity", "=", "10000", ",", "num_save", "=", "200", ",", "num_episodes", "=", "10000", ",", "\n", "mode", "=", "\"random\"", ",", "training", "=", "False", ",", "load_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "orig_env", "=", "copy", ".", "deepcopy", "(", "env", ")", "\n", "self", ".", "grid_map", "=", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "num_cars", "=", "len", "(", "self", ".", "cars", ")", "\n", "self", ".", "passengers", "=", "env", ".", "grid_map", ".", "passengers", "\n", "self", ".", "num_passengers", "=", "len", "(", "self", ".", "passengers", ")", "\n", "self", ".", "max_cars", "=", "max_cars", "\n", "self", ".", "max_passengers", "=", "max_passengers", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "eps_start", "=", "eps_start", "\n", "self", ".", "eps_end", "=", "eps_end", "\n", "self", ".", "eps_decay", "=", "eps_decay", "\n", "self", ".", "replay_capacity", "=", "replay_capacity", "\n", "self", ".", "num_episodes", "=", "num_episodes", "\n", "self", ".", "steps_done", "=", "0", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "num_save", "=", "num_save", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "algorithm", "=", "PairAlgorithm", "(", ")", "\n", "self", ".", "episode_durations", "=", "[", "]", "\n", "self", ".", "duration_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_passengers", ",", "self", ".", "max_cars", ")", ")", "\n", "self", ".", "count_matrix", "=", "np", ".", "zeros", "(", "(", "self", ".", "max_passengers", ",", "self", ".", "max_cars", ")", ")", "\n", "self", ".", "loss_history", "=", "[", "]", "\n", "\n", "self", ".", "memory", "=", "ReplayMemory", "(", "self", ".", "replay_capacity", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "\n", "print", "(", "\"Device being used:\"", ",", "self", ".", "device", ")", "\n", "self", ".", "policy_net", "=", "DQN", "(", "self", ".", "input_size", ",", "self", ".", "output_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "policy_net", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "            ", "self", ".", "mixer", "=", "QMixer", "(", "self", ".", "input_size", ",", "self", ".", "max_passengers", ",", "mix_hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "", "if", "load_file", ":", "\n", "            ", "self", ".", "policy_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"mixer_\"", "+", "load_file", ")", ")", "\n", "self", ".", "mixer", ".", "eval", "(", ")", "\n", "", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "self", ".", "load_file", "=", "\"Pretrained_\"", "+", "load_file", "\n", "print", "(", "\"Checkpoint loaded\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "load_file", "=", "self", ".", "mode", "+", "\"_model_num_cars_\"", "+", "str", "(", "self", ".", "num_cars", ")", "+", "\"_num_passengers_\"", "+", "str", "(", "self", ".", "num_passengers", ")", "+", "\"_num_episodes_\"", "+", "str", "(", "self", ".", "num_episodes", ")", "+", "\"_hidden_size_\"", "+", "str", "(", "self", ".", "hidden_size", ")", "+", "\".pth\"", "\n", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "#self.optimizer = optim.Adam(self.params, lr=self.lr, betas=(0.9, 0.999), eps=1e-08, weight_decay=0, amsgrad=False)", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.select_action": [[90, 118], ["random.random", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "math.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "agent_variable.Agent.policy_net.eval", "[].view", "random.randrange", "[].max", "range", "agent_variable.Agent.policy_net().view", "agent_variable.Agent.policy_net"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "#Select action with epsilon greedy", "\n", "        ", "sample", "=", "random", ".", "random", "(", ")", "\n", "\n", "eps_threshold", "=", "self", ".", "eps_end", "+", "(", "self", ".", "eps_start", "-", "self", ".", "eps_end", ")", "*", "math", ".", "exp", "(", "-", "1.", "*", "self", ".", "steps_done", "/", "self", ".", "eps_decay", ")", "\n", "\n", "print", "(", "eps_threshold", ")", "\n", "\n", "self", ".", "steps_done", "+=", "1", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "eps_threshold", "=", "0.0", "\n", "\n", "", "if", "sample", ">", "eps_threshold", ":", "\n", "# Choose best action", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "action", "=", "self", ".", "policy_net", "(", "state", ")", ".", "view", "(", "self", ".", "max_passengers", ",", "self", ".", "max_cars", ")", "[", ":", ",", ":", "self", ".", "num_cars", "]", ".", "max", "(", "1", ")", "[", "1", "]", ".", "view", "(", "1", ",", "self", ".", "max_passengers", ")", "\n", "action", "[", "0", ",", "self", ".", "num_passengers", ":", "]", "=", "self", ".", "max_cars", "\n", "return", "action", "\n", "\n", "", "", "else", ":", "\n", "#Choose random action", "\n", "            ", "action", "=", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "self", ".", "num_cars", ")", "for", "car", "in", "range", "(", "self", ".", "max_passengers", ")", "]", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "action", "[", "0", ",", "self", ".", "num_passengers", ":", "]", "=", "self", ".", "max_cars", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.random_action": [[121, 123], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.randrange", "range"], "methods", ["None"], ["", "", "def", "random_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "self", ".", "num_cars", ")", "for", "car", "in", "range", "(", "self", ".", "num_passengers", ")", "]", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.get_state": [[125, 150], ["numpy.zeros", "numpy.zeros", "numpy.array", "enumerate", "numpy.array", "enumerate", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.concatenate"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "# Cars (px, py, 1=matched), Passengers(pickup_x, pickup_y, dest_x, dest_y, 1=matched)", "\n", "# Vector Size = 3*C + 5*P ", "\n", "        ", "cars", "=", "self", ".", "cars", "\n", "passengers", "=", "self", ".", "passengers", "\n", "indicator_cars_vec", "=", "np", ".", "zeros", "(", "self", ".", "max_cars", ")", "\n", "indicator_passengers_vec", "=", "np", ".", "zeros", "(", "self", ".", "max_passengers", ")", "\n", "\n", "# Encode information about cars", "\n", "cars_vec", "=", "np", ".", "array", "(", "[", "0", "]", "*", "(", "2", "*", "self", ".", "max_cars", ")", ")", "\n", "\n", "for", "i", ",", "car", "in", "enumerate", "(", "cars", ")", ":", "\n", "            ", "cars_vec", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "=", "[", "car", ".", "position", "[", "0", "]", ",", "car", ".", "position", "[", "1", "]", "]", "\n", "indicator_cars_vec", "[", "i", "]", "=", "1", "\n", "\n", "\n", "# Encode information about passengers", "\n", "", "passengers_vec", "=", "np", ".", "array", "(", "[", "0", "]", "*", "(", "4", "*", "self", ".", "max_passengers", ")", ")", "\n", "for", "i", ",", "passenger", "in", "enumerate", "(", "passengers", ")", ":", "\n", "            ", "passengers_vec", "[", "4", "*", "i", ":", "4", "*", "i", "+", "4", "]", "=", "[", "passenger", ".", "pick_up_point", "[", "0", "]", ",", "passenger", ".", "pick_up_point", "[", "1", "]", ",", "\n", "passenger", ".", "drop_off_point", "[", "0", "]", ",", "passenger", ".", "drop_off_point", "[", "1", "]", "]", "\n", "indicator_passengers_vec", "[", "i", "]", "=", "1", "\n", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "(", "cars_vec", ",", "indicator_cars_vec", ",", "passengers_vec", ",", "indicator_passengers_vec", ")", ")", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.train": [[152, 218], ["range", "print", "print", "numpy.save", "numpy.save", "print", "print", "agent_variable.Agent.reset_different_num", "agent_variable.Agent.get_state", "agent_variable.Agent.env.step", "agent_variable.Agent.episode_durations.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "agent_variable.Agent.select_action", "reward.extend", "agent_variable.Agent.memory.push", "agent_variable.Agent.optimize_model", "agent_variable.Agent.plot_durations", "agent_variable.Agent.plot_loss_history", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "agent_variable.Agent.policy_net.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "agent_variable.Agent.random_action", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "agent_variable.Agent.policy_net.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "agent_variable.Agent.mixer.state_dict", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "agent_variable.Agent.mixer.state_dict", "agent_variable.Agent.algorithm.greedy_fcfs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "str"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.reset_different_num", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.get_state", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.select_action", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.push", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.optimize_model", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_durations", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_loss_history", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.random_action", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.algorithm.PairAlgorithm.greedy_fcfs"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "duration_sum", "=", "0.0", "\n", "\n", "for", "episode", "in", "range", "(", "self", ".", "num_episodes", ")", ":", "\n", "\n", "            ", "self", ".", "reset_different_num", "(", ")", "\n", "#self.reset() ", "\n", "#self.reset_orig_env()", "\n", "\n", "state", "=", "self", ".", "get_state", "(", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"dqn\"", "or", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "state", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"random\"", ":", "\n", "                ", "action", "=", "self", ".", "random_action", "(", "[", "state", "]", ")", "\n", "\n", "", "elif", "self", ".", "mode", "==", "\"greedy\"", ":", "\n", "                ", "action", "=", "[", "self", ".", "algorithm", ".", "greedy_fcfs", "(", "self", ".", "grid_map", ")", "]", "\n", "action", "=", "torch", ".", "tensor", "(", "action", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "#print(action.size())", "\n", "#print(action[:,:self.num_passengers])", "\n", "\n", "\n", "", "reward", ",", "duration", "=", "self", ".", "env", ".", "step", "(", "action", "[", ":", ",", ":", "self", ".", "num_passengers", "]", ",", "self", ".", "mode", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"dqn\"", ":", "\n", "                ", "reward", ".", "extend", "(", "[", "0", "]", "*", "(", "self", ".", "max_passengers", "-", "self", ".", "num_passengers", ")", ")", "\n", "\n", "", "self", ".", "episode_durations", ".", "append", "(", "duration", ")", "\n", "count", "=", "self", ".", "count_matrix", "[", "self", ".", "num_passengers", "-", "1", ",", "self", ".", "num_cars", "-", "1", "]", "\n", "self", ".", "duration_matrix", "[", "self", ".", "num_passengers", "-", "1", ",", "self", ".", "num_cars", "-", "1", "]", "=", "self", ".", "duration_matrix", "[", "self", ".", "num_passengers", "-", "1", ",", "self", ".", "num_cars", "-", "1", "]", "*", "(", "count", "/", "(", "count", "+", "1", ")", ")", "+", "duration", "/", "(", "count", "+", "1", ")", "\n", "self", ".", "count_matrix", "[", "self", ".", "num_passengers", "-", "1", ",", "self", ".", "num_cars", "-", "1", "]", "+=", "1", "\n", "duration_sum", "+=", "duration", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "memory", ".", "push", "(", "state", ",", "action", ",", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "optimize_model", "(", ")", "\n", "\n", "self", ".", "plot_durations", "(", "self", ".", "mode", ")", "\n", "self", ".", "plot_loss_history", "(", "self", ".", "mode", ")", "\n", "\n", "\n", "", "if", "self", ".", "training", "and", "episode", "%", "self", ".", "num_save", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "\"episode_\"", "+", "str", "(", "episode", ")", "+", "\"_\"", "+", "self", ".", "load_file", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"mixer_episode_\"", "+", "str", "(", "episode", ")", "+", "\"_\"", "+", "self", ".", "load_file", ")", "\n", "", "print", "(", "\"Checkpoint saved\"", ")", "\n", "\n", "\n", "", "print", "(", "\"Episode: \"", ",", "episode", ")", "\n", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "self", ".", "load_file", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"mixer_\"", "+", "self", ".", "load_file", ")", "\n", "", "print", "(", "\"Checkpoint saved\"", ")", "\n", "\n", "", "print", "(", "\"Average duration was \"", ",", "duration_sum", "/", "self", ".", "num_episodes", ")", "\n", "print", "(", "\"Finished\"", ")", "\n", "np", ".", "save", "(", "\"Duration_matrix\"", ",", "self", ".", "duration_matrix", ")", "\n", "np", ".", "save", "(", "\"Count_matrix\"", ",", "self", ".", "count_matrix", ")", "\n", "print", "(", "self", ".", "duration_matrix", ")", "\n", "print", "(", "self", ".", "count_matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.reset": [[219, 225], ["agent_variable.Agent.env.reset"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "grid_map", "=", "self", ".", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "self", ".", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "passengers", "=", "self", ".", "env", ".", "grid_map", ".", "passengers", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.reset_different_num": [[226, 240], ["random.randint", "random.randint", "agent_variable.Agent.env.grid_map.add_passenger", "agent_variable.Agent.env.grid_map.add_cars"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_cars"], ["", "def", "reset_different_num", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "env", ".", "grid_map", ".", "cars", "=", "[", "]", "\n", "self", ".", "env", ".", "grid_map", ".", "passengers", "=", "[", "]", "\n", "self", ".", "env", ".", "grid_map", ".", "num_passengers", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "max_passengers", ")", "\n", "self", ".", "env", ".", "grid_map", ".", "num_cars", "=", "random", ".", "randint", "(", "1", ",", "self", ".", "max_cars", ")", "\n", "self", ".", "env", ".", "grid_map", ".", "add_passenger", "(", "self", ".", "env", ".", "grid_map", ".", "num_passengers", ")", "\n", "self", ".", "env", ".", "grid_map", ".", "add_cars", "(", "self", ".", "env", ".", "grid_map", ".", "num_cars", ")", "\n", "\n", "self", ".", "grid_map", "=", "self", ".", "env", ".", "grid_map", "\n", "self", ".", "num_passengers", "=", "self", ".", "env", ".", "grid_map", ".", "num_passengers", "\n", "self", ".", "num_cars", "=", "self", ".", "env", ".", "grid_map", ".", "num_cars", "\n", "self", ".", "cars", "=", "self", ".", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "passengers", "=", "self", ".", "env", ".", "grid_map", ".", "passengers", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.reset_orig_env": [[241, 248], ["copy.deepcopy", "agent_variable.Agent.grid_map.init_zero_map_cost"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.init_zero_map_cost"], ["", "def", "reset_orig_env", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "env", "=", "copy", ".", "deepcopy", "(", "self", ".", "orig_env", ")", "\n", "self", ".", "grid_map", "=", "self", ".", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "self", ".", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "passengers", "=", "self", ".", "env", ".", "grid_map", ".", "passengers", "\n", "self", ".", "grid_map", ".", "init_zero_map_cost", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.optimize_model": [[250, 291], ["agent_variable.Agent.memory.sample", "Transition", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "agent_variable.Agent.policy_net.train", "agent_variable.Agent.policy_net().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.gather().squeeze", "torch.cat.gather().squeeze", "torch.cat.gather().squeeze", "torch.cat.gather().squeeze", "agent_variable.Agent.loss_history.append", "agent_variable.Agent.optimizer.zero_grad", "torch.smooth_l1_loss.backward", "agent_variable.Agent.policy_net.parameters", "agent_variable.Agent.optimizer.step", "len", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss.item", "param.grad.data.clamp_", "zip", "agent_variable.Agent.policy_net", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "torch.cat.gather", "agent_variable.Agent.mixer.train", "agent_variable.Agent.mixer", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.sample", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.train", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.train"], ["", "def", "optimize_model", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "batch_size", ":", "\n", "            ", "return", "\n", "\n", "", "transitions", "=", "self", ".", "memory", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "batch", "=", "Transition", "(", "*", "zip", "(", "*", "transitions", ")", ")", "\n", "\n", "state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "state", ")", "\n", "action_batch", "=", "torch", ".", "cat", "(", "batch", ".", "action", ")", "\n", "reward_batch", "=", "torch", ".", "cat", "(", "batch", ".", "reward", ")", "\n", "\n", "self", ".", "policy_net", ".", "train", "(", ")", "\n", "\n", "q_values", "=", "self", ".", "policy_net", "(", "state_batch", ")", ".", "view", "(", "self", ".", "batch_size", ",", "self", ".", "max_passengers", ",", "self", ".", "max_cars", ")", "\n", "q_values", "=", "torch", ".", "cat", "(", "(", "q_values", ",", "torch", ".", "zeros", "(", "(", "self", ".", "batch_size", ",", "self", ".", "max_passengers", ",", "1", ")", ",", "device", "=", "self", ".", "device", ")", ")", ",", "2", ")", "\n", "state_action_values", "=", "q_values", ".", "gather", "(", "2", ",", "action_batch", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "\n", "# Compute the expected Q values", "\n", "expected_state_action_values", "=", "reward_batch", "\n", "\n", "\n", "# Compute Huber loss", "\n", "if", "self", ".", "mode", "==", "\"dqn\"", ":", "\n", "            ", "loss", "=", "F", ".", "smooth_l1_loss", "(", "state_action_values", ",", "expected_state_action_values", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "            ", "self", ".", "mixer", ".", "train", "(", ")", "\n", "chosen_action_qvals", "=", "self", ".", "mixer", "(", "state_action_values", ",", "state_batch", ")", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "chosen_action_qvals", ",", "reward_batch", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "#loss = F.mse_loss(chosen_action_qvals, reward_batch.view(-1, 1, 1))", "\n", "\n", "\n", "", "self", ".", "loss_history", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the model", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "policy_net", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.plot_durations": [[293, 317], ["print", "matplotlib.figure", "matplotlib.clf", "numpy.array", "len", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "numpy.save", "numpy.zeros", "range", "numpy.average"], "methods", ["None"], ["", "def", "plot_durations", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"Saving durations plot ...\"", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "total_steps", "=", "np", ".", "array", "(", "self", ".", "episode_durations", ")", "\n", "\n", "N", "=", "len", "(", "total_steps", ")", "\n", "window_size", "=", "200", "\n", "if", "N", "<", "window_size", ":", "\n", "            ", "total_steps_smoothed", "=", "total_steps", "\n", "", "else", ":", "\n", "            ", "total_steps_smoothed", "=", "np", ".", "zeros", "(", "N", "-", "window_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "window_size", ")", ":", "\n", "                ", "window_steps", "=", "total_steps", "[", "i", ":", "i", "+", "window_size", "]", "\n", "total_steps_smoothed", "[", "i", "]", "=", "np", ".", "average", "(", "window_steps", ")", "\n", "\n", "", "", "plt", ".", "title", "(", "'Episode Duration history'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "ylabel", "(", "'Duration'", ")", "\n", "\n", "plt", ".", "plot", "(", "total_steps_smoothed", ")", "\n", "np", ".", "save", "(", "\"Duration_\"", "+", "filename", ",", "total_steps_smoothed", ")", "\n", "#plt.savefig(\"Durations_history_\" + filename)", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent_variable.Agent.plot_loss_history": [[319, 344], ["print", "matplotlib.figure", "matplotlib.clf", "numpy.array", "len", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "numpy.save", "numpy.zeros", "range", "numpy.average"], "methods", ["None"], ["", "def", "plot_loss_history", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"Saving loss history ...\"", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "#loss = torch.tensor(self.loss_history, dtype=torch.float)", "\n", "\n", "total_loss", "=", "np", ".", "array", "(", "self", ".", "loss_history", ")", "\n", "\n", "N", "=", "len", "(", "total_loss", ")", "\n", "window_size", "=", "50", "\n", "if", "N", "<", "window_size", ":", "\n", "            ", "total_loss_smoothed", "=", "total_loss", "\n", "", "else", ":", "\n", "            ", "total_loss_smoothed", "=", "np", ".", "zeros", "(", "N", "-", "window_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "window_size", ")", ":", "\n", "                ", "window_steps", "=", "total_loss", "[", "i", ":", "i", "+", "window_size", "]", "\n", "total_loss_smoothed", "[", "i", "]", "=", "np", ".", "average", "(", "window_steps", ")", "\n", "\n", "\n", "", "", "plt", ".", "title", "(", "'Loss history'", ")", "\n", "plt", ".", "xlabel", "(", "'Episodes'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "plot", "(", "self", ".", "loss_history", ")", "\n", "np", ".", "save", "(", "\"Loss_\"", "+", "filename", ",", "total_loss_smoothed", ")", "\n", "#plt.savefig(\"Loss_history_\" + filename)", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.__init__": [[24, 79], ["copy.deepcopy", "len", "len", "algorithm.PairAlgorithm", "dqn.ReplayMemory", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "dqn.DQN().to", "list", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "torch.RMSprop", "agent.Agent.policy_net.parameters", "q_mixer.QMixer().to", "list", "agent.Agent.policy_net.load_state_dict", "agent.Agent.policy_net.eval", "print", "dqn.DQN", "agent.Agent.mixer.parameters", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "agent.Agent.mixer.load_state_dict", "agent.Agent.mixer.eval", "q_mixer.QMixer", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "str", "str", "str", "str"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "input_size", ",", "output_size", ",", "hidden_size", ",", "mix_hidden", "=", "32", ",", "batch_size", "=", "128", ",", "lr", "=", "0.001", ",", "gamma", "=", ".999", ",", "eps_start", "=", "0.9", ",", "\n", "eps_end", "=", "0.05", ",", "eps_decay", "=", "750", ",", "replay_capacity", "=", "10000", ",", "num_save", "=", "200", ",", "num_episodes", "=", "10000", ",", "mode", "=", "\"random\"", ",", "training", "=", "False", ",", "load_file", "=", "None", ")", ":", "\n", "        ", "self", ".", "env", "=", "env", "\n", "self", ".", "orig_env", "=", "copy", ".", "deepcopy", "(", "env", ")", "\n", "self", ".", "grid_map", "=", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "num_cars", "=", "len", "(", "self", ".", "cars", ")", "\n", "self", ".", "passengers", "=", "env", ".", "grid_map", ".", "passengers", "\n", "self", ".", "num_passengers", "=", "len", "(", "self", ".", "passengers", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "output_size", "=", "output_size", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "eps_start", "=", "eps_start", "\n", "self", ".", "eps_end", "=", "eps_end", "\n", "self", ".", "eps_decay", "=", "eps_decay", "\n", "self", ".", "replay_capacity", "=", "replay_capacity", "\n", "self", ".", "num_episodes", "=", "num_episodes", "\n", "self", ".", "steps_done", "=", "0", "\n", "self", ".", "lr", "=", "lr", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "num_save", "=", "num_save", "\n", "self", ".", "training", "=", "training", "\n", "self", ".", "algorithm", "=", "PairAlgorithm", "(", ")", "\n", "self", ".", "episode_durations", "=", "[", "]", "\n", "self", ".", "loss_history", "=", "[", "]", "\n", "\n", "self", ".", "memory", "=", "ReplayMemory", "(", "self", ".", "replay_capacity", ")", "\n", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", "#\"cuda:0\" if torch.cuda.is_available() else ", "\n", "print", "(", "\"Device being used:\"", ",", "self", ".", "device", ")", "\n", "self", ".", "policy_net", "=", "DQN", "(", "self", ".", "input_size", ",", "self", ".", "output_size", ",", "self", ".", "hidden_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "params", "=", "list", "(", "self", ".", "policy_net", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "            ", "self", ".", "mixer", "=", "QMixer", "(", "self", ".", "input_size", ",", "self", ".", "num_passengers", ",", "mix_hidden", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "params", "+=", "list", "(", "self", ".", "mixer", ".", "parameters", "(", ")", ")", "\n", "\n", "\n", "", "if", "load_file", ":", "\n", "            ", "self", ".", "policy_net", ".", "load_state_dict", "(", "torch", ".", "load", "(", "load_file", ")", ")", "\n", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "self", ".", "mixer", ".", "load_state_dict", "(", "torch", ".", "load", "(", "\"mixer_\"", "+", "load_file", ")", ")", "\n", "self", ".", "mixer", ".", "eval", "(", ")", "\n", "", "self", ".", "load_file", "=", "\"Trained_\"", "+", "load_file", "\n", "print", "(", "\"Checkpoint loaded\"", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "load_file", "=", "self", ".", "mode", "+", "\"_model_num_cars_\"", "+", "str", "(", "self", ".", "num_cars", ")", "+", "\"_num_passengers_\"", "+", "str", "(", "self", ".", "num_passengers", ")", "+", "\"_num_episodes_\"", "+", "str", "(", "self", ".", "num_episodes", ")", "+", "\"_hidden_size_\"", "+", "str", "(", "self", ".", "hidden_size", ")", "+", "\".pth\"", "\n", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "RMSprop", "(", "self", ".", "params", ",", "lr", "=", "self", ".", "lr", ")", "\n", "#self.optimizer = optim.Adam(self.params, lr=self.lr, betas=(0.9, 0.999), eps=1e-08, weight_decay=0, amsgrad=False)", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.select_action": [[84, 108], ["random.random", "print", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "math.exp", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "agent.Agent.policy_net.eval", "[].view", "random.randrange", "agent.Agent.policy_net().view().max", "range", "agent.Agent.policy_net().view", "agent.Agent.policy_net"], "methods", ["None"], ["", "def", "select_action", "(", "self", ",", "state", ")", ":", "\n", "#Select action with epsilon greedy", "\n", "        ", "sample", "=", "random", ".", "random", "(", ")", "\n", "\n", "eps_threshold", "=", "self", ".", "eps_end", "+", "(", "self", ".", "eps_start", "-", "self", ".", "eps_end", ")", "*", "math", ".", "exp", "(", "-", "1.", "*", "self", ".", "steps_done", "/", "self", ".", "eps_decay", ")", "\n", "\n", "print", "(", "eps_threshold", ")", "\n", "\n", "self", ".", "steps_done", "+=", "1", "\n", "\n", "if", "not", "self", ".", "training", ":", "\n", "            ", "eps_threshold", "=", "0.0", "\n", "\n", "", "if", "sample", ">", "eps_threshold", ":", "\n", "# Choose best action", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "                ", "self", ".", "policy_net", ".", "eval", "(", ")", "\n", "return", "self", ".", "policy_net", "(", "state", ")", ".", "view", "(", "self", ".", "num_passengers", ",", "self", ".", "num_cars", ")", ".", "max", "(", "1", ")", "[", "1", "]", ".", "view", "(", "1", ",", "self", ".", "num_passengers", ")", "\n", "\n", "", "", "else", ":", "\n", "#Choose random action", "\n", "            ", "return", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "self", ".", "num_cars", ")", "for", "car", "in", "range", "(", "self", ".", "num_passengers", ")", "]", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.random_action": [[111, 113], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "random.randrange", "range"], "methods", ["None"], ["", "", "def", "random_action", "(", "self", ",", "state", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "[", "[", "random", ".", "randrange", "(", "self", ".", "num_cars", ")", "for", "car", "in", "range", "(", "self", ".", "num_passengers", ")", "]", "]", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.get_state": [[115, 134], ["numpy.zeros", "enumerate", "numpy.zeros", "enumerate", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "len", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.concatenate"], "methods", ["None"], ["", "def", "get_state", "(", "self", ")", ":", "\n", "# Cars (px, py, 1=matched), Passengers(pickup_x, pickup_y, dest_x, dest_y, 1=matched)", "\n", "# Vector Size = 3*C + 5*P ", "\n", "        ", "cars", "=", "self", ".", "cars", "\n", "passengers", "=", "self", ".", "passengers", "\n", "\n", "# Encode information about cars", "\n", "cars_vec", "=", "np", ".", "zeros", "(", "2", "*", "len", "(", "cars", ")", ")", "\n", "\n", "for", "i", ",", "car", "in", "enumerate", "(", "cars", ")", ":", "\n", "            ", "cars_vec", "[", "2", "*", "i", ":", "2", "*", "i", "+", "2", "]", "=", "[", "car", ".", "position", "[", "0", "]", ",", "car", ".", "position", "[", "1", "]", "]", "\n", "\n", "# Encode information about passengers", "\n", "", "passengers_vec", "=", "np", ".", "zeros", "(", "4", "*", "len", "(", "passengers", ")", ")", "\n", "for", "i", ",", "passenger", "in", "enumerate", "(", "passengers", ")", ":", "\n", "            ", "passengers_vec", "[", "4", "*", "i", ":", "4", "*", "i", "+", "4", "]", "=", "[", "passenger", ".", "pick_up_point", "[", "0", "]", ",", "passenger", ".", "pick_up_point", "[", "1", "]", ",", "\n", "passenger", ".", "drop_off_point", "[", "0", "]", ",", "passenger", ".", "drop_off_point", "[", "1", "]", "]", "\n", "\n", "", "return", "torch", ".", "tensor", "(", "np", ".", "concatenate", "(", "(", "cars_vec", ",", "passengers_vec", ")", ")", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.train": [[136, 186], ["range", "print", "print", "agent.Agent.reset", "agent.Agent.get_state", "agent.Agent.env.step", "agent.Agent.episode_durations.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "agent.Agent.select_action", "agent.Agent.memory.push", "agent.Agent.optimize_model", "agent.Agent.plot_durations", "agent.Agent.plot_loss_history", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "agent.Agent.policy_net.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "agent.Agent.random_action", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "torch.tensor().unsqueeze", "agent.Agent.policy_net.state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "agent.Agent.mixer.state_dict", "agent.Agent.mixer.state_dict", "agent.Agent.algorithm.greedy_fcfs", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "str", "str"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.reset", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.get_state", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.select_action", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.push", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.optimize_model", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_durations", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_loss_history", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.random_action", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.algorithm.PairAlgorithm.greedy_fcfs"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "duration_sum", "=", "0.0", "\n", "\n", "for", "episode", "in", "range", "(", "self", ".", "num_episodes", ")", ":", "\n", "\n", "            ", "self", ".", "reset", "(", ")", "\n", "#self.reset_orig_env()", "\n", "\n", "state", "=", "self", ".", "get_state", "(", ")", "\n", "\n", "if", "self", ".", "mode", "==", "\"dqn\"", "or", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "action", "=", "self", ".", "select_action", "(", "state", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"random\"", ":", "\n", "                ", "action", "=", "self", ".", "random_action", "(", "[", "state", "]", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"greedy\"", ":", "\n", "                ", "action", "=", "[", "self", ".", "algorithm", ".", "greedy_fcfs", "(", "self", ".", "grid_map", ")", "]", "\n", "\n", "\n", "", "reward", ",", "duration", "=", "self", ".", "env", ".", "step", "(", "action", ",", "self", ".", "mode", ")", "\n", "\n", "self", ".", "episode_durations", ".", "append", "(", "duration", ")", "\n", "duration_sum", "+=", "duration", "\n", "\n", "if", "self", ".", "training", ":", "\n", "                ", "self", ".", "memory", ".", "push", "(", "state", ",", "action", ",", "torch", ".", "tensor", "(", "reward", ",", "device", "=", "self", ".", "device", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "0", ")", ")", "\n", "self", ".", "optimize_model", "(", ")", "\n", "\n", "self", ".", "plot_durations", "(", "self", ".", "mode", ")", "\n", "self", ".", "plot_loss_history", "(", "self", ".", "mode", ")", "\n", "\n", "\n", "", "if", "self", ".", "training", "and", "episode", "%", "self", ".", "num_save", "==", "0", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "\"episode_\"", "+", "str", "(", "episode", ")", "+", "\"_\"", "+", "self", ".", "load_file", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                    ", "torch", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"mixer_episode_\"", "+", "str", "(", "episode", ")", "+", "\"_\"", "+", "self", ".", "load_file", ")", "\n", "", "print", "(", "\"Checkpoint saved\"", ")", "\n", "\n", "\n", "", "print", "(", "\"Episode: \"", ",", "episode", ")", "\n", "\n", "\n", "", "if", "self", ".", "training", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "policy_net", ".", "state_dict", "(", ")", ",", "self", ".", "load_file", ")", "\n", "if", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "mixer", ".", "state_dict", "(", ")", ",", "\"mixer_\"", "+", "self", ".", "load_file", ")", "\n", "", "print", "(", "\"Checkpoint saved\"", ")", "\n", "\n", "", "print", "(", "\"Average duration was \"", ",", "duration_sum", "/", "self", ".", "num_episodes", ")", "\n", "print", "(", "\"Finished\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.reset": [[187, 192], ["agent.Agent.env.reset"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.reset"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "grid_map", "=", "self", ".", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "self", ".", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "passengers", "=", "self", ".", "env", ".", "grid_map", ".", "passengers", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.reset_orig_env": [[193, 200], ["copy.deepcopy", "agent.Agent.grid_map.init_zero_map_cost"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.init_zero_map_cost"], ["", "def", "reset_orig_env", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "env", "=", "copy", ".", "deepcopy", "(", "self", ".", "orig_env", ")", "\n", "self", ".", "grid_map", "=", "self", ".", "env", ".", "grid_map", "\n", "self", ".", "cars", "=", "self", ".", "env", ".", "grid_map", ".", "cars", "\n", "self", ".", "passengers", "=", "self", ".", "env", ".", "grid_map", ".", "passengers", "\n", "self", ".", "grid_map", ".", "init_zero_map_cost", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.optimize_model": [[202, 240], ["agent.Agent.memory.sample", "Transition", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "agent.Agent.policy_net.train", "agent.Agent.policy_net().view().gather().squeeze", "agent.Agent.loss_history.append", "agent.Agent.optimizer.zero_grad", "torch.smooth_l1_loss.backward", "agent.Agent.policy_net.parameters", "agent.Agent.optimizer.step", "len", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss.item", "param.grad.data.clamp_", "zip", "agent.Agent.policy_net().view().gather", "agent.Agent.mixer.train", "agent.Agent.mixer", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "agent.Agent.policy_net().view", "agent.Agent.policy_net"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.dqn.ReplayMemory.sample", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.train", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.train"], ["", "def", "optimize_model", "(", "self", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "memory", ")", "<", "self", ".", "batch_size", ":", "\n", "            ", "return", "\n", "\n", "", "transitions", "=", "self", ".", "memory", ".", "sample", "(", "self", ".", "batch_size", ")", "\n", "batch", "=", "Transition", "(", "*", "zip", "(", "*", "transitions", ")", ")", "\n", "\n", "state_batch", "=", "torch", ".", "cat", "(", "batch", ".", "state", ")", "\n", "action_batch", "=", "torch", ".", "cat", "(", "batch", ".", "action", ")", "\n", "reward_batch", "=", "torch", ".", "cat", "(", "batch", ".", "reward", ")", "\n", "\n", "self", ".", "policy_net", ".", "train", "(", ")", "\n", "\n", "state_action_values", "=", "self", ".", "policy_net", "(", "state_batch", ")", ".", "view", "(", "self", ".", "batch_size", ",", "self", ".", "num_passengers", ",", "self", ".", "num_cars", ")", ".", "gather", "(", "2", ",", "action_batch", ".", "unsqueeze", "(", "2", ")", ")", ".", "squeeze", "(", ")", "\n", "\n", "# Compute the expected Q values", "\n", "expected_state_action_values", "=", "reward_batch", "\n", "\n", "\n", "# Compute Huber loss", "\n", "if", "self", ".", "mode", "==", "\"dqn\"", ":", "\n", "            ", "loss", "=", "F", ".", "smooth_l1_loss", "(", "state_action_values", ",", "expected_state_action_values", ")", "\n", "", "elif", "self", ".", "mode", "==", "\"qmix\"", ":", "\n", "            ", "self", ".", "mixer", ".", "train", "(", ")", "\n", "chosen_action_qvals", "=", "self", ".", "mixer", "(", "state_action_values", ",", "state_batch", ")", "\n", "loss", "=", "F", ".", "smooth_l1_loss", "(", "chosen_action_qvals", ",", "reward_batch", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ")", "\n", "#loss = F.mse_loss(chosen_action_qvals, reward_batch.view(-1, 1, 1))", "\n", "\n", "\n", "", "self", ".", "loss_history", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "# Optimize the model", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "param", "in", "self", ".", "policy_net", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "grad", ".", "data", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_durations": [[242, 267], ["print", "matplotlib.figure", "matplotlib.clf", "numpy.array", "len", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "numpy.save", "matplotlib.savefig", "numpy.zeros", "range", "numpy.average"], "methods", ["None"], ["", "def", "plot_durations", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"Saving durations plot ...\"", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "\n", "total_steps", "=", "np", ".", "array", "(", "self", ".", "episode_durations", ")", "\n", "\n", "N", "=", "len", "(", "total_steps", ")", "\n", "window_size", "=", "200", "\n", "if", "N", "<", "window_size", ":", "\n", "            ", "total_steps_smoothed", "=", "total_steps", "\n", "", "else", ":", "\n", "            ", "total_steps_smoothed", "=", "np", ".", "zeros", "(", "N", "-", "window_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "window_size", ")", ":", "\n", "                ", "window_steps", "=", "total_steps", "[", "i", ":", "i", "+", "window_size", "]", "\n", "total_steps_smoothed", "[", "i", "]", "=", "np", ".", "average", "(", "window_steps", ")", "\n", "\n", "", "", "plt", ".", "title", "(", "'Episode Duration history'", ")", "\n", "plt", ".", "xlabel", "(", "'Episode'", ")", "\n", "plt", ".", "ylabel", "(", "'Duration'", ")", "\n", "\n", "plt", ".", "plot", "(", "total_steps_smoothed", ")", "\n", "np", ".", "save", "(", "\"Duration_\"", "+", "filename", ",", "total_steps_smoothed", ")", "\n", "plt", ".", "savefig", "(", "\"Durations_history_\"", "+", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.agent.Agent.plot_loss_history": [[268, 294], ["print", "matplotlib.figure", "matplotlib.clf", "numpy.array", "len", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.plot", "numpy.save", "matplotlib.savefig", "numpy.zeros", "range", "numpy.average"], "methods", ["None"], ["", "def", "plot_loss_history", "(", "self", ",", "filename", ")", ":", "\n", "        ", "print", "(", "\"Saving loss history ...\"", ")", "\n", "plt", ".", "figure", "(", "2", ")", "\n", "plt", ".", "clf", "(", ")", "\n", "#loss = torch.tensor(self.loss_history, dtype=torch.float)", "\n", "\n", "total_loss", "=", "np", ".", "array", "(", "self", ".", "loss_history", ")", "\n", "\n", "N", "=", "len", "(", "total_loss", ")", "\n", "window_size", "=", "50", "\n", "if", "N", "<", "window_size", ":", "\n", "            ", "total_loss_smoothed", "=", "total_loss", "\n", "", "else", ":", "\n", "            ", "total_loss_smoothed", "=", "np", ".", "zeros", "(", "N", "-", "window_size", ")", "\n", "\n", "for", "i", "in", "range", "(", "N", "-", "window_size", ")", ":", "\n", "                ", "window_steps", "=", "total_loss", "[", "i", ":", "i", "+", "window_size", "]", "\n", "total_loss_smoothed", "[", "i", "]", "=", "np", ".", "average", "(", "window_steps", ")", "\n", "\n", "\n", "", "", "plt", ".", "title", "(", "'Loss history'", ")", "\n", "plt", ".", "xlabel", "(", "'Episodes'", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "plot", "(", "self", ".", "loss_history", ")", "\n", "np", ".", "save", "(", "\"Loss_\"", "+", "filename", ",", "total_loss_smoothed", ")", "\n", "plt", ".", "savefig", "(", "\"Loss_history_\"", "+", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.util.Util.cal_dist": [[4, 8], ["float", "abs", "abs"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "cal_dist", "(", "cls", ",", "p1", ":", "tuple", ",", "p2", ":", "tuple", ")", "->", "float", ":", "#  L1 distanc", "\n", "        ", "dist", "=", "abs", "(", "p1", "[", "0", "]", "-", "p2", "[", "0", "]", ")", "+", "abs", "(", "p1", "[", "1", "]", "-", "p2", "[", "1", "]", ")", "\n", "return", "float", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.algorithm.PairAlgorithm.greedy_fcfs": [[12, 27], ["enumerate", "len", "enumerate", "util.Util.cal_dist"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.util.Util.cal_dist"], ["    ", "def", "greedy_fcfs", "(", "self", ",", "grid_map", ")", ":", "\n", "        ", "passengers", "=", "grid_map", ".", "passengers", "\n", "cars", "=", "grid_map", ".", "cars", "\n", "action", "=", "[", "0", "]", "*", "len", "(", "passengers", ")", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "passengers", ")", ":", "\n", "            ", "min_dist", "=", "math", ".", "inf", "\n", "assigned_car", "=", "None", "\n", "for", "j", ",", "c", "in", "enumerate", "(", "cars", ")", ":", "\n", "                ", "dist", "=", "Util", ".", "cal_dist", "(", "p", ".", "pick_up_point", ",", "c", ".", "position", ")", "\n", "if", "dist", "<", "min_dist", ":", "\n", "                    ", "min_dist", "=", "dist", "\n", "assigned_car", "=", "j", "\n", "", "", "action", "[", "i", "]", "=", "assigned_car", "\n", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.q_mixer.QMixer.__init__": [[8, 33], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.__init__"], ["    ", "def", "__init__", "(", "self", ",", "state_size", ",", "num_passengers", ",", "mix_hidden", ")", ":", "\n", "        ", "super", "(", "QMixer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "state_size", "=", "state_size", "\n", "self", ".", "num_passengers", "=", "num_passengers", "\n", "self", ".", "mix_hidden", "=", "mix_hidden", "\n", "\n", "self", ".", "hyper_w_1", "=", "nn", ".", "Linear", "(", "state_size", ",", "num_passengers", "*", "mix_hidden", ")", "\n", "self", ".", "hyper_w_final", "=", "nn", ".", "Linear", "(", "state_size", ",", "mix_hidden", ")", "\n", "# elif getattr(args, \"hypernet_layers\", 1) == 2:", "\n", "#     hypernet_embed = self.args.hypernet_embed", "\n", "# self.hyper_w_1 = nn.Sequential(nn.Linear(state_size, 32),", "\n", "#                                 nn.ReLU(),", "\n", "#                                 nn.Linear(32, mix_hidden * num_passengers))", "\n", "# self.hyper_w_final = nn.Sequential(nn.Linear(state_size, 32),", "\n", "#                                 nn.ReLU(),", "\n", "#                                 nn.Linear(32, mix_hidden))", "\n", "\n", "# State dependent bias for hidden layer", "\n", "self", ".", "hyper_b_1", "=", "nn", ".", "Linear", "(", "state_size", ",", "mix_hidden", ")", "\n", "\n", "# V(s) instead of a bias for the last layers", "\n", "self", ".", "V", "=", "nn", ".", "Sequential", "(", "nn", ".", "Linear", "(", "state_size", ",", "mix_hidden", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "mix_hidden", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.q_mixer.QMixer.forward": [[34, 62], ["agent_qs.view.view.size", "states.reshape.reshape.reshape", "agent_qs.view.view.view", "torch.abs", "torch.abs", "torch.abs", "q_mixer.QMixer.hyper_b_1", "w1.view.view.view", "b1.view.view.view", "torch.elu", "torch.elu", "torch.elu", "torch.abs", "torch.abs", "torch.abs", "w_final.view.view.view", "q_mixer.QMixer.V().view", "y.view", "q_mixer.QMixer.hyper_w_1", "q_mixer.QMixer.hyper_w_final", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "q_mixer.QMixer.V"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "agent_qs", ",", "states", ")", ":", "\n", "\n", "        ", "bs", "=", "agent_qs", ".", "size", "(", "0", ")", "\n", "states", "=", "states", ".", "reshape", "(", "-", "1", ",", "self", ".", "state_size", ")", "\n", "agent_qs", "=", "agent_qs", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "num_passengers", ")", "\n", "\n", "# First layer", "\n", "w1", "=", "th", ".", "abs", "(", "self", ".", "hyper_w_1", "(", "states", ")", ")", "\n", "b1", "=", "self", ".", "hyper_b_1", "(", "states", ")", "\n", "w1", "=", "w1", ".", "view", "(", "-", "1", ",", "self", ".", "num_passengers", ",", "self", ".", "mix_hidden", ")", "\n", "b1", "=", "b1", ".", "view", "(", "-", "1", ",", "1", ",", "self", ".", "mix_hidden", ")", "\n", "\n", "hidden", "=", "F", ".", "elu", "(", "th", ".", "bmm", "(", "agent_qs", ",", "w1", ")", "+", "b1", ")", "\n", "\n", "# Second layer", "\n", "w_final", "=", "th", ".", "abs", "(", "self", ".", "hyper_w_final", "(", "states", ")", ")", "\n", "w_final", "=", "w_final", ".", "view", "(", "-", "1", ",", "self", ".", "mix_hidden", ",", "1", ")", "\n", "\n", "# State-dependent bias", "\n", "v", "=", "self", ".", "V", "(", "states", ")", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", "\n", "\n", "# Compute final output", "\n", "y", "=", "th", ".", "bmm", "(", "hidden", ",", "w_final", ")", "+", "v", "\n", "\n", "# Reshape and return", "\n", "q_tot", "=", "y", ".", "view", "(", "bs", ",", "-", "1", ",", "1", ")", "\n", "\n", "return", "q_tot", "", "", "", ""]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.__init__": [[5, 7], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "grid_map", ")", ":", "\n", "        ", "self", ".", "grid_map", "=", "grid_map", "\n", "#self.algorithm = PairAlgorithm()", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.reset": [[10, 16], ["environment.Environment.grid_map.add_passenger", "environment.Environment.grid_map.add_cars"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.add_cars"], ["", "def", "reset", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "grid_map", ".", "cars", "=", "[", "]", "\n", "self", ".", "grid_map", ".", "passengers", "=", "[", "]", "\n", "self", ".", "grid_map", ".", "add_passenger", "(", "self", ".", "grid_map", ".", "num_passengers", ")", "\n", "self", ".", "grid_map", ".", "add_cars", "(", "self", ".", "grid_map", ".", "num_cars", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.environment.Environment.step": [[18, 89], ["len", "enumerate", "enumerate", "car.pair_passenger", "grid_map.plan_path", "grid_map.plan_path", "car.assign_path", "car.pick_passenger", "car.drop_passenger", "car.move"], "methods", ["home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.pair_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.plan_path", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.gridmap.GridMap.plan_path", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.assign_path", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.pick_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.drop_passenger", "home.repos.pwc.inspect_result.UMich-ML-Group_RL-Ridesharing.None.car.Car.move"], ["", "def", "step", "(", "self", ",", "action", ",", "mode", ")", ":", "\n", "\n", "        ", "grid_map", "=", "self", ".", "grid_map", "\n", "cars", "=", "grid_map", ".", "cars", "\n", "passengers", "=", "grid_map", ".", "passengers", "\n", "reward", "=", "[", "0", "]", "*", "len", "(", "passengers", ")", "\n", "done", "=", "False", "\n", "\n", "duration", "=", "0", "\n", "\n", "while", "not", "done", ":", "\n", "\n", "# print(\"Action: \", action)", "\n", "# print(self.grid_map)", "\n", "# input(\"Press enter to step\")", "\n", "# self.grid_map.visualize()", "\n", "\n", "\n", "            ", "for", "i", ",", "act", "in", "enumerate", "(", "action", "[", "0", "]", ")", ":", "\n", "                ", "if", "cars", "[", "act", "]", ".", "status", "==", "\"idle\"", "and", "passengers", "[", "i", "]", ".", "status", "==", "\"wait_pair\"", ":", "\n", "                    ", "car", "=", "cars", "[", "act", "]", "\n", "passenger", "=", "passengers", "[", "i", "]", "\n", "car", ".", "pair_passenger", "(", "passenger", ")", "\n", "pick_up_path", "=", "grid_map", ".", "plan_path", "(", "car", ".", "position", ",", "passenger", ".", "pick_up_point", ")", "\n", "drop_off_path", "=", "grid_map", ".", "plan_path", "(", "passenger", ".", "pick_up_point", ",", "passenger", ".", "drop_off_point", ")", "\n", "car", ".", "assign_path", "(", "pick_up_path", ",", "drop_off_path", ")", "\n", "\n", "\n", "\n", "", "", "for", "i", ",", "car", "in", "enumerate", "(", "cars", ")", ":", "\n", "\n", "                ", "if", "car", ".", "status", "==", "'idle'", ":", "\n", "                    ", "continue", "\n", "\n", "# init require step", "\n", "", "if", "car", ".", "required_steps", "is", "None", ":", "# init", "\n", "                    ", "car", ".", "required_steps", "=", "self", ".", "grid_map", ".", "map_cost", "[", "(", "car", ".", "position", ",", "car", ".", "path", "[", "0", "]", ")", "]", "\n", "\n", "# pick up or drop off will take one step", "\n", "", "if", "car", ".", "status", "==", "'picking_up'", "and", "car", ".", "position", "==", "car", ".", "passenger", ".", "pick_up_point", ":", "# picking up", "\n", "                    ", "car", ".", "pick_passenger", "(", ")", "\n", "", "elif", "car", ".", "status", "==", "'dropping_off'", "and", "car", ".", "position", "==", "car", ".", "passenger", ".", "drop_off_point", ":", "# dropping off", "\n", "                    ", "car", ".", "drop_passenger", "(", ")", "\n", "", "else", ":", "\n", "# try to move", "\n", "                    ", "if", "car", ".", "required_steps", ">", "0", ":", "# decrease steps", "\n", "                        ", "car", ".", "required_steps", "-=", "1", "\n", "", "elif", "car", ".", "required_steps", "==", "0", ":", "# move", "\n", "                        ", "car", ".", "move", "(", ")", "\n", "if", "car", ".", "path", ":", "\n", "                            ", "car", ".", "required_steps", "=", "self", ".", "grid_map", ".", "map_cost", "[", "(", "car", ".", "position", ",", "car", ".", "path", "[", "0", "]", ")", "]", "\n", "\n", "", "", "", "", "for", "passenger", "in", "passengers", ":", "\n", "                ", "if", "passenger", ".", "status", "==", "'wait_pair'", "or", "passenger", ".", "status", "==", "'wait_pick'", ":", "\n", "                    ", "passenger", ".", "waiting_steps", "+=", "1", "\n", "\n", "", "", "done", "=", "False", "not", "in", "[", "passenger", ".", "status", "==", "\"dropped\"", "for", "passenger", "in", "passengers", "]", "\n", "\n", "duration", "+=", "1", "\n", "\n", "", "if", "mode", "==", "\"dqn\"", ":", "\n", "            ", "reward", "=", "[", "-", "passenger", ".", "waiting_steps", "for", "passenger", "in", "passengers", "]", "\n", "\n", "", "if", "mode", "==", "\"qmix\"", "or", "mode", "==", "\"iql\"", ":", "\n", "#reward = sum(reward)/1000 #len(passengers)", "\n", "            ", "reward", "=", "-", "duration", "\n", "\n", "\n", "\n", "\n", "", "return", "reward", ",", "duration", "\n", "\n"]]}