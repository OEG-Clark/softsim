{"home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options.__init__": [[7, 10], ["argparse.ArgumentParser"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "self", ".", "opt", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options._initial": [[11, 44], ["opt.Options.parser.add_argument", "opt.Options.parser.set_defaults", "opt.Options.parser.add_argument", "opt.Options.parser.set_defaults", "opt.Options.parser.add_argument", "opt.Options.parser.set_defaults", "opt.Options.parser.add_argument", "opt.Options.parser.set_defaults", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument", "opt.Options.parser.add_argument"], "methods", ["None"], ["", "def", "_initial", "(", "self", ")", ":", "\n", "# ===============================================================", "\n", "#                     General options", "\n", "# ===============================================================", "\n", "\n", "# ===============================================================", "\n", "#                     Architecture options", "\n", "# ===============================================================", "\n", "        ", "self", ".", "parser", ".", "add_argument", "(", "'--use_dct'", ",", "dest", "=", "'use_dct'", ",", "action", "=", "'store_true'", ",", "help", "=", "'toggle to transform from temporal to frequency space'", ")", "\n", "self", ".", "parser", ".", "set_defaults", "(", "use_dct", "=", "True", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--variational'", ",", "dest", "=", "'variational'", ",", "action", "=", "'store_true'", ",", "help", "=", "'toggle VAE or AE'", ")", "\n", "self", ".", "parser", ".", "set_defaults", "(", "variational", "=", "False", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--output_variance'", ",", "dest", "=", "'output_variance'", ",", "action", "=", "'store_true'", ",", "help", "=", "'toggle model output variance or use as constant'", ")", "\n", "self", ".", "parser", ".", "set_defaults", "(", "output_variance", "=", "False", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--batch_norm'", ",", "dest", "=", "'batch_norm'", ",", "action", "=", "'store_true'", ",", "help", "=", "'toggle use batch_norm or not'", ")", "\n", "self", ".", "parser", ".", "set_defaults", "(", "batch_norm", "=", "False", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--p_drop'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "help", "=", "'dropout rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--l2_reg'", ",", "type", "=", "float", ",", "default", "=", "1e-4", ",", "help", "=", "'dropout rate'", ")", "\n", "# ===============================================================", "\n", "#                    Initialise options", "\n", "# ===============================================================", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'If not 1, load checkpoint at this epoch'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--name'", ",", "type", "=", "str", ",", "default", "=", "\"model_1\"", ",", "help", "=", "'Name of master folder containing model'", ")", "\n", "# ===============================================================", "\n", "#                     Running options", "\n", "# ===============================================================", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.001", ",", "help", "=", "'learning rate'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Downweighting of the KL divergence'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--n_epochs'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "help", "=", "'Number of epochs to train for'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--train_batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'Number of epochs to train for'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--test_batch_size'", ",", "type", "=", "int", ",", "default", "=", "256", ",", "help", "=", "'If not 1, load checkpoint at this epoch'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--warmup_time'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of epochs to warm up the KL'", ")", "\n", "self", ".", "parser", ".", "add_argument", "(", "'--beta_final'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "help", "=", "'Final downweighting of the KL divergence'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options._print": [[54, 58], ["print", "pprint.pprint.pprint", "print", "vars"], "methods", ["None"], ["", "def", "_print", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"\\n==================Options=================\"", ")", "\n", "pprint", "(", "vars", "(", "self", ".", "opt", ")", ",", "indent", "=", "4", ")", "\n", "print", "(", "\"==========================================\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options.parse": [[59, 64], ["opt.Options._initial", "opt.Options.parser.parse_args", "opt.Options._print"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options._initial", "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.opt.Options._print"], ["", "def", "parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "_initial", "(", ")", "\n", "self", ".", "opt", "=", "self", ".", "parser", ".", "parse_args", "(", ")", "\n", "self", ".", "_print", "(", ")", "\n", "return", "self", ".", "opt", "", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.train.initialise": [[18, 42], ["torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "model.parameters", "models.book_keeping", "models.book_keeping", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "str", "torch.device", "torch.device", "torch.device"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.book_keeping", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.book_keeping"], ["def", "initialise", "(", "model", ",", "start_epoch", "=", "1", ",", "folder_name", "=", "\"\"", ",", "lr", "=", "0.0001", ",", "beta", "=", "1.0", ",", "l2_reg", "=", "1e-4", ",", "train_batch_size", "=", "100", ",", "\n", "figs_checkpoints_save_freq", "=", "10", ",", "warmup_time", "=", "0", ",", "beta_final", "=", "1.0", ")", ":", "\n", "    ", "model", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "l2_reg", ")", "\n", "model", ".", "folder_name", "=", "folder_name", "\n", "model", ".", "lr", "=", "lr", "\n", "model", ".", "l2_reg", "=", "1e-4", "\n", "model", ".", "beta", "=", "beta", "\n", "model", ".", "train_batch_size", "=", "train_batch_size", "\n", "model", ".", "clipping_value", "=", "100.0", "\n", "model", ".", "figs_checkpoints_save_freq", "=", "figs_checkpoints_save_freq", "\n", "model", ".", "epoch_cur", "=", "start_epoch", "\n", "model", ".", "warmup_time", "=", "warmup_time", "\n", "model", ".", "beta_final", "=", "beta_final", "\n", "if", "start_epoch", "==", "1", ":", "\n", "        ", "model", ".", "losses_file_exists", "=", "False", "\n", "model", ".", "kls_file_exists", "=", "False", "\n", "model_utils", ".", "book_keeping", "(", "model", ",", "start_epoch", "=", "start_epoch", ")", "\n", "", "else", ":", "\n", "        ", "model", ".", "losses_file_exists", "=", "True", "\n", "model", ".", "kls_file_exists", "=", "True", "\n", "model_utils", ".", "book_keeping", "(", "model", ",", "start_epoch", "=", "start_epoch", ")", "\n", "ckpt_path", "=", "model", ".", "folder_name", "+", "'/checkpoints/'", "+", "'ckpt_'", "+", "str", "(", "start_epoch", "-", "1", ")", "+", "'_weights.path.tar'", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ",", "map_location", "=", "torch", ".", "device", "(", "model", ".", "device", ")", ")", "\n", "model", ".", "load_state_dict", "(", "ckpt", "[", "'state_dict'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.train.train_motion_epoch": [[44, 76], ["model.train", "enumerate", "models.warmup", "tqdm.auto.tqdm", "motion_seqs.to().float", "inputs.reshape.reshape", "model_utils.dct.reshape", "logvar_hat.reshape.reshape", "model.cal_loss", "model.optimizer.zero_grad", "model.cal_loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "model.writer.add_scalar", "model.optimizer.step", "models.dct", "model", "models.dct", "inputs.reshape.reshape", "model", "model.parameters", "motion_seqs.to", "model_utils.dct.float", "inputs.reshape.float"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.warmup", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_loss", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct"], ["", "", "def", "train_motion_epoch", "(", "model", ",", "train_loader", ",", "use_dct", "=", "False", ")", ":", "\n", "    ", "model", ".", "train", "(", ")", "\n", "for", "i", ",", "(", "motion_seqs", ")", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "\n", "        ", "b_n", ",", "f_n", ",", "t_n", "=", "motion_seqs", ".", "shape", "\n", "model", ".", "b_n", ",", "model", ".", "f_n", ",", "model", ".", "t_n", "=", "b_n", ",", "f_n", ",", "t_n", "\n", "\n", "inputs", "=", "motion_seqs", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "if", "use_dct", ":", "\n", "            ", "inputs_dct", "=", "model_utils", ".", "dct", "(", "model", ",", "inputs", ")", "\n", "\n", "#inputs_dct = inputs_dct.reshape(b_n, f_n * t_n)", "\n", "mu_hat", ",", "logvar_hat", ",", "zs", ",", "kls", "=", "model", "(", "inputs_dct", ".", "float", "(", ")", ")", "\n", "#mu_hat = mu_hat.reshape(b_n, f_n, t_n)", "\n", "\n", "inputs_hat", "=", "model_utils", ".", "dct", "(", "model", ",", "mu_hat", ",", "inverse", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "inputs", "=", "inputs", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "inputs_hat", ",", "logvar_hat", ",", "zs", ",", "kls", "=", "model", "(", "inputs", ".", "float", "(", ")", ")", "\n", "", "inputs", "=", "inputs", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "inputs_hat", "=", "inputs_hat", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "logvar_hat", "=", "logvar_hat", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "loss", "=", "model", ".", "cal_loss", "(", "inputs", ",", "inputs_hat", ",", "logvar_hat", ",", "kls", ",", "'gaussian'", ")", "\n", "\n", "model", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "model", ".", "parameters", "(", ")", ",", "model", ".", "clipping_value", ")", "\n", "model", ".", "writer", ".", "add_scalar", "(", "\"Gradients/total_gradient_norm\"", ",", "total_norm", ",", "model", ".", "epoch_cur", ")", "\n", "#if (total_norm < 150) or (model.epoch_cur < 50):", "\n", "model", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "model", ".", "beta", "=", "model_utils", ".", "warmup", "(", "model", ",", "model", ".", "beta", ",", "warmup_time", "=", "model", ".", "warmup_time", ",", "beta_final", "=", "model", ".", "beta_final", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.train.eval_motion_batch": [[77, 110], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "enumerate", "models.log_epoch_values", "tqdm.auto.tqdm", "motion_seqs.to().float", "inputs.reshape.reshape", "model_utils.dct.reshape", "logvar_hat.reshape.reshape", "model.cal_loss", "models.accum_update", "models.accum_update", "models.dct", "model", "models.dct", "inputs.reshape.reshape", "model", "models.accum_update", "model.KLs.items", "motion_seqs.to", "model_utils.dct.float", "inputs.reshape.float", "str", "str", "models.accum_update", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.log_epoch_values", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_loss", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_update", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_update", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_update", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_update"], ["", "def", "eval_motion_batch", "(", "model", ",", "loader", ",", "dataset_name", "=", "'val'", ",", "use_dct", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "for", "i", ",", "(", "motion_seqs", ")", "in", "enumerate", "(", "tqdm", "(", "loader", ")", ")", ":", "\n", "\n", "            ", "b_n", ",", "f_n", ",", "t_n", "=", "motion_seqs", ".", "shape", "\n", "model", ".", "b_n", ",", "model", ".", "f_n", ",", "model", ".", "t_n", "=", "b_n", ",", "f_n", ",", "t_n", "\n", "\n", "inputs", "=", "motion_seqs", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "if", "use_dct", ":", "\n", "                ", "inputs_dct", "=", "model_utils", ".", "dct", "(", "model", ",", "inputs", ")", "\n", "\n", "#inputs_dct = inputs_dct.reshape(b_n, f_n * t_n)", "\n", "mu_hat", ",", "logvar_hat", ",", "zs", ",", "kls", "=", "model", "(", "inputs_dct", ".", "float", "(", ")", ")", "\n", "#mu_hat = mu_hat.reshape(b_n, f_n, t_n)", "\n", "\n", "inputs_hat", "=", "model_utils", ".", "dct", "(", "model", ",", "mu_hat", ",", "inverse", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "inputs", "=", "inputs", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "inputs_hat", ",", "logvar_hat", ",", "zs", ",", "kls", "=", "model", "(", "inputs", ".", "float", "(", ")", ")", "\n", "", "inputs", "=", "inputs", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "inputs_hat", "=", "inputs_hat", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "logvar_hat", "=", "logvar_hat", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "loss", "=", "model", ".", "cal_loss", "(", "inputs", ",", "inputs_hat", ",", "logvar_hat", ",", "kls", ",", "'gaussian'", ")", "\n", "\n", "model_utils", ".", "accum_update", "(", "model", ",", "str", "(", "dataset_name", ")", "+", "'_loss'", ",", "loss", ")", "\n", "model_utils", ".", "accum_update", "(", "model", ",", "str", "(", "dataset_name", ")", "+", "'_recon'", ",", "model", ".", "recon_loss", ")", "\n", "if", "model", ".", "variational", ":", "\n", "                ", "model_utils", ".", "accum_update", "(", "model", ",", "str", "(", "dataset_name", ")", "+", "'_KL'", ",", "model", ".", "KL", ")", "\n", "for", "key", ",", "value", "in", "model", ".", "KLs", ".", "items", "(", ")", ":", "\n", "                    ", "model_utils", ".", "accum_update", "(", "model", ",", "str", "(", "dataset_name", ")", "+", "'_KL_'", "+", "str", "(", "key", ")", ",", "value", ")", "\n", "\n", "", "", "", "model_utils", ".", "log_epoch_values", "(", "model", ",", "dataset_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.occlusion_experiment.reconstructions": [[38, 51], ["model_utils.dct.detach", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "inputs.to().float.to().float", "models.dct", "model", "models.dct", "model_utils.dct.float", "inputs.to().float.to"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct"], ["def", "reconstructions", "(", "model", ",", "inputs", ",", "use_dct", "=", "True", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "b_n", ",", "f_n", ",", "t_n", "=", "inputs", ".", "shape", "\n", "\n", "inputs", "=", "inputs", ".", "to", "(", "model", ".", "device", ")", ".", "float", "(", ")", "\n", "inputs_dct", "=", "model_utils", ".", "dct", "(", "model", ",", "inputs", ")", "\n", "#inputs_dct = inputs_dct.reshape(b_n, f_n * t_n)", "\n", "mu_hat", ",", "logvar_hat", ",", "zs", ",", "kls", "=", "model", "(", "inputs_dct", ".", "float", "(", ")", ",", "latent_resolution", "=", "999", ")", "\n", "#mu_hat = mu_hat.reshape(b_n, f_n, t_n)", "\n", "inputs_hat", "=", "model_utils", ".", "dct", "(", "model", ",", "mu_hat", ",", "inverse", "=", "True", ")", "\n", "\n", "", "return", "inputs_hat", ".", "detach", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.None.occlusion_experiment.test_degraded_mse": [[52, 95], ["enumerate", "tqdm.auto.tqdm", "experiments.utils.simulate_motion_occlusions", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "torch.from_numpy().to().float", "motion_gt.to().float.to().float", "models.dct", "model.cal_posterior().detach", "model.gradient_ascent_on_posterior", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "pandas.DataFrame", "posterior_final.cpu", "model.cal_posterior().detach.cpu", "torch.sum.cpu", "torch.sum.cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "MSE_log.append", "MSE_recon_log.append", "numpy.mean", "numpy.mean", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "posterior_init.cpu", "pd.DataFrame.to_csv", "torch.mean.cpu().numpy", "torch.mean.cpu().numpy", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "motion_gt.to().float.to", "model.cal_posterior", "open", "pd.DataFrame.to_csv", "torch.mean.cpu", "torch.mean.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "str", "str"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.experiments.utils.simulate_motion_occlusions", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.gradient_ascent_on_posterior", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_posterior"], ["", "def", "test_degraded_mse", "(", "test_loader", ",", "num_occlusions", "=", "0", ")", ":", "\n", "    ", "MSE_log", "=", "[", "]", "\n", "MSE_recon_log", "=", "[", "]", "\n", "for", "i", ",", "(", "motion_gt", ")", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "        ", "batch_size", ",", "f_n", ",", "t_n", "=", "motion_gt", ".", "shape", "\n", "\n", "### Simulate degradation", "\n", "X_occluded", ",", "occlusion_mask", "=", "simulate_motion_occlusions", "(", "motion_gt", ",", "num_occlusions", "=", "num_occlusions", ")", "\n", "#X_occluded = add_noise(motion_gt, alpha=num_occlusions)", "\n", "motion_occluded", "=", "torch", ".", "from_numpy", "(", "X_occluded", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "occlusion_mask", "=", "torch", ".", "from_numpy", "(", "occlusion_mask", ")", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "motion_gt", "=", "motion_gt", ".", "to", "(", "device", ")", ".", "float", "(", ")", "\n", "\n", "motion_gt_dct", "=", "model_utils", ".", "dct", "(", "model", ",", "motion_gt", ")", "\n", "posterior_gt", "=", "model", ".", "cal_posterior", "(", "motion_gt_dct", ")", ".", "detach", "(", ")", "\n", "\n", "#recons_of_occluded = reconstructions(model, motion_occluded, use_dct=True)", "\n", "map_imputation", ",", "(", "posterior_init", ",", "posterior_final", ")", "=", "model", ".", "gradient_ascent_on_posterior", "(", "motion_occluded", ",", "occlusion_mask", ")", "\n", "\n", "MSE_per_datapoint", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "(", "motion_gt", "-", "motion_occluded", ")", ",", "2", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "MSE_MAP_per_datapoint", "=", "torch", ".", "sum", "(", "torch", ".", "pow", "(", "(", "motion_gt", "-", "map_imputation", ")", ",", "2", ")", ",", "axis", "=", "(", "1", ",", "2", ")", ")", "\n", "\n", "head", "=", "[", "'posterior_init'", ",", "'posterior_final'", ",", "'posterior_gt'", ",", "'mse_occluded'", ",", "'mse_map'", "]", "\n", "df", "=", "pd", ".", "DataFrame", "(", "posterior_init", ".", "cpu", "(", ")", ")", "\n", "#print(df.shape)", "\n", "#df[\"posterior_init\"] = posterior_init.cpu()", "\n", "df", "[", "\"posterior_final\"", "]", "=", "posterior_final", ".", "cpu", "(", ")", "\n", "df", "[", "\"posterior_gt\"", "]", "=", "posterior_gt", ".", "cpu", "(", ")", "\n", "df", "[", "\"MSE_occluded\"", "]", "=", "MSE_per_datapoint", ".", "cpu", "(", ")", "\n", "df", "[", "\"MSE_MAP_occluded\"", "]", "=", "MSE_MAP_per_datapoint", ".", "cpu", "(", ")", "\n", "#print(df.shape)", "\n", "#print(i)", "\n", "if", "i", "==", "0", ":", "\n", "            ", "df", ".", "to_csv", "(", "\"saved_models/HGVAE_warmup200_lre-3/10_optim\"", "+", "'/'", "+", "str", "(", "num_occlusions", ")", "+", "'_occlusions_inputs_MAP.csv'", ",", "header", "=", "head", ",", "index", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "with", "open", "(", "\"saved_models/HGVAE_warmup200_lre-3/10_optim\"", "+", "'/'", "+", "str", "(", "num_occlusions", ")", "+", "'_occlusions_inputs_MAP.csv'", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "df", ".", "to_csv", "(", "f", ",", "header", "=", "False", ",", "index", "=", "False", ")", "\n", "\n", "", "", "MSE", "=", "torch", ".", "mean", "(", "MSE_per_datapoint", ",", "axis", "=", "0", ")", "\n", "MSE_recon", "=", "torch", ".", "mean", "(", "MSE_MAP_per_datapoint", ",", "axis", "=", "0", ")", "\n", "MSE_log", ".", "append", "(", "MSE", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "MSE_recon_log", ".", "append", "(", "MSE_recon", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "MSE_log", ")", ",", "np", ".", "mean", "(", "MSE_recon_log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.amass.AMASS.__init__": [[12, 92], ["numpy.arange", "numpy.load", "torch.from_numpy().float().cuda", "range", "len", "print", "os.listdir", "torch.from_numpy().float", "os.path.isdir", "print", "os.listdir", "os.path.isdir", "numpy.load", "int", "range", "len", "torch.from_numpy().float().cuda", "poses.reshape.reshape.reshape", "torch.from_numpy().float().cuda.repeat", "datasets.utils.ang2joint", "numpy.arange", "amass.AMASS.p3d.append", "amass.AMASS.keys.append", "list", "amass.AMASS.data_idx.extend", "torch.from_numpy", "act.endswith", "datasets.utils.ang2joint.cpu().data.numpy", "numpy.arange", "numpy.arange", "len", "zip", "print", "torch.from_numpy().float", "torch.from_numpy", "datasets.utils.ang2joint.cpu"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.ang2joint"], ["    ", "def", "__init__", "(", "self", ",", "input_n", "=", "50", ",", "output_n", "=", "25", ",", "skip_rate", "=", "5", ",", "split", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "path_to_data", "=", "\"./datasets/amass/\"", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "in_n", "=", "input_n", "\n", "self", ".", "out_n", "=", "output_n", "\n", "\n", "self", ".", "p3d", "=", "[", "]", "\n", "self", ".", "keys", "=", "[", "]", "\n", "self", ".", "data_idx", "=", "[", "]", "\n", "self", ".", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "seq_len", "=", "self", ".", "in_n", "+", "self", ".", "out_n", "\n", "\n", "amass_splits", "=", "[", "\n", "[", "'CMU'", ",", "'MPI_Limits'", ",", "'TotalCapture'", ",", "'Eyes_Japan_Dataset'", ",", "'KIT'", ",", "'EKUT'", ",", "'TCD_handMocap'", ",", "'ACCAD'", "]", ",", "\n", "[", "'HumanEva'", ",", "'MPI_HDM05'", ",", "'SFU'", ",", "'MPI_mosh'", "]", ",", "\n", "[", "'BioMotionLab_NTroje'", "]", ",", "\n", "]", "\n", "\n", "# load mean skeleton", "\n", "skel", "=", "np", ".", "load", "(", "'./datasets/body_models/smpl_skeleton.npz'", ")", "\n", "p3d0", "=", "torch", ".", "from_numpy", "(", "skel", "[", "'p3d0'", "]", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "parents", "=", "skel", "[", "'parents'", "]", "\n", "parent", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "parents", ")", ")", ":", "\n", "            ", "parent", "[", "i", "]", "=", "parents", "[", "i", "]", "\n", "", "n", "=", "0", "\n", "for", "ds", "in", "amass_splits", "[", "split", "]", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "path_to_data", "+", "ds", ")", ":", "\n", "                ", "print", "(", "ds", ")", "\n", "continue", "\n", "", "print", "(", "'>>> loading {}'", ".", "format", "(", "ds", ")", ")", "\n", "for", "sub", "in", "os", ".", "listdir", "(", "self", ".", "path_to_data", "+", "ds", ")", ":", "\n", "                ", "if", "not", "os", ".", "path", ".", "isdir", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", ")", ":", "\n", "                    ", "continue", "\n", "", "for", "act", "in", "os", ".", "listdir", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", ")", ":", "\n", "                    ", "if", "not", "act", ".", "endswith", "(", "'.npz'", ")", ":", "\n", "                        ", "continue", "\n", "# if not ('walk' in act or 'jog' in act or 'run' in act or 'treadmill' in act):", "\n", "#     continue", "\n", "", "pose_all", "=", "np", ".", "load", "(", "self", ".", "path_to_data", "+", "ds", "+", "'/'", "+", "sub", "+", "'/'", "+", "act", ")", "\n", "try", ":", "\n", "                        ", "poses", "=", "pose_all", "[", "'poses'", "]", "\n", "", "except", ":", "\n", "                        ", "print", "(", "'no poses at {}_{}_{}'", ".", "format", "(", "ds", ",", "sub", ",", "act", ")", ")", "\n", "continue", "\n", "", "frame_rate", "=", "pose_all", "[", "'mocap_framerate'", "]", "\n", "# gender = pose_all['gender']", "\n", "# dmpls = pose_all['dmpls']", "\n", "# betas = pose_all['betas']", "\n", "# trans = pose_all['trans']", "\n", "fn", "=", "poses", ".", "shape", "[", "0", "]", "\n", "sample_rate", "=", "int", "(", "frame_rate", "//", "25", ")", "\n", "fidxs", "=", "range", "(", "0", ",", "fn", ",", "sample_rate", ")", "\n", "fn", "=", "len", "(", "fidxs", ")", "\n", "poses", "=", "poses", "[", "fidxs", "]", "\n", "poses", "=", "torch", ".", "from_numpy", "(", "poses", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "poses", "=", "poses", ".", "reshape", "(", "[", "fn", ",", "-", "1", ",", "3", "]", ")", "\n", "# remove global rotation", "\n", "poses", "[", ":", ",", "0", "]", "=", "0", "\n", "p3d0_tmp", "=", "p3d0", ".", "repeat", "(", "[", "fn", ",", "1", ",", "1", "]", ")", "\n", "p3d", "=", "ang2joint", "(", "p3d0_tmp", ",", "poses", ",", "parent", ")", "\n", "\n", "joint_used", "=", "np", ".", "arange", "(", "4", ",", "22", ")", "\n", "p3d", "=", "p3d", "[", ":", ",", "joint_used", ",", ":", "]", "*", "1000", "\n", "\n", "# self.p3d[(ds, sub, act)] = p3d.cpu().data.numpy()", "\n", "self", ".", "p3d", ".", "append", "(", "p3d", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ")", "\n", "if", "split", "==", "2", ":", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ",", "skip_rate", ")", "\n", "", "else", ":", "\n", "                        ", "valid_frames", "=", "np", ".", "arange", "(", "0", ",", "fn", "-", "seq_len", "+", "1", ",", "skip_rate", ")", "\n", "\n", "# tmp_data_idx_1 = [(ds, sub, act)] * len(valid_frames)", "\n", "", "self", ".", "keys", ".", "append", "(", "(", "ds", ",", "sub", ",", "act", ")", ")", "\n", "tmp_data_idx_1", "=", "[", "n", "]", "*", "len", "(", "valid_frames", ")", "\n", "tmp_data_idx_2", "=", "list", "(", "valid_frames", ")", "\n", "self", ".", "data_idx", ".", "extend", "(", "zip", "(", "tmp_data_idx_1", ",", "tmp_data_idx_2", ")", ")", "\n", "n", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.amass.AMASS.__len__": [[93, 95], ["numpy.shape"], "methods", ["None"], ["", "", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "shape", "(", "self", ".", "data_idx", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.amass.AMASS.__getitem__": [[96, 103], ["numpy.arange", "motion.reshape.reshape.reshape"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "item", ")", ":", "\n", "        ", "key", ",", "start_frame", "=", "self", ".", "data_idx", "[", "item", "]", "\n", "fs", "=", "np", ".", "arange", "(", "start_frame", ",", "start_frame", "+", "self", ".", "in_n", "+", "self", ".", "out_n", ")", "\n", "motion", "=", "self", ".", "p3d", "[", "key", "]", "[", "fs", "]", "\n", "seq_n", ",", "joint_n", ",", "_", "=", "motion", ".", "shape", "\n", "motion", "=", "motion", ".", "reshape", "(", "[", "joint_n", "*", "3", ",", "seq_n", "]", ")", "\n", "return", "motion", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.ang2joint": [[3, 36], ["len", "rodrigues().reshape", "results.append", "range", "torch.stack", "parent.keys", "utils.with_zeros", "results.append", "utils.rodrigues", "torch.cat", "torch.matmul", "pose.contiguous().view", "utils.with_zeros", "torch.reshape", "torch.cat", "pose.contiguous", "torch.reshape"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.with_zeros", "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.rodrigues", "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.with_zeros"], ["def", "ang2joint", "(", "p3d0", ",", "pose", ",", "\n", "parent", "=", "{", "0", ":", "-", "1", ",", "1", ":", "0", ",", "2", ":", "0", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "2", ",", "6", ":", "3", ",", "7", ":", "4", ",", "8", ":", "5", ",", "9", ":", "6", ",", "10", ":", "7", ",", "11", ":", "8", ",", "12", ":", "9", ",", "13", ":", "9", ",", "14", ":", "9", ",", "\n", "15", ":", "12", ",", "16", ":", "13", ",", "17", ":", "14", ",", "18", ":", "16", ",", "19", ":", "17", ",", "20", ":", "18", ",", "21", ":", "19", ",", "22", ":", "20", ",", "23", ":", "21", "}", ")", ":", "\n", "    ", "\"\"\"\n\n    :param p3d0:[batch_size, joint_num, 3]\n    :param pose:[batch_size, joint_num, 3]\n    :param parent:\n    :return:\n    \"\"\"", "\n", "batch_num", "=", "p3d0", ".", "shape", "[", "0", "]", "\n", "jnum", "=", "len", "(", "parent", ".", "keys", "(", ")", ")", "\n", "J", "=", "p3d0", "\n", "R_cube_big", "=", "rodrigues", "(", "pose", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "batch_num", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "\n", "with_zeros", "(", "torch", ".", "cat", "(", "(", "R_cube_big", "[", ":", ",", "0", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "0", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "dim", "=", "2", ")", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "jnum", ")", ":", "\n", "        ", "results", ".", "append", "(", "\n", "torch", ".", "matmul", "(", "\n", "results", "[", "parent", "[", "i", "]", "]", ",", "\n", "with_zeros", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "R_cube_big", "[", ":", ",", "i", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "i", ",", ":", "]", "-", "J", "[", ":", ",", "parent", "[", "i", "]", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "\n", "dim", "=", "2", "\n", ")", "\n", ")", "\n", ")", "\n", ")", "\n", "", "stacked", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n", "J_transformed", "=", "stacked", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "return", "J_transformed", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.rodrigues": [[37, 68], ["r.clone().normal_", "torch.norm", "torch.cos", "torch.zeros().to", "torch.stack", "torch.reshape", "r_hat.permute", "torch.matmul", "r.clone", "torch.zeros", "torch.sin", "torch.eye().unsqueeze", "torch.zeros", "torch.eye"], "function", ["None"], ["", "def", "rodrigues", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    Rodrigues' rotation formula that turns axis-angle tensor into rotation\n    matrix in a batch-ed manner.\n\n    Parameter:\n    ----------\n    r: Axis-angle rotation tensor of shape [batch_size * angle_num, 1, 3].\n\n    Return:\n    -------\n    Rotation matrix of shape [batch_size * angle_num, 3, 3].\n\n    \"\"\"", "\n", "eps", "=", "r", ".", "clone", "(", ")", ".", "normal_", "(", "std", "=", "1e-8", ")", "\n", "theta", "=", "torch", ".", "norm", "(", "r", "+", "eps", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "\n", "# theta = torch.norm(r, dim=(1, 2), keepdim=True)  # dim cannot be tuple", "\n", "theta_dim", "=", "theta", ".", "shape", "[", "0", "]", "\n", "r_hat", "=", "r", "/", "theta", "\n", "cos", "=", "torch", ".", "cos", "(", "theta", ")", "\n", "z_stick", "=", "torch", ".", "zeros", "(", "theta_dim", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "r", ".", "device", ")", "\n", "m", "=", "torch", ".", "stack", "(", "\n", "(", "z_stick", ",", "-", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "z_stick", ",", "\n", "-", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "-", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "z_stick", ")", ",", "dim", "=", "1", ")", "\n", "m", "=", "torch", ".", "reshape", "(", "m", ",", "(", "-", "1", ",", "3", ",", "3", ")", ")", "\n", "i_cube", "=", "(", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "+", "torch", ".", "zeros", "(", "(", "theta_dim", ",", "3", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", ".", "to", "(", "r", ".", "device", ")", "\n", "A", "=", "r_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "dot", "=", "torch", ".", "matmul", "(", "A", ",", "r_hat", ")", "\n", "R", "=", "cos", "*", "i_cube", "+", "(", "1", "-", "cos", ")", "*", "dot", "+", "torch", ".", "sin", "(", "theta", ")", "*", "m", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.with_zeros": [[70, 88], ["torch.tensor().expand().to", "torch.cat", "torch.tensor().expand", "torch.tensor"], "function", ["None"], ["", "def", "with_zeros", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Append a [0, 0, 0, 1] tensor to a [3, 4] tensor.\n\n    Parameter:\n    ---------\n    x: Tensor to be appended.\n\n    Return:\n    ------\n    Tensor after appending of shape [4,4]\n\n    \"\"\"", "\n", "ones", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "dtype", "=", "torch", ".", "float", "\n", ")", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "x", ",", "ones", ")", ",", "dim", "=", "1", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.datasets.utils.pack": [[90, 107], ["torch.zeros().to", "torch.cat", "torch.zeros"], "function", ["None"], ["", "def", "pack", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Append zero tensors of shape [4, 3] to a batch of [4, 1] shape tensor.\n\n    Parameter:\n    ----------\n    x: A tensor of shape [batch_size, 4, 1]\n\n    Return:\n    ------\n    A tensor of shape [batch_size, 4, 4] after appending.\n\n    \"\"\"", "\n", "zeros43", "=", "torch", ".", "zeros", "(", "\n", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "4", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "zeros43", ",", "x", ")", ",", "dim", "=", "3", ")", "\n", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.experiments.utils.simulate_motion_occlusions": [[3, 33], ["numpy.copy", "numpy.random.default_rng", "numpy.zeros", "np.random.default_rng.shuffle", "occlude_mask.astype.reshape", "occlude_mask.astype.astype", "numpy.loadtxt", "numpy.repeat", "numpy.sum", "numpy.sum", "str", "np.loadtxt.reshape"], "function", ["None"], ["def", "ang2joint", "(", "p3d0", ",", "pose", ",", "\n", "parent", "=", "{", "0", ":", "-", "1", ",", "1", ":", "0", ",", "2", ":", "0", ",", "3", ":", "0", ",", "4", ":", "1", ",", "5", ":", "2", ",", "6", ":", "3", ",", "7", ":", "4", ",", "8", ":", "5", ",", "9", ":", "6", ",", "10", ":", "7", ",", "11", ":", "8", ",", "12", ":", "9", ",", "13", ":", "9", ",", "14", ":", "9", ",", "\n", "15", ":", "12", ",", "16", ":", "13", ",", "17", ":", "14", ",", "18", ":", "16", ",", "19", ":", "17", ",", "20", ":", "18", ",", "21", ":", "19", ",", "22", ":", "20", ",", "23", ":", "21", "}", ")", ":", "\n", "    ", "\"\"\"\n\n    :param p3d0:[batch_size, joint_num, 3]\n    :param pose:[batch_size, joint_num, 3]\n    :param parent:\n    :return:\n    \"\"\"", "\n", "batch_num", "=", "p3d0", ".", "shape", "[", "0", "]", "\n", "jnum", "=", "len", "(", "parent", ".", "keys", "(", ")", ")", "\n", "J", "=", "p3d0", "\n", "R_cube_big", "=", "rodrigues", "(", "pose", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "batch_num", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "\n", "with_zeros", "(", "torch", ".", "cat", "(", "(", "R_cube_big", "[", ":", ",", "0", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "0", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "dim", "=", "2", ")", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "jnum", ")", ":", "\n", "        ", "results", ".", "append", "(", "\n", "torch", ".", "matmul", "(", "\n", "results", "[", "parent", "[", "i", "]", "]", ",", "\n", "with_zeros", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "R_cube_big", "[", ":", ",", "i", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "i", ",", ":", "]", "-", "J", "[", ":", ",", "parent", "[", "i", "]", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "\n", "dim", "=", "2", "\n", ")", "\n", ")", "\n", ")", "\n", ")", "\n", "", "stacked", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.experiments.utils.add_noise": [[34, 47], ["numpy.copy", "numpy.random.uniform"], "function", ["None"], ["J_transformed", "=", "stacked", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "return", "J_transformed", "\n", "\n", "", "def", "rodrigues", "(", "r", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.__init__": [[22, 45], ["torch.GELU", "torch.GELU", "torch.Module.__init__", "print", "models.encoders.GraphVDEncoder", "models.decoders.GraphVDDecoder", "models.num_parameters_and_place_on_device"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.num_parameters_and_place_on_device"], ["    ", "def", "__init__", "(", "self", ",", "input_n", "=", "[", "54", ",", "50", "]", ",", "act_fn", "=", "nn", ".", "GELU", "(", ")", ",", "variational", "=", "False", ",", "output_variance", "=", "False", ",", "device", "=", "\"cuda\"", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        :param input_n: num of input feature; (graph_n, feature_n)\n        :param hidden_layers: num of hidden feature, decoder is made symmetric\n        :param n_z: latent variable size\n        :param p_dropout: drop out prob.\n        :param num_stage: number of residual blocks\n        :param node_n: number of nodes in graph\n        \"\"\"", "\n", "super", "(", "HGVAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\">>> creating model\"", ")", "\n", "\n", "self", ".", "activation", "=", "act_fn", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "output_variance", "=", "output_variance", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "\n", "self", ".", "encoder", "=", "GraphVDEncoder", "(", "input_n", "=", "input_n", ",", "act_fn", "=", "self", ".", "activation", ",", "device", "=", "self", ".", "device", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "p_dropout", "=", "self", ".", "p_dropout", ")", "\n", "self", ".", "decoder", "=", "GraphVDDecoder", "(", "input_n", "=", "input_n", ",", "encoder_activation_sizes", "=", "self", ".", "encoder", ".", "level_output_sizes", ",", "act_fn", "=", "self", ".", "activation", ",", "device", "=", "self", ".", "device", ",", "batch_norm", "=", "self", ".", "batch_norm", ",", "p_dropout", "=", "self", ".", "p_dropout", ")", "\n", "\n", "self", ".", "num_parameters", "=", "utils", ".", "num_parameters_and_place_on_device", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.forward": [[46, 59], ["HGVAE.HGVAE.encoder.forward", "HGVAE.HGVAE.decoder"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.forward"], ["", "def", "forward", "(", "self", ",", "x", ",", "z_0", "=", "None", ",", "one_hot_labels", "=", "None", ",", "latent_resolution", "=", "999", ")", ":", "\n", "        ", "\"\"\"\n        :param x: batch of samples\n        :return: reconstructions and latent value\n        \"\"\"", "\n", "#Bottom Up", "\n", "encoder_activations", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "\n", "# Top Down", "\n", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", ",", "self", ".", "zs", ",", "self", ".", "KLs", "=", "self", ".", "decoder", "(", "encoder_activations", "=", "encoder_activations", ",", "one_hot_labels", "=", "one_hot_labels", ",", "latent_resolution", "=", "latent_resolution", ")", "\n", "\n", "\n", "return", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", ",", "self", ".", "zs", ",", "self", ".", "KLs", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.generate": [[62, 84], ["range", "HGVAE.HGVAE.decoder.decoder_block_final", "HGVAE.HGVAE.decoder.reparametisation_output", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid.", "HGVAE.HGVAE.decoder.resize_conv_0", "HGVAE.HGVAE.decoder.top_down_decode", "len", "str", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.decoders.GraphVDDecoder.top_down_decode"], ["", "def", "generate", "(", "self", ",", "z", ",", "distribution", "=", "'gaussian'", ",", "latent_resolution", "=", "0", ",", "z_prev_level", "=", "0", ",", "one_hot_labels", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param z: batch of random variables\n        :return: batch of generated samples\n        \"\"\"", "\n", "if", "z_prev_level", "==", "0", "and", "z", "!=", "None", ":", "\n", "            ", "self", ".", "decoder", ".", "zs", "[", "\"0\"", "]", "=", "z", "\n", "self", ".", "decoder", ".", "residuals_dict", "[", "\"0\"", "]", "=", "self", ".", "decoder", ".", "resize_conv_0", "(", "self", ".", "decoder", ".", "zs", "[", "\"0\"", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "z_prev_level", ",", "len", "(", "self", ".", "decoder", ".", "encoder_activation_sizes", ")", "-", "2", ")", ":", "\n", "            ", "self", ".", "decoder", ".", "KLs", "[", "str", "(", "i", "+", "1", ")", "]", ",", "self", ".", "decoder", ".", "zs", "[", "str", "(", "i", "+", "1", ")", "]", "=", "self", ".", "decoder", ".", "top_down_decode", "(", "level", "=", "i", ",", "X_supplied", "=", "False", ",", "latent_resolution", "=", "latent_resolution", ")", "\n", "\n", "", "decoder_output_final", "=", "self", ".", "decoder", ".", "decoder_block_final", "(", "self", ".", "decoder", ".", "residuals_dict", "[", "str", "(", "len", "(", "self", ".", "decoder", ".", "encoder_activation_sizes", ")", "-", "2", ")", "]", ")", "\n", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", "=", "self", ".", "decoder", ".", "reparametisation_output", "(", "decoder_output_final", ")", "\n", "\n", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "bernoulli_output", "=", "sig", "(", "self", ".", "reconstructions_mu", ")", "\n", "\n", "if", "distribution", "==", "'gaussian'", ":", "\n", "            ", "return", "self", ".", "reconstructions_mu", "\n", "", "elif", "distribution", "==", "'bernoulli'", ":", "\n", "            ", "return", "self", ".", "bernoulli_output", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.cal_loss": [[86, 109], ["models.cal_gauss_log_lik", "sum", "models.cal_VLB", "torch.ones().to().float", "torch.ones().to().float", "torch.ones().to().float", "torch.ones().to().float", "models.cal_bernoulli_log_lik", "KLs.values", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_VLB", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_bernoulli_log_lik"], ["", "", "def", "cal_loss", "(", "self", ",", "x", ",", "mu_hat", ",", "logvar_hat", "=", "None", ",", "KLs", "=", "None", ",", "distribution", "=", "'gaussian'", ")", ":", "\n", "        ", "\"\"\"\n        :param x: batch of inputs\n        :return: loss of reconstructions\n        \"\"\"", "\n", "\n", "if", "distribution", "==", "'gaussian'", ":", "\n", "            ", "if", "not", "self", ".", "output_variance", ":", "\n", "                ", "b_n", ",", "f_n", "=", "mu_hat", ".", "shape", "\n", "logvar_hat", "=", "torch", ".", "ones", "(", "(", "b_n", ",", "f_n", ")", ")", ".", "to", "(", "self", ".", "device", ")", ".", "float", "(", ")", "\n", "", "self", ".", "log_lik", ",", "self", ".", "mse", "=", "utils", ".", "cal_gauss_log_lik", "(", "x", ",", "mu_hat", ",", "logvar_hat", ")", "\n", "self", ".", "recon_loss", "=", "self", ".", "mse", "\n", "", "elif", "distribution", "==", "'bernoulli'", ":", "\n", "            ", "self", ".", "log_lik", "=", "utils", ".", "cal_bernoulli_log_lik", "(", "x", ",", "mu_hat", ")", "\n", "self", ".", "recon_loss", "=", "-", "self", ".", "log_lik", "\n", "\n", "", "if", "self", ".", "variational", ":", "\n", "            ", "self", ".", "KL", "=", "sum", "(", "KLs", ".", "values", "(", ")", ")", "\n", "self", ".", "VLB", "=", "utils", ".", "cal_VLB", "(", "self", ".", "log_lik", ",", "self", ".", "KL", ",", "self", ".", "beta", ")", "\n", "self", ".", "loss", "=", "-", "self", ".", "VLB", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "-", "self", ".", "log_lik", "\n", "", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.cal_posterior": [[110, 135], ["HGVAE.HGVAE.encoder.forward", "HGVAE.HGVAE.decoder", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "y.reshape.reshape.reshape", "mu.reshape.reshape.reshape", "log_var.reshape.reshape.reshape", "models.cal_gauss_log_lik_per_datapoint", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "len", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.forward", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik_per_datapoint"], ["", "def", "cal_posterior", "(", "self", ",", "x", ",", "latent_resolution", "=", "999", ")", ":", "\n", "#Bottom Up", "\n", "        ", "b_n", "=", "x", ".", "shape", "[", "0", "]", "\n", "encoder_activations", "=", "self", ".", "encoder", ".", "forward", "(", "x", ")", "\n", "\n", "# Top Down", "\n", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", ",", "self", ".", "zs", ",", "self", ".", "KLs", "=", "self", ".", "decoder", "(", "encoder_activations", "=", "encoder_activations", ",", "latent_resolution", "=", "latent_resolution", ")", "\n", "\n", "self", ".", "z_posterior_mus", ",", "self", ".", "z_posterior_log_vars", "=", "self", ".", "decoder", ".", "z_posterior_mus", ",", "self", ".", "decoder", ".", "z_posterior_log_vars", "\n", "self", ".", "z_prior_mus", ",", "self", ".", "z_prior_log_vars", "=", "self", ".", "decoder", ".", "z_prior_mus", ",", "self", ".", "decoder", ".", "z_prior_log_vars", "\n", "\n", "self", ".", "posterior", "=", "torch", ".", "zeros", "(", "b_n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "posteriors", "=", "{", "}", "\n", "for", "level", "in", "range", "(", "0", ",", "len", "(", "self", ".", "decoder", ".", "encoder_activation_sizes", ")", "-", "2", ")", ":", "\n", "            ", "y", "=", "self", ".", "z_posterior_mus", "[", "str", "(", "level", ")", "]", "\n", "mu", "=", "self", ".", "z_prior_mus", "[", "str", "(", "level", ")", "]", "\n", "log_var", "=", "self", ".", "z_prior_log_vars", "[", "str", "(", "level", ")", "]", "\n", "\n", "y", "=", "y", ".", "reshape", "(", "b_n", ",", "-", "1", ")", "\n", "mu", "=", "mu", ".", "reshape", "(", "b_n", ",", "-", "1", ")", "\n", "log_var", "=", "log_var", ".", "reshape", "(", "b_n", ",", "-", "1", ")", "\n", "self", ".", "posteriors", "[", "str", "(", "level", ")", "]", ",", "_", "=", "utils", ".", "cal_gauss_log_lik_per_datapoint", "(", "y", ",", "mu", ",", "log_var", "=", "log_var", ")", "\n", "self", ".", "posterior", "=", "self", ".", "posterior", "+", "self", ".", "posteriors", "[", "str", "(", "level", ")", "]", "#log probabilities!", "\n", "\n", "", "return", "self", ".", "posterior", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.HGVAE.HGVAE.gradient_ascent_on_posterior": [[137, 170], ["HGVAE.HGVAE.eval", "models.layers.ParametiseInputs", "models.layers.ParametiseInputs.to", "HGVAE.HGVAE.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "models.layers.ParametiseInputs.", "models.dct", "HGVAE.HGVAE.cal_posterior", "HGVAE.HGVAE.optimizer.zero_grad", "neg_log_posterior.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "posterior[].detach", "inputs_with_parameters[].detach", "torch.zeros().to.detach", "torch.zeros().to.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "models.dct.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "HGVAE.HGVAE.parameters", "HGVAE.HGVAE.detach", "posterior_max.detach", "posterior_init.detach", "posterior_max.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_posterior"], ["", "def", "gradient_ascent_on_posterior", "(", "self", ",", "inputs_occluded", ",", "occlusion_mask", ")", ":", "\n", "        ", "batch_size", ",", "f_n", ",", "t_n", "=", "inputs_occluded", ".", "shape", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "parametise_inputs", "=", "ParametiseInputs", "(", "inputs_occluded", ")", "\n", "parametise_inputs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "parametise_inputs", ".", "inputs_as_parameters", ".", "requires_grad", "=", "True", "\n", "# optimizer = torch.optim.SGD({parametise_inputs.inputs_as_parameters}, lr=1e4)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "{", "parametise_inputs", ".", "inputs_as_parameters", "}", ",", "lr", "=", "1.0", ")", "\n", "\n", "posterior_max", "=", "-", "1e10", "*", "torch", ".", "ones", "(", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "inputs_best", "=", "torch", ".", "zeros", "(", "inputs_occluded", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "inputs_with_parameters", "=", "parametise_inputs", "(", "inputs_occluded", ",", "occlusion_mask", ")", "\n", "inputs_with_parameters_dct", "=", "utils", ".", "dct", "(", "self", ",", "inputs_with_parameters", ")", "\n", "posterior", "=", "self", ".", "cal_posterior", "(", "inputs_with_parameters_dct", ".", "float", "(", ")", ",", "latent_resolution", "=", "999", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "posterior_init", "=", "posterior", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "neg_log_posterior", "=", "-", "torch", ".", "mean", "(", "posterior", ")", "\n", "neg_log_posterior", ".", "backward", "(", ")", "\n", "total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "best_posteriors_bool", "=", "(", "posterior", ".", "detach", "(", ")", ">", "posterior_max", ".", "detach", "(", ")", ")", "\n", "posterior_max", "[", "best_posteriors_bool", "]", "=", "posterior", "[", "best_posteriors_bool", "]", ".", "detach", "(", ")", "\n", "inputs_best", "[", "best_posteriors_bool", ",", ":", ",", ":", "]", "=", "inputs_with_parameters", "[", "best_posteriors_bool", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "\n", "", "return", "inputs_best", ".", "detach", "(", ")", ",", "(", "posterior_init", ".", "detach", "(", ")", ",", "posterior_max", ".", "detach", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.encoders.GraphVDEncoder.__init__": [[8, 48], ["nn.GELU", "nn.Module.__init__", "print", "range", "nn.ModuleList", "nn.ModuleList", "nn.ModuleList", "nn.ModuleList", "encoders.GraphVDEncoder.graphconv_reductions.append", "encoders.GraphVDEncoder.graphconv_blocks.append", "encoders.GraphVDEncoder.graphconv_residual_reductions.append", "encoders.GraphVDEncoder.rezeros.append", "len", "GraphConvolution", "GC_Block", "GraphConvolution", "ReZero", "nn.GELU"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_n", "=", "[", "96", ",", "10", "]", ",", "act_fn", "=", "nn", ".", "GELU", "(", ")", ",", "device", "=", "\"cuda\"", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        :param input_feature: num of input feature\n        :param hidden_feature: num of hidden feature\n        :param p_dropout: drop out prob.\n        :param num_stage: number of residual blocks\n        :param node_n: number of nodes in graph\n        \"\"\"", "\n", "super", "(", "GraphVDEncoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "act_fn", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "self", ".", "node_n", ",", "self", ".", "features", "=", "input_n", "[", "0", "]", ",", "input_n", "[", "1", "]", "\n", "\n", "# input_n -> input_n corresponding to z_bottom -> .... -> N_{z_0} corresponding to z_top", "\n", "#self.level_output_sizes = [[self.node_n, self.features], [self.node_n, 128]]", "\n", "self", ".", "level_output_sizes", "=", "[", "[", "self", ".", "node_n", ",", "self", ".", "features", "]", ",", "[", "self", ".", "node_n", ",", "128", "]", ",", "[", "24", ",", "128", "]", ",", "[", "8", ",", "128", "]", ",", "[", "1", ",", "256", "]", "]", "\n", "#self.level_output_sizes = [[self.node_n, self.features], [self.node_n, 64], [8, 128], [1, 256]]", "\n", "#self.level_output_sizes = [[self.node_n, self.features], [self.node_n, 256], [48, 256], [32, 256], [16, 256], [8, 256], [4, 256], [2, 256], [1, 256]]", "\n", "print", "(", "self", ".", "level_output_sizes", ")", "\n", "\n", "#Bottom Up", "\n", "self", ".", "graphconv_blocks", "=", "[", "]", "\n", "self", ".", "graphconv_reductions", "=", "[", "]", "\n", "self", ".", "graphconv_residual_reductions", "=", "[", "]", "\n", "self", ".", "rezeros", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "level_output_sizes", ")", "-", "1", ")", ":", "\n", "            ", "in_graph_size", "=", "self", ".", "level_output_sizes", "[", "i", "]", "[", "0", "]", "\n", "in_feature_size", "=", "self", ".", "level_output_sizes", "[", "i", "]", "[", "1", "]", "\n", "out_graph_size", "=", "self", ".", "level_output_sizes", "[", "i", "+", "1", "]", "[", "0", "]", "\n", "out_feature_size", "=", "self", ".", "level_output_sizes", "[", "i", "+", "1", "]", "[", "1", "]", "\n", "self", ".", "graphconv_reductions", ".", "append", "(", "GraphConvolution", "(", "in_feature_size", ",", "out_feature_size", ",", "bias", "=", "True", ",", "node_n", "=", "in_graph_size", ",", "out_node_n", "=", "out_graph_size", ")", ")", "\n", "self", ".", "graphconv_blocks", ".", "append", "(", "GC_Block", "(", "out_feature_size", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "out_graph_size", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", ")", "\n", "self", ".", "graphconv_residual_reductions", ".", "append", "(", "GraphConvolution", "(", "in_feature_size", ",", "out_feature_size", ",", "bias", "=", "True", ",", "node_n", "=", "in_graph_size", ",", "out_node_n", "=", "out_graph_size", ")", ")", "\n", "self", ".", "rezeros", ".", "append", "(", "ReZero", "(", ")", ")", "\n", "", "self", ".", "graphconv_blocks", "=", "nn", ".", "ModuleList", "(", "self", ".", "graphconv_blocks", ")", "\n", "self", ".", "graphconv_reductions", "=", "nn", ".", "ModuleList", "(", "self", ".", "graphconv_reductions", ")", "\n", "self", ".", "graphconv_residual_reductions", "=", "nn", ".", "ModuleList", "(", "self", ".", "graphconv_residual_reductions", ")", "\n", "self", ".", "rezeros", "=", "nn", ".", "ModuleList", "(", "self", ".", "rezeros", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.encoders.GraphVDEncoder.forward": [[49, 63], ["range", "encoders.GraphVDEncoder.activations.append", "len"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "#Bottom Up", "\n", "        ", "self", ".", "activations", "=", "[", "]", "\n", "y", "=", "x", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "level_output_sizes", ")", "-", "1", ")", ":", "\n", "            ", "conv_y", "=", "self", ".", "graphconv_reductions", "[", "i", "]", "(", "y", ")", "\n", "encoder_output", "=", "self", ".", "graphconv_blocks", "[", "i", "]", "(", "conv_y", ")", "\n", "\n", "self", ".", "activations", ".", "append", "(", "encoder_output", ")", "\n", "\n", "res", "=", "self", ".", "graphconv_residual_reductions", "[", "i", "]", "(", "y", ")", "\n", "y", "=", "res", "+", "self", ".", "rezeros", "[", "i", "]", "(", "encoder_output", ")", "\n", "\n", "", "return", "self", ".", "activations", "", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.ParametiseInputs.__init__": [[8, 17], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        ParametiseInputs make masked inputs parameters\n        :param self:\n        :return:\n        \"\"\"", "\n", "super", "(", "ParametiseInputs", ",", "self", ")", ".", "__init__", "(", ")", "\n", "#self.inputs_as_parameters = Parameter(name=\"inputs_as_params\", param=torch.FloatTensor(inputs.shape))", "\n", "self", ".", "inputs_as_parameters", "=", "Parameter", "(", "torch", ".", "randn", "(", "inputs", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.ParametiseInputs.forward": [[18, 21], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "mask_occluded", ")", ":", "\n", "        ", "inputs_with_parameters", "=", "(", "1.0", "-", "mask_occluded", ")", "*", "inputs", "+", "mask_occluded", "*", "self", ".", "inputs_as_parameters", "\n", "return", "inputs_with_parameters", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.ReZero.__init__": [[23, 31], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        ReZero layer, learnable weight for residuals\n        :param self:\n        :return:\n        \"\"\"", "\n", "super", "(", "ReZero", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "resweight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "[", "0.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.ReZero.forward": [[32, 35], ["torch.mul", "torch.mul", "torch.mul", "torch.mul"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "torch", ".", "mul", "(", "input", ",", "self", ".", "resweight", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FullyConnected.__init__": [[37, 55], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.FullyConnected.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.FullyConnected.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Fully connected layer of learnable weights with learnable bias\n        :param self:\n        :param in_features: number neurons in\n        :param out_features: num neurons out\n        :param bias: to use bias (boole)\n        :return:\n        \"\"\"", "\n", "super", "(", "FullyConnected", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FullyConnected.reset_parameters": [[56, 61], ["layers.FullyConnected.weight.data.uniform_", "math.sqrt", "layers.FullyConnected.bias.data.uniform_", "layers.FullyConnected.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FullyConnected.forward": [[62, 68], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FullyConnected.__repr__": [[69, 73], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.NeuralNetworkBlock.__init__": [[75, 93], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "numpy.array", "range", "torch.ModuleList", "torch.ModuleList", "layers.NeuralNetworkBlock.fc_blocks.append", "layers.FC_Block"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "layers", "=", "[", "48", ",", "100", ",", "50", ",", "2", "]", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        :param layers: array where each entry is number of neurons at that layer\n        :param activation: activation function to use\n        :param batch_norm: to use batch norm (boole).\n        :param p_dropout: drop out prob.\n        \"\"\"", "\n", "super", "(", "NeuralNetworkBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_x", "=", "layers", "[", "0", "]", "\n", "self", ".", "n_z", "=", "layers", "[", "-", "1", "]", "\n", "self", ".", "layers", "=", "np", ".", "array", "(", "layers", ")", "\n", "self", ".", "n_layers", "=", "self", ".", "layers", ".", "shape", "[", "0", "]", "-", "1", "\n", "\n", "self", ".", "fc_blocks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "self", ".", "fc_blocks", ".", "append", "(", "FC_Block", "(", "self", ".", "layers", "[", "i", "]", ",", "self", ".", "layers", "[", "i", "+", "1", "]", ",", "activation", "=", "activation", ",", "batch_norm", "=", "batch_norm", ",", "p_dropout", "=", "p_dropout", ",", "bias", "=", "True", ")", ")", "\n", "", "self", ".", "fc_blocks", "=", "nn", ".", "ModuleList", "(", "self", ".", "fc_blocks", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.NeuralNetworkBlock.forward": [[94, 100], ["range"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "for", "i", "in", "range", "(", "self", ".", "n_layers", ")", ":", "\n", "            ", "y", "=", "self", ".", "fc_blocks", "[", "i", "]", "(", "y", ")", "\n", "\n", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphGaussianBlock.__init__": [[102, 115], ["torch.Module.__init__", "layers.GraphConvolution", "layers.GraphConvolution"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_nodes", ",", "in_features", ",", "n_z_nodes", ",", "n_z_features", ")", ":", "\n", "        ", "\"\"\"\n        :param input_feature: num of input feature\n        :param n_z: dim of distribution\n        \"\"\"", "\n", "super", "(", "GraphGaussianBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "in_nodes", "=", "in_nodes", "\n", "self", ".", "n_z_features", "=", "n_z_features", "\n", "self", ".", "n_z_nodes", "=", "n_z_nodes", "\n", "\n", "self", ".", "z_mu_graphconv", "=", "GraphConvolution", "(", "in_features", ",", "n_z_features", ",", "bias", "=", "True", ",", "node_n", "=", "in_nodes", ",", "out_node_n", "=", "n_z_nodes", ")", "#FullyConnected(self.n_x, self.n_z)", "\n", "self", ".", "z_log_var_graphconv", "=", "GraphConvolution", "(", "in_features", ",", "n_z_features", ",", "bias", "=", "True", ",", "node_n", "=", "in_nodes", ",", "out_node_n", "=", "n_z_nodes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphGaussianBlock.forward": [[116, 124], ["layers.GraphGaussianBlock.z_mu_graphconv", "layers.GraphGaussianBlock.z_log_var_graphconv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "\n", "mu", "=", "self", ".", "z_mu_graphconv", "(", "y", ")", "\n", "log_var", "=", "self", ".", "z_log_var_graphconv", "(", "y", ")", "\n", "log_var", "=", "torch", ".", "clamp", "(", "log_var", ",", "min", "=", "-", "20.0", ",", "max", "=", "3.0", ")", "\n", "\n", "return", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GaussianBlock.__init__": [[126, 137], ["torch.Module.__init__", "layers.FullyConnected", "layers.FullyConnected"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "n_z", ")", ":", "\n", "        ", "\"\"\"\n        :param input_feature: num of input feature\n        :param n_z: dim of distribution\n        \"\"\"", "\n", "super", "(", "GaussianBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_x", "=", "in_features", "\n", "self", ".", "n_z", "=", "n_z", "\n", "\n", "self", ".", "z_mu_fc", "=", "FullyConnected", "(", "self", ".", "n_x", ",", "self", ".", "n_z", ")", "\n", "self", ".", "z_log_var_fc", "=", "FullyConnected", "(", "self", ".", "n_x", ",", "self", ".", "n_z", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GaussianBlock.forward": [[138, 146], ["layers.GaussianBlock.z_mu_fc", "layers.GaussianBlock.z_log_var_fc", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "x", "\n", "\n", "mu", "=", "self", ".", "z_mu_fc", "(", "y", ")", "\n", "log_var", "=", "self", ".", "z_log_var_fc", "(", "y", ")", "\n", "log_var", "=", "torch", ".", "clamp", "(", "log_var", ",", "min", "=", "-", "20.0", ",", "max", "=", "3.0", ")", "\n", "\n", "return", "mu", ",", "log_var", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphLayer.__init__": [[149, 155], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphLayer.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "node_n", "=", "48", ",", "out_node_n", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "out_node_n", "is", "None", ":", "\n", "            ", "out_node_n", "=", "node_n", "\n", "", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_node_n", ",", "node_n", ")", ")", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphLayer.reset_parameters": [[156, 162], ["layers.GraphLayer.weight.data.uniform_", "layers.GraphLayer.att.data.uniform_", "math.sqrt", "layers.GraphLayer.bias.data.uniform_", "layers.GraphLayer.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "att", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphLayer.forward": [[163, 166], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "torch", ".", "matmul", "(", "self", ".", "att", ",", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphLayer.__repr__": [[167, 171], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.Graph_Block.__init__": [[173, 185], ["torch.GELU", "torch.GELU", "torch.Module.__init__", "layers.GraphLayer", "layers.GraphLayer", "layers.ReZero", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "p_dropout", ",", "node_n", "=", "48", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Define a residual block of GCN\n        \"\"\"", "\n", "super", "(", "GC_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "g1", "=", "GraphLayer", "(", "node_n", "=", "node_n", ")", "\n", "self", ".", "g2", "=", "GraphLayer", "(", "node_n", "=", "node_n", ")", "\n", "self", ".", "rezero", "=", "ReZero", "(", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "self", ".", "act_f", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.Graph_Block.forward": [[186, 196], ["layers.Graph_Block.g1", "layers.Graph_Block.act_f", "layers.Graph_Block.do", "layers.Graph_Block.g2", "layers.Graph_Block.act_f", "layers.Graph_Block.do", "layers.Graph_Block.rezero"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "g1", "(", "x", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "g2", "(", "y", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "return", "x", "+", "self", ".", "rezero", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.Graph_Block.__repr__": [[197, 201], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.__init__": [[205, 218], ["torch.Module.__init__", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "layers.GraphConvolution.register_parameter", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "node_n", "=", "48", ",", "out_node_n", "=", "None", ")", ":", "\n", "        ", "super", "(", "GraphConvolution", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "out_node_n", "is", "None", ":", "\n", "            ", "out_node_n", "=", "node_n", "\n", "", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "att", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_node_n", ",", "node_n", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "Parameter", "(", "torch", ".", "FloatTensor", "(", "out_features", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.reset_parameters": [[219, 225], ["layers.GraphConvolution.weight.data.uniform_", "layers.GraphConvolution.att.data.uniform_", "math.sqrt", "layers.GraphConvolution.bias.data.uniform_", "layers.GraphConvolution.weight.size"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "self", ".", "weight", ".", "size", "(", "1", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "self", ".", "att", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "self", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.forward": [[226, 233], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "support", "=", "torch", ".", "matmul", "(", "input", ",", "self", ".", "weight", ")", "\n", "output", "=", "torch", ".", "matmul", "(", "self", ".", "att", ",", "support", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "return", "output", "+", "self", ".", "bias", "\n", "", "else", ":", "\n", "            ", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GraphConvolution.__repr__": [[234, 238], ["str", "str"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GC_Block.__init__": [[241, 255], ["torch.GELU", "torch.GELU", "torch.Module.__init__", "layers.GraphConvolution", "layers.GraphConvolution", "layers.ReZero", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "48", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", ":", "\n", "        ", "\"\"\"\n        Define a residual block of GCN\n        \"\"\"", "\n", "super", "(", "GC_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "in_features", "\n", "\n", "self", ".", "gc1", "=", "GraphConvolution", "(", "in_features", ",", "in_features", ",", "node_n", "=", "node_n", ",", "bias", "=", "bias", ")", "\n", "self", ".", "gc2", "=", "GraphConvolution", "(", "in_features", ",", "in_features", ",", "node_n", "=", "node_n", ",", "bias", "=", "bias", ")", "\n", "self", ".", "rezero", "=", "ReZero", "(", ")", "\n", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "self", ".", "act_f", "=", "activation", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GC_Block.forward": [[256, 266], ["layers.GC_Block.gc1", "layers.GC_Block.act_f", "layers.GC_Block.do", "layers.GC_Block.gc2", "layers.GC_Block.act_f", "layers.GC_Block.do", "layers.GC_Block.rezero"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "gc1", "(", "x", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "y", "=", "self", ".", "gc2", "(", "y", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "\n", "return", "x", "+", "self", ".", "rezero", "(", "y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.GC_Block.__repr__": [[267, 271], ["str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FC_Block.__init__": [[274, 289], ["torch.LeakyReLU", "torch.LeakyReLU", "torch.Module.__init__", "torch.Dropout", "torch.Dropout", "layers.FullyConnected", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "activation", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ",", "bias", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Define a fully connected block\n        \"\"\"", "\n", "super", "(", "FC_Block", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_features", "=", "in_features", "\n", "self", ".", "out_features", "=", "out_features", "\n", "self", ".", "act_f", "=", "activation", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "self", ".", "do", "=", "nn", ".", "Dropout", "(", "p_dropout", ")", "\n", "\n", "self", ".", "fc", "=", "FullyConnected", "(", "self", ".", "in_features", ",", "self", ".", "out_features", ",", "bias", "=", "bias", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "self", ".", "bn", "=", "nn", ".", "BatchNorm1d", "(", "out_features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FC_Block.forward": [[291, 299], ["layers.FC_Block.fc", "layers.FC_Block.act_f", "layers.FC_Block.do", "layers.FC_Block.bn().view", "layers.FC_Block.bn", "layers.FC_Block.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "y", "=", "self", ".", "fc", "(", "x", ")", "\n", "y", "=", "self", ".", "act_f", "(", "y", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "b", ",", "f", "=", "y", ".", "shape", "\n", "y", "=", "self", ".", "bn", "(", "y", ".", "view", "(", "b", ",", "-", "1", ")", ")", ".", "view", "(", "b", ",", "f", ")", "\n", "", "y", "=", "self", ".", "do", "(", "y", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.layers.FC_Block.__repr__": [[300, 309], ["str", "str", "str"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "representation", "=", "self", ".", "__class__", ".", "__name__", "+", "' ('", "+", "str", "(", "self", ".", "in_features", ")", "+", "' -> '", "+", "str", "(", "self", ".", "out_features", ")", "+", "')'", "+", "', dropout: '", "+", "str", "(", "self", ".", "p_dropout", ")", "\n", "if", "self", ".", "batch_norm", ":", "\n", "            ", "representation", "=", "representation", "+", "', batch norm'", "\n", "", "representation", "=", "representation", "+", "', act_fn: {0}'", ".", "format", "(", "self", ".", "act_f", ")", "\n", "return", "representation", "", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.decoders.GraphVDDecoder.__init__": [[11, 85], ["torch.GELU", "torch.GELU", "torch.Module.__init__", "print", "GraphGaussianBlock", "GraphConvolution", "range", "torch.ModuleList", "torch.ModuleList", "GC_Block", "GraphGaussianBlock", "ReZero", "ReZero", "ReZero", "GC_Block", "GraphConvolution", "GC_Block", "GraphGaussianBlock", "GC_Block", "GraphGaussianBlock", "GraphConvolution", "decoders.GraphVDDecoder.decoder_units.append", "torch.ModuleDict", "torch.ModuleDict", "len", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU", "torch.GELU"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_n", "=", "[", "96", ",", "10", "]", ",", "encoder_activation_sizes", "=", "[", "[", "96", ",", "8", "]", ",", "[", "24", ",", "64", "]", ",", "[", "8", ",", "128", "]", ",", "[", "1", ",", "256", "]", "]", ",", "act_fn", "=", "nn", ".", "GELU", "(", ")", ",", "device", "=", "\"cuda\"", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ",", "residual_size", "=", "256", ")", ":", "\n", "        ", "\"\"\"\n\n        :param input_feature: num of input feature\n        :param hidden_feature: num of hidden feature\n        :param p_dropout: drop out prob.\n        :param num_stage: number of residual blocks\n        :param node_n: number of nodes in graph\n        \"\"\"", "\n", "super", "(", "GraphVDDecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "activation", "=", "act_fn", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "self", ".", "node_input_n", "=", "encoder_activation_sizes", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "input_temp_n", "=", "encoder_activation_sizes", "[", "0", "]", "[", "1", "]", "\n", "self", ".", "residual_size", "=", "residual_size", "\n", "self", ".", "encoder_activation_sizes", "=", "encoder_activation_sizes", "\n", "\n", "self", ".", "z_mus", "=", "{", "}", "\n", "self", ".", "z_log_vars", "=", "{", "}", "\n", "self", ".", "z_posterior_mus", "=", "{", "}", "\n", "self", ".", "z_posterior_log_vars", "=", "{", "}", "\n", "self", ".", "z_prior_mus", "=", "{", "}", "\n", "self", ".", "z_prior_log_vars", "=", "{", "}", "\n", "self", ".", "KLs", "=", "{", "}", "\n", "self", ".", "zs", "=", "{", "}", "\n", "self", ".", "residuals_dict", "=", "{", "}", "\n", "\n", "#Top Down", "\n", "n_z_0_nodes", "=", "encoder_activation_sizes", "[", "-", "1", "]", "[", "0", "]", "\n", "n_z_0_features", "=", "encoder_activation_sizes", "[", "-", "1", "]", "[", "1", "]", "\n", "print", "(", "\"n_z_0_features: \"", ",", "n_z_0_features", ")", "\n", "self", ".", "reparametisation_latent_0", "=", "GraphGaussianBlock", "(", "in_nodes", "=", "n_z_0_nodes", ",", "in_features", "=", "n_z_0_features", ",", "n_z_nodes", "=", "n_z_0_nodes", ",", "n_z_features", "=", "n_z_0_features", ")", "\n", "self", ".", "resize_conv_0", "=", "GraphConvolution", "(", "in_features", "=", "n_z_0_features", ",", "out_features", "=", "self", ".", "residual_size", ",", "bias", "=", "True", ",", "node_n", "=", "n_z_0_nodes", ",", "out_node_n", "=", "self", ".", "node_input_n", ")", "\n", "#self.reshape_z0_linearly = FullyConnected(in_features=self.feature_hierachies[-1], out_features=self.residual_size, bias=True)", "\n", "\n", "self", ".", "decoder_units", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "encoder_activation_sizes", ")", "-", "2", ")", ":", "\n", "            ", "rezero1", "=", "ReZero", "(", ")", "\n", "rezero2", "=", "ReZero", "(", ")", "\n", "rezero3", "=", "ReZero", "(", ")", "\n", "in_node_size", "=", "encoder_activation_sizes", "[", "-", "1", "-", "i", "]", "[", "0", "]", "\n", "in_feature_size", "=", "encoder_activation_sizes", "[", "-", "1", "-", "i", "]", "[", "1", "]", "\n", "out_node_size", "=", "encoder_activation_sizes", "[", "-", "2", "-", "i", "]", "[", "0", "]", "\n", "out_feature_size", "=", "encoder_activation_sizes", "[", "-", "2", "-", "i", "]", "[", "1", "]", "\n", "begin_decoder_block", "=", "GC_Block", "(", "self", ".", "residual_size", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "self", ".", "node_input_n", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", "\n", "\n", "posterior_decoder_resize", "=", "GraphConvolution", "(", "in_features", "=", "self", ".", "residual_size", ",", "out_features", "=", "out_feature_size", ",", "bias", "=", "True", ",", "node_n", "=", "self", ".", "node_input_n", ",", "out_node_n", "=", "out_node_size", ")", "\n", "posterior_decoder_block", "=", "GC_Block", "(", "(", "out_feature_size", "+", "out_feature_size", ")", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "out_node_size", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", "\n", "reparametisation_posterior", "=", "GraphGaussianBlock", "(", "in_nodes", "=", "out_node_size", ",", "in_features", "=", "(", "out_feature_size", "+", "out_feature_size", ")", ",", "n_z_nodes", "=", "out_node_size", ",", "n_z_features", "=", "out_feature_size", ")", "\n", "\n", "prior_decoder_block", "=", "GC_Block", "(", "self", ".", "residual_size", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "self", ".", "node_input_n", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", "\n", "reparametisation_prior", "=", "GraphGaussianBlock", "(", "in_nodes", "=", "self", ".", "node_input_n", ",", "in_features", "=", "self", ".", "residual_size", ",", "n_z_nodes", "=", "out_node_size", ",", "n_z_features", "=", "out_feature_size", ")", "\n", "\n", "reshape_z", "=", "GraphConvolution", "(", "in_features", "=", "out_feature_size", ",", "out_features", "=", "self", ".", "residual_size", ",", "bias", "=", "True", ",", "node_n", "=", "out_node_size", ",", "out_node_n", "=", "self", ".", "node_input_n", ")", "\n", "\n", "self", ".", "decoder_units", ".", "append", "(", "{", "\n", "\"decoder_block\"", ":", "begin_decoder_block", ",", "\n", "\"posterior_decoder_resize\"", ":", "posterior_decoder_resize", ",", "\n", "\"posterior_decoder_block\"", ":", "posterior_decoder_block", ",", "\n", "\"reparametisation_posterior\"", ":", "reparametisation_posterior", ",", "\n", "\"prior_decoder_block\"", ":", "prior_decoder_block", ",", "\n", "\"reparametisation_prior\"", ":", "reparametisation_prior", ",", "\n", "\"reshape_z\"", ":", "reshape_z", ",", "\n", "\"rezero1\"", ":", "rezero1", ",", "\n", "\"rezero2\"", ":", "rezero2", ",", "\n", "\"rezero3\"", ":", "rezero3", "\n", "}", ")", "\n", "self", ".", "decoder_units", "[", "i", "]", "=", "nn", ".", "ModuleDict", "(", "self", ".", "decoder_units", "[", "i", "]", ")", "\n", "", "self", ".", "decoder_units", "=", "nn", ".", "ModuleList", "(", "self", ".", "decoder_units", ")", "\n", "\n", "self", ".", "decoder_block_final", "=", "GC_Block", "(", "self", ".", "residual_size", ",", "p_dropout", ",", "bias", "=", "True", ",", "node_n", "=", "self", ".", "node_input_n", ",", "activation", "=", "nn", ".", "GELU", "(", ")", ")", "\n", "self", ".", "reparametisation_output", "=", "GraphGaussianBlock", "(", "in_nodes", "=", "self", ".", "node_input_n", ",", "in_features", "=", "self", ".", "residual_size", ",", "n_z_nodes", "=", "self", ".", "node_input_n", ",", "n_z_features", "=", "self", ".", "input_temp_n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.decoders.GraphVDDecoder.forward": [[86, 112], ["decoders.GraphVDDecoder.resize_conv_0", "range", "decoders.GraphVDDecoder.decoder_block_final", "decoders.GraphVDDecoder.reparametisation_output", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid.", "decoders.GraphVDDecoder.reparametisation_latent_0", "models.kullback_leibler_divergence", "models.reparametisation_trick", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoders.GraphVDDecoder.top_down_decode", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "str", "str", "str", "len"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.kullback_leibler_divergence", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.reparametisation_trick", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.decoders.GraphVDDecoder.top_down_decode"], ["", "def", "forward", "(", "self", ",", "encoder_activations", "=", "None", ",", "latent_resolution", "=", "999", ",", "z_0", "=", "None", ",", "one_hot_labels", "=", "None", ")", ":", "\n", "        ", "if", "z_0", "is", "None", ":", "\n", "            ", "self", ".", "z_posterior_mus", "[", "\"0\"", "]", ",", "self", ".", "z_posterior_log_vars", "[", "\"0\"", "]", "=", "self", ".", "reparametisation_latent_0", "(", "encoder_activations", "[", "-", "1", "]", ")", "\n", "self", ".", "z_prior_mus", "[", "\"0\"", "]", ",", "self", ".", "z_prior_log_vars", "[", "\"0\"", "]", "=", "torch", ".", "zeros_like", "(", "self", ".", "z_posterior_mus", "[", "\"0\"", "]", ")", ",", "torch", ".", "zeros_like", "(", "self", ".", "z_posterior_log_vars", "[", "\"0\"", "]", ")", "\n", "self", ".", "z_mus", "[", "\"0\"", "]", ",", "self", ".", "z_log_vars", "[", "\"0\"", "]", "=", "self", ".", "z_posterior_mus", "[", "\"0\"", "]", ",", "self", ".", "z_posterior_log_vars", "[", "\"0\"", "]", "\n", "\n", "self", ".", "KLs", "[", "\"0\"", "]", "=", "utils", ".", "kullback_leibler_divergence", "(", "self", ".", "z_mus", "[", "\"0\"", "]", ",", "self", ".", "z_log_vars", "[", "\"0\"", "]", ",", "mu_2", "=", "self", ".", "z_prior_mus", "[", "\"0\"", "]", ",", "log_var_2", "=", "self", ".", "z_prior_log_vars", "[", "\"0\"", "]", ",", "graph", "=", "True", ")", "\n", "self", ".", "zs", "[", "\"0\"", "]", "=", "utils", ".", "reparametisation_trick", "(", "self", ".", "z_mus", "[", "\"0\"", "]", ",", "self", ".", "z_log_vars", "[", "\"0\"", "]", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "zs", "[", "\"0\"", "]", "=", "z_0", "\n", "\n", "", "if", "one_hot_labels", "is", "not", "None", ":", "\n", "            ", "self", ".", "zs", "[", "\"0\"", "]", "=", "torch", ".", "cat", "(", "(", "self", ".", "zs", "[", "\"0\"", "]", ",", "one_hot_labels", ")", ",", "dim", "=", "2", ")", "\n", "\n", "", "self", ".", "residuals_dict", "[", "\"0\"", "]", "=", "self", ".", "resize_conv_0", "(", "self", ".", "zs", "[", "\"0\"", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "encoder_activation_sizes", ")", "-", "2", ")", ":", "\n", "            ", "self", ".", "KLs", "[", "str", "(", "i", "+", "1", ")", "]", ",", "self", ".", "zs", "[", "str", "(", "i", "+", "1", ")", "]", "=", "self", ".", "top_down_decode", "(", "level", "=", "i", ",", "encoder_activation", "=", "encoder_activations", "[", "-", "2", "-", "i", "]", ",", "X_supplied", "=", "True", ",", "latent_resolution", "=", "latent_resolution", ")", "\n", "\n", "", "decoder_output_final", "=", "self", ".", "decoder_block_final", "(", "self", ".", "residuals_dict", "[", "str", "(", "len", "(", "self", ".", "encoder_activation_sizes", ")", "-", "2", ")", "]", ")", "\n", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", "=", "self", ".", "reparametisation_output", "(", "decoder_output_final", ")", "\n", "\n", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "bernoulli_output", "=", "sig", "(", "self", ".", "reconstructions_mu", ")", "\n", "\n", "return", "self", ".", "reconstructions_mu", ",", "self", ".", "reconstructions_log_var", ",", "self", ".", "zs", ",", "self", ".", "KLs", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.decoders.GraphVDDecoder.top_down_decode": [[113, 148], ["models.kullback_leibler_divergence", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "models.reparametisation_trick", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.kullback_leibler_divergence", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.reparametisation_trick"], ["", "def", "top_down_decode", "(", "self", ",", "level", ",", "encoder_activation", "=", "None", ",", "X_supplied", "=", "True", ",", "latent_resolution", "=", "999", ")", ":", "\n", "        ", "res_block_output", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"decoder_block\"", "]", "(", "self", ".", "residuals_dict", "[", "str", "(", "level", ")", "]", ")", "\n", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "residuals_dict", "[", "str", "(", "level", ")", "]", "+", "self", ".", "decoder_units", "[", "level", "]", "[", "\"rezero1\"", "]", "(", "res_block_output", ")", "\n", "\n", "#Posterior Route", "\n", "if", "X_supplied", "==", "True", ":", "\n", "            ", "posterior_decoder_resize_output", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"posterior_decoder_resize\"", "]", "(", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", ")", "\n", "concat_for_posterior", "=", "torch", ".", "cat", "(", "(", "posterior_decoder_resize_output", ",", "encoder_activation", ")", ",", "dim", "=", "2", ")", "\n", "posterior_decoder_block_output", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"posterior_decoder_block\"", "]", "(", "concat_for_posterior", ")", "\n", "self", ".", "z_posterior_mus", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "z_posterior_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"reparametisation_posterior\"", "]", "(", "posterior_decoder_block_output", ")", "\n", "\n", "#Prior route", "\n", "", "prior_decoder_block_output", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"prior_decoder_block\"", "]", "(", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", ")", "\n", "self", ".", "z_prior_mus", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "z_prior_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"reparametisation_prior\"", "]", "(", "prior_decoder_block_output", ")", "\n", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", "+", "self", ".", "decoder_units", "[", "level", "]", "[", "\"rezero2\"", "]", "(", "prior_decoder_block_output", ")", "\n", "\n", "#Sample from the posterior while training, prior while sampling", "\n", "if", "X_supplied", "==", "True", ":", "\n", "            ", "self", ".", "z_mus", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "z_posterior_mus", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "self", ".", "z_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "z_posterior_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "z_mus", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "z_prior_mus", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "self", ".", "z_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "z_prior_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "\n", "#Sample z_level, or take the mean", "\n", "", "self", ".", "KLs", "[", "str", "(", "level", "+", "1", ")", "]", "=", "utils", ".", "kullback_leibler_divergence", "(", "self", ".", "z_mus", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "z_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", ",", "mu_2", "=", "self", ".", "z_prior_mus", "[", "str", "(", "level", "+", "1", ")", "]", ",", "log_var_2", "=", "self", ".", "z_prior_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", ",", "graph", "=", "True", ")", "\n", "if", "level", "<", "latent_resolution", ":", "\n", "            ", "self", ".", "zs", "[", "str", "(", "level", "+", "1", ")", "]", "=", "utils", ".", "reparametisation_trick", "(", "self", ".", "z_mus", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "z_log_vars", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "zs", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "z_mus", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "\n", "", "reshaped_z", "=", "self", ".", "decoder_units", "[", "level", "]", "[", "\"reshape_z\"", "]", "(", "self", ".", "zs", "[", "str", "(", "level", "+", "1", ")", "]", ")", "\n", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", "=", "self", ".", "residuals_dict", "[", "str", "(", "level", "+", "1", ")", "]", "+", "self", ".", "decoder_units", "[", "level", "]", "[", "\"rezero3\"", "]", "(", "reshaped_z", ")", "\n", "\n", "return", "self", ".", "KLs", "[", "str", "(", "level", "+", "1", ")", "]", ",", "self", ".", "zs", "[", "str", "(", "level", "+", "1", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.AccumValue.__init__": [[16, 18], ["utils.AccumValue.reset"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset"], ["R_cube_big", "=", "rodrigues", "(", "pose", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "1", ",", "3", ")", ")", ".", "reshape", "(", "batch_num", ",", "-", "1", ",", "3", ",", "3", ")", "\n", "results", "=", "[", "]", "\n", "results", ".", "append", "(", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.AccumValue.update": [[19, 24], ["None"], "methods", ["None"], ["with_zeros", "(", "torch", ".", "cat", "(", "(", "R_cube_big", "[", ":", ",", "0", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "0", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "dim", "=", "2", ")", ")", "\n", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "jnum", ")", ":", "\n", "        ", "results", ".", "append", "(", "\n", "torch", ".", "matmul", "(", "\n", "results", "[", "parent", "[", "i", "]", "]", ",", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.AccumValue.reset": [[25, 30], ["None"], "methods", ["None"], ["with_zeros", "(", "\n", "torch", ".", "cat", "(", "\n", "(", "R_cube_big", "[", ":", ",", "i", "]", ",", "torch", ".", "reshape", "(", "J", "[", ":", ",", "i", ",", ":", "]", "-", "J", "[", ":", ",", "parent", "[", "i", "]", ",", ":", "]", ",", "(", "-", "1", ",", "3", ",", "1", ")", ")", ")", ",", "\n", "dim", "=", "2", "\n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.__init__": [[58, 60], ["utils.CsvLog.reset"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset"], ["m", "=", "torch", ".", "stack", "(", "\n", "(", "z_stick", ",", "-", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "2", "]", ",", "z_stick", ",", "\n", "-", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "-", "r_hat", "[", ":", ",", "0", ",", "1", "]", ",", "r_hat", "[", ":", ",", "0", ",", "0", "]", ",", "z_stick", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log": [[61, 64], ["numpy.append", "numpy.append"], "methods", ["None"], ["m", "=", "torch", ".", "reshape", "(", "m", ",", "(", "-", "1", ",", "3", ",", "3", ")", ")", "\n", "i_cube", "=", "(", "torch", ".", "eye", "(", "3", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "dim", "=", "0", ")", "+", "torch", ".", "zeros", "(", "(", "theta_dim", ",", "3", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ")", ".", "to", "(", "r", ".", "device", ")", "\n", "A", "=", "r_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset": [[65, 68], ["None"], "methods", ["None"], ["dot", "=", "torch", ".", "matmul", "(", "A", ",", "r_hat", ")", "\n", "R", "=", "cos", "*", "i_cube", "+", "(", "1", "-", "cos", ")", "*", "dot", "+", "torch", ".", "sin", "(", "theta", ")", "*", "m", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_update": [[31, 43], ["val.cpu().data.numpy.cpu().data.numpy", "model.accum_loss[].update", "model.accum_loss.keys", "utils.AccumValue", "val.cpu().data.numpy.cpu"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.AccumValue.update"], [")", "\n", ")", "\n", "", "stacked", "=", "torch", ".", "stack", "(", "results", ",", "dim", "=", "1", ")", "\n", "J_transformed", "=", "stacked", "[", ":", ",", ":", ",", ":", "3", ",", "3", "]", "\n", "return", "J_transformed", "\n", "\n", "", "def", "rodrigues", "(", "r", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_reset": [[44, 52], ["model.accum_loss.keys", "model.accum_loss[].reset"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset"], ["\n", "eps", "=", "r", ".", "clone", "(", ")", ".", "normal_", "(", "std", "=", "1e-8", ")", "\n", "theta", "=", "torch", ".", "norm", "(", "r", "+", "eps", ",", "dim", "=", "(", "1", ",", "2", ")", ",", "keepdim", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.num_parameters_and_place_on_device": [[70, 86], ["sum", "print", "print", "model.cuda", "print", "p.numel", "model.parameters"], "function", ["None"], ["", "def", "with_zeros", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Append a [0, 0, 0, 1] tensor to a [3, 4] tensor.\n\n    Parameter:\n    ---------\n    x: Tensor to be appended.\n\n    Return:\n    ------\n    Tensor after appending of shape [4,4]\n\n    \"\"\"", "\n", "ones", "=", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "]", ",", "dtype", "=", "torch", ".", "float", "\n", ")", ".", "expand", "(", "x", ".", "shape", "[", "0", "]", ",", "-", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "x", ",", "ones", ")", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.define_neurons_layers": [[87, 98], ["numpy.linspace", "list", "map"], "function", ["None"], ["return", "ret", "\n", "\n", "\n", "", "def", "pack", "(", "x", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.warmup": [[99, 114], ["model.writer.add_scalar"], "function", ["None"], ["\n", "zeros43", "=", "torch", ".", "zeros", "(", "\n", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ",", "4", ",", "3", ")", ",", "dtype", "=", "torch", ".", "float", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "ret", "=", "torch", ".", "cat", "(", "(", "zeros43", ",", "x", ")", ",", "dim", "=", "3", ")", "\n", "return", "ret", "", "", ""]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.reparametisation_trick": [[119, 131], ["torch.normal().to", "torch.device", "torch.mul", "torch.normal", "torch.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.kullback_leibler_divergence": [[132, 151], ["torch.mean", "torch.zeros_like", "torch.zeros_like", "torch.sum", "torch.exp", "torch.exp", "torch.pow"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik": [[156, 167], ["torch.pow", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "numpy.log", "torch.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik_per_datapoint": [[168, 179], ["torch.pow", "torch.sum", "torch.sum", "numpy.log", "torch.exp"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_bernoulli_log_lik": [[180, 191], ["torch.sum", "torch.mean", "torch.log", "torch.maximum", "torch.multiply", "torch.zeros_like", "torch.exp", "torch.abs"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_VLB": [[193, 201], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.get_dct_matrix": [[206, 216], ["numpy.eye", "numpy.arange", "numpy.linalg.inv", "numpy.arange", "numpy.sqrt", "numpy.sqrt", "numpy.cos"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct": [[217, 234], ["utils.get_dct_matrix", "in_tensor.size", "torch.from_numpy().to().float", "torch.matmul", "torch.from_numpy().to().float", "torch.matmul", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy", "torch.from_numpy"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.get_dct_matrix"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.book_keeping": [[239, 278], ["dict", "torch.utils.tensorboard.SummaryWriter", "utils.CsvLog", "utils.CsvLog", "os.makedirs", "os.makedirs", "os.makedirs", "os.makedirs", "open", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "str"], "function", ["None"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.save_checkpoint_and_csv": [[281, 310], ["pandas.DataFrame", "pandas.DataFrame", "model.losses.reset", "model.kls.reset", "utils.accum_reset", "numpy.expand_dims", "numpy.expand_dims", "pd.DataFrame.to_csv", "pd.DataFrame.to_csv", "model.state_dict", "print", "torch.save", "open", "pd.DataFrame.to_csv", "open", "pd.DataFrame.to_csv", "str"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.reset", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.accum_reset"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.log_epoch_values": [[311, 329], ["model.losses.update_log", "model.losses.update_log", "model.losses.update_log", "model.kls.update_log", "model.kls.update_log", "model.writer.add_scalar", "model.writer.add_scalar", "model.losses.update_log", "model.writer.add_scalar", "model.KLs.items", "str", "str", "model.kls.update_log", "model.writer.add_scalar", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.CsvLog.update_log"], []], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__": [[18, 44], ["torch.GELU", "torch.GELU", "torch.Module.__init__", "print", "VAE.VAE.define_layers", "models.layers.NeuralNetworkBlock", "models.layers.GaussianBlock", "models.layers.NeuralNetworkBlock", "models.layers.GaussianBlock", "models.num_parameters_and_place_on_device"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.__init__", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.define_layers", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.num_parameters_and_place_on_device"], ["    ", "def", "__init__", "(", "self", ",", "input_n", "=", "96", ",", "hidden_layers", "=", "[", "100", ",", "50", "]", ",", "n_z", "=", "2", ",", "act_fn", "=", "nn", ".", "GELU", "(", ")", ",", "variational", "=", "False", ",", "output_variance", "=", "False", ",", "device", "=", "\"cuda\"", ",", "batch_norm", "=", "False", ",", "p_dropout", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        :param input_n: num of input feature\n        :param hidden_layers: num of hidden feature, decoder is made symmetric\n        :param n_z: latent variable size\n        :param p_dropout: drop out prob.\n        :param num_stage: number of residual blocks\n        :param node_n: number of nodes in graph\n        \"\"\"", "\n", "super", "(", "VAE", ",", "self", ")", ".", "__init__", "(", ")", "\n", "print", "(", "\">>> creating model\"", ")", "\n", "self", ".", "encoder_layers", ",", "self", ".", "decoder_layers", "=", "self", ".", "define_layers", "(", "input_n", "=", "input_n", ",", "hidden_layers", "=", "hidden_layers", ",", "n_z", "=", "n_z", ")", "\n", "\n", "self", ".", "activation", "=", "act_fn", "\n", "self", ".", "variational", "=", "variational", "\n", "self", ".", "output_variance", "=", "output_variance", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "batch_norm", "=", "batch_norm", "\n", "self", ".", "p_dropout", "=", "p_dropout", "\n", "\n", "self", ".", "encoder", "=", "NeuralNetworkBlock", "(", "layers", "=", "self", ".", "encoder_layers", ",", "activation", "=", "self", ".", "activation", ",", "batch_norm", "=", "batch_norm", ",", "p_dropout", "=", "p_dropout", ")", "\n", "self", ".", "reparametisation_latent", "=", "GaussianBlock", "(", "self", ".", "encoder_layers", "[", "-", "1", "]", ",", "n_z", ")", "\n", "self", ".", "decoder", "=", "NeuralNetworkBlock", "(", "layers", "=", "self", ".", "decoder_layers", ",", "activation", "=", "self", ".", "activation", ",", "batch_norm", "=", "batch_norm", ",", "p_dropout", "=", "p_dropout", ")", "\n", "self", ".", "reparametisation_output", "=", "GaussianBlock", "(", "self", ".", "decoder_layers", "[", "-", "1", "]", ",", "input_n", ")", "\n", "\n", "self", ".", "num_parameters", "=", "utils", ".", "num_parameters_and_place_on_device", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.forward": [[45, 77], ["range", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid.", "VAE.VAE.encoder", "VAE.VAE.reparametisation_latent", "models.kullback_leibler_divergence", "VAE.VAE.encoder", "VAE.VAE.decoder", "VAE.VAE.reparametisation_output", "models.reparametisation_trick"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.kullback_leibler_divergence", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.reparametisation_trick"], ["", "def", "forward", "(", "self", ",", "x", ",", "num_samples", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        :param x: batch of samples\n        :return: reconstructions and latent value\n        \"\"\"", "\n", "if", "self", ".", "variational", ":", "\n", "            ", "y", "=", "self", ".", "encoder", "(", "x", ")", "\n", "self", ".", "z_mu", ",", "self", ".", "z_log_var", "=", "self", ".", "reparametisation_latent", "(", "y", ")", "\n", "self", ".", "KL", "=", "utils", ".", "kullback_leibler_divergence", "(", "self", ".", "z_mu", ",", "self", ".", "z_log_var", ")", "\n", "self", ".", "KLs", "=", "{", "'0'", ":", "self", ".", "KL", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "z_mu", "=", "self", ".", "encoder", "(", "x", ")", "\n", "", "for", "i", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "if", "self", ".", "variational", ":", "\n", "                ", "self", ".", "z", "=", "utils", ".", "reparametisation_trick", "(", "self", ".", "z_mu", ",", "self", ".", "z_log_var", ",", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "z", "=", "self", ".", "z_mu", "\n", "", "decoder_output", "=", "self", ".", "decoder", "(", "self", ".", "z", ")", "\n", "reconstructions_mu", ",", "reconstructions_log_var", "=", "self", ".", "reparametisation_output", "(", "decoder_output", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "recon_mu_accum", "=", "reconstructions_mu", "\n", "recon_log_var_accum", "=", "reconstructions_log_var", "\n", "", "else", ":", "\n", "                ", "recon_mu_accum", "+=", "reconstructions_mu", "\n", "recon_log_var_accum", "+=", "reconstructions_log_var", "\n", "", "", "x_hat", "=", "recon_mu_accum", "/", "(", "1.0", "*", "num_samples", ")", "\n", "self", ".", "reconstructions_log_var", "=", "recon_log_var_accum", "/", "(", "1.0", "*", "num_samples", ")", "\n", "\n", "sig", "=", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "bernoulli_output", "=", "sig", "(", "x_hat", ")", "\n", "\n", "return", "x_hat", ",", "self", ".", "reconstructions_log_var", ",", "self", ".", "z", ",", "self", ".", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.define_layers": [[78, 91], ["encoder_layers.append", "decoder_layers.append", "len", "range", "encoder_layers.append", "decoder_layers.append"], "methods", ["None"], ["", "def", "define_layers", "(", "self", ",", "input_n", "=", "96", ",", "hidden_layers", "=", "[", "100", ",", "50", "]", ",", "n_z", "=", "2", ")", ":", "\n", "        ", "encoder_layers", "=", "[", "]", "\n", "decoder_layers", "=", "[", "]", "\n", "encoder_layers", ".", "append", "(", "input_n", ")", "\n", "decoder_layers", ".", "append", "(", "n_z", ")", "\n", "n_hidden", "=", "len", "(", "hidden_layers", ")", "\n", "for", "i", "in", "range", "(", "n_hidden", ")", ":", "\n", "            ", "encoder_layers", ".", "append", "(", "hidden_layers", "[", "i", "]", ")", "\n", "decoder_layers", ".", "append", "(", "hidden_layers", "[", "n_hidden", "-", "1", "-", "i", "]", ")", "\n", "", "self", ".", "n_x", "=", "encoder_layers", "[", "0", "]", "\n", "self", ".", "n_z", "=", "encoder_layers", "[", "-", "1", "]", "\n", "\n", "return", "encoder_layers", ",", "decoder_layers", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.generate": [[92, 101], ["VAE.VAE.decoder", "VAE.VAE.reparametisation_output"], "methods", ["None"], ["", "def", "generate", "(", "self", ",", "z", ")", ":", "\n", "        ", "\"\"\"\n        :param z: batch of random variables\n        :return: batch of generated samples\n        \"\"\"", "\n", "decoder_output", "=", "self", ".", "decoder", "(", "self", ".", "z", ")", "\n", "reconstructions_mu", ",", "reconstructions_log_var", "=", "self", ".", "reparametisation_output", "(", "decoder_output", ")", "\n", "\n", "return", "reconstructions_mu", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_loss": [[103, 126], ["models.cal_gauss_log_lik", "models.cal_VLB", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "models.cal_bernoulli_log_lik"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_VLB", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_bernoulli_log_lik"], ["", "def", "cal_loss", "(", "self", ",", "x", ",", "x_hat", ",", "log_var_hat", ",", "kl", ",", "distribution", "=", "'gaussian'", ")", ":", "\n", "        ", "\"\"\"\n        :param x: batch of inputs\n        :return: loss of reconstructions\n        \"\"\"", "\n", "b_n", ",", "n_x", "=", "x", ".", "shape", "\n", "assert", "(", "n_x", "==", "self", ".", "n_x", ")", "\n", "\n", "if", "distribution", "==", "'gaussian'", ":", "\n", "            ", "if", "not", "self", ".", "output_variance", ":", "\n", "                ", "self", ".", "reconstructions_log_var", "=", "torch", ".", "zeros_like", "(", "x_hat", ")", "\n", "", "self", ".", "log_lik", ",", "self", ".", "mse", "=", "utils", ".", "cal_gauss_log_lik", "(", "x", ",", "x_hat", ",", "self", ".", "reconstructions_log_var", ")", "\n", "self", ".", "recon_loss", "=", "self", ".", "mse", "\n", "", "elif", "distribution", "==", "'bernoulli'", ":", "\n", "            ", "self", ".", "log_lik", "=", "utils", ".", "cal_bernoulli_log_lik", "(", "x", ",", "x_hat", ")", "\n", "self", ".", "recon_loss", "=", "-", "self", ".", "log_lik", "\n", "\n", "", "if", "self", ".", "variational", ":", "\n", "            ", "self", ".", "VLB", "=", "utils", ".", "cal_VLB", "(", "self", ".", "log_lik", ",", "self", ".", "KL", ",", "self", ".", "beta", ")", "\n", "self", ".", "loss", "=", "-", "self", ".", "VLB", "\n", "", "else", ":", "\n", "            ", "self", ".", "loss", "=", "-", "self", ".", "log_lik", "\n", "", "return", "self", ".", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_posterior": [[128, 137], ["x.reshape.reshape.reshape", "VAE.VAE.encoder", "VAE.VAE.reparametisation_latent", "models.cal_gauss_log_lik_per_datapoint", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.cal_gauss_log_lik_per_datapoint"], ["", "def", "cal_posterior", "(", "self", ",", "x", ")", ":", "\n", "        ", "b_n", "=", "x", ".", "shape", "[", "0", "]", "\n", "x", "=", "x", ".", "reshape", "(", "b_n", ",", "-", "1", ")", "\n", "y", "=", "self", ".", "encoder", "(", "x", ")", "\n", "self", ".", "z_mu", ",", "self", ".", "z_log_var", "=", "self", ".", "reparametisation_latent", "(", "y", ")", "\n", "\n", "self", ".", "posterior", ",", "_", "=", "utils", ".", "cal_gauss_log_lik_per_datapoint", "(", "self", ".", "z_mu", ",", "torch", ".", "zeros_like", "(", "self", ".", "z_mu", ")", ",", "log_var", "=", "torch", ".", "zeros_like", "(", "self", ".", "z_mu", ")", ")", "\n", "\n", "return", "self", ".", "posterior", "\n", "\n"]], "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.gradient_ascent_on_posterior": [[139, 173], ["VAE.VAE.eval", "models.layers.ParametiseInputs", "models.layers.ParametiseInputs.to", "VAE.VAE.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "models.layers.ParametiseInputs.", "models.dct", "inputs_with_parameters_dct.reshape.reshape.reshape", "VAE.VAE.cal_posterior", "VAE.VAE.optimizer.zero_grad", "neg_log_posterior.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "torch.optim.Adam.step", "inputs_with_parameters[].detach", "torch.zeros().to.detach", "torch.zeros().to.detach", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "inputs_with_parameters_dct.reshape.reshape.float", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "VAE.VAE.parameters", "posterior_init.detach", "posterior_max.detach", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.bouracha_generative_imputation.models.utils.dct", "home.repos.pwc.inspect_result.bouracha_generative_imputation.models.VAE.VAE.cal_posterior"], ["", "def", "gradient_ascent_on_posterior", "(", "self", ",", "inputs_occluded", ",", "occlusion_mask", ")", ":", "\n", "        ", "b_n", ",", "f_n", ",", "t_n", "=", "inputs_occluded", ".", "shape", "\n", "self", ".", "eval", "(", ")", "\n", "\n", "parametise_inputs", "=", "ParametiseInputs", "(", "inputs_occluded", ")", "\n", "parametise_inputs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "param", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "", "parametise_inputs", ".", "inputs_as_parameters", ".", "requires_grad", "=", "True", "\n", "# optimizer = torch.optim.SGD({parametise_inputs.inputs_as_parameters}, lr=1e4)", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "{", "parametise_inputs", ".", "inputs_as_parameters", "}", ",", "lr", "=", "100.0", ")", "\n", "\n", "posterior_max", "=", "-", "1e10", "*", "torch", ".", "ones", "(", "b_n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "inputs_best", "=", "torch", ".", "zeros", "(", "inputs_occluded", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "inputs_with_parameters", "=", "parametise_inputs", "(", "inputs_occluded", ",", "occlusion_mask", ")", "\n", "inputs_with_parameters_dct", "=", "utils", ".", "dct", "(", "self", ",", "inputs_with_parameters", ")", "\n", "inputs_with_parameters_dct", "=", "inputs_with_parameters_dct", ".", "reshape", "(", "b_n", ",", "f_n", "*", "t_n", ")", "\n", "posterior", "=", "self", ".", "cal_posterior", "(", "inputs_with_parameters_dct", ".", "float", "(", ")", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "posterior_init", "=", "posterior", "\n", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "neg_log_posterior", "=", "-", "torch", ".", "mean", "(", "posterior", ")", "\n", "neg_log_posterior", ".", "backward", "(", ")", "\n", "total_norm", "=", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "parameters", "(", ")", ",", "self", ".", "clipping_value", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "best_posteriors_bool", "=", "(", "posterior", ">", "posterior_max", ")", "\n", "posterior_max", "[", "best_posteriors_bool", "]", "=", "posterior", "[", "best_posteriors_bool", "]", "\n", "inputs_best", "[", "best_posteriors_bool", ",", ":", ",", ":", "]", "=", "inputs_with_parameters", "[", "best_posteriors_bool", ",", ":", ",", ":", "]", ".", "detach", "(", ")", "\n", "\n", "", "return", "inputs_best", ".", "detach", "(", ")", ",", "(", "posterior_init", ".", "detach", "(", ")", ",", "posterior_max", ".", "detach", "(", ")", ")", "", "", "", ""]]}