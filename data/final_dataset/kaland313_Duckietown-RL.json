{"home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.manual_control.on_key_press": [[96, 111], ["print", "env.reset", "env.render", "env.close", "sys.exit"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close"], ["@", "env", ".", "unwrapped", ".", "window", ".", "event", "\n", "def", "on_key_press", "(", "symbol", ",", "modifiers", ")", ":", "\n", "    ", "\"\"\"\n    This handler processes keyboard commands that\n    control the simulation\n    \"\"\"", "\n", "if", "symbol", "==", "key", ".", "BACKSPACE", "or", "symbol", "==", "key", ".", "SLASH", ":", "\n", "        ", "print", "(", "'RESET'", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "render", "(", ")", "\n", "", "elif", "symbol", "==", "key", ".", "PAGEUP", ":", "\n", "        ", "env", ".", "unwrapped", ".", "cam_angle", "[", "0", "]", "=", "0", "\n", "", "elif", "symbol", "==", "key", ".", "ESCAPE", ":", "\n", "        ", "env", ".", "close", "(", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.manual_control.update": [[115, 153], ["numpy.array", "env.step", "print", "env.render", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "env.reset", "cv2.imshow", "cv2.waitKey", "Image.fromarray", "Image.fromarray.save", "print", "env.reset", "env.render", "cv2.cvtColor"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["def", "update", "(", "dt", ")", ":", "\n", "    ", "\"\"\"\n    This function is called at every frame to handle\n    movement/stepping and redrawing\n    \"\"\"", "\n", "action", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "if", "key_handler", "[", "key", ".", "UP", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", "\n", "", "if", "key_handler", "[", "key", ".", "DOWN", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "-", "1.", ",", "-", "1.", "]", ")", "\n", "", "if", "key_handler", "[", "key", ".", "LEFT", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "0", ",", "1.", "]", ")", "\n", "", "if", "key_handler", "[", "key", ".", "RIGHT", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "1", ",", "0.", "]", ")", "\n", "", "if", "key_handler", "[", "key", ".", "SPACE", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "", "if", "key_handler", "[", "key", ".", "R", "]", ":", "\n", "        ", "action", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "env", ".", "reset", "(", ")", "\n", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "env", ".", "step", "(", "action", ")", "\n", "if", "args", ".", "show_observations", ":", "\n", "# obs = cv2.resize(obs, (300, 300))", "\n", "        ", "cv2", ".", "imshow", "(", "\"Observation\"", ",", "cv2", ".", "cvtColor", "(", "obs", ",", "cv2", ".", "COLOR_BGR2RGB", ")", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "", "print", "(", "'step_count = %s, reward=%.3f'", "%", "(", "env", ".", "unwrapped", ".", "step_count", ",", "reward", ")", ")", "\n", "\n", "if", "key_handler", "[", "key", ".", "RETURN", "]", ":", "\n", "        ", "from", "PIL", "import", "Image", "\n", "im", "=", "Image", ".", "fromarray", "(", "obs", ")", "\n", "im", ".", "save", "(", "'screen.png'", ")", "\n", "\n", "", "if", "done", ":", "\n", "        ", "print", "(", "'done!'", ")", "\n", "env", ".", "reset", "(", ")", "\n", "env", ".", "render", "(", "render_mode", ")", "\n", "\n", "", "env", ".", "render", "(", "render_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.pid_baseline.BaselinePIDAgent.__init__": [[23, 37], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "follow_dist", "=", "0.15", "\n", "self", ".", "P", "=", "0.5", "\n", "self", ".", "D", "=", "5", "\n", "# self.trim = 0.0", "\n", "# self.radius = 0.0318", "\n", "# self.wheel_dist = WHEEL_DIST", "\n", "# self.robot_width = ROBOT_WIDTH", "\n", "# self.robot_length = ROBOT_LENGTH", "\n", "# self.gain = 2.", "\n", "# self.k = 27.0", "\n", "# self.limit = 1.0", "\n", "self", ".", "max_iterations", "=", "1000", "\n", "self", ".", "prev_e", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.pid_baseline.BaselinePIDAgent.step": [[38, 73], ["simulator.closest_curve_point", "numpy.linalg.norm", "numpy.dot", "numpy.clip", "simulator.closest_curve_point", "numpy.linalg.norm", "pid_baseline.BaselinePIDAgent.get_right_vec", "numpy.array", "numpy.linalg.norm"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.pid_baseline.BaselinePIDAgent.get_right_vec"], ["", "def", "step", "(", "self", ",", "simulator", ":", "Simulator", ")", ":", "\n", "        ", "\"\"\"\n        Take a step, implemented as a PID controller\n        \"\"\"", "\n", "\n", "# Find the curve point closest to the agent, and the tangent at that point", "\n", "closest_point", ",", "closest_tangent", "=", "simulator", ".", "closest_curve_point", "(", "simulator", ".", "cur_pos", ",", "simulator", ".", "cur_angle", ")", "\n", "\n", "iterations", "=", "0", "\n", "\n", "lookup_distance", "=", "self", ".", "follow_dist", "\n", "curve_point", "=", "None", "\n", "while", "iterations", "<", "self", ".", "max_iterations", ":", "\n", "# Project a point ahead along the curve tangent,", "\n", "# then find the closest point to to that", "\n", "            ", "follow_point", "=", "closest_point", "+", "closest_tangent", "*", "lookup_distance", "\n", "curve_point", ",", "curve_tangent", "=", "simulator", ".", "closest_curve_point", "(", "follow_point", ",", "simulator", ".", "cur_angle", ")", "\n", "\n", "# If we have a valid point on the curve, stop", "\n", "if", "curve_point", "is", "not", "None", ":", "\n", "                ", "break", "\n", "\n", "", "iterations", "+=", "1", "\n", "lookup_distance", "*=", "0.5", "\n", "\n", "# Compute a normalized vector to the curve point", "\n", "", "point_vec", "=", "curve_point", "-", "simulator", ".", "cur_pos", "\n", "point_vec", "/=", "np", ".", "linalg", ".", "norm", "(", "point_vec", ")", "\n", "\n", "magic", "=", "(", "curve_tangent", "+", "point_vec", ")", "/", "np", ".", "linalg", ".", "norm", "(", "np", ".", "linalg", ".", "norm", "(", "point_vec", ")", ")", "\n", "e", "=", "np", ".", "dot", "(", "self", ".", "get_right_vec", "(", "simulator", ".", "cur_angle", ")", ",", "magic", ")", "\n", "de", "=", "e", "-", "self", ".", "prev_e", "\n", "self", ".", "prev_e", "=", "e", "\n", "steering", "=", "self", ".", "P", "*", "e", "+", "self", ".", "D", "*", "de", "\n", "return", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "steering", ",", "1", "-", "steering", "]", ")", ",", "0.", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.pid_baseline.BaselinePIDAgent.get_right_vec": [[75, 80], ["math.sin", "math.cos", "numpy.array"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_right_vec", "(", "angle", ")", ":", "\n", "        ", "x", "=", "math", ".", "sin", "(", "angle", ")", "\n", "z", "=", "math", ".", "cos", "(", "angle", ")", "\n", "return", "np", ".", "array", "(", "[", "x", ",", "0", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.pid_baseline.DuckietownWorldEvaluatorBaselinePIDAgent._collect_trajectory": [[83, 102], ["pid_baseline.DuckietownWorldEvaluatorBaselinePIDAgent.env.reset", "pid_baseline.DuckietownWorldEvaluatorBaselinePIDAgent.start_poses.keys", "agent.step", "pid_baseline.DuckietownWorldEvaluatorBaselinePIDAgent.env.step", "duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates", "episode_path.append", "episode_orientations.append", "episode_timestamps.append", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates"], ["    ", "def", "_collect_trajectory", "(", "self", ",", "agent", ",", "i", ")", ":", "\n", "        ", "episode_path", "=", "[", "]", "\n", "episode_orientations", "=", "[", "]", "\n", "episode_timestamps", "=", "[", "]", "\n", "if", "self", ".", "map_name", "in", "self", ".", "start_poses", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "env", ".", "unwrapped", ".", "user_tile_start", "=", "[", "0", ",", "0", "]", "\n", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "self", ".", "start_poses", "[", "self", ".", "map_name", "]", "[", "i", "]", "\n", "", "self", ".", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "agent", ".", "step", "(", "self", ".", "env", ".", "unwrapped", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "cur_pos", "=", "correct_gym_duckietown_coordinates", "(", "self", ".", "env", ".", "unwrapped", ",", "self", ".", "env", ".", "unwrapped", ".", "cur_pos", ")", "\n", "episode_path", ".", "append", "(", "cur_pos", ")", "\n", "episode_orientations", ".", "append", "(", "np", ".", "array", "(", "self", ".", "env", ".", "unwrapped", ".", "cur_angle", ")", ")", "\n", "episode_timestamps", ".", "append", "(", "info", "[", "'Simulator'", "]", "[", "'timestamp'", "]", ")", "\n", "", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "None", "\n", "self", ".", "user_tile_start", "=", "None", "\n", "return", "episode_path", ",", "episode_orientations", ",", "episode_timestamps", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.__init__": [[26, 42], ["duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator.__init__", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.reset", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.render", "pyglet.window.key.KeyStateHandler", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.unwrapped.window.push_handlers", "pyglet.clock.schedule_interval", "pyglet.input.get_joysticks", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.joystick.open"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["    ", "def", "__init__", "(", "self", ",", "env_config", ",", "eval_lenght_sec", "=", "15", ",", "eval_map", "=", "DEFAULT_EVALUATION_MAP", ")", ":", "\n", "        ", "super", "(", "DuckietownWorldEvaluatorHumanBaseline", ",", "self", ")", ".", "__init__", "(", "env_config", ",", "eval_lenght_sec", ",", "eval_map", ")", "\n", "self", ".", "episode_path", "=", "[", "]", "\n", "self", ".", "episode_orientations", "=", "[", "]", "\n", "self", ".", "episode_timestamps", "=", "[", "]", "\n", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "env", ".", "render", "(", ")", "\n", "# Register a keyboard handler", "\n", "self", ".", "key_handler", "=", "key", ".", "KeyStateHandler", "(", ")", "\n", "self", ".", "env", ".", "unwrapped", ".", "window", ".", "push_handlers", "(", "self", ".", "key_handler", ")", "\n", "pyglet", ".", "clock", ".", "schedule_interval", "(", "self", ".", "update", ",", "1.0", "/", "self", ".", "env", ".", "unwrapped", ".", "frame_rate", ")", "\n", "self", ".", "joystick", "=", "None", "\n", "joysticks", "=", "pyglet", ".", "input", ".", "get_joysticks", "(", ")", "\n", "if", "joysticks", ":", "\n", "            ", "self", ".", "joystick", "=", "joysticks", "[", "0", "]", "\n", "self", ".", "joystick", ".", "open", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline._collect_trajectory": [[43, 56], ["human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.reset", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.render", "pyglet.app.run", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.start_poses.keys", "len"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "", "def", "_collect_trajectory", "(", "self", ",", "agent", ",", "i", ")", ":", "\n", "        ", "self", ".", "episode_path", "=", "[", "]", "\n", "self", ".", "episode_orientations", "=", "[", "]", "\n", "self", ".", "episode_timestamps", "=", "[", "]", "\n", "if", "self", ".", "map_name", "in", "self", ".", "start_poses", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "env", ".", "unwrapped", ".", "user_tile_start", "=", "[", "0", ",", "0", "]", "\n", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "self", ".", "start_poses", "[", "self", ".", "map_name", "]", "[", "i", "%", "len", "(", "self", ".", "start_poses", "[", "self", ".", "map_name", "]", ")", "]", "\n", "", "self", ".", "env", ".", "reset", "(", ")", "\n", "self", ".", "env", ".", "render", "(", ")", "\n", "# Enter main event loop", "\n", "pyglet", ".", "app", ".", "run", "(", ")", "\n", "\n", "return", "self", ".", "episode_path", ",", "self", ".", "episode_orientations", ",", "self", ".", "episode_timestamps", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update": [[57, 88], ["numpy.array", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.step", "duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.episode_path.append", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.episode_orientations.append", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.episode_timestamps.append", "human_baseline.DuckietownWorldEvaluatorHumanBaseline.env.render", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "pyglet.app.exit", "numpy.clip", "numpy.clip", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates"], ["", "def", "update", "(", "self", ",", "dt", ")", ":", "\n", "        ", "\"\"\"\n        This function is called at every frame to handle\n        movement/stepping and redrawing\n        \"\"\"", "\n", "action", "=", "np", ".", "array", "(", "[", "0.0", ",", "0.0", "]", ")", "\n", "if", "self", ".", "key_handler", "[", "key", ".", "UP", "]", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", "\n", "", "if", "self", ".", "key_handler", "[", "key", ".", "DOWN", "]", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "-", "1.", ",", "-", "1.", "]", ")", "\n", "", "if", "self", ".", "key_handler", "[", "key", ".", "LEFT", "]", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "0", ",", "1.", "]", ")", "\n", "", "if", "self", ".", "key_handler", "[", "key", ".", "RIGHT", "]", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "1", ",", "0.", "]", ")", "\n", "", "if", "self", ".", "key_handler", "[", "key", ".", "SPACE", "]", ":", "\n", "            ", "action", "=", "np", ".", "array", "(", "[", "0", ",", "0", "]", ")", "\n", "\n", "", "if", "self", ".", "joystick", "is", "not", "None", ":", "\n", "# action = np.array([self.joystick.z, self.joystick.rz])", "\n", "            ", "steering", "=", "self", ".", "joystick", ".", "rx", "\n", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "steering", ",", "1", "-", "steering", "]", ")", ",", "0.", ",", "1.", ")", "*", "np", ".", "clip", "(", "self", ".", "joystick", ".", "z", ",", "0", ",", "1", ")", "\n", "\n", "", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "cur_pos", "=", "correct_gym_duckietown_coordinates", "(", "self", ".", "env", ".", "unwrapped", ",", "self", ".", "env", ".", "unwrapped", ".", "cur_pos", ")", "\n", "self", ".", "episode_path", ".", "append", "(", "cur_pos", ")", "\n", "self", ".", "episode_orientations", ".", "append", "(", "np", ".", "array", "(", "self", ".", "env", ".", "unwrapped", ".", "cur_angle", ")", ")", "\n", "self", ".", "episode_timestamps", ".", "append", "(", "info", "[", "'Simulator'", "]", "[", "'timestamp'", "]", ")", "\n", "if", "done", ":", "\n", "            ", "pyglet", ".", "app", ".", "exit", "(", ")", "\n", "\n", "", "self", ".", "env", ".", "render", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.load_config": [[18, 33], ["open", "yaml.load", "config.load_algo_config", "config.update_config", "config_updates.get"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.load_algo_config", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.update_config"], ["def", "load_config", "(", "path", "=", "\"./config/config.yml\"", ",", "update_algo_hparams_from_algo_conf_file", "=", "True", ",", "config_updates", "=", "{", "}", ")", ":", "\n", "    ", "\"\"\"Loads configuation from config.yml\n       WARNING: algo config can't be changed after being loaded (set update_algo_hparams_from_algo_conf_file=False)\n    \"\"\"", "\n", "with", "open", "(", "path", ")", "as", "f", ":", "\n", "        ", "config", "=", "yaml", ".", "load", "(", "f", ",", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "if", "update_algo_hparams_from_algo_conf_file", ":", "\n", "        ", "if", "config_updates", ".", "get", "(", "'algo'", ")", "is", "not", "None", ":", "\n", "            ", "config", "[", "\"algo\"", "]", "=", "config_updates", "[", "'algo'", "]", "\n", "", "config", "=", "load_algo_config", "(", "config", ")", "\n", "\n", "", "if", "config_updates", "!=", "{", "}", ":", "\n", "        ", "update_config", "(", "config", ",", "config_updates", ")", "\n", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.load_algo_config": [[35, 47], ["config.update", "type", "config[].keys", "open", "yaml.load"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update"], ["", "def", "load_algo_config", "(", "config", ")", ":", "\n", "    ", "\"\"\"Loads algo specific config from algo config files, based on config['algo']\"\"\"", "\n", "algo", "=", "config", "[", "'algo'", "]", "\n", "if", "type", "(", "algo", ")", "==", "dict", ":", "# most likely algo={'grid_search':[...]}", "\n", "        ", "algo", "=", "'general'", "\n", "", "if", "algo", "not", "in", "config", "[", "\"algo_config_files\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "algo", "=", "'general'", "\n", "", "algo_config_file", "=", "config", "[", "\"algo_config_files\"", "]", "[", "algo", "]", "\n", "with", "open", "(", "algo_config_file", ")", "as", "f", ":", "\n", "        ", "algo_config", "=", "yaml", ".", "load", "(", "f", ",", "yaml", ".", "FullLoader", ")", "\n", "", "config", ".", "update", "(", "algo_config", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.dump_config": [[49, 53], ["os.path.join", "open", "yaml.dump"], "function", ["None"], ["", "def", "dump_config", "(", "config", ",", "path", ")", ":", "\n", "    ", "file_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"config_dump_{:04d}.yml\"", ".", "format", "(", "config", "[", "\"seed\"", "]", ")", ")", "\n", "with", "open", "(", "file_path", ",", "\"w\"", ")", "as", "config_dump", ":", "\n", "        ", "yaml", ".", "dump", "(", "config", ",", "config_dump", ",", "yaml", ".", "Dumper", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.print_config": [[55, 58], ["logger.info", "logger.info", "ray.tune.logger.pretty_print"], "function", ["None"], ["", "", "def", "print_config", "(", "config", ":", "dict", ")", ":", "\n", "    ", "logger", ".", "info", "(", "\"=== Config ===================================\"", ")", "\n", "logger", ".", "info", "(", "pretty_print", "(", "config", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.update_config": [[60, 98], ["logger.warning", "duckietown_utils.utils.recursive_dict_update", "config[].update", "config[].keys", "config.load_config", "config[].keys", "[].update", "ray.tune.logger.pretty_print", "logger.warning", "config[].update", "config[].update", "config.keys", "logger.warning", "config[].update", "config[].update", "ray.tune.logger.pretty_print", "ray.tune.logger.pretty_print"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.load_config", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update"], ["", "def", "update_config", "(", "config", ":", "dict", ",", "config_updates", ":", "dict", ")", ":", "\n", "    ", "logger", ".", "warning", "(", "\"Updating default config values by: \\n {}\"", ".", "format", "(", "pretty_print", "(", "config_updates", ")", ")", ")", "\n", "recursive_dict_update", "(", "config", ",", "config_updates", ")", "\n", "\n", "# If the seed and experiment_name are changed their copies in env config should be updated as well", "\n", "# (In the config.yml file this is done by anchors and alias indicators", "\n", "config", "[", "'env_config'", "]", ".", "update", "(", "{", "'seed'", ":", "config", "[", "'seed'", "]", ",", "\n", "'experiment_name'", ":", "config", "[", "'experiment_name'", "]", "}", ")", "\n", "\n", "if", "'mode'", "in", "config", "[", "'env_config'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "config", "[", "'env_config'", "]", "[", "'mode'", "]", "==", "'debug'", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Env_config.mode is 'debug', some hyperparameters will be overwritten by: \\n {}\"", ".", "format", "(", "\n", "pretty_print", "(", "config", "[", "\"debug_hparams\"", "]", ")", ")", ")", "\n", "config", "[", "\"rllib_config\"", "]", ".", "update", "(", "config", "[", "\"debug_hparams\"", "]", "[", "\"rllib_config\"", "]", ")", "\n", "config", "[", "\"ray_init_config\"", "]", ".", "update", "(", "config", "[", "\"debug_hparams\"", "]", "[", "\"ray_init_config\"", "]", ")", "\n", "\n", "", "default_config", "=", "load_config", "(", "update_algo_hparams_from_algo_conf_file", "=", "False", ")", "\n", "if", "'inference_hparams'", "not", "in", "config", ".", "keys", "(", ")", ":", "\n", "            ", "config", "[", "'inference_hparams'", "]", "=", "default_config", "[", "'inference_hparams'", "]", "\n", "", "elif", "'explore'", "not", "in", "config", "[", "\"inference_hparams\"", "]", "[", "\"rllib_config\"", "]", ":", "\n", "            ", "config", "[", "\"inference_hparams\"", "]", "[", "\"rllib_config\"", "]", "[", "'explore'", "]", "=", "default_config", "[", "\"inference_hparams\"", "]", "[", "\"rllib_config\"", "]", "[", "'explore'", "]", "\n", "# Setting explore to what is set in the default config (false) is important, because in many older trainings", "\n", "# this key is missing, in which case it is treated as true by rllib.", "\n", "\n", "", "if", "config", "[", "'env_config'", "]", "[", "'mode'", "]", "==", "'inference'", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"Env_config.mode is 'inference', some hyperparameters will be overwritten by: \\n {}\"", ".", "format", "(", "\n", "pretty_print", "(", "config", "[", "\"inference_hparams\"", "]", ")", ")", ")", "\n", "config", "[", "\"rllib_config\"", "]", ".", "update", "(", "config", "[", "\"inference_hparams\"", "]", "[", "\"rllib_config\"", "]", ")", "\n", "config", "[", "\"ray_init_config\"", "]", ".", "update", "(", "config", "[", "\"inference_hparams\"", "]", "[", "\"ray_init_config\"", "]", ")", "\n", "\n", "", "assert", "config", "[", "'env_config'", "]", "[", "'mode'", "]", "in", "[", "'train'", ",", "'inference'", ",", "'debug'", "]", "\n", "\n", "# For loaded config dups the env config is replicated in rllib_config", "\n", "", "if", "'env_config'", "in", "config", "[", "'rllib_config'", "]", ".", "keys", "(", ")", ":", "\n", "        ", "config", "[", "'rllib_config'", "]", "[", "'env_config'", "]", ".", "update", "(", "config", "[", "'env_config'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.find_and_load_config_by_seed": [[100, 117], ["logger.warning", "config._find_and_select_experiment", "logger.warning", "config._find_and_select_experiment", "config.load_config", "logger.warning", "logger.warning", "str", "os.path.dirname", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config._find_and_select_experiment", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config._find_and_select_experiment", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config.load_config"], ["", "", "def", "find_and_load_config_by_seed", "(", "seed", ",", "artifact_root", "=", "\"./artifacts\"", ",", "\n", "preselected_experiment_idx", "=", "None", ",", "preselected_checkpoint_idx", "=", "None", ")", ":", "\n", "    ", "logger", ".", "warning", "(", "\"Found paths with seed {}:\"", ".", "format", "(", "str", "(", "seed", ")", ")", ")", "\n", "config_dump_path", "=", "_find_and_select_experiment", "(", "artifact_root", "+", "'/**/config_dump_{:04d}.yml'", ".", "format", "(", "seed", ")", ",", "\n", "preselected_experiment_idx", ")", "\n", "\n", "# Multiple checkpoints might be saved under the same experiment folder", "\n", "logger", ".", "warning", "(", "\"Found checkpoints in {}:\"", ".", "format", "(", "os", ".", "path", ".", "dirname", "(", "config_dump_path", ")", ")", ")", "\n", "# *[0-9] makes sure that the last character is a number --> the .tune_metadata files are excluded", "\n", "checkpoint_path", "=", "_find_and_select_experiment", "(", "\n", "os", ".", "path", ".", "dirname", "(", "config_dump_path", ")", "+", "'/**/checkpoint-*[0-9]'", ".", "format", "(", "seed", ")", ",", "\n", "preselected_checkpoint_idx", ")", "\n", "\n", "loaded_config", "=", "load_config", "(", "config_dump_path", ",", "update_algo_hparams_from_algo_conf_file", "=", "False", ")", "\n", "logger", ".", "warning", "(", "\"Config loaded from {}\"", ".", "format", "(", "config_dump_path", ")", ")", "\n", "logger", ".", "warning", "(", "\"Model checkpoint loaded from {}\"", ".", "format", "(", "checkpoint_path", ")", ")", "\n", "return", "loaded_config", ",", "checkpoint_path", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.config._find_and_select_experiment": [[119, 140], ["glob.glob", "glob.glob.sort", "enumerate", "len", "logger.warning", "numpy.clip", "logger.warning", "int", "input"], "function", ["None"], ["", "def", "_find_and_select_experiment", "(", "search_string", ",", "preselect_index", "=", "None", ")", ":", "\n", "    ", "paths", "=", "glob", ".", "glob", "(", "search_string", ",", "recursive", "=", "True", ")", "\n", "paths", ".", "sort", "(", ")", "\n", "for", "i", ",", "path", "in", "enumerate", "(", "paths", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"{:d}: {}\"", ".", "format", "(", "i", ",", "path", ")", ")", "\n", "\n", "", "number_of_experiments", "=", "len", "(", "paths", ")", "\n", "if", "number_of_experiments", "<=", "0", ":", "\n", "        ", "assert", "False", ",", "\"No artifacts found with with pattern {}\"", ".", "format", "(", "search_string", ")", "\n", "\n", "", "if", "number_of_experiments", ">", "1", ":", "# more than one experiment was found with this seed", "\n", "        ", "if", "preselect_index", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\"Enter experiment number: \"", ")", "\n", "experiment_num", "=", "int", "(", "input", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "experiment_num", "=", "preselect_index", "\n", "", "experiment_num", "=", "np", ".", "clip", "(", "experiment_num", ",", "0", ",", "number_of_experiments", "-", "1", ")", "\n", "", "else", ":", "\n", "        ", "experiment_num", "=", "0", "\n", "\n", "", "return", "paths", "[", "experiment_num", "]", "\n", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.paths.ArtifactPaths.__init__": [[18, 51], ["paths.ArtifactPaths._check_create_folder", "print", "print", "print", "print", "datetime.datetime.datetime.now().strftime", "os.path.join", "os.path.join", "str().upper", "str", "os.path.exists", "os.makedirs", "datetime.datetime.datetime.now", "str"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.paths.ArtifactPaths._check_create_folder"], ["    ", "def", "__init__", "(", "self", ",", "experiment_name", "=", "\"training\"", ",", "seed", "=", "0", ",", "experiment_base_path", "=", "None", ",", "artifact_root", "=", "\"./artifacts\"", ",", "\n", "algo_name", "=", "\"\"", ")", ":", "\n", "        ", "if", "experiment_base_path", "is", "None", ":", "\n", "            ", "current_time", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "'%b%d_%H-%M-%S'", ")", "\n", "self", ".", "experiment_folder", "=", "os", ".", "path", ".", "join", "(", "\"{}_{:04d}\"", ".", "format", "(", "experiment_name", ",", "seed", ")", ",", "current_time", ")", "\n", "self", ".", "experiment_base_path", "=", "os", ".", "path", ".", "join", "(", "artifact_root", ",", "self", ".", "experiment_folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "experiment_base_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "self", ".", "experiment_base_path", ")", "\n", "", "make_folder", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "experiment_base_path", "=", "experiment_base_path", "\n", "make_folder", "=", "False", "\n", "\n", "# self.ray_results_path = self._check_create_folder(\"ray_results\", make_folder)", "\n", "# self.models_path = self._check_create_folder(\"models\", make_folder)", "\n", "# self.tensorboard_path = self._check_create_folder(\"tensorboard\", make_folder)", "\n", "# self.video_path = self._check_create_folder(\"videos\", make_folder)", "\n", "", "self", ".", "code_backup_path", "=", "self", ".", "_check_create_folder", "(", "\"source_code\"", ",", "make_folder", ")", "\n", "# self.dt_word_eval_path = self._check_create_folder(\"dt_world_eval\", make_folder)", "\n", "\n", "# self.json_path = os.path.join(self.experiment_base_path, \"args_\" + str(seed) + \".json\")", "\n", "\n", "\n", "self", ".", "model_file_name", "=", "\"{}_{}\"", ".", "format", "(", "str", "(", "algo_name", ")", ".", "upper", "(", ")", ",", "str", "(", "seed", ")", ")", "\n", "\n", "print", "(", "\"==============================================\"", ")", "\n", "print", "(", "\"Artifacts paths: \"", ")", "\n", "print", "(", "self", ".", "experiment_base_path", ")", "\n", "# print(self.ray_results_path)", "\n", "# print(self.models_path)", "\n", "# print(self.tensorboard_path)", "\n", "# print(self.video_path)", "\n", "print", "(", "self", ".", "code_backup_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.config.paths.ArtifactPaths._check_create_folder": [[52, 60], ["os.path.join", "os.path.exists", "os.makedirs", "logger.warning"], "methods", ["None"], ["", "def", "_check_create_folder", "(", "self", ",", "folder", ",", "make_path", "=", "True", ")", ":", "\n", "        ", "folder_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "experiment_base_path", ",", "folder", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder_path", ")", ":", "\n", "            ", "if", "make_path", ":", "\n", "                ", "os", ".", "makedirs", "(", "folder_path", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Folder not found:\"", ".", "format", "(", "folder", ")", ")", "\n", "", "", "return", "folder_path", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.find_layer_by_name": [[15, 21], ["enumerate"], "function", ["None"], ["def", "find_layer_by_name", "(", "model", ",", "name", ")", ":", "\n", "    ", "layer_idx", "=", "-", "1", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "model", ".", "layers", ")", ":", "\n", "        ", "if", "layer", ".", "name", "==", "name", ":", "\n", "            ", "layer_idx", "=", "i", "\n", "", "", "return", "layer_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.nvidia_salient_map": [[23, 57], ["tensorflow.keras.Model", "tf.keras.Model.predict", "range", "cv2.resize", "numpy.abs", "numpy.average", "len", "numpy.multiply", "numpy.max", "numpy.min", "numpy.zeros_like", "numpy.average", "cv2.resize", "len", "numpy.min", "numpy.max", "numpy.min", "salient_object_visualization.find_layer_by_name", "salient_object_visualization.find_layer_by_name", "salient_object_visualization.find_layer_by_name", "salient_object_visualization.find_layer_by_name"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.find_layer_by_name", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.find_layer_by_name", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.find_layer_by_name", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.find_layer_by_name"], ["", "def", "nvidia_salient_map", "(", "model", ":", "tf", ".", "keras", ".", "Model", ",", "obs", ",", "output_vector_idx", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Explaining How a Deep Neural Network Trained with End-to-End Learning Steers a Car\n    https://arxiv.org/abs/1704.07911\n    \"\"\"", "\n", "layer_outputs", "=", "[", "model", ".", "layers", "[", "find_layer_by_name", "(", "model", ",", "'conv_out'", ")", "]", ".", "output", ",", "\n", "model", ".", "layers", "[", "find_layer_by_name", "(", "model", ",", "'conv3'", ")", "]", ".", "output", ",", "\n", "model", ".", "layers", "[", "find_layer_by_name", "(", "model", ",", "'conv2'", ")", "]", ".", "output", ",", "\n", "model", ".", "layers", "[", "find_layer_by_name", "(", "model", ",", "'conv1'", ")", "]", ".", "output", "]", "\n", "model_partial", "=", "tf", ".", "keras", ".", "Model", "(", "inputs", "=", "model", ".", "inputs", ",", "outputs", "=", "layer_outputs", ")", "\n", "activations", "=", "model_partial", ".", "predict", "(", "obs", "[", "None", ",", "...", "]", ")", "\n", "\n", "if", "output_vector_idx", "is", "None", ":", "\n", "        ", "salient_map", "=", "np", ".", "average", "(", "activations", "[", "0", "]", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "2", ")", "\n", "", "else", ":", "\n", "        ", "salient_map", "=", "activations", "[", "0", "]", "[", "0", ",", ":", ",", ":", ",", "output_vector_idx", "]", "\n", "\n", "", "for", "idx", "in", "range", "(", "1", ",", "len", "(", "activations", ")", ")", ":", "\n", "# averaging of feature maps and element wise multiplication with previous layer's salient map", "\n", "        ", "salient_map", "=", "np", ".", "multiply", "(", "salient_map", ",", "np", ".", "average", "(", "activations", "[", "idx", "]", "[", "0", ",", ":", ",", ":", ",", ":", "]", ",", "axis", "=", "2", ")", ")", "\n", "if", "idx", "<", "len", "(", "activations", ")", "-", "1", ":", "\n", "            ", "salient_map", "=", "cv2", ".", "resize", "(", "salient_map", ",", "activations", "[", "idx", "+", "1", "]", "[", "0", ",", ":", ",", ":", ",", "0", "]", ".", "shape", "[", ":", ":", "-", "1", "]", ")", "\n", "", "", "salient_map", "=", "cv2", ".", "resize", "(", "salient_map", ",", "obs", ".", "shape", "[", ":", "2", "]", ")", "\n", "\n", "# Saliency values are sometimes negative (if the output was negative)", "\n", "salient_map", "=", "np", ".", "abs", "(", "salient_map", ")", "\n", "# Scale to the 0.0-1.0 range", "\n", "if", "np", ".", "max", "(", "salient_map", ")", "!=", "np", ".", "min", "(", "salient_map", ")", ":", "\n", "        ", "salient_map", "=", "(", "salient_map", "-", "np", ".", "min", "(", "salient_map", ")", ")", "/", "(", "np", ".", "max", "(", "salient_map", ")", "-", "np", ".", "min", "(", "salient_map", ")", ")", "\n", "", "else", ":", "\n", "        ", "salient_map", "=", "np", ".", "zeros_like", "(", "salient_map", ")", "\n", "\n", "", "action_out", "=", "activations", "[", "0", "]", "\n", "return", "salient_map", ",", "action_out", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.display_salient_map": [[59, 74], ["numpy.concatenate", "cv2.imshow", "cv2.waitKey", "cv2.applyColorMap", "cv2.addWeighted", "to_merge_rows.append", "numpy.concatenate"], "function", ["None"], ["", "def", "display_salient_map", "(", "salient_map", ",", "obs", ",", "window_title", "=", "\"Saliency\"", ",", "frames_in_stack_to_be_displayed", "=", "(", "0", ",", "1", ",", "2", ")", ")", ":", "\n", "    ", "obs_bgr", "=", "obs", "[", "...", ",", "[", "2", ",", "1", ",", "0", ",", "5", ",", "4", ",", "3", ",", "8", ",", "7", ",", "6", "]", "]", "\n", "saliency_heatmap", "=", "cv2", ".", "applyColorMap", "(", "(", "salient_map", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "/", "255.", "\n", "# saliency_heatmap = np.repeat(saliency_map[...,None], 3, axis=2)", "\n", "# saliency_heatmap = saliency_map[...,None] * [[[0., 0., 1.]]]", "\n", "to_merge_rows", "=", "[", "]", "\n", "for", "i", "in", "frames_in_stack_to_be_displayed", ":", "\n", "        ", "obs_i", "=", "obs_bgr", "[", "...", ",", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", "\n", "saliency_heatmap_overlayed", "=", "cv2", ".", "addWeighted", "(", "obs_i", ",", "0.5", ",", "saliency_heatmap", ",", "0.5", ",", "0", ")", "\n", "to_merge_rows", ".", "append", "(", "np", ".", "concatenate", "(", "[", "saliency_heatmap", ",", "obs_i", ",", "saliency_heatmap_overlayed", "]", ",", "axis", "=", "1", ")", ")", "\n", "", "merged", "=", "np", ".", "concatenate", "(", "to_merge_rows", ",", "axis", "=", "0", ")", "\n", "# saliency_heatmap_overlayed = cv2.addWeighted(obs_bgr[..., :3], 0.5, saliency_heatmap, 0.5, 0)", "\n", "# merged = np.concatenate([saliency_heatmap, obs_bgr[...,:3], saliency_heatmap_overlayed], axis=1)", "\n", "cv2", ".", "imshow", "(", "window_title", ",", "merged", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.salient_object_visualization.display_salient_map2": [[75, 115], ["cv2.resize", "np.ones.astype", "numpy.concatenate", "cv2.imshow", "cv2.waitKey", "numpy.ones", "obs_bgr[].astype", "cv2.addWeighted", "cv2.applyColorMap", "numpy.array", "to_merge_rows.append", "to_merge_rows.append", "numpy.power", "numpy.concatenate", "numpy.power"], "function", ["None"], ["", "def", "display_salient_map2", "(", "salient_map", ",", "obs", ",", "window_title", "=", "\"Saliency\"", ",", "frames_in_stack_to_be_displayed", "=", "(", "0", ",", "1", ",", "2", ")", ",", "\n", "use_color_map", "=", "True", ",", "overlay_only", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    :param salient_map: Saleient object map, normed between 0 and 1\n    :param obs: Observations, or stack of 3 observations. Channel order must be RGB(RGBRGB).\n                Float representation is expected\n    :param window_title:\n    :param frames_in_stack_to_be_displayed: If frame stacking is used, select which RGB frames should be displayed\n    :param use_color_map: Display salient obj map as a colored heatmap, or highlight salient objects with a single blue\n                          color (opacity of the overlay is varied based on salient map values)\n    :param overlay_only: Display overlay only or also display the heatmap and the observation separately\n    \"\"\"", "\n", "if", "obs", ".", "shape", "[", "2", "]", "==", "9", ":", "\n", "        ", "obs_bgr", "=", "obs", "[", "...", ",", "[", "2", ",", "1", ",", "0", ",", "5", ",", "4", ",", "3", ",", "8", ",", "7", ",", "6", "]", "]", "\n", "", "else", ":", "\n", "        ", "obs_bgr", "=", "obs", "[", "...", ",", "[", "2", ",", "1", ",", "0", "]", "]", "\n", "frames_in_stack_to_be_displayed", "=", "[", "0", "]", "\n", "\n", "", "salient_map", "=", "cv2", ".", "resize", "(", "salient_map", ",", "obs_bgr", ".", "shape", "[", "1", ":", ":", "-", "1", "]", ")", "\n", "\n", "if", "use_color_map", ":", "\n", "        ", "saliency_heatmap", "=", "cv2", ".", "applyColorMap", "(", "(", "(", "1", "-", "salient_map", ")", "*", "255", ")", ".", "astype", "(", "np", ".", "uint8", ")", ",", "cv2", ".", "COLORMAP_JET", ")", "/", "255.", "\n", "", "else", ":", "\n", "        ", "saliency_heatmap", "=", "np", ".", "ones", "(", "(", "salient_map", ".", "shape", "[", "0", "]", ",", "salient_map", ".", "shape", "[", "1", "]", ",", "3", ")", ")", "\n", "saliency_heatmap", "=", "saliency_heatmap", "*", "np", ".", "array", "(", "[", "[", "[", "1.", ",", "0", ",", "0", "]", "]", "]", ")", "# \"Heatmap\" color is blue", "\n", "", "saliency_heatmap", "=", "saliency_heatmap", ".", "astype", "(", "np", ".", "float32", ")", "\n", "to_merge_rows", "=", "[", "]", "\n", "for", "i", "in", "frames_in_stack_to_be_displayed", ":", "\n", "        ", "obs_i", "=", "obs_bgr", "[", "...", ",", "3", "*", "i", ":", "3", "*", "(", "i", "+", "1", ")", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "saliency_heatmap_overlayed", "=", "cv2", ".", "addWeighted", "(", "obs_i", "*", "(", "1", "-", "np", ".", "power", "(", "salient_map", "[", "...", ",", "None", "]", ",", "2", ")", ")", ",", "1.0", ",", "\n", "saliency_heatmap", "*", "np", ".", "power", "(", "salient_map", "[", "...", ",", "None", "]", ",", "2", ")", ",", "1.0", ",", "0", ")", "\n", "if", "overlay_only", ":", "\n", "            ", "to_merge_rows", ".", "append", "(", "saliency_heatmap_overlayed", ")", "\n", "", "else", ":", "\n", "            ", "to_merge_rows", ".", "append", "(", "np", ".", "concatenate", "(", "[", "saliency_heatmap", ",", "obs_i", ",", "saliency_heatmap_overlayed", "]", ",", "axis", "=", "1", ")", ")", "\n", "", "", "merged", "=", "np", ".", "concatenate", "(", "to_merge_rows", ",", "axis", "=", "0", ")", "\n", "# merged = cv2.resize(merged, tuple(np.array(merged.shape[:2]) * 4), interpolation=cv2.INTER_LANCZOS4)", "\n", "cv2", ".", "imshow", "(", "window_title", ",", "merged", ")", "\n", "cv2", ".", "waitKey", "(", "1", ")", "\n", "return", "merged", "\n", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.TensorboardImageLogger.__init__": [[25, 28], ["super().__init__", "tensorboardX.SummaryWriter"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "logdir", ",", "trial", ")", ":", "\n", "        ", "super", "(", "TensorboardImageLogger", ",", "self", ")", ".", "__init__", "(", "config", ",", "logdir", ",", "trial", ")", "\n", "self", ".", "_writer", "=", "SummaryWriter", "(", "logdir", "=", "logdir", ",", "filename_suffix", "=", "\"_img\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.TensorboardImageLogger.on_result": [[29, 38], ["trajectory_plot.plot_trajectories", "trajectory_plot.plot_trajectories.savefig", "rllib_loggers.TensorboardImageLogger._writer.add_figure", "matplotlib.close", "matplotlib.close", "rllib_loggers.TensorboardImageLogger.flush", "result.get"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.plot_trajectories", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_figure", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.TensorboardImageLogger.flush"], ["", "def", "on_result", "(", "self", ",", "result", ")", ":", "\n", "        ", "step", "=", "result", ".", "get", "(", "TIMESTEPS_TOTAL", ")", "or", "result", "[", "TRAINING_ITERATION", "]", "\n", "\n", "traj_fig", "=", "plot_trajectories", "(", "result", "[", "'hist_stats'", "]", "[", "'_robot_coordinates'", "]", ")", "\n", "traj_fig", ".", "savefig", "(", "\"Trajectory.png\"", ")", "\n", "self", ".", "_writer", ".", "add_figure", "(", "\"TrainingTrajectories\"", ",", "traj_fig", ",", "global_step", "=", "step", ")", "\n", "plt", ".", "close", "(", "traj_fig", ")", "\n", "\n", "self", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.TensorboardImageLogger.flush": [[39, 42], ["rllib_loggers.TensorboardImageLogger._writer.flush"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.TensorboardImageLogger.flush"], ["", "def", "flush", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.__init__": [[45, 58], ["super().__init__", "wandb.init", "config.copy", "ray.tune.utils.flatten_dict", "rllib_loggers.WeightsAndBiasesLogger.wandb_run.config.update"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "logdir", ",", "trial", ")", ":", "\n", "        ", "super", "(", "WeightsAndBiasesLogger", ",", "self", ")", ".", "__init__", "(", "config", ",", "logdir", ",", "trial", ")", "\n", "# logger.warning(\"WeightsAndBiasesLogger.__init__() called! Trial.experiment_tag: {}\".format(trial.experiment_tag))", "\n", "\n", "self", ".", "trial", "=", "trial", "\n", "self", ".", "experiment_tag", "=", "trial", ".", "experiment_tag", "\n", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "project", "=", "weights_and_biases_project", ",", "\n", "name", "=", "config", "[", "'env_config'", "]", "[", "'experiment_name'", "]", "+", "'_'", "+", "trial", ".", "experiment_tag", ",", "\n", "reinit", "=", "True", ")", "\n", "valid_config", "=", "config", ".", "copy", "(", ")", "\n", "del", "valid_config", "[", "'callbacks'", "]", "\n", "valid_config", "=", "flatten_dict", "(", "valid_config", ",", "delimiter", "=", "\"/\"", ")", "\n", "self", ".", "wandb_run", ".", "config", ".", "update", "(", "valid_config", ",", "allow_val_change", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.on_result": [[59, 85], ["result.copy", "result.items", "ray.tune.utils.flatten_dict", "rllib_loggers.WeightsAndBiasesLogger.wandb_run.log", "result[].items", "trajectory_plot.plot_trajectories", "trajectory_plot.plot_trajectories.savefig", "rllib_loggers.WeightsAndBiasesLogger.wandb_run.log", "matplotlib.close", "matplotlib.close", "result.get", "wandb.Image", "rllib_loggers.WeightsAndBiasesLogger.wandb_run.log", "logger.warning", "wandb.Histogram"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.plot_trajectories", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close"], ["", "def", "on_result", "(", "self", ",", "result", ")", ":", "\n", "        ", "step", "=", "result", ".", "get", "(", "TIMESTEPS_TOTAL", ")", "or", "result", "[", "TRAINING_ITERATION", "]", "\n", "\n", "# Log scalars", "\n", "logged_results", "=", "[", "'episode_reward_max'", ",", "'episode_reward_mean'", ",", "'episode_reward_min'", ",", "'episode_len_mean'", ",", "\n", "'custom_metrics'", ",", "'sampler_perf'", ",", "'info'", ",", "'perf'", "]", "\n", "result_copy", "=", "result", ".", "copy", "(", ")", "\n", "for", "key", ",", "val", "in", "result", ".", "items", "(", ")", ":", "\n", "            ", "if", "key", "not", "in", "logged_results", ":", "\n", "                ", "del", "result_copy", "[", "key", "]", "\n", "", "", "flat_result", "=", "flatten_dict", "(", "result_copy", ",", "delimiter", "=", "\"/\"", ")", "\n", "self", ".", "wandb_run", ".", "log", "(", "flat_result", ",", "step", "=", "step", ",", "sync", "=", "False", ")", "\n", "\n", "# Log histograms", "\n", "for", "key", ",", "val", "in", "result", "[", "'hist_stats'", "]", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "key", "!=", "'_robot_coordinates'", ":", "\n", "                    ", "self", ".", "wandb_run", ".", "log", "(", "{", "\"Histograms/\"", "+", "key", ":", "wandb", ".", "Histogram", "(", "val", ")", "}", ",", "step", "=", "step", ",", "sync", "=", "False", ")", "\n", "", "", "except", "ValueError", ":", "\n", "                ", "logger", ".", "warning", "(", "\"Unable to log histogram for {}\"", ".", "format", "(", "key", ")", ")", "\n", "\n", "# Log trajectories", "\n", "", "", "traj_fig", "=", "plot_trajectories", "(", "result", "[", "'hist_stats'", "]", "[", "'_robot_coordinates'", "]", ")", "\n", "traj_fig", ".", "savefig", "(", "\"Trajectory.png\"", ")", "\n", "self", ".", "wandb_run", ".", "log", "(", "{", "'Episode Trajectories'", ":", "wandb", ".", "Image", "(", "traj_fig", ")", "}", ",", "step", "=", "step", ",", "sync", "=", "False", ")", "\n", "plt", ".", "close", "(", "traj_fig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_loggers.WeightsAndBiasesLogger.close": [[86, 88], ["wandb.join"], "methods", ["None"], ["", "def", "close", "(", "self", ")", ":", "\n", "        ", "wandb", ".", "join", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator.__init__": [[68, 84], ["copy.deepcopy", "duckietown_utils.env.launch_and_wrap_env", "duckietown_world.world_duckietown.duckiebot.DB18", "duckietown_world.world_duckietown.map_loading.load_map"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.launch_and_wrap_env"], ["def", "__init__", "(", "self", ",", "env_config", ",", "eval_lenght_sec", "=", "15", ",", "eval_map", "=", "DEFAULT_EVALUATION_MAP", ")", ":", "\n", "        ", "_env_config", "=", "copy", ".", "deepcopy", "(", "env_config", ")", "\n", "# An official evaluation episode is 15 seconds long", "\n", "_env_config", "[", "'episode_max_steps'", "]", "=", "eval_lenght_sec", "*", "_env_config", "[", "'simulation_framerate'", "]", "\n", "# Agets should be evaluated on the official eval map", "\n", "_env_config", "[", "'training_map'", "]", "=", "eval_map", "\n", "self", ".", "map_name", "=", "_env_config", "[", "'training_map'", "]", "\n", "# Make testing env", "\n", "self", ".", "env", "=", "launch_and_wrap_env", "(", "_env_config", ")", "\n", "\n", "# Set up evaluator", "\n", "# Creates an object 'duckiebot'", "\n", "self", ".", "ego_name", "=", "'duckiebot'", "\n", "self", ".", "db", "=", "DB18", "(", ")", "# class that gives the appearance", "\n", "# load one of the maps", "\n", "self", ".", "dw", "=", "load_map", "(", "self", ".", "map_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator.evaluate": [[85, 136], ["range", "duckietown_world_evaluator.DuckietownWorldEvaluator.items", "logger.info", "logger.info", "logger.info", "os.path.exists", "os.makedirs", "len", "duckietown_world_evaluator.DuckietownWorldEvaluator._collect_trajectory", "logger.info", "numpy.stack", "numpy.stack", "range", "duckietown_world.seqs.tsequence.SampledSequence.from_iterator", "duckietown_world_evaluator.DuckietownWorldEvaluator._eval_poses_sequence", "logger.info", "duckietown_world_evaluator.DuckietownWorldEvaluator._extract_total_episode_eval_metrics", "numpy.median", "numpy.mean", "numpy.std", "open", "json.dump", "duckietown_world_evaluator.DuckietownWorldEvaluator.start_poses.get", "len", "len", "duckietown_world.seqs.tsequence.SampledSequence.from_iterator.append", "enumerate", "os.path.join", "os.path.join", "ray.tune.logger.pretty_print", "ray.tune.logger.pretty_print", "ray.tune.logger.pretty_print", "duckietown_world.SE2Transform"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._collect_trajectory", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._eval_poses_sequence", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._extract_total_episode_eval_metrics"], ["", "def", "evaluate", "(", "self", ",", "agent", ",", "outdir", ",", "episodes", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Evaluates the agent on the map inicialised in __init__\n        :param agent: Agent to be evaluated, passed to self._collect_trajectory(agent,...)\n        :param outdir: Directory for logged outputs (trajectory plots + numeric data)\n        :param episodes: Number of evaluation episodes, if None, it is determined based on self.start_poses\n        \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "outdir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "outdir", ")", "\n", "", "if", "episodes", "is", "None", ":", "\n", "            ", "episodes", "=", "len", "(", "self", ".", "start_poses", ".", "get", "(", "self", ".", "map_name", ",", "[", "]", ")", ")", "\n", "", "totals", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "episodes", ")", ":", "\n", "            ", "episode_path", ",", "episode_orientations", ",", "episode_timestamps", "=", "self", ".", "_collect_trajectory", "(", "agent", ",", "i", ")", "\n", "logger", ".", "info", "(", "\"Episode {}/{} sampling completed\"", ".", "format", "(", "i", "+", "1", ",", "episodes", ")", ")", "\n", "if", "len", "(", "episode_timestamps", ")", "<=", "1", ":", "\n", "                ", "continue", "\n", "", "episode_path", "=", "np", ".", "stack", "(", "episode_path", ")", "\n", "episode_orientations", "=", "np", ".", "stack", "(", "episode_orientations", ")", "\n", "# Convert them to SampledSequences", "\n", "transforms_sequence", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "episode_path", ")", ")", ":", "\n", "                ", "transforms_sequence", ".", "append", "(", "SE2Transform", "(", "episode_path", "[", "j", "]", ",", "episode_orientations", "[", "j", "]", ")", ")", "\n", "", "transforms_sequence", "=", "SampledSequence", ".", "from_iterator", "(", "enumerate", "(", "transforms_sequence", ")", ")", "\n", "transforms_sequence", ".", "timestamps", "=", "episode_timestamps", "\n", "\n", "_outdir", "=", "outdir", "\n", "if", "outdir", "is", "not", "None", "and", "episodes", ">", "1", ":", "\n", "                ", "_outdir", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"Trajectory_{}\"", ".", "format", "(", "i", "+", "1", ")", ")", "\n", "", "evaluated", "=", "self", ".", "_eval_poses_sequence", "(", "transforms_sequence", ",", "outdir", "=", "_outdir", ")", "\n", "logger", ".", "info", "(", "\"Episode {}/{} plotting completed\"", ".", "format", "(", "i", "+", "1", ",", "episodes", ")", ")", "\n", "totals", "=", "self", ".", "_extract_total_episode_eval_metrics", "(", "evaluated", ",", "totals", ",", "display_outputs", "=", "True", ")", "\n", "\n", "# Calculate the median total metrics", "\n", "", "median_totals", "=", "{", "}", "\n", "mean_totals", "=", "{", "}", "\n", "stdev_totals", "=", "{", "}", "\n", "for", "key", ",", "value", "in", "totals", ".", "items", "(", ")", ":", "\n", "            ", "median_totals", "[", "key", "]", "=", "np", ".", "median", "(", "value", ")", "\n", "mean_totals", "[", "key", "]", "=", "np", ".", "mean", "(", "value", ")", "\n", "stdev_totals", "[", "key", "]", "=", "np", ".", "std", "(", "value", ")", "\n", "# Save results to file", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"total_metrics.json\"", ")", ",", "\"w\"", ")", "as", "json_file", ":", "\n", "            ", "json", ".", "dump", "(", "{", "'median_totals'", ":", "median_totals", ",", "\n", "'mean_totals'", ":", "mean_totals", ",", "\n", "'stdev_totals'", ":", "stdev_totals", ",", "\n", "'episode_totals'", ":", "totals", "}", ",", "json_file", ",", "indent", "=", "2", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"\\nMedian total metrics: \\n {}\"", ".", "format", "(", "pretty_print", "(", "median_totals", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"\\nMean total metrics: \\n {}\"", ".", "format", "(", "pretty_print", "(", "mean_totals", ")", ")", ")", "\n", "logger", ".", "info", "(", "\"\\nStandard deviation of total metrics: \\n {}\"", ".", "format", "(", "pretty_print", "(", "stdev_totals", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._collect_trajectory": [[137, 161], ["duckietown_world_evaluator.DuckietownWorldEvaluator.env.reset", "duckietown_world_evaluator.DuckietownWorldEvaluator._compute_action", "duckietown_world_evaluator.DuckietownWorldEvaluator.env.step", "duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates", "episode_path.append", "episode_orientations.append", "episode_timestamps.append", "duckietown_world_evaluator.DuckietownWorldEvaluator.start_poses.keys", "len", "numpy.array", "duckietown_world_evaluator.DuckietownWorldEvaluator.start_poses.get"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._compute_action", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates"], ["", "def", "_collect_trajectory", "(", "self", ",", "agent", ",", "i", ")", ":", "\n", "        ", "episode_path", "=", "[", "]", "\n", "episode_orientations", "=", "[", "]", "\n", "episode_timestamps", "=", "[", "]", "\n", "if", "self", ".", "map_name", "in", "self", ".", "start_poses", ".", "keys", "(", ")", "and", "i", "<", "len", "(", "self", ".", "start_poses", ".", "get", "(", "self", ".", "map_name", ",", "[", "]", ")", ")", ":", "\n", "            ", "self", ".", "env", ".", "unwrapped", ".", "user_tile_start", "=", "[", "0", ",", "0", "]", "\n", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "self", ".", "start_poses", "[", "self", ".", "map_name", "]", "[", "i", "]", "\n", "", "else", ":", "\n", "# No (more) preselected start positions are available -> gym_duckietown should generate them randomly", "\n", "# For that user_tile_start and start_pose must be None", "\n", "            ", "self", ".", "env", ".", "unwrapped", ".", "user_tile_start", "=", "None", "\n", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "None", "\n", "", "obs", "=", "self", ".", "env", ".", "reset", "(", ")", "\n", "done", "=", "False", "\n", "while", "not", "done", ":", "\n", "            ", "action", "=", "self", ".", "_compute_action", "(", "agent", ",", "obs", ")", "\n", "obs", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "cur_pos", "=", "correct_gym_duckietown_coordinates", "(", "self", ".", "env", ".", "unwrapped", ",", "self", ".", "env", ".", "unwrapped", ".", "cur_pos", ")", "\n", "episode_path", ".", "append", "(", "cur_pos", ")", "\n", "episode_orientations", ".", "append", "(", "np", ".", "array", "(", "self", ".", "env", ".", "unwrapped", ".", "cur_angle", ")", ")", "\n", "episode_timestamps", ".", "append", "(", "info", "[", "'Simulator'", "]", "[", "'timestamp'", "]", ")", "\n", "", "self", ".", "env", ".", "unwrapped", ".", "start_pose", "=", "None", "\n", "self", ".", "user_tile_start", "=", "None", "\n", "return", "episode_path", ",", "episode_orientations", ",", "episode_timestamps", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._compute_action": [[162, 170], ["agent.compute_action"], "methods", ["None"], ["", "def", "_compute_action", "(", "self", ",", "agent", ",", "obs", ")", ":", "\n", "        ", "\"\"\"\n        This function should be modified for other agents!\n        :param agent: Agent to be evaluated.\n        :param obs: New observation\n        :return: Action computed based on action\n        \"\"\"", "\n", "return", "agent", ".", "compute_action", "(", "obs", ",", "explore", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._eval_poses_sequence": [[171, 190], ["duckietown_world_evaluator.DuckietownWorldEvaluator.dw.set_object", "duckietown_world.seqs.tsequence.SampledSequence.from_iterator", "duckietown_world.rules.evaluate_rules", "print", "duckietown_world_evaluator.DuckietownWorldEvaluator.dw.remove_object", "duckietown_world_evaluator.DuckietownWorldEvaluator.dw.remove_object", "enumerate", "duckietown_world.rules.rule.make_timeseries", "duckietown_world.svg_drawing.draw_static", "duckietown_world_evaluator.DuckietownWorldEvaluator.dw.get_drawing_children"], "methods", ["None"], ["", "def", "_eval_poses_sequence", "(", "self", ",", "poses_sequence", ",", "outdir", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param poses_sequence:\n        :param outdir: If None evaluation outputs plots won't be saved\n        :return:\n        \"\"\"", "\n", "# puts the object in the world with a certain \"ground_truth\" constraint", "\n", "self", ".", "dw", ".", "set_object", "(", "self", ".", "ego_name", ",", "self", ".", "db", ",", "ground_truth", "=", "poses_sequence", ")", "\n", "# Rule evaluation (do not touch)", "\n", "interval", "=", "SampledSequence", ".", "from_iterator", "(", "enumerate", "(", "poses_sequence", ".", "timestamps", ")", ")", "\n", "evaluated", "=", "evaluate_rules", "(", "poses_sequence", "=", "poses_sequence", ",", "\n", "interval", "=", "interval", ",", "world", "=", "self", ".", "dw", ",", "ego_name", "=", "self", ".", "ego_name", ")", "\n", "if", "outdir", "is", "not", "None", ":", "\n", "            ", "timeseries", "=", "make_timeseries", "(", "evaluated", ")", "\n", "draw_static", "(", "self", ".", "dw", ",", "outdir", ",", "timeseries", "=", "timeseries", ")", "\n", "", "print", "(", "self", ".", "dw", ".", "get_drawing_children", "(", ")", ")", "\n", "self", ".", "dw", ".", "remove_object", "(", "self", ".", "ego_name", ")", "\n", "self", ".", "dw", ".", "remove_object", "(", "'visualization'", ")", "\n", "return", "evaluated", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.duckietown_world_evaluator.DuckietownWorldEvaluator._extract_total_episode_eval_metrics": [[191, 208], ["evaluated.items", "isinstance", "rer.metrics.items", "logger.info", "isinstance", "totals[].append", "ray.tune.logger.pretty_print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_extract_total_episode_eval_metrics", "(", "evaluated", ",", "totals", ",", "display_outputs", "=", "False", ")", ":", "\n", "        ", "episode_totals", "=", "{", "}", "\n", "for", "k", ",", "rer", "in", "evaluated", ".", "items", "(", ")", ":", "\n", "            ", "from", "duckietown_world", ".", "rules", "import", "RuleEvaluationResult", "\n", "assert", "isinstance", "(", "rer", ",", "RuleEvaluationResult", ")", "\n", "for", "km", ",", "evaluated_metric", "in", "rer", ".", "metrics", ".", "items", "(", ")", ":", "\n", "                ", "assert", "isinstance", "(", "evaluated_metric", ",", "EvaluatedMetric", ")", "\n", "episode_totals", "[", "k", "]", "=", "evaluated_metric", ".", "total", "\n", "if", "not", "(", "k", "in", "totals", ")", ":", "\n", "                    ", "totals", "[", "k", "]", "=", "[", "evaluated_metric", ".", "total", "]", "\n", "", "else", ":", "\n", "                    ", "totals", "[", "k", "]", ".", "append", "(", "evaluated_metric", ".", "total", ")", "\n", "", "", "", "if", "display_outputs", ":", "\n", "            ", "logger", ".", "info", "(", "\"\\nEpisode total metrics: \\n {}\"", ".", "format", "(", "pretty_print", "(", "episode_totals", ")", ")", ")", "\n", "\n", "", "return", "totals", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.on_episode_start": [[24, 48], ["None"], "function", ["None"], ["def", "on_episode_start", "(", "info", ")", ":", "\n", "    ", "\"\"\"\n    If adding new histograms, don't forget to edit on_train_result below (to prevent data accumulation over iterations).\n    :param info:\n    :return:\n    \"\"\"", "\n", "# info-keys: 'env', 'policy', 'episode'", "\n", "episode", "=", "info", "[", "'episode'", "]", "# type: rllib.evaluation.episode.MultiAgentEpisode", "\n", "\n", "episode", ".", "user_data", "[", "'robot_speed'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'deviation_centerline'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'deviation_heading'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'distance_travelled'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'distance_travelled_any'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'proximity_penalty'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'collision_risk_step_cnt'", "]", "=", "0", "\n", "episode", ".", "user_data", "[", "'reward_orientation'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'reward_velocity'", "]", "=", "[", "]", "\n", "episode", ".", "user_data", "[", "'reward_collision_avoidance'", "]", "=", "[", "]", "\n", "# Custom histogram data", "\n", "# episode.hist_data['action_prob'] = []", "\n", "episode", ".", "hist_data", "[", "'sampled_actions'", "]", "=", "[", "]", "\n", "episode", ".", "hist_data", "[", "'_robot_coordinates'", "]", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.on_episode_step": [[49, 99], ["episode.hist_data[].append", "episode.last_info_for", "numpy.clip", "episode.user_data[].append", "episode.user_data[].append", "episode.user_data[].append", "episode.user_data[].append", "episode.user_data[].append", "trajectory_plot.correct_gym_duckietown_coordinates", "episode.user_data[].append", "episode.user_data[].append", "episode.user_data[].append", "episode.last_action_for", "episode.last_info_for.get().get", "episode.last_info_for.get().get", "episode.last_info_for.get().get", "env_info[].keys", "episode.user_data[].append", "episode.user_data[].append", "env_info[].keys", "abs", "abs", "info[].get_unwrapped", "len", "numpy.linalg.norm", "episode.last_info_for.get", "episode.last_info_for.get", "episode.last_info_for.get"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates"], ["", "def", "on_episode_step", "(", "info", ")", ":", "\n", "    ", "episode", "=", "info", "[", "'episode'", "]", "# type: rllib.evaluation.episode.MultiAgentEpisode", "\n", "# info-keys: 'env', 'episode'", "\n", "episode", ".", "hist_data", "[", "'sampled_actions'", "]", ".", "append", "(", "np", ".", "clip", "(", "episode", ".", "last_action_for", "(", ")", ",", "\n", "ACTION_HISTOGRAM_LIMITS", "[", "0", "]", ",", "ACTION_HISTOGRAM_LIMITS", "[", "1", "]", ")", ")", "\n", "env_info", "=", "episode", ".", "last_info_for", "(", ")", "\n", "\n", "# {'Simulator': {'action': [array([0.96753883], dtype=float32), array([1.], dtype=float32)],", "\n", "#                'lane_position': {'dist': -0.09179686463148151,", "\n", "#                                  'dot_dir': 0.9997813004067312,", "\n", "#                                  'angle_deg': 1.1983109648377053,", "\n", "#                                  'angle_rad': 0.020914471799167954},", "\n", "#                'robot_speed': 0.0,", "\n", "#                'proximity_penalty': 0,", "\n", "#                'cur_pos': [3.859709301028824, 0.0, 4.362296864631481],", "\n", "#                'cur_angle': 3.1206781817906233,", "\n", "#                'wheel_velocities': [array([1.1610466], dtype=float32), array([1.2], dtype=float32)],", "\n", "#                'timestamp': 0.03333333333333333,", "\n", "#                'tile_coords': [6, 7],", "\n", "#                'msg': ''}}", "\n", "if", "env_info", "is", "not", "None", ":", "\n", "        ", "episode", ".", "user_data", "[", "'robot_speed'", "]", ".", "append", "(", "env_info", "[", "'Simulator'", "]", "[", "'robot_speed'", "]", ")", "\n", "episode", ".", "user_data", "[", "'proximity_penalty'", "]", ".", "append", "(", "env_info", "[", "'Simulator'", "]", "[", "'proximity_penalty'", "]", ")", "\n", "if", "env_info", "[", "'Simulator'", "]", "[", "'proximity_penalty'", "]", "<", "0.", ":", "\n", "            ", "episode", ".", "user_data", "[", "'collision_risk_step_cnt'", "]", "+=", "1", "\n", "", "episode", ".", "user_data", "[", "'reward_orientation'", "]", ".", "append", "(", "env_info", ".", "get", "(", "'custom_rewards'", ",", "{", "}", ")", ".", "get", "(", "'orientation'", ",", "0.", ")", ")", "\n", "episode", ".", "user_data", "[", "'reward_velocity'", "]", ".", "append", "(", "env_info", ".", "get", "(", "'custom_rewards'", ",", "{", "}", ")", ".", "get", "(", "'velocity'", ",", "0.", ")", ")", "\n", "episode", ".", "user_data", "[", "'reward_collision_avoidance'", "]", ".", "append", "(", "env_info", ".", "get", "(", "'custom_rewards'", ",", "{", "}", ")", ".", "get", "(", "'collision_avoidance'", ",", "0.", ")", ")", "\n", "# If the robot is \"not in a lane\", the lane position key is not added to the simulator info dictionary", "\n", "# see gym_duckietown.simulator.Simulator.get_agent_info()  (line 1318)", "\n", "if", "'lane_position'", "in", "env_info", "[", "'Simulator'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "episode", ".", "user_data", "[", "'deviation_centerline'", "]", ".", "append", "(", "abs", "(", "env_info", "[", "'Simulator'", "]", "[", "'lane_position'", "]", "[", "'dist'", "]", ")", ")", "\n", "episode", ".", "user_data", "[", "'deviation_heading'", "]", ".", "append", "(", "abs", "(", "env_info", "[", "'Simulator'", "]", "[", "'lane_position'", "]", "[", "'angle_deg'", "]", ")", ")", "\n", "\n", "", "cur_pos", "=", "env_info", "[", "'Simulator'", "]", "[", "'cur_pos'", "]", "\n", "sim", "=", "info", "[", "'env'", "]", ".", "get_unwrapped", "(", ")", "[", "0", "]", ".", "unwrapped", "\n", "corrected_cur_pos", "=", "correct_gym_duckietown_coordinates", "(", "sim", ",", "cur_pos", ")", "\n", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", ".", "append", "(", "corrected_cur_pos", ")", "\n", "\n", "dist_travelled", "=", "0.", "# Distance traveled in the correct right side lane", "\n", "dist_travelled_any", "=", "0.", "# Distance traveled anywhere on the road", "\n", "if", "'lane_position'", "in", "env_info", "[", "'Simulator'", "]", ".", "keys", "(", ")", ":", "\n", "            ", "if", "len", "(", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", ")", ">", "1", ":", "\n", "                ", "dist_travelled_any", "=", "np", ".", "linalg", ".", "norm", "(", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", "[", "-", "1", "]", "-", "\n", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", "[", "-", "2", "]", ",", "ord", "=", "2", ")", "\n", "if", "env_info", "[", "'Simulator'", "]", "[", "'lane_position'", "]", "[", "'dist'", "]", ">", "-", "0.1", ":", "\n", "# driving in the correct lane", "\n", "                    ", "dist_travelled", "=", "dist_travelled_any", "\n", "", "", "", "episode", ".", "user_data", "[", "'distance_travelled'", "]", ".", "append", "(", "dist_travelled", ")", "\n", "episode", ".", "user_data", "[", "'distance_travelled_any'", "]", ".", "append", "(", "dist_travelled_any", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.on_episode_end": [[107, 126], ["numpy.mean", "numpy.mean", "numpy.mean", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "episode.hist_data[].append"], "function", ["None"], ["", "", "def", "on_episode_end", "(", "info", ")", ":", "\n", "# info-keys: 'env', 'policy', 'episode'", "\n", "    ", "episode", "=", "info", "[", "'episode'", "]", "# type: rllib.evaluation.episode.MultiAgentEpisode", "\n", "\n", "episode", ".", "custom_metrics", "[", "'mean_robot_speed'", "]", "=", "np", ".", "mean", "(", "episode", ".", "user_data", "[", "'robot_speed'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'deviation_centerline'", "]", "=", "np", ".", "mean", "(", "episode", ".", "user_data", "[", "'deviation_centerline'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'deviation_heading'", "]", "=", "np", ".", "mean", "(", "episode", ".", "user_data", "[", "'deviation_heading'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'distance_travelled'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'distance_travelled'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'distance_travelled_any'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'distance_travelled_any'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'proximity_penalty'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'proximity_penalty'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'collision_risk_step_cnt'", "]", "=", "episode", ".", "user_data", "[", "'collision_risk_step_cnt'", "]", "\n", "episode", ".", "custom_metrics", "[", "'reward_orientation'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'reward_orientation'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'reward_velocity'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'reward_velocity'", "]", ")", "\n", "episode", ".", "custom_metrics", "[", "'reward_collision_avoidance'", "]", "=", "np", ".", "sum", "(", "episode", ".", "user_data", "[", "'reward_collision_avoidance'", "]", ")", "\n", "\n", "# Robot coordinate data is not intended to be displayed on histograms (it's not even in the correct format for it)", "\n", "# Robot coordinates are logged as histogram data because I couldn't find a better way to pass it to the loggers", "\n", "# to produce the trajectory plots", "\n", "episode", ".", "hist_data", "[", "'_robot_coordinates'", "]", ".", "append", "(", "episode", ".", "user_data", "[", "'robot_cur_pos'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.on_train_result": [[128, 151], ["None"], "function", ["None"], ["", "def", "on_train_result", "(", "result", ")", ":", "\n", "    ", "\"\"\"\n     Histogram stats are accumulated over iterations, resulting in data from any previous iteration shaping the\n    histogram of this iteration. To display the histogram of data only for this iteration any previous is deleted.\n    This is performed for custom histograms and RLlib built in histograms as well!!!\n    :param result:\n    :return:\n    \"\"\"", "\n", "\n", "episodes_this_iter", "=", "result", "[", "'result'", "]", "[", "'episodes_this_iter'", "]", "\n", "timesteps_this_iter", "=", "result", "[", "'result'", "]", "[", "'timesteps_this_iter'", "]", "\n", "\n", "# Custom histograms", "\n", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'sampled_actions'", "]", "=", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'sampled_actions'", "]", "[", ":", "timesteps_this_iter", "]", "\n", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'_robot_coordinates'", "]", "=", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'_robot_coordinates'", "]", "[", ":", "episodes_this_iter", "]", "\n", "\n", "# Built in histograms", "\n", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'episode_lengths'", "]", "=", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'episode_lengths'", "]", "[", ":", "episodes_this_iter", "]", "\n", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'episode_reward'", "]", "=", "result", "[", "'result'", "]", "[", "'hist_stats'", "]", "[", "'episode_reward'", "]", "[", ":", "episodes_this_iter", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.enable_obstacles": [[155, 160], ["isinstance"], "function", ["None"], ["", "def", "enable_obstacles", "(", "env", ")", ":", "\n", "    ", "semi_unwrapped", "=", "env", "\n", "while", "not", "isinstance", "(", "semi_unwrapped", ",", "ObstacleSpawningWrapper", ")", ":", "\n", "        ", "semi_unwrapped", "=", "semi_unwrapped", ".", "env", "\n", "", "semi_unwrapped", ".", "env_config", "[", "'spawn_obstacles'", "]", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.curriculum_apply_update": [[162, 171], ["result[].get", "trainer.workers.foreach_worker_with_index", "logger.warning", "worker.foreach_env", "rllib_callbacks.enable_obstacles"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.rllib_callbacks.enable_obstacles"], ["", "def", "curriculum_apply_update", "(", "result", ")", ":", "\n", "    ", "\"\"\"Magic\"\"\"", "\n", "timesteps_total", "=", "result", "[", "'result'", "]", ".", "get", "(", "'timesteps_total'", ")", "\n", "if", "timesteps_total", ">", "500.e+3", "and", "timesteps_total", "<", "550.e+3", ":", "\n", "        ", "trainer", "=", "result", "[", "\"trainer\"", "]", "\n", "# Alternative: call trainer._make_workers ?", "\n", "trainer", ".", "workers", ".", "foreach_worker_with_index", "(", "\n", "lambda", "worker", ",", "index", ":", "worker", ".", "foreach_env", "(", "lambda", "env", ":", "enable_obstacles", "(", "env", ")", ")", ")", "\n", "logger", ".", "warning", "(", "\"Obstacle spawning enabled at timestep {}\"", ".", "format", "(", "timesteps_total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.__init__": [[38, 48], ["experiment_tracker.CompoundExperimentTracker.log_args", "tensorboardX.SummaryWriter", "wandb.init"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.log_args"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "paths", ":", "ArtifactPaths", ",", "enable_tensorboard", "=", "True", ",", "enable_wand", "=", "True", ",", "\n", "wandb_project", "=", "\"duckietown-rl\"", ")", ":", "\n", "        ", "self", ".", "enable_tensorboard", "=", "enable_tensorboard", "\n", "self", ".", "enable_wand", "=", "enable_wand", "\n", "if", "self", ".", "enable_tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", "=", "SummaryWriter", "(", "logdir", "=", "paths", ".", "tensorboard_path", ")", "\n", "", "if", "self", ".", "enable_wand", ":", "\n", "            ", "self", ".", "wandb_run", "=", "wandb", ".", "init", "(", "project", "=", "wandb_project", ",", "name", "=", "args", ".", "experiment_name", ")", "\n", "", "self", ".", "global_step", "=", "1", "\n", "self", ".", "log_args", "(", "args", ")", "\n", "# self.hyperdash = Experiment(str(args.algo) + \" - \" + args.experiment_name)", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.log_args": [[52, 55], ["wandb.config.update"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.experiments.human_baseline.DuckietownWorldEvaluatorHumanBaseline.update"], ["", "def", "log_args", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "self", ".", "enable_wand", ":", "\n", "            ", "wandb", ".", "config", ".", "update", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_scalar_dict": [[56, 60], ["experiment_tracker._flatten_all_levels", "_flatten_all_levels.items", "experiment_tracker.CompoundExperimentTracker.add_scalar"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker._flatten_all_levels", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_scalar"], ["", "", "def", "add_scalar_dict", "(", "self", ",", "recursive_dict", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "flattened_dict", "=", "_flatten_all_levels", "(", "recursive_dict", ")", "\n", "for", "key", ",", "val", "in", "flattened_dict", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "add_scalar", "(", "key", ",", "val", ",", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_scalar": [[61, 71], ["experiment_tracker.CompoundExperimentTracker.tensorboard.add_scalar", "wandb.log"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_scalar"], ["", "", "def", "add_scalar", "(", "self", ",", "tag", ",", "scalar_value", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "if", "global_step", "is", "None", ":", "\n", "            ", "global_step", "=", "self", ".", "global_step", "\n", "self", ".", "global_step", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "global_step", "=", "global_step", "\n", "", "if", "self", ".", "enable_tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", ".", "add_scalar", "(", "tag", ",", "scalar_value", ",", "global_step", "=", "global_step", ")", "\n", "", "if", "self", ".", "enable_wand", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "tag", ":", "scalar_value", "}", ",", "step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_histogram": [[72, 83], ["experiment_tracker.CompoundExperimentTracker.tensorboard.add_histogram", "wandb.log", "wandb.Histogram"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_histogram"], ["", "", "def", "add_histogram", "(", "self", ",", "tag", ",", "values", ",", "global_step", "=", "None", ",", "bins", "=", "'auto'", ")", ":", "\n", "        ", "if", "global_step", "is", "None", ":", "\n", "            ", "global_step", "=", "self", ".", "global_step", "\n", "self", ".", "global_step", "+=", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "global_step", "=", "global_step", "\n", "", "if", "self", ".", "enable_tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", ".", "add_histogram", "(", "tag", ",", "values", ",", "bins", "=", "bins", ",", "global_step", "=", "global_step", ")", "\n", "", "if", "self", ".", "enable_wand", ":", "\n", "# wandb.log({tag: wandb.Histogram(values, num_bins=bins)})", "\n", "            ", "wandb", ".", "log", "(", "{", "tag", ":", "wandb", ".", "Histogram", "(", "values", ")", "}", ",", "step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_figure": [[84, 89], ["experiment_tracker.CompoundExperimentTracker.tensorboard.add_figure", "wandb.log", "wandb.Image"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_figure"], ["", "", "def", "add_figure", "(", "self", ",", "tag", ",", "figure", ",", "global_step", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "enable_tensorboard", ":", "\n", "            ", "self", ".", "tensorboard", ".", "add_figure", "(", "tag", ",", "figure", ",", "global_step", "=", "global_step", ")", "\n", "", "if", "self", ".", "enable_wand", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "tag", ":", "wandb", ".", "Image", "(", "figure", ")", "}", ",", "step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_image": [[90, 95], ["experiment_tracker.CompoundExperimentTracker.add_image", "wandb.log", "wandb.Image"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker.CompoundExperimentTracker.add_image"], ["", "", "def", "add_image", "(", "self", ",", "tag", ",", "img_tensor", ",", "global_step", "=", "None", ",", "dataformats", "=", "'CHW'", ")", ":", "\n", "        ", "if", "self", ".", "enable_tensorboard", ":", "\n", "            ", "self", ".", "add_image", "(", "tag", ",", "img_tensor", ",", "global_step", "=", "global_step", ",", "dataformats", "=", "dataformats", ")", "\n", "", "if", "self", ".", "enable_wand", ":", "\n", "            ", "wandb", ".", "log", "(", "{", "tag", ":", "wandb", ".", "Image", "(", "img_tensor", ")", "}", ",", "step", "=", "global_step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker._flatten_all_levels": [[16, 24], ["experiment_tracker._flatten_dict_of_dicts"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker._flatten_dict_of_dicts"], ["def", "_flatten_all_levels", "(", "recursive_dict", ")", ":", "\n", "    ", "while", "True", ":", "\n", "        ", "flattened_dict", "=", "_flatten_dict_of_dicts", "(", "recursive_dict", ")", "\n", "if", "recursive_dict", "==", "flattened_dict", ":", "\n", "            ", "break", "\n", "", "else", ":", "\n", "            ", "recursive_dict", "=", "flattened_dict", "\n", "", "", "return", "flattened_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.experiment_tracker._flatten_dict_of_dicts": [[26, 35], ["dict_of_dicts.items", "isinstance", "val.items"], "function", ["None"], ["", "def", "_flatten_dict_of_dicts", "(", "dict_of_dicts", ")", ":", "\n", "    ", "flattened_dict", "=", "{", "}", "\n", "for", "key", ",", "val", "in", "dict_of_dicts", ".", "items", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "val", ",", "dict", ")", ":", "\n", "            ", "for", "inner_key", ",", "inner_val", "in", "val", ".", "items", "(", ")", ":", "\n", "                ", "flattened_dict", "[", "key", "+", "'/'", "+", "inner_key", "]", "=", "inner_val", "\n", "", "", "else", ":", "\n", "            ", "flattened_dict", "[", "key", "]", "=", "val", "\n", "", "", "return", "flattened_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.seed": [[10, 13], ["numpy.random.seed", "random.seed"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.seed", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.seed"], ["def", "seed", "(", "seed", ")", ":", "\n", "    ", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update": [[15, 22], ["update_dict.items", "utils.recursive_dict_update", "type", "type", "target_dict.get", "target_dict.get"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update"], ["", "def", "recursive_dict_update", "(", "target_dict", ",", "update_dict", ")", ":", "\n", "    ", "for", "key", ",", "val", "in", "update_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "type", "(", "val", ")", "is", "dict", "and", "type", "(", "target_dict", ".", "get", "(", "key", ")", ")", "is", "dict", ":", "\n", "            ", "target_dict", "[", "key", "]", "=", "recursive_dict_update", "(", "target_dict", ".", "get", "(", "key", ",", "{", "}", ")", ",", "val", ")", "\n", "", "else", ":", "\n", "            ", "target_dict", "[", "key", "]", "=", "val", "\n", "", "", "return", "target_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.correct_gym_duckietown_coordinates": [[14, 26], ["numpy.array"], "function", ["None"], ["def", "correct_gym_duckietown_coordinates", "(", "sim", ",", "pos", ")", ":", "\n", "    ", "\"\"\"\n    Gym duckietown uses a weird, coordinate system where the pos[2], z direction is flipped, and shifted.\n    Duckietown world usese the unflipped version, this function handles this correction.\n    The calculation is based on gym_duckietown.simulator.Simulator.cartesian_from_weird(pos, angle)\n    :param sim: gym_duckietown.simulator.Simulator\n    :param pos:\n    :return:\n    \"\"\"", "\n", "# cartesian_position_SE2 = sim.cartesian_from_weird(pos, angle)", "\n", "# transform = cartesian_position_SE2.transform_values(SE2Transform.from_SE2)  #type: SE2Transform", "\n", "return", "np", ".", "array", "(", "[", "pos", "[", "0", "]", ",", "sim", ".", "grid_height", "*", "sim", ".", "road_tile_size", "-", "pos", "[", "2", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.trajectory_plot.plot_trajectories": [[28, 61], ["matplotlib.pyplot.figure", "plt.figure.gca", "enumerate", "fig.gca.axis", "matplotlib.pyplot.axis", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.switch_backend", "numpy.stack", "matplotlib.pyplot.axis", "matplotlib.pyplot.plot", "matplotlib.path.Path", "matplotlib.patches.PathPatch", "fig.gca.add_patch", "matplotlib.pyplot.colorbar", "matplotlib.pyplot.show", "matplotlib.pyplot.scatter", "matplotlib.pyplot.scatter", "numpy.array", "numpy.floor"], "function", ["None"], ["", "def", "plot_trajectories", "(", "paths", ",", "rewards", "=", "None", ",", "show_plot", "=", "False", ",", "road_tile_size", "=", "0.585", ",", "unify_start_tile", "=", "True", ")", ":", "\n", "    ", "if", "show_plot", ":", "\n", "        ", "plt", ".", "switch_backend", "(", "'tkagg'", ")", "\n", "", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", ")", "\n", "for", "i", ",", "episode_path", "in", "enumerate", "(", "paths", ")", ":", "\n", "        ", "episode_path", "=", "np", ".", "stack", "(", "episode_path", ")", "\n", "if", "unify_start_tile", ":", "\n", "            ", "init_pos", "=", "episode_path", "[", "0", "]", "\n", "init_tile_coords", "=", "np", ".", "floor", "(", "init_pos", "/", "road_tile_size", ")", "*", "road_tile_size", "\n", "episode_path", "-=", "init_tile_coords", "\n", "", "if", "rewards", "is", "not", "None", ":", "\n", "            ", "plt", ".", "scatter", "(", "episode_path", "[", ":", ",", "0", "]", ",", "episode_path", "[", ":", ",", "1", "]", ",", "s", "=", "0.1", ",", "c", "=", "rewards", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "scatter", "(", "episode_path", "[", ":", ",", "0", "]", ",", "episode_path", "[", ":", ",", "1", "]", ",", "s", "=", "0.1", ")", "\n", "", "plt", ".", "axis", "(", "'equal'", ")", "\n", "plt", ".", "plot", "(", "[", "episode_path", "[", "0", ",", "0", "]", "]", ",", "[", "episode_path", "[", "0", ",", "1", "]", "]", ",", "'rx'", ")", "\n", "", "if", "unify_start_tile", ":", "\n", "        ", "tile_borders", "=", "Path", "(", "np", ".", "array", "(", "[", "[", "0.", ",", "0.", "]", ",", "\n", "[", "0.", ",", "road_tile_size", "]", ",", "\n", "[", "road_tile_size", ",", "road_tile_size", "]", ",", "\n", "[", "road_tile_size", ",", "0.", "]", ",", "\n", "[", "0.", ",", "0.", "]", "]", ")", ")", "\n", "patch", "=", "patches", ".", "PathPatch", "(", "tile_borders", ",", "facecolor", "=", "'none'", ",", "lw", "=", "2", ",", "linestyle", "=", "'--'", ")", "\n", "ax", ".", "add_patch", "(", "patch", ")", "\n", "", "ax", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "axis", "(", "'equal'", ")", "\n", "if", "rewards", "is", "not", "None", ":", "\n", "        ", "plt", ".", "colorbar", "(", "shrink", "=", "0.5", ")", "\n", "", "plt", ".", "tight_layout", "(", ")", "\n", "if", "show_plot", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "return", "fig", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.DummyDuckietownGymLikeEnv.__init__": [[159, 173], ["gym.spaces.Box", "gym.spaces.Box"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "CAMERA_HEIGHT", ",", "CAMERA_WIDTH", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "self", ".", "action_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "-", "1", ",", "\n", "high", "=", "1", ",", "\n", "shape", "=", "(", "2", ",", ")", ",", "\n", "dtype", "=", "np", ".", "float32", "\n", ")", "\n", "self", ".", "road_tile_size", "=", "0.585", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.DummyDuckietownGymLikeEnv.reset": [[174, 177], ["logger.warning", "np.zeros"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Dummy Duckietown Gym reset() called!\"", ")", "\n", "return", "np", ".", "zeros", "(", "(", "CAMERA_HEIGHT", ",", "CAMERA_WIDTH", ",", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.DummyDuckietownGymLikeEnv.step": [[178, 185], ["logger.warning", "np.zeros"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Dummy Duckietown Gym step() called!\"", ")", "\n", "obs", "=", "np", ".", "zeros", "(", "(", "CAMERA_HEIGHT", ",", "CAMERA_WIDTH", ",", "3", ")", ")", "\n", "reward", "=", "0.0", "\n", "done", "=", "True", "\n", "info", "=", "{", "}", "\n", "return", "obs", ",", "reward", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.launch_and_wrap_env": [[36, 77], ["env_config.get", "logger.debug", "env.wrap_env", "logger.warning", "type", "gym_duckietown.simulator.Simulator", "logger.error", "env.resolve_multimap_name", "env_config.get"], "function", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.wrap_env", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.resolve_multimap_name"], ["def", "launch_and_wrap_env", "(", "env_config", ",", "default_env_id", "=", "0", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "env_id", "=", "env_config", ".", "worker_index", "# config is passed by rllib", "\n", "", "except", "AttributeError", "as", "err", ":", "\n", "        ", "logger", ".", "warning", "(", "err", ")", "\n", "env_id", "=", "default_env_id", "\n", "\n", "", "robot_speed", "=", "env_config", ".", "get", "(", "'robot_speed'", ",", "DEFAULT_ROBOT_SPEED", ")", "\n", "# If random robot speed is specified, the robot speed key holds a dictionary", "\n", "if", "type", "(", "robot_speed", ")", "is", "dict", "or", "robot_speed", "==", "'default'", ":", "\n", "        ", "robot_speed", "=", "DEFAULT_ROBOT_SPEED", "# The initial robot speed won't be random", "\n", "\n", "# The while loop and try block are necessary to prevent instant training crash from the", "\n", "# \"Exception: Could not find a valid starting pose after 5000 attempts\" in duckietown-gym-daffy 5.0.13", "\n", "", "spawn_successful", "=", "False", "\n", "seed", "=", "1234", "+", "env_id", "\n", "while", "not", "spawn_successful", ":", "\n", "        ", "try", ":", "\n", "            ", "env", "=", "Simulator", "(", "\n", "seed", "=", "seed", ",", "# random seed", "\n", "map_name", "=", "resolve_multimap_name", "(", "env_config", "[", "\"training_map\"", "]", ",", "env_id", ")", ",", "\n", "max_steps", "=", "env_config", ".", "get", "(", "\"episode_max_steps\"", ",", "500", ")", ",", "\n", "domain_rand", "=", "env_config", "[", "\"domain_rand\"", "]", ",", "\n", "dynamics_rand", "=", "env_config", "[", "\"dynamics_rand\"", "]", ",", "\n", "camera_rand", "=", "env_config", "[", "\"camera_rand\"", "]", ",", "\n", "camera_width", "=", "CAMERA_WIDTH", ",", "\n", "camera_height", "=", "CAMERA_HEIGHT", ",", "\n", "accept_start_angle_deg", "=", "env_config", "[", "\"accepted_start_angle_deg\"", "]", ",", "\n", "full_transparency", "=", "True", ",", "\n", "distortion", "=", "env_config", "[", "\"distortion\"", "]", ",", "\n", "frame_rate", "=", "env_config", "[", "\"simulation_framerate\"", "]", ",", "\n", "frame_skip", "=", "env_config", "[", "\"frame_skip\"", "]", ",", "\n", "robot_speed", "=", "robot_speed", "\n", ")", "\n", "spawn_successful", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "seed", "+=", "1", "# Otherwise it selects the same tile in the next attempt", "\n", "logger", ".", "error", "(", "\"{}; Retrying with new seed: {}\"", ".", "format", "(", "e", ",", "seed", ")", ")", "\n", "", "", "logger", ".", "debug", "(", "\"Env init successful\"", ")", "\n", "env", "=", "wrap_env", "(", "env_config", ",", "env", ")", "\n", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.resolve_multimap_name": [[79, 86], ["len"], "function", ["None"], ["", "def", "resolve_multimap_name", "(", "training_map_conf", ",", "env_id", ")", ":", "\n", "    ", "if", "'multimap'", "in", "training_map_conf", ":", "\n", "        ", "mapset", "=", "MAPSETS", "[", "training_map_conf", "]", "\n", "map_name_single_env", "=", "mapset", "[", "env_id", "%", "len", "(", "mapset", ")", "]", "\n", "", "else", ":", "\n", "        ", "map_name_single_env", "=", "training_map_conf", "\n", "", "return", "map_name_single_env", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.wrap_env": [[88, 156], ["InconvenientSpawnFixingWrapper", "env_config.get", "env_config.get", "env_config.get", "ResizeWrapper", "NormalizeWrapper", "env.DummyDuckietownGymLikeEnv", "duckietown_utils.wrappers.aido_wrapper.AIDOWrapper", "ObstacleSpawningWrapper", "ForwardObstacleSpawnnigWrapper", "isinstance", "ClipImageWrapper", "RGB2GrayscaleWrapper", "RandomFrameRepeatingWrapper", "ObservationBufferWrapper", "MotionBlurWrapper", "DiscreteWrapper", "DtRewardCollisionAvoidance", "ParamRandWrapper", "env_config.get", "env_config.get", "ActionDelayWrapper", "env_config.get", "Heading2WheelVelsWrapper", "DtRewardPosAngle", "DtRewardVelocity", "type", "type", "env_config.get", "ActionDelayWrapper", "LeftRightBraking2WheelVelsWrapper", "DtRewardTargetOrientation", "DtRewardVelocity", "env_config.get", "env_config.get", "LeftRightClipped2WheelVelsWrapper", "DtRewardWrapperDistanceTravelled", "SteeringBraking2WheelVelsWrapper", "DtRewardClipperWrapper", "logger.warning"], "function", ["None"], ["", "def", "wrap_env", "(", "env_config", ":", "dict", ",", "env", "=", "None", ")", ":", "\n", "    ", "if", "env", "is", "None", ":", "\n", "# Create a dummy Duckietown-like env if None was passed. This is mainly necessary to easily run", "\n", "# dts challenges evaluate", "\n", "        ", "env", "=", "DummyDuckietownGymLikeEnv", "(", ")", "\n", "\n", "# Simulation mod wrappers", "\n", "", "if", "env_config", "[", "\"mode\"", "]", "in", "[", "'train'", ",", "'debug'", "]", "and", "env_config", "[", "'aido_wrapper'", "]", ":", "\n", "        ", "env", "=", "AIDOWrapper", "(", "env", ")", "\n", "", "env", "=", "InconvenientSpawnFixingWrapper", "(", "env", ")", "\n", "if", "env_config", ".", "get", "(", "'spawn_obstacles'", ",", "False", ")", ":", "\n", "        ", "env", "=", "ObstacleSpawningWrapper", "(", "env", ",", "env_config", ")", "\n", "", "if", "env_config", ".", "get", "(", "'spawn_forward_obstacle'", ",", "False", ")", ":", "\n", "        ", "env", "=", "ForwardObstacleSpawnnigWrapper", "(", "env", ",", "env_config", ")", "\n", "", "if", "env_config", "[", "'mode'", "]", "in", "[", "'train'", ",", "'debug'", "]", ":", "\n", "        ", "if", "type", "(", "env_config", ".", "get", "(", "'frame_skip'", ")", ")", "is", "dict", "or", "type", "(", "env_config", ".", "get", "(", "'robot_speed'", ")", ")", "is", "dict", ":", "\n", "# Randomize frame skip or robot speed", "\n", "            ", "env", "=", "ParamRandWrapper", "(", "env", ",", "env_config", ")", "\n", "\n", "", "if", "isinstance", "(", "env_config", ".", "get", "(", "'action_delay_ratio'", ",", "0.", ")", ",", "float", ")", ":", "\n", "            ", "if", "env_config", ".", "get", "(", "'action_delay_ratio'", ",", "0.", ")", ">", "0.", ":", "\n", "                ", "env", "=", "ActionDelayWrapper", "(", "env", ",", "env_config", ")", "\n", "", "", "if", "env_config", ".", "get", "(", "'action_delay_ratio'", ",", "0.", ")", "==", "'random'", ":", "\n", "            ", "env", "=", "ActionDelayWrapper", "(", "env", ",", "env_config", ")", "\n", "\n", "# Observation wrappers", "\n", "", "", "if", "env_config", "[", "\"crop_image_top\"", "]", ":", "\n", "        ", "env", "=", "ClipImageWrapper", "(", "env", ",", "top_margin_divider", "=", "env_config", "[", "\"top_crop_divider\"", "]", ")", "\n", "", "if", "env_config", ".", "get", "(", "\"grayscale_image\"", ",", "False", ")", ":", "\n", "        ", "env", "=", "RGB2GrayscaleWrapper", "(", "env", ")", "\n", "", "env", "=", "ResizeWrapper", "(", "env", ",", "shape", "=", "env_config", "[", "\"resized_input_shape\"", "]", ")", "\n", "if", "env_config", "[", "'mode'", "]", "in", "[", "'train'", ",", "'debug'", "]", "and", "env_config", ".", "get", "(", "'frame_repeating'", ",", "0.0", ")", ">", "0", ":", "\n", "        ", "env", "=", "RandomFrameRepeatingWrapper", "(", "env", ",", "env_config", ")", "\n", "", "if", "env_config", "[", "\"frame_stacking\"", "]", ":", "\n", "        ", "env", "=", "ObservationBufferWrapper", "(", "env", ",", "obs_buffer_depth", "=", "env_config", "[", "\"frame_stacking_depth\"", "]", ")", "\n", "", "if", "env_config", "[", "\"mode\"", "]", "in", "[", "'train'", ",", "'debug'", "]", "and", "env_config", "[", "'motion_blur'", "]", ":", "\n", "        ", "env", "=", "MotionBlurWrapper", "(", "env", ")", "\n", "", "env", "=", "NormalizeWrapper", "(", "env", ")", "\n", "\n", "# Action wrappers", "\n", "if", "env_config", "[", "\"action_type\"", "]", "==", "'discrete'", ":", "\n", "        ", "env", "=", "DiscreteWrapper", "(", "env", ")", "\n", "", "elif", "'heading'", "in", "env_config", "[", "\"action_type\"", "]", ":", "\n", "        ", "env", "=", "Heading2WheelVelsWrapper", "(", "env", ",", "env_config", "[", "\"action_type\"", "]", ")", "\n", "", "elif", "env_config", "[", "\"action_type\"", "]", "==", "'leftright_braking'", ":", "\n", "        ", "env", "=", "LeftRightBraking2WheelVelsWrapper", "(", "env", ")", "\n", "", "elif", "env_config", "[", "\"action_type\"", "]", "==", "'leftright_clipped'", ":", "\n", "        ", "env", "=", "LeftRightClipped2WheelVelsWrapper", "(", "env", ")", "\n", "", "elif", "env_config", "[", "\"action_type\"", "]", "==", "'steering_braking'", ":", "\n", "        ", "env", "=", "SteeringBraking2WheelVelsWrapper", "(", "env", ")", "\n", "\n", "# Reward wrappers", "\n", "", "if", "env_config", "[", "'mode'", "]", "in", "[", "'train'", ",", "'debug'", ",", "'inference'", "]", ":", "\n", "        ", "if", "env_config", "[", "\"reward_function\"", "]", "in", "[", "'Posangle'", ",", "'posangle'", "]", ":", "\n", "            ", "env", "=", "DtRewardPosAngle", "(", "env", ")", "\n", "env", "=", "DtRewardVelocity", "(", "env", ")", "\n", "", "elif", "env_config", "[", "\"reward_function\"", "]", "==", "'target_orientation'", ":", "\n", "            ", "env", "=", "DtRewardTargetOrientation", "(", "env", ")", "\n", "env", "=", "DtRewardVelocity", "(", "env", ")", "\n", "", "elif", "env_config", "[", "\"reward_function\"", "]", "==", "'lane_distance'", ":", "\n", "            ", "env", "=", "DtRewardWrapperDistanceTravelled", "(", "env", ")", "\n", "", "elif", "env_config", "[", "\"reward_function\"", "]", "==", "'default_clipped'", ":", "\n", "            ", "env", "=", "DtRewardClipperWrapper", "(", "env", ",", "2", ",", "-", "2", ")", "\n", "", "else", ":", "# Also env_config['mode'] == 'default'", "\n", "            ", "logger", ".", "warning", "(", "\"Default Gym Duckietown reward used\"", ")", "\n", "", "env", "=", "DtRewardCollisionAvoidance", "(", "env", ")", "\n", "# env = DtRewardProximityPenalty(env)", "\n", "", "return", "env", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.env.get_wrappers": [[187, 208], ["isinstance", "isinstance", "isinstance", "obs_wrappers.append", "isinstance", "action_wrappers.append", "isinstance", "reward_wrappers.append", "isinstance"], "function", ["None"], ["", "", "def", "get_wrappers", "(", "wrapped_env", ")", ":", "\n", "    ", "obs_wrappers", "=", "[", "]", "\n", "action_wrappers", "=", "[", "]", "\n", "reward_wrappers", "=", "[", "]", "\n", "orig_env", "=", "wrapped_env", "\n", "while", "not", "(", "isinstance", "(", "orig_env", ",", "gym_duckietown", ".", "simulator", ".", "Simulator", ")", "or", "\n", "isinstance", "(", "orig_env", ",", "DummyDuckietownGymLikeEnv", ")", ")", ":", "\n", "        ", "if", "isinstance", "(", "orig_env", ",", "gym", ".", "ObservationWrapper", ")", ":", "\n", "            ", "obs_wrappers", ".", "append", "(", "orig_env", ")", "\n", "", "elif", "isinstance", "(", "orig_env", ",", "gym", ".", "ActionWrapper", ")", ":", "\n", "            ", "action_wrappers", ".", "append", "(", "orig_env", ")", "\n", "", "elif", "isinstance", "(", "orig_env", ",", "gym", ".", "RewardWrapper", ")", ":", "\n", "            ", "reward_wrappers", ".", "append", "(", "orig_env", ")", "\n", "", "elif", "isinstance", "(", "orig_env", ",", "gym", ".", "Wrapper", ")", ":", "\n", "            ", "None", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "(", "\"[duckietown_utils.env.get_wrappers] - {} Wrapper type is none of these:\"", "\n", "\" gym.ObservationWrapper, gym.ActionWrapper, gym.ActionWrapper\"", ".", "format", "(", "orig_env", ")", ")", "\n", "", "orig_env", "=", "orig_env", ".", "env", "\n", "\n", "", "return", "obs_wrappers", "[", ":", ":", "-", "1", "]", ",", "action_wrappers", "[", ":", ":", "-", "1", "]", ",", "reward_wrappers", "[", ":", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ResizeWrapper.__init__": [[23, 35], ["gym.ObservationWrapper.__init__", "isinstance", "gym.spaces.Box", "eval"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "shape", "=", "(", "120", ",", "160", ")", ")", ":", "\n", "        ", "super", "(", "ResizeWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "if", "isinstance", "(", "shape", ",", "str", ")", ":", "\n", "            ", "self", ".", "shape", "=", "eval", "(", "shape", ")", "+", "(", "self", ".", "observation_space", ".", "shape", "[", "2", "]", ",", ")", "# Depth is unchanged and can have any value", "\n", "", "else", ":", "\n", "            ", "self", ".", "shape", "=", "shape", "+", "(", "self", ".", "observation_space", ".", "shape", "[", "2", "]", ",", ")", "# Depth is unchanged and can have any value", "\n", "", "self", ".", "observation_space", ".", "shape", "=", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "shape", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ResizeWrapper.observation": [[36, 41], ["cv2.resize", "len", "numpy.expand_dims"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "resized", "=", "cv2", ".", "resize", "(", "observation", ",", "self", ".", "shape", "[", ":", "2", "]", "[", ":", ":", "-", "1", "]", ",", "interpolation", "=", "cv2", ".", "INTER_AREA", ",", ")", "\n", "if", "len", "(", "resized", ".", "shape", ")", "==", "2", ":", "\n", "            ", "resized", "=", "np", ".", "expand_dims", "(", "resized", ",", "2", ")", "\n", "", "return", "resized", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ClipImageWrapper.__init__": [[44, 58], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "top_margin_divider", "=", "3", ")", ":", "\n", "        ", "super", "(", "ClipImageWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "img_height", ",", "img_width", ",", "depth", "=", "self", ".", "observation_space", ".", "shape", "\n", "top_margin", "=", "img_height", "//", "top_margin_divider", "\n", "img_height", "=", "img_height", "-", "top_margin", "\n", "# Region Of Interest", "\n", "# r = [margin_left, margin_top, width, height]", "\n", "self", ".", "roi", "=", "[", "0", ",", "top_margin", ",", "img_width", ",", "img_height", "]", "\n", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "(", "img_height", ",", "img_width", ",", "depth", ")", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ClipImageWrapper.observation": [[59, 63], ["int", "int", "int", "int"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "r", "=", "self", ".", "roi", "\n", "observation", "=", "observation", "[", "int", "(", "r", "[", "1", "]", ")", ":", "int", "(", "r", "[", "1", "]", "+", "r", "[", "3", "]", ")", ",", "int", "(", "r", "[", "0", "]", ")", ":", "int", "(", "r", "[", "0", "]", "+", "r", "[", "2", "]", ")", "]", "\n", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.NormalizeWrapper.__init__": [[65, 71], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "super", "(", "NormalizeWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "obs_lo", "=", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", "\n", "self", ".", "obs_hi", "=", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", "\n", "obs_shape", "=", "self", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "0.0", ",", "1.0", ",", "obs_shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.NormalizeWrapper.observation": [[72, 77], ["None"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "obs_lo", "==", "0.0", "and", "self", ".", "obs_hi", "==", "1.0", ":", "\n", "            ", "return", "obs", "\n", "", "else", ":", "\n", "            ", "return", "(", "obs", "-", "self", ".", "obs_lo", ")", "/", "(", "self", ".", "obs_hi", "-", "self", ".", "obs_lo", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ChannelsLast2ChannelsFirstWrapper.__init__": [[80, 88], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "super", "(", "ChannelsLast2ChannelsFirstWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "obs_shape", "=", "self", ".", "observation_space", ".", "shape", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "obs_shape", "[", "2", "]", ",", "obs_shape", "[", "0", "]", ",", "obs_shape", "[", "1", "]", "]", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ChannelsLast2ChannelsFirstWrapper.observation": [[89, 91], ["observation.transpose"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "return", "observation", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ObservationBufferWrapper.__init__": [[94, 121], ["gym.ObservationWrapper.__init__", "list", "tuple", "gym.spaces.Box", "len", "len", "tuple", "len"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ",", "obs_buffer_depth", "=", "3", ")", ":", "\n", "        ", "super", "(", "ObservationBufferWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "obs_space_shape_list", "=", "list", "(", "self", ".", "observation_space", ".", "shape", ")", "\n", "\n", "# The last dimension, is used. For images, this should be the depth.", "\n", "# For vectors, the output is still a vector, just concatenated.", "\n", "self", ".", "buffer_axis", "=", "len", "(", "obs_space_shape_list", ")", "-", "1", "\n", "obs_space_shape_list", "[", "self", ".", "buffer_axis", "]", "*=", "obs_buffer_depth", "\n", "self", ".", "observation_space", ".", "shape", "=", "tuple", "(", "obs_space_shape_list", ")", "\n", "\n", "if", "len", "(", "self", ".", "observation_space", ".", "shape", ")", "==", "3", ":", "\n", "            ", "limit_low", "=", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", "\n", "limit_high", "=", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", "\n", "", "elif", "len", "(", "self", ".", "observation_space", ".", "shape", ")", "==", "1", ":", "\n", "# Note this was implemented for vector like observation spaces (e.g. a VAE latent vector)", "\n", "            ", "limit_low", "=", "self", ".", "observation_space", ".", "low", "[", "0", "]", "\n", "limit_high", "=", "self", ".", "observation_space", ".", "high", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"Only 1 or 3 dimentsional obs space supported!\"", "\n", "\n", "", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "limit_low", ",", "\n", "limit_high", ",", "\n", "tuple", "(", "obs_space_shape_list", ")", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "self", ".", "obs_buffer_depth", "=", "obs_buffer_depth", "\n", "self", ".", "obs_buffer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ObservationBufferWrapper.observation": [[122, 130], ["numpy.concatenate", "numpy.concatenate", "range"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "        ", "if", "self", ".", "obs_buffer_depth", "==", "1", ":", "\n", "            ", "return", "obs", "\n", "", "if", "self", ".", "obs_buffer", "is", "None", ":", "\n", "            ", "self", ".", "obs_buffer", "=", "np", ".", "concatenate", "(", "[", "obs", "for", "_", "in", "range", "(", "self", ".", "obs_buffer_depth", ")", "]", ",", "axis", "=", "self", ".", "buffer_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "obs_buffer", "=", "np", ".", "concatenate", "(", "(", "self", ".", "obs_buffer", "[", "...", ",", "(", "obs", ".", "shape", "[", "self", ".", "buffer_axis", "]", ")", ":", "]", ",", "obs", ")", ",", "axis", "=", "self", ".", "buffer_axis", ")", "\n", "", "return", "self", ".", "obs_buffer", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.ObservationBufferWrapper.reset": [[131, 135], ["observation_wrappers.ObservationBufferWrapper.env.reset", "observation_wrappers.ObservationBufferWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "obs_buffer", "=", "None", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "return", "self", ".", "observation", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RGB2GrayscaleWrapper.__init__": [[137, 144], ["gym.ObservationWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", "=", "None", ")", ":", "\n", "        ", "super", "(", "RGB2GrayscaleWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "observation_space", "=", "spaces", ".", "Box", "(", "\n", "self", ".", "observation_space", ".", "low", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "self", ".", "observation_space", ".", "high", "[", "0", ",", "0", ",", "0", "]", ",", "\n", "(", "self", ".", "observation_space", ".", "shape", "[", "0", "]", ",", "self", ".", "observation_space", ".", "shape", "[", "1", "]", ",", "1", ")", ",", "\n", "dtype", "=", "self", ".", "observation_space", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RGB2GrayscaleWrapper.observation": [[145, 155], ["cv2.cvtColor", "numpy.expand_dims"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "obs", ")", ":", "\n", "# cv2.imshow(\"Camera\", cv2.cvtColor(obs, cv2.COLOR_RGB2BGR))", "\n", "# cv2.waitKey(0)", "\n", "        ", "gray", "=", "cv2", ".", "cvtColor", "(", "obs", ",", "cv2", ".", "COLOR_RGB2GRAY", ")", "\n", "# cv2.imshow(\"Camera2\", gray)", "\n", "# cv2.waitKey(0)", "\n", "\n", "# Add an extra dimension, because conv lasers need an input as (batch, height, width, channels)", "\n", "gray", "=", "np", ".", "expand_dims", "(", "gray", ",", "2", ")", "\n", "return", "gray", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper.__init__": [[167, 178], ["gym.ObservationWrapper.__init__", "float"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", "MotionBlurWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "camera_fov_height_angle", "=", "self", ".", "unwrapped", ".", "cam_fov_y", "/", "180.", "*", "np", ".", "pi", "\n", "self", ".", "camera_fov_width_angle", "=", "self", ".", "unwrapped", ".", "camera_width", "/", "float", "(", "self", ".", "unwrapped", ".", "camera_height", ")", "*", "self", ".", "camera_fov_height_angle", "\n", "self", ".", "camera_height_px", "=", "self", ".", "observation_space", ".", "shape", "[", "0", "]", "\n", "self", ".", "camera_width_px", "=", "self", ".", "observation_space", ".", "shape", "[", "1", "]", "\n", "self", ".", "blur_time", "=", "0.05", "\n", "self", ".", "prev_angle", "=", "self", ".", "unwrapped", ".", "cur_angle", "\n", "self", ".", "simulate_rotational_blur", "=", "True", "\n", "self", ".", "simulate_forward_blur", "=", "False", "# Vertical convolution doesn't work well for this", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper.observation": [[179, 199], ["logger.debug", "numpy.zeros", "cv2.filter2D", "abs", "logger.debug", "numpy.zeros", "cv2.filter2D", "numpy.round().astype", "observation_wrappers.MotionBlurWrapper._angle_diff", "numpy.round().astype", "numpy.round", "numpy.round", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "simulate_rotational_blur", ":", "\n", "            ", "cur_angle", "=", "self", ".", "unwrapped", ".", "cur_angle", "\n", "angular_vel", "=", "self", ".", "_angle_diff", "(", "self", ".", "prev_angle", ",", "cur_angle", ")", "*", "self", ".", "unwrapped", ".", "frame_rate", "*", "self", ".", "unwrapped", ".", "frame_skip", "\n", "self", ".", "prev_angle", "=", "cur_angle", "\n", "delta_angle", "=", "angular_vel", "*", "self", ".", "blur_time", "\n", "if", "abs", "(", "delta_angle", ")", ">", "0", ":", "\n", "                ", "ksize", "=", "np", ".", "round", "(", "np", ".", "abs", "(", "delta_angle", "/", "self", ".", "camera_fov_width_angle", "*", "self", ".", "camera_width_px", ")", ")", ".", "astype", "(", "int", ")", "+", "1", "\n", "logger", ".", "debug", "(", "\"Rotational motion blur kernel size {}\"", ".", "format", "(", "ksize", ")", ")", "\n", "kernel", "=", "np", ".", "zeros", "(", "(", "ksize", ",", "ksize", ")", ")", "\n", "kernel", "[", "ksize", "//", "2", ",", ":", "]", "=", "1.", "/", "ksize", "\n", "observation", "=", "cv2", ".", "filter2D", "(", "observation", ",", "-", "1", ",", "kernel", ")", "\n", "", "", "if", "self", ".", "simulate_forward_blur", ":", "\n", "# Empirical kernel size, proportional to the current speed over the max speed of the robot", "\n", "            ", "ksize", "=", "np", ".", "round", "(", "np", ".", "abs", "(", "self", ".", "camera_width_px", "/", "30", "*", "self", ".", "unwrapped", ".", "speed", "/", "self", ".", "unwrapped", ".", "robot_speed", ")", ")", ".", "astype", "(", "int", ")", "+", "1", "\n", "logger", ".", "debug", "(", "\"Forward motion blur kernel size {}\"", ".", "format", "(", "ksize", ")", ")", "\n", "kernel", "=", "np", ".", "zeros", "(", "(", "ksize", ",", "ksize", ")", ")", "\n", "kernel", "[", ":", ",", "ksize", "//", "2", "]", "=", "1.", "/", "ksize", "\n", "observation", "=", "cv2", ".", "filter2D", "(", "observation", ",", "-", "1", ",", "kernel", ")", "\n", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper.reset": [[200, 204], ["observation_wrappers.MotionBlurWrapper.env.reset", "observation_wrappers.MotionBlurWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "observation", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "self", ".", "prev_angle", "=", "self", ".", "unwrapped", ".", "cur_angle", "\n", "return", "self", ".", "observation", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff": [[205, 220], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_angle_diff", "(", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        Angle difference between two angles (orientations, directions). The smallest signed value is returned.\n        The difference is measured from x to y (the difference is positive if y is larger)\n        :param x, y: angles in radians\n        :return: smallest angle difference between the two angles, should be in the range [-pi, pi]\n        \"\"\"", "\n", "diff", "=", "y", "-", "x", "\n", "remainder", "=", "diff", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "quotient", "=", "diff", "//", "(", "2", "*", "np", ".", "pi", ")", "\n", "if", "remainder", ">", "np", ".", "pi", ":", "\n", "            ", "diff", "-=", "2", "*", "np", ".", "pi", "\n", "", "diff", "-=", "quotient", "*", "2", "*", "np", ".", "pi", "\n", "return", "diff", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.__init__": [[229, 233], ["gym.ObservationWrapper.__init__", "numpy.clip"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "env_config", ")", ":", "\n", "        ", "super", "(", "RandomFrameRepeatingWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "repeat_config", "=", "np", ".", "clip", "(", "env_config", "[", "\"frame_repeating\"", "]", ",", "0", ",", "0.999", ")", "\n", "self", ".", "previous_frame", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation": [[234, 245], ["numpy.random.random"], "methods", ["None"], ["", "def", "observation", "(", "self", ",", "observation", ")", ":", "\n", "        ", "if", "self", ".", "previous_frame", "is", "None", ":", "\n", "            ", "self", ".", "previous_frame", "=", "observation", "\n", "return", "observation", "\n", "", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "repeat_config", ":", "\n", "# New observation \"not received\" keeping the last one", "\n", "            ", "observation", "=", "self", ".", "previous_frame", "\n", "", "else", ":", "\n", "# New observation \"received\", store and don't change it", "\n", "            ", "self", ".", "previous_frame", "=", "observation", "\n", "", "return", "observation", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.reset": [[246, 250], ["observation_wrappers.RandomFrameRepeatingWrapper.env.reset", "observation_wrappers.RandomFrameRepeatingWrapper.observation"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "previous_frame", "=", "None", "\n", "observation", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "return", "self", ".", "observation", "(", "observation", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardWrapperDistanceTravelled.__init__": [[20, 24], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", "DtRewardWrapperDistanceTravelled", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "# gym_duckietown.simulator.Simulator):", "\n", "self", ".", "prev_pos", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardWrapperDistanceTravelled.reward": [[25, 68], ["reward_wrappers.DtRewardWrapperDistanceTravelled.unwrapped.closest_curve_point", "reward_wrappers.DtRewardWrapperDistanceTravelled.unwrapped.closest_curve_point", "numpy.linalg.norm", "numpy.isnan", "logger.error", "reward_wrappers.DtRewardWrapperDistanceTravelled.unwrapped.get_lane_pos2", "numpy.dot", "logger.error"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "# Baseline reward is a for each step", "\n", "        ", "my_reward", "=", "0", "\n", "\n", "# Get current position and store it for the next step", "\n", "pos", "=", "self", ".", "unwrapped", ".", "cur_pos", "\n", "prev_pos", "=", "self", ".", "prev_pos", "\n", "self", ".", "prev_pos", "=", "pos", "\n", "if", "prev_pos", "is", "None", ":", "\n", "            ", "return", "0", "\n", "\n", "# Get the closest point on the curve at the current and previous position", "\n", "", "angle", "=", "self", ".", "unwrapped", ".", "cur_angle", "\n", "curve_point", ",", "tangent", "=", "self", ".", "unwrapped", ".", "closest_curve_point", "(", "pos", ",", "angle", ")", "\n", "prev_curve_point", ",", "prev_tangent", "=", "self", ".", "unwrapped", ".", "closest_curve_point", "(", "prev_pos", ",", "angle", ")", "\n", "if", "curve_point", "is", "None", "or", "prev_curve_point", "is", "None", ":", "\n", "            ", "logger", ".", "error", "(", "\"self.unwrapped.closest_curve_point(pos, angle) returned None!!!\"", ")", "\n", "return", "my_reward", "\n", "# Calculate the distance between these points (chord of the curve), curve length would be more accurate", "\n", "", "diff", "=", "curve_point", "-", "prev_curve_point", "\n", "dist", "=", "np", ".", "linalg", ".", "norm", "(", "diff", ")", "\n", "\n", "try", ":", "\n", "            ", "lp", "=", "self", ".", "unwrapped", ".", "get_lane_pos2", "(", "pos", ",", "self", ".", "unwrapped", ".", "cur_angle", ")", "\n", "# print(\"Dist: {:3.2f} | DotDir: {:3.2f} | Angle_deg: {:3.2f}\".format(lp.dist, lp.dot_dir, lp.angle_deg))", "\n", "", "except", "NotInLane", ":", "\n", "            ", "return", "my_reward", "\n", "\n", "# Dist is negative on the left side of the rignt lane center and is -0.1 on the lane center.", "\n", "# The robot is 0.13 (m) wide, to keep the whole vehicle in the right lane, dist should be > -0.1+0.13/2)=0.035", "\n", "# 0.05 is a little less conservative", "\n", "", "if", "lp", ".", "dist", "<", "-", "0.05", ":", "\n", "            ", "return", "my_reward", "\n", "# Check if the agent moved in the correct direction", "\n", "", "if", "np", ".", "dot", "(", "tangent", ",", "diff", ")", "<", "0", ":", "\n", "            ", "return", "my_reward", "\n", "\n", "# Reward is proportional to the distance travelled at each step", "\n", "", "my_reward", "=", "50", "*", "dist", "\n", "if", "np", ".", "isnan", "(", "my_reward", ")", ":", "\n", "            ", "my_reward", "=", "0.", "\n", "logger", ".", "error", "(", "\"Reward is nan!!!\"", ")", "\n", "", "return", "my_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.__init__": [[71, 82], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "super", "(", "DtRewardPosAngle", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "# gym_duckietown.simulator.Simulator", "\n", "\n", "", "self", ".", "max_lp_dist", "=", "0.05", "\n", "self", ".", "max_dev_from_target_angle_deg_narrow", "=", "10", "\n", "self", ".", "max_dev_from_target_angle_deg_wide", "=", "50", "\n", "self", ".", "target_angle_deg_at_edge", "=", "45", "\n", "self", ".", "scale", "=", "1.", "/", "2.", "\n", "self", ".", "orientation_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.reward": [[83, 102], ["reward_wrappers.DtRewardPosAngle.calculate_pos_angle_reward", "logger.debug", "reward_wrappers.DtRewardPosAngle.unwrapped.get_lane_pos2"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardTargetOrientation.calculate_pos_angle_reward"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "pos", "=", "self", ".", "unwrapped", ".", "cur_pos", "\n", "angle", "=", "self", ".", "unwrapped", ".", "cur_angle", "\n", "try", ":", "\n", "            ", "lp", "=", "self", ".", "unwrapped", ".", "get_lane_pos2", "(", "pos", ",", "angle", ")", "\n", "# print(\"Dist: {:3.2f} | DotDir: {:3.2f} | Angle_deg: {:3.2f}\". format(lp.dist, lp.dot_dir, lp.angle_deg))", "\n", "", "except", "NotInLane", ":", "\n", "            ", "return", "-", "10.", "\n", "\n", "# print(\"Dist: {:3.2f} | Angle_deg: {:3.2f}\".format(normed_lp_dist, normed_lp_angle))", "\n", "", "angle_narrow_reward", ",", "angle_wide_reward", "=", "self", ".", "calculate_pos_angle_reward", "(", "lp", ".", "dist", ",", "lp", ".", "angle_deg", ")", "\n", "logger", ".", "debug", "(", "\"Angle Narrow: {:4.3f} | Angle Wide: {:4.3f} \"", ".", "format", "(", "angle_narrow_reward", ",", "angle_wide_reward", ")", ")", "\n", "self", ".", "orientation_reward", "=", "self", ".", "scale", "*", "(", "angle_narrow_reward", "+", "angle_wide_reward", ")", "\n", "\n", "early_termination_penalty", "=", "0.", "\n", "# If the robot leaves the track or collides with an other object it receives a penalty", "\n", "# if reward <= -1000.:  # Gym Duckietown gives -1000 for this", "\n", "#     early_termination_penalty = -10.", "\n", "return", "self", ".", "orientation_reward", "+", "early_termination_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.step": [[103, 109], ["reward_wrappers.DtRewardPosAngle.env.step", "info.keys", "reward_wrappers.DtRewardPosAngle.reward"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "'custom_rewards'", "not", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'custom_rewards'", "]", "=", "{", "}", "\n", "", "info", "[", "'custom_rewards'", "]", "[", "'orientation'", "]", "=", "self", ".", "orientation_reward", "\n", "return", "observation", ",", "self", ".", "reward", "(", "reward", ")", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.reset": [[110, 113], ["reward_wrappers.DtRewardPosAngle.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "orientation_reward", "=", "0.", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.leaky_cosine": [[114, 121], ["numpy.abs", "numpy.cos", "numpy.abs"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "leaky_cosine", "(", "x", ")", ":", "\n", "        ", "slope", "=", "0.05", "\n", "if", "np", ".", "abs", "(", "x", ")", "<", "np", ".", "pi", ":", "\n", "            ", "return", "np", ".", "cos", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "-", "1.", "-", "slope", "*", "(", "np", ".", "abs", "(", "x", ")", "-", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.gaussian": [[122, 125], ["numpy.exp", "numpy.power", "numpy.power"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "gaussian", "(", "x", ",", "mu", "=", "0.", ",", "sig", "=", "1.", ")", ":", "\n", "        ", "return", "np", ".", "exp", "(", "-", "np", ".", "power", "(", "x", "-", "mu", ",", "2.", ")", "/", "(", "2", "*", "np", ".", "power", "(", "sig", ",", "2.", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.calculate_pos_angle_reward": [[126, 134], ["numpy.clip", "reward_wrappers.DtRewardPosAngle.leaky_cosine", "reward_wrappers.DtRewardPosAngle.leaky_cosine"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.leaky_cosine", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.leaky_cosine"], ["", "def", "calculate_pos_angle_reward", "(", "self", ",", "lp_dist", ",", "lp_angle", ")", ":", "\n", "        ", "normed_lp_dist", "=", "lp_dist", "/", "self", ".", "max_lp_dist", "\n", "target_angle", "=", "-", "np", ".", "clip", "(", "normed_lp_dist", ",", "-", "1.", ",", "1.", ")", "*", "self", ".", "target_angle_deg_at_edge", "\n", "reward_narrow", "=", "0.5", "+", "0.5", "*", "self", ".", "leaky_cosine", "(", "\n", "np", ".", "pi", "*", "(", "target_angle", "-", "lp_angle", ")", "/", "self", ".", "max_dev_from_target_angle_deg_narrow", ")", "\n", "reward_wide", "=", "0.5", "+", "0.5", "*", "self", ".", "leaky_cosine", "(", "\n", "np", ".", "pi", "*", "(", "target_angle", "-", "lp_angle", ")", "/", "self", ".", "max_dev_from_target_angle_deg_wide", ")", "\n", "return", "reward_narrow", ",", "reward_wide", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.plot_reward": [[135, 193], ["numpy.linspace", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.legend", "matplotlib.pyplot.show", "numpy.linspace", "numpy.linspace", "numpy.meshgrid", "matplotlib.pyplot.imshow", "numpy.floor().astype", "numpy.floor().astype", "matplotlib.pyplot.xticks", "matplotlib.pyplot.yticks", "matplotlib.pyplot.colorbar", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.grid", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.show", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.plot", "matplotlib.pyplot.legend", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.show", "matplotlib.pyplot.figure", "matplotlib.pyplot.plot", "matplotlib.pyplot.xlabel", "matplotlib.pyplot.ylabel", "matplotlib.pyplot.yticks", "matplotlib.pyplot.gca().invert_yaxis", "seaborn.despine", "matplotlib.pyplot.gca().spines[].set_position", "matplotlib.pyplot.grid", "matplotlib.pyplot.tight_layout", "matplotlib.pyplot.show", "matplotlib.pyplot.figure", "matplotlib.pyplot.figure.gca", "plt.figure.gca.plot_surface", "matplotlib.pyplot.figure.colorbar", "matplotlib.pyplot.show", "numpy.vectorize", "reward_wrappers.DtRewardPosAngle.gaussian", "numpy.vectorize", "numpy.vectorize", "numpy.round", "y[].astype", "numpy.argmax", "y[].astype", "numpy.floor", "numpy.floor", "matplotlib.pyplot.gca", "matplotlib.pyplot.gca", "numpy.linspace", "numpy.linspace", "matplotlib.pyplot.gca"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.gaussian"], ["", "def", "plot_reward", "(", "self", ")", ":", "\n", "        ", "from", "matplotlib", "import", "rcParams", "\n", "rcParams", "[", "'font.family'", "]", "=", "'serif'", "\n", "rcParams", "[", "'font.size'", "]", "=", "12", "\n", "\n", "x", "=", "np", ".", "linspace", "(", "-", "5", ",", "5", ",", "200", ")", "\n", "fx", "=", "np", ".", "vectorize", "(", "self", ".", "leaky_cosine", ")", "(", "x", ")", "\n", "plt", ".", "plot", "(", "x", ",", "0.5", "+", "0.5", "*", "fx", ")", "\n", "plt", ".", "plot", "(", "x", ",", "self", ".", "gaussian", "(", "x", ")", ")", "\n", "plt", ".", "legend", "(", "[", "\"Leaky cosine\"", ",", "\"Gaussian\"", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "xcount", ",", "ycount", "=", "(", "400", ",", "400", ")", "\n", "x", "=", "np", ".", "linspace", "(", "-", "0.3", ",", "0.1", ",", "xcount", ")", "\n", "y", "=", "np", ".", "linspace", "(", "-", "90", ",", "90", ",", "ycount", ")", "\n", "vpos", ",", "vang", "=", "np", ".", "meshgrid", "(", "x", ",", "y", ")", "\n", "velocity_reward", "=", "0.", "\n", "angle_narrow_reward", ",", "angle_wide_reward", "=", "np", ".", "vectorize", "(", "self", ".", "calculate_pos_angle_reward", ")", "(", "vpos", ",", "vang", ")", "\n", "reward", "=", "np", ".", "vectorize", "(", "self", ".", "scale_and_combine_rewards", ")", "(", "angle_narrow_reward", ",", "angle_wide_reward", ",", "velocity_reward", ")", "\n", "plt", ".", "imshow", "(", "reward", ")", "\n", "xtic_loc", "=", "np", ".", "floor", "(", "np", ".", "linspace", "(", "0", ",", "xcount", "-", "1", ",", "9", ")", ")", ".", "astype", "(", "int", ")", "\n", "ytic_loc", "=", "np", ".", "floor", "(", "np", ".", "linspace", "(", "0", ",", "ycount", "-", "1", ",", "9", ")", ")", ".", "astype", "(", "int", ")", "\n", "plt", ".", "xticks", "(", "xtic_loc", ",", "np", ".", "round", "(", "x", "[", "xtic_loc", "]", ",", "2", ")", ")", "\n", "plt", ".", "yticks", "(", "ytic_loc", ",", "(", "y", "[", "ytic_loc", "]", ")", ".", "astype", "(", "int", ")", ")", "\n", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "xlabel", "(", "\"Position [m]\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Robot position \\n relative to the right lane center [m]\"", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "plot", "(", "y", ",", "reward", "[", ":", ",", "300", "]", ")", "\n", "plt", ".", "plot", "(", "y", ",", "reward", "[", ":", ",", "200", "]", ")", "\n", "plt", ".", "plot", "(", "y", ",", "reward", "[", ":", ",", "399", "]", ")", "\n", "plt", ".", "legend", "(", "[", "\"At lane center\"", ",", "\"At road center and in left lane\"", ",", "\"At right road side\"", "]", ")", "\n", "plt", ".", "xlabel", "(", "\"Orientation\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Reward\"", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "x", ",", "np", ".", "argmax", "(", "reward", ",", "axis", "=", "0", ")", ")", "\n", "plt", ".", "xlabel", "(", "\"Position [m]\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Preferred (maximal reward) orientation\"", ")", "\n", "plt", ".", "yticks", "(", "ytic_loc", ",", "(", "y", "[", "ytic_loc", "]", ")", ".", "astype", "(", "int", ")", ")", "\n", "plt", ".", "gca", "(", ")", ".", "invert_yaxis", "(", ")", "\n", "seaborn", ".", "despine", "(", "ax", "=", "plt", ".", "gca", "(", ")", ",", "offset", "=", "0", ")", "\n", "plt", ".", "gca", "(", ")", ".", "spines", "[", "'bottom'", "]", ".", "set_position", "(", "'center'", ")", "\n", "# plt.gca().spines['left'].set_position('zero')", "\n", "plt", ".", "grid", "(", ")", "\n", "plt", ".", "tight_layout", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "gca", "(", "projection", "=", "'3d'", ")", "\n", "surf", "=", "ax", ".", "plot_surface", "(", "vpos", ",", "vang", ",", "reward", ",", "antialiased", "=", "False", ",", ")", "\n", "fig", ".", "colorbar", "(", "surf", ",", "shrink", "=", "0.5", ",", "aspect", "=", "5", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardTargetOrientation.__init__": [[196, 200], ["reward_wrappers.DtRewardPosAngle.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", "DtRewardTargetOrientation", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "max_dev_from_target_angle_deg", "=", "50", "\n", "self", ".", "scale", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardTargetOrientation.calculate_pos_angle_reward": [[201, 207], ["numpy.clip", "reward_wrappers.DtRewardTargetOrientation.leaky_cosine"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardPosAngle.leaky_cosine"], ["", "def", "calculate_pos_angle_reward", "(", "self", ",", "lp_dist", ",", "lp_angle", ")", ":", "\n", "        ", "normed_lp_dist", "=", "lp_dist", "/", "self", ".", "max_lp_dist", "\n", "target_angle", "=", "-", "np", ".", "clip", "(", "normed_lp_dist", ",", "-", "1.", ",", "1.", ")", "*", "self", ".", "target_angle_deg_at_edge", "\n", "reward_narrow", "=", "0.5", "+", "0.5", "*", "self", ".", "leaky_cosine", "(", "\n", "np", ".", "pi", "*", "(", "target_angle", "-", "lp_angle", ")", "/", "self", ".", "max_dev_from_target_angle_deg", ")", "\n", "return", "reward_narrow", ",", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardClipperWrapper.__init__": [[210, 214], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "clip_high", "=", "1000", ",", "clip_low", "=", "-", "100", ")", ":", "\n", "        ", "super", "(", "DtRewardClipperWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "clip_high", "=", "clip_high", "\n", "self", ".", "clip_low", "=", "clip_low", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardClipperWrapper.reward": [[215, 220], ["numpy.isnan", "numpy.clip", "logger.error"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "reward", ")", ":", "\n", "            ", "reward", "=", "0.", "\n", "logger", ".", "error", "(", "\"Reward is nan!!!\"", ")", "\n", "", "return", "np", ".", "clip", "(", "reward", ",", "self", ".", "clip_low", ",", "self", ".", "clip_high", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardVelocity.__init__": [[223, 227], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "super", "(", "DtRewardVelocity", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "", "self", ".", "velocity_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardVelocity.reward": [[228, 234], ["numpy.isnan", "numpy.max", "logger.error"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "self", ".", "velocity_reward", "=", "np", ".", "max", "(", "self", ".", "unwrapped", ".", "wheelVels", ")", "*", "0.25", "\n", "if", "np", ".", "isnan", "(", "self", ".", "velocity_reward", ")", ":", "\n", "            ", "self", ".", "velocity_reward", "=", "0.", "\n", "logger", ".", "error", "(", "\"Velocity reward is nan, likely because the action was [nan, nan]!\"", ")", "\n", "", "return", "reward", "+", "self", ".", "velocity_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardVelocity.reset": [[235, 238], ["reward_wrappers.DtRewardVelocity.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "velocity_reward", "=", "0.", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardVelocity.step": [[239, 245], ["reward_wrappers.DtRewardVelocity.env.step", "info.keys", "reward_wrappers.DtRewardVelocity.reward"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "'custom_rewards'", "not", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'custom_rewards'", "]", "=", "{", "}", "\n", "", "info", "[", "'custom_rewards'", "]", "[", "'velocity'", "]", "=", "self", ".", "velocity_reward", "\n", "return", "observation", ",", "self", ".", "reward", "(", "reward", ")", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardCollisionAvoidance.__init__": [[248, 254], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "super", "(", "DtRewardCollisionAvoidance", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "# gym_duckietown.simulator.Simulator", "\n", "", "self", ".", "prev_proximity_penalty", "=", "0.", "\n", "self", ".", "proximity_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardCollisionAvoidance.reward": [[255, 265], ["reward_wrappers.DtRewardCollisionAvoidance.unwrapped.proximity_penalty2", "logger.debug"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "# Proximity reward is proportional to the change of proximity penalty. Range is ~ 0 - +1.5 (empirical)", "\n", "# Moving away from an obstacle is promoted, if the robot and the obstacle are close to each other.", "\n", "        ", "proximity_penalty", "=", "self", ".", "unwrapped", ".", "proximity_penalty2", "(", "self", ".", "unwrapped", ".", "cur_pos", ",", "self", ".", "unwrapped", ".", "cur_angle", ")", "\n", "self", ".", "proximity_reward", "=", "-", "(", "self", ".", "prev_proximity_penalty", "-", "proximity_penalty", ")", "*", "50", "\n", "if", "self", ".", "proximity_reward", "<", "0.", ":", "\n", "            ", "self", ".", "proximity_reward", "=", "0.", "\n", "", "logger", ".", "debug", "(", "\"Proximity reward: {:.3f}\"", ".", "format", "(", "self", ".", "proximity_reward", ")", ")", "\n", "self", ".", "prev_proximity_penalty", "=", "proximity_penalty", "\n", "return", "reward", "+", "self", ".", "proximity_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardCollisionAvoidance.reset": [[266, 270], ["reward_wrappers.DtRewardCollisionAvoidance.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "prev_proximity_penalty", "=", "0.", "\n", "self", ".", "proximity_reward", "=", "0.", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardCollisionAvoidance.step": [[271, 277], ["reward_wrappers.DtRewardCollisionAvoidance.env.step", "info.keys", "reward_wrappers.DtRewardCollisionAvoidance.reward"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "'custom_rewards'", "not", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'custom_rewards'", "]", "=", "{", "}", "\n", "", "info", "[", "'custom_rewards'", "]", "[", "'collision_avoidance'", "]", "=", "self", ".", "proximity_reward", "\n", "return", "observation", ",", "self", ".", "reward", "(", "reward", ")", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.__init__": [[280, 284], ["gym.RewardWrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "if", "env", "is", "not", "None", ":", "\n", "            ", "super", "(", "DtRewardProximityPenalty", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "", "self", ".", "proximity_reward", "=", "0.", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reward": [[285, 290], ["reward_wrappers.DtRewardProximityPenalty.unwrapped.proximity_penalty2", "logger.debug"], "methods", ["None"], ["", "def", "reward", "(", "self", ",", "reward", ")", ":", "\n", "        ", "proximity_penalty", "=", "self", ".", "unwrapped", ".", "proximity_penalty2", "(", "self", ".", "unwrapped", ".", "cur_pos", ",", "self", ".", "unwrapped", ".", "cur_angle", ")", "\n", "self", ".", "proximity_reward", "=", "proximity_penalty", "*", "2.5", "\n", "logger", ".", "debug", "(", "\"Proximity reward: {:.3f}\"", ".", "format", "(", "self", ".", "proximity_reward", ")", ")", "\n", "return", "reward", "+", "self", ".", "proximity_reward", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reset": [[291, 294], ["reward_wrappers.DtRewardProximityPenalty.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "proximity_reward", "=", "0.", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.step": [[295, 301], ["reward_wrappers.DtRewardProximityPenalty.env.step", "info.keys", "reward_wrappers.DtRewardProximityPenalty.reward"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.reward_wrappers.DtRewardProximityPenalty.reward"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "observation", ",", "reward", ",", "done", ",", "info", "=", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "if", "'custom_rewards'", "not", "in", "info", ".", "keys", "(", ")", ":", "\n", "            ", "info", "[", "'custom_rewards'", "]", "=", "{", "}", "\n", "", "info", "[", "'custom_rewards'", "]", "[", "'collision_avoidance'", "]", "=", "self", ".", "proximity_reward", "\n", "return", "observation", ",", "self", ".", "reward", "(", "reward", ")", ",", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.DiscreteWrapper.__init__": [[25, 28], ["gym.ActionWrapper.__init__", "gym.spaces.Discrete"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "gym", ".", "ActionWrapper", ".", "__init__", "(", "self", ",", "env", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Discrete", "(", "3", ")", "\n", "# self.action_space = spaces.Box(low=0., high=1., shape=(3,))", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.DiscreteWrapper.action": [[30, 50], ["isinstance", "numpy.array"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "# argmax_action = np.argmax(action)", "\n", "# sampled_action = np.random.sample([0, 1, 2, 3], 1, p=action)", "\n", "# Turn left", "\n", "", "if", "action", "==", "0", ":", "\n", "            ", "vels", "=", "[", "0.", ",", "1.", "]", "\n", "#  Go forward", "\n", "", "elif", "action", "==", "1", ":", "\n", "            ", "vels", "=", "[", "1.", ",", "1.", "]", "\n", "# Turn right", "\n", "", "elif", "action", "==", "2", ":", "\n", "            ", "vels", "=", "[", "1.", ",", "0.", "]", "\n", "# # Stop", "\n", "# elif argmax_action == 3:", "\n", "#     vels = [0., 0.]", "\n", "", "else", ":", "\n", "            ", "assert", "False", ",", "\"unknown action\"", "\n", "", "return", "np", ".", "array", "(", "vels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.LeftRightBraking2WheelVelsWrapper.__init__": [[53, 56], ["gym.ActionWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", "LeftRightBraking2WheelVelsWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.LeftRightBraking2WheelVelsWrapper.action": [[57, 61], ["isinstance", "numpy.clip", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "", "return", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", "-", "np", ".", "array", "(", "action", ")", ",", "0.", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.LeftRightClipped2WheelVelsWrapper.__init__": [[64, 67], ["gym.ActionWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ")", ":", "\n", "        ", "super", "(", "LeftRightClipped2WheelVelsWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "0", ",", "high", "=", "1", ",", "shape", "=", "(", "2", ",", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.LeftRightClipped2WheelVelsWrapper.action": [[68, 72], ["isinstance", "numpy.clip", "numpy.array"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "", "return", "np", ".", "clip", "(", "np", ".", "array", "(", "action", ")", ",", "0.", ",", "1.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.Heading2WheelVelsWrapper.__init__": [[75, 82], ["gym.ActionWrapper.__init__", "gym.spaces.Box"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "heading_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "Heading2WheelVelsWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "heading_type", "=", "heading_type", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "-", "1.", ",", "high", "=", "1.", ",", "shape", "=", "(", "1", ",", ")", ")", "\n", "if", "self", ".", "heading_type", "==", "'heading_trapz'", ":", "\n", "            ", "straight_plateau_half_width", "=", "0.3333", "# equal interval for left, right turning and straight", "\n", "self", ".", "mul", "=", "1.", "/", "(", "1.", "-", "straight_plateau_half_width", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.Heading2WheelVelsWrapper.action": [[83, 98], ["isinstance", "numpy.clip", "numpy.array", "numpy.clip", "numpy.clip", "numpy.array", "numpy.clip", "numpy.clip", "numpy.array", "numpy.array", "numpy.sin", "numpy.sin"], "methods", ["None"], ["", "", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "# action = [-0.5 * action + 0.5, 0.5 * action + 0.5]", "\n", "", "if", "self", ".", "heading_type", "==", "'heading_smooth'", ":", "\n", "            ", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "action", "**", "3", ",", "1", "-", "action", "**", "3", "]", ")", ",", "0.", ",", "1.", ")", "# Full speed single value control", "\n", "", "elif", "self", ".", "heading_type", "==", "'heading_trapz'", ":", "\n", "            ", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "-", "action", ",", "1", "+", "action", "]", ")", "*", "self", ".", "mul", ",", "0.", ",", "1.", ")", "\n", "", "elif", "self", ".", "heading_type", "==", "'heading_sine'", ":", "\n", "            ", "action", "=", "np", ".", "clip", "(", "[", "1", "-", "np", ".", "sin", "(", "action", "*", "np", ".", "pi", ")", ",", "1", "+", "np", ".", "sin", "(", "action", "*", "np", ".", "pi", ")", "]", ",", "0.", ",", "1.", ")", "\n", "", "elif", "self", ".", "heading_type", "==", "'heading_limited'", ":", "\n", "            ", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "action", "*", "0.666666", ",", "1", "-", "action", "*", "0.666666", "]", ")", ",", "0.", ",", "1.", ")", "\n", "", "else", ":", "\n", "            ", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "action", ",", "1", "-", "action", "]", ")", ",", "0.", ",", "1.", ")", "# Full speed single value control", "\n", "", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.SteeringBraking2WheelVelsWrapper.__init__": [[108, 112], ["gym.ActionWrapper.__init__", "gym.spaces.Box", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "heading_type", "=", "None", ")", ":", "\n", "        ", "super", "(", "SteeringBraking2WheelVelsWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "heading_type", "=", "heading_type", "\n", "self", ".", "action_space", "=", "spaces", ".", "Box", "(", "low", "=", "np", ".", "array", "(", "[", "-", "1.", ",", "0.", "]", ")", ",", "high", "=", "np", ".", "array", "(", "[", "1.", ",", "1.", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.SteeringBraking2WheelVelsWrapper.action": [[113, 119], ["isinstance", "numpy.clip", "numpy.clip", "numpy.array"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "if", "isinstance", "(", "action", ",", "tuple", ")", ":", "\n", "            ", "action", "=", "action", "[", "0", "]", "\n", "", "action", "=", "np", ".", "clip", "(", "np", ".", "array", "(", "[", "1", "+", "action", "[", "0", "]", ",", "1", "-", "action", "[", "0", "]", "]", ")", ",", "0.", ",", "1.", ")", "# Full speed single value control", "\n", "action", "*=", "np", ".", "clip", "(", "1.", "-", "action", "[", "1", "]", ",", "0.", ",", "1.", ")", "\n", "return", "action", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.ActionSmoothingWrapper.__init__": [[122, 126], ["gym.ActionWrapper.__init__", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", ")", ":", "\n", "        ", "super", "(", "ActionSmoothingWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "self", ".", "action_space", ".", "shape", ")", "\n", "self", ".", "new_action_ratio", "=", "0.75", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.ActionSmoothingWrapper.action": [[127, 131], ["None"], "methods", ["None"], ["", "def", "action", "(", "self", ",", "action", ")", ":", "\n", "        ", "smooth_action", "=", "(", "1.", "-", "self", ".", "new_action_ratio", ")", "*", "self", ".", "last_action", "+", "self", ".", "new_action_ratio", "*", "action", "\n", "self", ".", "last_action", "=", "action", "\n", "return", "smooth_action", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.action_wrappers.ActionSmoothingWrapper.reset": [[132, 135], ["numpy.zeros", "action_wrappers.ActionSmoothingWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "self", ".", "action_space", ".", "shape", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.__init__": [[38, 42], ["gym.Wrapper.__init__", "simulator_mod_wrappers.ParamRandWrapper.check_random_var_descriptor", "simulator_mod_wrappers.ParamRandWrapper.check_random_var_descriptor", "env_config.get", "env_config.get"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.check_random_var_descriptor", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.check_random_var_descriptor"], ["def", "__init__", "(", "self", ",", "env", ",", "env_config", ":", "dict", ")", ":", "\n", "        ", "super", "(", "ParamRandWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "robot_speed_conf", "=", "self", ".", "check_random_var_descriptor", "(", "env_config", ".", "get", "(", "'robot_speed'", ")", ")", "\n", "self", ".", "frame_skip_conf", "=", "self", ".", "check_random_var_descriptor", "(", "env_config", ".", "get", "(", "'frame_skip'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper._reset": [[43, 51], ["simulator_mod_wrappers.ParamRandWrapper.sample_random_var", "simulator_mod_wrappers.ParamRandWrapper.sample_random_var"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.sample_random_var", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.sample_random_var"], ["", "def", "_reset", "(", "self", ")", ":", "\n", "        ", "simulator", "=", "self", ".", "unwrapped", "# type: Simulator", "\n", "if", "self", ".", "robot_speed_conf", "is", "not", "None", ":", "\n", "            ", "cur_robot_speed", "=", "self", ".", "sample_random_var", "(", "self", ".", "robot_speed_conf", ")", "\n", "simulator", ".", "robot_speed", "=", "cur_robot_speed", "\n", "", "if", "self", ".", "frame_skip_conf", "is", "not", "None", ":", "\n", "            ", "cur_frame_skip", "=", "self", ".", "sample_random_var", "(", "self", ".", "frame_skip_conf", ")", "\n", "simulator", ".", "frame_skip", "=", "cur_frame_skip", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.reset": [[52, 55], ["simulator_mod_wrappers.ParamRandWrapper._reset", "simulator_mod_wrappers.ParamRandWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper._reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_reset", "(", ")", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.sample_random_var": [[56, 69], ["type", "random_var_descriptor.get", "random_var_descriptor.get", "random_var_descriptor.get", "random_var_descriptor.get", "numpy.random.choice", "logger.error", "numpy.random.random", "random_var_descriptor.get"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "sample_random_var", "(", "cls", ",", "random_var_descriptor", ")", ":", "\n", "        ", "if", "type", "(", "random_var_descriptor", ")", "is", "dict", ":", "\n", "            ", "if", "random_var_descriptor", ".", "get", "(", "'distribution'", ")", "in", "'uniform'", ":", "\n", "                ", "low", "=", "random_var_descriptor", ".", "get", "(", "'low'", ")", "\n", "high", "=", "random_var_descriptor", ".", "get", "(", "'high'", ")", "\n", "return", "(", "high", "-", "low", ")", "*", "np", ".", "random", ".", "random", "(", ")", "+", "low", "\n", "", "elif", "random_var_descriptor", ".", "get", "(", "'distribution'", ")", "in", "'categorical'", ":", "\n", "                ", "return", "np", ".", "random", ".", "choice", "(", "random_var_descriptor", ".", "get", "(", "'values'", ")", ")", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\"Distribution type should be  one of {}\"", ".", "format", "(", "cls", ".", "distribution_types", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "random_var_descriptor", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ParamRandWrapper.check_random_var_descriptor": [[70, 101], ["type", "logger.error", "random_var_descriptor.get", "random_var_descriptor.get", "random_var_descriptor.get", "random_var_descriptor.get", "type", "random_var_descriptor.get"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "check_random_var_descriptor", "(", "random_var_descriptor", ")", ":", "\n", "        ", "if", "type", "(", "random_var_descriptor", ")", "==", "dict", ":", "\n", "            ", "if", "random_var_descriptor", ".", "get", "(", "'distribution'", ")", "==", "'uniform'", ":", "\n", "                ", "if", "random_var_descriptor", ".", "get", "(", "'low'", ")", "<", "random_var_descriptor", ".", "get", "(", "'high'", ")", ":", "\n", "# The descriptor is correct", "\n", "                    ", "return", "random_var_descriptor", "\n", "\n", "", "", "if", "random_var_descriptor", ".", "get", "(", "'distribution'", ")", "==", "'categorical'", ":", "\n", "                ", "if", "type", "(", "random_var_descriptor", ".", "get", "(", "'values'", ")", ")", "==", "list", ":", "\n", "                    ", "return", "random_var_descriptor", "\n", "\n", "# The descriptor is a dictionary (and likely intended to be a random value descriptor), but it's invalid", "\n", "", "", "logger", ".", "error", "(", "\"\"\"Randomized parameters should be specified by a dictionary which has a 'distribution' key (specifying the type)\n                                Allowed values: 'uniform', 'categorical'\n                                For uniform distributions the dict should have a 'low' and 'high' key. low < high\n                                Random samples will be drawn from Unif[low, high).\n                                Example:\n                                    {'type': 'uniform',\n                                     'low': 0.,\n                                     'high': 1.\n                                    }\n                                For categorical distributions the dict should have a 'values' key specifying valid values\n                                Example:\n                                    {'type': 'categorical',\n                                     'values': [1, 2, 3, 4]\n                                    }\"\"\"", "\n", ")", "\n", "\n", "# This descriptor is not a random value descriptor", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ActionDelayWrapper.__init__": [[117, 132], ["gym.Wrapper.__init__", "isinstance", "numpy.zeros", "env_config.get", "numpy.random.uniform", "env_config.get"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["def", "__init__", "(", "self", ",", "env", ",", "env_config", ")", ":", "\n", "        ", "super", "(", "ActionDelayWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "env_config", "=", "env_config", "\n", "self", ".", "simulator", "=", "self", ".", "unwrapped", "# type: Simulator", "\n", "assert", "isinstance", "(", "self", ".", "simulator", ",", "Simulator", ")", ",", "\"Env must be gym_duckietown.simulator.Simulator\"", "\n", "\n", "if", "env_config", ".", "get", "(", "'action_delay_ratio'", ",", "0.", ")", "==", "\"random\"", ":", "\n", "            ", "self", ".", "random_ratio", "=", "True", "\n", "self", ".", "ratio_distribution_range", "=", "(", "0.2", ",", "0.5", ")", "\n", "self", ".", "action_delay_ratio", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "ratio_distribution_range", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "random_ratio", "=", "False", "\n", "self", ".", "action_delay_ratio", "=", "env_config", ".", "get", "(", "'action_delay_ratio'", ",", "0.", ")", "\n", "", "assert", "self", ".", "action_delay_ratio", ">", "0.0", "and", "self", ".", "action_delay_ratio", "<", "1.0", ",", "\"action_delay_ratio must be in the (0, 1) interval\"", "\n", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "self", ".", "action_space", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ActionDelayWrapper.step": [[133, 146], ["range", "simulator_mod_wrappers.ActionDelayWrapper.env.step", "simulator_mod_wrappers.ActionDelayWrapper.simulator.update_physics"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step"], ["", "def", "step", "(", "self", ",", "action", ")", ":", "\n", "        ", "delta_time", "=", "1.0", "/", "self", ".", "simulator", ".", "frame_rate", "\n", "# Apply the action delay", "\n", "for", "_", "in", "range", "(", "self", ".", "simulator", ".", "frame_skip", ")", ":", "\n", "# Passing delta time to update physics is not enough, _update_pos() uses the member variable delta_time", "\n", "            ", "self", ".", "simulator", ".", "delta_time", "=", "delta_time", "*", "self", ".", "action_delay_ratio", "\n", "self", ".", "simulator", ".", "update_physics", "(", "action", "=", "self", ".", "last_action", ",", "delta_time", "=", "None", ")", "\n", "# Update physics increments step count but that should ony be incremented once for each step", "\n", "# This will happen when self.env.step() is called", "\n", "self", ".", "simulator", ".", "step_count", "-=", "1", "\n", "", "self", ".", "last_action", "=", "action", "\n", "self", ".", "simulator", ".", "delta_time", "=", "delta_time", "*", "(", "1.", "-", "self", ".", "action_delay_ratio", ")", "\n", "return", "self", ".", "env", ".", "step", "(", "action", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ActionDelayWrapper.reset": [[147, 152], ["numpy.zeros", "simulator_mod_wrappers.ActionDelayWrapper.env.reset", "numpy.random.uniform"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "last_action", "=", "np", ".", "zeros", "(", "self", ".", "action_space", ".", "shape", ")", "\n", "if", "self", ".", "random_ratio", ":", "\n", "            ", "self", ".", "action_delay_ratio", "=", "np", ".", "random", ".", "uniform", "(", "*", "self", ".", "ratio_distribution_range", ")", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.InconvenientSpawnFixingWrapper.reset": [[167, 181], ["logger.debug", "simulator_mod_wrappers.InconvenientSpawnFixingWrapper.env.reset", "simulator_mod_wrappers.InconvenientSpawnFixingWrapper.unwrapped.seed", "logger.error"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.seed"], ["def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "spawn_successful", "=", "False", "\n", "spawn_attempts", "=", "1", "\n", "while", "not", "spawn_successful", ":", "\n", "            ", "try", ":", "\n", "                ", "ret", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "spawn_successful", "=", "True", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "self", ".", "unwrapped", ".", "seed_value", "+=", "1", "# Otherwise it selects the same tile in the next attempt", "\n", "self", ".", "unwrapped", ".", "seed", "(", "self", ".", "unwrapped", ".", "seed_value", ")", "\n", "logger", ".", "error", "(", "\"{}; Retrying with new seed: {}\"", ".", "format", "(", "e", ",", "self", ".", "unwrapped", ".", "seed_value", ")", ")", "\n", "spawn_attempts", "+=", "1", "\n", "", "", "logger", ".", "debug", "(", "\"Reset and Spawn successful after {} attempts\"", ".", "format", "(", "spawn_attempts", ")", ")", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.__init__": [[201, 207], ["gym.Wrapper.__init__", "simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get", "simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], ["def", "__init__", "(", "self", ",", "env", ",", "env_config", ")", ":", "\n", "        ", "super", "(", "ObstacleSpawningWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "simulator", "=", "env", ".", "unwrapped", "# type: Simulator", "\n", "self", ".", "env_config", "=", "env_config", "\n", "if", "self", ".", "env_config", ".", "get", "(", "'spawn_obstacles'", ",", "False", ")", ":", "\n", "            ", "self", ".", "safe_spawn_objects", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.reset": [[208, 212], ["simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get", "simulator_mod_wrappers.ObstacleSpawningWrapper.env.reset", "simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], ["", "", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "env_config", ".", "get", "(", "'spawn_obstacles'", ",", "False", ")", ":", "\n", "            ", "self", ".", "safe_spawn_objects", "(", ")", "\n", "", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects": [[213, 221], ["simulator_mod_wrappers.ObstacleSpawningWrapper._spawn_objects", "logger.error"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper._spawn_objects"], ["", "def", "safe_spawn_objects", "(", "self", ")", ":", "\n", "        ", "spawn_successful", "=", "False", "\n", "while", "not", "spawn_successful", ":", "\n", "            ", "try", ":", "\n", "                ", "self", ".", "_spawn_objects", "(", ")", "\n", "spawn_successful", "=", "True", "\n", "", "except", "(", "IndexError", ",", "TypeError", ")", "as", "e", ":", "\n", "                ", "logger", ".", "error", "(", "\"Obstacle spawning failed with Exception: {}! Retrying.\"", ".", "format", "(", "e", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper._spawn_objects": [[222, 266], ["simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get().items", "simulator_mod_wrappers.ObstacleSpawningWrapper._sample_tiles", "simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get().items", "simulator_mod_wrappers.ObstacleSpawningWrapper.simulator._load_objects", "int", "len", "len", "logger.warning", "int", "range", "simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get", "simulator_mod_wrappers.ObstacleSpawningWrapper.env_config.get", "numpy.random.random", "descriptor.get", "obstacles.append", "len", "descriptor.get", "len", "descriptor.get", "len", "numpy.random.random", "len", "numpy.linalg.norm", "numpy.random.random", "numpy.random.random", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper._sample_tiles"], ["", "", "", "def", "_spawn_objects", "(", "self", ")", ":", "\n", "        ", "obstacles", "=", "[", "]", "\n", "drivable_tiles", "=", "self", ".", "simulator", ".", "drivable_tiles", "\n", "# Get total obstacle count", "\n", "obstacle_cnt", "=", "0", "\n", "for", "kind", ",", "descriptor", "in", "self", ".", "env_config", ".", "get", "(", "'obstacles'", ",", "{", "}", ")", ".", "items", "(", ")", ":", "\n", "            ", "obstacle_cnt", "+=", "int", "(", "descriptor", ".", "get", "(", "'density'", ",", "0", ")", "*", "len", "(", "drivable_tiles", ")", ")", "\n", "\n", "# more than 1 object on a single tile is not allowed, because it can easily create unavoidable obstacles.", "\n", "", "if", "len", "(", "drivable_tiles", ")", "<", "obstacle_cnt", ":", "\n", "            ", "obstacle_cnt", "=", "len", "(", "drivable_tiles", ")", "\n", "logger", ".", "warning", "(", "\"Can't spawn more obstacles than the amount of drivable tiles on a map! \"", "\n", "\"Decrease the density of the obstacles!\"", ")", "\n", "\n", "# Get a unique drivable tile for each object", "\n", "", "tiles", "=", "self", ".", "_sample_tiles", "(", "drivable_tiles", ",", "obstacle_cnt", ")", "\n", "\n", "# Generate coordinates and orientations for the obstacles", "\n", "obstacle_idx", "=", "0", "\n", "for", "kind", ",", "descriptor", "in", "self", ".", "env_config", ".", "get", "(", "'obstacles'", ",", "{", "}", ")", ".", "items", "(", ")", ":", "\n", "            ", "kind_cnt", "=", "int", "(", "descriptor", ".", "get", "(", "'density'", ",", "0", ")", "*", "len", "(", "drivable_tiles", ")", ")", "\n", "for", "_", "in", "range", "(", "kind_cnt", ")", ":", "\n", "                ", "tile", "=", "tiles", "[", "obstacle_idx", "]", "\n", "pos_on_tile", "=", "np", ".", "random", ".", "random", "(", "2", ")", "\n", "while", "kind", "==", "'duckiebot'", "and", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "0.5", ",", "0.5", "]", ")", "-", "pos_on_tile", ")", ">", "0.25", ":", "\n", "# If a duckiebot is placed outside the road, it won't be able to follow a lane", "\n", "# This will raise an exception so a duckiebot is never spawned outside a circle on the tile...", "\n", "                    ", "pos_on_tile", "=", "np", ".", "random", ".", "random", "(", "2", ")", "\n", "", "pos", "=", "tile", "[", "'coords'", "]", "+", "pos_on_tile", "\n", "rotate", "=", "np", ".", "random", ".", "random", "(", ")", "*", "360", "-", "180", "\n", "height_scaler", "=", "0.8", "+", "np", ".", "random", ".", "random", "(", ")", "*", "0.4", "\n", "height", "=", "self", ".", "default_object_heights", "[", "kind", "]", "*", "height_scaler", "\n", "static", "=", "descriptor", ".", "get", "(", "'static'", ",", "True", ")", "\n", "obstacles", ".", "append", "(", "{", "'kind'", ":", "kind", ",", "\n", "'pos'", ":", "pos", ",", "\n", "'rotate'", ":", "rotate", ",", "\n", "'height'", ":", "height", ",", "\n", "'static'", ":", "static", "}", ")", "\n", "obstacle_idx", "+=", "1", "\n", "if", "obstacle_idx", ">=", "len", "(", "tiles", ")", ":", "\n", "                    ", "break", "\n", "", "", "if", "obstacle_idx", ">=", "len", "(", "tiles", ")", ":", "\n", "                ", "break", "\n", "", "", "self", ".", "simulator", ".", "_load_objects", "(", "{", "'objects'", ":", "obstacles", "}", ")", "\n", "#self.simulator.collidable_corners = np.zeros_like(self.simulator.collidable_corners) #BUGFIX in the simulator...", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper._sample_tiles": [[268, 275], ["numpy.random.choice", "range", "len"], "methods", ["None"], ["", "def", "_sample_tiles", "(", "self", ",", "drivable_tiles", ",", "size", ")", ":", "\n", "        ", "\"\"\" Returns a list of simulator tiles, which are selected randomly without replacement.\n        Replacement is not allowed, because more than 1 object on a single tile can easily create unavoidable obstacles.\n        \"\"\"", "\n", "tile_idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "len", "(", "drivable_tiles", ")", ")", ",", "size", ",", "replace", "=", "False", ")", "\n", "tiles", "=", "[", "drivable_tiles", "[", "idx", "]", "for", "idx", "in", "tile_idx", "]", "\n", "return", "tiles", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.__init__": [[278, 284], ["simulator_mod_wrappers.ObstacleSpawningWrapper.__init__", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.env_config.get", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.safe_spawn_objects"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], ["    ", "def", "__init__", "(", "self", ",", "env", ",", "env_config", ")", ":", "\n", "        ", "super", "(", "ForwardObstacleSpawnnigWrapper", ",", "self", ")", ".", "__init__", "(", "env", ",", "env_config", ")", "\n", "self", ".", "lateral_pos_perturb_half_width", "=", "0.2", "*", "self", ".", "simulator", ".", "road_tile_size", "\n", "self", ".", "orientation_perturb_half_width", "=", "np", ".", "pi", "/", "4", "\n", "if", "self", ".", "env_config", ".", "get", "(", "'spawn_forward_obstacle'", ",", "False", ")", ":", "\n", "            ", "self", ".", "safe_spawn_objects", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.reset": [[285, 297], ["simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.env_config.get", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.env.reset", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.simulator.closest_curve_point", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.safe_spawn_objects", "logger.error"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ObstacleSpawningWrapper.safe_spawn_objects"], ["", "", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "reset_good", "=", "False", "\n", "while", "not", "reset_good", ":", "\n", "            ", "ret", "=", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "curve_point", ",", "curve_tangent", "=", "self", ".", "simulator", ".", "closest_curve_point", "(", "self", ".", "simulator", ".", "cur_pos", ",", "self", ".", "simulator", ".", "cur_angle", ")", "\n", "if", "curve_point", "is", "not", "None", "and", "curve_tangent", "is", "not", "None", ":", "\n", "                ", "reset_good", "=", "True", "\n", "", "else", ":", "\n", "                ", "logger", ".", "error", "(", "\"Reset before forward object spawning failed curve_point or curve_tangent is None\"", ")", "\n", "", "", "if", "self", ".", "env_config", ".", "get", "(", "'spawn_forward_obstacle'", ",", "False", ")", ":", "\n", "            ", "self", ".", "safe_spawn_objects", "(", ")", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper._spawn_objects": [[298, 351], ["simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.get_point_on_curve_ahead", "numpy.array", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.simulator.get_grid_coords", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.simulator._get_tile", "numpy.modf", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.simulator._load_objects", "numpy.zeros_like", "numpy.zeros_like", "numpy.random.random", "numpy.random.random", "numpy.random.uniform", "numpy.random.random", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.get_point_on_curve_ahead", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle"], ["", "def", "_spawn_objects", "(", "self", ")", ":", "\n", "        ", "drivable_tiles", "=", "self", ".", "simulator", ".", "drivable_tiles", "\n", "tile_size", "=", "self", ".", "simulator", ".", "road_tile_size", "\n", "# obj_pose_valid = False", "\n", "# while not obj_pose_valid:", "\n", "# Get a random point in front of the vehicle", "\n", "forward_dist", "=", "tile_size", "*", "(", "2.", "+", "2", "*", "np", ".", "random", ".", "random", "(", ")", ")", "\n", "obj_pos", ",", "obj_pos_tangent", "=", "self", ".", "get_point_on_curve_ahead", "(", "forward_dist", ",", "self", ".", "simulator", ")", "\n", "# Randomise the lateral posotion of the obstacle", "\n", "right_normal_to_curve", "=", "np", ".", "array", "(", "[", "obj_pos_tangent", "[", "2", "]", ",", "0", ",", "-", "obj_pos_tangent", "[", "0", "]", "]", ")", "\n", "# lateral position can be +- half lane width from the lane center", "\n", "obj_pos", "+=", "right_normal_to_curve", "*", "(", "np", ".", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "lateral_pos_perturb_half_width", "\n", "# Convert coordinates given in meters to coords in tiles", "\n", "obj_pos_tiles", "=", "[", "obj_pos", "[", "0", "]", "/", "tile_size", ",", "obj_pos", "[", "2", "]", "/", "tile_size", "]", "\n", "\n", "# Check coordinates", "\n", "tile_coords", "=", "self", ".", "simulator", ".", "get_grid_coords", "(", "obj_pos", ")", "\n", "tile", "=", "self", ".", "simulator", ".", "_get_tile", "(", "tile_coords", "[", "0", "]", ",", "tile_coords", "[", "1", "]", ")", "\n", "pos_on_tile", ",", "_", "=", "np", ".", "modf", "(", "obj_pos_tiles", ")", "\n", "# if np.linalg.norm(np.array([0.5, 0.5]) - pos_on_tile) < 0.25 and tile in drivable_tiles:", "\n", "#     obj_pose_valid = True", "\n", "# else:", "\n", "#     logger.warning(\"Forward obstacle position invalid!\")", "\n", "# obj_pose_valid = True", "\n", "\n", "# Object points approximately towrads the tangent at it's position", "\n", "obj_orientation", "=", "self", ".", "dir_vec_to_angle", "(", "obj_pos_tangent", ")", "\n", "obj_orientation", "+=", "(", "np", ".", "random", ".", "random", "(", ")", "-", "0.5", ")", "*", "self", ".", "orientation_perturb_half_width", "\n", "# Convert orientation in radians to degrees", "\n", "obj_orientation_deg", "=", "obj_orientation", "/", "np", ".", "pi", "*", "180", "\n", "\n", "kind", "=", "'duckiebot'", "\n", "static", "=", "False", "\n", "height_scaler", "=", "0.8", "+", "np", ".", "random", ".", "random", "(", ")", "*", "0.4", "\n", "height", "=", "self", ".", "default_object_heights", "[", "kind", "]", "*", "height_scaler", "\n", "obstacles", "=", "[", "{", "'kind'", ":", "kind", ",", "\n", "'pos'", ":", "obj_pos_tiles", ",", "# [1.7, 4.65],", "\n", "'rotate'", ":", "obj_orientation_deg", ",", "# 95, ", "\n", "'height'", ":", "height", ",", "\n", "'static'", ":", "static", "}", "]", "\n", "self", ".", "simulator", ".", "_load_objects", "(", "{", "'objects'", ":", "obstacles", "}", ")", "\n", "\n", "# Gym-Duckietown's default safety radius is small, so the learned follow distance is very small", "\n", "# This doesn't work for static obstacles, simulator.collidable_safety_radii must be changed for that...", "\n", "for", "obj", "in", "self", ".", "simulator", ".", "objects", ":", "\n", "            ", "obj", ".", "safety_radius", "*=", "2", "\n", "if", "obj", ".", "domain_rand", ":", "\n", "                ", "obj", ".", "trim", "=", "np", ".", "random", ".", "uniform", "(", "-", "0.1", ",", "0.1", ")", "# This fixes another bug in the simulator.....", "\n", "\n", "# BUGFIX in the simulator... Dynamic obstacles leave a phantom static version at their initial position", "\n", "", "", "if", "not", "static", ":", "\n", "            ", "self", ".", "simulator", ".", "collidable_corners", "=", "np", ".", "zeros_like", "(", "self", ".", "simulator", ".", "collidable_corners", ")", "\n", "self", ".", "simulator", ".", "collidable_centers", "=", "np", ".", "zeros_like", "(", "self", ".", "simulator", ".", "collidable_centers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.get_point_on_curve_ahead": [[352, 365], ["simulator.closest_curve_point", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle", "range", "simulator.closest_curve_point", "simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle"], ["", "", "def", "get_point_on_curve_ahead", "(", "self", ",", "forward_dist", ",", "simulator", ")", ":", "\n", "\n", "# Find the curve point closest to the agent, and the tangent at that point", "\n", "        ", "curve_point", ",", "curve_tangent", "=", "simulator", ".", "closest_curve_point", "(", "simulator", ".", "cur_pos", ",", "simulator", ".", "cur_angle", ")", "\n", "curve_angle", "=", "self", ".", "dir_vec_to_angle", "(", "curve_tangent", ")", "\n", "iterations", "=", "10", "\n", "for", "_", "in", "range", "(", "iterations", ")", ":", "\n", "# Project a point ahead along the curve tangent, then find the closest point to to that", "\n", "            ", "follow_point", "=", "curve_point", "+", "curve_tangent", "*", "forward_dist", "/", "iterations", "\n", "curve_point", ",", "curve_tangent", "=", "simulator", ".", "closest_curve_point", "(", "follow_point", ",", "curve_angle", ")", "\n", "curve_angle", "=", "self", ".", "dir_vec_to_angle", "(", "curve_tangent", ")", "\n", "\n", "", "return", "curve_point", ",", "curve_tangent", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.simulator_mod_wrappers.ForwardObstacleSpawnnigWrapper.dir_vec_to_angle": [[366, 372], ["numpy.arctan2"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "dir_vec_to_angle", "(", "dir_vec", ")", ":", "\n", "        ", "angle", "=", "np", ".", "arctan2", "(", "-", "dir_vec", "[", "2", "]", ",", "dir_vec", "[", "0", "]", ")", "# Must equal to simulator.cur_angle", "\n", "if", "angle", "<", "0", ":", "\n", "            ", "angle", "+=", "2", "*", "np", ".", "pi", "\n", "", "return", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__": [[63, 76], ["gym.Wrapper.__init__"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.__init__"], ["    ", "def", "__init__", "(", "self", ",", "env", ":", "Simulator", ",", "blur_time", "=", "0.05", ")", ":", "\n", "        ", "super", "(", "AIDOWrapper", ",", "self", ")", ".", "__init__", "(", "env", ")", "\n", "self", ".", "blur_time", "=", "blur_time", "\n", "self", ".", "camera_dt", ":", "float", "=", "1", "/", "15.0", "\n", "self", ".", "render_dt", ":", "float", "=", "1", "/", "(", "15.0", "*", "14", ")", "\n", "self", ".", "minimum_physics_dt", ":", "float", "=", "1", "/", "200.0", "\n", "self", ".", "last_observations", "=", "None", "\n", "\n", "self", ".", "last_observations_time", "=", "-", "1000", "\n", "self", ".", "last_render_time", "=", "-", "1000", "\n", "self", ".", "current_time", "=", "0.", "\n", "self", ".", "render_observations", "=", "[", "]", "\n", "self", ".", "render_timestamps", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.step": [[77, 93], ["numpy.clip", "aido_wrapper.AIDOWrapper.update_physics_and_observations", "aido_wrapper.AIDOWrapper.unwrapped.get_agent_info", "aido_wrapper.AIDOWrapper.unwrapped._compute_done_reward", "gc.collect"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.update_physics_and_observations"], ["", "def", "step", "(", "self", ",", "action", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "action", "=", "np", ".", "clip", "(", "action", ",", "-", "1", ",", "1", ")", "\n", "delta_time", "=", "self", ".", "unwrapped", ".", "delta_time", "*", "self", ".", "unwrapped", ".", "frame_skip", "\n", "until", "=", "self", ".", "current_time", "+", "delta_time", "\n", "# f'stepping forward {int(delta_time * 1000)} s of simulation time'", "\n", "self", ".", "update_physics_and_observations", "(", "action", "=", "action", ",", "until", "=", "until", ")", "\n", "self", ".", "unwrapped", ".", "step_count", "+=", "self", ".", "unwrapped", ".", "frame_skip", "\n", "self", ".", "current_time", "=", "until", "\n", "\n", "info", "=", "self", ".", "unwrapped", ".", "get_agent_info", "(", ")", "\n", "d", "=", "self", ".", "unwrapped", ".", "_compute_done_reward", "(", ")", "\n", "info", "[", "\"Simulator\"", "]", "[", "\"msg\"", "]", "=", "d", ".", "done_why", "\n", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "return", "self", ".", "obs", ",", "d", ".", "reward", ",", "d", ".", "done", ",", "info", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset": [[94, 101], ["aido_wrapper.AIDOWrapper.env.reset"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.reset"], ["", "def", "reset", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "last_observations_time", "=", "-", "1000", "\n", "self", ".", "last_render_time", "=", "-", "1000", "\n", "self", ".", "current_time", "=", "0.", "\n", "self", ".", "render_observations", "=", "[", "]", "\n", "self", ".", "render_timestamps", "=", "[", "]", "\n", "return", "self", ".", "env", ".", "reset", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.update_physics_and_observations": [[102, 131], ["list", "enumerate", "aido_wrapper.get_snapshots", "aido_wrapper.AIDOWrapper.unwrapped.update_physics", "aido_wrapper.AIDOWrapper._render", "aido_wrapper.AIDOWrapper.update_observations"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.get_snapshots", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper._render", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.update_observations"], ["", "def", "update_physics_and_observations", "(", "self", ",", "action", ":", "np", ".", "ndarray", ",", "until", ":", "float", ")", ":", "\n", "# we are at self.current_time and need to update until \"until\"", "\n", "        ", "physics_dt", "=", "self", ".", "minimum_physics_dt", "\n", "\n", "last_observations_time", "=", "self", ".", "last_observations_time", "\n", "snapshots", "=", "list", "(", "get_snapshots", "(", "last_observations_time", ",", "self", ".", "current_time", ",", "until", ",", "physics_dt", ")", ")", "\n", "\n", "steps", "=", "snapshots", "+", "[", "until", "]", "\n", "# logger.info(f'current time: {self.current_time}')", "\n", "# logger.info(f'       until: {until}')", "\n", "# logger.info(f'    last_obs: {self.last_observations_time}')", "\n", "# logger.info(f'   snapshots: {snapshots}')", "\n", "\n", "for", "i", ",", "t1", "in", "enumerate", "(", "steps", ")", ":", "\n", "            ", "delta_time", "=", "t1", "-", "self", ".", "current_time", "\n", "# update_physics uses _update_pos that doesn't respect delta_time passed to update_physics", "\n", "# instead it uses self.unwrapped.delta_time", "\n", "# -> we call integrate on the actual action later", "\n", "sim_internal_delta_time", "=", "self", ".", "unwrapped", ".", "delta_time", "\n", "self", ".", "unwrapped", ".", "delta_time", "=", "delta_time", "\n", "self", ".", "unwrapped", ".", "update_physics", "(", "action", ",", "delta_time", "=", "delta_time", ")", "\n", "self", ".", "unwrapped", ".", "step_count", "-=", "1", "\n", "self", ".", "unwrapped", ".", "delta_time", "=", "sim_internal_delta_time", "\n", "# self.unwrapped.state = self.unwrapped.state.integrate(delta_time, DynamicsInfo(motor_left=action[0],", "\n", "#                                                                                motor_right=action[1]))", "\n", "self", ".", "current_time", "=", "t1", "\n", "\n", "self", ".", "_render", "(", ")", "\n", "self", ".", "update_observations", "(", "self", ".", "current_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper._render": [[132, 152], ["aido_wrapper.AIDOWrapper.unwrapped.state.TSE2_from_state", "geometry.linear_angular_from_se2", "numpy.rad2deg", "aido_wrapper.get_min_render_dt", "aido_wrapper.AIDOWrapper.unwrapped.render_obs", "aido_wrapper.AIDOWrapper.render_observations.append", "aido_wrapper.AIDOWrapper.render_timestamps.append"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.get_min_render_dt"], ["", "", "def", "_render", "(", "self", ")", ":", "\n", "# set the pose of this robot as the \"protagonist\"", "\n", "        ", "if", "self", ".", "render_timestamps", ":", "\n", "            ", "q", ",", "v", "=", "self", ".", "unwrapped", ".", "state", ".", "TSE2_from_state", "(", ")", "\n", "dt", "=", "self", ".", "current_time", "-", "self", ".", "render_timestamps", "[", "-", "1", "]", "\n", "linear", ",", "angular", "=", "geometry", ".", "linear_angular_from_se2", "(", "v", ")", "\n", "angular_deg", "=", "np", ".", "rad2deg", "(", "angular", ")", "\n", "\n", "speed", "=", "linear", "[", "0", "]", "\n", "\n", "dt_max", "=", "get_min_render_dt", "(", "speed", ",", "angular_deg", ",", "self", ".", "camera_dt", ")", "\n", "\n", "do_it", "=", "dt", ">=", "dt_max", "\n", "", "else", ":", "\n", "            ", "do_it", "=", "True", "\n", "\n", "", "if", "do_it", ":", "\n", "            ", "obs", "=", "self", ".", "unwrapped", ".", "render_obs", "(", ")", "\n", "self", ".", "render_observations", ".", "append", "(", "obs", ")", "\n", "self", ".", "render_timestamps", ".", "append", "(", "self", ".", "current_time", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.AIDOWrapper.update_observations": [[153, 191], ["len", "range", "logger.debug", "obs.astype.astype.astype", "Exception", "len", "to_average[].astype", "math.fabs", "to_average.append", "math.fabs", "len", "len"], "methods", ["None"], ["", "", "def", "update_observations", "(", "self", ",", "current_time", ":", "float", ")", ":", "\n", "# context.info(f'update_observations() at {current_time}')", "\n", "        ", "assert", "self", ".", "render_observations", "\n", "\n", "dt", "=", "current_time", "-", "self", ".", "last_observations_time", "\n", "if", "dt", "<", "self", ".", "camera_dt", ":", "\n", "            ", "return", "\n", "\n", "", "to_average", "=", "[", "]", "\n", "n", "=", "len", "(", "self", ".", "render_observations", ")", "\n", "# context.info(str(self.render_timestamps))", "\n", "# context.info(f'now {self.current_time}')", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "ti", "=", "self", ".", "render_timestamps", "[", "i", "]", "\n", "\n", "if", "math", ".", "fabs", "(", "current_time", "-", "ti", ")", "<=", "self", ".", "blur_time", ":", "\n", "                ", "to_average", ".", "append", "(", "self", ".", "render_observations", "[", "i", "]", ")", "\n", "\n", "# need to remove the old stuff, otherwise memory grows unbounded", "\n", "", "if", "math", ".", "fabs", "(", "current_time", "-", "ti", ")", ">", "5", ":", "\n", "                ", "self", ".", "render_observations", "[", "i", "]", "=", "None", "\n", "", "", "logger", ".", "debug", "(", "f\"Not None render_observations: {len([x for x in self.render_observations if x is not None])}\"", ")", "\n", "if", "not", "to_average", ":", "\n", "            ", "msg", "=", "\"Cannot find observations to average\"", "\n", "raise", "Exception", "(", "msg", ")", "\n", "\n", "", "if", "len", "(", "to_average", ")", "==", "1", ":", "\n", "            ", "obs", "=", "to_average", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "obs0", "=", "to_average", "[", "0", "]", ".", "astype", "(", "\"float32\"", ")", "\n", "\n", "for", "obs", "in", "to_average", "[", "1", ":", "]", ":", "\n", "                ", "obs0", "+=", "obs", "\n", "", "obs", "=", "obs0", "/", "len", "(", "to_average", ")", "\n", "\n", "", "obs", "=", "obs", ".", "astype", "(", "'uint8'", ")", "\n", "self", ".", "last_observations_time", "=", "current_time", "\n", "self", ".", "obs", "=", "obs", "", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.get_snapshots": [[32, 38], ["None"], "function", ["None"], ["def", "get_snapshots", "(", "last_obs_time", ":", "float", ",", "current_time", ":", "float", ",", "until", ":", "float", ",", "dt", ":", "float", ")", "->", "Iterator", "[", "float", "]", ":", "\n", "    ", "t", "=", "last_obs_time", "+", "dt", "\n", "while", "t", "<", "until", ":", "\n", "        ", "if", "t", ">", "current_time", ":", "\n", "            ", "yield", "t", "\n", "", "t", "+=", "dt", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.aido_wrapper.get_min_render_dt": [[40, 60], ["numpy.arctan", "numpy.arctan", "min", "numpy.abs"], "function", ["None"], ["", "", "def", "get_min_render_dt", "(", "speed", ":", "float", ",", "angular_deg", ":", "float", ",", "camera_dt", ":", "float", ")", "->", "float", ":", "\n", "    ", "fov_deg", "=", "60.0", "\n", "pixels_fov", "=", "640", "\n", "pixels_deg", "=", "pixels_fov", "/", "fov_deg", "\n", "max_pixel_mov", "=", "3", "\n", "angular_pixel_mov_sec", "=", "np", ".", "abs", "(", "angular_deg", ")", "*", "pixels_deg", "\n", "\n", "D", "=", "0.3", "\n", "H", "=", "0.1", "\n", "beta0", "=", "np", ".", "arctan", "(", "D", "/", "H", ")", "\n", "beta1", "=", "np", ".", "arctan", "(", "(", "D", "+", "speed", "*", "1.0", "/", "H", ")", ")", "\n", "hori_motion_apparent_motion_deg_s", "=", "beta1", "-", "beta0", "\n", "linear_pixel_mov_sec", "=", "hori_motion_apparent_motion_deg_s", "*", "pixels_deg", "*", "2", "\n", "\n", "current_pixel_mov_sec", "=", "linear_pixel_mov_sec", "+", "angular_pixel_mov_sec", "\n", "\n", "# fps = current_pixel_mov_sec / max_pixel_mov", "\n", "# current_pixel_mov_sec   = * dt <= max_pixel_mov", "\n", "dt_max", "=", "min", "(", "max_pixel_mov", "/", "current_pixel_mov_sec", ",", "camera_dt", "/", "2", ")", "\n", "return", "dt_max", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_utils.Test.test_recursive_dict_update": [[5, 28], ["test_utils.Test.assertEqual", "test_utils.Test.assertEqual", "test_utils.Test.assertEqual", "duckietown_utils.utils.recursive_dict_update", "duckietown_utils.utils.recursive_dict_update", "duckietown_utils.utils.recursive_dict_update"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.duckietown_utils.utils.recursive_dict_update"], ["    ", "def", "test_recursive_dict_update", "(", "self", ")", ":", "\n", "        ", "target", "=", "{", "'k0'", ":", "'v0'", ",", "\n", "'k1'", ":", "'v1'", ",", "\n", "'k2'", ":", "{", "'k20'", ":", "'v20'", ",", "\n", "'k21'", ":", "'v21'", ",", "\n", "'k22'", ":", "'v22'", "\n", "}", "\n", "}", "\n", "update_dict", "=", "{", "'k1'", ":", "'_v1'", ",", "\n", "'k2'", ":", "{", "'k21'", ":", "'_v21'", ",", "\n", "'k22'", ":", "'_v22'", "\n", "}", "\n", "}", "\n", "self", ".", "assertEqual", "(", "update_dict", ",", "recursive_dict_update", "(", "{", "}", ",", "update_dict", ")", ")", "\n", "self", ".", "assertEqual", "(", "target", ",", "recursive_dict_update", "(", "target", ",", "{", "}", ")", ")", "\n", "self", ".", "assertEqual", "(", "{", "'k0'", ":", "'v0'", ",", "\n", "'k1'", ":", "'_v1'", ",", "\n", "'k2'", ":", "{", "'k20'", ":", "'v20'", ",", "\n", "'k21'", ":", "'_v21'", ",", "\n", "'k22'", ":", "'_v22'", "\n", "}", "\n", "}", ",", "\n", "recursive_dict_update", "(", "target", ",", "update_dict", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_observation_wrappers.TestMotionBlurWrapper.test__angle_diff": [[10, 28], ["test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "test_observation_wrappers.TestMotionBlurWrapper.assertEqual", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "duckietown_utils.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.MotionBlurWrapper._angle_diff"], ["    ", "def", "test__angle_diff", "(", "self", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0", ",", "0", ")", ",", "0.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "1.", ",", "1.", ")", ",", "0.", ")", "\n", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "np", ".", "pi", "/", "2.", ")", ",", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "np", ".", "pi", ")", ",", "np", ".", "pi", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "3", "*", "np", ".", "pi", "/", "2.", ")", ",", "-", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "2", "*", "np", ".", "pi", ")", ",", "0.", ")", "\n", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "-", "np", ".", "pi", "/", "2.", ")", ",", "-", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "-", "np", ".", "pi", ")", ",", "np", ".", "pi", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "-", "3", "*", "np", ".", "pi", "/", "2.", ")", ",", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "-", "2", "*", "np", ".", "pi", ")", ",", "0.", ")", "\n", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "2", "*", "np", ".", "pi", "+", "np", ".", "pi", "/", "2.", ")", ",", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "2", "*", "np", ".", "pi", "+", "np", ".", "pi", ")", ",", "np", ".", "pi", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "2", "*", "np", ".", "pi", "+", "3", "*", "np", ".", "pi", "/", "2.", ")", ",", "-", "np", ".", "pi", "/", "2.", ")", "\n", "self", ".", "assertEqual", "(", "MotionBlurWrapper", ".", "_angle_diff", "(", "0.", ",", "2", "*", "np", ".", "pi", "+", "2", "*", "np", ".", "pi", ")", ",", "0.", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_observation_wrappers.TestObservationBufferWrapper.setUp": [[31, 42], ["gym.Env", "gym.spaces.Box", "duckietown_utils.wrappers.observation_wrappers.ObservationBufferWrapper", "test_observation_wrappers.TestObservationBufferWrapper.visualize_buffer"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_observation_wrappers.TestObservationBufferWrapper.visualize_buffer"], ["    ", "def", "setUp", "(", "self", ")", "->", "None", ":", "\n", "        ", "self", ".", "obs_idx", "=", "0", "\n", "self", ".", "dummy_env", "=", "gym", ".", "Env", "(", ")", "\n", "self", ".", "dummy_env", ".", "observation_space", "=", "gym", ".", "spaces", ".", "Box", "(", "\n", "low", "=", "0", ",", "\n", "high", "=", "255", ",", "\n", "shape", "=", "(", "84", ",", "84", ",", "3", ")", ",", "\n", "dtype", "=", "np", ".", "uint8", "\n", ")", "\n", "self", ".", "obs_buffer", "=", "ObservationBufferWrapper", "(", "self", ".", "dummy_env", ",", "obs_buffer_depth", "=", "3", ")", "\n", "self", ".", "visualize_buffer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_observation_wrappers.TestObservationBufferWrapper.test_observation": [[43, 48], ["numpy.zeros", "test_observation_wrappers.TestObservationBufferWrapper.obs_buffer.observation", "numpy.testing.assert_array_equal", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation"], ["", "def", "test_observation", "(", "self", ")", ":", "\n", "        ", "new_obs", "=", "np", ".", "zeros", "(", "(", "84", ",", "84", ",", "3", ")", ")", "\n", "self", ".", "obs_idx", "=", "1", "\n", "buffered_obs", "=", "self", ".", "obs_buffer", ".", "observation", "(", "new_obs", ")", "\n", "np", ".", "testing", ".", "assert_array_equal", "(", "buffered_obs", ",", "np", ".", "zeros", "(", "(", "84", ",", "84", ",", "9", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.tests.test_observation_wrappers.TestObservationBufferWrapper.visualize_buffer": [[49, 59], ["range", "range", "test_observation_wrappers.TestObservationBufferWrapper.obs_buffer.observation", "print", "test_observation_wrappers.TestObservationBufferWrapper.obs_buffer.observation", "print", "numpy.ones", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation", "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.wrappers.observation_wrappers.RandomFrameRepeatingWrapper.observation"], ["", "def", "visualize_buffer", "(", "self", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "new_obs", "=", "np", ".", "ones", "(", "(", "84", ",", "84", ",", "3", ")", ")", "*", "i", "\n", "buffered_obs", "=", "self", ".", "obs_buffer", ".", "observation", "(", "new_obs", ")", "\n", "print", "(", "buffered_obs", "[", "0", ",", "0", ",", ":", "]", ")", "\n", "", "self", ".", "obs_buffer", ".", "obs_buffer", "=", "None", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "            ", "new_obs", "=", "np", ".", "ones", "(", "(", "84", ",", "84", ",", "3", ")", ")", "*", "i", "\n", "buffered_obs", "=", "self", ".", "obs_buffer", ".", "observation", "(", "new_obs", ")", "\n", "print", "(", "buffered_obs", "[", "0", ",", "0", ",", ":", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.kaland313_Duckietown-RL.maps.copy_custom_maps_to_duckietown_libs.copy_custom_maps": [[7, 12], ["src.exists", "dst.exists", "print", "os.system"], "function", ["None"], ["def", "copy_custom_maps", "(", "src", ",", "dst", ")", ":", "\n", "    ", "assert", "src", ".", "exists", "(", ")", ",", "\"Source dir for custom maps maps folder not fund at {}\"", ".", "format", "(", "src", ")", "\n", "assert", "dst", ".", "exists", "(", ")", ",", "\"Destination dir for custom maps maps folder not fund at {}\"", ".", "format", "(", "dst", ")", "\n", "print", "(", "\"\\nCopying custom maps to {}\"", ".", "format", "(", "dst", ")", ")", "\n", "os", ".", "system", "(", "'cp -arv {}/*.yaml {}/'", ".", "format", "(", "src", ",", "dst", ")", ")", "\n", "\n"]]}