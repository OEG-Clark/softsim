{"home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_final.parse_args": [[28, 123], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Train a model for image classification.'", ")", "\n", "parser", ".", "add_argument", "(", "'--data-dir'", ",", "type", "=", "str", ",", "default", "=", "'~/.mxnet/datasets/imagenet'", ",", "\n", "help", "=", "'training and validation pictures to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-train'", ",", "type", "=", "str", ",", "default", "=", "'~/.mxnet/datasets/imagenet/rec/train.rec'", ",", "\n", "help", "=", "'the training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-train-idx'", ",", "type", "=", "str", ",", "default", "=", "'~/.mxnet/datasets/imagenet/rec/train.idx'", ",", "\n", "help", "=", "'the index of training data'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-val'", ",", "type", "=", "str", ",", "default", "=", "'~/.mxnet/datasets/imagenet/rec/val.rec'", ",", "\n", "help", "=", "'the validation data'", ")", "\n", "parser", ".", "add_argument", "(", "'--rec-val-idx'", ",", "type", "=", "str", ",", "default", "=", "'~/.mxnet/datasets/imagenet/rec/val.idx'", ",", "\n", "help", "=", "'the index of validation data'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-rec'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use image record iter for data input. default is false.'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-size'", ",", "type", "=", "int", ",", "default", "=", "32", ",", "\n", "help", "=", "'training batch size per device (CPU/GPU).'", ")", "\n", "parser", ".", "add_argument", "(", "'--dtype'", ",", "type", "=", "str", ",", "default", "=", "'float32'", ",", "\n", "help", "=", "'data type for training. default is float32'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-gpus'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of gpus to use.'", ")", "\n", "parser", ".", "add_argument", "(", "'-j'", ",", "'--num-data-workers'", ",", "dest", "=", "'num_workers'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of preprocessing workers'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-epochs'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "\n", "help", "=", "'number of training epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'learning rate. default is 0.1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "\n", "help", "=", "'momentum value for optimizer, default is 0.9.'", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "\n", "help", "=", "'weight decay rate. default is 0.0001.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-mode'", ",", "type", "=", "str", ",", "default", "=", "'step'", ",", "\n", "help", "=", "'learning rate scheduler mode. options are step, poly and cosine.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay'", ",", "type", "=", "float", ",", "default", "=", "0.1", ",", "\n", "help", "=", "'decay rate of learning rate. default is 0.1.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-period'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'interval for periodic learning rate decays. default is 0 to disable.'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-decay-epoch'", ",", "type", "=", "str", ",", "default", "=", "'40,60'", ",", "\n", "help", "=", "'epochs at which learning rate decays. default is 40,60.'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-lr'", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "'starting warmup learning rate. default is 0.0.'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-epochs'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'number of warmup epochs.'", ")", "\n", "parser", ".", "add_argument", "(", "'--last-gamma'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to init gamma of the last BN layer in each bottleneck to 0.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mode'", ",", "type", "=", "str", ",", "\n", "help", "=", "'mode in which to train the model. options are symbolic, imperative, hybrid'", ")", "\n", "parser", ".", "add_argument", "(", "'--configuration'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "(", "\"The custom mobilenet configuration to train. \"", "\n", "\"Can be MOBILENET or comma-separated channel numbers.\"", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--model'", ",", "type", "=", "str", ",", "default", "=", "\"mobilenet\"", ",", "\n", "help", "=", "'type of model to use. set to mobilenet in this modified version.'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-size'", ",", "type", "=", "int", ",", "default", "=", "224", ",", "\n", "help", "=", "'size of the input image size. default is 224'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop-ratio'", ",", "type", "=", "float", ",", "default", "=", "0.875", ",", "\n", "help", "=", "'Crop ratio during validation. default is 0.875'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-pretrained'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable using pretrained model from gluon.'", ")", "\n", "parser", ".", "add_argument", "(", "'--use_se'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use SE layers or not in resnext. default is false.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether train the model with mix-up. default is false.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup-alpha'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "\n", "help", "=", "'beta distribution parameter for mixup sampling, default is 0.2.'", ")", "\n", "parser", ".", "add_argument", "(", "'--mixup-off-epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'how many last epochs to train without mixup, default is 0.'", ")", "\n", "parser", ".", "add_argument", "(", "'--label-smoothing'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use label smoothing or not in training. default is false.'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-wd'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to remove weight decay on bias, and beta/gamma for batchnorm layers.'", ")", "\n", "parser", ".", "add_argument", "(", "'--teacher'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'teacher model for distillation training'", ")", "\n", "parser", ".", "add_argument", "(", "'--temperature'", ",", "type", "=", "float", ",", "default", "=", "20", ",", "\n", "help", "=", "'temperature parameter for distillation teacher model'", ")", "\n", "parser", ".", "add_argument", "(", "'--hard-weight'", ",", "type", "=", "float", ",", "default", "=", "0.5", ",", "\n", "help", "=", "'weight for the loss of one-hot label for distillation training'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch-norm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'enable batch normalization or not in vgg. default is false.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-frequency'", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "'frequency of model saving.'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-dir'", ",", "type", "=", "str", ",", "default", "=", "'params'", ",", "\n", "help", "=", "'directory of saved models'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-epoch'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'epoch to resume training from.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-params'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path of parameters to load from.'", ")", "\n", "parser", ".", "add_argument", "(", "'--resume-states'", ",", "type", "=", "str", ",", "default", "=", "''", ",", "\n", "help", "=", "'path of trainer state to load from.'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "50", ",", "\n", "help", "=", "'Number of batches to wait before logging.'", ")", "\n", "parser", ".", "add_argument", "(", "'--logging-file'", ",", "type", "=", "str", ",", "default", "=", "'train_imagenet.log'", ",", "\n", "help", "=", "'name of training log file'", ")", "\n", "parser", ".", "add_argument", "(", "'--use-gn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to use group norm.'", ")", "\n", "opt", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "opt", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_final.main": [[125, 472], ["train_final.parse_args", "logging.FileHandler", "logging.StreamHandler", "logging.getLogger", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "max", "gluoncv.utils.LRSequential", "model_name.startswith", "gluoncv.model_zoo.get_model.cast", "mxnet.metric.Accuracy", "mxnet.metric.TopKAccuracy", "train_final.main.train"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.parse_args", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.train"], ["", "def", "main", "(", ")", ":", "\n", "    ", "opt", "=", "parse_args", "(", ")", "\n", "\n", "filehandler", "=", "logging", ".", "FileHandler", "(", "opt", ".", "logging_file", ")", "\n", "streamhandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "''", ")", "\n", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "logger", ".", "addHandler", "(", "filehandler", ")", "\n", "logger", ".", "addHandler", "(", "streamhandler", ")", "\n", "\n", "logger", ".", "info", "(", "opt", ")", "\n", "\n", "batch_size", "=", "opt", ".", "batch_size", "\n", "classes", "=", "1000", "\n", "num_training_samples", "=", "1281167", "\n", "\n", "num_gpus", "=", "opt", ".", "num_gpus", "\n", "batch_size", "*=", "max", "(", "1", ",", "num_gpus", ")", "\n", "context", "=", "[", "mx", ".", "gpu", "(", "i", ")", "for", "i", "in", "range", "(", "num_gpus", ")", "]", "if", "num_gpus", ">", "0", "else", "[", "mx", ".", "cpu", "(", ")", "]", "\n", "num_workers", "=", "opt", ".", "num_workers", "\n", "\n", "lr_decay", "=", "opt", ".", "lr_decay", "\n", "lr_decay_period", "=", "opt", ".", "lr_decay_period", "\n", "if", "opt", ".", "lr_decay_period", ">", "0", ":", "\n", "        ", "lr_decay_epoch", "=", "list", "(", "range", "(", "lr_decay_period", ",", "opt", ".", "num_epochs", ",", "lr_decay_period", ")", ")", "\n", "", "else", ":", "\n", "        ", "lr_decay_epoch", "=", "[", "int", "(", "i", ")", "for", "i", "in", "opt", ".", "lr_decay_epoch", ".", "split", "(", "','", ")", "]", "\n", "", "lr_decay_epoch", "=", "[", "e", "-", "opt", ".", "warmup_epochs", "for", "e", "in", "lr_decay_epoch", "]", "\n", "num_batches", "=", "num_training_samples", "//", "batch_size", "\n", "\n", "lr_scheduler", "=", "LRSequential", "(", "[", "\n", "LRScheduler", "(", "'linear'", ",", "base_lr", "=", "0", ",", "target_lr", "=", "opt", ".", "lr", ",", "\n", "nepochs", "=", "opt", ".", "warmup_epochs", ",", "iters_per_epoch", "=", "num_batches", ")", ",", "\n", "LRScheduler", "(", "opt", ".", "lr_mode", ",", "base_lr", "=", "opt", ".", "lr", ",", "target_lr", "=", "0", ",", "\n", "nepochs", "=", "opt", ".", "num_epochs", "-", "opt", ".", "warmup_epochs", ",", "\n", "iters_per_epoch", "=", "num_batches", ",", "\n", "step_epoch", "=", "lr_decay_epoch", ",", "\n", "step_factor", "=", "lr_decay", ",", "power", "=", "2", ")", "\n", "]", ")", "\n", "\n", "model_name", "=", "opt", ".", "model", "\n", "\n", "kwargs", "=", "{", "'ctx'", ":", "context", ",", "'pretrained'", ":", "opt", ".", "use_pretrained", ",", "'classes'", ":", "classes", "}", "\n", "if", "opt", ".", "use_gn", ":", "\n", "        ", "from", "gluoncv", ".", "nn", "import", "GroupNorm", "\n", "kwargs", "[", "'norm_layer'", "]", "=", "GroupNorm", "\n", "", "if", "model_name", ".", "startswith", "(", "'vgg'", ")", ":", "\n", "        ", "kwargs", "[", "'batch_norm'", "]", "=", "opt", ".", "batch_norm", "\n", "", "elif", "model_name", ".", "startswith", "(", "'resnext'", ")", ":", "\n", "        ", "kwargs", "[", "'use_se'", "]", "=", "opt", ".", "use_se", "\n", "\n", "", "if", "opt", ".", "last_gamma", ":", "\n", "        ", "kwargs", "[", "'last_gamma'", "]", "=", "True", "\n", "", "if", "opt", ".", "configuration", "is", "not", "None", ":", "\n", "        ", "kwargs", "[", "'configuration'", "]", "=", "opt", ".", "configuration", "\n", "\n", "", "optimizer", "=", "'nag'", "\n", "optimizer_params", "=", "{", "'wd'", ":", "opt", ".", "wd", ",", "'momentum'", ":", "opt", ".", "momentum", ",", "'lr_scheduler'", ":", "lr_scheduler", "}", "\n", "if", "opt", ".", "dtype", "!=", "'float32'", ":", "\n", "        ", "optimizer_params", "[", "'multi_precision'", "]", "=", "True", "\n", "\n", "", "if", "model_name", "in", "_models", ":", "\n", "        ", "net", "=", "_models", "[", "model_name", "]", "(", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "net", "=", "get_model", "(", "model_name", ",", "**", "kwargs", ")", "\n", "", "net", ".", "cast", "(", "opt", ".", "dtype", ")", "\n", "if", "opt", ".", "resume_params", "is", "not", "''", ":", "\n", "        ", "net", ".", "load_parameters", "(", "opt", ".", "resume_params", ",", "ctx", "=", "context", ")", "\n", "\n", "# teacher model for distillation training", "\n", "", "if", "opt", ".", "teacher", "is", "not", "None", "and", "opt", ".", "hard_weight", "<", "1.0", ":", "\n", "        ", "teacher_name", "=", "opt", ".", "teacher", "\n", "teacher", "=", "get_model", "(", "teacher_name", ",", "pretrained", "=", "True", ",", "classes", "=", "classes", ",", "ctx", "=", "context", ")", "\n", "teacher", ".", "cast", "(", "opt", ".", "dtype", ")", "\n", "distillation", "=", "True", "\n", "", "else", ":", "\n", "        ", "distillation", "=", "False", "\n", "\n", "# Two functions for reading data from record file or raw images", "\n", "", "def", "get_data_rec", "(", "rec_train", ",", "rec_train_idx", ",", "rec_val", ",", "rec_val_idx", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "rec_train", "=", "os", ".", "path", ".", "expanduser", "(", "rec_train", ")", "\n", "rec_train_idx", "=", "os", ".", "path", ".", "expanduser", "(", "rec_train_idx", ")", "\n", "rec_val", "=", "os", ".", "path", ".", "expanduser", "(", "rec_val", ")", "\n", "rec_val_idx", "=", "os", ".", "path", ".", "expanduser", "(", "rec_val_idx", ")", "\n", "jitter_param", "=", "0.4", "\n", "lighting_param", "=", "0.1", "\n", "input_size", "=", "opt", ".", "input_size", "\n", "crop_ratio", "=", "opt", ".", "crop_ratio", "if", "opt", ".", "crop_ratio", ">", "0", "else", "0.875", "\n", "resize", "=", "int", "(", "math", ".", "ceil", "(", "input_size", "/", "crop_ratio", ")", ")", "\n", "mean_rgb", "=", "[", "123.68", ",", "116.779", ",", "103.939", "]", "\n", "std_rgb", "=", "[", "58.393", ",", "57.12", ",", "57.375", "]", "\n", "\n", "def", "batch_fn", "(", "batch", ",", "ctx", ")", ":", "\n", "            ", "data", "=", "gluon", ".", "utils", ".", "split_and_load", "(", "batch", ".", "data", "[", "0", "]", ",", "ctx_list", "=", "ctx", ",", "batch_axis", "=", "0", ")", "\n", "label", "=", "gluon", ".", "utils", ".", "split_and_load", "(", "batch", ".", "label", "[", "0", "]", ",", "ctx_list", "=", "ctx", ",", "batch_axis", "=", "0", ")", "\n", "return", "data", ",", "label", "\n", "\n", "", "train_data", "=", "mx", ".", "io", ".", "ImageRecordIter", "(", "\n", "path_imgrec", "=", "rec_train", ",", "\n", "path_imgidx", "=", "rec_train_idx", ",", "\n", "preprocess_threads", "=", "num_workers", ",", "\n", "shuffle", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "\n", "data_shape", "=", "(", "3", ",", "input_size", ",", "input_size", ")", ",", "\n", "mean_r", "=", "mean_rgb", "[", "0", "]", ",", "\n", "mean_g", "=", "mean_rgb", "[", "1", "]", ",", "\n", "mean_b", "=", "mean_rgb", "[", "2", "]", ",", "\n", "std_r", "=", "std_rgb", "[", "0", "]", ",", "\n", "std_g", "=", "std_rgb", "[", "1", "]", ",", "\n", "std_b", "=", "std_rgb", "[", "2", "]", ",", "\n", "rand_mirror", "=", "True", ",", "\n", "random_resized_crop", "=", "True", ",", "\n", "max_aspect_ratio", "=", "4.", "/", "3.", ",", "\n", "min_aspect_ratio", "=", "3.", "/", "4.", ",", "\n", "max_random_area", "=", "1", ",", "\n", "min_random_area", "=", "0.08", ",", "\n", "brightness", "=", "jitter_param", ",", "\n", "saturation", "=", "jitter_param", ",", "\n", "contrast", "=", "jitter_param", ",", "\n", "pca_noise", "=", "lighting_param", ",", "\n", ")", "\n", "val_data", "=", "mx", ".", "io", ".", "ImageRecordIter", "(", "\n", "path_imgrec", "=", "rec_val", ",", "\n", "path_imgidx", "=", "rec_val_idx", ",", "\n", "preprocess_threads", "=", "num_workers", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "\n", "resize", "=", "resize", ",", "\n", "data_shape", "=", "(", "3", ",", "input_size", ",", "input_size", ")", ",", "\n", "mean_r", "=", "mean_rgb", "[", "0", "]", ",", "\n", "mean_g", "=", "mean_rgb", "[", "1", "]", ",", "\n", "mean_b", "=", "mean_rgb", "[", "2", "]", ",", "\n", "std_r", "=", "std_rgb", "[", "0", "]", ",", "\n", "std_g", "=", "std_rgb", "[", "1", "]", ",", "\n", "std_b", "=", "std_rgb", "[", "2", "]", ",", "\n", ")", "\n", "return", "train_data", ",", "val_data", ",", "batch_fn", "\n", "\n", "", "def", "get_data_loader", "(", "data_dir", ",", "batch_size", ",", "num_workers", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "jitter_param", "=", "0.4", "\n", "lighting_param", "=", "0.1", "\n", "input_size", "=", "opt", ".", "input_size", "\n", "crop_ratio", "=", "opt", ".", "crop_ratio", "if", "opt", ".", "crop_ratio", ">", "0", "else", "0.875", "\n", "resize", "=", "int", "(", "math", ".", "ceil", "(", "input_size", "/", "crop_ratio", ")", ")", "\n", "\n", "def", "batch_fn", "(", "batch", ",", "ctx", ")", ":", "\n", "            ", "data", "=", "gluon", ".", "utils", ".", "split_and_load", "(", "batch", "[", "0", "]", ",", "ctx_list", "=", "ctx", ",", "batch_axis", "=", "0", ")", "\n", "label", "=", "gluon", ".", "utils", ".", "split_and_load", "(", "batch", "[", "1", "]", ",", "ctx_list", "=", "ctx", ",", "batch_axis", "=", "0", ")", "\n", "return", "data", ",", "label", "\n", "\n", "", "transform_train", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "RandomFlipLeftRight", "(", ")", ",", "\n", "transforms", ".", "RandomColorJitter", "(", "brightness", "=", "jitter_param", ",", "contrast", "=", "jitter_param", ",", "\n", "saturation", "=", "jitter_param", ")", ",", "\n", "transforms", ".", "RandomLighting", "(", "lighting_param", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "resize", ",", "keep_ratio", "=", "True", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "input_size", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "train_data", "=", "gluon", ".", "data", ".", "DataLoader", "(", "\n", "imagenet", ".", "classification", ".", "ImageNet", "(", "data_dir", ",", "train", "=", "True", ")", ".", "transform_first", "(", "transform_train", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "last_batch", "=", "'discard'", ",", "num_workers", "=", "num_workers", ")", "\n", "val_data", "=", "gluon", ".", "data", ".", "DataLoader", "(", "\n", "imagenet", ".", "classification", ".", "ImageNet", "(", "data_dir", ",", "train", "=", "False", ")", ".", "transform_first", "(", "transform_test", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "num_workers", ")", "\n", "\n", "return", "train_data", ",", "val_data", ",", "batch_fn", "\n", "\n", "", "if", "opt", ".", "use_rec", ":", "\n", "        ", "train_data", ",", "val_data", ",", "batch_fn", "=", "get_data_rec", "(", "opt", ".", "rec_train", ",", "opt", ".", "rec_train_idx", ",", "\n", "opt", ".", "rec_val", ",", "opt", ".", "rec_val_idx", ",", "\n", "batch_size", ",", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "train_data", ",", "val_data", ",", "batch_fn", "=", "get_data_loader", "(", "opt", ".", "data_dir", ",", "batch_size", ",", "num_workers", ")", "\n", "\n", "", "if", "opt", ".", "mixup", ":", "\n", "        ", "train_metric", "=", "mx", ".", "metric", ".", "RMSE", "(", ")", "\n", "", "else", ":", "\n", "        ", "train_metric", "=", "mx", ".", "metric", ".", "Accuracy", "(", ")", "\n", "", "acc_top1", "=", "mx", ".", "metric", ".", "Accuracy", "(", ")", "\n", "acc_top5", "=", "mx", ".", "metric", ".", "TopKAccuracy", "(", "5", ")", "\n", "\n", "save_frequency", "=", "opt", ".", "save_frequency", "\n", "if", "opt", ".", "save_dir", "and", "save_frequency", ":", "\n", "        ", "save_dir", "=", "opt", ".", "save_dir", "\n", "makedirs", "(", "save_dir", ")", "\n", "", "else", ":", "\n", "        ", "save_dir", "=", "''", "\n", "save_frequency", "=", "0", "\n", "\n", "", "def", "mixup_transform", "(", "label", ",", "classes", ",", "lam", "=", "1", ",", "eta", "=", "0.0", ")", ":", "\n", "        ", "if", "isinstance", "(", "label", ",", "nd", ".", "NDArray", ")", ":", "\n", "            ", "label", "=", "[", "label", "]", "\n", "", "res", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "y1", "=", "l", ".", "one_hot", "(", "classes", ",", "on_value", "=", "1", "-", "eta", "+", "eta", "/", "classes", ",", "off_value", "=", "eta", "/", "classes", ")", "\n", "y2", "=", "l", "[", ":", ":", "-", "1", "]", ".", "one_hot", "(", "classes", ",", "on_value", "=", "1", "-", "eta", "+", "eta", "/", "classes", ",", "off_value", "=", "eta", "/", "classes", ")", "\n", "res", ".", "append", "(", "lam", "*", "y1", "+", "(", "1", "-", "lam", ")", "*", "y2", ")", "\n", "", "return", "res", "\n", "\n", "", "def", "smooth", "(", "label", ",", "classes", ",", "eta", "=", "0.1", ")", ":", "\n", "        ", "if", "isinstance", "(", "label", ",", "nd", ".", "NDArray", ")", ":", "\n", "            ", "label", "=", "[", "label", "]", "\n", "", "smoothed", "=", "[", "]", "\n", "for", "l", "in", "label", ":", "\n", "            ", "res", "=", "l", ".", "one_hot", "(", "classes", ",", "on_value", "=", "1", "-", "eta", "+", "eta", "/", "classes", ",", "off_value", "=", "eta", "/", "classes", ")", "\n", "smoothed", ".", "append", "(", "res", ")", "\n", "", "return", "smoothed", "\n", "\n", "", "def", "test", "(", "ctx", ",", "val_data", ")", ":", "\n", "        ", "if", "opt", ".", "use_rec", ":", "\n", "            ", "val_data", ".", "reset", "(", ")", "\n", "", "acc_top1", ".", "reset", "(", ")", "\n", "acc_top5", ".", "reset", "(", ")", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "val_data", ")", ":", "\n", "            ", "data", ",", "label", "=", "batch_fn", "(", "batch", ",", "ctx", ")", "\n", "outputs", "=", "[", "net", "(", "X", ".", "astype", "(", "opt", ".", "dtype", ",", "copy", "=", "False", ")", ")", "for", "X", "in", "data", "]", "\n", "acc_top1", ".", "update", "(", "label", ",", "outputs", ")", "\n", "acc_top5", ".", "update", "(", "label", ",", "outputs", ")", "\n", "\n", "", "_", ",", "top1", "=", "acc_top1", ".", "get", "(", ")", "\n", "_", ",", "top5", "=", "acc_top5", ".", "get", "(", ")", "\n", "return", "(", "1", "-", "top1", ",", "1", "-", "top5", ")", "\n", "\n", "", "def", "train", "(", "ctx", ")", ":", "\n", "        ", "if", "isinstance", "(", "ctx", ",", "mx", ".", "Context", ")", ":", "\n", "            ", "ctx", "=", "[", "ctx", "]", "\n", "", "if", "opt", ".", "resume_params", "is", "''", ":", "\n", "            ", "net", ".", "initialize", "(", "mx", ".", "init", ".", "MSRAPrelu", "(", ")", ",", "ctx", "=", "ctx", ")", "\n", "\n", "", "if", "opt", ".", "no_wd", ":", "\n", "            ", "for", "k", ",", "v", "in", "net", ".", "collect_params", "(", "'.*beta|.*gamma|.*bias'", ")", ".", "items", "(", ")", ":", "\n", "                ", "v", ".", "wd_mult", "=", "0.0", "\n", "\n", "", "", "trainer", "=", "gluon", ".", "Trainer", "(", "net", ".", "collect_params", "(", ")", ",", "optimizer", ",", "optimizer_params", ")", "\n", "if", "opt", ".", "resume_states", "is", "not", "''", ":", "\n", "            ", "trainer", ".", "load_states", "(", "opt", ".", "resume_states", ")", "\n", "\n", "", "if", "opt", ".", "label_smoothing", "or", "opt", ".", "mixup", ":", "\n", "            ", "sparse_label_loss", "=", "False", "\n", "", "else", ":", "\n", "            ", "sparse_label_loss", "=", "True", "\n", "", "if", "distillation", ":", "\n", "            ", "L", "=", "gcv", ".", "loss", ".", "DistillationSoftmaxCrossEntropyLoss", "(", "temperature", "=", "opt", ".", "temperature", ",", "\n", "hard_weight", "=", "opt", ".", "hard_weight", ",", "\n", "sparse_label", "=", "sparse_label_loss", ")", "\n", "", "else", ":", "\n", "            ", "L", "=", "gluon", ".", "loss", ".", "SoftmaxCrossEntropyLoss", "(", "sparse_label", "=", "sparse_label_loss", ")", "\n", "\n", "", "best_val_score", "=", "1", "\n", "\n", "for", "epoch", "in", "range", "(", "opt", ".", "resume_epoch", ",", "opt", ".", "num_epochs", ")", ":", "\n", "            ", "tic", "=", "time", ".", "time", "(", ")", "\n", "if", "opt", ".", "use_rec", ":", "\n", "                ", "train_data", ".", "reset", "(", ")", "\n", "", "train_metric", ".", "reset", "(", ")", "\n", "btic", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "i", ",", "batch", "in", "enumerate", "(", "train_data", ")", ":", "\n", "                ", "data", ",", "label", "=", "batch_fn", "(", "batch", ",", "ctx", ")", "\n", "\n", "if", "opt", ".", "mixup", ":", "\n", "                    ", "lam", "=", "np", ".", "random", ".", "beta", "(", "opt", ".", "mixup_alpha", ",", "opt", ".", "mixup_alpha", ")", "\n", "if", "epoch", ">=", "opt", ".", "num_epochs", "-", "opt", ".", "mixup_off_epoch", ":", "\n", "                        ", "lam", "=", "1", "\n", "", "data", "=", "[", "lam", "*", "X", "+", "(", "1", "-", "lam", ")", "*", "X", "[", ":", ":", "-", "1", "]", "for", "X", "in", "data", "]", "\n", "\n", "if", "opt", ".", "label_smoothing", ":", "\n", "                        ", "eta", "=", "0.1", "\n", "", "else", ":", "\n", "                        ", "eta", "=", "0.0", "\n", "", "label", "=", "mixup_transform", "(", "label", ",", "classes", ",", "lam", ",", "eta", ")", "\n", "\n", "", "elif", "opt", ".", "label_smoothing", ":", "\n", "                    ", "hard_label", "=", "label", "\n", "label", "=", "smooth", "(", "label", ",", "classes", ")", "\n", "\n", "", "if", "distillation", ":", "\n", "                    ", "teacher_prob", "=", "[", "nd", ".", "softmax", "(", "teacher", "(", "X", ".", "astype", "(", "opt", ".", "dtype", ",", "copy", "=", "False", ")", ")", "/", "opt", ".", "temperature", ")", "for", "X", "in", "data", "]", "\n", "\n", "", "with", "ag", ".", "record", "(", ")", ":", "\n", "                    ", "outputs", "=", "[", "net", "(", "X", ".", "astype", "(", "opt", ".", "dtype", ",", "copy", "=", "False", ")", ")", "for", "X", "in", "data", "]", "\n", "if", "distillation", ":", "\n", "                        ", "loss", "=", "[", "L", "(", "yhat", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", ",", "\n", "y", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", ",", "\n", "p", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", ")", "for", "yhat", ",", "y", ",", "p", "in", "zip", "(", "outputs", ",", "label", ",", "teacher_prob", ")", "]", "\n", "", "else", ":", "\n", "                        ", "loss", "=", "[", "L", "(", "yhat", ",", "y", ".", "astype", "(", "opt", ".", "dtype", ",", "copy", "=", "False", ")", ")", "for", "yhat", ",", "y", "in", "zip", "(", "outputs", ",", "label", ")", "]", "\n", "", "", "for", "l", "in", "loss", ":", "\n", "                    ", "l", ".", "backward", "(", ")", "\n", "", "trainer", ".", "step", "(", "batch_size", ")", "\n", "\n", "if", "opt", ".", "mixup", ":", "\n", "                    ", "output_softmax", "=", "[", "nd", ".", "SoftmaxActivation", "(", "out", ".", "astype", "(", "'float32'", ",", "copy", "=", "False", ")", ")", "for", "out", "in", "outputs", "]", "\n", "train_metric", ".", "update", "(", "label", ",", "output_softmax", ")", "\n", "", "else", ":", "\n", "                    ", "if", "opt", ".", "label_smoothing", ":", "\n", "                        ", "train_metric", ".", "update", "(", "hard_label", ",", "outputs", ")", "\n", "", "else", ":", "\n", "                        ", "train_metric", ".", "update", "(", "label", ",", "outputs", ")", "\n", "\n", "", "", "if", "opt", ".", "log_interval", "and", "not", "(", "i", "+", "1", ")", "%", "opt", ".", "log_interval", ":", "\n", "                    ", "train_metric_name", ",", "train_metric_score", "=", "train_metric", ".", "get", "(", ")", "\n", "logger", ".", "info", "(", "'Epoch[%d] Batch [%d]\\tSpeed: %f samples/sec\\t%s=%f\\tlr=%f'", "%", "(", "\n", "epoch", ",", "i", ",", "batch_size", "*", "opt", ".", "log_interval", "/", "(", "time", ".", "time", "(", ")", "-", "btic", ")", ",", "\n", "train_metric_name", ",", "train_metric_score", ",", "trainer", ".", "learning_rate", ")", ")", "\n", "btic", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "train_metric_name", ",", "train_metric_score", "=", "train_metric", ".", "get", "(", ")", "\n", "throughput", "=", "int", "(", "batch_size", "*", "i", "/", "(", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "\n", "err_top1_val", ",", "err_top5_val", "=", "test", "(", "ctx", ",", "val_data", ")", "\n", "\n", "logger", ".", "info", "(", "'[Epoch %d] training: %s=%f'", "%", "(", "epoch", ",", "train_metric_name", ",", "train_metric_score", ")", ")", "\n", "logger", ".", "info", "(", "'[Epoch %d] speed: %d samples/sec\\ttime cost: %f'", "%", "(", "epoch", ",", "throughput", ",", "time", ".", "time", "(", ")", "-", "tic", ")", ")", "\n", "logger", ".", "info", "(", "'[Epoch %d] validation: err-top1=%f err-top5=%f'", "%", "(", "epoch", ",", "err_top1_val", ",", "err_top5_val", ")", ")", "\n", "\n", "if", "err_top1_val", "<", "best_val_score", ":", "\n", "                ", "best_val_score", "=", "err_top1_val", "\n", "net", ".", "save_parameters", "(", "'%s/%.4f-imagenet-%s-%d-best.params'", "%", "(", "save_dir", ",", "best_val_score", ",", "model_name", ",", "epoch", ")", ")", "\n", "trainer", ".", "save_states", "(", "'%s/%.4f-imagenet-%s-%d-best.states'", "%", "(", "save_dir", ",", "best_val_score", ",", "model_name", ",", "epoch", ")", ")", "\n", "\n", "", "if", "save_frequency", "and", "save_dir", "and", "(", "epoch", "+", "1", ")", "%", "save_frequency", "==", "0", ":", "\n", "                ", "net", ".", "save_parameters", "(", "'%s/imagenet-%s-%d.params'", "%", "(", "save_dir", ",", "model_name", ",", "epoch", ")", ")", "\n", "trainer", ".", "save_states", "(", "'%s/imagenet-%s-%d.states'", "%", "(", "save_dir", ",", "model_name", ",", "epoch", ")", ")", "\n", "", "", "if", "save_frequency", "and", "save_dir", ":", "\n", "            ", "net", ".", "save_parameters", "(", "'%s/imagenet-%s-%d.params'", "%", "(", "save_dir", ",", "model_name", ",", "opt", ".", "num_epochs", "-", "1", ")", ")", "\n", "trainer", ".", "save_states", "(", "'%s/imagenet-%s-%d.states'", "%", "(", "save_dir", ",", "model_name", ",", "opt", ".", "num_epochs", "-", "1", ")", ")", "\n", "\n", "", "", "if", "opt", ".", "mode", "==", "'hybrid'", ":", "\n", "        ", "net", ".", "hybridize", "(", "static_alloc", "=", "True", ",", "static_shape", "=", "True", ")", "\n", "if", "distillation", ":", "\n", "            ", "teacher", ".", "hybridize", "(", "static_alloc", "=", "True", ",", "static_shape", "=", "True", ")", "\n", "", "", "train", "(", "context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.complete": [[11, 26], ["len", "numpy.array", "max", "numpy.full", "numpy.full", "range", "list", "map", "len", "len", "len"], "function", ["None"], ["def", "complete", "(", "unary", ",", "pairwise", ",", "fill", "=", "-", "np", ".", "inf", ")", ":", "\n", "    ", "\"\"\"\n    Convert lists of unaries and pairwises into tensors by filling blanks\n    \"\"\"", "\n", "N", "=", "len", "(", "unary", ")", "\n", "states", "=", "np", ".", "array", "(", "list", "(", "map", "(", "len", ",", "unary", ")", ")", ")", "\n", "max_S", "=", "max", "(", "states", ")", "\n", "un", "=", "np", ".", "full", "(", "(", "N", ",", "max_S", ")", ",", "fill", ")", "\n", "pair", "=", "np", ".", "full", "(", "(", "N", "-", "1", ",", "max_S", ",", "max_S", ")", ",", "fill", ")", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "un", "[", "i", ",", ":", "len", "(", "unary", "[", "i", "]", ")", "]", "=", "unary", "[", "i", "]", "\n", "if", "i", "<", "N", "-", "1", ":", "\n", "            ", "pair", "[", "i", ",", ":", "len", "(", "unary", "[", "i", "]", ")", ",", ":", "len", "(", "unary", "[", "i", "+", "1", "]", ")", "]", "=", "pairwise", "[", "i", "]", "\n", "\n", "", "", "return", "un", ",", "pair", ",", "states", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.maxsum": [[28, 60], ["numba.jit", "numpy.zeros", "range", "numpy.zeros", "range", "range", "numpy.full", "range", "range"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "maxsum", "(", "unary", ",", "pairwise", ",", "states", ")", ":", "\n", "    ", "N", ",", "S", "=", "unary", ".", "shape", "\n", "partial", "=", "unary", "[", "0", "]", "\n", "selected", "=", "np", ".", "zeros", "(", "(", "N", "-", "1", ",", "S", ")", ",", "np", ".", "int64", ")", "\n", "for", "s", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "        ", "new_partial", "=", "np", ".", "full", "(", "(", "S", ",", ")", ",", "-", "np", ".", "inf", ")", "\n", "for", "j", "in", "range", "(", "states", "[", "s", "+", "1", "]", ")", ":", "\n", "            ", "best_", "=", "-", "np", ".", "inf", "\n", "best_i", "=", "0", "\n", "for", "i", "in", "range", "(", "states", "[", "s", "]", ")", ":", "\n", "                ", "candidate", "=", "partial", "[", "i", "]", "+", "pairwise", "[", "s", ",", "i", ",", "j", "]", "\n", "if", "candidate", ">", "best_", ":", "\n", "                    ", "best_", "=", "candidate", "\n", "best_i", "=", "i", "\n", "", "", "selected", "[", "s", ",", "j", "]", "=", "best_i", "\n", "new_partial", "[", "j", "]", "=", "unary", "[", "s", "+", "1", ",", "j", "]", "+", "best_", "\n", "", "partial", "=", "new_partial", "\n", "\n", "", "path", "=", "np", ".", "zeros", "(", "(", "N", ",", ")", ",", "np", ".", "int64", ")", "\n", "score", "=", "-", "np", ".", "inf", "\n", "best_j", "=", "0", "\n", "for", "j", "in", "range", "(", "states", "[", "N", "-", "1", "]", ")", ":", "\n", "        ", "candidate", "=", "partial", "[", "j", "]", "\n", "if", "candidate", ">", "score", ":", "\n", "            ", "score", "=", "candidate", "\n", "best_j", "=", "j", "\n", "", "", "path", "[", "N", "-", "1", "]", "=", "best_j", "\n", "for", "i", "in", "range", "(", "N", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "best_j", "=", "selected", "[", "i", ",", "best_j", "]", "\n", "path", "[", "i", "]", "=", "best_j", "\n", "", "return", "score", ",", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.score": [[62, 74], ["enumerate", "len"], "function", ["None"], ["", "def", "score", "(", "path", ",", "unary", ",", "pairwise", ",", "detail", "=", "False", ")", ":", "\n", "    ", "if", "not", "len", "(", "path", ")", ":", "return", "0.0", "\n", "S", "=", "unary", "[", "0", "]", "[", "path", "[", "0", "]", "]", "\n", "Sp", "=", "0.0", "\n", "prev", "=", "path", "[", "0", "]", "\n", "for", "i", ",", "p", "in", "enumerate", "(", "path", "[", "1", ":", "]", ")", ":", "\n", "        ", "Sp", "+=", "pairwise", "[", "i", "]", "[", "prev", ",", "p", "]", "\n", "S", "+=", "unary", "[", "i", "+", "1", "]", "[", "p", "]", "\n", "prev", "=", "p", "\n", "", "if", "detail", ":", "\n", "        ", "return", "S", ",", "Sp", "\n", "", "return", "S", "+", "Sp", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.maxsum_brute": [[76, 88], ["itertools.product", "float", "viterbi.score", "range"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.score"], ["", "def", "maxsum_brute", "(", "unary", ",", "pairwise", ",", "states", ",", "K", "=", "3", ")", ":", "\n", "    ", "\"\"\"\n    Brute-force max-sum (for debugging)\n    \"\"\"", "\n", "best_path", "=", "None", "\n", "best_score", "=", "-", "float", "(", "'inf'", ")", "\n", "for", "path", "in", "itertools", ".", "product", "(", "*", "[", "range", "(", "s", ")", "for", "s", "in", "states", "]", ")", ":", "\n", "        ", "sc", "=", "score", "(", "path", ",", "unary", ",", "pairwise", ")", "\n", "if", "sc", ">", "best_score", ":", "\n", "            ", "best_path", "=", "path", "\n", "best_score", "=", "sc", "\n", "", "", "return", "best_score", ",", "best_path", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.sumprod_log": [[90, 134], ["numba.jit", "numpy.zeros", "numpy.zeros", "range", "range", "range", "range", "range", "alpha[].max", "range", "range", "beta[].max", "numpy.exp", "range", "range", "numpy.log", "range", "range", "numpy.log", "marg[].max", "np.exp.sum().reshape", "numpy.exp", "numpy.exp().sum", "numpy.exp", "numpy.log", "numpy.exp().sum", "numpy.log", "np.exp.sum", "numpy.exp", "numpy.exp"], "function", ["None"], ["", "@", "jit", "(", "nopython", "=", "True", ")", "\n", "def", "sumprod_log", "(", "unary", ",", "pairwise", ",", "states", ",", "logspace", "=", "False", ")", ":", "\n", "    ", "N", ",", "max_s", "=", "unary", ".", "shape", "\n", "alpha", "=", "np", ".", "zeros", "(", "(", "N", ",", "max_s", ")", ",", "dtype", "=", "unary", ".", "dtype", ")", "\n", "beta", "=", "np", ".", "zeros", "(", "(", "N", ",", "max_s", ")", ",", "dtype", "=", "unary", ".", "dtype", ")", "\n", "alpha", "[", "0", ",", ":", "states", "[", "0", "]", "]", "=", "unary", "[", "0", "]", "[", ":", "states", "[", "0", "]", "]", "\n", "alpha", "[", "0", ",", "states", "[", "0", "]", ":", "]", "=", "-", "np", ".", "inf", "\n", "for", "s", "in", "range", "(", "N", "-", "1", ")", ":", "\n", "        ", "for", "k2", "in", "range", "(", "states", "[", "s", "+", "1", "]", ")", ":", "\n", "            ", "M", "=", "-", "np", ".", "inf", "\n", "for", "k1", "in", "range", "(", "states", "[", "s", "]", ")", ":", "\n", "                ", "C", "=", "alpha", "[", "s", ",", "k1", "]", "+", "pairwise", "[", "s", ",", "k1", ",", "k2", "]", "\n", "if", "C", ">", "M", ":", "\n", "                    ", "M", "=", "C", "\n", "", "", "for", "k1", "in", "range", "(", "states", "[", "s", "]", ")", ":", "\n", "                ", "alpha", "[", "s", "+", "1", ",", "k2", "]", "+=", "np", ".", "exp", "(", "alpha", "[", "s", ",", "k1", "]", "+", "pairwise", "[", "s", ",", "k1", ",", "k2", "]", "-", "M", ")", "\n", "", "alpha", "[", "s", "+", "1", ",", "k2", "]", "=", "unary", "[", "s", "+", "1", ",", "k2", "]", "+", "np", ".", "log", "(", "alpha", "[", "s", "+", "1", ",", "k2", "]", ")", "+", "M", "\n", "", "for", "k2", "in", "range", "(", "states", "[", "s", "+", "1", "]", ",", "max_s", ")", ":", "\n", "            ", "alpha", "[", "s", "+", "1", ",", "k2", "]", "=", "-", "np", ".", "inf", "\n", "", "M", "=", "alpha", "[", "s", "+", "1", ",", ":", "states", "[", "s", "+", "1", "]", "]", ".", "max", "(", ")", "\n", "Z", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "alpha", "[", "s", "+", "1", ",", ":", "states", "[", "s", "+", "1", "]", "]", "-", "M", ")", ".", "sum", "(", ")", ")", "+", "M", "\n", "alpha", "[", "s", "+", "1", ",", ":", "states", "[", "s", "+", "1", "]", "]", "=", "alpha", "[", "s", "+", "1", ",", ":", "states", "[", "s", "+", "1", "]", "]", "-", "Z", "\n", "", "for", "s", "in", "range", "(", "N", "-", "2", ",", "-", "1", ",", "-", "1", ")", ":", "\n", "        ", "for", "k1", "in", "range", "(", "states", "[", "s", "]", ")", ":", "\n", "            ", "M", "=", "-", "np", ".", "inf", "\n", "for", "k2", "in", "range", "(", "states", "[", "s", "+", "1", "]", ")", ":", "\n", "                ", "C", "=", "beta", "[", "s", "+", "1", ",", "k2", "]", "+", "pairwise", "[", "s", ",", "k1", ",", "k2", "]", "+", "unary", "[", "s", "+", "1", ",", "k2", "]", "\n", "if", "C", ">", "M", ":", "\n", "                    ", "M", "=", "C", "\n", "", "", "for", "k2", "in", "range", "(", "states", "[", "s", "+", "1", "]", ")", ":", "\n", "                ", "beta", "[", "s", ",", "k1", "]", "+=", "np", ".", "exp", "(", "beta", "[", "s", "+", "1", ",", "k2", "]", "+", "pairwise", "[", "s", ",", "k1", ",", "k2", "]", "+", "unary", "[", "s", "+", "1", ",", "k2", "]", "-", "M", ")", "\n", "", "beta", "[", "s", ",", "k1", "]", "=", "np", ".", "log", "(", "beta", "[", "s", ",", "k1", "]", ")", "+", "M", "\n", "", "for", "k1", "in", "range", "(", "states", "[", "s", "]", ",", "max_s", ")", ":", "\n", "            ", "beta", "[", "s", ",", "k1", "]", "=", "-", "np", ".", "inf", "\n", "", "M", "=", "beta", "[", "s", ",", ":", "states", "[", "s", "]", "]", ".", "max", "(", ")", "\n", "Z", "=", "np", ".", "log", "(", "np", ".", "exp", "(", "beta", "[", "s", ",", ":", "states", "[", "s", "]", "]", "-", "M", ")", ".", "sum", "(", ")", ")", "+", "M", "\n", "beta", "[", "s", ",", ":", "states", "[", "s", "]", "]", "=", "beta", "[", "s", ",", ":", "states", "[", "s", "]", "]", "-", "Z", "\n", "", "marg", "=", "alpha", "+", "beta", "\n", "for", "s", "in", "range", "(", "N", ")", ":", "\n", "        ", "marg", "[", "s", "]", "=", "marg", "[", "s", "]", "-", "marg", "[", "s", "]", ".", "max", "(", ")", "\n", "", "if", "not", "logspace", ":", "\n", "        ", "marg", "=", "np", ".", "exp", "(", "marg", ")", "\n", "marg", "=", "marg", "/", "marg", ".", "sum", "(", "1", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "return", "marg", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.parse_args": [[33, 92], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_subparsers", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "parser.add_subparsers.add_parser", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "subparsers.add_parser.add_argument", "argparse.ArgumentParser.parse_args", "subparser.add_argument", "subparser.add_argument", "subparser.add_argument", "subparser.add_argument", "subparser.add_argument", "subparser.add_argument", "int", "parser.parse_args.configuration.split", "ci.isdigit"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"Generate samples and fit a latency model.\"", ")", "\n", "\n", "subparsers", "=", "parser", ".", "add_subparsers", "(", "dest", "=", "'mode'", ")", "\n", "subparsers", ".", "required", "=", "True", "\n", "\n", "parser_bench", "=", "subparsers", ".", "add_parser", "(", "'benchmark'", ",", "\n", "help", "=", "\"Benchmark a single channel configuration\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "parser_bench", ".", "add_argument", "(", "\"configuration\"", ",", "\n", "help", "=", "\"configuration to test (comma-separated channels or MOBILENET)\"", ")", "\n", "\n", "parser_gen", "=", "subparsers", ".", "add_parser", "(", "'generate'", ",", "\n", "help", "=", "\"Generate latency samples\"", ",", "\n", "formatter_class", "=", "argparse", ".", "ArgumentDefaultsHelpFormatter", ")", "\n", "for", "subparser", "in", "(", "parser_bench", ",", "parser_gen", ")", ":", "\n", "        ", "subparser", ".", "add_argument", "(", "\"-D\"", ",", "\"--device\"", ",", "choices", "=", "[", "\"cpu\"", ",", "\"gpu\"", ",", "\"trt\"", "]", ",", "\n", "default", "=", "\"gpu\"", ",", "help", "=", "\"Use GPU, CPU or TensorRT latency\"", ")", "\n", "subparser", ".", "add_argument", "(", "\"--dtype\"", ",", "choices", "=", "[", "\"fp32\"", ",", "\"fp16\"", "]", ",", "\n", "default", "=", "\"fp16\"", ",", "help", "=", "\"Datatype for network\"", ")", "\n", "subparser", ".", "add_argument", "(", "\"-B\"", ",", "\"--batch-size\"", ",", "type", "=", "int", ",", "default", "=", "64", ",", "\n", "help", "=", "\"Batch size used for profiling\"", ")", "\n", "subparser", ".", "add_argument", "(", "\"-I\"", ",", "\"--iterations\"", ",", "type", "=", "int", ",", "default", "=", "60", ",", "\n", "help", "=", "\"Profiling iterations\"", ")", "\n", "subparser", ".", "add_argument", "(", "\"-W\"", ",", "\"--warmup\"", ",", "type", "=", "int", ",", "default", "=", "10", ",", "\n", "help", "=", "\"Warmup iterations\"", ")", "\n", "subparser", ".", "add_argument", "(", "\"--reduction\"", ",", "choices", "=", "[", "'mean'", ",", "'min'", "]", ",", "default", "=", "'mean'", ",", "\n", "help", "=", "\"Reduce timings by their mean or by their minimum (minimum can reduce variance)\"", ")", "\n", "", "parser_gen", ".", "add_argument", "(", "\"--biased\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Bias sampling towards missing configurations\"", ")", "\n", "parser_gen", ".", "add_argument", "(", "\"-N\"", ",", "\"--count\"", ",", "type", "=", "int", ",", "default", "=", "8000", ",", "\n", "help", "=", "\"Minimum number of samples to generate\"", ")", "\n", "parser_gen", ".", "add_argument", "(", "\"-R\"", ",", "\"--repetitions\"", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "\"Minimum number of samples per choice\"", ")", "\n", "parser_gen", ".", "add_argument", "(", "\"--save-every\"", ",", "type", "=", "int", ",", "default", "=", "1", ",", "\n", "help", "=", "\"Number of inferences before saving intermediate output\"", ")", "\n", "parser_gen", ".", "add_argument", "(", "\"samples_file\"", ",", "help", "=", "\"Output samples file\"", ")", "\n", "\n", "parser_fit", "=", "subparsers", ".", "add_parser", "(", "'fit'", ",", "help", "=", "\"Fit a latency model\"", ")", "\n", "parser_fit", ".", "add_argument", "(", "\"-K\"", ",", "\"--regularize\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ",", "\n", "help", "=", "\"Amount of monotonicity regularization (Equation 7)\"", ")", "\n", "parser_fit", ".", "add_argument", "(", "\"samples_file\"", ",", "help", "=", "\"Training samples\"", ")", "\n", "parser_fit", ".", "add_argument", "(", "\"model_file\"", ",", "help", "=", "\"Output model file\"", ")", "\n", "\n", "parser_val", "=", "subparsers", ".", "add_parser", "(", "'validate'", ",", "help", "=", "\"Validate a latency model\"", ")", "\n", "parser_val", ".", "add_argument", "(", "\"samples_file\"", ",", "help", "=", "\"Validation samples\"", ")", "\n", "parser_val", ".", "add_argument", "(", "\"model_file\"", ",", "help", "=", "\"Model file\"", ")", "\n", "parser_val", ".", "add_argument", "(", "\"plot_file\"", ",", "help", "=", "\"Plot file\"", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "'configuration'", "in", "args", ":", "\n", "        ", "defaults", "=", "{", "'MOBILENET'", ":", "\"32,64,128,128,256,256,512,512,512,512,512,512,1024,1024\"", "}", "\n", "if", "args", ".", "configuration", "in", "defaults", ":", "\n", "            ", "args", ".", "configuration", "=", "defaults", "[", "args", ".", "configuration", "]", "\n", "", "args", ".", "configuration", "=", "[", "int", "(", "''", ".", "join", "(", "ci", "for", "ci", "in", "c", "if", "ci", ".", "isdigit", "(", ")", ")", ")", "for", "c", "in", "args", ".", "configuration", ".", "split", "(", "','", ")", "]", "\n", "\n", "", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.get_model": [[94, 96], ["model.SlimMobilenet"], "function", ["None"], ["", "def", "get_model", "(", "min_width", "=", "0.2", ",", "max_width", "=", "1.5", ",", "levels", "=", "14", ")", ":", "\n", "    ", "return", "SlimMobilenet", "(", "min_width", "=", "min_width", ",", "max_width", "=", "max_width", ",", "levels", "=", "levels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.benchmark": [[98, 128], ["dict().get", "model.SlimMobilenet.reduce().to().type().eval", "torch.ones().to().type", "range", "time.time", "range", "torch.device", "torch2trt", "torch2trt.", "torch.cuda.current_stream().synchronize", "torch2trt.", "torch.cuda.current_stream().synchronize", "time.time", "timings.append", "print", "torch.device", "dict", "model.SlimMobilenet.reduce().to().type", "torch.ones().to", "torch.cuda.current_stream", "torch.cuda.current_stream", "getattr", "model.SlimMobilenet.reduce().to", "torch.ones", "model.SlimMobilenet.reduce"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.reduce"], ["", "def", "benchmark", "(", "device", ",", "dtype", ",", "batch_size", ",", "iterations", ",", "warmup", ",", "reduction", ",", "configuration", ",", "silent", "=", "False", ")", ":", "\n", "    ", "if", "device", "==", "'cpu'", ":", "\n", "        ", "dev", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "", "elif", "device", "in", "[", "'gpu'", ",", "'trt'", "]", ":", "\n", "        ", "dev", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "fp", "=", "dict", "(", "fp16", "=", "torch", ".", "float16", ",", "fp32", "=", "torch", ".", "float32", ")", ".", "get", "(", "dtype", ")", "\n", "net", "=", "SlimMobilenet", ".", "reduce", "(", "configuration", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "fp", ")", ".", "eval", "(", ")", "\n", "x", "=", "torch", ".", "ones", "(", "(", "batch_size", ",", "3", ",", "224", ",", "224", ")", ")", ".", "to", "(", "dev", ")", ".", "type", "(", "fp", ")", "\n", "if", "device", "==", "'trt'", ":", "\n", "        ", "from", "torch2trt", "import", "torch2trt", "\n", "net", "=", "torch2trt", "(", "net", ",", "[", "x", "]", ",", "fp16_mode", "=", "(", "dtype", "==", "'fp16'", ")", ",", "max_batch_size", "=", "batch_size", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "warmup", ")", ":", "\n", "        ", "outputs", "=", "net", "(", "x", ")", "\n", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "synchronize", "(", ")", "\n", "\n", "", "timings", "=", "[", "]", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "for", "i", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "outputs", "=", "net", "(", "x", ")", "\n", "torch", ".", "cuda", ".", "current_stream", "(", ")", ".", "synchronize", "(", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "timings", ".", "append", "(", "t1", "-", "t0", ")", "\n", "t0", "=", "t1", "\n", "\n", "", "ms", "=", "1000.0", "*", "getattr", "(", "np", ",", "reduction", ")", "(", "timings", ")", "/", "batch_size", "\n", "if", "not", "silent", ":", "\n", "        ", "print", "(", "f\"{configuration}: {ms}ms\"", ")", "\n", "\n", "", "return", "ms", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.gen_configuration_biased": [[130, 151], ["min", "enumerate", "unary.append", "viterbi.complete", "repetitions.values", "numpy.zeros", "numpy.zeros", "enumerate", "unary.append", "pairwise.append", "numpy.zeros", "viterbi.maxsum", "len", "enumerate", "len", "zip", "len", "len", "Vartype", "float", "len", "L._asdict"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.complete", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.maxsum"], ["", "def", "gen_configuration_biased", "(", "net", ",", "repetitions", ")", ":", "\n", "    ", "M", "=", "min", "(", "repetitions", ".", "values", "(", ")", ")", "\n", "unary", "=", "[", "]", "\n", "pairwise", "=", "[", "]", "\n", "for", "i", ",", "L", "in", "enumerate", "(", "net", ".", "components", ")", ":", "\n", "        ", "input_choices", "=", "[", "net", ".", "in_channels", "]", "if", "i", "==", "0", "else", "net", ".", "configurations", "[", "i", "-", "1", "]", "\n", "output_choices", "=", "(", "[", "net", ".", "out_channels", "]", "if", "i", "==", "len", "(", "net", ".", "components", ")", "-", "1", "\n", "else", "net", ".", "configurations", "[", "i", "]", ")", "\n", "U", "=", "np", ".", "zeros", "(", "len", "(", "input_choices", ")", ")", "\n", "P", "=", "np", ".", "zeros", "(", "(", "len", "(", "input_choices", ")", ",", "len", "(", "output_choices", ")", ")", ")", "\n", "for", "i1", ",", "I", "in", "enumerate", "(", "input_choices", ")", ":", "\n", "            ", "for", "i2", ",", "O", "in", "enumerate", "(", "output_choices", ")", ":", "\n", "                ", "var", "=", "Vartype", "(", "**", "L", ".", "_asdict", "(", ")", ",", "in_channels", "=", "I", ",", "out_channels", "=", "O", ")", "\n", "P", "[", "i1", ",", "i2", "]", "=", "float", "(", "repetitions", "[", "var", "]", "==", "M", ")", "\n", "", "", "unary", ".", "append", "(", "U", ")", "\n", "pairwise", ".", "append", "(", "P", ")", "\n", "", "unary", ".", "append", "(", "np", ".", "zeros", "(", "len", "(", "output_choices", ")", ")", ")", "\n", "un", ",", "pair", ",", "states", "=", "complete", "(", "unary", ",", "pairwise", ")", "\n", "iconfig", "=", "maxsum", "(", "un", ",", "pair", ",", "states", ")", "[", "1", "]", "\n", "configuration", "=", "[", "C", "[", "i", "]", "for", "(", "C", ",", "i", ")", "in", "zip", "(", "net", ".", "configurations", ",", "iconfig", "[", "1", ":", "-", "1", "]", ")", "]", "\n", "return", "configuration", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.gen_configuration": [[153, 157], ["latency.gen_configuration_biased", "random.choice"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.gen_configuration_biased"], ["", "def", "gen_configuration", "(", "net", ",", "repetitions", ",", "biased", "=", "False", ")", ":", "\n", "    ", "if", "biased", ":", "\n", "        ", "return", "gen_configuration_biased", "(", "net", ",", "repetitions", ")", "\n", "", "return", "[", "random", ".", "choice", "(", "conf", ")", "for", "conf", "in", "net", ".", "configurations", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.collect_repetitions": [[159, 174], ["isinstance", "collections.Counter", "enumerate", "Vartype", "len", "L._asdict"], "function", ["None"], ["", "def", "collect_repetitions", "(", "net", ",", "configuration", "=", "None", ")", ":", "\n", "    ", "if", "configuration", "is", "None", ":", "\n", "        ", "configuration", "=", "net", ".", "configurations", "\n", "", "if", "isinstance", "(", "configuration", "[", "0", "]", ",", "(", "int", ",", "np", ".", "integer", ")", ")", ":", "# single configuration", "\n", "        ", "configuration", "=", "[", "[", "c", "]", "for", "c", "in", "configuration", "]", "\n", "", "layertypes", "=", "Counter", "(", ")", "\n", "for", "i", ",", "L", "in", "enumerate", "(", "net", ".", "components", ")", ":", "\n", "        ", "input_choices", "=", "[", "net", ".", "in_channels", "]", "if", "i", "==", "0", "else", "configuration", "[", "i", "-", "1", "]", "\n", "output_choices", "=", "(", "[", "net", ".", "out_channels", "]", "if", "i", "==", "len", "(", "net", ".", "components", ")", "-", "1", "\n", "else", "configuration", "[", "i", "]", ")", "\n", "for", "I", "in", "input_choices", ":", "\n", "            ", "for", "O", "in", "output_choices", ":", "\n", "                ", "var", "=", "Vartype", "(", "**", "L", ".", "_asdict", "(", ")", ",", "in_channels", "=", "I", ",", "out_channels", "=", "O", ")", "\n", "layertypes", "[", "var", "]", "+=", "1", "\n", "", "", "", "return", "layertypes", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.sample_file_iterator": [[176, 180], ["open", "misc.tuplify", "json.loads"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.tuplify"], ["", "def", "sample_file_iterator", "(", "samples_file", ")", ":", "\n", "    ", "with", "open", "(", "samples_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "yield", "tuplify", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.generate": [[182, 227], ["os.makedirs", "os.makedirs", "latency.get_model", "latency.collect_repetitions", "logger.info", "logger.debug", "logger.debug", "logger.info", "collections.Counter", "os.isfile", "logger.info", "samples.extend", "os.dirname", "latency.sample_file_iterator", "logger.info", "latency.gen_configuration", "latency.benchmark", "collections.Counter.update", "logger.info", "new_samples.append", "samples.append", "collections.Counter.update", "min", "latency.collect_repetitions", "samples.extend", "len", "len", "latency.collect_repetitions", "len", "len", "collections.Counter.values", "len", "open", "min", "len", "min", "int", "collections.Counter.values", "collections.Counter.values", "len", "len", "json.dumps", "misc.DelayedKeyboardInterrupt", "f.write"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.get_model", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.collect_repetitions", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.sample_file_iterator", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.gen_configuration", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.benchmark", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.collect_repetitions", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.collect_repetitions"], ["", "", "", "def", "generate", "(", "device", ",", "dtype", ",", "batch_size", ",", "iterations", ",", "warmup", ",", "reduction", ",", "biased", ",", "\n", "count", ",", "repetitions", ",", "samples_file", "=", "os", ".", "devnull", ",", "save_every", "=", "10", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "samples_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n", "net", "=", "get_model", "(", ")", "\n", "combinations", "=", "collect_repetitions", "(", "net", ")", "\n", "logger", ".", "info", "(", "f\"{len(net.configurations)} modulers\"", ")", "\n", "logger", ".", "debug", "(", "f\"search space: {net.configurations}\"", ")", "\n", "logger", ".", "debug", "(", "f\"components: {net.components}\"", ")", "\n", "logger", ".", "info", "(", "f\"Latency model has {len(combinations)} parameters\"", ")", "\n", "\n", "repeats", "=", "Counter", "(", ")", "\n", "for", "c", "in", "combinations", ":", "\n", "        ", "repeats", "[", "c", "]", "=", "0", "\n", "\n", "", "samples", "=", "[", "]", "\n", "if", "osp", ".", "isfile", "(", "samples_file", ")", ":", "\n", "        ", "for", "sample", "in", "sample_file_iterator", "(", "samples_file", ")", ":", "\n", "            ", "samples", ".", "append", "(", "sample", ")", "\n", "repeats", ".", "update", "(", "collect_repetitions", "(", "net", ",", "sample", "[", "0", "]", ")", ")", "\n", "", "logger", ".", "info", "(", "f\"Loaded {samples_file}, \"", "\n", "f\"min_repetition={min(repeats.values())} \"", "\n", "f\"count={len(samples)} \"", ")", "\n", "", "logger", ".", "info", "(", "f\"Writing new samples to {samples_file}\"", ")", "\n", "new_samples", "=", "[", "]", "\n", "while", "(", "len", "(", "samples", ")", "+", "len", "(", "new_samples", ")", "<", "count", "\n", "or", "min", "(", "repeats", ".", "values", "(", ")", ")", "<", "repetitions", ")", ":", "\n", "        ", "configuration", "=", "gen_configuration", "(", "net", ",", "repeats", ",", "biased", "=", "biased", ")", "\n", "ms", "=", "benchmark", "(", "device", ",", "dtype", ",", "batch_size", ",", "iterations", ",", "warmup", ",", "reduction", ",", "configuration", ",", "silent", "=", "True", ")", "\n", "repeats", ".", "update", "(", "collect_repetitions", "(", "net", ",", "configuration", ")", ")", "\n", "logger", ".", "info", "(", "f\"{configuration}: {ms:.04f}ms, \"", "\n", "f\"min_repetition={min(repeats.values())} \"", "\n", "f\"count={len(samples) + len(new_samples)} \"", ")", "\n", "new_samples", ".", "append", "(", "[", "[", "int", "(", "d", ")", "for", "d", "in", "configuration", "]", ",", "ms", "]", ")", "\n", "if", "(", "len", "(", "new_samples", ")", "%", "save_every", ")", "==", "0", ":", "\n", "            ", "with", "open", "(", "samples_file", ",", "'a'", ")", "as", "f", ":", "\n", "                ", "for", "sample", "in", "new_samples", ":", "\n", "                    ", "dump", "=", "json", ".", "dumps", "(", "sample", ")", "+", "'\\n'", "\n", "with", "DelayedKeyboardInterrupt", "(", ")", ":", "\n", "                        ", "f", ".", "write", "(", "dump", ")", "\n", "", "", "", "samples", ".", "extend", "(", "new_samples", ")", "\n", "new_samples", "=", "[", "]", "\n", "\n", "", "", "samples", ".", "extend", "(", "new_samples", ")", "\n", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.build_equation": [[229, 252], ["latency.get_model", "enumerate", "numpy.array", "scipy.sparse.lil_matrix", "np.array.append", "latency.collect_repetitions", "collect_repetitions.items", "Mcoord.append", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.get_model", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.collect_repetitions"], ["", "def", "build_equation", "(", "samples", ")", ":", "\n", "    ", "\"\"\"\n    Samples can be iterator\n    \"\"\"", "\n", "net", "=", "get_model", "(", ")", "\n", "variables", "=", "{", "}", "\n", "ivariables", "=", "{", "}", "\n", "Mcoord", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "for", "(", "i", ",", "sample", ")", "in", "enumerate", "(", "samples", ")", ":", "\n", "        ", "y", ".", "append", "(", "sample", "[", "1", "]", ")", "\n", "local_repeats", "=", "collect_repetitions", "(", "net", ",", "sample", "[", "0", "]", ")", "\n", "for", "(", "L", ",", "r", ")", "in", "local_repeats", ".", "items", "(", ")", ":", "\n", "            ", "if", "L", "not", "in", "variables", ":", "\n", "                ", "j", "=", "len", "(", "variables", ")", "\n", "variables", "[", "L", "]", "=", "j", "\n", "ivariables", "[", "j", "]", "=", "L", "\n", "", "Mcoord", ".", "append", "(", "(", "i", ",", "variables", "[", "L", "]", ",", "r", ")", ")", "\n", "", "", "y", "=", "np", ".", "array", "(", "y", ")", "\n", "M", "=", "lil_matrix", "(", "(", "len", "(", "y", ")", ",", "len", "(", "variables", ")", ")", ")", "\n", "for", "(", "i", ",", "j", ",", "r", ")", "in", "Mcoord", ":", "\n", "        ", "M", "[", "i", ",", "j", "]", "=", "r", "\n", "", "return", "M", ",", "y", ",", "variables", ",", "ivariables", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.solve_lsq": [[254, 269], ["cvxpy.Variable", "cvxpy.Variable", "cvxpy.Constant", "cvxpy.sum_squares", "cvxpy.Minimize", "cvxpy.Problem", "cp.Problem.solve", "cvxpy.Constant", "cvxpy.sum_squares"], "function", ["None"], ["", "def", "solve_lsq", "(", "M", ",", "y", ",", "regularize", "=", "0.0", ",", "K", "=", "None", ")", ":", "\n", "    ", "n", "=", "M", ".", "shape", "[", "1", "]", "\n", "x", "=", "cp", ".", "Variable", "(", "n", ")", "\n", "t", "=", "cp", ".", "Variable", "(", "K", ".", "shape", "[", "0", "]", ")", "\n", "M_cp", "=", "cp", ".", "Constant", "(", "M", ")", "\n", "obj", "=", "cp", ".", "sum_squares", "(", "M_cp", "@", "x", "-", "y", ")", "\n", "constraints", "=", "[", "x", ">=", "0", "]", "\n", "if", "regularize", ":", "\n", "        ", "K_cp", "=", "cp", ".", "Constant", "(", "K", ")", "\n", "obj", "+=", "regularize", "*", "cp", ".", "sum_squares", "(", "t", ")", "\n", "constraints", "+=", "[", "t", ">=", "0", ",", "K_cp", "@", "x", "<=", "t", "]", "\n", "", "objective", "=", "cp", ".", "Minimize", "(", "obj", ")", "\n", "prob", "=", "cp", ".", "Problem", "(", "objective", ",", "constraints", ")", "\n", "prob", ".", "solve", "(", "cp", ".", "SCS", ",", "verbose", "=", "True", ")", "\n", "return", "x", ".", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.get_inequalities": [[271, 291], ["collections.defaultdict", "collections.defaultdict.values", "scipy.sparse.lil_matrix", "enumerate", "L._asdict", "tuple", "sorted", "range", "L._asdict.values", "buckets[].append", "inequalities.append", "len", "len", "len", "latency.get_inequalities.other"], "function", ["None"], ["", "def", "get_inequalities", "(", "variables", ")", ":", "\n", "    ", "def", "other", "(", "L", ",", "*", "args", ")", ":", "\n", "        ", "props", "=", "L", ".", "_asdict", "(", ")", "\n", "for", "k", "in", "args", ":", "\n", "            ", "del", "props", "[", "k", "]", "\n", "", "return", "tuple", "(", "props", ".", "values", "(", ")", ")", "\n", "", "buckets", "=", "defaultdict", "(", "list", ")", "\n", "for", "order", "in", "[", "'in_channels'", ",", "'out_channels'", ",", "'in_size'", "]", ":", "\n", "        ", "for", "V", "in", "variables", ":", "\n", "            ", "buckets", "[", "other", "(", "V", ",", "order", ")", "]", ".", "append", "(", "V", ")", "\n", "", "", "inequalities", "=", "[", "]", "\n", "for", "bucket", "in", "buckets", ".", "values", "(", ")", ":", "\n", "        ", "bucket", "=", "sorted", "(", "bucket", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "bucket", ")", "-", "1", ")", ":", "\n", "            ", "inequalities", ".", "append", "(", "(", "bucket", "[", "i", "]", ",", "bucket", "[", "i", "+", "1", "]", ")", ")", "\n", "", "", "K", "=", "lil_matrix", "(", "(", "len", "(", "inequalities", ")", ",", "len", "(", "variables", ")", ")", ")", "\n", "for", "i", ",", "(", "C1", ",", "C2", ")", "in", "enumerate", "(", "inequalities", ")", ":", "\n", "        ", "K", "[", "i", ",", "variables", "[", "C1", "]", "]", "=", "1", "\n", "K", "[", "i", ",", "variables", "[", "C2", "]", "]", "=", "-", "1", "\n", "", "return", "K", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.fit_model": [[293, 301], ["latency.build_equation", "latency.get_inequalities", "latency.solve_lsq", "enumerate", "model.append"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.build_equation", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.get_inequalities", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.solve_lsq"], ["", "def", "fit_model", "(", "samples", ",", "regularize", "=", "0.0", ")", ":", "\n", "    ", "M", ",", "y", ",", "variables", ",", "ivariables", "=", "build_equation", "(", "samples", ")", "\n", "K", "=", "get_inequalities", "(", "variables", ")", "\n", "x", "=", "solve_lsq", "(", "M", ",", "y", ",", "regularize", ",", "K", ")", "\n", "model", "=", "[", "]", "\n", "for", "i", ",", "ms", "in", "enumerate", "(", "x", ")", ":", "\n", "        ", "model", ".", "append", "(", "(", "ivariables", "[", "i", "]", ",", "ms", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.dump_model": [[303, 309], ["open", "f.write", "json.dumps", "var._asdict"], "function", ["None"], ["", "def", "dump_model", "(", "model", ",", "model_file", ")", ":", "\n", "    ", "with", "open", "(", "model_file", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "m", "in", "model", ":", "\n", "            ", "var", ",", "ms", "=", "m", "\n", "dump", "=", "json", ".", "dumps", "(", "[", "var", ".", "_asdict", "(", ")", ",", "ms", "]", ")", "+", "'\\n'", "\n", "f", ".", "write", "(", "dump", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.load_model": [[311, 317], ["open", "misc.tuplify", "Vartype", "json.loads"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.tuplify"], ["", "", "", "def", "load_model", "(", "model_file", ")", ":", "\n", "    ", "with", "open", "(", "model_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "var", ",", "ms", "=", "tuplify", "(", "json", ".", "loads", "(", "line", ")", ")", "\n", "var", "=", "Vartype", "(", "**", "var", ")", "\n", "yield", "(", "var", ",", "ms", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.fit": [[319, 325], ["os.makedirs", "os.makedirs", "latency.sample_file_iterator", "latency.fit_model", "latency.dump_model", "os.dirname"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.sample_file_iterator", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.fit_model", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.dump_model"], ["", "", "", "def", "fit", "(", "samples_file", ",", "model_file", ",", "regularize", "=", "0.0", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "model_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "samples", "=", "sample_file_iterator", "(", "samples_file", ")", "\n", "model", "=", "fit_model", "(", "samples", ",", "regularize", ")", "\n", "dump_model", "(", "model", ",", "model_file", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.validate": [[327, 343], ["os.makedirs", "os.makedirs", "latency.load_model", "dict", "latency.sample_file_iterator", "latency.build_equation", "numpy.sqrt", "print", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "matplotlib.savefig", "os.dirname", "range", "len", "y.mean"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.load_model", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.sample_file_iterator", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.build_equation"], ["", "def", "validate", "(", "samples_file", ",", "model_file", ",", "plot_file", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "osp", ".", "dirname", "(", "plot_file", ")", ",", "exist_ok", "=", "True", ")", "\n", "model", "=", "load_model", "(", "model_file", ")", "\n", "model_dict", "=", "dict", "(", "model", ")", "\n", "samples", "=", "sample_file_iterator", "(", "samples_file", ")", "\n", "M", ",", "y", ",", "variables", ",", "ivariables", "=", "build_equation", "(", "samples", ")", "\n", "x", "=", "[", "model_dict", "[", "ivariables", "[", "i", "]", "]", "for", "i", "in", "range", "(", "len", "(", "variables", ")", ")", "]", "\n", "yhat", "=", "M", "@", "x", "\n", "rmse", "=", "np", ".", "sqrt", "(", "(", "(", "y", "-", "yhat", ")", "**", "2", ")", ".", "mean", "(", ")", ")", "\n", "title", "=", "f\"RMSE {rmse:.04f}, NRMSE {100 * rmse / y.mean():.02f}%\"", "\n", "print", "(", "title", ")", "\n", "plt", ".", "plot", "(", "y", ",", "yhat", ",", "'o'", ")", "\n", "plt", ".", "xlabel", "(", "\"ground truth (ms)\"", ")", "\n", "plt", ".", "ylabel", "(", "\"predicted (ms)\"", ")", "\n", "plt", ".", "title", "(", "title", ")", "\n", "plt", ".", "savefig", "(", "plot_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.main": [[69, 167], ["parser.parse_args", "logger.info", "model.SlimMobilenet", "logger.info", "torch.nn.CrossEntropyLoss", "logger.info", "torch.optim.SGD", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torch.utils.data.DataLoader", "types.SimpleNamespace", "dict", "range", "torch.nn.DataParallel().cuda", "criterion.cuda.cuda", "nn.DataParallel().cuda.parameters", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "os.path.join", "os.path.join", "torchvision.transforms.Compose", "hasattr", "latency.load_model", "glob.glob", "sorted", "os.path.isfile", "os.path.isfile", "train_nas.solve_ows", "logger.info", "logger.info", "train_nas.train", "logger.info", "logger.info", "logger.info", "train_nas.save_checkpoint", "logger.info", "misc.MovingAverageMeter", "os.join", "logger.info", "torch.load", "next", "nn.DataParallel().cuda.load_state_dict", "torch.optim.SGD.load_state_dict", "logger.info", "logger.info", "len", "os.makedirs", "os.makedirs", "os.join", "open", "pickle.dump", "nn.DataParallel().cuda.state_dict", "torch.optim.SGD.state_dict", "open", "f.write", "torch.nn.DataParallel", "int", "iter", "next.startswith", "os.join", "torchvision.transforms.ToTensor", "state_dict.keys", "format", "state_dict.items", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.parse_args", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.latency.load_model", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.solve_ows", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.train", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.save_checkpoint"], ["def", "main", "(", ")", ":", "\n", "    ", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "logger", ".", "info", "(", "\"=> creating model\"", ")", "\n", "model", "=", "SlimMobilenet", "(", "min_width", "=", "args", ".", "min_width", ",", "max_width", "=", "args", ".", "max_width", ",", "levels", "=", "args", ".", "levels", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "if", "not", "args", ".", "no_cuda", ":", "\n", "        ", "model", "=", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "\n", "", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "if", "not", "args", ".", "no_cuda", ":", "\n", "        ", "criterion", "=", "criterion", ".", "cuda", "(", ")", "\n", "\n", "", "args", ".", "lr", "=", "args", ".", "lr", "*", "args", ".", "batch_size", "/", "256", "\n", "logger", ".", "info", "(", "\"learning rate scaling: using lr={}\"", ".", "format", "(", "args", ".", "lr", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "torch", ".", "backends", ".", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "augment", "=", "[", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "]", "\n", "\n", "dataset_train", "=", "datasets", ".", "ImageFolder", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", ",", "\n", "transforms", ".", "Compose", "(", "augment", "+", "[", "transforms", ".", "ToTensor", "(", ")", ",", "normalize", "]", ")", ")", "\n", "train_loader", "=", "data", ".", "DataLoader", "(", "dataset_train", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "start_epoch", "=", "0", "\n", "ows_state", "=", "SimpleNamespace", "(", ")", "\n", "\n", "filters", "=", "model", ".", "filters", "if", "hasattr", "(", "model", ",", "'filters'", ")", "else", "model", ".", "module", ".", "filters", "\n", "ows_state", ".", "histories", "=", "[", "{", "c", ":", "misc", ".", "MovingAverageMeter", "(", "args", ".", "window", ")", "for", "c", "in", "F", ".", "configurations", "}", "for", "F", "in", "filters", "]", "\n", "ows_state", ".", "latency", "=", "dict", "(", "latency", ".", "load_model", "(", "args", ".", "latency_model", ")", ")", "\n", "\n", "if", "args", ".", "resume_last", ":", "\n", "        ", "avail", "=", "glob", "(", "osp", ".", "join", "(", "args", ".", "expname", ",", "'checkpoint*.pth'", ")", ")", "\n", "avail", "=", "[", "(", "int", "(", "f", "[", "-", "len", "(", "'.pth'", ")", "-", "3", ":", "-", "len", "(", "'.pth'", ")", "]", ")", ",", "f", ")", "for", "f", "in", "avail", "]", "\n", "avail", "=", "sorted", "(", "avail", ")", "\n", "if", "avail", ":", "\n", "            ", "args", ".", "resume", "=", "avail", "[", "-", "1", "]", "[", "1", "]", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "        ", "if", "os", ".", "path", ".", "isfile", "(", "args", ".", "resume", ")", ":", "\n", "            ", "logger", ".", "info", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "args", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "resume", ")", "\n", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "key", "=", "next", "(", "iter", "(", "state_dict", ".", "keys", "(", ")", ")", ")", "\n", "if", "key", ".", "startswith", "(", "'module.'", ")", "and", "args", ".", "no_cuda", ":", "\n", "                ", "state_dict", "=", "{", "k", "[", "len", "(", "'module.'", ")", ":", "]", ":", "v", "for", "(", "k", ",", "v", ")", "in", "state_dict", ".", "items", "(", ")", "}", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "if", "'ows_state'", "in", "checkpoint", ":", "\n", "                ", "ows_state", ".", "histories", "=", "checkpoint", "[", "'ows_state'", "]", ".", "histories", "\n", "", "logger", ".", "info", "(", "\"=> loaded checkpoint '{}' (epoch {})\"", "\n", ".", "format", "(", "args", ".", "resume", ",", "checkpoint", "[", "'epoch'", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "f\"=> no checkpoint found at '{args.resume}'\"", ")", "\n", "args", ".", "resume", "=", "''", "\n", "\n", "", "", "if", "args", ".", "resume", ":", "\n", "# Solve OWS one first time in order to allow re-evaluation on the last epoch with varying latency target", "\n", "        ", "best_path", ",", "_", ",", "_", ",", "_", ",", "timing", "=", "solve_ows", "(", "model", ",", "start_epoch", ",", "len", "(", "train_loader", ")", ",", "-", "1", ",", "ows_state", ",", "args", ",", "eval_only", "=", "True", ")", "\n", "logger", ".", "info", "(", "'Evaluation from resumed checkpoint...'", ")", "\n", "best_path_str", "=", "(", "f\"Best configuration: {best_path}, \"", "\n", "f\"predicted latency: {timing}\"", ")", "\n", "logger", ".", "info", "(", "best_path_str", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "history", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "ows_state", ",", "args", ")", "\n", "\n", "logger", ".", "info", "(", "f\"=> saving decision history for epoch {format(epoch + 1)}\"", ")", "\n", "decision_target", "=", "'decision{:03d}.pkl'", ".", "format", "(", "epoch", "+", "1", ")", "\n", "if", "args", ".", "expname", ":", "\n", "            ", "os", ".", "makedirs", "(", "args", ".", "expname", ",", "exist_ok", "=", "True", ")", "\n", "decision_target", "=", "osp", ".", "join", "(", "args", ".", "expname", ",", "decision_target", ")", "\n", "", "with", "open", "(", "decision_target", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "history", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n", "", "logger", ".", "info", "(", "f\"=> saving checkpoint for epoch {epoch + 1}\"", ")", "\n", "\n", "current_state", "=", "{", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'state_dict'", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "}", "\n", "\n", "current_state", "[", "'ows_state'", "]", "=", "ows_state", "\n", "best_path_str", "=", "(", "f\"Best configuration: {history['OWS'][-1]['best_path']}, \"", "\n", "f\"predicted latency: {history['OWS'][-1]['pred_latency']}\"", ")", "\n", "logger", ".", "info", "(", "best_path_str", ")", "\n", "with", "open", "(", "osp", ".", "join", "(", "args", ".", "expname", ",", "f\"ows_result_{epoch + 1:03d}.txt\"", ")", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "best_path_str", "+", "'\\n'", ")", "\n", "", "filename", "=", "save_checkpoint", "(", "current_state", ",", "args", ".", "expname", ")", "\n", "logger", ".", "info", "(", "f\"checkpoint saved to {filename}.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.train": [[170, 283], ["collections.defaultdict", "model.train", "collections.defaultdict", "time.time", "enumerate", "hasattr", "train_nas.solve_ows", "meters[].update", "misc.SWDefaultDict", "optimizer.zero_grad", "model", "criterion", "misc.soft_cross_entropy.mean().backward", "outp[].detach", "misc.soft_cross_entropy.detach().cpu().numpy", "torch.nn.functional.softmax", "zip", "history[].append", "history[].append", "optimizer.step", "meters[].update", "time.time", "len", "target.cuda.cuda", "model", "misc.soft_cross_entropy", "misc.soft_cross_entropy.detach().cpu().numpy", "outp[].detach", "misc.soft_cross_entropy.mean().backward", "enumerate", "meters[].update", "misc.accuracy", "history[].append", "history[].append", "history[].append", "meters[].update", "meters[].update", "collections.defaultdict.items", "logger.info", "enumerate", "any", "history[].append", "logger.info", "time.time", "misc.soft_cross_entropy.mean", "misc.soft_cross_entropy.detach().cpu", "[].detach", "torch.no_grad", "criterion().detach().cpu().numpy", "outp[].cpu().numpy", "[].update", "[].mean", "input.size", "a.cpu().numpy().astype", "prec1.item", "input.size", "prec5.item", "input.size", "meters[].update", "history[].append", "time.time", "key.startswith", "dict", "misc.soft_cross_entropy.detach().cpu", "misc.soft_cross_entropy.mean", "[].mean", "input.size", "len", "tuple", "misc.soft_cross_entropy.detach", "criterion().detach().cpu", "outp[].cpu", "len", "a.cpu().numpy", "misc.soft_cross_entropy.detach", "str", "criterion().detach", "a.cpu", "int", "map", "criterion"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.train", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.solve_ows", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.soft_cross_entropy", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.accuracy", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update"], ["", "", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "ows_state", ",", "args", ")", ":", "\n", "    ", "meters", "=", "defaultdict", "(", "misc", ".", "AverageMeter", ")", "\n", "\n", "model", ".", "train", "(", ")", "\n", "\n", "filters", "=", "model", ".", "filters", "if", "hasattr", "(", "model", ",", "'filters'", ")", "else", "model", ".", "module", ".", "filters", "\n", "history", "=", "defaultdict", "(", "list", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "iteration", ",", "(", "input", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "\"mini\"", "in", "args", ".", "debug", "and", "iteration", ">", "20", ":", "break", "\n", "\n", "best_path", ",", "temperature", ",", "gamma_max", ",", "best_perf", ",", "timing", "=", "solve_ows", "(", "\n", "model", ",", "epoch", ",", "len", "(", "train_loader", ")", ",", "iteration", ",", "ows_state", ",", "args", ")", "\n", "\n", "# measure data loading time", "\n", "meters", "[", "\"data_time\"", "]", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "\n", "if", "not", "args", ".", "no_cuda", ":", "\n", "            ", "target", "=", "target", ".", "cuda", "(", "non_blocking", "=", "True", ")", "\n", "\n", "", "compute_results", "=", "misc", ".", "SWDefaultDict", "(", "misc", ".", "SWDict", ")", "\n", "\n", "minconf", "=", "[", "F", ".", "configurations", "[", "0", "]", "for", "F", "in", "filters", "]", "\n", "maxconf", "=", "[", "F", ".", "configurations", "[", "-", "1", "]", "for", "F", "in", "filters", "]", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# sandwich rule: train maximum configuration", "\n", "outp", "=", "model", "(", "input", ",", "configuration", "=", "maxconf", ")", "\n", "loss", "=", "criterion", "(", "outp", "[", "'x'", "]", ",", "target", ")", "\n", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "compute_results", "[", "'max'", "]", "[", "'x'", "]", "=", "outp", "[", "'x'", "]", ".", "detach", "(", ")", "\n", "compute_results", "[", "'max'", "]", "[", "'loss_numpy'", "]", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "compute_results", "[", "'max'", "]", "[", "'prob'", "]", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "compute_results", "[", "'max'", "]", "[", "'x'", "]", ",", "dim", "=", "1", ")", "\n", "\n", "# sandwich rule: train minimum and random configuration with self-distillation", "\n", "for", "kind", "in", "(", "'min'", ",", "'rand'", ")", ":", "\n", "            ", "conf", "=", "None", "if", "kind", "==", "'rand'", "else", "minconf", "\n", "outp", "=", "model", "(", "input", ",", "configuration", "=", "conf", ")", "\n", "\n", "loss", "=", "misc", ".", "soft_cross_entropy", "(", "outp", "[", "'x'", "]", ",", "compute_results", "[", "'max'", "]", "[", "'prob'", "]", ".", "detach", "(", ")", ")", "\n", "compute_results", "[", "kind", "]", "[", "'soft_loss_numpy'", "]", "=", "loss", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "hard_loss_numpy", "=", "criterion", "(", "outp", "[", "'x'", "]", ",", "target", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "compute_results", "[", "kind", "]", "[", "'loss_numpy'", "]", "=", "hard_loss_numpy", "\n", "\n", "", "compute_results", "[", "kind", "]", "[", "'x'", "]", "=", "outp", "[", "'x'", "]", ".", "detach", "(", ")", "\n", "if", "kind", "==", "'rand'", ":", "\n", "                ", "compute_results", "[", "'rand'", "]", "[", "'decision'", "]", "=", "outp", "[", "'decision'", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "loss", ".", "mean", "(", ")", ".", "backward", "(", ")", "\n", "\n", "", "for", "path", ",", "image_loss", ",", "image_refloss", "in", "zip", "(", "compute_results", "[", "'rand'", "]", "[", "'decision'", "]", ",", "\n", "compute_results", "[", "'rand'", "]", "[", "'loss_numpy'", "]", ",", "\n", "compute_results", "[", "'max'", "]", "[", "'loss_numpy'", "]", ")", ":", "\n", "            ", "for", "i", ",", "pi", "in", "enumerate", "(", "path", ")", ":", "\n", "                ", "ows_state", ".", "histories", "[", "i", "]", "[", "pi", "]", ".", "update", "(", "-", "(", "image_loss", "-", "image_refloss", ")", "/", "len", "(", "path", ")", ",", "epoch", ",", "iteration", ")", "\n", "\n", "", "", "for", "refname", "in", "(", "'min'", ",", "'max'", ",", "'rand'", ")", ":", "\n", "            ", "meters", "[", "'loss_'", "+", "kind", "]", ".", "update", "(", "compute_results", "[", "kind", "]", "[", "'loss_numpy'", "]", ".", "mean", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "refloss", "=", "compute_results", "[", "refname", "]", "[", "'loss_numpy'", "]", "\n", "(", "prec1", ",", "prec5", ")", ",", "refcorrect_ks", "=", "misc", ".", "accuracy", "(", "compute_results", "[", "refname", "]", "[", "'x'", "]", ".", "data", ",", "\n", "target", ",", "topk", "=", "(", "1", ",", "5", ")", ",", "return_correct_k", "=", "True", ")", "\n", "refcorrect1", ",", "refcorrect5", "=", "[", "a", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "astype", "(", "bool", ")", "for", "a", "in", "refcorrect_ks", "]", "\n", "history", "[", "'loss_'", "+", "refname", "]", ".", "append", "(", "refloss", ")", "\n", "history", "[", "'top1_'", "+", "refname", "]", ".", "append", "(", "refcorrect1", ")", "\n", "history", "[", "'top5_'", "+", "refname", "]", ".", "append", "(", "refcorrect5", ")", "\n", "meters", "[", "'top1_'", "+", "refname", "]", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "meters", "[", "'top5_'", "+", "refname", "]", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "if", "'soft_loss_numpy'", "in", "compute_results", "[", "refname", "]", ":", "\n", "                ", "meters", "[", "'loss_soft_'", "+", "kind", "]", ".", "update", "(", "compute_results", "[", "kind", "]", "[", "'soft_loss_numpy'", "]", ".", "mean", "(", ")", ",", "input", ".", "size", "(", "0", ")", ")", "\n", "history", "[", "'loss_soft_'", "+", "refname", "]", ".", "append", "(", "compute_results", "[", "refname", "]", "[", "'soft_loss_numpy'", "]", ")", "\n", "\n", "", "", "history", "[", "'configuration'", "]", ".", "append", "(", "compute_results", "[", "'rand'", "]", "[", "'decision'", "]", ")", "\n", "history", "[", "'configuration'", "]", ".", "append", "(", "compute_results", "[", "'rand'", "]", "[", "'loss_numpy'", "]", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "meters", "[", "\"batch_time\"", "]", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "iteration", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "toprint", "=", "f\"Epoch: [{epoch}][{iteration}/{len(train_loader)}]\\t\"", "\n", "toprint", "+=", "(", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", "\n", "'Prec@1 {top1_rand.val:.3f} ({top1_rand.avg:.3f})\\t'", "\n", "'Prec@5 {top5_rand.val:.3f} ({top5_rand.avg:.3f})\\t'", ".", "format", "(", "**", "meters", ")", ")", "\n", "\n", "for", "key", ",", "meter", "in", "meters", ".", "items", "(", ")", ":", "\n", "                ", "if", "key", ".", "startswith", "(", "'loss'", ")", ":", "\n", "                    ", "toprint", "+=", "f'{key} {meter.val:.4f} ({meter.avg:.4f})\\t'", "\n", "", "", "logger", ".", "info", "(", "toprint", ")", "\n", "\n", "# prints a string summarizing the sampling probabilities for each filter", "\n", "probas_str", "=", "\"\"", "\n", "for", "i", ",", "F", "in", "enumerate", "(", "filters", ")", ":", "\n", "                ", "if", "F", ".", "probability", "is", "not", "None", ":", "\n", "                    ", "probas_str", "+=", "'|{} '", ".", "format", "(", "i", ")", "\n", "for", "p", "in", "F", ".", "probability", ":", "\n", "                        ", "probas_str", "+=", "str", "(", "int", "(", "100", "*", "p", ")", ")", "+", "' '", "\n", "", "", "", "probas_log", "=", "None", "\n", "if", "any", "(", "F", ".", "probability", "is", "not", "None", "for", "F", "in", "filters", ")", ":", "\n", "                ", "probas_log", "=", "tuple", "(", "F", ".", "probability", "for", "F", "in", "filters", ")", ",", "\n", "", "history", "[", "'OWS'", "]", ".", "append", "(", "dict", "(", "best_path", "=", "best_path", ",", "temperature", "=", "temperature", ",", "gamma_max", "=", "gamma_max", ",", "\n", "best_pref", "=", "best_perf", ",", "pred_latency", "=", "timing", ",", "probas_log", "=", "probas_log", ")", ")", "\n", "if", "probas_str", ":", "\n", "                ", "probas_str", "=", "'\\n'", "+", "probas_str", "\n", "", "ows_str", "=", "f\"predicted latency: {timing}, perf: {best_perf}, T: {temperature}, gamma: {gamma_max}\"", "\n", "logger", ".", "info", "(", "'best_path: '", "+", "','", ".", "join", "(", "map", "(", "str", ",", "best_path", ")", ")", "+", "ows_str", "+", "probas_str", ")", "\n", "\n", "\n", "", "", "return", "history", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.aows_temp": [[285, 302], ["enumerate", "len", "numpy.log10", "numpy.log10"], "function", ["None"], ["", "def", "aows_temp", "(", "epoch", ",", "epoch_len", ",", "iteration", ",", "args", ")", ":", "\n", "    ", "schedule", "=", "[", "(", "0", ",", "1.0", ")", ",", "(", "args", ".", "AOWS_warmup", ",", "1.0", ")", ",", "\n", "(", "args", ".", "AOWS_warmup", "+", "1", ",", "0.01", ")", ",", "\n", "(", "10", ",", "0.001", ")", ",", "(", "args", ".", "epochs", ",", "args", ".", "AOWS_min_temp", ")", "]", "\n", "cur_phase", "=", "0", "\n", "for", "iphase", ",", "(", "phase", ",", "_", ")", "in", "enumerate", "(", "schedule", ")", ":", "\n", "        ", "if", "epoch", ">=", "phase", ":", "\n", "            ", "cur_phase", "=", "iphase", "\n", "", "", "phase", ",", "start_temp", "=", "schedule", "[", "cur_phase", "]", "\n", "if", "cur_phase", "==", "len", "(", "schedule", ")", "-", "1", ":", "\n", "        ", "return", "start_temp", "\n", "", "end_phase", ",", "end_temp", "=", "schedule", "[", "cur_phase", "+", "1", "]", "\n", "max_iter", "=", "epoch_len", "*", "(", "end_phase", "-", "phase", ")", "\n", "cur_iter", "=", "epoch_len", "*", "(", "epoch", "-", "phase", ")", "+", "iteration", "\n", "ratio", "=", "cur_iter", "/", "max_iter", "\n", "log_T", "=", "(", "1.0", "-", "ratio", ")", "*", "np", ".", "log10", "(", "start_temp", ")", "+", "ratio", "*", "np", ".", "log10", "(", "end_temp", ")", "\n", "return", "10", "**", "log_T", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.solve_ows": [[304, 366], ["hasattr", "viterbi.complete", "range", "train_nas.solve_ows.solve"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.viterbi.complete"], ["", "def", "solve_ows", "(", "model", ",", "epoch", ",", "len_epoch", ",", "iteration", ",", "ows_state", ",", "args", ",", "eval_only", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Solves OWS equation and sets AOWS probabilities when AOWS is activated.\n    \"\"\"", "\n", "if", "hasattr", "(", "model", ",", "'module'", ")", ":", "model", "=", "model", ".", "module", "\n", "\n", "unaries", "=", "[", "[", "0.0", "]", "]", "+", "[", "[", "M", ".", "avg", "for", "M", "in", "C", ".", "values", "(", ")", "]", "for", "C", "in", "ows_state", ".", "histories", "]", "+", "[", "[", "0.0", "]", "]", "\n", "\n", "if", "not", "hasattr", "(", "ows_state", ",", "'pairwise'", ")", ":", "\n", "        ", "pairwise", "=", "[", "]", "\n", "\n", "possible_in_channels", "=", "[", "3", "]", "\n", "possible_outputs", "=", "iter", "(", "[", "F", ".", "configurations", "for", "F", "in", "model", ".", "filters", "]", "+", "[", "[", "1000", "]", "]", ")", "\n", "for", "L", "in", "model", ".", "components", ":", "\n", "            ", "possible_out", "=", "next", "(", "possible_outputs", ")", "\n", "pair", "=", "np", ".", "zeros", "(", "(", "len", "(", "possible_in_channels", ")", ",", "len", "(", "possible_out", ")", ")", ")", "\n", "for", "incoming", ",", "p", "in", "enumerate", "(", "possible_in_channels", ")", ":", "\n", "                ", "for", "outgoing", ",", "l", "in", "enumerate", "(", "possible_out", ")", ":", "\n", "                    ", "var", "=", "latency", ".", "Vartype", "(", "**", "L", ".", "_asdict", "(", ")", ",", "in_channels", "=", "p", ",", "out_channels", "=", "l", ")", "\n", "pair", "[", "incoming", ",", "outgoing", "]", "=", "ows_state", ".", "latency", "[", "var", "]", "\n", "", "", "pairwise", ".", "append", "(", "pair", ")", "\n", "possible_in_channels", "=", "possible_out", "\n", "", "ows_state", ".", "pairwise", "=", "pairwise", "\n", "\n", "", "unaries", ",", "pairwise", ",", "states", "=", "complete", "(", "unaries", ",", "ows_state", ".", "pairwise", ")", "\n", "\n", "def", "solve", "(", "gamma", ")", ":", "\n", "        ", "_", ",", "ipath", "=", "maxsum", "(", "unaries", ",", "-", "gamma", "*", "pairwise", ",", "states", ")", "\n", "perf", ",", "timing", "=", "score", "(", "ipath", ",", "unaries", ",", "pairwise", ",", "detail", "=", "True", ")", "\n", "return", "ipath", ",", "perf", ",", "timing", "\n", "\n", "", "gamma_min", "=", "0.0", "\n", "gamma_max", "=", "10.0", "\n", "timing_max", "=", "solve", "(", "gamma_max", ")", "[", "2", "]", "\n", "\n", "expanding_iterations", "=", "0", "\n", "while", "timing_max", ">", "args", ".", "latency_target", ":", "\n", "        ", "expanding_iterations", "+=", "1", "\n", "if", "expanding_iterations", ">", "2", ":", "\n", "            ", "logging", ".", "warning", "(", "\"Too many expanding loops for gamma, try adjusting gamma_max in the code\"", ")", "\n", "", "gamma_max", "*=", "2", "\n", "timing_max", "=", "solve", "(", "gamma_max", ")", "[", "2", "]", "\n", "\n", "", "for", "_", "in", "range", "(", "args", ".", "gamma_iter", ")", ":", "\n", "        ", "mid_gamma", "=", "0.5", "*", "(", "gamma_min", "+", "gamma_max", ")", "\n", "timing_middle", "=", "solve", "(", "mid_gamma", ")", "[", "2", "]", "\n", "if", "timing_middle", ">", "args", ".", "latency_target", ":", "\n", "            ", "gamma_min", "=", "mid_gamma", "\n", "", "else", ":", "\n", "            ", "gamma_max", "=", "mid_gamma", "\n", "", "", "ipath", ",", "perf", ",", "timing", "=", "solve", "(", "gamma_max", ")", "\n", "\n", "T", "=", "np", ".", "inf", "\n", "if", "args", ".", "AOWS", "and", "epoch", ">=", "args", ".", "AOWS_warmup", "and", "not", "eval_only", ":", "\n", "        ", "T", "=", "aows_temp", "(", "epoch", ",", "len_epoch", ",", "iteration", ",", "args", ")", "\n", "marginals", "=", "sumprod_log", "(", "unaries", "/", "T", ",", "-", "gamma_max", "*", "pairwise", "/", "T", ",", "states", ")", "\n", "assert", "marginals", ".", "shape", "[", "0", "]", "==", "len", "(", "model", ".", "filters", ")", "+", "2", ",", "\"{} {}\"", ".", "format", "(", "marginals", ".", "shape", "[", "0", "]", ",", "len", "(", "model", ".", "filters", ")", ")", "\n", "for", "F", ",", "marginal", "in", "zip", "(", "model", ".", "filters", ",", "marginals", "[", "1", ":", "-", "1", "]", ")", ":", "\n", "            ", "F", ".", "probability", "=", "marginal", "[", ":", "len", "(", "F", ".", "configurations", ")", "]", "\n", "\n", "", "", "best_path", "=", "tuple", "(", "F", ".", "configurations", "[", "i", "]", "for", "(", "F", ",", "i", ")", "in", "zip", "(", "model", ".", "filters", ",", "ipath", "[", "1", ":", "-", "1", "]", ")", ")", "\n", "return", "best_path", ",", "T", ",", "gamma_max", ",", "perf", ",", "timing", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.train_nas.save_checkpoint": [[368, 375], ["torch.save", "os.makedirs", "os.makedirs", "os.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "state", ",", "expname", "=", "''", ")", ":", "\n", "    ", "filename", "=", "f\"checkpoint{state['epoch']:03d}.pth\"", "\n", "if", "expname", ":", "\n", "        ", "os", ".", "makedirs", "(", "expname", ",", "exist_ok", "=", "True", ")", "\n", "filename", "=", "osp", ".", "join", "(", "expname", ",", "filename", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.Moduler.__init__": [[22, 27], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__"], ["def", "__init__", "(", "self", ",", "configurations", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "configurations", "=", "configurations", "\n", "self", ".", "base_channels", "=", "8", "\n", "self", ".", "probability", "=", "None", "# for biased sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.Moduler.forward": [[28, 51], ["x.new_zeros", "isinstance", "dict", "numpy.random.choice", "mask[].cumsum", "x.new_zeros.unsqueeze().unsqueeze", "data[].append", "numpy.arange", "numpy.ones", "x.size", "len", "x.size", "x.size", "numpy.arange", "x.new_zeros.unsqueeze", "x.size", "len", "x.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "channels", "=", "None", ",", "record", "=", "True", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "data", "=", "dict", "(", "x", "=", "data", ")", "\n", "", "x", "=", "data", "[", "'x'", "]", "\n", "\n", "if", "channels", "is", "None", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "np", ".", "arange", "(", "len", "(", "self", ".", "configurations", ")", ")", ",", "\n", "size", "=", "x", ".", "size", "(", "0", ")", ",", "\n", "p", "=", "self", ".", "probability", ")", "\n", "confs", "=", "self", ".", "configurations", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "confs", "=", "channels", "*", "np", ".", "ones", "(", "(", "x", ".", "size", "(", "0", ")", ",", ")", ",", "int", ")", "\n", "\n", "", "mask", "=", "x", ".", "new_zeros", "(", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", "+", "1", ")", ")", "\n", "mask", "[", "np", ".", "arange", "(", "len", "(", "confs", ")", ")", ",", "confs", "]", "=", "1.0", "\n", "mask", "=", "1", "-", "mask", "[", ":", ",", ":", "x", ".", "size", "(", "1", ")", "]", ".", "cumsum", "(", "1", ")", "\n", "x", "=", "x", "*", "mask", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "data", "[", "'x'", "]", "=", "x", "\n", "if", "record", ":", "# record chosen channels", "\n", "            ", "if", "'decision'", "not", "in", "data", ":", "data", "[", "'decision'", "]", "=", "[", "]", "\n", "data", "[", "'decision'", "]", ".", "append", "(", "confs", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.Moduler.__repr__": [[52, 54], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"Moduler({})\"", ".", "format", "(", "self", ".", "configurations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.Flatten.forward": [[57, 59], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.gen_conv": [[66, 88], ["torch.nn.Sequential", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.BatchNorm2d", "torch.nn.ReLU", "isinstance"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "gen_conv", "(", "inp", ",", "oup", ",", "stride", ",", "dw", "=", "False", ",", "bn", "=", "True", ")", ":", "\n", "        ", "mod", "=", "[", "]", "\n", "if", "dw", ":", "\n", "            ", "mod", "=", "[", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "inp", ",", "3", ",", "stride", ",", "1", ",", "groups", "=", "inp", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "inp", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "1", ",", "1", ",", "0", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "", "else", ":", "\n", "            ", "mod", "=", "[", "\n", "nn", ".", "Conv2d", "(", "inp", ",", "oup", ",", "3", ",", "stride", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "oup", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "]", "\n", "", "if", "not", "bn", ":", "\n", "            ", "mod", "=", "[", "m", "for", "m", "in", "mod", "if", "not", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", "]", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "mod", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.strides_channels": [[89, 106], ["numpy.array", "strides.extend", "len"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "strides_channels", "(", ")", ":", "\n", "        ", "\"\"\"\n        follows Mobilenet-v1 definition\n        \"\"\"", "\n", "blocks", "=", "[", "[", "32", ",", "64", "]", ",", "# special first stem block", "\n", "[", "128", ",", "128", "]", ",", "\n", "[", "256", ",", "256", "]", ",", "\n", "[", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", "]", ",", "\n", "[", "1024", ",", "1024", "]", ",", "\n", "]", "\n", "strides", "=", "[", "]", "\n", "for", "block", "in", "blocks", ":", "\n", "            ", "strides", ".", "extend", "(", "[", "2", "]", "+", "[", "1", "]", "*", "(", "len", "(", "block", ")", "-", "1", ")", ")", "\n", "", "base_channels", "=", "np", ".", "array", "(", "[", "c", "for", "block", "in", "blocks", "for", "c", "in", "block", "]", ")", "\n", "\n", "return", "strides", ",", "base_channels", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.__init__": [[107, 148], ["torch.nn.Module.__init__", "model.SlimMobilenet.strides_channels", "model.SlimMobilenet.__init__.divise8"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.strides_channels"], ["", "def", "__init__", "(", "self", ",", "min_width", "=", "0.2", ",", "max_width", "=", "1.5", ",", "levels", "=", "14", ",", "fc_dropout", "=", "0.0", ",", "in_size", "=", "(", "224", ",", "224", ")", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "divise8", "(", "i", ")", ":", "\n", "            ", "return", "(", "np", ".", "maximum", "(", "np", ".", "round", "(", "i", "/", "8", ")", ",", "1", ")", "*", "8", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "strides", ",", "base_channels", "=", "self", ".", "strides_channels", "(", ")", "\n", "depthwise", "=", "[", "0", "]", "+", "[", "1", "]", "*", "(", "len", "(", "base_channels", ")", "-", "1", ")", "\n", "\n", "self", ".", "configurations", "=", "divise8", "(", "base_channels", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "np", ".", "linspace", "(", "min_width", ",", "max_width", ",", "levels", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", ")", "\n", "self", ".", "configurations", "=", "[", "np", ".", "unique", "(", "c", ")", "for", "c", "in", "self", ".", "configurations", "]", "\n", "\n", "self", ".", "components", "=", "[", "]", "\n", "\n", "channels", "=", "[", "self", ".", "in_channels", "]", "+", "[", "int", "(", "c", "[", "-", "1", "]", ")", "for", "c", "in", "self", ".", "configurations", "]", "\n", "inp", "=", "iter", "(", "channels", ")", "\n", "oup", "=", "iter", "(", "channels", "[", "1", ":", "]", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dw", ",", "strid", "in", "zip", "(", "depthwise", ",", "strides", ")", ":", "\n", "            ", "I", "=", "next", "(", "inp", ")", "\n", "O", "=", "next", "(", "oup", ")", "\n", "mod", "=", "self", ".", "gen_conv", "(", "I", ",", "O", ",", "strid", ",", "dw", ")", "\n", "component", "=", "LayerType", "(", "in_size", "=", "in_size", ",", "kernel_size", "=", "3", ",", "stride", "=", "strid", ",", "dw", "=", "bool", "(", "dw", ")", ",", "bias", "=", "False", ")", "\n", "in_size", "=", "(", "in_size", "[", "0", "]", "//", "strid", ",", "in_size", "[", "1", "]", "//", "strid", ")", "\n", "self", ".", "model", ".", "append", "(", "mod", ")", "\n", "self", ".", "components", ".", "append", "(", "component", ")", "\n", "\n", "", "self", ".", "filters", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "conf", ",", "base_chan", "in", "zip", "(", "self", ".", "configurations", ",", "base_channels", ")", ":", "\n", "            ", "F", "=", "Moduler", "(", "conf", ")", "\n", "F", ".", "base_channels", "=", "base_chan", "\n", "self", ".", "filters", ".", "append", "(", "F", ")", "\n", "\n", "", "self", ".", "pool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "self", ".", "fc_dropout", "=", "None", "if", "not", "fc_dropout", "else", "nn", ".", "Dropout", "(", "fc_dropout", ")", "\n", "in_size", "=", "(", "in_size", "[", "0", "]", "//", "7", ",", "in_size", "[", "1", "]", "//", "7", ")", "\n", "\n", "I", "=", "next", "(", "inp", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "I", ",", "self", ".", "out_channels", ")", "\n", "self", ".", "components", ".", "append", "(", "LayerType", "(", "in_size", "=", "in_size", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "dw", "=", "False", ",", "bias", "=", "True", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.forward": [[149, 163], ["enumerate", "model.SlimMobilenet.pool", "data[].view", "model.SlimMobilenet.fc", "torch.tensor", "isinstance", "dict", "zip", "conv", "filter", "data[].size", "model.SlimMobilenet.fc_dropout", "numpy.array"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "data", ",", "configuration", "=", "None", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "data", ",", "dict", ")", ":", "\n", "            ", "data", "=", "dict", "(", "x", "=", "data", ")", "\n", "", "for", "i", ",", "(", "conv", ",", "filter", ")", "in", "enumerate", "(", "zip", "(", "self", ".", "model", ",", "self", ".", "filters", ")", ")", ":", "\n", "            ", "data", "[", "'x'", "]", "=", "conv", "(", "data", "[", "'x'", "]", ")", "\n", "data", "=", "filter", "(", "data", ",", "\n", "channels", "=", "(", "configuration", "[", "i", "]", "if", "configuration", "is", "not", "None", "else", "None", ")", ")", "\n", "", "data", "[", "'x'", "]", "=", "self", ".", "pool", "(", "data", "[", "'x'", "]", ")", "\n", "data", "[", "'x'", "]", "=", "data", "[", "'x'", "]", ".", "view", "(", "data", "[", "'x'", "]", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "fc_dropout", "is", "not", "None", ":", "\n", "            ", "data", "[", "'x'", "]", "=", "self", ".", "fc_dropout", "(", "data", "[", "'x'", "]", ")", "\n", "", "data", "[", "'x'", "]", "=", "self", ".", "fc", "(", "data", "[", "'x'", "]", ")", "\n", "data", "[", "'decision'", "]", "=", "torch", ".", "tensor", "(", "np", ".", "array", "(", "data", "[", "'decision'", "]", ")", ".", "T", ",", "device", "=", "data", "[", "'x'", "]", ".", "device", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.reduce": [[164, 182], ["cls.strides_channels", "zip", "torch.nn.Sequential", "len", "len", "modules.append", "torch.nn.AvgPool2d", "model.Flatten", "torch.nn.Linear", "cls.gen_conv", "len"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.strides_channels", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.model.SlimMobilenet.gen_conv"], ["", "@", "classmethod", "\n", "def", "reduce", "(", "cls", ",", "C", "=", "(", "32", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "1024", ",", "1024", ")", ",", "\n", "bn", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Remove all modulers and reduce according to a single channel configuration\n        \"\"\"", "\n", "modules", "=", "[", "]", "\n", "I", "=", "cls", ".", "in_channels", "\n", "depthwise", "=", "[", "False", "]", "+", "[", "True", "]", "*", "(", "len", "(", "C", ")", "-", "1", ")", "\n", "strides", ",", "base_channels", "=", "cls", ".", "strides_channels", "(", ")", "\n", "assert", "len", "(", "strides", ")", "==", "len", "(", "C", ")", "\n", "\n", "for", "O", ",", "stride", ",", "dw", "in", "zip", "(", "C", ",", "strides", ",", "depthwise", ")", ":", "\n", "            ", "modules", ".", "append", "(", "cls", ".", "gen_conv", "(", "I", ",", "O", ",", "stride", ",", "dw", ",", "bn", "=", "bn", ")", ")", "\n", "I", "=", "O", "\n", "", "modules", "+=", "[", "nn", ".", "AvgPool2d", "(", "7", ")", ",", "Flatten", "(", ")", ",", "nn", ".", "Linear", "(", "I", ",", "cls", ".", "out_channels", ")", "]", "\n", "reduced", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "return", "reduced", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.DelayedKeyboardInterrupt.__enter__": [[11, 14], ["signal.signal"], "methods", ["None"], ["    ", "def", "__enter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "signal_received", "=", "False", "\n", "self", ".", "old_handler", "=", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "handler", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.DelayedKeyboardInterrupt.handler": [[15, 18], ["logging.debug"], "methods", ["None"], ["", "def", "handler", "(", "self", ",", "sig", ",", "frame", ")", ":", "\n", "        ", "self", ".", "signal_received", "=", "(", "sig", ",", "frame", ")", "\n", "logging", ".", "debug", "(", "'SIGINT received. Delaying KeyboardInterrupt.'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.DelayedKeyboardInterrupt.__exit__": [[19, 23], ["signal.signal", "misc.DelayedKeyboardInterrupt.old_handler"], "methods", ["None"], ["", "def", "__exit__", "(", "self", ",", "type", ",", "value", ",", "traceback", ")", ":", "\n", "        ", "signal", ".", "signal", "(", "signal", ".", "SIGINT", ",", "self", ".", "old_handler", ")", "\n", "if", "self", ".", "signal_received", ":", "\n", "            ", "self", ".", "old_handler", "(", "*", "self", ".", "signal_received", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.SWDict.__setitem__": [[36, 40], ["super().__setitem__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.SWDefaultDict.__setitem__"], ["def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "key", "in", "self", ":", "\n", "            ", "raise", "ValueError", "(", "'key'", ",", "key", ",", "'already set'", ")", "\n", "", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.SWDefaultDict.__setitem__": [[46, 50], ["super().__setitem__", "ValueError"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.SWDefaultDict.__setitem__"], ["def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "if", "key", "in", "self", ":", "\n", "            ", "raise", "ValueError", "(", "'key'", ",", "key", ",", "'already set'", ")", "\n", "", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.__init__": [[53, 56], ["misc.MovingAverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "window", ")", ":", "\n", "        ", "self", ".", "window", "=", "window", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.reset": [[57, 62], ["collections.deque"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "history", "=", "deque", "(", ")", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "None", "\n", "self", ".", "val", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.count": [[63, 66], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "count", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "history", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.isfull": [[67, 70], ["len"], "methods", ["None"], ["", "@", "property", "\n", "def", "isfull", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "history", ")", "==", "self", ".", "window", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.__getstate__": [[71, 75], ["misc.MovingAverageMeter.__dict__.copy", "numpy.array"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "state", "[", "'history'", "]", "=", "np", ".", "array", "(", "state", "[", "'history'", "]", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.__setstate__": [[76, 79], ["collections.deque", "misc.MovingAverageMeter.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "state", "[", "'history'", "]", "=", "deque", "(", "state", "[", "'history'", "]", ")", "\n", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.update": [[80, 90], ["misc.MovingAverageMeter.history.append", "len", "misc.MovingAverageMeter.history.popleft"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "epoch", ",", "iteration", ")", ":", "\n", "        ", "self", ".", "history", ".", "append", "(", "val", ")", "\n", "if", "self", ".", "sum", "is", "None", ":", "\n", "            ", "self", ".", "sum", "=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "sum", "+=", "val", "\n", "", "if", "len", "(", "self", ".", "history", ")", ">", "self", ".", "window", ":", "\n", "            ", "self", ".", "sum", "-=", "self", ".", "history", ".", "popleft", "(", ")", "\n", "", "self", ".", "val", "=", "val", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.MovingAverageMeter.__repr__": [[91, 94], ["None"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<MovingAverageMeter of window {} with {} elements, val {}, avg {}>\"", ".", "format", "(", "\n", "self", ".", "window", ",", "self", ".", "count", ",", "self", ".", "val", ",", "self", ".", "avg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.__init__": [[99, 101], ["misc.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.reset": [[102, 107], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.AverageMeter.update": [[108, 113], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.tuplify": [[26, 30], ["isinstance", "isinstance", "tuple", "map", "misc.tuplify", "listything.items"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.tuplify"], ["", "", "", "def", "tuplify", "(", "listything", ")", ":", "\n", "    ", "if", "isinstance", "(", "listything", ",", "list", ")", ":", "return", "tuple", "(", "map", "(", "tuplify", ",", "listything", ")", ")", "\n", "if", "isinstance", "(", "listything", ",", "dict", ")", ":", "return", "{", "k", ":", "tuplify", "(", "v", ")", "for", "k", ",", "v", "in", "listything", ".", "items", "(", ")", "}", "\n", "return", "listything", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.accuracy": [[115, 134], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].float().sum", "res.append", "correct_ks.append", "correct[].float().sum.sum().mul_", "target.view", "correct[].float", "correct[].float().sum.sum"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ",", "return_correct_k", "=", "False", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "correct_ks", "=", "[", "]", "\n", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "sum", "(", ")", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "correct_ks", ".", "append", "(", "correct_k", ")", "\n", "", "if", "return_correct_k", ":", "\n", "        ", "return", "res", ",", "correct_ks", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.misc.soft_cross_entropy": [[136, 145], ["torch.nn.functional.log_softmax", "target.unsqueeze.unsqueeze", "output_log_prob.unsqueeze.unsqueeze", "torch.bmm().view", "output.size", "torch.bmm"], "function", ["None"], ["", "def", "soft_cross_entropy", "(", "output", ",", "target", ")", ":", "\n", "    ", "\"\"\"\n    For knowledge distillation in self-distillation\n    \"\"\"", "\n", "output_log_prob", "=", "torch", ".", "nn", ".", "functional", ".", "log_softmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "target", "=", "target", ".", "unsqueeze", "(", "1", ")", "\n", "output_log_prob", "=", "output_log_prob", ".", "unsqueeze", "(", "2", ")", "\n", "cross_entropy_loss", "=", "-", "torch", ".", "bmm", "(", "target", ",", "output_log_prob", ")", ".", "view", "(", "output", ".", "size", "(", "0", ")", ")", "\n", "return", "cross_entropy_loss", "", "", ""]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.LinearBottleneck.__init__": [[80, 105], ["mxnet.gluon.nn.HybridBlock.__init__", "mxnet_mobilenet.LinearBottleneck.name_scope", "mxnet.gluon.nn.HybridSequential", "mxnet_mobilenet._add_conv", "mxnet_mobilenet._add_conv", "mxnet_mobilenet._add_conv"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "channels", ",", "t", ",", "stride", ",", "\n", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "LinearBottleneck", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "self", ".", "use_shortcut", "=", "stride", "==", "1", "and", "in_channels", "==", "channels", "\n", "with", "self", ".", "name_scope", "(", ")", ":", "\n", "            ", "self", ".", "out", "=", "nn", ".", "HybridSequential", "(", ")", "\n", "\n", "if", "t", "!=", "1", ":", "\n", "                ", "_add_conv", "(", "self", ".", "out", ",", "\n", "in_channels", "*", "t", ",", "\n", "relu6", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "", "_add_conv", "(", "self", ".", "out", ",", "\n", "in_channels", "*", "t", ",", "\n", "kernel", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "pad", "=", "1", ",", "\n", "num_group", "=", "in_channels", "*", "t", ",", "\n", "relu6", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "_add_conv", "(", "self", ".", "out", ",", "\n", "channels", ",", "\n", "active", "=", "False", ",", "\n", "relu6", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.LinearBottleneck.hybrid_forward": [[106, 111], ["mxnet_mobilenet.LinearBottleneck.out", "F.elemwise_add"], "methods", ["None"], ["", "", "def", "hybrid_forward", "(", "self", ",", "F", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "out", "(", "x", ")", "\n", "if", "self", ".", "use_shortcut", ":", "\n", "            ", "out", "=", "F", ".", "elemwise_add", "(", "out", ",", "x", ")", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNet.__init__": [[135, 161], ["logger.info", "mxnet.gluon.block.HybridBlock.__init__", "tuple", "mxnet_mobilenet.MobileNet.name_scope", "mxnet.gluon.nn.HybridSequential", "mxnet.gluon.nn.Dense", "int", "map", "mxnet_mobilenet.MobileNet.features.name_scope", "mxnet_mobilenet._add_conv", "zip", "mxnet_mobilenet.MobileNet.features.add", "mxnet_mobilenet.MobileNet.features.add", "tuple.split", "int", "int", "mxnet_mobilenet._add_conv_dw", "mxnet.gluon.nn.GlobalAvgPool2D", "mxnet.gluon.nn.Flatten", "int", "ci.isdigit"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv_dw"], ["def", "__init__", "(", "self", ",", "multiplier", "=", "1.0", ",", "classes", "=", "1000", ",", "\n", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ",", "configuration", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "configuration", "==", "None", "or", "configuration", "==", "'MOBILENET'", ":", "\n", "            ", "configuration", "=", "(", "32", ",", "64", ",", "128", ",", "128", ",", "256", ",", "256", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "512", ",", "1024", ",", "1024", ")", "\n", "", "else", ":", "\n", "            ", "configuration", "=", "[", "int", "(", "''", ".", "join", "(", "ci", "for", "ci", "in", "c", "if", "ci", ".", "isdigit", "(", ")", ")", ")", "for", "c", "in", "configuration", ".", "split", "(", "','", ")", "]", "\n", "configuration", "=", "tuple", "(", "map", "(", "int", ",", "','", ".", "split", "(", "configuration", ")", ")", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Mobilenet with channel configuration: {}'", ".", "format", "(", "configuration", ")", ")", "\n", "\n", "super", "(", "MobileNet", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "with", "self", ".", "name_scope", "(", ")", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "HybridSequential", "(", "prefix", "=", "''", ")", "\n", "with", "self", ".", "features", ".", "name_scope", "(", ")", ":", "\n", "                ", "_add_conv", "(", "self", ".", "features", ",", "channels", "=", "int", "(", "configuration", "[", "0", "]", "*", "multiplier", ")", ",", "kernel", "=", "3", ",", "pad", "=", "1", ",", "stride", "=", "2", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "dw_channels", "=", "[", "int", "(", "x", "*", "multiplier", ")", "for", "x", "in", "configuration", "[", ":", "-", "1", "]", "]", "\n", "configuration", "=", "[", "int", "(", "x", "*", "multiplier", ")", "for", "x", "in", "configuration", "[", "1", ":", "]", "]", "\n", "strides", "=", "[", "1", ",", "2", "]", "*", "3", "+", "[", "1", "]", "*", "5", "+", "[", "2", ",", "1", "]", "\n", "for", "dwc", ",", "c", ",", "s", "in", "zip", "(", "dw_channels", ",", "configuration", ",", "strides", ")", ":", "\n", "                    ", "_add_conv_dw", "(", "self", ".", "features", ",", "dw_channels", "=", "dwc", ",", "channels", "=", "c", ",", "stride", "=", "s", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "", "self", ".", "features", ".", "add", "(", "nn", ".", "GlobalAvgPool2D", "(", ")", ")", "\n", "self", ".", "features", ".", "add", "(", "nn", ".", "Flatten", "(", ")", ")", "\n", "\n", "", "self", ".", "output", "=", "nn", ".", "Dense", "(", "classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNet.hybrid_forward": [[162, 166], ["mxnet_mobilenet.MobileNet.features", "mxnet_mobilenet.MobileNet.output"], "methods", ["None"], ["", "", "def", "hybrid_forward", "(", "self", ",", "F", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__": [[188, 226], ["mxnet.gluon.nn.HybridBlock.__init__", "mxnet_mobilenet.MobileNetV2.name_scope", "mxnet.gluon.nn.HybridSequential", "mxnet.gluon.nn.HybridSequential", "mxnet_mobilenet.MobileNetV2.features.name_scope", "mxnet_mobilenet._add_conv", "zip", "mxnet_mobilenet._add_conv", "mxnet_mobilenet.MobileNetV2.features.add", "mxnet_mobilenet.MobileNetV2.output.name_scope", "mxnet_mobilenet.MobileNetV2.output.add", "int", "int", "int", "mxnet_mobilenet.MobileNetV2.features.add", "int", "mxnet.gluon.nn.GlobalAvgPool2D", "mxnet.gluon.nn.Conv2D", "mxnet.gluon.nn.Flatten", "mxnet_mobilenet.LinearBottleneck"], "methods", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.__init__", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv"], ["def", "__init__", "(", "self", ",", "multiplier", "=", "1.0", ",", "classes", "=", "1000", ",", "\n", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", "MobileNetV2", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "with", "self", ".", "name_scope", "(", ")", ":", "\n", "            ", "self", ".", "features", "=", "nn", ".", "HybridSequential", "(", "prefix", "=", "'features_'", ")", "\n", "with", "self", ".", "features", ".", "name_scope", "(", ")", ":", "\n", "                ", "_add_conv", "(", "self", ".", "features", ",", "int", "(", "32", "*", "multiplier", ")", ",", "kernel", "=", "3", ",", "\n", "stride", "=", "2", ",", "pad", "=", "1", ",", "relu6", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "\n", "in_channels_group", "=", "[", "int", "(", "x", "*", "multiplier", ")", "for", "x", "in", "[", "32", "]", "+", "[", "16", "]", "+", "[", "24", "]", "*", "2", "\n", "+", "[", "32", "]", "*", "3", "+", "[", "64", "]", "*", "4", "+", "[", "96", "]", "*", "3", "+", "[", "160", "]", "*", "3", "]", "\n", "channels_group", "=", "[", "int", "(", "x", "*", "multiplier", ")", "for", "x", "in", "[", "16", "]", "+", "[", "24", "]", "*", "2", "+", "[", "32", "]", "*", "3", "\n", "+", "[", "64", "]", "*", "4", "+", "[", "96", "]", "*", "3", "+", "[", "160", "]", "*", "3", "+", "[", "320", "]", "]", "\n", "ts", "=", "[", "1", "]", "+", "[", "6", "]", "*", "16", "\n", "strides", "=", "[", "1", ",", "2", "]", "*", "2", "+", "[", "1", ",", "1", ",", "2", "]", "+", "[", "1", "]", "*", "6", "+", "[", "2", "]", "+", "[", "1", "]", "*", "3", "\n", "\n", "for", "in_c", ",", "c", ",", "t", ",", "s", "in", "zip", "(", "in_channels_group", ",", "channels_group", ",", "ts", ",", "strides", ")", ":", "\n", "                    ", "self", ".", "features", ".", "add", "(", "LinearBottleneck", "(", "in_channels", "=", "in_c", ",", "\n", "channels", "=", "c", ",", "\n", "t", "=", "t", ",", "\n", "stride", "=", "s", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", "norm_kwargs", "=", "norm_kwargs", ")", ")", "\n", "\n", "", "last_channels", "=", "int", "(", "1280", "*", "multiplier", ")", "if", "multiplier", ">", "1.0", "else", "1280", "\n", "_add_conv", "(", "self", ".", "features", ",", "\n", "last_channels", ",", "\n", "relu6", "=", "True", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "\n", "self", ".", "features", ".", "add", "(", "nn", ".", "GlobalAvgPool2D", "(", ")", ")", "\n", "\n", "", "self", ".", "output", "=", "nn", ".", "HybridSequential", "(", "prefix", "=", "'output_'", ")", "\n", "with", "self", ".", "output", ".", "name_scope", "(", ")", ":", "\n", "                ", "self", ".", "output", ".", "add", "(", "\n", "nn", ".", "Conv2D", "(", "classes", ",", "1", ",", "use_bias", "=", "False", ",", "prefix", "=", "'pred_'", ")", ",", "\n", "nn", ".", "Flatten", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.MobileNetV2.hybrid_forward": [[227, 231], ["mxnet_mobilenet.MobileNetV2.features", "mxnet_mobilenet.MobileNetV2.output"], "methods", ["None"], ["", "", "", "def", "hybrid_forward", "(", "self", ",", "F", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "output", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv": [[39, 45], ["out.add", "out.add", "mxnet.gluon.nn.Conv2D", "norm_layer", "out.add", "gluoncv.nn.ReLU6", "mxnet.gluon.nn.Activation"], "function", ["None"], ["def", "_add_conv", "(", "out", ",", "channels", "=", "1", ",", "kernel", "=", "1", ",", "stride", "=", "1", ",", "pad", "=", "0", ",", "\n", "num_group", "=", "1", ",", "active", "=", "True", ",", "relu6", "=", "False", ",", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ")", ":", "\n", "    ", "out", ".", "add", "(", "nn", ".", "Conv2D", "(", "channels", ",", "kernel", ",", "stride", ",", "pad", ",", "groups", "=", "num_group", ",", "use_bias", "=", "False", ")", ")", "\n", "out", ".", "add", "(", "norm_layer", "(", "scale", "=", "True", ",", "**", "(", "{", "}", "if", "norm_kwargs", "is", "None", "else", "norm_kwargs", ")", ")", ")", "\n", "if", "active", ":", "\n", "        ", "out", ".", "add", "(", "ReLU6", "(", ")", "if", "relu6", "else", "nn", ".", "Activation", "(", "'relu'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv_dw": [[47, 54], ["mxnet_mobilenet._add_conv", "mxnet_mobilenet._add_conv"], "function", ["home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv", "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet._add_conv"], ["", "", "def", "_add_conv_dw", "(", "out", ",", "dw_channels", ",", "channels", ",", "stride", ",", "relu6", "=", "False", ",", "\n", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ")", ":", "\n", "    ", "_add_conv", "(", "out", ",", "channels", "=", "dw_channels", ",", "kernel", "=", "3", ",", "stride", "=", "stride", ",", "\n", "pad", "=", "1", ",", "num_group", "=", "dw_channels", ",", "relu6", "=", "relu6", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "_add_conv", "(", "out", ",", "channels", "=", "channels", ",", "relu6", "=", "relu6", ",", "\n", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bermanmaxim_AOWS.None.mxnet_mobilenet.get_mobilenet": [[234, 264], ["mxnet.context.cpu", "mxnet_mobilenet.MobileNet", "NotImplementedError"], "function", ["None"], ["", "", "def", "get_mobilenet", "(", "multiplier", "=", "1.0", ",", "pretrained", "=", "False", ",", "ctx", "=", "cpu", "(", ")", ",", "\n", "root", "=", "'~/.mxnet/models'", ",", "norm_layer", "=", "BatchNorm", ",", "norm_kwargs", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"MobileNet model from the\n    `\"MobileNets: Efficient Convolutional Neural Networks for Mobile Vision Applications\"\n    <https://arxiv.org/abs/1704.04861>`_ paper.\n\n    Parameters\n    ----------\n    multiplier : float\n        The width multiplier for controlling the model size. Only multipliers that are no\n        less than 0.25 are supported. The actual number of channels is equal to the original\n        channel size multiplied by this multiplier.\n    pretrained : bool or str\n        Boolean value controls whether to load the default pretrained weights for model.\n        String value represents the hashtag for a certain version of pretrained weights.\n    ctx : Context, default CPU\n        The context in which to load the pretrained weights.\n    root : str, default $MXNET_HOME/models\n        Location for keeping the model parameters.\n    norm_layer : object\n        Normalization layer used (default: :class:`mxnet.gluon.nn.BatchNorm`)\n        Can be :class:`mxnet.gluon.nn.BatchNorm` or :class:`mxnet.gluon.contrib.nn.SyncBatchNorm`.\n    norm_kwargs : dict\n        Additional `norm_layer` arguments, for example `num_devices=4`\n        for :class:`mxnet.gluon.contrib.nn.SyncBatchNorm`.\n    \"\"\"", "\n", "if", "pretrained", ":", "\n", "        ", "raise", "NotImplementedError", "(", "\"No pretrained weights in this modified mobilenet script\"", ")", "\n", "", "net", "=", "MobileNet", "(", "multiplier", ",", "norm_layer", "=", "norm_layer", ",", "norm_kwargs", "=", "norm_kwargs", ",", "**", "kwargs", ")", "\n", "return", "net", "\n", "", ""]]}